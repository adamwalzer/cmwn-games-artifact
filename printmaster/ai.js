/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	eval("function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * Index script\n * @module\n */\n\n__webpack_require__(2);\n\n__webpack_require__(3);\n\n__webpack_require__(4);\n\n// SCREENS\n\nvar _screensIdentify = __webpack_require__(5);\n\nvar _screensIdentify2 = _interopRequireDefault(_screensIdentify);\n\nvar _screensCarousel = __webpack_require__(6);\n\nvar _screensCarousel2 = _interopRequireDefault(_screensCarousel);\n\n__webpack_require__(7);\n\n__webpack_require__(8);\n\n__webpack_require__(9);\n\n__webpack_require__(10);\n\n__webpack_require__(11);\n\n__webpack_require__(12);\n\n__webpack_require__(13);\n\n__webpack_require__(14);\n\n__webpack_require__(15);\n\n__webpack_require__(16);\n\n__webpack_require__(17);\n\npl.game('printmaster', function () {\n\n\tvar typing = function typing(_duration) {\n\t\tvar duration = _duration || '.5s';\n\t\treturn function () {\n\t\t\tthis.on('ui-open', function () {\n\t\t\t\tthis.game.audio.sfx.typing.play();\n\t\t\t\tthis.delay(duration, function () {\n\t\t\t\t\tthis.game.audio.sfx.typing.pause();\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\t};\n\n\tthis.screen('title', function () {\n\n\t\tthis.on('ui-open', function (_event) {\n\t\t\tif (this === _event.targetScope) {\n\t\t\t\tthis.title.start();\n\t\t\t}\n\t\t});\n\n\t\tthis.on('ready', function (_event) {\n\t\t\t// Screens are display:none then when READY get display:block.\n\t\t\t// When a screen is OPEN then it transitions a transform,\n\t\t\t// the delay is to prevent the transition failing to play\n\t\t\t// because of collision of these styles.\n\t\t\t//\n\t\t\tif (!this.is(_event.target)) return;\n\t\t\tthis.delay(0, this.open);\n\t\t\tthis.close($('#loader'));\n\t\t});\n\t});\n\n\tthis.screen('info-discover', typing('5s'));\n\n\tthis.screen('info-arch', typing('.5s'));\n\n\tthis.screen('info-loops', typing('.5s'));\n\n\tthis.screen('info-whorl', typing('.5s'));\n\n\tthis.screen('info-double-loop', typing('.5s'));\n\n\tthis.screen('info-id', typing('3.25s'));\n\n\tthis.screen('identify', _screensIdentify2['default']);\n\n\tthis.screen('carousel', _screensCarousel2['default']);\n\n\tthis.screen('info-lets-dust', typing('1s'));\n\n\tthis.screen('flip', function () {\n\t\tthis.next = function () {\n\t\t\tthis.game.quit.okay();\n\t\t};\n\n\t\tthis.on('ui-open', function () {\n\t\t\tif (this.audio && this.audio.sfx) {\n\t\t\t\tthis.delay('11s', this.audio.sfx.play.bind(this.audio.sfx));\n\t\t\t}\n\t\t});\n\t});\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wcmludG1hc3Rlci9zb3VyY2UvanMvaW5kZXguanM/OGUzMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O29CQUlPLENBQTJCOztvQkFDM0IsQ0FBdUM7O29CQUN2QyxDQUFlOzs7OzJDQUdELENBQW9COzs7OzJDQUNwQixDQUFvQjs7OztvQkFFbEMsQ0FBb0M7O29CQUNwQyxDQUFtQzs7b0JBQ25DLENBQTZCOztvQkFDN0IsRUFBNkI7O29CQUM3QixFQUE2Qjs7b0JBQzdCLEVBQThCOztvQkFDOUIsRUFBdUM7O29CQUN2QyxFQUFrQzs7b0JBQ2xDLEVBQXlDOztvQkFDekMsRUFBc0M7O29CQUN0QyxFQUE2Qjs7QUFFcEMsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsWUFBWTs7QUFFbEMsS0FBSSxNQUFNLEdBQUcsU0FBVCxNQUFNLENBQVksU0FBUyxFQUFFO0FBQ2hDLE1BQUksUUFBUSxHQUFHLFNBQVMsSUFBSSxLQUFLLENBQUM7QUFDbEMsU0FBTyxZQUFXO0FBQ2pCLE9BQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLFlBQVc7QUFDN0IsUUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNsQyxRQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxZQUFXO0FBQy9CLFNBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7S0FDbkMsQ0FBQyxDQUFDO0lBQ0gsQ0FBQyxDQUFDO0dBQ0gsQ0FBQztFQUNGOztBQUVELEtBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLFlBQVk7O0FBRWhDLE1BQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLFVBQVUsTUFBTSxFQUFFO0FBQ3BDLE9BQUksSUFBSSxLQUFLLE1BQU0sQ0FBQyxXQUFXLEVBQUU7QUFDaEMsUUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNuQjtHQUNELENBQUMsQ0FBQzs7QUFFSCxNQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFVLE1BQU0sRUFBRTs7Ozs7O0FBTWxDLE9BQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxPQUFPO0FBQ3BDLE9BQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6QixPQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0dBQ3pCLENBQUMsQ0FBQztFQUVILENBQUMsQ0FBQzs7QUFFSCxLQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzs7QUFFM0MsS0FBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7O0FBRXhDLEtBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDOztBQUV6QyxLQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzs7QUFFekMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzs7QUFFL0MsS0FBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7O0FBRXhDLEtBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSwrQkFBVyxDQUFDOztBQUVsQyxLQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsK0JBQVcsQ0FBQzs7QUFFbEMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzs7QUFFNUMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsWUFBWTtBQUMvQixNQUFJLENBQUMsSUFBSSxHQUFHLFlBQVk7QUFDdkIsT0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7R0FDdEIsQ0FBQzs7QUFFRixNQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxZQUFXO0FBQzdCLE9BQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtBQUNoQyxRQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM1RDtHQUNELENBQUMsQ0FBQztFQUNILENBQUMsQ0FBQztDQUdILENBQUMiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSW5kZXggc2NyaXB0XG4gKiBAbW9kdWxlXG4gKi9cbmltcG9ydCAnLi90ZXN0UGxhdGZvcm1JbnRlZ3JhdGlvbic7XG5pbXBvcnQgJy4uLy4uLy4uLy4uLy4uL2pzLWludGVyYWN0aXZlLWxpYnJhcnknO1xuaW1wb3J0ICcuL2NvbmZpZy5nYW1lJztcblxuLy8gU0NSRUVOU1xuaW1wb3J0IGlkZW50aWZ5IGZyb20gJy4vc2NyZWVucy9pZGVudGlmeSc7XG5pbXBvcnQgY2Fyb3VzZWwgZnJvbSAnLi9zY3JlZW5zL2Nhcm91c2VsJztcblxuaW1wb3J0ICcuL2NvbXBvbmVudHMvc2NyZWVuLWJhc2ljL2JlaGF2aW9yJztcbmltcG9ydCAnLi9jb21wb25lbnRzL3NjcmVlbi1xdWl0L2JlaGF2aW9yJztcbmltcG9ydCAnLi9jb21wb25lbnRzL3RpdGxlL2JlaGF2aW9yJztcbmltcG9ydCAnLi9jb21wb25lbnRzL2ZyYW1lL2JlaGF2aW9yJztcbmltcG9ydCAnLi9jb21wb25lbnRzL3Njb3JlL2JlaGF2aW9yJztcbmltcG9ydCAnLi9jb21wb25lbnRzL3JldmVhbC9iZWhhdmlvcic7XG5pbXBvcnQgJy4vY29tcG9uZW50cy9tdWx0aXBsZS1jaG9pY2UvYmVoYXZpb3InO1xuaW1wb3J0ICcuL2NvbXBvbmVudHMvc2VsZWN0YWJsZS9iZWhhdmlvcic7XG5pbXBvcnQgJy4vY29tcG9uZW50cy9zZWxlY3RhYmxlLXJldmVhbC9iZWhhdmlvcic7XG5pbXBvcnQgJy4vY29tcG9uZW50cy9hdWRpby1zZXF1ZW5jZS9iZWhhdmlvcic7XG5pbXBvcnQgJy4vY29tcG9uZW50cy9tb2RhbC9iZWhhdmlvcic7XG5cbnBsLmdhbWUoJ3ByaW50bWFzdGVyJywgZnVuY3Rpb24gKCkge1xuXG5cdHZhciB0eXBpbmcgPSBmdW5jdGlvbihfZHVyYXRpb24pIHtcblx0XHR2YXIgZHVyYXRpb24gPSBfZHVyYXRpb24gfHwgJy41cyc7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5vbigndWktb3BlbicsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR0aGlzLmdhbWUuYXVkaW8uc2Z4LnR5cGluZy5wbGF5KCk7XG5cdFx0XHRcdHRoaXMuZGVsYXkoZHVyYXRpb24sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHRoaXMuZ2FtZS5hdWRpby5zZngudHlwaW5nLnBhdXNlKCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0fTtcblx0fVxuXG5cdHRoaXMuc2NyZWVuKCd0aXRsZScsIGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMub24oJ3VpLW9wZW4nLCBmdW5jdGlvbiAoX2V2ZW50KSB7XG5cdFx0XHRpZiAodGhpcyA9PT0gX2V2ZW50LnRhcmdldFNjb3BlKSB7XG5cdFx0XHRcdHRoaXMudGl0bGUuc3RhcnQoKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHRoaXMub24oJ3JlYWR5JywgZnVuY3Rpb24gKF9ldmVudCkge1xuXHRcdFx0Ly8gU2NyZWVucyBhcmUgZGlzcGxheTpub25lIHRoZW4gd2hlbiBSRUFEWSBnZXQgZGlzcGxheTpibG9jay5cblx0XHRcdC8vIFdoZW4gYSBzY3JlZW4gaXMgT1BFTiB0aGVuIGl0IHRyYW5zaXRpb25zIGEgdHJhbnNmb3JtLFxuXHRcdFx0Ly8gdGhlIGRlbGF5IGlzIHRvIHByZXZlbnQgdGhlIHRyYW5zaXRpb24gZmFpbGluZyB0byBwbGF5XG5cdFx0XHQvLyBiZWNhdXNlIG9mIGNvbGxpc2lvbiBvZiB0aGVzZSBzdHlsZXMuXG5cdFx0XHQvLyBcblx0XHRcdGlmICghdGhpcy5pcyhfZXZlbnQudGFyZ2V0KSkgcmV0dXJuO1xuXHRcdFx0dGhpcy5kZWxheSgwLCB0aGlzLm9wZW4pO1xuXHRcdFx0dGhpcy5jbG9zZSgkKCcjbG9hZGVyJykpO1xuXHRcdH0pO1xuXG5cdH0pO1xuXG5cdHRoaXMuc2NyZWVuKCdpbmZvLWRpc2NvdmVyJywgdHlwaW5nKCc1cycpKTtcblxuXHR0aGlzLnNjcmVlbignaW5mby1hcmNoJywgdHlwaW5nKCcuNXMnKSk7XG5cblx0dGhpcy5zY3JlZW4oJ2luZm8tbG9vcHMnLCB0eXBpbmcoJy41cycpKTtcblxuXHR0aGlzLnNjcmVlbignaW5mby13aG9ybCcsIHR5cGluZygnLjVzJykpO1xuXG5cdHRoaXMuc2NyZWVuKCdpbmZvLWRvdWJsZS1sb29wJywgdHlwaW5nKCcuNXMnKSk7XG5cblx0dGhpcy5zY3JlZW4oJ2luZm8taWQnLCB0eXBpbmcoJzMuMjVzJykpO1xuXG5cdHRoaXMuc2NyZWVuKCdpZGVudGlmeScsIGlkZW50aWZ5KTtcblxuXHR0aGlzLnNjcmVlbignY2Fyb3VzZWwnLCBjYXJvdXNlbCk7XG5cblx0dGhpcy5zY3JlZW4oJ2luZm8tbGV0cy1kdXN0JywgdHlwaW5nKCcxcycpKTtcblxuXHR0aGlzLnNjcmVlbignZmxpcCcsIGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLm5leHQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aGlzLmdhbWUucXVpdC5va2F5KCk7XG5cdFx0fTtcblxuXHRcdHRoaXMub24oJ3VpLW9wZW4nLCBmdW5jdGlvbigpIHtcblx0XHRcdGlmKHRoaXMuYXVkaW8gJiYgdGhpcy5hdWRpby5zZngpIHtcblx0XHRcdFx0dGhpcy5kZWxheSgnMTFzJywgdGhpcy5hdWRpby5zZngucGxheS5iaW5kKHRoaXMuYXVkaW8uc2Z4KSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xuXG5cbn0pO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9wcmludG1hc3Rlci9zb3VyY2UvanMvaW5kZXguanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 2 */
/***/ function(module, exports) {

	eval("if (window.parent === window) {\n\twindow.location.href = 'https://www.changemyworldnow.com/';\n} else {\n\tdocument.domain = 'changemyworldnow.com';\n}//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wcmludG1hc3Rlci9zb3VyY2UvanMvdGVzdFBsYXRmb3JtSW50ZWdyYXRpb24uanM/OGRmNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssTUFBTSxFQUFFO0FBQzdCLE9BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLG1DQUFtQyxDQUFDO0NBQzNELE1BQU07QUFDTixTQUFRLENBQUMsTUFBTSxHQUFHLHNCQUFzQixDQUFDIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpZiAod2luZG93LnBhcmVudCA9PT0gd2luZG93KSB7XG5cdHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJ2h0dHBzOi8vd3d3LmNoYW5nZW15d29ybGRub3cuY29tLyc7XG59IGVsc2Uge1xuXHRkb2N1bWVudC5kb21haW4gPSAnY2hhbmdlbXl3b3JsZG5vdy5jb20nO1xufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9wcmludG1hc3Rlci9zb3VyY2UvanMvdGVzdFBsYXRmb3JtSW50ZWdyYXRpb24uanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 3 */
/***/ function(module, exports) {

	eval("/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/build/\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\n/**\\n * Boot file for the Play library.\\n *\\n * @module\\n *\\n * @author Micah Rolon <micah@ginasink.com>\\n *\\n * @requires jQExtentions\\n * @requires play\\n */\\n\\n__webpack_require__(4);\\n\\nvar _play = __webpack_require__(15);\\n\\nvar _play2 = _interopRequireDefault(_play);\\n\\n/**\\n * Begin running the library\\n */\\nfunction run() {\\n  _play2['default'].game.run();\\n}\\n\\n// export namespace to global object.\\nwindow.play = window.pl = _play2['default'];\\n\\n// Invoke 'run' when DOM has finished loading.\\ndocument.addEventListener('DOMContentLoaded', run, false);//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvbWFpbi5qcz82NDgwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7b0JBVU8sQ0FBYzs7Z0NBQ0osRUFBTTs7Ozs7OztBQUt2QixTQUFTLEdBQUcsR0FBSTtBQUNmLG9CQUFLLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztDQUNoQjs7O0FBR0QsTUFBTSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsRUFBRSxvQkFBTyxDQUFDOzs7QUFHL0IsUUFBUSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQm9vdCBmaWxlIGZvciB0aGUgUGxheSBsaWJyYXJ5LlxuICpcbiAqIEBtb2R1bGVcbiAqXG4gKiBAYXV0aG9yIE1pY2FoIFJvbG9uIDxtaWNhaEBnaW5hc2luay5jb20+XG4gKlxuICogQHJlcXVpcmVzIGpRRXh0ZW50aW9uc1xuICogQHJlcXVpcmVzIHBsYXlcbiAqL1xuaW1wb3J0ICdqUUV4dGVudGlvbnMnO1xuaW1wb3J0IHBsYXkgZnJvbSAncGxheSc7XG5cbi8qKlxuICogQmVnaW4gcnVubmluZyB0aGUgbGlicmFyeVxuICovXG5mdW5jdGlvbiBydW4gKCkge1xuXHRwbGF5LmdhbWUucnVuKCk7XG59XG5cbi8vIGV4cG9ydCBuYW1lc3BhY2UgdG8gZ2xvYmFsIG9iamVjdC5cbndpbmRvdy5wbGF5ID0gd2luZG93LnBsID0gcGxheTtcblxuLy8gSW52b2tlICdydW4nIHdoZW4gRE9NIGhhcyBmaW5pc2hlZCBsb2FkaW5nLlxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIHJ1biwgZmFsc2UpO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zb3VyY2UvbWFpbi5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"module.exports = __webpack_require__(3);//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbnRlcm9wLXJlcXVpcmUtZGVmYXVsdC5qcz8zODViIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qc1wiKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvaW50ZXJvcC1yZXF1aXJlLWRlZmF1bHQuanNcbiAqKiBtb2R1bGUgaWQgPSAyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\teval(\"\\\"use strict\\\";\\n\\nexports.__esModule = true;\\n\\nexports.default = function (obj) {\\n  return obj && obj.__esModule ? obj : {\\n    default: obj\\n  };\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanM/OTA3YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIGRlZmF1bHQ6IG9ialxuICB9O1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzXG4gKiogbW9kdWxlIGlkID0gM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\n/**\\n * Extentions to jQuery used by the library.\\n * \\n * @module\\n * @author Micah Rolon <micah@ginasink.com>\\n *\\n * @requires types/Dimensions\\n * @requires Matrix\\n */\\n\\nvar _typesDimensions = __webpack_require__(5);\\n\\nvar _libMatrix = __webpack_require__(14);\\n\\nvar _libMatrix2 = _interopRequireDefault(_libMatrix);\\n\\n/**\\n * jQuery's prototype\\n * @external jQuery\\n * @see {@link http://api.jquery.com/}\\n */\\n\\n(function () {\\n\\tvar original;\\n\\n\\toriginal = {\\n\\t\\tposition: this.position\\n\\t};\\n\\n\\t/**\\n  * Resolves the scope for each of the set of matched nodes.\\n  * @function external:jQuery#scope\\n  * @returns {Scope|array} Scope - for 1 result. array - for multiple.\\n  */\\n\\tthis.scope = function () {\\n\\t\\tvar result;\\n\\n\\t\\tresult = [];\\n\\n\\t\\tthis.each(function () {\\n\\t\\t\\tvar $node, scope;\\n\\n\\t\\t\\t$node = $(this);\\n\\t\\t\\tscope = $node.data('pl-scope');\\n\\n\\t\\t\\tif (!scope) {\\n\\t\\t\\t\\tscope = $node.closest('.pl-scope').data('pl-scope');\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (scope) result.push(scope);\\n\\t\\t});\\n\\n\\t\\treturn result.length > 1 ? result : result[0];\\n\\t};\\n\\n\\t/**\\n  * Resolves the id on the first node in the collection. The id can be sourced from a node's 'id', 'pl-id' or 'pl-component' arguments.\\n  * @function external:jQuery#id\\n  * @arg {string} [_set] Name to set as the node's id.\\n  * @returns {string} The resolved id.\\n  */\\n\\tthis.id = function (_set) {\\n\\t\\tif (_set !== undefined) {\\n\\t\\t\\t// Remove attribute.\\n\\t\\t\\tif (~['', null].indexOf(_set)) {\\n\\t\\t\\t\\tthis.attr('id', null);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If document already has the id defined then set as a unique library id.\\n\\t\\t\\tif ($(_set).length) {\\n\\t\\t\\t\\tthis.attr('pl-id', _set);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.attr('id', _set);\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this;\\n\\t\\t}\\n\\n\\t\\treturn this.attr('id') || this.attr('pl-id') || this.attr('pl-component');\\n\\t};\\n\\n\\t/**\\n  * Provides the 'relative' CSS selector for the first node in the collection.\\n  * @function external:jQuery#address\\n  * @returns {string}\\n  *\\n  * @example\\n  * // HTML: <div id=\\\"sweater\\\" class=\\\"wide\\\"></div>\\n  * $('#sweater').address() // div#sweater.wide\\n  */\\n\\tthis.address = function () {\\n\\t\\tvar tag, id, classes;\\n\\n\\t\\ttag = this[0].nodeName.toLowerCase();\\n\\t\\tid = this.attr('id');\\n\\t\\tclasses = this.attr('class') ? '.' + this.attr('class').split(' ').join('.') : '';\\n\\n\\t\\treturn tag + (id ? '#' + id : '') + classes;\\n\\t};\\n\\n\\t/**\\n  * Provides a node's UPPER CASE class names. Given '_test' it will check if the node has the class.\\n  * @function external:jQuery#state\\n  * @arg {string} [_test] The UPPER CASE class name to test on the first node in the collection.\\n  * @returns {string|array|boolean} string - for one result. array - for multiple. boolean - for tests.\\n  */\\n\\tthis.state = function (_test) {\\n\\t\\tvar classes;\\n\\n\\t\\tif (_test) return this.hasClass(_test.toUpperCase());\\n\\n\\t\\tclasses = (this.attr('class') || '').match(/[0-9A-Z]+(?:-[0-9A-Z]+)?/g);\\n\\n\\t\\treturn classes && (classes.length === 1 ? classes[0] : classes);\\n\\t};\\n\\n\\tthis.size = function () {\\n\\t\\tvar size;\\n\\n\\t\\tif (!arguments.length) {\\n\\t\\t\\tsize = _typesDimensions.Size.create().set(this.width(), this.height());\\n\\t\\t} else {\\n\\t\\t\\tsize = _typesDimensions.Size.create(arguments);\\n\\t\\t\\tthis.css(size);\\n\\t\\t}\\n\\n\\t\\treturn size;\\n\\t};\\n\\n\\tthis.position = function () {\\n\\t\\tvar pos;\\n\\n\\t\\tif (!arguments.length) {\\n\\t\\t\\tpos = original.position.call(this);\\n\\t\\t\\tpos = _typesDimensions.Point.create().set(pos.left, pos.top);\\n\\t\\t} else {\\n\\t\\t\\tpos = _typesDimensions.Point.create(arguments);\\n\\n\\t\\t\\tthis.css({\\n\\t\\t\\t\\tposition: 'relative',\\n\\t\\t\\t\\tleft: pos.x,\\n\\t\\t\\t\\ttop: pos.y\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn pos;\\n\\t};\\n\\n\\t/**\\n  * Provides the jQuery offset for the first node in the collection.\\n  * Given a point, all nodes in the collection will get {position: absolute;} to the corrdinates.\\n  * @function external:jQuery#absolutePosition\\n  * @returns {Point}\\n  */\\n\\tthis.absolutePosition = function () {\\n\\t\\tvar offset;\\n\\n\\t\\tif (!arguments.length) {\\n\\t\\t\\toffset = this.offset();\\n\\n\\t\\t\\treturn _typesDimensions.Point.create().set(offset.left, offset.top);\\n\\t\\t} else {\\n\\t\\t\\toffset = _typesDimensions.Point.create(arguments);\\n\\n\\t\\t\\tthis.css({\\n\\t\\t\\t\\tposition: 'absolute',\\n\\t\\t\\t\\ttop: offset.y,\\n\\t\\t\\t\\tleft: offset.x\\n\\t\\t\\t});\\n\\n\\t\\t\\treturn offset;\\n\\t\\t}\\n\\t};\\n\\n\\t/**\\n  * Sets a CSS matrix transform on all nodes in the collection. (overloaded)\\n  * @function external:jQuery#transform\\n  * @arg {number} [_scaleX] - scale x\\n  * @arg {number} [_shearY] - shear y\\n  * @arg {number} [_shearX] - shear x\\n  * @arg {number} [_scaleY] - scale y\\n  * @arg {number} [_translateX] - translate x\\n  * @arg {number} [_translateY] - translate y\\n  * @returns {Matrix}\\n  */\\n\\n\\t/**\\n  * Provides the CSS matrix transform for the first node in the collection.\\n  * @function external:jQuery#transform\\n  * @returns {Matrix}\\n  */\\n\\tthis.transform = function () {\\n\\t\\tvar t, matrix, is3d;\\n\\n\\t\\tmatrix = new _libMatrix2['default']();\\n\\n\\t\\tif (!arguments.length) {\\n\\t\\t\\tt = this.css('transform');\\n\\t\\t\\tis3d = !! ~t.indexOf('matrix3d');\\n\\n\\t\\t\\tif (t !== 'none') {\\n\\t\\t\\t\\tt = ((t.match(/\\\\(([,\\\\d\\\\.\\\\s\\\\-]+)\\\\)/) || [])[1] || '').split(/\\\\s*,\\\\s*/);\\n\\t\\t\\t\\tif (is3d) {\\n\\t\\t\\t\\t\\tt = (function (_matrix) {\\n\\t\\t\\t\\t\\t\\tvar i, result;\\n\\n\\t\\t\\t\\t\\t\\tresult = [];\\n\\n\\t\\t\\t\\t\\t\\tfor (i = 0; i < _matrix.length; i += 4) {\\n\\t\\t\\t\\t\\t\\t\\tresult = result.concat(_matrix.slice(i, i + 2));\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\treturn result;\\n\\t\\t\\t\\t\\t})(t);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tt = t.map(parseFloat);\\n\\n\\t\\t\\t\\tmatrix.setTransform.apply(matrix, t);\\n\\n\\t\\t\\t\\treturn matrix;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn t;\\n\\t\\t}\\n\\n\\t\\tmatrix.setTransform.apply(matrix, arguments);\\n\\n\\t\\tthis.css('transform', matrix.toCSS());\\n\\n\\t\\treturn matrix;\\n\\t};\\n\\n\\t/**\\n  * Getter/Setter for the CSS transform translation. (overloaded)\\n  * @function external:jQuery#transformPosition\\n  * @arg {Point} _point - A point object {x,y}\\n  * @returns {Point}\\n  */\\n\\n\\t/**\\n  * Getter/Setter for the CSS transform translation.\\n  * @function external:jQuery#transformPosition\\n  * @arg {number} _x - x coordinate\\n  * @arg {number} _y - y coordinate\\n  * @returns {Point}\\n  */\\n\\tthis.transformPosition = function () {\\n\\t\\tvar matrix, point;\\n\\n\\t\\tmatrix = this.transform();\\n\\t\\tpoint = _typesDimensions.Point.create().set(0, 0);\\n\\n\\t\\tif (!arguments.length) {\\n\\t\\t\\tif (matrix !== 'none') point.set(matrix.e, matrix.f);\\n\\t\\t} else {\\n\\t\\t\\tif (matrix === 'none') matrix = new _libMatrix2['default']();\\n\\n\\t\\t\\tpoint.set.apply(point, arguments);\\n\\t\\t\\tmatrix.translate(point.x, point.y);\\n\\t\\t\\tthis.css('transform', matrix.toCSS());\\n\\t\\t}\\n\\n\\t\\treturn point;\\n\\t};\\n\\n\\t/**\\n  * Getter for the CSS transform scale. (overloaded)\\n  * @function external:jQuery#transformPosition\\n  * @returns {Point}\\n  */\\n\\n\\t/**\\n  * Setter for the CSS transform scale. (overloaded)\\n  * @function external:jQuery#transformPosition\\n  * @arg {Point} _point - A point object {x,y}\\n  * @returns {Point}\\n  */\\n\\n\\t/**\\n  * Setter for the CSS transform scale.\\n  * @function external:jQuery#transformPosition\\n  * @arg {number} _x - x coordinate\\n  * @arg {number} _y - y coordinate\\n  * @returns {Point}\\n  */\\n\\tthis.transformScale = function () {\\n\\t\\tvar matrix, scale;\\n\\n\\t\\tmatrix = this.transform();\\n\\t\\tscale = _typesDimensions.Point.create().set(1, 1);\\n\\n\\t\\tif (!arguments.length) {\\n\\t\\t\\tif (matrix !== 'none') scale.set(matrix.a, matrix.d);\\n\\t\\t} else {\\n\\t\\t\\tif (matrix === 'none') matrix = new _libMatrix2['default']();\\n\\n\\t\\t\\tscale.set.apply(scale, arguments);\\n\\t\\t\\tmatrix.scale(scale.x, scale.y);\\n\\t\\t\\tthis.css('transform', matrix.toCSS());\\n\\t\\t}\\n\\n\\t\\treturn scale;\\n\\t};\\n\\n\\t/**\\n  * Accessor method for `pl` attributes.\\n  */\\n\\tthis.pl = function (_name, _value) {\\n\\t\\tvar args;\\n\\t\\targs = ['pl-' + _name];\\n\\t\\tif (typeof _value !== 'undefined') args.push(_value);\\n\\n\\t\\tif (_value === null) {\\n\\t\\t\\tthis.removeAttr('pl-' + _name);\\n\\t\\t\\treturn this;\\n\\t\\t}\\n\\n\\t\\treturn this.attr.apply(this, args);\\n\\t};\\n}).call($.fn);//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _Object$defineProperties = __webpack_require__(6)['default'];\\n\\nvar _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * \\n * @module\\n * @version 1.1\\n * @author Micah Rolon <functionmicah@gmail.com>\\n * @requires module:types/BasicArray~BasicArray\\n *\\n * @desc *Created: 11/12/14*\\n *\\n * This file contains objects for containing values about a plane. i.e. x or width.\\n * Adds the convenience of keeping these values paired to passed around your application.\\n * It also includes methods which you perform on the values and returns a new object\\n * so the original values are maintained.\\n *\\n * #### Usage\\n *\\n * New instances can be created by calling the create method.\\n * ```\\n * cursorLocation = Point.create();\\n * ```\\n *\\n * Then call `set()` to apply your values.\\n * ```\\n * cursorLocation.set(event.clientX, event.clientY);\\n * ```\\n *\\n * Then you can use the calculation methods to perform transformations.\\n * ```\\n * relativeCursor = cursorLocation.scale(zoom);\\n * ```\\n *\\n * #### Developer Notes\\n *\\n * When adding new methods make sure you are returning a new instance.\\n * Dimensional objects are meant to be immutable.\\n *\\n * Follow this pattern:\\n * ```\\n * this.method = function () {\\n *     // set with your calculated values.\\n *     return this.create().set( ... )\\n * }\\n * ```\\n *\\n * #### Change Log\\n * *v1.1 - 12/13/15*\\n * - Defined setter/getter properties for unique planes keys. You can now do `point.width = 10`.\\n */\\n\\n/*jslint browser: true, eqeq: true, nomen: true, sloppy: true, white: true */\\n\\nvar _typesBasicArray = __webpack_require__(9);\\n\\nvar _typesBasicArray2 = _interopRequireDefault(_typesBasicArray);\\n\\nvar Dimension, Size, Point;\\n\\n/**\\n * The native Array\\n * @external Array\\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array}\\n */\\n\\n/**\\n * Array prototype extension\\n * Creates an instance of `_Thing` and passes the array to its set function as its arguments.\\n * @function external:Array#to\\n * @arg {Point|Size|string} _Thing - A Dimension object or one the strings 'point'/'size'\\n * @example\\n * somePoint = [10, 10].to(Point);\\n * somePoint = [10, 10].to('point');\\n */\\nArray.prototype.to = function (_Thing) {\\n\\tvar map;\\n\\n\\tmap = {\\n\\t\\tpoint: Point,\\n\\t\\tsize: Size\\n\\t};\\n\\n\\tif (typeof _Thing === 'string') {\\n\\t\\treturn map[_Thing.toLowerCase()].create().set(this);\\n\\t} else if (typeof _Thing === 'object' && ~[Point.set, Size.set].indexOf(_Thing.set)) {\\n\\t\\tif (!_Thing.isPrototypeOf(this)) {\\n\\t\\t\\treturn _Thing.set.apply(_Thing.create(), this);\\n\\t\\t}\\n\\t}\\n\\n\\treturn this;\\n};\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. use `Dimension.create()` to get a new instance.\\n * @class\\n * @classdesc Base class for dimensional objects consisting of 2 planes.<br>\\n * <span class=\\\"important\\\">NOTE:</span> This is an immutable class. Methods return a new object with the original as its prototype.\\n * @extends module:types/BasicArray~BasicArray\\n */\\nDimension = _typesBasicArray2['default'].extend(function () {\\n\\tvar originalMap;\\n\\n\\toriginalMap = this.map;\\n\\n\\tthis[0] = this[1] = 0;\\n\\tthis.planeMap = null, this.length = 2;\\n\\n\\t/**\\n  * Provides a new instance.\\n  * @arg {array} _argumentsArray - Create a new instace with an arguments array.\\n  * @returns {Dimension}\\n  */\\n\\tthis.create = function (_argumentsArray) {\\n\\t\\tvar instance;\\n\\n\\t\\tinstance = this.proto();\\n\\n\\t\\tif (_argumentsArray) instance.set.apply(instance, _argumentsArray);\\n\\n\\t\\treturn instance;\\n\\t};\\n\\n\\t/**\\n  * Incerement each plane by a value or specify each plane.\\n  * @arg {number} _val - plane a of (a,b)\\n  * @arg {number} [_plane2] - plane b of (a,b)\\n  * @returns {Dimension}\\n  */\\n\\tthis.inc = function (_val, _plane2) {\\n\\t\\tvar a, b;\\n\\n\\t\\tif (_val.length === 2) {\\n\\t\\t\\ta = _val[0];\\n\\t\\t\\tb = _val[1];\\n\\t\\t} else if (_plane2 != null) {\\n\\t\\t\\ta = _val;\\n\\t\\t\\tb = _plane2;\\n\\t\\t} else {\\n\\t\\t\\ta = b = _val;\\n\\t\\t}\\n\\n\\t\\treturn this.create().set(this[0] + a, this[1] + b);\\n\\t};\\n\\n\\t/**\\n  * Decerement each plane by a value or specify each plane.\\n  * @arg {number} _val - plane a of (a,b)\\n  * @arg {number} [_plane2] - plane b of (a,b)\\n  * @returns {Dimension}\\n  */\\n\\tthis.dec = function (_val, _plane2) {\\n\\t\\tvar a, b;\\n\\n\\t\\tif (_val.length === 2) {\\n\\t\\t\\ta = _val[0];\\n\\t\\t\\tb = _val[1];\\n\\t\\t} else if (_plane2 != null) {\\n\\t\\t\\ta = _val;\\n\\t\\t\\tb = _plane2;\\n\\t\\t} else {\\n\\t\\t\\ta = b = _val;\\n\\t\\t}\\n\\n\\t\\treturn this.create().set(this[0] - a, this[1] - b);\\n\\t};\\n\\n\\t/**\\n  * Multiply each plane by a value or specify each plane.\\n  * @arg {number} _scale - plane a of (a,b)\\n  * @arg {number} [_plane2] - plane b of (a,b)\\n  * @returns {Dimension}\\n  */\\n\\tthis.scale = function (_scale, _plane2) {\\n\\t\\treturn this.create().set(this[0] * _scale, this[1] * (_plane2 != null ? _plane2 : _scale));\\n\\t};\\n\\n\\t/**\\n  * Perfom a Math function on each plane\\n  * @arg {string} _fun - a string of the function name in the JS Math object,\\n  * followed by the whatever arguments the function takes after its first\\n  * since the first argument is the plane value.\\n  * @returns {Dimension}\\n  */\\n\\tthis.math = function (_fun) {\\n\\t\\tvar args = [].slice.call(arguments, 1);\\n\\n\\t\\treturn this.create().set(Math[_fun].apply(Math, [this[0]].concat(args)), Math[_fun].apply(Math, [this[1]].concat(args)));\\n\\t};\\n\\n\\t/**\\n  * Takes each plane value and passes it to parseInt().\\n  * @returns {Dimension}\\n  */\\n\\tthis.parseInt = function () {\\n\\t\\treturn this.create().set(parseInt(this[0]), parseInt(this[1]));\\n\\t};\\n\\n\\t/**\\n  * Takes each plane value and passes it to parseFloat().\\n  * @returns {Dimension}\\n  */\\n\\tthis.parseFloat = function () {\\n\\t\\treturn this.create().set(parseFloat(this[0]), parseFloat(this[1]));\\n\\t};\\n\\n\\t/**\\n  * Resolves the name of the plane at the given index.\\n  * @arg {number} _index - The index of the plane.\\n  * @returns {string}\\n  */\\n\\tthis.planeOf = function (_index) {\\n\\t\\tif (isNaN(parseInt(_index))) return null;\\n\\t\\treturn this.planeMap[_index];\\n\\t};\\n\\n\\t/**\\n  * Make a new array by iterating over each plane.<br>\\n  * See [`Array.prototype.map()`]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map}\\n  * @arg {function} _handler - handler for each index.\\n  * @override\\n  * @returns {Dimension}\\n  */\\n\\tthis.map = function (_handler) {\\n\\t\\treturn originalMap.call(this, _handler).to(Object.getPrototypeOf(this));\\n\\t};\\n\\n\\t/**\\n  * Multiplies the planes.\\n  * @returns {number}\\n  */\\n\\tthis.product = function () {\\n\\t\\treturn this[0] * this[1];\\n\\t};\\n\\n\\t/**\\n  * Divides the planes.\\n  * @returns {number}\\n  */\\n\\tthis.ratio = function () {\\n\\t\\treturn this[0] / this[1];\\n\\t};\\n\\n\\tthis.quotient = function () {\\n\\t\\treturn Math.floor(this[0] / this[1]);\\n\\t};\\n\\n\\tthis.remainder = function () {\\n\\t\\treturn this[0] % this[1];\\n\\t};\\n});\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. use `Size.create()` to get a new instance.\\n * @class\\n * @extends module:types/Dimensions~Dimension\\n * @classdesc 2 Dimensional object containing width and height.<br>\\n * <span class=\\\"important\\\">NOTE:</span> This is an immutable class. Methods return a new object with the original as its prototype.\\n * @prop {number} width - The width.\\n * @prop {number} height - The height.\\n */\\nSize = Dimension.extend(function () {\\n\\t/**\\n  * Maps the names of the indexes.<br>\\n  * See [Dimension#planeOf]{@link module:types/Dimensions~Dimension#planeOf} for resolving plane name.\\n  * @protected\\n  * @default ['width', 'height']\\n  */\\n\\tthis.planeMap = ['width', 'height'];\\n\\n\\t_Object$defineProperties(this, {\\n\\t\\twidth: {\\n\\t\\t\\tget: function get() {\\n\\t\\t\\t\\treturn this[0];\\n\\t\\t\\t},\\n\\n\\t\\t\\tset: function set(_val) {\\n\\t\\t\\t\\tthis[0] = Number(_val);\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\theight: {\\n\\t\\t\\tget: function get() {\\n\\t\\t\\t\\treturn this[1];\\n\\t\\t\\t},\\n\\n\\t\\t\\tset: function set(_val) {\\n\\t\\t\\t\\tthis[1] = Number(_val);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\n\\t/**\\n  * Define the size with an object. (overloaded)\\n  * @function module:types/Dimensions~Size#set\\n  * @arg {object} _size - A size object {width, height}.\\n  * @returns {Size}\\n  */\\n\\n\\t/**\\n  * Define the size with an array. (overloaded)\\n  * @function module:types/Dimensions~Size#set\\n  * @arg {array} _size - A size array [width, height].\\n  * @returns {Size}\\n  */\\n\\n\\t/**\\n  * Define the size.\\n  * @arg {number} _width - The width.\\n  * @arg {number} _height - The height.\\n  * @returns {Size}\\n  */\\n\\tthis.set = function (_width, _height) {\\n\\t\\tif (arguments.length === 1) {\\n\\t\\t\\tif (_width.width !== undefined && _width.height !== undefined) {\\n\\t\\t\\t\\tthis[0] = Number(_width.width);\\n\\t\\t\\t\\tthis[1] = Number(_width.height);\\n\\t\\t\\t} else if (_width.length === 2) {\\n\\t\\t\\t\\tthis[0] = Number(_width[0]);\\n\\t\\t\\t\\tthis[1] = Number(_width[1]);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tthis[0] = Number(_width);\\n\\t\\t\\tthis[1] = Number(_height);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * Calculates the hypotenuse.\\n  * @see {@link https://en.wikipedia.org/wiki/Hypotenuse}\\n  * @returns {number}\\n  */\\n\\tthis.hypotenuse = function () {\\n\\t\\treturn Math.sqrt(Math.pow(this.width, 2) + Math.pow(this.height, 2));\\n\\t};\\n\\n\\t/**\\n  * Sets width and height properties on the given object. If the object is an HTML node then it will be set on the nodes style object.\\n  * @arg {object|HTMLElement} - The object or DOM node.\\n  * @returns {this}\\n  */\\n\\tthis.applyTo = function (_object) {\\n\\t\\tif (_object.nodeType === document.ELEMENT_NODE) {\\n\\t\\t\\tif (!(_object.width !== undefined || _object.height !== undefined)) {\\n\\t\\t\\t\\t_object.style.width = this.width;\\n\\t\\t\\t\\t_object.style.height = this.height;\\n\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t_object.width = this.width;\\n\\t\\t_object.height = this.height;\\n\\n\\t\\treturn this;\\n\\t};\\n});\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. use `Point.create()` to get a new instance.\\n * @class\\n * @extends module:types/Dimensions~Dimension\\n * @classdesc Object containing coordinates on a 2-dimensional cartesian plane.<br>\\n * <span class=\\\"important\\\">NOTE:</span> This is an immutable class. Methods return a new object with the original as its prototype.\\n * @prop {number} x - The x coordinate.\\n * @prop {number} y - The y coordinate.\\n */\\nPoint = Dimension.extend(function () {\\n\\t/**\\n  * Maps the names of the indexes.<br>\\n  * See [Dimension#planeOf]{@link module:types/Dimensions~Dimension#planeOf} for resolving plane name.\\n  * @protected\\n  * @default ['x', 'y']\\n  */\\n\\tthis.planeMap = ['x', 'y'];\\n\\n\\t_Object$defineProperties(this, {\\n\\t\\tx: {\\n\\t\\t\\tget: function get() {\\n\\t\\t\\t\\treturn this[0];\\n\\t\\t\\t},\\n\\n\\t\\t\\tset: function set(_val) {\\n\\t\\t\\t\\tthis[0] = Number(_val);\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\ty: {\\n\\t\\t\\tget: function get() {\\n\\t\\t\\t\\treturn this[1];\\n\\t\\t\\t},\\n\\n\\t\\t\\tset: function set(_val) {\\n\\t\\t\\t\\tthis[1] = Number(_val);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\n\\t/**\\n  * Define the point with an object. (overloaded)\\n  * @function module:types/Dimensions~Point#set\\n  * @arg {object} _point - A point object {x, y}.\\n  * @returns {Point}\\n  */\\n\\n\\t/**\\n  * Define the point with an array. (overloaded)\\n  * @function module:types/Dimensions~Point#set\\n  * @arg {array} _point - A point array [x, y].\\n  * @returns {Point}\\n  */\\n\\n\\t/**\\n  * Define the point.\\n  * @arg {number} _x - The x.\\n  * @arg {number} _y - The y.\\n  * @returns {Point}\\n  */\\n\\tthis.set = function (_x, _y) {\\n\\t\\tif (arguments.length === 1) {\\n\\t\\t\\tif (_x.x !== undefined && _x.y !== undefined) {\\n\\t\\t\\t\\tthis[0] = Number(_x.x);\\n\\t\\t\\t\\tthis[1] = Number(_x.y);\\n\\t\\t\\t} else if (_x.length === 2) {\\n\\t\\t\\t\\tthis[0] = Number(_x[0]);\\n\\t\\t\\t\\tthis[1] = Number(_x[1]);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tthis[0] = Number(_x);\\n\\t\\t\\tthis[1] = Number(_y);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * Calculates the distance between the insatnce and a point object.\\n  * @arg {Point} _point - A point object {x,y}.\\n  * @returns {Size}\\n  */\\n\\tthis.distance = function (_point) {\\n\\t\\tif (_point.x !== undefined && _point.y !== undefined) {\\n\\t\\t\\treturn Size.create().set(_point.x - this.x, _point.y - this.y);\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t};\\n\\n\\t/**\\n  * Sets x and y properties on the given object. If the object is an HTML node then the left and top properties will be set on the nodes style object.\\n  * @arg {object|HTMLElement} - The object or DOM node.\\n  * @returns {this}\\n  */\\n\\tthis.applyTo = function (_object) {\\n\\t\\tif (_object.nodeType === document.ELEMENT_NODE) {\\n\\t\\t\\t_object.style.left = this.x;\\n\\t\\t\\t_object.style.top = this.y;\\n\\t\\t} else {\\n\\t\\t\\t_object.x = this.x;\\n\\t\\t\\t_object.y = this.y;\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * Rotate the point based on an origin point and an angle in degrees.\\n  * @arg {Point} _origin - A point object {x,y}.\\n  * @arg {number} _angle - The angle of rotation in degrees.\\n  * @returns {this}\\n  */\\n\\tthis.rotate = function (_origin, _angle) {\\n\\t\\tvar x, y, rad;\\n\\n\\t\\trad = _angle * (Math.PI / 180);\\n\\n\\t\\tx = this.x - _origin.x;\\n\\t\\ty = this.y - _origin.y;\\n\\n\\t\\treturn this.create().set(Math.sin(rad) * x - Math.cos(rad) * y + _origin.x, Math.cos(rad) * x + Math.sin(rad) * y + _origin.y);\\n\\t};\\n});\\n\\nexports['default'] = { Dimension: Dimension, Size: Size, Point: Point };\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"module.exports = { \\\"default\\\": __webpack_require__(7), __esModule: true };//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnRpZXMuanM/YTRjNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0IiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnRpZXNcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0aWVzLmpzXG4gKiogbW9kdWxlIGlkID0gNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var $ = __webpack_require__(8);\\nmodule.exports = function defineProperties(T, D){\\n  return $.setDescs(T, D);\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnRpZXMuanM/MTFhNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyICQgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzLyQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhULCBEKXtcbiAgcmV0dXJuICQuc2V0RGVzY3MoVCwgRCk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnRpZXMuanNcbiAqKiBtb2R1bGUgaWQgPSA3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\teval(\"var $Object = Object;\\nmodule.exports = {\\n  create:     $Object.create,\\n  getProto:   $Object.getPrototypeOf,\\n  isEnum:     {}.propertyIsEnumerable,\\n  getDesc:    $Object.getOwnPropertyDescriptor,\\n  setDesc:    $Object.defineProperty,\\n  setDescs:   $Object.defineProperties,\\n  getKeys:    $Object.keys,\\n  getNames:   $Object.getOwnPropertyNames,\\n  getSymbols: $Object.getOwnPropertySymbols,\\n  each:       [].forEach\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuanM/NmNlNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgJE9iamVjdCA9IE9iamVjdDtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGU6ICAgICAkT2JqZWN0LmNyZWF0ZSxcbiAgZ2V0UHJvdG86ICAgJE9iamVjdC5nZXRQcm90b3R5cGVPZixcbiAgaXNFbnVtOiAgICAge30ucHJvcGVydHlJc0VudW1lcmFibGUsXG4gIGdldERlc2M6ICAgICRPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICBzZXREZXNjOiAgICAkT2JqZWN0LmRlZmluZVByb3BlcnR5LFxuICBzZXREZXNjczogICAkT2JqZWN0LmRlZmluZVByb3BlcnRpZXMsXG4gIGdldEtleXM6ICAgICRPYmplY3Qua2V5cyxcbiAgZ2V0TmFtZXM6ICAgJE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICBnZXRTeW1ib2xzOiAkT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxcbiAgZWFjaDogICAgICAgW10uZm9yRWFjaFxufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmpzXG4gKiogbW9kdWxlIGlkID0gOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Base object type for 'array like' objects.\\n * @module\\n * @requires module:util\\n * @requires module:types/Basic\\n */\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesBasic = __webpack_require__(11);\\n\\nvar _typesBasic2 = _interopRequireDefault(_typesBasic);\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. use `BasicArray.create()` to get a new instance.\\n * @classdesc A base object type for 'array like' object.\\n * @class\\n * @extends external:Array\\n * @extends module:types/Basic~Basic\\n * @mixes module:types/Basic~Basic\\n */\\nvar BasicArray = (function () {\\n  /**\\n   * Objects with this as an own property will be identified as the root object.\\n   * @memberof module:types/BasicArray~BasicArray\\n   * @readonly\\n   * @default\\n   */\\n  this.baseType = 'TYPE_BASIC_ARRAY';\\n\\n  _util2['default'].mixin(this, _typesBasic2['default']);\\n\\n  return this;\\n}).call([]);\\n\\nexports['default'] = BasicArray;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvQmFzaWNBcnJheS5qcz9lZjNmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Z0NBTWlCLEVBQU07Ozs7c0NBQ0wsRUFBYTs7Ozs7Ozs7Ozs7O0FBVS9CLElBQUksVUFBVSxHQUFHLENBQUMsWUFBWTs7Ozs7OztBQU83QixNQUFJLENBQUMsUUFBUSxHQUFHLGtCQUFrQixDQUFDOztBQUVuQyxvQkFBSyxLQUFLLENBQUMsSUFBSSwwQkFBUSxDQUFDOztBQUV4QixTQUFPLElBQUksQ0FBQztDQUVaLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDOztxQkFFRyxVQUFVIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEJhc2Ugb2JqZWN0IHR5cGUgZm9yICdhcnJheSBsaWtlJyBvYmplY3RzLlxuICogQG1vZHVsZVxuICogQHJlcXVpcmVzIG1vZHVsZTp1dGlsXG4gKiBAcmVxdWlyZXMgbW9kdWxlOnR5cGVzL0Jhc2ljXG4gKi9cbmltcG9ydCB1dGlsIGZyb20gJ3V0aWwnO1xuaW1wb3J0IEJhc2ljIGZyb20gJ3R5cGVzL0Jhc2ljJztcblxuLyoqXG4gKiA8c3BhbiBjbGFzcz1cImltcG9ydGFudFwiPk5PVEU6PC9zcGFuPiBUaGlzIGlzIE5PVCBhIGNvbnN0cnVjdG9yLiB1c2UgYEJhc2ljQXJyYXkuY3JlYXRlKClgIHRvIGdldCBhIG5ldyBpbnN0YW5jZS5cbiAqIEBjbGFzc2Rlc2MgQSBiYXNlIG9iamVjdCB0eXBlIGZvciAnYXJyYXkgbGlrZScgb2JqZWN0LlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBleHRlcm5hbDpBcnJheVxuICogQGV4dGVuZHMgbW9kdWxlOnR5cGVzL0Jhc2ljfkJhc2ljXG4gKiBAbWl4ZXMgbW9kdWxlOnR5cGVzL0Jhc2ljfkJhc2ljXG4gKi9cbnZhciBCYXNpY0FycmF5ID0gKGZ1bmN0aW9uICgpIHtcblx0LyoqXG5cdCAqIE9iamVjdHMgd2l0aCB0aGlzIGFzIGFuIG93biBwcm9wZXJ0eSB3aWxsIGJlIGlkZW50aWZpZWQgYXMgdGhlIHJvb3Qgb2JqZWN0LlxuXHQgKiBAbWVtYmVyb2YgbW9kdWxlOnR5cGVzL0Jhc2ljQXJyYXl+QmFzaWNBcnJheVxuXHQgKiBAcmVhZG9ubHlcblx0ICogQGRlZmF1bHRcblx0ICovXG5cdHRoaXMuYmFzZVR5cGUgPSAnVFlQRV9CQVNJQ19BUlJBWSc7XG5cdFxuXHR1dGlsLm1peGluKHRoaXMsIEJhc2ljKTtcblxuXHRyZXR1cm4gdGhpcztcblxufSkuY2FsbChbXSk7XG5cbmV4cG9ydCBkZWZhdWx0IEJhc2ljQXJyYXk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zb3VyY2UvdHlwZXMvQmFzaWNBcnJheS5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\teval(\"exports.__esModule = true;\\n/**\\n * Utility functions.\\n * @namespace\\n * @author Micah Rolon <micah@ginasink.com>\\n * @memberof module:play~pl\\n */\\nvar util = new function () {\\n\\n\\t/**\\n  * Accepts one or more objects to combine their own properties to single object.\\n  * @arg {object} _target - The object that will recieve all members.\\n  * @arg {object} _sources... - The object(s) to join with the '_target'.\\n  * @returns {object} _target\\n  */\\n\\tthis.mixin = function () {\\n\\t\\tvar member, i, target, objs;\\n\\n\\t\\ttarget = arguments[0];\\n\\t\\tobjs = [].slice.call(arguments, 1);\\n\\n\\t\\tfor (i = 0; i < objs.length; i += 1) {\\n\\t\\t\\tfor (member in objs[i]) {\\n\\t\\t\\t\\tif (!objs[i].hasOwnProperty(member)) continue;\\n\\t\\t\\t\\ttarget[member] = objs[i][member];\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn target;\\n\\t};\\n\\n\\t/**\\n  * Matches the name of the key which references the given pointer inside an object. Like indexOf() for objects.\\n  * @arg {object} _obj - Object to search in.\\n  * @arg {*} _member - The reference which is expected to be in the object as a property.\\n  * @returns {string} The name of the key in the object matching '_member'.\\n  */\\n\\tthis.keyOf = function (_obj, _member) {\\n\\t\\tvar member;\\n\\n\\t\\tfor (member in _obj) {\\n\\t\\t\\tif (!_obj.hasOwnProperty(member)) continue;\\n\\t\\t\\tif (_obj[member] === _member) return member;\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t};\\n\\n\\t/**\\n  * Matches the object, deep in the prototype chain, which is the owner of the property referencing the given pointer.\\n  * @arg {object} _obj - The object to search.\\n  * @arg {*} _member - The reference which is expected to be a property in the prototype chain.\\n  * @return {object} An object containing the name of the property and the owning object. {name, object}\\n  */\\n\\tthis.getOwner = function (_obj, _member) {\\n\\t\\tvar prototype, name;\\n\\n\\t\\tprototype = Object.getPrototypeOf(_obj);\\n\\n\\t\\t// keep searching until we go as deep as we can go.\\n\\t\\twhile (prototype) {\\n\\t\\t\\t// search for the key in the prototype\\n\\t\\t\\tname = util.keyOf(prototype, _member);\\n\\n\\t\\t\\t// If we found the key in the prototype then we found\\n\\t\\t\\t// our match and we can break out of the loop.\\n\\t\\t\\tif (name) break;\\n\\n\\t\\t\\t// Otherwise go deeper (thats what she said ;p)\\n\\t\\t\\tprototype = Object.getPrototypeOf(prototype);\\n\\t\\t}\\n\\n\\t\\treturn {\\n\\t\\t\\tname: name,\\n\\t\\t\\tobject: prototype\\n\\t\\t};\\n\\t};\\n\\n\\t/**\\n  * Given a range; provides a random number in that range.\\n  * @function play~pl.util.random\\n  * @arg {number} _rangeA - A number for the low end of the range.\\n  * @arg {number} _rangeB - The top end of the range.\\n  * @returns {number|*} The resulting number in range or the member found at random.\\n  */\\n\\n\\t/**\\n  * Given an iterable; provides a random item.\\n  * @arg {array} _collection - The iterable.\\n  * @returns {number|*} The member found at random.\\n  */\\n\\tthis.random = function (_collection_rangeA, _rangeB) {\\n\\t\\tvar index, val;\\n\\n\\t\\tindex = Math.floor(Math.random() * _collection_rangeA.length);\\n\\n\\t\\tif (arguments.length === 2) {\\n\\t\\t\\tval = Math.round(Math.random() * _rangeB);\\n\\n\\t\\t\\treturn val < _collection_rangeA ? _collection_rangeA : val;\\n\\t\\t}\\n\\n\\t\\tif (index === _collection_rangeA.length) index = _collection_rangeA.length - 1;\\n\\n\\t\\treturn _collection_rangeA && _collection_rangeA[index];\\n\\t};\\n\\n\\t/**\\n  * Take string and makes it dot notation friendly.\\n  * @arg {string} _id - The string to transform.\\n  * @arg {boolean} _camelCase - Transform with camel case.\\n  * @returns {string}\\n  */\\n\\tthis.transformId = function (_id, _camelCase) {\\n\\t\\tif (_id && _camelCase) {\\n\\t\\t\\treturn _id.replace(/[-\\\\s]+([\\\\w\\\\d]?)/g, function (_match) {\\n\\t\\t\\t\\treturn RegExp.$1.toUpperCase();\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn _id && _id.replace(/[-\\\\s]+/g, '_');\\n\\t};\\n\\n\\t/**\\n  * Test all arguments for != null\\n  * @return {boolean}\\n  */\\n\\tthis.isSet = function () {\\n\\t\\treturn [].every.call(arguments, function (_arg) {\\n\\t\\t\\treturn _arg != null;\\n\\t\\t});\\n\\t};\\n\\n\\t/**\\n  * Parses a formated string and calculates it in milliseconds.\\n  * @arg {string} _source - The formated string for calculation in the pattern '1d 1h 1m 1s'.\\n  * @return {number}\\n  */\\n\\tthis.toMillisec = function (_source) {\\n\\t\\tvar tokens, time, units;\\n\\n\\t\\tif (!_source) return;\\n\\t\\tif (typeof _source === 'number') return _source;\\n\\n\\t\\ttokens = _source.split(/\\\\s+/);\\n\\t\\ttime = 0;\\n\\t\\tunits = {\\n\\t\\t\\td: 24 * 60 * 60 * 1000,\\n\\t\\t\\th: 60 * 60 * 1000,\\n\\t\\t\\tm: 60 * 1000,\\n\\t\\t\\ts: 1000\\n\\t\\t};\\n\\n\\t\\ttokens.forEach(function (_token) {\\n\\t\\t\\tvar unit, value;\\n\\n\\t\\t\\tunit = (_token.match(/[dhms]/) || [])[0];\\n\\n\\t\\t\\tif (unit) {\\n\\t\\t\\t\\tvalue = Number(_token.slice(0, -1));\\n\\t\\t\\t\\ttime += value * units[unit];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttime += Number(_token);\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\treturn time;\\n\\t};\\n\\n\\t/**\\n  * Needs no introduction\\n  * @arg {iterable} _collection - iterable.\\n  * @return {array}\\n  */\\n\\tthis.toArray = function (_collection) {\\n\\t\\treturn Array.prototype.map.call(_collection, function (i) {\\n\\t\\t\\treturn i;\\n\\t\\t});\\n\\t};\\n\\n\\t/**\\n  * Resolves the value in the object at the given path.\\n  * @arg {object} _obj - The object to query.\\n  * @arg {string} _path - The path to the desired reference.\\n  * @returns {*} The resulting reference value.\\n  * @example\\n  * var user = {\\n  *   name: 'John',\\n  *   family: {\\n  *\\t   guardians: {David}, // property could be an array of multiple guardians.\\n  *     siblings: [{Jane}, {Thomas}] // collection of user objects.\\n  *   }\\n  * };\\n  *\\n  * pl.util.resolvePath(user, 'family.sliblings[2].name');\\n  * // Matches the `guardians` propery if `guardians[0]` is undefined when `?` is used.\\n  * pl.util.resolvePath(user, 'family.guardians[0]?.name'); \\n  */\\n\\tthis.resolvePath = function (_obj, _path) {\\n\\t\\tvar path, obj, i, name, index, testArray;\\n\\n\\t\\tpath = _path.split('.');\\n\\t\\tobj = _obj;\\n\\t\\ti = 0;\\n\\n\\t\\twhile (obj) {\\n\\t\\t\\ttestArray = /\\\\?$/.test(path[i]);\\n\\t\\t\\tindex = (path[i].match(/\\\\[(\\\\d+)\\\\]/) || [])[1] || -1;\\n\\t\\t\\tname = ~index ? path[i].slice(0, path[i].indexOf('[')) : path[i];\\n\\t\\t\\tobj = obj[name];\\n\\n\\t\\t\\tif (~index && obj) {\\n\\t\\t\\t\\tobj = testArray ? obj[index] || obj : obj[index];\\n\\t\\t\\t}\\n\\n\\t\\t\\ti += 1;\\n\\n\\t\\t\\tif (path.length === i) break;\\n\\t\\t}\\n\\n\\t\\treturn obj;\\n\\t};\\n\\n\\tthis.assignRef = function (_obj, _name, _ref) {\\n\\t\\tvar name;\\n\\n\\t\\tname = util.transformId(_name, true);\\n\\n\\t\\tif (_obj[name] === _ref) return _ref;\\n\\n\\t\\tif (_obj[name]) {\\n\\t\\t\\tif (!_obj[name].__refCollction__) {\\n\\t\\t\\t\\t_obj[name] = [_obj[name]];\\n\\n\\t\\t\\t\\tObject.defineProperty(_obj[name], '__refCollction__', {\\n\\t\\t\\t\\t\\tvalue: true,\\n\\t\\t\\t\\t\\tenumerable: false,\\n\\t\\t\\t\\t\\twriteable: false,\\n\\t\\t\\t\\t\\tconfigureable: false\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\t_obj[name].push(_ref);\\n\\t\\t} else {\\n\\t\\t\\t_obj[name] = _ref;\\n\\t\\t}\\n\\n\\t\\treturn _obj[name];\\n\\t};\\n}();\\n\\nexports['default'] = util;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _Object$create = __webpack_require__(12)['default'];\\n\\nvar _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Base object type for 'classes' implementing methods for extention and super callbacks.\\n * @module\\n * @requires module:play~pl.util\\n */\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. use `Basic.create()` to get a new instance.\\n * @classdesc The base type for all objects which will act as prototypes.\\n * @class\\n */\\nvar Basic = {\\n\\t/**\\n  * Objects with this as an own property will be identified as the root object.\\n  * @readonly\\n  * @default\\n  */\\n\\tbaseType: 'TYPE_BASIC',\\n\\n\\t/**\\n  * Creates a new object with the current object as its prototype.\\n  * @instance\\n  * @returns {Basic} The new instance.\\n  */\\n\\tcreate: function create() {\\n\\t\\treturn _Object$create(this);\\n\\t},\\n\\n\\t/**\\n  * Creates a new object using a constructor function or object with the current object as its prototype.\\n  * @instance\\n  * @arg {Function|Object} _implementation - The implementation of the new type as either a constructor function or object to mixin.\\n  * @returns {Basic} The new instance.\\n  *\\n  * @todo define constructor property\\n  */\\n\\textend: function extend(_implementation) {\\n\\t\\tvar instance;\\n\\n\\t\\tif (!_implementation) return null;\\n\\n\\t\\tswitch (typeof _implementation) {\\n\\t\\t\\tcase 'function':\\n\\t\\t\\t\\t_implementation.prototype = this;\\n\\t\\t\\t\\tinstance = new _implementation();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'object':\\n\\t\\t\\t\\tinstance = this.create();\\n\\t\\t\\t\\tinstance.mixin(_implementation);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tconsole.error('TypeError: Invalid type given for object extention.', typeof _implementation);\\n\\t\\t}\\n\\n\\t\\treturn instance;\\n\\t},\\n\\n\\t/**\\n  * Accepts one or more objects to combine their own properties to the instance.\\n  * @instance\\n  * @arg {object} _sources... - The object(s) to join with the instance.\\n  * @returns this\\n  */\\n\\tmixin: function mixin() {\\n\\t\\treturn _util2['default'].mixin.apply(null, [this].concat([].slice.call(arguments, 0)));\\n\\t},\\n\\n\\t/**\\n  * Matches the name of the key which references the given pointer inside the instance. Like indexOf() for objects.\\n  * @instance\\n  * @arg {*} _member - The reference which is expected to be in the object as a property.\\n  * @returns {string} The name of the key in the object matching '_member'.\\n  */\\n\\tkeyOf: function keyOf(_member) {\\n\\t\\treturn _util2['default'].keyOf(this, _member);\\n\\t},\\n\\n\\t/**\\n  * Performs a super callback of the function which called it. Allowing you to still invoke a method which was overridden.\\n  * @instance\\n  * @arg {*} _args... - Whatever amount of arguments the caller takes.\\n  * @returns {*} Whatever the caller returns.\\n  */\\n\\tproto: function proto() {\\n\\t\\tvar method, name, owner, prototype;\\n\\n\\t\\t// Get the function which invoked proto() in the call stack.\\n\\t\\t// If the caller is a behavior then we retrieve the method.\\n\\t\\tmethod = this.proto.caller.method || this.proto.caller;\\n\\n\\t\\t// Check to see if 'this' owns the method.\\n\\t\\t// NOTE: We may want to move this logic into getOwner().\\n\\t\\tif (name = this.keyOf(method)) {\\n\\t\\t\\tprototype = Object.getPrototypeOf(this);\\n\\t\\t}\\n\\n\\t\\t// Otherwise find the object which owns the caller function.\\n\\t\\telse {\\n\\t\\t\\t\\towner = _util2['default'].getOwner(this, method);\\n\\t\\t\\t\\tname = owner.name;\\n\\t\\t\\t\\tprototype = Object.getPrototypeOf(owner.object);\\n\\t\\t\\t}\\n\\n\\t\\tmethod = prototype[name];\\n\\n\\t\\tif (!method) {\\n\\t\\t\\tconsole.error('ReferenceError: Unable to locate prototype method.', this.proto.caller);\\n\\t\\t\\tdebugger;\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\treturn method.apply(this, arguments);\\n\\t},\\n\\n\\t/**\\n  * Performs a super callback of the function which called it. Unlike `proto()` which looks for the overidden method, sup looks for the base class' implementation.\\n  * @instance\\n  * @arg {*} _args... - Whatever amount of arguments the caller takes.\\n  * @returns {*} Whatever the caller returns.\\n  */\\n\\tsup: function sup() {\\n\\t\\tvar method, name, owner, prototype;\\n\\n\\t\\t// Get the function which invoked sup() in the call stack.\\n\\t\\tmethod = this.sup.caller;\\n\\t\\towner = _util2['default'].getOwner(this, this.baseType);\\n\\t\\tprototype = owner.object;\\n\\t\\tname = this.keyOf(method);\\n\\n\\t\\t// Check to see if 'this' owns the method.\\n\\t\\t// NOTE: We may want to move this logic into getOwner().\\n\\t\\t//\\n\\t\\tif (!name) {\\n\\t\\t\\towner = _util2['default'].getOwner(this, method);\\n\\t\\t\\tname = owner.name;\\n\\t\\t}\\n\\n\\t\\tmethod = prototype[name];\\n\\n\\t\\tif (!method) {\\n\\t\\t\\tconsole.error('ReferenceError: Unable to locate prototype method.', this.sup.caller);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\treturn method.apply(this, arguments);\\n\\t},\\n\\n\\t/**\\n  * Provides the object type.\\n  * @instance\\n  */\\n\\ttoString: function toString() {\\n\\t\\tvar type;\\n\\n\\t\\ttype = this.baseType.replace('TYPE_', '');\\n\\t\\ttype = type.slice(0, 1) + type.slice(1).toLowerCase();\\n\\n\\t\\treturn '[object ' + type + ']';\\n\\t}\\n\\n};\\n\\nexports['default'] = Basic;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"module.exports = { \\\"default\\\": __webpack_require__(13), __esModule: true };//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvY3JlYXRlLmpzP2FhNGIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCIiwiZmlsZSI6IjEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGVcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2NyZWF0ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDEyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var $ = __webpack_require__(8);\\nmodule.exports = function create(P, D){\\n  return $.create(P, D);\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlLmpzPzczOGMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgJCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvJCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGUoUCwgRCl7XG4gIHJldHVybiAkLmNyZWF0ZShQLCBEKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUuanNcbiAqKiBtb2R1bGUgaWQgPSAxM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\teval(\"exports.__esModule = true;\\n/**\\r\\n *\\r\\n * Copy of the deleted repository epistemex/transformation-matrix-js.\\r\\n * All rights are reserved to Epistemex.\\r\\n *\\r\\n * 2D transformation matrix object initialized with identity matrix.\\r\\n *\\r\\n * The matrix can synchronize a canvas context by supplying the context\\r\\n * as an argument, or later apply current absolute transform to an\\r\\n * existing context.\\r\\n *\\r\\n * All values are handled as floating point values.\\r\\n *\\r\\n * @param {CanvasRenderingContext2D} [context] - Optional context to sync with Matrix\\r\\n * @prop {number} a - scale x\\r\\n * @prop {number} b - shear y\\r\\n * @prop {number} c - shear x\\r\\n * @prop {number} d - scale y\\r\\n * @prop {number} e - translate x\\r\\n * @prop {number} f - translate y\\r\\n * @prop {CanvasRenderingContext2D|null} [context=null] - set or get current canvas context\\r\\n * @constructor\\r\\n */\\nfunction Matrix(context) {\\n\\n    var me = this;\\n    me._t = me.transform;\\n\\n    me.a = me.d = 1;\\n    me.b = me.c = me.e = me.f = 0;\\n\\n    me.context = context;\\n\\n    // reset canvas transformations (if any) to enable 100% sync.\\n    if (context) context.setTransform(1, 0, 0, 1, 0, 0);\\n}\\n\\nMatrix.prototype = {\\n\\n    /**\\r\\n     * Concatenates transforms of this matrix onto the given child matrix and\\r\\n     * returns a new matrix. This instance is used on left side.\\r\\n     *\\r\\n     * @param {Matrix} cm - child matrix to apply concatenation to\\r\\n     * @returns {Matrix}\\r\\n     */\\n    concat: function concat(cm) {\\n        return this.clone()._t(cm.a, cm.b, cm.c, cm.d, cm.e, cm.f);\\n    },\\n\\n    /**\\r\\n     * Flips the horizontal values.\\r\\n     */\\n    flipX: function flipX() {\\n        return this._t(-1, 0, 0, 1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Flips the vertical values.\\r\\n     */\\n    flipY: function flipY() {\\n        return this._t(1, 0, 0, -1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Reflects incoming (velocity) vector on the normal which will be the\\r\\n     * current transformed x axis. Call when a trigger condition is met.\\r\\n     *\\r\\n     * NOTE: BETA, simple implementation\\r\\n     *\\r\\n     * @param {number} x - vector end point for x (start = 0)\\r\\n     * @param {number} y - vector end point for y (start = 0)\\r\\n     * @returns {{x: number, y: number}}\\r\\n     */\\n    reflectVector: function reflectVector(x, y) {\\n\\n        var v = this.applyToPoint(0, 1),\\n            d = 2 * (v.x * x + v.y * y);\\n\\n        x -= d * v.x;\\n        y -= d * v.y;\\n\\n        return { x: x, y: y };\\n    },\\n\\n    /**\\r\\n     * Short-hand to reset current matrix to an identity matrix.\\r\\n     */\\n    reset: function reset() {\\n        return this.setTransform(1, 0, 0, 1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Rotates current matrix accumulative by angle.\\r\\n     * @param {number} angle - angle in radians\\r\\n     */\\n    rotate: function rotate(angle) {\\n        var cos = Math.cos(angle),\\n            sin = Math.sin(angle);\\n        return this._t(cos, sin, -sin, cos, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Converts a vector given as x and y to angle, and\\r\\n     * rotates (accumulative).\\r\\n     * @param x\\r\\n     * @param y\\r\\n     * @returns {*}\\r\\n     */\\n    rotateFromVector: function rotateFromVector(x, y) {\\n        return this.rotate(Math.atan2(y, x));\\n    },\\n\\n    /**\\r\\n     * Helper method to make a rotation based on an angle in degrees.\\r\\n     * @param {number} angle - angle in degrees\\r\\n     */\\n    rotateDeg: function rotateDeg(angle) {\\n        return this.rotate(angle * Math.PI / 180);\\n    },\\n\\n    /**\\r\\n     * Scales current matrix uniformly and accumulative.\\r\\n     * @param {number} f - scale factor for both x and y (1 does nothing)\\r\\n     */\\n    scaleU: function scaleU(f) {\\n        return this._t(f, 0, 0, f, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Scales current matrix accumulative.\\r\\n     * @param {number} sx - scale factor x (1 does nothing)\\r\\n     * @param {number} sy - scale factor y (1 does nothing)\\r\\n     */\\n    scale: function scale(sx, sy) {\\n        return this._t(sx, 0, 0, sy, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Scales current matrix on x axis accumulative.\\r\\n     * @param {number} sx - scale factor x (1 does nothing)\\r\\n     */\\n    scaleX: function scaleX(sx) {\\n        return this._t(sx, 0, 0, 1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Scales current matrix on y axis accumulative.\\r\\n     * @param {number} sy - scale factor y (1 does nothing)\\r\\n     */\\n    scaleY: function scaleY(sy) {\\n        return this._t(1, 0, 0, sy, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Apply shear to the current matrix accumulative.\\r\\n     * @param {number} sx - amount of shear for x\\r\\n     * @param {number} sy - amount of shear for y\\r\\n     */\\n    shear: function shear(sx, sy) {\\n        return this._t(1, sy, sx, 1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Apply shear for x to the current matrix accumulative.\\r\\n     * @param {number} sx - amount of shear for x\\r\\n     */\\n    shearX: function shearX(sx) {\\n        return this._t(1, 0, sx, 1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Apply shear for y to the current matrix accumulative.\\r\\n     * @param {number} sy - amount of shear for y\\r\\n     */\\n    shearY: function shearY(sy) {\\n        return this._t(1, sy, 0, 1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Apply skew to the current matrix accumulative.\\r\\n     * @param {number} ax - angle of skew for x\\r\\n     * @param {number} ay - angle of skew for y\\r\\n     */\\n    skew: function skew(ax, ay) {\\n        return this.shear(Math.tan(ax), Math.tan(ay));\\n    },\\n\\n    /**\\r\\n     * Apply skew for x to the current matrix accumulative.\\r\\n     * @param {number} ax - angle of skew for x\\r\\n     */\\n    skewX: function skewX(ax) {\\n        return this.shearX(Math.tan(ax));\\n    },\\n\\n    /**\\r\\n     * Apply skew for y to the current matrix accumulative.\\r\\n     * @param {number} ay - angle of skew for y\\r\\n     */\\n    skewY: function skewY(ay) {\\n        return this.shearY(Math.tan(ay));\\n    },\\n\\n    /**\\r\\n     * Set current matrix to new absolute matrix.\\r\\n     * @param {number} a - scale x\\r\\n     * @param {number} b - shear y\\r\\n     * @param {number} c - shear x\\r\\n     * @param {number} d - scale y\\r\\n     * @param {number} e - translate x\\r\\n     * @param {number} f - translate y\\r\\n     */\\n    setTransform: function setTransform(a, b, c, d, e, f) {\\n        var me = this;\\n        me.a = a;\\n        me.b = b;\\n        me.c = c;\\n        me.d = d;\\n        me.e = e;\\n        me.f = f;\\n        return me._x();\\n    },\\n\\n    /**\\r\\n     * Translate current matrix accumulative.\\r\\n     * @param {number} tx - translation for x\\r\\n     * @param {number} ty - translation for y\\r\\n     */\\n    translate: function translate(tx, ty) {\\n        return this._t(1, 0, 0, 1, tx, ty);\\n    },\\n\\n    /**\\r\\n     * Translate current matrix on x axis accumulative.\\r\\n     * @param {number} tx - translation for x\\r\\n     */\\n    translateX: function translateX(tx) {\\n        return this._t(1, 0, 0, 1, tx, 0);\\n    },\\n\\n    /**\\r\\n     * Translate current matrix on y axis accumulative.\\r\\n     * @param {number} ty - translation for y\\r\\n     */\\n    translateY: function translateY(ty) {\\n        return this._t(1, 0, 0, 1, 0, ty);\\n    },\\n\\n    /**\\r\\n     * Multiplies current matrix with new matrix values.\\r\\n     * @param {number} a2 - scale x\\r\\n     * @param {number} b2 - shear y\\r\\n     * @param {number} c2 - shear x\\r\\n     * @param {number} d2 - scale y\\r\\n     * @param {number} e2 - translate x\\r\\n     * @param {number} f2 - translate y\\r\\n     */\\n    transform: function transform(a2, b2, c2, d2, e2, f2) {\\n\\n        var me = this,\\n            a1 = me.a,\\n            b1 = me.b,\\n            c1 = me.c,\\n            d1 = me.d,\\n            e1 = me.e,\\n            f1 = me.f;\\n\\n        /* matrix order (canvas compatible):\\r\\n         * ace\\r\\n         * bdf\\r\\n         * 001\\r\\n         */\\n        me.a = a1 * a2 + c1 * b2;\\n        me.b = b1 * a2 + d1 * b2;\\n        me.c = a1 * c2 + c1 * d2;\\n        me.d = b1 * c2 + d1 * d2;\\n        me.e = a1 * e2 + c1 * f2 + e1;\\n        me.f = b1 * e2 + d1 * f2 + f1;\\n\\n        return me._x();\\n    },\\n\\n    /**\\r\\n     * Divide this matrix on input matrix which must be invertible.\\r\\n     * @param {Matrix} m - matrix to divide on (divisor)\\r\\n     * @returns {Matrix}\\r\\n     */\\n    divide: function divide(m) {\\n\\n        if (!m.isInvertible()) throw \\\"Input matrix is not invertible\\\";\\n\\n        var im = m.inverse();\\n\\n        return this._t(im.a, im.b, im.c, im.d, im.e, im.f);\\n    },\\n\\n    /**\\r\\n     * Divide current matrix on scalar value != 0.\\r\\n     * @param {number} d - divisor (can not be 0)\\r\\n     * @returns {Matrix}\\r\\n     */\\n    divideScalar: function divideScalar(d) {\\n\\n        var me = this;\\n        me.a /= d;\\n        me.b /= d;\\n        me.c /= d;\\n        me.d /= d;\\n        me.e /= d;\\n        me.f /= d;\\n\\n        return me._x();\\n    },\\n\\n    /**\\r\\n     * Get an inverse matrix of current matrix. The method returns a new\\r\\n     * matrix with values you need to use to get to an identity matrix.\\r\\n     * Context from parent matrix is not applied to the returned matrix.\\r\\n     * @returns {Matrix}\\r\\n     */\\n    inverse: function inverse() {\\n\\n        if (this.isIdentity()) {\\n            return new Matrix();\\n        } else if (!this.isInvertible()) {\\n            throw \\\"Matrix is not invertible.\\\";\\n        } else {\\n            var me = this,\\n                a = me.a,\\n                b = me.b,\\n                c = me.c,\\n                d = me.d,\\n                e = me.e,\\n                f = me.f,\\n                m = new Matrix(),\\n                dt = a * d - b * c; // determinant(), skip DRY here...\\n\\n            m.a = d / dt;\\n            m.b = -b / dt;\\n            m.c = -c / dt;\\n            m.d = a / dt;\\n            m.e = (c * f - d * e) / dt;\\n            m.f = -(a * f - b * e) / dt;\\n\\n            return m;\\n        }\\n    },\\n\\n    /**\\r\\n     * Interpolate this matrix with another and produce a new matrix.\\r\\n     * t is a value in the range [0.0, 1.0] where 0 is this instance and\\r\\n     * 1 is equal to the second matrix. The t value is not constrained.\\r\\n     *\\r\\n     * Context from parent matrix is not applied to the returned matrix.\\r\\n     *\\r\\n     * Note: this interpolation is naive. For animation use the\\r\\n     * intrpolateAnim() method instead.\\r\\n     *\\r\\n     * @param {Matrix} m2 - the matrix to interpolate with.\\r\\n     * @param {number} t - interpolation [0.0, 1.0]\\r\\n     * @param {CanvasRenderingContext2D} [context] - optional context to affect\\r\\n     * @returns {Matrix} - new instance with the interpolated result\\r\\n     */\\n    interpolate: function interpolate(m2, t, context) {\\n\\n        var me = this,\\n            m = context ? new Matrix(context) : new Matrix();\\n\\n        m.a = me.a + (m2.a - me.a) * t;\\n        m.b = me.b + (m2.b - me.b) * t;\\n        m.c = me.c + (m2.c - me.c) * t;\\n        m.d = me.d + (m2.d - me.d) * t;\\n        m.e = me.e + (m2.e - me.e) * t;\\n        m.f = me.f + (m2.f - me.f) * t;\\n\\n        return m._x();\\n    },\\n\\n    /**\\r\\n     * Interpolate this matrix with another and produce a new matrix.\\r\\n     * t is a value in the range [0.0, 1.0] where 0 is this instance and\\r\\n     * 1 is equal to the second matrix. The t value is not constrained.\\r\\n     *\\r\\n     * Context from parent matrix is not applied to the returned matrix.\\r\\n     *\\r\\n     * Note: this interpolation method uses decomposition which makes\\r\\n     * it suitable for animations (in particular where rotation takes\\r\\n     * places).\\r\\n     *\\r\\n     * @param {Matrix} m2 - the matrix to interpolate with.\\r\\n     * @param {number} t - interpolation [0.0, 1.0]\\r\\n     * @param {CanvasRenderingContext2D} [context] - optional context to affect\\r\\n     * @returns {Matrix} - new instance with the interpolated result\\r\\n     */\\n    interpolateAnim: function interpolateAnim(m2, t, context) {\\n\\n        var me = this,\\n            m = context ? new Matrix(context) : new Matrix(),\\n            d1 = me.decompose(),\\n            d2 = m2.decompose(),\\n            rotation = d1.rotation + (d2.rotation - d1.rotation) * t,\\n            translateX = d1.translate.x + (d2.translate.x - d1.translate.x) * t,\\n            translateY = d1.translate.y + (d2.translate.y - d1.translate.y) * t,\\n            scaleX = d1.scale.x + (d2.scale.x - d1.scale.x) * t,\\n            scaleY = d1.scale.y + (d2.scale.y - d1.scale.y) * t;\\n\\n        m.translate(translateX, translateY);\\n        m.rotate(rotation);\\n        m.scale(scaleX, scaleY);\\n\\n        return m._x();\\n    },\\n\\n    /**\\r\\n     * Decompose the current matrix into simple transforms using either\\r\\n     * QR (default) or LU decomposition. Code adapted from\\r\\n     * http://www.maths-informatique-jeux.com/blog/frederic/?post/2013/12/01/Decomposition-of-2D-transform-matrices\\r\\n     *\\r\\n     * The result must be applied in the following order to reproduce the current matrix:\\r\\n     *\\r\\n     *     QR: translate -> rotate -> scale -> skewX\\r\\n     *     LU: translate -> skewY  -> scale -> skewX\\r\\n     *\\r\\n     * @param {boolean} [useLU=false] - set to true to use LU rather than QR algorithm\\r\\n     * @returns {*} - an object containing current decomposed values (rotate, skew, scale, translate)\\r\\n     */\\n    decompose: function decompose(useLU) {\\n\\n        var me = this,\\n            a = me.a,\\n            b = me.b,\\n            c = me.c,\\n            d = me.d,\\n            acos = Math.acos,\\n            atan = Math.atan,\\n            sqrt = Math.sqrt,\\n            pi = Math.PI,\\n            translate = { x: me.e, y: me.f },\\n            rotation = 0,\\n            scale = { x: 1, y: 1 },\\n            skew = { x: 0, y: 0 },\\n            determ = a * d - b * c; // determinant(), skip DRY here...\\n\\n        if (useLU) {\\n            if (a) {\\n                skew = { x: atan(c / a), y: atan(b / a) };\\n                scale = { x: a, y: determ / a };\\n            } else if (b) {\\n                rotation = pi * 0.5;\\n                scale = { x: b, y: determ / b };\\n                skew.x = atan(d / b);\\n            } else {\\n                // a = b = 0\\n                scale = { x: c, y: d };\\n                skew.x = pi * 0.25;\\n            }\\n        } else {\\n            // Apply the QR-like decomposition.\\n            if (a || b) {\\n                var r = sqrt(a * a + b * b);\\n                rotation = b > 0 ? acos(a / r) : -acos(a / r);\\n                scale = { x: r, y: determ / r };\\n                skew.x = atan((a * c + b * d) / (r * r));\\n            } else if (c || d) {\\n                var s = sqrt(c * c + d * d);\\n                rotation = pi * 0.5 - (d > 0 ? acos(-c / s) : -acos(c / s));\\n                scale = { x: determ / s, y: s };\\n                skew.y = atan((a * c + b * d) / (s * s));\\n            } else {\\n                // a = b = c = d = 0\\n                scale = { x: 0, y: 0 }; // = invalid matrix\\n            }\\n        }\\n\\n        return {\\n            scale: scale,\\n            translate: translate,\\n            rotation: rotation,\\n            skew: skew\\n        };\\n    },\\n\\n    /**\\r\\n     * Returns the determinant of the current matrix.\\r\\n     * @returns {number}\\r\\n     */\\n    determinant: function determinant() {\\n        return this.a * this.d - this.b * this.c;\\n    },\\n\\n    /**\\r\\n     * Apply current matrix to x and y point.\\r\\n     * Returns a point object.\\r\\n     *\\r\\n     * @param {number} x - value for x\\r\\n     * @param {number} y - value for y\\r\\n     * @returns {{x: number, y: number}} A new transformed point object\\r\\n     */\\n    applyToPoint: function applyToPoint(x, y) {\\n\\n        var me = this;\\n\\n        return {\\n            x: x * me.a + y * me.c + me.e,\\n            y: x * me.b + y * me.d + me.f\\n        };\\n    },\\n\\n    /**\\r\\n     * Apply current matrix to array with point objects or point pairs.\\r\\n     * Returns a new array with points in the same format as the input array.\\r\\n     *\\r\\n     * A point object is an object literal:\\r\\n     *\\r\\n     * {x: x, y: y}\\r\\n     *\\r\\n     * so an array would contain either:\\r\\n     *\\r\\n     * [{x: x1, y: y1}, {x: x2, y: y2}, ... {x: xn, y: yn}]\\r\\n     *\\r\\n     * or\\r\\n     * [x1, y1, x2, y2, ... xn, yn]\\r\\n     *\\r\\n     * @param {Array} points - array with point objects or pairs\\r\\n     * @returns {Array} A new array with transformed points\\r\\n     */\\n    applyToArray: function applyToArray(points) {\\n\\n        var i = 0,\\n            p,\\n            l,\\n            mxPoints = [];\\n\\n        if (typeof points[0] === 'number') {\\n\\n            l = points.length;\\n\\n            while (i < l) {\\n                p = this.applyToPoint(points[i++], points[i++]);\\n                mxPoints.push(p.x, p.y);\\n            }\\n        } else {\\n            for (; p = points[i]; i++) {\\n                mxPoints.push(this.applyToPoint(p.x, p.y));\\n            }\\n        }\\n\\n        return mxPoints;\\n    },\\n\\n    /**\\r\\n     * Apply current matrix to a typed array with point pairs. Although\\r\\n     * the input array may be an ordinary array, this method is intended\\r\\n     * for more performant use where typed arrays are used. The returned\\r\\n     * array is regardless always returned as a Float32Array.\\r\\n     *\\r\\n     * @param {*} points - (typed) array with point pairs\\r\\n     * @param {boolean} [use64=false] - use Float64Array instead of Float32Array\\r\\n     * @returns {*} A new typed array with transformed points\\r\\n     */\\n    applyToTypedArray: function applyToTypedArray(points, use64) {\\n\\n        var i = 0,\\n            p,\\n            l = points.length,\\n            mxPoints = use64 ? new Float64Array(l) : new Float32Array(l);\\n\\n        while (i < l) {\\n            p = this.applyToPoint(points[i], points[i + 1]);\\n            mxPoints[i++] = p.x;\\n            mxPoints[i++] = p.y;\\n        }\\n\\n        return mxPoints;\\n    },\\n\\n    /**\\r\\n     * Apply to any canvas 2D context object. This does not affect the\\r\\n     * context that optionally was referenced in constructor unless it is\\r\\n     * the same context.\\r\\n     * @param {CanvasRenderingContext2D} context\\r\\n     */\\n    applyToContext: function applyToContext(context) {\\n        var me = this;\\n        context.setTransform(me.a, me.b, me.c, me.d, me.e, me.f);\\n        return me;\\n    },\\n\\n    /**\\r\\n     * Returns true if matrix is an identity matrix (no transforms applied).\\r\\n     * @returns {boolean} True if identity (not transformed)\\r\\n     */\\n    isIdentity: function isIdentity() {\\n        var me = this;\\n        return me._q(me.a, 1) && me._q(me.b, 0) && me._q(me.c, 0) && me._q(me.d, 1) && me._q(me.e, 0) && me._q(me.f, 0);\\n    },\\n\\n    /**\\r\\n     * Returns true if matrix is invertible\\r\\n     * @returns {boolean}\\r\\n     */\\n    isInvertible: function isInvertible() {\\n        return !this._q(this.determinant(), 0);\\n    },\\n\\n    /**\\r\\n     * Test if matrix is valid.\\r\\n     */\\n    isValid: function isValid() {\\n        return !this._q(this.a * this.d, 0);\\n    },\\n\\n    /**\\r\\n     * Clones current instance and returning a new matrix.\\r\\n     * @param {boolean} [noContext=false] don't clone context reference if true\\r\\n     * @returns {Matrix}\\r\\n     */\\n    clone: function clone(noContext) {\\n        var me = this,\\n            m = new Matrix();\\n        m.a = me.a;\\n        m.b = me.b;\\n        m.c = me.c;\\n        m.d = me.d;\\n        m.e = me.e;\\n        m.f = me.f;\\n        if (!noContext) m.context = me.context;\\n\\n        return m;\\n    },\\n\\n    /**\\r\\n     * Compares current matrix with another matrix. Returns true if equal\\r\\n     * (within epsilon tolerance).\\r\\n     * @param {Matrix} m - matrix to compare this matrix with\\r\\n     * @returns {boolean}\\r\\n     */\\n    isEqual: function isEqual(m) {\\n\\n        var me = this,\\n            q = me._q;\\n\\n        return q(me.a, m.a) && q(me.b, m.b) && q(me.c, m.c) && q(me.d, m.d) && q(me.e, m.e) && q(me.f, m.f);\\n    },\\n\\n    /**\\r\\n     * Returns an array with current matrix values.\\r\\n     * @returns {Array}\\r\\n     */\\n    toArray: function toArray() {\\n        var me = this;\\n        return [me.a, me.b, me.c, me.d, me.e, me.f];\\n    },\\n\\n    /**\\r\\n     * Generates a matrix() string that can be used with CSS transform.\\r\\n     * @returns {string}\\r\\n     */\\n    toCSS: function toCSS() {\\n        return \\\"matrix(\\\" + this.toArray() + \\\")\\\";\\n    },\\n\\n    /**\\r\\n     * Generates a matrix3d() string that can be used with CSS transform.\\r\\n     * @returns {string}\\r\\n     */\\n    toCSS3D: function toCSS3D() {\\n        var me = this;\\n        return \\\"matrix3d(\\\" + me.a + \\\", \\\" + me.b + \\\", 0, 0, \\\" + me.c + \\\", \\\" + me.d + \\\", 0, 0, 0, 0, 1, 0, \\\" + me.e + \\\", \\\" + me.f + \\\", 0, 1)\\\";\\n    },\\n\\n    /**\\r\\n     * Returns a JSON compatible string of current matrix.\\r\\n     * @returns {string}\\r\\n     */\\n    toJSON: function toJSON() {\\n        return JSON.stringify(this.toArray());\\n    },\\n\\n    /**\\r\\n     * Returns a string with current matrix as comma-separated list.\\r\\n     * @returns {string}\\r\\n     */\\n    toString: function toString() {\\n        return \\\"\\\" + this.toArray();\\n    },\\n\\n    /**\\r\\n     * Compares floating point values with some tolerance (epsilon)\\r\\n     * @param {number} f1 - float 1\\r\\n     * @param {number} f2 - float 2\\r\\n     * @returns {boolean}\\r\\n     * @private\\r\\n     */\\n    _q: function _q(f1, f2) {\\n        return Math.abs(f1 - f2) < 1e-14;\\n    },\\n\\n    /**\\r\\n     * Apply current absolute matrix to context if defined, to sync it.\\r\\n     * @private\\r\\n     */\\n    _x: function _x() {\\n        var me = this;\\n        if (me.context) me.context.setTransform(me.a, me.b, me.c, me.d, me.e, me.f);\\n        return me;\\n    }\\n};\\n\\nexports[\\\"default\\\"] = Matrix;\\nmodule.exports = exports[\\\"default\\\"];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Defines the global root level namespace for the library.\\n *\\n * @module\\n * @author Micah Rolon <micah@ginasink.com>\\n *\\n * @requires game\\n * @requires module:play~pl.util\\n * @requires types/Basic\\n * @requires types/Dimensions\\n */\\n\\nvar _playGame = __webpack_require__(16);\\n\\nvar _playGame2 = _interopRequireDefault(_playGame);\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesBasic = __webpack_require__(11);\\n\\nvar _typesBasic2 = _interopRequireDefault(_typesBasic);\\n\\nvar _typesQueue = __webpack_require__(37);\\n\\nvar _typesQueue2 = _interopRequireDefault(_typesQueue);\\n\\nvar _typesDimensions = __webpack_require__(5);\\n\\nvar pl;\\n/**\\n * Resolves the event type for user interactions.\\n */\\nfunction resolveEventType() {\\n\\tvar resolution;\\n\\n\\tif (_playGame2['default'].feature('touch')) {\\n\\t\\tresolution = {\\n\\t\\t\\tACTION: 'touchend',\\n\\t\\t\\tACTION_DOWN: 'touchstart',\\n\\t\\t\\tACTION_UP: 'touchend',\\n\\t\\t\\tACTION_MOVE: 'touchmove',\\n\\t\\t\\tACTION_OUT: 'touchcancel'\\n\\t\\t};\\n\\t} else {\\n\\t\\tresolution = {\\n\\t\\t\\tACTION: 'click',\\n\\t\\t\\tACTION_DOWN: 'mousedown',\\n\\t\\t\\tACTION_UP: 'mouseup',\\n\\t\\t\\tACTION_MOVE: 'mousemove',\\n\\t\\t\\tACTION_OUT: 'mouseout'\\n\\t\\t};\\n\\t}\\n\\n\\treturn resolution;\\n}\\n\\n/**\\n * Globaly accesable, root level namespace for the library.\\n * @namespace\\n * @prop {object} EVENT - Namespace for noralized event name constants.\\n * @prop {Basic} Basic - Base object type.\\n * @prop {Point} Point - Object type which holds values on a 2D cartesian plane.\\n * @prop {Size} Size - Object type which holds 2-dimentional values for size.\\n * @prop {function} game - Registers a game view implementation. Also a namespace for other methods.\\n * @prop {object} util - Namespace for utility functions.\\n */\\npl = {\\n\\tBasic: _typesBasic2['default'], Point: _typesDimensions.Point, Size: _typesDimensions.Size, Queue: _typesQueue2['default'],\\n\\tgame: _playGame2['default'],\\n\\tutil: _util2['default'],\\n\\n\\t/**\\n  * @namespace\\n  * @prop {string} ACTION - The device normalized `click` event name.\\n  * @prop {string} ACTION_DOWN - The device normalized `mousedown` event name.\\n  * @prop {string} ACTION_UP - The device normalized `mouseup` event name.\\n  * @prop {string} ACTION_MOVE - The device normalized `mousemove` event name.\\n  * @prop {string} ACTION_OUT - The device normalized `mouseout` event name.\\n  */\\n\\tEVENT: resolveEventType()\\n};\\n\\nexports['default'] = pl;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvcGxheS5qcz82ZWUyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztvQ0FXaUIsRUFBVzs7OztnQ0FDWCxFQUFNOzs7O3NDQUNMLEVBQWE7Ozs7c0NBQ2IsRUFBYTs7OzsyQ0FDSCxDQUFrQjs7QUFFOUMsSUFBSSxFQUFFLENBQUM7Ozs7QUFJUCxTQUFTLGdCQUFnQixHQUFJO0FBQzVCLEtBQUksVUFBVSxDQUFDOztBQUVmLEtBQUksc0JBQUssT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQzFCLFlBQVUsR0FBRztBQUNaLFNBQU0sRUFBRSxVQUFVO0FBQ2xCLGNBQVcsRUFBRSxZQUFZO0FBQ3pCLFlBQVMsRUFBRSxVQUFVO0FBQ3JCLGNBQVcsRUFBRSxXQUFXO0FBQ3hCLGFBQVUsRUFBRSxhQUFhO0dBQ3pCLENBQUM7RUFDRixNQUFNO0FBQ04sWUFBVSxHQUFHO0FBQ1osU0FBTSxFQUFFLE9BQU87QUFDZixjQUFXLEVBQUUsV0FBVztBQUN4QixZQUFTLEVBQUUsU0FBUztBQUNwQixjQUFXLEVBQUUsV0FBVztBQUN4QixhQUFVLEVBQUUsVUFBVTtHQUN0QixDQUFDO0VBQ0Y7O0FBRUQsUUFBTyxVQUFVLENBQUM7Q0FDbEI7Ozs7Ozs7Ozs7OztBQVlELEVBQUUsR0FBRztBQUNKLE1BQUssMkJBQUUsS0FBSywwQkFBRSxJQUFJLHlCQUFFLEtBQUs7QUFDekIsS0FBSTtBQUNKLEtBQUk7Ozs7Ozs7Ozs7QUFVSixNQUFLLEVBQUUsZ0JBQWdCLEVBQUU7Q0FDekIsQ0FBQzs7cUJBRWEsRUFBRSIsImZpbGUiOiIxNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRGVmaW5lcyB0aGUgZ2xvYmFsIHJvb3QgbGV2ZWwgbmFtZXNwYWNlIGZvciB0aGUgbGlicmFyeS5cbiAqXG4gKiBAbW9kdWxlXG4gKiBAYXV0aG9yIE1pY2FoIFJvbG9uIDxtaWNhaEBnaW5hc2luay5jb20+XG4gKlxuICogQHJlcXVpcmVzIGdhbWVcbiAqIEByZXF1aXJlcyBtb2R1bGU6cGxheX5wbC51dGlsXG4gKiBAcmVxdWlyZXMgdHlwZXMvQmFzaWNcbiAqIEByZXF1aXJlcyB0eXBlcy9EaW1lbnNpb25zXG4gKi9cbmltcG9ydCBnYW1lIGZyb20gJ3BsYXkuZ2FtZSc7XG5pbXBvcnQgdXRpbCBmcm9tICd1dGlsJztcbmltcG9ydCBCYXNpYyBmcm9tICd0eXBlcy9CYXNpYyc7XG5pbXBvcnQgUXVldWUgZnJvbSAndHlwZXMvUXVldWUnO1xuaW1wb3J0IHsgUG9pbnQsIFNpemUgfSBmcm9tICd0eXBlcy9EaW1lbnNpb25zJztcblxudmFyIHBsO1xuLyoqXG4gKiBSZXNvbHZlcyB0aGUgZXZlbnQgdHlwZSBmb3IgdXNlciBpbnRlcmFjdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVFdmVudFR5cGUgKCkge1xuXHR2YXIgcmVzb2x1dGlvbjtcblxuXHRpZiAoZ2FtZS5mZWF0dXJlKCd0b3VjaCcpKSB7XG5cdFx0cmVzb2x1dGlvbiA9IHtcblx0XHRcdEFDVElPTjogJ3RvdWNoZW5kJyxcblx0XHRcdEFDVElPTl9ET1dOOiAndG91Y2hzdGFydCcsXG5cdFx0XHRBQ1RJT05fVVA6ICd0b3VjaGVuZCcsXG5cdFx0XHRBQ1RJT05fTU9WRTogJ3RvdWNobW92ZScsXG5cdFx0XHRBQ1RJT05fT1VUOiAndG91Y2hjYW5jZWwnXG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRyZXNvbHV0aW9uID0ge1xuXHRcdFx0QUNUSU9OOiAnY2xpY2snLFxuXHRcdFx0QUNUSU9OX0RPV046ICdtb3VzZWRvd24nLFxuXHRcdFx0QUNUSU9OX1VQOiAnbW91c2V1cCcsXG5cdFx0XHRBQ1RJT05fTU9WRTogJ21vdXNlbW92ZScsXG5cdFx0XHRBQ1RJT05fT1VUOiAnbW91c2VvdXQnXG5cdFx0fTtcblx0fVxuXG5cdHJldHVybiByZXNvbHV0aW9uO1xufVxuXG4vKipcbiAqIEdsb2JhbHkgYWNjZXNhYmxlLCByb290IGxldmVsIG5hbWVzcGFjZSBmb3IgdGhlIGxpYnJhcnkuXG4gKiBAbmFtZXNwYWNlXG4gKiBAcHJvcCB7b2JqZWN0fSBFVkVOVCAtIE5hbWVzcGFjZSBmb3Igbm9yYWxpemVkIGV2ZW50IG5hbWUgY29uc3RhbnRzLlxuICogQHByb3Age0Jhc2ljfSBCYXNpYyAtIEJhc2Ugb2JqZWN0IHR5cGUuXG4gKiBAcHJvcCB7UG9pbnR9IFBvaW50IC0gT2JqZWN0IHR5cGUgd2hpY2ggaG9sZHMgdmFsdWVzIG9uIGEgMkQgY2FydGVzaWFuIHBsYW5lLlxuICogQHByb3Age1NpemV9IFNpemUgLSBPYmplY3QgdHlwZSB3aGljaCBob2xkcyAyLWRpbWVudGlvbmFsIHZhbHVlcyBmb3Igc2l6ZS5cbiAqIEBwcm9wIHtmdW5jdGlvbn0gZ2FtZSAtIFJlZ2lzdGVycyBhIGdhbWUgdmlldyBpbXBsZW1lbnRhdGlvbi4gQWxzbyBhIG5hbWVzcGFjZSBmb3Igb3RoZXIgbWV0aG9kcy5cbiAqIEBwcm9wIHtvYmplY3R9IHV0aWwgLSBOYW1lc3BhY2UgZm9yIHV0aWxpdHkgZnVuY3Rpb25zLlxuICovXG5wbCA9IHtcblx0QmFzaWMsIFBvaW50LCBTaXplLCBRdWV1ZSxcblx0Z2FtZSxcblx0dXRpbCxcblx0XG5cdC8qKlxuXHQgKiBAbmFtZXNwYWNlXG5cdCAqIEBwcm9wIHtzdHJpbmd9IEFDVElPTiAtIFRoZSBkZXZpY2Ugbm9ybWFsaXplZCBgY2xpY2tgIGV2ZW50IG5hbWUuXG5cdCAqIEBwcm9wIHtzdHJpbmd9IEFDVElPTl9ET1dOIC0gVGhlIGRldmljZSBub3JtYWxpemVkIGBtb3VzZWRvd25gIGV2ZW50IG5hbWUuXG5cdCAqIEBwcm9wIHtzdHJpbmd9IEFDVElPTl9VUCAtIFRoZSBkZXZpY2Ugbm9ybWFsaXplZCBgbW91c2V1cGAgZXZlbnQgbmFtZS5cblx0ICogQHByb3Age3N0cmluZ30gQUNUSU9OX01PVkUgLSBUaGUgZGV2aWNlIG5vcm1hbGl6ZWQgYG1vdXNlbW92ZWAgZXZlbnQgbmFtZS5cblx0ICogQHByb3Age3N0cmluZ30gQUNUSU9OX09VVCAtIFRoZSBkZXZpY2Ugbm9ybWFsaXplZCBgbW91c2VvdXRgIGV2ZW50IG5hbWUuXG5cdCAqL1xuXHRFVkVOVDogcmVzb2x2ZUV2ZW50VHlwZSgpXG59O1xuXG5leHBvcnQgZGVmYXVsdCBwbDtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc291cmNlL3BsYXkuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Defines the 'game' method for registration and initialization of game scopes. This method also acts as a namespace for game level functions (See: [pl.game]{@link module:play~pl.game}).\\n *\\n * @module game\\n * @author Micah Rolon <micah@ginasink.com>\\n *\\n * @requires play.game.component\\n * @requires play.game.manager\\n * @requires util\\n * @requires types/Events\\n * @requires types/GlobalScope\\n * @requires types/Entity\\n * @requires types/Screen\\n * @requires types/Game\\n */\\n\\nvar _playGameComponent = __webpack_require__(17);\\n\\nvar _playGameComponent2 = _interopRequireDefault(_playGameComponent);\\n\\nvar _playGameManager = __webpack_require__(19);\\n\\nvar _playGameManager2 = _interopRequireDefault(_playGameManager);\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesEvents = __webpack_require__(18);\\n\\nvar _typesEvents2 = _interopRequireDefault(_typesEvents);\\n\\nvar _typesGlobalScope = __webpack_require__(22);\\n\\nvar _typesGlobalScope2 = _interopRequireDefault(_typesGlobalScope);\\n\\nvar _typesEntity = __webpack_require__(39);\\n\\nvar _typesEntity2 = _interopRequireDefault(_typesEntity);\\n\\nvar _typesScreen = __webpack_require__(40);\\n\\nvar _typesScreen2 = _interopRequireDefault(_typesScreen);\\n\\nvar _typesGame = __webpack_require__(41);\\n\\nvar _typesGame2 = _interopRequireDefault(_typesGame);\\n\\nvar _platform = __webpack_require__(42);\\n\\nvar _platform2 = _interopRequireDefault(_platform);\\n\\nvar GAMES, CONFIG, READY_QUEUE;\\n\\n/**\\n * Define a game scope for registration and/or initialization.\\n * This method also acts as a namespace for game level functions (See: [pl.game]{@link module:play~pl.game}).\\n *\\n * @arg {string} _name - The name of the game matched with a DOM nodes 'id' attribute.\\n * @arg {function|object} _implementation - The constructor or object which implements the scope behavior.\\n */\\nfunction game(_name, _implementation) {\\n\\tif (game.isDOMReady) {\\n\\t\\tinitialize(_name, _implementation);\\n\\t} else {\\n\\t\\tregister(_name, _implementation);\\n\\t}\\n}\\n\\nfunction ready(_eventName) {\\n\\tif (READY_QUEUE.length) return false;\\n\\tgame.trigger(_eventName || 'ready');\\n}\\n\\n/**\\n * Registers an implementation of a game scope for initialization.\\n * @protected\\n * @arg {string} _name - The name of the game matched with a DOM nodes 'id' attribute.\\n * @arg {function|object} _implementation - The constructor or object which implements the scope behavior.\\n */\\nfunction register(_name, _implementation) {\\n\\tif (! ~GAMES.indexOf(_name)) {\\n\\t\\tGAMES.push({\\n\\t\\t\\tid: _name,\\n\\t\\t\\timplementation: _implementation\\n\\t\\t});\\n\\t}\\n}\\n\\n/**\\n * Initializes an implementation of a game scope. (overloaded)\\n * @function initialize\\n * @protected\\n * @arg {string} _name - The name of the game matched with a DOM nodes 'id' attribute.\\n * @arg {function|object} _implementation - The constructor or object which implements the scope behavior.\\n */\\n\\n/**\\n * Initializes an implementation of a game scope.\\n * @protected\\n * @arg {array} _collection - The collection of game scope records for initialization.\\n * @arg {function|object} _implementation - The constructor or object which implements the scope behavior.\\n */\\nfunction initialize(_name_collection, _implementation) {\\n\\tswitch (typeof _name_collection) {\\n\\t\\tcase 'string':\\n\\t\\t\\t_typesGlobalScope2['default'][_name_collection] = _typesGame2['default'].extend(_implementation).initialize('#' + _name_collection);\\n\\t\\t\\tbreak;\\n\\n\\t\\tcase 'object':\\n\\t\\t\\t_name_collection.forEach(function (_item, _index) {\\n\\t\\t\\t\\tinitialize(_item.id, _item.implementation);\\n\\t\\t\\t});\\n\\t\\t\\tbreak;\\n\\t}\\n}\\n\\n/** @protected */\\nGAMES = [];\\n/** @protected */\\nCONFIG = {};\\n/** @protected */\\nREADY_QUEUE = [];\\n\\n/**\\n * Interface for game level configuration.\\n * @namespace game\\n * @memberof module:play~pl\\n * @mixes Events\\n */\\n(function () {\\n\\n\\tthis.component = _playGameComponent2['default'];\\n\\tthis.manager = _playGameManager2['default'];\\n\\n\\t_util2['default'].mixin(game, _typesEvents2['default']);\\n\\n\\tthis.on('platform-event', function (_event) {\\n\\t\\tconsole.log('play.game -', _event.name, _event.gameData);\\n\\t});\\n\\n\\t/**\\n  * Starts the dominos falling\\n  * @function run\\n  * @memberof module:play~pl.game\\n  */\\n\\tthis.run = function () {\\n\\t\\tgame.isDOMReady = true;\\n\\t\\tgame.trigger('dom-ready');\\n\\n\\t\\tgame.component.loadAll(function () {\\n\\t\\t\\t// console.log('** All component sources loaded.');\\n\\t\\t\\tinitialize(GAMES);\\n\\n\\t\\t\\tGAMES = null;\\n\\t\\t});\\n\\n\\t\\t_platform2['default'].emit(_platform2['default'].EVENT_INIT);\\n\\t};\\n\\n\\tthis.report = function (_name) {\\n\\t\\t_platform2['default'].emit(_name);\\n\\n\\t\\treturn this.report;\\n\\t};\\n\\n\\tthis.report.exit = function (_gameScope) {\\n\\t\\t_platform2['default'].saveGameState(_gameScope.progress());\\n\\t\\t_platform2['default'].emit(_platform2['default'].EVENT_EXIT);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.report.flip = function (_gameScope) {\\n\\t\\t_platform2['default'].saveGameState(_gameScope.progress());\\n\\t\\t_platform2['default'].emit(_platform2['default'].EVENT_FLIPPED);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * Getter/Setter for game level configuration.\\n  * @function module:play~pl.game.config\\n  * @arg {string} _key - The key to retrieve\\n  * @returns {this}\\n  */\\n\\n\\t/**\\n  * Getter/Setter for game level configuration.\\n  * @function config\\n  * @memberof module:play~pl.game\\n  * @arg {object} _mixin - Object to set properties on configuration.\\n  * @returns {this}\\n  */\\n\\tthis.config = function (_key_mixin) {\\n\\t\\tswitch (typeof _key_mixin) {\\n\\t\\t\\tcase 'string':\\n\\t\\t\\t\\treturn CONFIG[_key_mixin];\\n\\t\\t\\tcase 'object':\\n\\t\\t\\t\\tif (_key_mixin) _util2['default'].mixin(CONFIG, _key_mixin);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * @function provideEntityType\\n  * @deprecated\\n  * @memberof module:play~pl.game\\n  */\\n\\tthis.provideEntityType = function () {\\n\\t\\treturn _typesEntity2['default'];\\n\\t};\\n\\n\\t/**\\n  * @function provideScreenType\\n  * @deprecated\\n  * @memberof module:play~pl.game\\n  */\\n\\tthis.provideScreenType = function () {\\n\\t\\treturn _typesScreen2['default'];\\n\\t};\\n\\n\\t/**\\n  * Augments the global scope.\\n  * @function scope\\n  * @arg {function|object} _mixin - Object or constructor to define members.\\n  * @returns {this}\\n  *\\n  * @memberof module:play~pl.game\\n  */\\n\\tthis.scope = function (_mixin) {\\n\\t\\tif (typeof _mixin === 'function') {\\n\\t\\t\\t_mixin.call(_typesGlobalScope2['default']);\\n\\t\\t} else if (_mixin) {\\n\\t\\t\\t_typesGlobalScope2['default'].mixin(_mixin);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * @function queue\\n  * @deprecated\\n  * @memberof module:play~pl.game\\n  */\\n\\tthis.queue = function (_item) {\\n\\t\\tif (! ~READY_QUEUE.indexOf(_item)) READY_QUEUE.push(_item);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.queue.complete = function (_item, _eventName) {\\n\\t\\tvar index;\\n\\n\\t\\tindex = READY_QUEUE.indexOf(_item);\\n\\t\\tREADY_QUEUE.splice(index, 1);\\n\\n\\t\\tready(_eventName);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * Accessor for the detected features supported by the browser.\\n  *\\n  * *Supported Feature Detectors*\\n  * - touch\\n  *\\n  * @function feature;\\n  * @arg {string} _name - The feature which to test for (i.e. `\\\"touch\\\"`)\\n  * @returns {boolean} The support status for the specified feature.\\n  */\\n\\tthis.feature = (function () {\\n\\t\\tvar detect = {\\n\\t\\t\\ttouch: function touch() {\\n\\t\\t\\t\\treturn window.hasOwnProperty('ontouchend');\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\treturn function (_name) {\\n\\t\\t\\tvar tester = detect[_name];\\n\\t\\t\\tif (!tester && console) console.warn('No feature detection for \\\"' + _name + '\\\".');\\n\\t\\t\\treturn tester && tester();\\n\\t\\t};\\n\\t})();\\n}).call(game);\\n\\nexports['default'] = game;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Defines the `component()` method for component behavior registration. This method is also a namesapce for methods to manage and load component behavior scripts.\\n *\\n * @module\\n * @author Micah Rolon <micah@ginasink.com>\\n *\\n * @requires play~pl.util\\n * @requires types/Events\\n */\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesEvents = __webpack_require__(18);\\n\\nvar _typesEvents2 = _interopRequireDefault(_typesEvents);\\n\\n/**\\n * Collection of component behavior records\\n * @const\\n */\\nvar COMPONENTS;\\n\\n/**\\n * Registers a component behavior.\\n * @arg {string} _name - The name for the component.\\n * @arg {function|object} _implementation - Constructor function or object with the behavior's implementation.\\n * @returns {@link module:play~pl.game}\\n */\\nfunction component(_name, _implementation) {\\n\\tif (!component.get(_name)) {\\n\\t\\tCOMPONENTS.push({\\n\\t\\t\\tname: _name,\\n\\t\\t\\timplementation: _implementation,\\n\\t\\t\\tconfig: {}\\n\\t\\t});\\n\\t}\\n\\n\\treturn this;\\n}\\n\\nCOMPONENTS = [];\\n\\n/**\\n * Methods to manage and load component behavior scripts.\\n * @namespace component\\n * @memberof module:play~pl.game\\n * @mixes Events\\n */\\n(function () {\\n\\n\\t_util2['default'].mixin(this, _typesEvents2['default']);\\n\\n\\t/**\\n  * Given a name; provides the component record. `{name, implementation}`\\n  * @memberof module:play~pl.game.component\\n  * @arg {string} _name - The name of the component.\\n  * @returns {object} The record.\\n  */\\n\\tthis.get = function (_name) {\\n\\t\\tvar i, record;\\n\\n\\t\\tfor (i = 0; record = COMPONENTS[i]; i += 1) {\\n\\t\\t\\tif (record.name === _name) return record;\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t};\\n\\n\\t/**\\n  * Loads the script for the component. The HTML and CSS will be loaded when the component scope initalizes.<br>\\n  * The path of the script file is resolved `{pl.game.config.componentDirectory}/{_name}/behavior.js`.\\n  * @memberof module:play~pl.game.component\\n  * @arg {string} _name - The name of the component.\\n  * @arg {function} _callback - Callback for load success.\\n  * @todo Implement Promises.\\n  * @returns `this`\\n  */\\n\\tthis.load = function (_name, _callback) {\\n\\t\\tvar path;\\n\\n\\t\\tif (component.get(_name)) {\\n\\t\\t\\tif (_callback) _callback.call(component, _name);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\tpath = pl.game.config('componentDirectory') + _name + '/behavior.js';\\n\\n\\t\\t$.getScript(path, function () {\\n\\t\\t\\tif (_callback) _callback.call(component, _name);\\n\\t\\t\\tcomponent.trigger('loaded', [_name]);\\n\\t\\t});\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * Loads all the component scripts for HTML elements with `pl-component` attributes.\\n  * @memberof module:play~pl.game.component\\n  * @arg {function} _callback - Callback for load success.\\n  * @todo Implement Promises.\\n  * @returns `this`\\n  */\\n\\tthis.loadAll = function (_callback) {\\n\\t\\tvar $components, queue;\\n\\n\\t\\t$components = $('[pl-component]');\\n\\t\\tqueue = [];\\n\\n\\t\\t$components.each(function (_index) {\\n\\t\\t\\tvar name;\\n\\n\\t\\t\\tname = $(this).attr('pl-component');\\n\\n\\t\\t\\tif (~queue.indexOf(name)) return;\\n\\n\\t\\t\\tqueue.push(name);\\n\\t\\t});\\n\\n\\t\\tqueue.slice(0).forEach(function (_name) {\\n\\t\\t\\tcomponent.load(_name, function () {\\n\\t\\t\\t\\tvar index;\\n\\n\\t\\t\\t\\tindex = queue.indexOf(_name);\\n\\t\\t\\t\\tqueue.splice(index, 1);\\n\\n\\t\\t\\t\\tif (!queue.length && _callback) _callback.apply(component, arguments);\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t// Maybe?\\n\\t// this.config = function () {};\\n}).call(component);\\n\\nexports['default'] = component;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvcGxheS5nYW1lLmNvbXBvbmVudC5qcz9lMTg2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Z0NBU2lCLEVBQU07Ozs7dUNBQ0osRUFBYzs7Ozs7Ozs7QUFNakMsSUFBSSxVQUFVLENBQUM7Ozs7Ozs7O0FBUWYsU0FBUyxTQUFTLENBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRTtBQUMzQyxLQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUMxQixZQUFVLENBQUMsSUFBSSxDQUFDO0FBQ2YsT0FBSSxFQUFFLEtBQUs7QUFDWCxpQkFBYyxFQUFFLGVBQWU7QUFDL0IsU0FBTSxFQUFFLEVBQUU7R0FDVixDQUFDLENBQUM7RUFDSDs7QUFFRCxRQUFPLElBQUksQ0FBQztDQUNaOztBQUVELFVBQVUsR0FBRyxFQUFFLENBQUM7Ozs7Ozs7O0FBUWhCLENBQUMsWUFBWTs7QUFFWixtQkFBSyxLQUFLLENBQUMsSUFBSSwyQkFBUyxDQUFDOzs7Ozs7OztBQVF6QixLQUFJLENBQUMsR0FBRyxHQUFHLFVBQVUsS0FBSyxFQUFFO0FBQzNCLE1BQUksQ0FBQyxFQUFFLE1BQU0sQ0FBQzs7QUFFZCxPQUFLLENBQUMsR0FBQyxDQUFDLEVBQUUsTUFBTSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUUsQ0FBQyxFQUFFO0FBQ3ZDLE9BQUksTUFBTSxDQUFDLElBQUksS0FBSyxLQUFLLEVBQUUsT0FBTyxNQUFNLENBQUM7R0FDekM7O0FBRUQsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDOzs7Ozs7Ozs7OztBQVdGLEtBQUksQ0FBQyxJQUFJLEdBQUcsVUFBVSxLQUFLLEVBQUUsU0FBUyxFQUFFO0FBQ3ZDLE1BQUksSUFBSTs7QUFFUixNQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDekIsT0FBSSxTQUFTLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDaEQsVUFBTyxJQUFJLENBQUM7R0FDWjs7QUFFRCxNQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsR0FBQyxLQUFLLEdBQUMsY0FBYyxDQUFDOztBQUVqRSxHQUFDLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxZQUFZO0FBQzdCLE9BQUksU0FBUyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ2hELFlBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztHQUNyQyxDQUFDLENBQUM7O0FBRUgsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDOzs7Ozs7Ozs7QUFTRixLQUFJLENBQUMsT0FBTyxHQUFHLFVBQVUsU0FBUyxFQUFFO0FBQ25DLE1BQUksV0FBVyxFQUFFLEtBQUssQ0FBQzs7QUFFdkIsYUFBVyxHQUFHLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ2xDLE9BQUssR0FBRyxFQUFFLENBQUM7O0FBRVgsYUFBVyxDQUFDLElBQUksQ0FBQyxVQUFVLE1BQU0sRUFBRTtBQUNsQyxPQUFJLElBQUksQ0FBQzs7QUFFVCxPQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQzs7QUFFcEMsT0FBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTzs7QUFFakMsUUFBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUNqQixDQUFDLENBQUM7O0FBRUgsT0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxLQUFLLEVBQUU7QUFDdkMsWUFBUyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsWUFBWTtBQUNqQyxRQUFJLEtBQUssQ0FBQzs7QUFFVixTQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM3QixTQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQzs7QUFFdkIsUUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksU0FBUyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQztJQUNyRSxDQUFDLENBQUM7R0FDSCxDQUFDLENBQUM7O0FBRUgsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDOzs7O0NBS0YsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7O3FCQUVKLFNBQVMiLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERlZmluZXMgdGhlIGBjb21wb25lbnQoKWAgbWV0aG9kIGZvciBjb21wb25lbnQgYmVoYXZpb3IgcmVnaXN0cmF0aW9uLiBUaGlzIG1ldGhvZCBpcyBhbHNvIGEgbmFtZXNhcGNlIGZvciBtZXRob2RzIHRvIG1hbmFnZSBhbmQgbG9hZCBjb21wb25lbnQgYmVoYXZpb3Igc2NyaXB0cy5cbiAqXG4gKiBAbW9kdWxlXG4gKiBAYXV0aG9yIE1pY2FoIFJvbG9uIDxtaWNhaEBnaW5hc2luay5jb20+XG4gKlxuICogQHJlcXVpcmVzIHBsYXl+cGwudXRpbFxuICogQHJlcXVpcmVzIHR5cGVzL0V2ZW50c1xuICovXG5pbXBvcnQgdXRpbCBmcm9tICd1dGlsJztcbmltcG9ydCBFdmVudHMgZnJvbSAndHlwZXMvRXZlbnRzJztcblxuLyoqXG4gKiBDb2xsZWN0aW9uIG9mIGNvbXBvbmVudCBiZWhhdmlvciByZWNvcmRzXG4gKiBAY29uc3RcbiAqL1xudmFyIENPTVBPTkVOVFM7XG5cbi8qKlxuICogUmVnaXN0ZXJzIGEgY29tcG9uZW50IGJlaGF2aW9yLlxuICogQGFyZyB7c3RyaW5nfSBfbmFtZSAtIFRoZSBuYW1lIGZvciB0aGUgY29tcG9uZW50LlxuICogQGFyZyB7ZnVuY3Rpb258b2JqZWN0fSBfaW1wbGVtZW50YXRpb24gLSBDb25zdHJ1Y3RvciBmdW5jdGlvbiBvciBvYmplY3Qgd2l0aCB0aGUgYmVoYXZpb3IncyBpbXBsZW1lbnRhdGlvbi5cbiAqIEByZXR1cm5zIHtAbGluayBtb2R1bGU6cGxheX5wbC5nYW1lfVxuICovXG5mdW5jdGlvbiBjb21wb25lbnQgKF9uYW1lLCBfaW1wbGVtZW50YXRpb24pIHtcblx0aWYgKCFjb21wb25lbnQuZ2V0KF9uYW1lKSkge1xuXHRcdENPTVBPTkVOVFMucHVzaCh7XG5cdFx0XHRuYW1lOiBfbmFtZSxcblx0XHRcdGltcGxlbWVudGF0aW9uOiBfaW1wbGVtZW50YXRpb24sXG5cdFx0XHRjb25maWc6IHt9XG5cdFx0fSk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn1cblxuQ09NUE9ORU5UUyA9IFtdO1xuXG4vKipcbiAqIE1ldGhvZHMgdG8gbWFuYWdlIGFuZCBsb2FkIGNvbXBvbmVudCBiZWhhdmlvciBzY3JpcHRzLlxuICogQG5hbWVzcGFjZSBjb21wb25lbnRcbiAqIEBtZW1iZXJvZiBtb2R1bGU6cGxheX5wbC5nYW1lXG4gKiBAbWl4ZXMgRXZlbnRzXG4gKi9cbihmdW5jdGlvbiAoKSB7XG5cdFxuXHR1dGlsLm1peGluKHRoaXMsIEV2ZW50cyk7XG5cblx0LyoqXG5cdCAqIEdpdmVuIGEgbmFtZTsgcHJvdmlkZXMgdGhlIGNvbXBvbmVudCByZWNvcmQuIGB7bmFtZSwgaW1wbGVtZW50YXRpb259YFxuXHQgKiBAbWVtYmVyb2YgbW9kdWxlOnBsYXl+cGwuZ2FtZS5jb21wb25lbnRcblx0ICogQGFyZyB7c3RyaW5nfSBfbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBjb21wb25lbnQuXG5cdCAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSByZWNvcmQuXG5cdCAqL1xuXHR0aGlzLmdldCA9IGZ1bmN0aW9uIChfbmFtZSkge1xuXHRcdHZhciBpLCByZWNvcmQ7XG5cblx0XHRmb3IgKGk9MDsgcmVjb3JkID0gQ09NUE9ORU5UU1tpXTsgaSs9MSkge1xuXHRcdFx0aWYgKHJlY29yZC5uYW1lID09PSBfbmFtZSkgcmV0dXJuIHJlY29yZDtcblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblx0fTtcblxuXHQvKipcblx0ICogTG9hZHMgdGhlIHNjcmlwdCBmb3IgdGhlIGNvbXBvbmVudC4gVGhlIEhUTUwgYW5kIENTUyB3aWxsIGJlIGxvYWRlZCB3aGVuIHRoZSBjb21wb25lbnQgc2NvcGUgaW5pdGFsaXplcy48YnI+XG5cdCAqIFRoZSBwYXRoIG9mIHRoZSBzY3JpcHQgZmlsZSBpcyByZXNvbHZlZCBge3BsLmdhbWUuY29uZmlnLmNvbXBvbmVudERpcmVjdG9yeX0ve19uYW1lfS9iZWhhdmlvci5qc2AuXG5cdCAqIEBtZW1iZXJvZiBtb2R1bGU6cGxheX5wbC5nYW1lLmNvbXBvbmVudFxuXHQgKiBAYXJnIHtzdHJpbmd9IF9uYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGNvbXBvbmVudC5cblx0ICogQGFyZyB7ZnVuY3Rpb259IF9jYWxsYmFjayAtIENhbGxiYWNrIGZvciBsb2FkIHN1Y2Nlc3MuXG5cdCAqIEB0b2RvIEltcGxlbWVudCBQcm9taXNlcy5cblx0ICogQHJldHVybnMgYHRoaXNgXG5cdCAqL1xuXHR0aGlzLmxvYWQgPSBmdW5jdGlvbiAoX25hbWUsIF9jYWxsYmFjaykge1xuXHRcdHZhciBwYXRoXG5cblx0XHRpZiAoY29tcG9uZW50LmdldChfbmFtZSkpIHtcblx0XHRcdGlmIChfY2FsbGJhY2spIF9jYWxsYmFjay5jYWxsKGNvbXBvbmVudCwgX25hbWUpO1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0cGF0aCA9IHBsLmdhbWUuY29uZmlnKCdjb21wb25lbnREaXJlY3RvcnknKStfbmFtZSsnL2JlaGF2aW9yLmpzJztcblxuXHRcdCQuZ2V0U2NyaXB0KHBhdGgsIGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmIChfY2FsbGJhY2spIF9jYWxsYmFjay5jYWxsKGNvbXBvbmVudCwgX25hbWUpO1xuXHRcdFx0Y29tcG9uZW50LnRyaWdnZXIoJ2xvYWRlZCcsIFtfbmFtZV0pO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0LyoqXG5cdCAqIExvYWRzIGFsbCB0aGUgY29tcG9uZW50IHNjcmlwdHMgZm9yIEhUTUwgZWxlbWVudHMgd2l0aCBgcGwtY29tcG9uZW50YCBhdHRyaWJ1dGVzLlxuXHQgKiBAbWVtYmVyb2YgbW9kdWxlOnBsYXl+cGwuZ2FtZS5jb21wb25lbnRcblx0ICogQGFyZyB7ZnVuY3Rpb259IF9jYWxsYmFjayAtIENhbGxiYWNrIGZvciBsb2FkIHN1Y2Nlc3MuXG5cdCAqIEB0b2RvIEltcGxlbWVudCBQcm9taXNlcy5cblx0ICogQHJldHVybnMgYHRoaXNgXG5cdCAqL1xuXHR0aGlzLmxvYWRBbGwgPSBmdW5jdGlvbiAoX2NhbGxiYWNrKSB7XG5cdFx0dmFyICRjb21wb25lbnRzLCBxdWV1ZTtcblxuXHRcdCRjb21wb25lbnRzID0gJCgnW3BsLWNvbXBvbmVudF0nKTtcblx0XHRxdWV1ZSA9IFtdO1xuXG5cdFx0JGNvbXBvbmVudHMuZWFjaChmdW5jdGlvbiAoX2luZGV4KSB7XG5cdFx0XHR2YXIgbmFtZTtcblxuXHRcdFx0bmFtZSA9ICQodGhpcykuYXR0cigncGwtY29tcG9uZW50Jyk7XG5cblx0XHRcdGlmICh+cXVldWUuaW5kZXhPZihuYW1lKSkgcmV0dXJuO1xuXG5cdFx0XHRxdWV1ZS5wdXNoKG5hbWUpO1xuXHRcdH0pO1xuXG5cdFx0cXVldWUuc2xpY2UoMCkuZm9yRWFjaChmdW5jdGlvbiAoX25hbWUpIHtcblx0XHRcdGNvbXBvbmVudC5sb2FkKF9uYW1lLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHZhciBpbmRleDtcblxuXHRcdFx0XHRpbmRleCA9IHF1ZXVlLmluZGV4T2YoX25hbWUpO1xuXHRcdFx0XHRxdWV1ZS5zcGxpY2UoaW5kZXgsIDEpO1xuXG5cdFx0XHRcdGlmICghcXVldWUubGVuZ3RoICYmIF9jYWxsYmFjaykgX2NhbGxiYWNrLmFwcGx5KGNvbXBvbmVudCwgYXJndW1lbnRzKVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvLyBNYXliZT9cblx0Ly8gdGhpcy5jb25maWcgPSBmdW5jdGlvbiAoKSB7fTtcblxufSkuY2FsbChjb21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQ7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NvdXJjZS9wbGF5LmdhbWUuY29tcG9uZW50LmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n*  Events\\n*  @desc Contains methods for managing and dispatching events from objects.\\n*  @proto Basic\\n*/\\n\\nvar _typesBasic = __webpack_require__(11);\\n\\nvar _typesBasic2 = _interopRequireDefault(_typesBasic);\\n\\nvar Events = _typesBasic2['default'].extend(function () {\\n\\tvar i, method, methods;\\n\\t/**\\n *  @desc Creates a function with a proxy to the jQuery method.\\n *  @param _name (String) The name of the method being proxied.\\n *  @return (jQuery|*) Either a jQuery object or whatever the original method returns.\\n *  @private\\n */\\n\\tfunction createProxyFunction(_name) {\\n\\t\\treturn function () {\\n\\t\\t\\tvar $jq = $();\\n\\t\\t\\t// We must wrap our object in jQuery. If 'typeof this' is a function then we need\\n\\t\\t\\t// to add it in this manner, otherwise jQuery treats it like a ready callback.\\n\\t\\t\\t$jq.push(this);\\n\\n\\t\\t\\treturn $.fn[_name].apply($jq, arguments);\\n\\t\\t};\\n\\t}\\n\\n\\tmethods = ['on', 'off', 'trigger'];\\n\\n\\tthis.baseType = 'TYPE_EVENTS';\\n\\n\\tfor (i = 0; method = methods[i]; i += 1) {\\n\\t\\tthis[method] = createProxyFunction(method);\\n\\t}\\n});\\n\\nexports['default'] = Events;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvRXZlbnRzLmpzP2VlZTMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O3NDQU1rQixFQUFhOzs7O0FBRS9CLElBQUksTUFBTSxHQUFHLHdCQUFNLE1BQU0sQ0FBQyxZQUFZO0FBQ3JDLEtBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUM7Ozs7Ozs7QUFPdkIsVUFBUyxtQkFBbUIsQ0FBRSxLQUFLLEVBQUU7QUFDcEMsU0FBTyxZQUFZO0FBQ2xCLE9BQUksR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDOzs7QUFHZCxNQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDOztBQUVmLFVBQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0dBQ3pDLENBQUM7RUFDRjs7QUFFRCxRQUFPLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDOztBQUVuQyxLQUFJLENBQUMsUUFBUSxHQUFHLGFBQWEsQ0FBQzs7QUFFOUIsTUFBSyxDQUFDLEdBQUMsQ0FBQyxFQUFFLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFFLENBQUMsRUFBRTtBQUNwQyxNQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7RUFDM0M7Q0FDRCxDQUFDLENBQUM7O3FCQUVZLE1BQU0iLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiogIEV2ZW50c1xuKiAgQGRlc2MgQ29udGFpbnMgbWV0aG9kcyBmb3IgbWFuYWdpbmcgYW5kIGRpc3BhdGNoaW5nIGV2ZW50cyBmcm9tIG9iamVjdHMuXG4qICBAcHJvdG8gQmFzaWNcbiovXG5cbmltcG9ydCBCYXNpYyBmcm9tICd0eXBlcy9CYXNpYyc7XG5cbnZhciBFdmVudHMgPSBCYXNpYy5leHRlbmQoZnVuY3Rpb24gKCkge1xuXHR2YXIgaSwgbWV0aG9kLCBtZXRob2RzO1xuXHQvKipcblx0KiAgQGRlc2MgQ3JlYXRlcyBhIGZ1bmN0aW9uIHdpdGggYSBwcm94eSB0byB0aGUgalF1ZXJ5IG1ldGhvZC5cblx0KiAgQHBhcmFtIF9uYW1lIChTdHJpbmcpIFRoZSBuYW1lIG9mIHRoZSBtZXRob2QgYmVpbmcgcHJveGllZC5cblx0KiAgQHJldHVybiAoalF1ZXJ5fCopIEVpdGhlciBhIGpRdWVyeSBvYmplY3Qgb3Igd2hhdGV2ZXIgdGhlIG9yaWdpbmFsIG1ldGhvZCByZXR1cm5zLlxuXHQqICBAcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBjcmVhdGVQcm94eUZ1bmN0aW9uIChfbmFtZSkge1xuXHRcdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgJGpxID0gJCgpO1xuXHRcdFx0Ly8gV2UgbXVzdCB3cmFwIG91ciBvYmplY3QgaW4galF1ZXJ5LiBJZiAndHlwZW9mIHRoaXMnIGlzIGEgZnVuY3Rpb24gdGhlbiB3ZSBuZWVkXG5cdFx0XHQvLyB0byBhZGQgaXQgaW4gdGhpcyBtYW5uZXIsIG90aGVyd2lzZSBqUXVlcnkgdHJlYXRzIGl0IGxpa2UgYSByZWFkeSBjYWxsYmFjay5cblx0XHRcdCRqcS5wdXNoKHRoaXMpO1xuXG5cdFx0XHRyZXR1cm4gJC5mbltfbmFtZV0uYXBwbHkoJGpxLCBhcmd1bWVudHMpO1xuXHRcdH07XG5cdH1cblxuXHRtZXRob2RzID0gWydvbicsICdvZmYnLCAndHJpZ2dlciddO1xuXG5cdHRoaXMuYmFzZVR5cGUgPSAnVFlQRV9FVkVOVFMnO1xuXG5cdGZvciAoaT0wOyBtZXRob2QgPSBtZXRob2RzW2ldOyBpKz0xKSB7XG5cdFx0dGhpc1ttZXRob2RdID0gY3JlYXRlUHJveHlGdW5jdGlvbihtZXRob2QpO1xuXHR9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgRXZlbnRzO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc291cmNlL3R5cGVzL0V2ZW50cy5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n\\nvar _playGameManagerDraggable = __webpack_require__(20);\\n\\nvar _playGameManagerDraggable2 = _interopRequireDefault(_playGameManagerDraggable);\\n\\nexports.draggable = _playGameManagerDraggable2['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvcGxheS5nYW1lLm1hbmFnZXIuanM/ODJiNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O29EQUFzQixFQUE2Qjs7OztRQUUxQyxTQUFTIiwiZmlsZSI6IjE5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRyYWdnYWJsZSBmcm9tICdwbGF5LmdhbWUubWFuYWdlci5kcmFnZ2FibGUnO1xuXG5leHBvcnQgeyBkcmFnZ2FibGUgfVxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc291cmNlL3BsYXkuZ2FtZS5tYW5hZ2VyLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesCollection = __webpack_require__(21);\\n\\nvar _typesCollection2 = _interopRequireDefault(_typesCollection);\\n\\nvar _typesDimensions = __webpack_require__(5);\\n\\nvar COLLECTION_DRAGABLES = _typesCollection2['default'].create();\\n\\nvar draggableStyleSheet;\\n\\nfunction boot() {\\n\\tcreateHelperStyleSheet();\\n\\tattachEvents();\\n}\\n\\nfunction attachEvents() {\\n\\tvar state, E;\\n\\n\\tE = pl.EVENT;\\n\\n\\t// Disable scrolling on touchDevices (particularly for iOS elastic scroll).\\n\\tif (E.ACTION_MOVE === 'touchmove') attachEvents.disableTouchScroll();\\n\\n\\t$(document).on(E.ACTION_DOWN, function (_event) {\\n\\t\\tvar $draggable, scope, cursor, mode, game, point, transform, helperID, dragStartEvent;\\n\\n\\t\\t$draggable = $(_event.target).closest('[pl-draggable]');\\n\\n\\t\\tif ($draggable.length) {\\n\\t\\t\\tscope = $draggable.scope();\\n\\t\\t\\tcursor = resolveEventPoint(_event, 1 / scope.game.zoom);\\n\\t\\t\\tmode = $draggable.pl('draggable');\\n\\t\\t\\tgame = {\\n\\t\\t\\t\\tposition: scope.game.absolutePosition(),\\n\\t\\t\\t\\tscale: scope.game.transformScale().x\\n\\t\\t\\t};\\n\\t\\t\\tpoint = $draggable.absolutePosition().dec(game.position);\\n\\t\\t\\ttransform = $draggable.transform();\\n\\t\\t\\thelperID = createID();\\n\\t\\t\\tstate = {\\n\\t\\t\\t\\tmode: mode,\\n\\t\\t\\t\\t$draggable: $draggable,\\n\\t\\t\\t\\tscope: scope,\\n\\t\\t\\t\\t$helper: null,\\n\\n\\t\\t\\t\\tstart: {\\n\\t\\t\\t\\t\\tcursor: cursor,\\n\\t\\t\\t\\t\\tpoint: point,\\n\\t\\t\\t\\t\\ttransform: transform\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\tprogress: {\\n\\t\\t\\t\\t\\tdistance: null,\\n\\t\\t\\t\\t\\tpoint: null,\\n\\t\\t\\t\\t\\ttransform: null\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\n\\t\\t\\t// FireFox has a different scaling implementation than other browsers (transform:scale(); vs. zoom:;)\\n\\t\\t\\t// so we need to account for the game transform scale.\\n\\t\\t\\t//\\n\\t\\t\\tif (game.scale !== 1) point = point.scale(1 / game.scale);\\n\\n\\t\\t\\tdraggableStyleSheet.html(provideSource(helperID, createDraggableRule($draggable)));\\n\\n\\t\\t\\tswitch (mode) {\\n\\t\\t\\t\\tcase 'clone':\\n\\t\\t\\t\\t\\tstate.$helper = $draggable.clone();\\n\\t\\t\\t\\t\\tstate.$helper.id(helperID).pl('draggable', null) // helpers are not to be captured as draggable\\n\\t\\t\\t\\t\\t.addClass('draggable-helper').appendTo(document.body).absolutePosition(point);\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tcase 'pluck':\\n\\t\\t\\t\\t\\t$draggable.addClass('PLUCKED');\\n\\n\\t\\t\\t\\t\\tstate.$helper = $draggable.clone();\\n\\t\\t\\t\\t\\tstate.$helper.id(helperID).pl('draggable', null) // helpers are not to be captured as draggable\\n\\t\\t\\t\\t\\t.addClass('draggable-helper').appendTo(document.body).absolutePosition(point);\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\tstate.$helper = $draggable;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\tstate.$helper.removeClass('DRAG-ENDED').addClass('DRAG-START');\\n\\n\\t\\t\\tdragStartEvent = $.Event('drag-start', {\\n\\t\\t\\t\\tstate: state,\\n\\t\\t\\t\\ttargetScope: scope\\n\\t\\t\\t});\\n\\n\\t\\t\\tscope.trigger(dragStartEvent);\\n\\t\\t}\\n\\t}).on(E.ACTION_MOVE, function (_event) {\\n\\t\\tvar cursor, $draggable, distance, point, transform, dragMoveEvent;\\n\\n\\t\\tif (state) {\\n\\t\\t\\tcursor = resolveEventPoint(_event, 1 / state.scope.game.zoom);\\n\\t\\t\\tdistance = state.start.cursor.distance(cursor);\\n\\t\\t\\tpoint = _typesDimensions.Point.create();\\n\\t\\t\\ttransform = null;\\n\\n\\t\\t\\tif (state.start.transform !== 'none') {\\n\\t\\t\\t\\ttransform = state.start.transform.clone();\\n\\t\\t\\t\\ttransform.translate(distance.width, distance.height);\\n\\t\\t\\t\\tpoint.set(transform.applyToPoint(0, 0));\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tpoint = distance.to('point');\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (state.$helper.hasClass('DRAG-START')) {\\n\\t\\t\\t\\tstate.$helper.removeClass('DRAG-START').addClass('DRAGGING');\\n\\t\\t\\t}\\n\\n\\t\\t\\tdragMoveEvent = $.Event('drag-move', {\\n\\t\\t\\t\\tstate: state,\\n\\t\\t\\t\\ttargetScope: state.scope\\n\\t\\t\\t});\\n\\n\\t\\t\\tstate.progress.distance = distance;\\n\\t\\t\\tstate.progress.point = state.start.point.inc(point);\\n\\t\\t\\tstate.progress.transform = transform;\\n\\n\\t\\t\\tstate.scope.translate(state.$helper, point);\\n\\t\\t\\tstate.scope.trigger(dragMoveEvent);\\n\\t\\t}\\n\\t}).on([E.ACTION_UP, E.ACTION_OUT].join(' '), function (_event) {\\n\\t\\tvar $draggable, dragEndEvent;\\n\\n\\t\\tif (state) {\\n\\t\\t\\t// Do not end dragging if we dont mouse out of the document.\\n\\t\\t\\tif (_event.type === 'mouseout' && ! ~[null, document.documentElement].indexOf(_event.toElement)) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t$draggable = state.$draggable;\\n\\n\\t\\t\\tif (state.$helper.hasClass('draggable-helper')) {\\n\\t\\t\\t\\tstate.$helper.on('transitionend', function () {\\n\\t\\t\\t\\t\\t$draggable.removeClass('PLUCKED');\\n\\t\\t\\t\\t\\t$(this).remove();\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\tstate.$helper.removeClass('DRAG-START DRAGGING').addClass('DRAG-ENDED');\\n\\n\\t\\t\\tdragEndEvent = $.Event('drag-end', {\\n\\t\\t\\t\\tstate: state,\\n\\t\\t\\t\\ttargetScope: state.scope\\n\\t\\t\\t});\\n\\n\\t\\t\\tstate.scope.trigger(dragEndEvent);\\n\\n\\t\\t\\tstate = null;\\n\\t\\t}\\n\\t});\\n}\\n\\nattachEvents.disableTouchScroll = function () {\\n\\tdocument.addEventListener(\\\"touchmove\\\", function (_event) {\\n\\t\\t_event.preventDefault();\\n\\t}, false);\\n};\\n\\nfunction resolveEventPoint(_event, _scale) {\\n\\tvar scale = _scale || 1;\\n\\n\\tif (_event.originalEvent && _event.originalEvent.changedTouches) {\\n\\t\\t/**\\n   * For now, interactions should use the last touch if multiple fingers are captured.\\n   * @todo Maybe invoke action for each touch.\\n   */\\n\\t\\t_event.touch = _event.originalEvent.changedTouches[_event.originalEvent.changedTouches.length - 1];\\n\\t}\\n\\n\\treturn _typesDimensions.Point.create().set(new function () {\\n\\t\\tif (_event.touch) {\\n\\t\\t\\tthis.x = _event.touch.clientX * scale;\\n\\t\\t\\tthis.y = _event.touch.clientY * scale;\\n\\t\\t} else {\\n\\t\\t\\tthis.x = _event.clientX * scale;\\n\\t\\t\\tthis.y = _event.clientY * scale;\\n\\t\\t}\\n\\t}());\\n}\\n\\nfunction createHelperStyleSheet() {\\n\\tdraggableStyleSheet = $('<style id=\\\"draggable-helper-css\\\" type=\\\"text/css\\\"></style>').appendTo(document.body);\\n}\\n\\nfunction createDraggableRule(_$draggable) {\\n\\tvar i, style, blacklist, rule, prop;\\n\\n\\tstyle = window.getComputedStyle(_$draggable[0]);\\n\\trule = {};\\n\\tblacklist = [\\\"zIndex\\\", \\\"opacity\\\", \\\"cursor\\\", \\\"transition\\\", \\\"transitionDelay\\\", \\\"transitionDuration\\\", \\\"transitionProperty\\\", \\\"transitionTimingFunction\\\"];\\n\\n\\tfor (i = 0; i < style.length; i += 1) {\\n\\t\\tprop = _util2['default'].transformId(style[i], true);\\n\\t\\tif (~blacklist.indexOf(prop)) continue;\\n\\t\\tif (prop.indexOf('Webkit') === 0) prop = prop.slice(0, 1).toLowerCase() + prop.slice(1);\\n\\t\\tif (style[prop]) rule[prop] = style[prop];\\n\\t}\\n\\n\\treturn rule;\\n}\\n\\nfunction provideSource(_id, _rule) {\\n\\tvar source, prop, value;\\n\\n\\tsource = '#' + _id + '.draggable-helper {';\\n\\n\\tfor (prop in _rule) {\\n\\t\\tif (!_rule.hasOwnProperty(prop)) continue;\\n\\t\\tvalue = _rule[prop];\\n\\t\\tsource += prop.replace(/([A-Z]+)/g, '-$1').toLowerCase() + ': ' + value + ';';\\n\\t}\\n\\n\\tsource += '}';\\n\\n\\treturn source;\\n};\\n\\nfunction createID() {\\n\\treturn 'xy-xyxy-y'.replace(/x|y/g, function (_token) {\\n\\t\\tif (_token === 'x') return (Math.floor(Math.random() * 5) + 10).toString(16);\\n\\t\\treturn Math.floor(Math.random() * Date.now()).toString(16).slice(2);\\n\\t});\\n}\\n\\nvar draggableManager = {};\\n\\n$(boot);\\n\\nexports['default'] = draggableManager;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvcGxheS5nYW1lLm1hbmFnZXIuZHJhZ2dhYmxlLmpzPzMwNjciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztnQ0FBaUIsRUFBTTs7OzsyQ0FDQSxFQUFrQjs7OzsyQ0FDbkIsQ0FBa0I7O0FBRXhDLElBQU0sb0JBQW9CLEdBQUcsNkJBQVcsTUFBTSxFQUFFLENBQUM7O0FBRWpELElBQUksbUJBQW1CLENBQUM7O0FBRXhCLFNBQVMsSUFBSSxHQUFJO0FBQ2hCLHVCQUFzQixFQUFFLENBQUM7QUFDekIsYUFBWSxFQUFFLENBQUM7Q0FDZjs7QUFFRCxTQUFTLFlBQVksR0FBSTtBQUN4QixLQUFJLEtBQUssRUFBRSxDQUFDLENBQUM7O0FBRWIsRUFBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUM7OztBQUdiLEtBQUksQ0FBQyxDQUFDLFdBQVcsS0FBSyxXQUFXLEVBQUUsWUFBWSxDQUFDLGtCQUFrQixFQUFFLENBQUM7O0FBRXJFLEVBQUMsQ0FBQyxRQUFRLENBQUMsQ0FDVCxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxVQUFVLE1BQU0sRUFBRTtBQUNwQyxNQUFJLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsY0FBYyxDQUFDOztBQUV0RixZQUFVLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzs7QUFFeEQsTUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFO0FBQ3RCLFFBQUssR0FBRyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDM0IsU0FBTSxHQUFHLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN0RCxPQUFJLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxX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Z0JBQWdCIiwiZmlsZSI6IjIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHV0aWwgZnJvbSAndXRpbCc7XG5pbXBvcnQgQ29sbGVjdGlvbiBmcm9tICd0eXBlcy9Db2xsZWN0aW9uJztcbmltcG9ydCB7IFBvaW50IH0gZnJvbSAndHlwZXMvRGltZW5zaW9ucyc7XG5cbmNvbnN0IENPTExFQ1RJT05fRFJBR0FCTEVTID0gQ29sbGVjdGlvbi5jcmVhdGUoKTtcblxudmFyIGRyYWdnYWJsZVN0eWxlU2hlZXQ7XG5cbmZ1bmN0aW9uIGJvb3QgKCkge1xuXHRjcmVhdGVIZWxwZXJTdHlsZVNoZWV0KCk7XG5cdGF0dGFjaEV2ZW50cygpO1xufVxuXG5mdW5jdGlvbiBhdHRhY2hFdmVudHMgKCkge1xuXHR2YXIgc3RhdGUsIEU7XG5cblx0RSA9IHBsLkVWRU5UO1xuXG5cdC8vIERpc2FibGUgc2Nyb2xsaW5nIG9uIHRvdWNoRGV2aWNlcyAocGFydGljdWxhcmx5IGZvciBpT1MgZWxhc3RpYyBzY3JvbGwpLlxuXHRpZiAoRS5BQ1RJT05fTU9WRSA9PT0gJ3RvdWNobW92ZScpIGF0dGFjaEV2ZW50cy5kaXNhYmxlVG91Y2hTY3JvbGwoKTtcblxuXHQkKGRvY3VtZW50KVxuXHRcdC5vbihFLkFDVElPTl9ET1dOLCBmdW5jdGlvbiAoX2V2ZW50KSB7XG5cdFx0XHR2YXIgJGRyYWdnYWJsZSwgc2NvcGUsIGN1cnNvciwgbW9kZSwgZ2FtZSwgcG9pbnQsIHRyYW5zZm9ybSwgaGVscGVySUQsIGRyYWdTdGFydEV2ZW50O1xuXG5cdFx0XHQkZHJhZ2dhYmxlID0gJChfZXZlbnQudGFyZ2V0KS5jbG9zZXN0KCdbcGwtZHJhZ2dhYmxlXScpO1xuXG5cdFx0XHRpZiAoJGRyYWdnYWJsZS5sZW5ndGgpIHtcblx0XHRcdFx0c2NvcGUgPSAkZHJhZ2dhYmxlLnNjb3BlKCk7XG5cdFx0XHRcdGN1cnNvciA9IHJlc29sdmVFdmVudFBvaW50KF9ldmVudCwgMS9zY29wZS5nYW1lLnpvb20pO1xuXHRcdFx0XHRtb2RlID0gJGRyYWdnYWJsZS5wbCgnZHJhZ2dhYmxlJyk7XG5cdFx0XHRcdGdhbWUgPSB7XG5cdFx0XHRcdFx0cG9zaXRpb246IHNjb3BlLmdhbWUuYWJzb2x1dGVQb3NpdGlvbigpLFxuXHRcdFx0XHRcdHNjYWxlOiBzY29wZS5nYW1lLnRyYW5zZm9ybVNjYWxlKCkueFxuXHRcdFx0XHR9O1xuXHRcdFx0XHRwb2ludCA9ICRkcmFnZ2FibGUuYWJzb2x1dGVQb3NpdGlvbigpLmRlYyhnYW1lLnBvc2l0aW9uKTtcblx0XHRcdFx0dHJhbnNmb3JtID0gJGRyYWdnYWJsZS50cmFuc2Zvcm0oKTtcblx0XHRcdFx0aGVscGVySUQgPSBjcmVhdGVJRCgpO1xuXHRcdFx0XHRzdGF0ZSA9IHtcblx0XHRcdFx0XHRtb2RlOiBtb2RlLFxuXHRcdFx0XHRcdCRkcmFnZ2FibGU6ICRkcmFnZ2FibGUsXG5cdFx0XHRcdFx0c2NvcGU6IHNjb3BlLFxuXHRcdFx0XHRcdCRoZWxwZXI6IG51bGwsXG5cblx0XHRcdFx0XHRzdGFydDoge1xuXHRcdFx0XHRcdFx0Y3Vyc29yOiBjdXJzb3IsXG5cdFx0XHRcdFx0XHRwb2ludDogcG9pbnQsXG5cdFx0XHRcdFx0XHR0cmFuc2Zvcm06IHRyYW5zZm9ybVxuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRwcm9ncmVzczoge1xuXHRcdFx0XHRcdFx0ZGlzdGFuY2U6IG51bGwsXG5cdFx0XHRcdFx0XHRwb2ludDogbnVsbCxcblx0XHRcdFx0XHRcdHRyYW5zZm9ybTogbnVsbFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBGaXJlRm94IGhhcyBhIGRpZmZlcmVudCBzY2FsaW5nIGltcGxlbWVudGF0aW9uIHRoYW4gb3RoZXIgYnJvd3NlcnMgKHRyYW5zZm9ybTpzY2FsZSgpOyB2cy4gem9vbTo7KVxuXHRcdFx0XHQvLyBzbyB3ZSBuZWVkIHRvIGFjY291bnQgZm9yIHRoZSBnYW1lIHRyYW5zZm9ybSBzY2FsZS5cblx0XHRcdFx0Ly8gXG5cdFx0XHRcdGlmIChnYW1lLnNjYWxlICE9PSAxKSBwb2ludCA9IHBvaW50LnNjYWxlKDEvZ2FtZS5zY2FsZSk7XG5cblx0XHRcdFx0ZHJhZ2dhYmxlU3R5bGVTaGVldC5odG1sKCBwcm92aWRlU291cmNlKCBoZWxwZXJJRCwgY3JlYXRlRHJhZ2dhYmxlUnVsZSgkZHJhZ2dhYmxlKSkpO1xuXG5cdFx0XHRcdHN3aXRjaCAobW9kZSkge1xuXHRcdFx0XHRcdGNhc2UgJ2Nsb25lJzpcblx0XHRcdFx0XHRcdHN0YXRlLiRoZWxwZXIgPSAkZHJhZ2dhYmxlLmNsb25lKCk7XG5cdFx0XHRcdFx0XHRzdGF0ZS4kaGVscGVyXG5cdFx0XHRcdFx0XHRcdC5pZChoZWxwZXJJRClcblx0XHRcdFx0XHRcdFx0LnBsKCdkcmFnZ2FibGUnLCBudWxsKSAvLyBoZWxwZXJzIGFyZSBub3QgdG8gYmUgY2FwdHVyZWQgYXMgZHJhZ2dhYmxlXG5cdFx0XHRcdFx0XHRcdC5hZGRDbGFzcygnZHJhZ2dhYmxlLWhlbHBlcicpXG5cdFx0XHRcdFx0XHRcdC5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KVxuXHRcdFx0XHRcdFx0XHQuYWJzb2x1dGVQb3NpdGlvbihwb2ludCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ3BsdWNrJzpcblx0XHRcdFx0XHRcdCRkcmFnZ2FibGUuYWRkQ2xhc3MoJ1BMVUNLRUQnKTtcblxuXHRcdFx0XHRcdFx0c3RhdGUuJGhlbHBlciA9ICRkcmFnZ2FibGUuY2xvbmUoKTtcblx0XHRcdFx0XHRcdHN0YXRlLiRoZWxwZXJcblx0XHRcdFx0XHRcdFx0LmlkKGhlbHBlcklEKVxuXHRcdFx0XHRcdFx0XHQucGwoJ2RyYWdnYWJsZScsIG51bGwpIC8vIGhlbHBlcnMgYXJlIG5vdCB0byBiZSBjYXB0dXJlZCBhcyBkcmFnZ2FibGVcblx0XHRcdFx0XHRcdFx0LmFkZENsYXNzKCdkcmFnZ2FibGUtaGVscGVyJylcblx0XHRcdFx0XHRcdFx0LmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpXG5cdFx0XHRcdFx0XHRcdC5hYnNvbHV0ZVBvc2l0aW9uKHBvaW50KTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdHN0YXRlLiRoZWxwZXIgPSAkZHJhZ2dhYmxlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzdGF0ZS4kaGVscGVyLnJlbW92ZUNsYXNzKCdEUkFHLUVOREVEJylcblx0XHRcdFx0XHQuYWRkQ2xhc3MoJ0RSQUctU1RBUlQnKTtcblxuXHRcdFx0XHRkcmFnU3RhcnRFdmVudCA9ICQuRXZlbnQoJ2RyYWctc3RhcnQnLCB7XG5cdFx0XHRcdFx0c3RhdGU6IHN0YXRlLFxuXHRcdFx0XHRcdHRhcmdldFNjb3BlOiBzY29wZVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRzY29wZS50cmlnZ2VyKGRyYWdTdGFydEV2ZW50KTtcblx0XHRcdH1cblx0XHR9KVxuXG5cdFx0Lm9uKEUuQUNUSU9OX01PVkUsIGZ1bmN0aW9uIChfZXZlbnQpIHtcblx0XHRcdHZhciBjdXJzb3IsICRkcmFnZ2FibGUsIGRpc3RhbmNlLCBwb2ludCwgdHJhbnNmb3JtLCBkcmFnTW92ZUV2ZW50O1xuXG5cdFx0XHRpZiAoc3RhdGUpIHtcblx0XHRcdFx0Y3Vyc29yID0gcmVzb2x2ZUV2ZW50UG9pbnQoX2V2ZW50LCAxL3N0YXRlLnNjb3BlLmdhbWUuem9vbSk7XG5cdFx0XHRcdGRpc3RhbmNlID0gc3RhdGUuc3RhcnQuY3Vyc29yLmRpc3RhbmNlKGN1cnNvcik7XG5cdFx0XHRcdHBvaW50ID0gUG9pbnQuY3JlYXRlKCk7XG5cdFx0XHRcdHRyYW5zZm9ybSA9IG51bGw7XG5cblx0XHRcdFx0aWYgKHN0YXRlLnN0YXJ0LnRyYW5zZm9ybSAhPT0gJ25vbmUnKSB7XG5cdFx0XHRcdFx0dHJhbnNmb3JtID0gc3RhdGUuc3RhcnQudHJhbnNmb3JtLmNsb25lKCk7XG5cdFx0XHRcdFx0dHJhbnNmb3JtLnRyYW5zbGF0ZShkaXN0YW5jZS53aWR0aCwgZGlzdGFuY2UuaGVpZ2h0KTtcblx0XHRcdFx0XHRwb2ludC5zZXQodHJhbnNmb3JtLmFwcGx5VG9Qb2ludCgwLCAwKSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRwb2ludCA9IGRpc3RhbmNlLnRvKCdwb2ludCcpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHN0YXRlLiRoZWxwZXIuaGFzQ2xhc3MoJ0RSQUctU1RBUlQnKSkge1xuXHRcdFx0XHRcdHN0YXRlLiRoZWxwZXJcblx0XHRcdFx0XHRcdC5yZW1vdmVDbGFzcygnRFJBRy1TVEFSVCcpXG5cdFx0XHRcdFx0XHQuYWRkQ2xhc3MoJ0RSQUdHSU5HJyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkcmFnTW92ZUV2ZW50ID0gJC5FdmVudCgnZHJhZy1tb3ZlJywge1xuXHRcdFx0XHRcdHN0YXRlOiBzdGF0ZSxcblx0XHRcdFx0XHR0YXJnZXRTY29wZTogc3RhdGUuc2NvcGVcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0c3RhdGUucHJvZ3Jlc3MuZGlzdGFuY2UgPSBkaXN0YW5jZTtcblx0XHRcdFx0c3RhdGUucHJvZ3Jlc3MucG9pbnQgPSBzdGF0ZS5zdGFydC5wb2ludC5pbmMocG9pbnQpO1xuXHRcdFx0XHRzdGF0ZS5wcm9ncmVzcy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG5cblx0XHRcdFx0c3RhdGUuc2NvcGUudHJhbnNsYXRlKHN0YXRlLiRoZWxwZXIsIHBvaW50KTtcblx0XHRcdFx0c3RhdGUuc2NvcGUudHJpZ2dlcihkcmFnTW92ZUV2ZW50KTtcblx0XHRcdH1cblx0XHR9KVxuXG5cdFx0Lm9uKFtFLkFDVElPTl9VUCwgRS5BQ1RJT05fT1VUXS5qb2luKCcgJyksIGZ1bmN0aW9uIChfZXZlbnQpIHtcblx0XHRcdHZhciAkZHJhZ2dhYmxlLCBkcmFnRW5kRXZlbnQ7XG5cblx0XHRcdGlmIChzdGF0ZSkge1xuXHRcdFx0XHQvLyBEbyBub3QgZW5kIGRyYWdnaW5nIGlmIHdlIGRvbnQgbW91c2Ugb3V0IG9mIHRoZSBkb2N1bWVudC5cblx0XHRcdFx0aWYgKF9ldmVudC50eXBlID09PSAnbW91c2VvdXQnICYmICF+W251bGwsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudF0uaW5kZXhPZihfZXZlbnQudG9FbGVtZW50KSkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdCRkcmFnZ2FibGUgPSBzdGF0ZS4kZHJhZ2dhYmxlO1xuXG5cdFx0XHRcdGlmIChzdGF0ZS4kaGVscGVyLmhhc0NsYXNzKCdkcmFnZ2FibGUtaGVscGVyJykpIHtcblx0XHRcdFx0XHRzdGF0ZS4kaGVscGVyLm9uKCd0cmFuc2l0aW9uZW5kJywgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0JGRyYWdnYWJsZS5yZW1vdmVDbGFzcygnUExVQ0tFRCcpO1xuXHRcdFx0XHRcdFx0JCh0aGlzKS5yZW1vdmUoKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN0YXRlLiRoZWxwZXJcblx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoJ0RSQUctU1RBUlQgRFJBR0dJTkcnKVxuXHRcdFx0XHRcdC5hZGRDbGFzcygnRFJBRy1FTkRFRCcpO1xuXG5cdFx0XHRcdGRyYWdFbmRFdmVudCA9ICQuRXZlbnQoJ2RyYWctZW5kJywge1xuXHRcdFx0XHRcdHN0YXRlOiBzdGF0ZSxcblx0XHRcdFx0XHR0YXJnZXRTY29wZTogc3RhdGUuc2NvcGVcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0c3RhdGUuc2NvcGUudHJpZ2dlcihkcmFnRW5kRXZlbnQpO1xuXG5cdFx0XHRcdHN0YXRlID0gbnVsbDtcblx0XHRcdH1cblx0XHR9KTtcbn1cblxuYXR0YWNoRXZlbnRzLmRpc2FibGVUb3VjaFNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCBmdW5jdGlvbiAoX2V2ZW50KSB7XG5cdFx0X2V2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdH0sIGZhbHNlKTtcbn07XG5cbmZ1bmN0aW9uIHJlc29sdmVFdmVudFBvaW50IChfZXZlbnQsIF9zY2FsZSkge1xuXHR2YXIgc2NhbGUgPSBfc2NhbGUgfHwgMTtcblxuXHRpZiAoX2V2ZW50Lm9yaWdpbmFsRXZlbnQgJiYgX2V2ZW50Lm9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXMpIHtcblx0XHQvKipcblx0XHQgKiBGb3Igbm93LCBpbnRlcmFjdGlvbnMgc2hvdWxkIHVzZSB0aGUgbGFzdCB0b3VjaCBpZiBtdWx0aXBsZSBmaW5nZXJzIGFyZSBjYXB0dXJlZC5cblx0XHQgKiBAdG9kbyBNYXliZSBpbnZva2UgYWN0aW9uIGZvciBlYWNoIHRvdWNoLlxuXHRcdCAqL1xuXHRcdF9ldmVudC50b3VjaCA9IF9ldmVudC5vcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzW19ldmVudC5vcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aC0xXTtcblx0fVxuXHRcblx0cmV0dXJuIFBvaW50LmNyZWF0ZSgpLnNldChuZXcgZnVuY3Rpb24gKCkge1xuXHRcdGlmIChfZXZlbnQudG91Y2gpIHtcblx0XHRcdHRoaXMueCA9IF9ldmVudC50b3VjaC5jbGllbnRYICogc2NhbGU7XG5cdFx0XHR0aGlzLnkgPSBfZXZlbnQudG91Y2guY2xpZW50WSAqIHNjYWxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnggPSBfZXZlbnQuY2xpZW50WCAqIHNjYWxlO1xuXHRcdFx0dGhpcy55ID0gX2V2ZW50LmNsaWVudFkgKiBzY2FsZTtcblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVIZWxwZXJTdHlsZVNoZWV0ICgpIHtcblx0ZHJhZ2dhYmxlU3R5bGVTaGVldCA9ICQoJzxzdHlsZSBpZD1cImRyYWdnYWJsZS1oZWxwZXItY3NzXCIgdHlwZT1cInRleHQvY3NzXCI+PC9zdHlsZT4nKS5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRHJhZ2dhYmxlUnVsZSAoXyRkcmFnZ2FibGUpIHtcblx0dmFyIGksIHN0eWxlLCBibGFja2xpc3QsIHJ1bGUsIHByb3A7XG5cblx0c3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShfJGRyYWdnYWJsZVswXSk7XG5cdHJ1bGUgPSB7fTtcblx0YmxhY2tsaXN0ID0gW1xuXHRcdFwiekluZGV4XCIsXG5cdFx0XCJvcGFjaXR5XCIsXG5cdFx0XCJjdXJzb3JcIixcblx0XHRcInRyYW5zaXRpb25cIixcblx0XHRcInRyYW5zaXRpb25EZWxheVwiLFxuXHRcdFwidHJhbnNpdGlvbkR1cmF0aW9uXCIsXG5cdFx0XCJ0cmFuc2l0aW9uUHJvcGVydHlcIixcblx0XHRcInRyYW5zaXRpb25UaW1pbmdGdW5jdGlvblwiXG5cdF07XG5cblx0Zm9yIChpPTA7IGkgPCBzdHlsZS5sZW5ndGg7IGkrPTEpIHtcblx0XHRwcm9wID0gdXRpbC50cmFuc2Zvcm1JZChzdHlsZVtpXSwgdHJ1ZSk7XG5cdFx0aWYgKH5ibGFja2xpc3QuaW5kZXhPZihwcm9wKSkgY29udGludWU7XG5cdFx0aWYgKHByb3AuaW5kZXhPZignV2Via2l0JykgPT09IDApIHByb3AgPSBwcm9wLnNsaWNlKDAsMSkudG9Mb3dlckNhc2UoKStwcm9wLnNsaWNlKDEpO1xuXHRcdGlmIChzdHlsZVtwcm9wXSkgcnVsZVtwcm9wXSA9IHN0eWxlW3Byb3BdO1xuXHR9XG5cblx0cmV0dXJuIHJ1bGU7XG59XG5cbmZ1bmN0aW9uIHByb3ZpZGVTb3VyY2UgKF9pZCwgX3J1bGUpIHtcblx0dmFyIHNvdXJjZSwgcHJvcCwgdmFsdWU7XG5cblx0c291cmNlID0gJyMnK19pZCsnLmRyYWdnYWJsZS1oZWxwZXIgeyc7XG5cblx0Zm9yIChwcm9wIGluIF9ydWxlKSB7XG5cdFx0aWYgKCFfcnVsZS5oYXNPd25Qcm9wZXJ0eShwcm9wKSkgY29udGludWU7XG5cdFx0dmFsdWUgPSBfcnVsZVtwcm9wXTtcblx0XHRzb3VyY2UgKz0gcHJvcC5yZXBsYWNlKC8oW0EtWl0rKS9nLCAnLSQxJykudG9Mb3dlckNhc2UoKSsnOiAnK3ZhbHVlKyc7J1xuXHR9XG5cblx0c291cmNlICs9ICd9JztcblxuXHRyZXR1cm4gc291cmNlO1xufTtcblxuZnVuY3Rpb24gY3JlYXRlSUQgKCkge1xuXHRyZXR1cm4gJ3h5LXh5eHkteScucmVwbGFjZSgveHx5L2csIGZ1bmN0aW9uIChfdG9rZW4pIHtcblx0XHRpZiAoX3Rva2VuID09PSAneCcpIHJldHVybiAoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNSkgKyAxMCkudG9TdHJpbmcoMTYpO1xuXHRcdHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBEYXRlLm5vdygpKS50b1N0cmluZygxNikuc2xpY2UoMik7XG5cdH0pO1xufVxuXG52YXIgZHJhZ2dhYmxlTWFuYWdlciA9IHtcblxufTtcblxuJChib290KTtcblxuZXhwb3J0IGRlZmF1bHQgZHJhZ2dhYmxlTWFuYWdlcjtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc291cmNlL3BsYXkuZ2FtZS5tYW5hZ2VyLmRyYWdnYWJsZS5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Collections are iterables which hold a consistent interface throughout its indexes.\\n *\\n * @module\\n * @requires module:types/BasicArray\\n */\\n\\nvar _typesBasicArray = __webpack_require__(9);\\n\\nvar _typesBasicArray2 = _interopRequireDefault(_typesBasicArray);\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. use `Collection.create()` to get a new instance.\\n * @classdesc Iterable holding record objects of the same interface.\\n * @class\\n * @extends module:types/BasicArray~BasicArray\\n */\\nvar Collection = _typesBasicArray2['default'].extend(function () {\\n\\t/**\\n  * Gets the record object which has `_member` as a member.\\n  * @instance\\n  * @protected\\n  * @memberof module:types/Collection~Collection\\n  * @arg {*} _member - object reference to search for.\\n  * @arg {string} _key - the target key to test the `_member` against.\\n  * @arg {boolean} _shouldCollect - <span style=\\\"color: blue; font-weight: bold;\\\">`true`</span>: collect all matching elements.<br>\\n  * <span style=\\\"color: blue; font-weight: bold;\\\">`false`</span>: return first result.\\n  */\\n\\tfunction getRecord(_member, _key, _shouldCollect) {\\n\\t\\tvar i, record, member, result;\\n\\n\\t\\tresult = [];\\n\\n\\t\\tfor (i = 0; record = this[i]; i += 1) {\\n\\t\\t\\tif (_key !== undefined) {\\n\\t\\t\\t\\tif (record[_key] === _member) {\\n\\t\\t\\t\\t\\tif (_shouldCollect) {\\n\\t\\t\\t\\t\\t\\tresult.push(record);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\treturn record;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (record instanceof Array) {\\n\\t\\t\\t\\tif (~record.indexOf(_member)) {\\n\\t\\t\\t\\t\\tif (_shouldCollect) {\\n\\t\\t\\t\\t\\t\\tresult.push(record);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\treturn record;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tfor (member in record) {\\n\\t\\t\\t\\t\\tif (!record.hasOwnProperty(member)) continue;\\n\\t\\t\\t\\t\\tif (record[member] === _member) {\\n\\t\\t\\t\\t\\t\\tif (_shouldCollect) {\\n\\t\\t\\t\\t\\t\\t\\tresult.push(record);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\treturn record;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn result.length ? result : null;\\n\\t}\\n\\n\\t/**\\n  * Objects with this as an own property will be identified as the root object.\\n  * @memberof module:types/Collection~Collection\\n  * @readonly\\n  * @default\\n  */\\n\\tthis.baseType = 'TYPE_COLLECTION';\\n\\n\\tthis.add = function (_record) {\\n\\t\\tif (~this.indexOf(_record)) return false;\\n\\t\\tthis.push(_record);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.remove = function (_record) {\\n\\t\\tvar index;\\n\\n\\t\\tindex = this.indexOf(_record);\\n\\t\\tif (~index) this.splice(index, 1);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.has = function (_record) {\\n\\t\\treturn !! ~this.indexOf(_record);\\n\\t};\\n\\n\\tthis.get = function (_member, _key) {\\n\\t\\treturn getRecord.call(this, _member, _key);\\n\\t};\\n\\n\\tthis.filter = function (_member, _key) {\\n\\t\\treturn getRecord.call(this, _member, _key, true);\\n\\t};\\n});\\n\\nexports['default'] = Collection;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvQ29sbGVjdGlvbi5qcz9lN2RjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7MkNBTXVCLENBQWtCOzs7Ozs7Ozs7O0FBUXpDLElBQUksVUFBVSxHQUFHLDZCQUFXLE1BQU0sQ0FBQyxZQUFZOzs7Ozs7Ozs7OztBQVc5QyxVQUFTLFNBQVMsQ0FBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRTtBQUNsRCxNQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQzs7QUFFOUIsUUFBTSxHQUFHLEVBQUUsQ0FBQzs7QUFFWixPQUFLLENBQUMsR0FBQyxDQUFDLEVBQUUsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUUsQ0FBQyxFQUFFO0FBQ2pDLE9BQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtBQUN2QixRQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxPQUFPLEVBQUU7QUFDN0IsU0FBSSxjQUFjLEVBQUU7QUFDbkIsWUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztNQUNwQixNQUVJO0FBQ0osYUFBTyxNQUFNLENBQUM7TUFDZDtLQUNEO0lBQ0QsTUFFSSxJQUFJLE1BQU0sWUFBWSxLQUFLLEVBQUU7QUFDakMsUUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDN0IsU0FBSSxjQUFjLEVBQUU7QUFDbkIsWUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztNQUNwQixNQUVJO0FBQ0osYUFBTyxNQUFNLENBQUM7TUFDZDtLQUNEO0lBQ0QsTUFFSTtBQUNKLFNBQUssTUFBTSxJQUFJLE1BQU0sRUFBRTtBQUN0QixTQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRSxTQUFTO0FBQzdDLFNBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLE9BQU8sRUFBRTtBQUMvQixVQUFJLGNBQWMsRUFBRTtBQUNuQixhQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO09BQ3BCLE1BRUk7QUFDSixjQUFPLE1BQU0sQ0FBQztPQUNkO01BQ0Q7S0FDRDtJQUNEO0dBQ0Q7O0FBRUQsU0FBTyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUM7RUFDckM7Ozs7Ozs7O0FBUUQsS0FBSSxDQUFDLFFBQVEsR0FBRyxpQkFBaUIsQ0FBQzs7QUFFbEMsS0FBSSxDQUFDLEdBQUcsR0FBRyxVQUFVLE9BQU8sRUFBRTtBQUM3QixNQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxPQUFPLEtBQUssQ0FBQztBQUN6QyxNQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDOztBQUVuQixTQUFPLElBQUksQ0FBQztFQUNaLENBQUM7O0FBRUYsS0FBSSxDQUFDLE1BQU0sR0FBRyxVQUFVLE9BQU8sRUFBRTtBQUNoQyxNQUFJLEtBQUssQ0FBQzs7QUFFVixPQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM5QixNQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDOztBQUVsQyxTQUFPLElBQUksQ0FBQztFQUNaLENBQUM7O0FBRUYsS0FBSSxDQUFDLEdBQUcsR0FBRyxVQUFVLE9BQU8sRUFBRTtBQUM3QixTQUFPLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7RUFDaEMsQ0FBQzs7QUFFRixLQUFJLENBQUMsR0FBRyxHQUFHLFVBQVUsT0FBTyxFQUFFLElBQUksRUFBRTtBQUNuQyxTQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztFQUMzQyxDQUFDOztBQUVGLEtBQUksQ0FBQyxNQUFNLEdBQUcsVUFBVSxPQUFPLEVBQUUsSUFBSSxFQUFFO0FBQ3RDLFNBQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztFQUNqRCxDQUFDO0NBRUYsQ0FBQyxDQUFDOztxQkFFWSxVQUFVIiwiZmlsZSI6IjIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb2xsZWN0aW9ucyBhcmUgaXRlcmFibGVzIHdoaWNoIGhvbGQgYSBjb25zaXN0ZW50IGludGVyZmFjZSB0aHJvdWdob3V0IGl0cyBpbmRleGVzLlxuICpcbiAqIEBtb2R1bGVcbiAqIEByZXF1aXJlcyBtb2R1bGU6dHlwZXMvQmFzaWNBcnJheVxuICovXG5pbXBvcnQgQmFzaWNBcnJheSBmcm9tICd0eXBlcy9CYXNpY0FycmF5JztcblxuLyoqXG4gKiA8c3BhbiBjbGFzcz1cImltcG9ydGFudFwiPk5PVEU6PC9zcGFuPiBUaGlzIGlzIE5PVCBhIGNvbnN0cnVjdG9yLiB1c2UgYENvbGxlY3Rpb24uY3JlYXRlKClgIHRvIGdldCBhIG5ldyBpbnN0YW5jZS5cbiAqIEBjbGFzc2Rlc2MgSXRlcmFibGUgaG9sZGluZyByZWNvcmQgb2JqZWN0cyBvZiB0aGUgc2FtZSBpbnRlcmZhY2UuXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIG1vZHVsZTp0eXBlcy9CYXNpY0FycmF5fkJhc2ljQXJyYXlcbiAqL1xudmFyIENvbGxlY3Rpb24gPSBCYXNpY0FycmF5LmV4dGVuZChmdW5jdGlvbiAoKSB7XG5cdC8qKlxuXHQgKiBHZXRzIHRoZSByZWNvcmQgb2JqZWN0IHdoaWNoIGhhcyBgX21lbWJlcmAgYXMgYSBtZW1iZXIuXG5cdCAqIEBpbnN0YW5jZVxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBtZW1iZXJvZiBtb2R1bGU6dHlwZXMvQ29sbGVjdGlvbn5Db2xsZWN0aW9uXG5cdCAqIEBhcmcgeyp9IF9tZW1iZXIgLSBvYmplY3QgcmVmZXJlbmNlIHRvIHNlYXJjaCBmb3IuXG5cdCAqIEBhcmcge3N0cmluZ30gX2tleSAtIHRoZSB0YXJnZXQga2V5IHRvIHRlc3QgdGhlIGBfbWVtYmVyYCBhZ2FpbnN0LlxuXHQgKiBAYXJnIHtib29sZWFufSBfc2hvdWxkQ29sbGVjdCAtIDxzcGFuIHN0eWxlPVwiY29sb3I6IGJsdWU7IGZvbnQtd2VpZ2h0OiBib2xkO1wiPmB0cnVlYDwvc3Bhbj46IGNvbGxlY3QgYWxsIG1hdGNoaW5nIGVsZW1lbnRzLjxicj5cblx0ICogPHNwYW4gc3R5bGU9XCJjb2xvcjogYmx1ZTsgZm9udC13ZWlnaHQ6IGJvbGQ7XCI+YGZhbHNlYDwvc3Bhbj46IHJldHVybiBmaXJzdCByZXN1bHQuXG5cdCAqL1xuXHRmdW5jdGlvbiBnZXRSZWNvcmQgKF9tZW1iZXIsIF9rZXksIF9zaG91bGRDb2xsZWN0KSB7XG5cdFx0dmFyIGksIHJlY29yZCwgbWVtYmVyLCByZXN1bHQ7XG5cblx0XHRyZXN1bHQgPSBbXTtcblxuXHRcdGZvciAoaT0wOyByZWNvcmQgPSB0aGlzW2ldOyBpKz0xKSB7XG5cdFx0XHRpZiAoX2tleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGlmIChyZWNvcmRbX2tleV0gPT09IF9tZW1iZXIpIHtcblx0XHRcdFx0XHRpZiAoX3Nob3VsZENvbGxlY3QpIHtcblx0XHRcdFx0XHRcdHJlc3VsdC5wdXNoKHJlY29yZCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVjb3JkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRlbHNlIGlmIChyZWNvcmQgaW5zdGFuY2VvZiBBcnJheSkge1xuXHRcdFx0XHRpZiAofnJlY29yZC5pbmRleE9mKF9tZW1iZXIpKSB7XG5cdFx0XHRcdFx0aWYgKF9zaG91bGRDb2xsZWN0KSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQucHVzaChyZWNvcmQpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlY29yZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdGZvciAobWVtYmVyIGluIHJlY29yZCkge1xuXHRcdFx0XHRcdGlmICghcmVjb3JkLmhhc093blByb3BlcnR5KG1lbWJlcikpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdGlmIChyZWNvcmRbbWVtYmVyXSA9PT0gX21lbWJlcikge1xuXHRcdFx0XHRcdFx0aWYgKF9zaG91bGRDb2xsZWN0KSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdC5wdXNoKHJlY29yZCk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVjb3JkO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQubGVuZ3RoID8gcmVzdWx0IDogbnVsbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBPYmplY3RzIHdpdGggdGhpcyBhcyBhbiBvd24gcHJvcGVydHkgd2lsbCBiZSBpZGVudGlmaWVkIGFzIHRoZSByb290IG9iamVjdC5cblx0ICogQG1lbWJlcm9mIG1vZHVsZTp0eXBlcy9Db2xsZWN0aW9ufkNvbGxlY3Rpb25cblx0ICogQHJlYWRvbmx5XG5cdCAqIEBkZWZhdWx0XG5cdCAqL1xuXHR0aGlzLmJhc2VUeXBlID0gJ1RZUEVfQ09MTEVDVElPTic7XG5cblx0dGhpcy5hZGQgPSBmdW5jdGlvbiAoX3JlY29yZCkge1xuXHRcdGlmICh+dGhpcy5pbmRleE9mKF9yZWNvcmQpKSByZXR1cm4gZmFsc2U7XG5cdFx0dGhpcy5wdXNoKF9yZWNvcmQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0dGhpcy5yZW1vdmUgPSBmdW5jdGlvbiAoX3JlY29yZCkge1xuXHRcdHZhciBpbmRleDtcblxuXHRcdGluZGV4ID0gdGhpcy5pbmRleE9mKF9yZWNvcmQpO1xuXHRcdGlmICh+aW5kZXgpIHRoaXMuc3BsaWNlKGluZGV4LCAxKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdHRoaXMuaGFzID0gZnVuY3Rpb24gKF9yZWNvcmQpIHtcblx0XHRyZXR1cm4gISF+dGhpcy5pbmRleE9mKF9yZWNvcmQpO1xuXHR9O1xuXG5cdHRoaXMuZ2V0ID0gZnVuY3Rpb24gKF9tZW1iZXIsIF9rZXkpIHtcblx0XHRyZXR1cm4gZ2V0UmVjb3JkLmNhbGwodGhpcywgX21lbWJlciwgX2tleSk7XG5cdH07XG5cblx0dGhpcy5maWx0ZXIgPSBmdW5jdGlvbiAoX21lbWJlciwgX2tleSkge1xuXHRcdHJldHVybiBnZXRSZWNvcmQuY2FsbCh0aGlzLCBfbWVtYmVyLCBfa2V5LCB0cnVlKTtcblx0fTtcblxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IENvbGxlY3Rpb247XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NvdXJjZS90eXBlcy9Db2xsZWN0aW9uLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"exports.__esModule = true;\\n/**\\n*  GlobalScope\\n*/\\n\\nvar _typesScope = __webpack_require__(23);\\n\\nvar GlobalScope = _typesScope.Scope.extend(function () {\\n\\n\\tthis.baseType = 'TYPE_GLOBAL_SCOPE';\\n});\\n\\nexports['default'] = GlobalScope;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvR2xvYmFsU2NvcGUuanM/ZmE3YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztzQ0FJc0IsRUFBYTs7QUFFbkMsSUFBSSxXQUFXLEdBQUcsa0JBQU0sTUFBTSxDQUFDLFlBQVk7O0FBRTFDLEtBQUksQ0FBQyxRQUFRLEdBQUcsbUJBQW1CLENBQUM7Q0FFcEMsQ0FBQyxDQUFDOztxQkFFWSxXQUFXIiwiZmlsZSI6IjIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4qICBHbG9iYWxTY29wZVxuKi9cblxuaW1wb3J0IHsgU2NvcGUgfSBmcm9tICd0eXBlcy9TY29wZSc7XG5cbnZhciBHbG9iYWxTY29wZSA9IFNjb3BlLmV4dGVuZChmdW5jdGlvbiAoKSB7XG5cdFxuXHR0aGlzLmJhc2VUeXBlID0gJ1RZUEVfR0xPQkFMX1NDT1BFJztcblxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEdsb2JhbFNjb3BlO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc291cmNlL3R5cGVzL0dsb2JhbFNjb3BlLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Scopes are packages which contain a reference to a DOM element wrapped in a jQuery object.\\n * This enables properties and methods to be in context of the DOM node and its descendants.\\n *\\n * @module\\n * @requires types/jQProxy\\n * @requires types/Basic\\n * @requires types/Queue\\n * @requires play.game\\n * @requires util\\n * @requires evalAction\\n *\\n * @exports createEntity\\n */\\n\\nvar _typesJQProxy = __webpack_require__(24);\\n\\nvar _typesJQProxy2 = _interopRequireDefault(_typesJQProxy);\\n\\nvar _typesBasic = __webpack_require__(11);\\n\\nvar _typesBasic2 = _interopRequireDefault(_typesBasic);\\n\\nvar _typesQueue = __webpack_require__(37);\\n\\nvar _typesQueue2 = _interopRequireDefault(_typesQueue);\\n\\nvar _typesDimensions = __webpack_require__(5);\\n\\nvar _playGame = __webpack_require__(16);\\n\\nvar _playGame2 = _interopRequireDefault(_playGame);\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _evalAction = __webpack_require__(38);\\n\\nvar _evalAction2 = _interopRequireDefault(_evalAction);\\n\\n/**\\n * Creates a new Enitiy instance with a context node and implementation.\\n * The instance is prototyped from the parent scope.\\n *\\n * @memberof module:types/Scope~Scope#createEntity\\n * @protected\\n * @arg {jQuery} _$node - jQuery object with a single node in the collection.\\n * @arg {function|object} _implementation - Constructor function or object with the entity behavior.\\n * @returns {module:types/Scope~Scope}\\n */\\nfunction createEntity(_$node, _implementation) {\\n\\tvar component, prototype, componentRecord, instance;\\n\\n\\tcomponent = _$node.attr('pl-component');\\n\\tprototype = this;\\n\\n\\tif (component) {\\n\\t\\tcomponentRecord = _playGame2['default'].component.get(component);\\n\\n\\t\\tif (componentRecord) {\\n\\t\\t\\t// If a scope is being defined as an extention of a component before the component scope\\n\\t\\t\\t// has been allocated, we construct the component first then pass it as the proto.\\n\\t\\t\\t// But we need to make sure we are not allocating the component it self.\\n\\t\\t\\tif (componentRecord.implementation !== _implementation) {\\n\\t\\t\\t\\tprototype = this.extend(componentRecord.implementation);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tthrow new Error('No implementation record for the ' + component + 'component.');\\n\\t\\t}\\n\\t}\\n\\n\\tinstance = typeof _implementation === 'function' ? prototype.extend(_implementation) : prototype.create();\\n\\n\\treturn instance.initialize(_$node, component);\\n}\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. Use `Scope.create()` to get a new instance.\\n * @classdesc A package which contains a reference to a DOM node wrapped in a jQuery object. For more information on scopes read [this]{@link module:types/Scope}.\\n * @class\\n * @extends module:types/jQProxy~jQProxy\\n */\\nvar Scope = _typesJQProxy2['default'].extend(function () {\\n\\n\\t/**\\n  * Collection of records pairing a node with its action.\\n  * @memberof module:types/Scope~Scope\\n  * @static\\n  * @protected\\n  * @todo Convert to types/Collection\\n  */\\n\\tvar Actionables;\\n\\n\\tfunction attachActionHandler() {\\n\\t\\tthis.on(pl.EVENT.ACTION, function (_event) {\\n\\t\\t\\tvar target, record;\\n\\n\\t\\t\\ttarget = $(_event.target).closest('[pl-action]')[0];\\n\\n\\t\\t\\tif (_event.originalEvent && _event.originalEvent.changedTouches) {\\n\\t\\t\\t\\t/**\\n     * For now, interactions should use the last touch if multiple fingers are captured.\\n     * @todo Maybe invoke action for each touch.\\n     */\\n\\t\\t\\t\\t_event.touch = _event.originalEvent.changedTouches[_event.originalEvent.changedTouches.length - 1];\\n\\t\\t\\t}\\n\\n\\t\\t\\t_event.cursor = _typesDimensions.Point.create().set(new function () {\\n\\t\\t\\t\\tif (_event.touch) {\\n\\t\\t\\t\\t\\tthis.x = _event.touch.clientX;\\n\\t\\t\\t\\t\\tthis.y = _event.touch.clientY;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tthis.x = _event.clientX;\\n\\t\\t\\t\\t\\tthis.y = _event.clientY;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}());\\n\\n\\t\\t\\tif (target) {\\n\\t\\t\\t\\trecord = this.actionables.item(target);\\n\\n\\t\\t\\t\\tif (record) {\\n\\t\\t\\t\\t\\t_event.targetScope = this;\\n\\t\\t\\t\\t\\tthis.event = _event;\\n\\t\\t\\t\\t\\t_evalAction2['default'](record.action, this);\\n\\t\\t\\t\\t\\tthis.event = null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\n\\tfunction getRecordBy(_key, _member, _collection) {\\n\\t\\tvar i, record;\\n\\n\\t\\tif (_collection) {\\n\\t\\t\\tfor (i = 0; record = _collection[i]; i += 1) {\\n\\t\\t\\t\\tif (record[_key] === _member) return record;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t}\\n\\n\\tfunction removeRecord(_record, _collection) {\\n\\t\\tvar index;\\n\\n\\t\\tindex = _collection.indexOf(_record);\\n\\t\\tif (~index) _collection.splice(index, 1);\\n\\t}\\n\\n\\tfunction captureDropables(_scope) {\\n\\t\\tvar collection;\\n\\n\\t\\tcollection = [];\\n\\n\\t\\t_scope.find('> [pl-pluck]').each(function () {\\n\\t\\t\\tvar name;\\n\\n\\t\\t\\tname = $(this).attr('pl-pluck');\\n\\n\\t\\t\\tcollection.push(this);\\n\\t\\t\\tcollection[name] = this;\\n\\t\\t});\\n\\n\\t\\treturn collection;\\n\\t}\\n\\n\\tfunction pluckAndDrop(_dropables, _template) {\\n\\t\\t$(_template).find('[pl-drop]').each(function () {\\n\\t\\t\\tvar $node, name, dropable;\\n\\n\\t\\t\\t$node = $(this);\\n\\t\\t\\tname = $node.attr('pl-drop');\\n\\t\\t\\tdropable = _dropables[name];\\n\\n\\t\\t\\tif (dropable) {\\n\\t\\t\\t\\t$node.replaceWith(dropable.children);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\n\\t// Protected\\n\\tfunction loadComponentAssets(_name, _callback) {\\n\\t\\tvar scope, path, totalRequests, transcludeMode, dropables;\\n\\n\\t\\tfunction ready() {\\n\\t\\t\\tready.status += 1;\\n\\n\\t\\t\\tif (ready.status === totalRequests) {\\n\\t\\t\\t\\tif (_callback) {\\n\\t\\t\\t\\t\\t_callback.call(scope, _name);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\ttotalRequests = 0;\\n\\t\\tscope = this;\\n\\t\\tpath = _playGame2['default'].config('componentDirectory') + _name + '/';\\n\\t\\tdropables = captureDropables(this);\\n\\t\\ttranscludeMode = dropables.length ? this.TRANSCLUDE_PLUCK : this.properties.transclude;\\n\\t\\tready.status = 0;\\n\\n\\t\\tif (!this.children().length || transcludeMode) {\\n\\t\\t\\ttotalRequests += 1;\\n\\t\\t\\t$('<div>').load(path + 'template.html', function () {\\n\\t\\t\\t\\tvar memory;\\n\\n\\t\\t\\t\\tmemory = [];\\n\\n\\t\\t\\t\\tswitch (transcludeMode) {\\n\\t\\t\\t\\t\\tcase scope.TRANSCLUDE_APPEND:\\n\\t\\t\\t\\t\\t\\tscope.append(this.children);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase scope.TRANSCLUDE_PREPEND:\\n\\t\\t\\t\\t\\t\\tscope.prepend(this.children);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase scope.TRANSCLUDE_PLUCK:\\n\\t\\t\\t\\t\\t\\tpluckAndDrop(dropables, this);\\n\\t\\t\\t\\t\\t\\tscope.empty().append(this.children);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase scope.TRANSCLUDE_REPLACE:\\n\\t\\t\\t\\t\\t\\tscope.empty().append(this.children);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\tif (transcludeMode) {\\n\\t\\t\\t\\t\\t\\t\\tpluckAndDrop(new function () {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis[transcludeMode] = scope.node();\\n\\t\\t\\t\\t\\t\\t\\t}(), this);\\n\\t\\t\\t\\t\\t\\t\\tscope.empty().append(this.children);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\tscope.empty().append(this.children);\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tscope.findOwn('[pl-component]').each(function () {\\n\\t\\t\\t\\t\\tvar name;\\n\\n\\t\\t\\t\\t\\tname = $(this).attr('pl-component');\\n\\n\\t\\t\\t\\t\\tif (~memory.indexOf(name)) return;\\n\\n\\t\\t\\t\\t\\tmemory.push(name);\\n\\n\\t\\t\\t\\t\\ttotalRequests += 1;\\n\\n\\t\\t\\t\\t\\t_playGame2['default'].component.load(name, function () {\\n\\t\\t\\t\\t\\t\\tready();\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\tready();\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tif (!$('style[pl-for-component=\\\"' + _name + '\\\"]').length && _playGame2['default'].config('shouldLoadComponentStyles') !== false) {\\n\\t\\t\\ttotalRequests += 1;\\n\\t\\t\\t$('<style type=\\\"text/css\\\" pl-for-component=\\\"' + _name + '\\\">').load(path + 'style.css', ready).appendTo(document.body);\\n\\t\\t}\\n\\n\\t\\tif (!totalRequests) _callback && _callback.call(this, _name);\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\tfunction captureProperties() {\\n\\t\\tvar i, attr, name, collection;\\n\\n\\t\\tcollection = (function () {\\n\\n\\t\\t\\tthis.has = function (_name) {\\n\\t\\t\\t\\treturn !! ~this.indexOf(_name);\\n\\t\\t\\t};\\n\\n\\t\\t\\treturn this;\\n\\t\\t}).call([]);\\n\\n\\t\\tfor (i = 0; attr = this.$els[0].attributes[i]; i += 1) {\\n\\t\\t\\t// I explicitly want it to be at the beginning.\\n\\t\\t\\tif (attr.name.indexOf('pl-') === 0) {\\n\\t\\t\\t\\tname = attr.name.slice(3);\\n\\t\\t\\t\\tcollection[_util2['default'].transformId(name, true)] = attr.value;\\n\\n\\t\\t\\t\\tcollection.push(name);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (collection.length) this.properties = collection;\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\tfunction initializeEntities() {\\n\\t\\tif (!this.hasOwnProperty('entities')) return this;\\n\\n\\t\\tthis.entities.forEach(this.bind(function (_record, _index) {\\n\\t\\t\\tvar $nodes, query, index;\\n\\n\\t\\t\\t$nodes = this.findOwn(_record.selector);\\n\\t\\t\\tquery = ['#' + _record.selector, '[pl-id=' + _record.selector + ']', '[pl-component=' + _record.selector + ']', '[pl-' + _record.selector + ']'];\\n\\t\\t\\tindex = 0;\\n\\n\\t\\t\\twhile (!$nodes.length) {\\n\\t\\t\\t\\tif (index === query.length) {\\n\\t\\t\\t\\t\\tthrow new Error(\\\"Unable to locate entity with selector\\\", _record.selector);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t$nodes = this.findOwn(query[index]);\\n\\t\\t\\t\\tindex += 1;\\n\\t\\t\\t}\\n\\n\\t\\t\\t$nodes.each(this.bind(function (_index, _node) {\\n\\t\\t\\t\\tvar $node, instance, id;\\n\\n\\t\\t\\t\\t$node = $(_node);\\n\\n\\t\\t\\t\\tif (!Scope.isPrototypeOf(_record)) {\\n\\t\\t\\t\\t\\tinstance = createEntity.call(this, $node, _record.implementation);\\n\\t\\t\\t\\t\\tif (!instance.isReady) this.assetQueue.add(instance);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tinstance = _record;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tid = _util2['default'].transformId(instance.id(), true);\\n\\t\\t\\t\\tif (id) _util2['default'].assignRef(this, id, instance);\\n\\t\\t\\t}));\\n\\t\\t}));\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\tfunction handleProperties() {\\n\\t\\tvar scope, property, handler;\\n\\n\\t\\tscope = this;\\n\\n\\t\\tif (this.hasOwnProperty('properties')) {\\n\\t\\t\\tthis.properties.forEach(function (_name) {\\n\\t\\t\\t\\thandler = scope.propertyHandlers[_name];\\n\\t\\t\\t\\tif (handler) handler.call(scope, scope.$els[0], _name, scope.properties[_name]);\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tif (this.propertyHandlers) {\\n\\t\\t\\tfor (property in this.propertyHandlers) {\\n\\t\\t\\t\\t// Only exclide members on the base type.\\n\\t\\t\\t\\tif (_typesBasic2['default'].hasOwnProperty(property)) continue;\\n\\n\\t\\t\\t\\thandler = this.propertyHandlers[property];\\n\\n\\t\\t\\t\\tthis.findOwn('[pl-' + property + ']').each(function () {\\n\\t\\t\\t\\t\\tvar attr;\\n\\n\\t\\t\\t\\t\\tif (scope === $(this).scope()) {\\n\\t\\t\\t\\t\\t\\tattr = this.attributes.getNamedItem('pl-' + property);\\n\\n\\t\\t\\t\\t\\t\\tif (handler) handler.call(scope, this, property, attr.value);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\tfunction invokeLocal(_name) {\\n\\t\\tvar args, owner;\\n\\n\\t\\targs = [].slice.call(arguments, 1);\\n\\n\\t\\tif (this.isMemberSafe(_name)) {\\n\\t\\t\\treturn this[_name].apply(this, arguments);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction init() {\\n\\t\\tvar willInitEvent, initEvent;\\n\\n\\t\\tinitEvent = $.Event('initialize', { targetScope: this });\\n\\t\\twillInitEvent = $.Event('will-initialize', { targetScope: this });\\n\\n\\t\\tinvokeLocal.call(this, 'willInit');\\n\\t\\tthis.trigger(willInitEvent);\\n\\n\\t\\tthis.attachEvents();\\n\\n\\t\\tinitializeEntities.call(this);\\n\\t\\thandleProperties.call(this);\\n\\n\\t\\tthis.watchAssets();\\n\\t\\tthis.captureAudioAssets();\\n\\t\\tthis.captureReferences();\\n\\n\\t\\tthis.__init();\\n\\t\\tinvokeLocal.call(this, 'init');\\n\\n\\t\\tthis.trigger(initEvent);\\n\\n\\t\\tif (!this.isReady) this.assetQueue.ready();\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\tfunction ready() {\\n\\t\\tvar readyEvent, entities;\\n\\n\\t\\treadyEvent = $.Event('ready', { targetScope: this });\\n\\t\\tentities = this.findOwn('.pl-scope').scope();\\n\\n\\t\\tif (entities) {\\n\\t\\t\\tif (entities.length > 0) {\\n\\t\\t\\t\\tthis.entities = entities;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.entities = [entities];\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tthis.isReady = true;\\n\\t\\tthis.addClass('READY');\\n\\n\\t\\tthis.__ready();\\n\\t\\tinvokeLocal.call(this, 'ready');\\n\\n\\t\\tthis.trigger(readyEvent);\\n\\t}\\n\\n\\tActionables = (function () {\\n\\n\\t\\t_util2['default'].mixin(this, _typesBasic2['default']);\\n\\n\\t\\tthis.add = function (_node, _action) {\\n\\t\\t\\tif (!this.has(_node)) {\\n\\t\\t\\t\\tthis.push({\\n\\t\\t\\t\\t\\tnode: _node,\\n\\t\\t\\t\\t\\taction: _action\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this;\\n\\t\\t};\\n\\n\\t\\tthis.remove = function (_node) {\\n\\t\\t\\tvar item, index;\\n\\n\\t\\t\\titem = this.item(_node);\\n\\t\\t\\tindex = this.indexOf(item);\\n\\t\\t\\tif (~index) this.splice(index, 1);\\n\\n\\t\\t\\treturn this;\\n\\t\\t};\\n\\n\\t\\tthis.item = function (_node) {\\n\\t\\t\\tvar i, item;\\n\\n\\t\\t\\tfor (i = 0; item = this[i]; i += 1) {\\n\\t\\t\\t\\tif (item.node === _node) return item;\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\tthis.has = function (_node) {\\n\\t\\t\\treturn !!this.item(_node);\\n\\t\\t};\\n\\n\\t\\treturn this;\\n\\t}).call([]);\\n\\n\\tthis.TRANSCLUDE_REPLACE = 'replace';\\n\\tthis.TRANSCLUDE_PREPEND = 'prepend';\\n\\tthis.TRANSCLUDE_APPEND = 'append';\\n\\tthis.TRANSCLUDE_PLUCK = 'pluck';\\n\\n\\tthis.baseType = 'TYPE_SCOPE';\\n\\tthis.actionables = null;\\n\\tthis.isReady = null;\\n\\tthis.isComponent = false;\\n\\tthis.entities = null;\\n\\tthis.audio = null;\\n\\tthis.properties = null;\\n\\tthis.propertyHandlers = null;\\n\\tthis.assetQueue = null;\\n\\tthis.event = null;\\n\\n\\tthis.initialize = function (_node_selector, _componentName) {\\n\\t\\tvar scope;\\n\\n\\t\\tscope = this;\\n\\n\\t\\tthis.isReady = false;\\n\\t\\tthis.isComponent = !!_componentName;\\n\\t\\tthis.event = null;\\n\\t\\tthis.assetQueue = _typesQueue2['default'].create();\\n\\t\\tthis.$els = _node_selector.jquery ? _node_selector : $(_node_selector);\\n\\n\\t\\tif (!this.$els.length) {\\n\\t\\t\\tthrow new ReferenceError('Unable to locate the element with selector ' + this.$els.selector + '.');\\n\\t\\t}\\n\\n\\t\\tthis.addClass('pl-scope ' + (_componentName ? _componentName + '-component' : ''));\\n\\t\\tthis.data('pl-scope', this);\\n\\t\\tthis.data('pl-isComponent', !!_componentName);\\n\\n\\t\\tcaptureProperties.call(this);\\n\\n\\t\\tif (_componentName) {\\n\\t\\t\\tloadComponentAssets.call(this, _componentName, function () {\\n\\t\\t\\t\\tinit.call(this);\\n\\t\\t\\t});\\n\\t\\t} else {\\n\\t\\t\\tinit.call(this);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t// only for use in base types\\n\\tthis.__init = function () {\\n\\t\\treturn this;\\n\\t};\\n\\tthis.__ready = function () {\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.willInit = function () {\\n\\t\\treturn this;\\n\\t};\\n\\tthis.init = function () {\\n\\t\\treturn this;\\n\\t};\\n\\tthis.ready = function () {\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.watchAssets = function (_nodes) {\\n\\t\\tvar assetTypes, watch, createHandler;\\n\\n\\t\\tcreateHandler = this.bind(function (_node) {\\n\\t\\t\\treturn (function () {\\n\\t\\t\\t\\tvar loadedEvent = $.Event('loaded', { targetScope: this });\\n\\n\\t\\t\\t\\tthis.assetQueue.ready(_node.src);\\n\\t\\t\\t\\tthis.trigger(loadedEvent, [_node]);\\n\\t\\t\\t}).bind(this);\\n\\t\\t});\\n\\n\\t\\twatch = this.bind(function (_node) {\\n\\t\\t\\tvar eventMap, isNodeComplete;\\n\\n\\t\\t\\teventMap = {\\n\\t\\t\\t\\tAUDIO: 'onloadeddata',\\n\\t\\t\\t\\tVIDEO: 'onloadeddata',\\n\\t\\t\\t\\tIMG: 'onload'\\n\\t\\t\\t};\\n\\n\\t\\t\\tisNodeComplete = (function () {\\n\\t\\t\\t\\tswitch (_node.nodeName) {\\n\\t\\t\\t\\t\\tcase 'IMG':\\n\\t\\t\\t\\t\\t\\treturn !!_node.complete;\\n\\t\\t\\t\\t\\tcase 'AUDIO':\\n\\t\\t\\t\\t\\tcase 'VIDEO':\\n\\t\\t\\t\\t\\t\\tif (_node.readyState === _node.HAVE_ENOUGH_DATA) return true;\\n\\t\\t\\t\\t\\t\\t_node.load();\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}).call(this);\\n\\n\\t\\t\\tif (isNodeComplete) return;\\n\\t\\t\\tif (this.assetQueue.add(_node.src)) {\\n\\t\\t\\t\\t_node[eventMap[_node.nodeName]] = createHandler(_node);\\n\\t\\t\\t\\t_node.onerror = function () {\\n\\t\\t\\t\\t\\tconsole.error('Image failed to load', _node.src);\\n\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tassetTypes = ['IMG', 'AUDIO', 'VIDEO'];\\n\\n\\t\\tif (_nodes) {\\n\\t\\t\\t_nodes.forEach(watch);\\n\\t\\t\\treturn this;\\n\\t\\t}\\n\\n\\t\\tthis.each(function () {\\n\\t\\t\\tif (~assetTypes.indexOf(this.nodeName)) {\\n\\t\\t\\t\\twatch(this);\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tthis.findOwn(assetTypes.join(',')).each(function () {\\n\\t\\t\\twatch(this);\\n\\t\\t});\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.attachEvents = function () {\\n\\n\\t\\tthis.proto();\\n\\n\\t\\tthis.assetQueue.on('complete', this.bind(function () {\\n\\t\\t\\tthis.assetQueue.off();\\n\\t\\t\\tready.call(this);\\n\\t\\t}));\\n\\n\\t\\tthis.on('ready', function (_event) {\\n\\t\\t\\tif (this.has(_event.targetScope) && this.assetQueue.has(_event.targetScope)) {\\n\\t\\t\\t\\tthis.assetQueue.ready(_event.targetScope);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!this.assetQueue.length && this.isReady) this.off('ready');\\n\\t\\t});\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.captureReferences = function () {\\n\\t\\tthis.findOwn('[id], [pl-id]').each(this.bind(function (_index, _node) {\\n\\t\\t\\tvar $node, id;\\n\\n\\t\\t\\tif (_node.nodeName === 'AUDIO') return;\\n\\n\\t\\t\\t$node = $(_node);\\n\\t\\t\\tid = $node.attr('id') || $node.attr('pl-id');\\n\\n\\t\\t\\tif (!this[id]) {\\n\\t\\t\\t\\t_util2['default'].assignRef(this, id, $node.data('pl-scope') || $node);\\n\\t\\t\\t}\\n\\t\\t}));\\n\\t};\\n\\n\\tthis.captureAudioAssets = function () {\\n\\t\\tvar scope, screen;\\n\\n\\t\\tscope = this;\\n\\t\\tscreen = scope.screen != null && typeof scope.screen === 'object' ? scope.screen : scope;\\n\\n\\t\\tscope.findOwn('audio').each(function () {\\n\\t\\t\\tvar $node, id, audioTypes;\\n\\n\\t\\t\\tif (!scope.hasOwnProperty('audio')) {\\n\\t\\t\\t\\tscope.audio = {\\n\\t\\t\\t\\t\\tbackground: null,\\n\\t\\t\\t\\t\\tvoiceOver: null,\\n\\t\\t\\t\\t\\tsfx: null\\n\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\n\\t\\t\\t$node = $(this);\\n\\t\\t\\tid = _util2['default'].transformId($node.id(), true);\\n\\t\\t\\taudioTypes = ['background', 'voice-over', 'sfx'];\\n\\n\\t\\t\\taudioTypes.forEach(function (_type) {\\n\\t\\t\\t\\tif ($node.hasClass(_type)) {\\n\\t\\t\\t\\t\\t$node.on('play pause ended', function (_event) {\\n\\t\\t\\t\\t\\t\\tswitch (_event.type) {\\n\\t\\t\\t\\t\\t\\t\\tcase 'play':\\n\\t\\t\\t\\t\\t\\t\\t\\tscreen.addClass('PLAYING ' + _type.toUpperCase());\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\t\\tcase 'pause':\\n\\t\\t\\t\\t\\t\\t\\tcase 'ended':\\n\\t\\t\\t\\t\\t\\t\\t\\tscreen.removeClass('PLAYING ' + _type.toUpperCase());\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tscope.trigger($.Event('audio-' + _event.type, {\\n\\t\\t\\t\\t\\t\\t\\ttarget: $node[0],\\n\\t\\t\\t\\t\\t\\t\\ttargetScope: scope,\\n\\t\\t\\t\\t\\t\\t\\taudioType: _type\\n\\t\\t\\t\\t\\t\\t}));\\n\\t\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\t\\tif ($node.attr('pl-required') != null) {\\n\\t\\t\\t\\t\\t\\tscreen.require($node[0]);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// This property can be either an array of nodes or the node.\\n\\t\\t\\t\\t\\t_util2['default'].assignRef(scope.audio, _type, $node[0]);\\n\\n\\t\\t\\t\\t\\t// Makes sure the property is set on the final value of scope.audio[_type].\\n\\t\\t\\t\\t\\t// This should be safe to run out of the callstack.\\n\\t\\t\\t\\t\\tsetTimeout(function () {\\n\\t\\t\\t\\t\\t\\tif (id) _util2['default'].assignRef(scope.audio[_util2['default'].transformId(_type, true)], id, $node[0]);\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\treturn scope;\\n\\t};\\n\\n\\tthis.handleProperty = function (_implementation) {\\n\\t\\tif (this.propertyHandlers) {\\n\\t\\t\\tif (this.hasOwnProperty('propertyHandlers')) {\\n\\t\\t\\t\\tswitch (typeof _implementation) {\\n\\t\\t\\t\\t\\tcase 'function':\\n\\t\\t\\t\\t\\t\\t_implementation.call(this.propertyHandlers);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'object':\\n\\t\\t\\t\\t\\t\\tthis.propertyHandlers.mixin(_implementation);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.propertyHandlers = this.propertyHandlers.extend(_implementation);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tthis.propertyHandlers = _typesBasic2['default'].extend(_implementation);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.entity = function (_selector, _implementation) {\\n\\t\\tvar Entity, prototype, id;\\n\\n\\t\\tEntity = _playGame2['default'].provideEntityType();\\n\\n\\t\\tif (!this.hasOwnProperty('entities')) this.entities = [];\\n\\n\\t\\tif (this.hasOwnProperty('$els')) {\\n\\t\\t\\tthrow new Error('Wait this hasn\\\\'t been tested.');\\n\\t\\t\\tprototype = Entity.isPrototypeOf(this) ? this : Entity;\\n\\t\\t\\tinstance = prototype.extend(_implementation).initialize(this.find(_selector));\\n\\t\\t\\tid = _util2['default'].transformId(instance.id());\\n\\n\\t\\t\\t// this.entities.push(instance);\\n\\t\\t\\tif (id) this[id] = instance;\\n\\t\\t} else {\\n\\t\\t\\tthis.entities.push({\\n\\t\\t\\t\\tselector: _selector,\\n\\t\\t\\t\\timplementation: _implementation\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.has = function (_child) {\\n\\t\\tvar child;\\n\\n\\t\\tchild = Scope.isPrototypeOf(_child) ? _child.$els : _child;\\n\\n\\t\\treturn !!this.$els.has(child).length;\\n\\t};\\n\\n\\tthis.toString = function () {\\n\\t\\tvar type;\\n\\n\\t\\ttype = this.baseType.replace('TYPE_', '');\\n\\t\\ttype = type.slice(0, 1) + type.slice(1).toLowerCase();\\n\\n\\t\\treturn ['[', this.id() || this.address(), ' ', type, ']'].join('');\\n\\t};\\n\\n\\tthis.log = function () {\\n\\t\\tvar args;\\n\\n\\t\\targs = _util2['default'].toArray(arguments);\\n\\n\\t\\tconsole.log.apply(console, [this.id() || this.address(), '-'].concat(args));\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.handleProperty(function () {\\n\\n\\t\\tthis.component = function (_node, _name, _value, _property) {\\n\\t\\t\\tvar $node, record, scope, id;\\n\\n\\t\\t\\t$node = $(_node);\\n\\n\\t\\t\\tif (!$node.data('pl-isComponent')) {\\n\\t\\t\\t\\trecord = _playGame2['default'].component.get(_value);\\n\\n\\t\\t\\t\\tif (record) {\\n\\t\\t\\t\\t\\tscope = createEntity.call(this, $node, record.implementation);\\n\\t\\t\\t\\t\\tid = _util2['default'].transformId(scope.id() || _value, true);\\n\\t\\t\\t\\t\\t_util2['default'].assignRef(this, id, scope);\\n\\n\\t\\t\\t\\t\\tif (!scope.isReady) this.assetQueue.add(scope);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tthrow new Error('Ahh!');\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\tthis.action = function (_node, _name, _value) {\\n\\t\\t\\tif (!this.hasOwnProperty('actionables')) {\\n\\t\\t\\t\\tthis.actionables = Actionables.create();\\n\\t\\t\\t\\tattachActionHandler.call(this);\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.actionables.add(_node, _value);\\n\\t\\t};\\n\\n\\t\\tthis.required = function (_node, _name, _value) {\\n\\t\\t\\tif (this.is(_node)) {\\n\\t\\t\\t\\tthis.screen.require(this);\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\tthis.require = function (_node, _name, _value) {\\n\\t\\t\\tvar query, $node;\\n\\n\\t\\t\\t// if the node with the attribute is the node for this scope\\n\\t\\t\\tif (this.is(_node)) {\\n\\t\\t\\t\\tquery = '#_value, [pl-id=_value], [pl-component=_value]'.replace(/_value/g, _value);\\n\\t\\t\\t\\t$node = this.find(query);\\n\\n\\t\\t\\t\\tif ($node.is('audio, video')) {\\n\\t\\t\\t\\t\\t$node.each(this.bind(function (_index, _node) {\\n\\t\\t\\t\\t\\t\\tthis.require(_node);\\n\\t\\t\\t\\t\\t}));\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t$node.on('ready', this.bind(function (_event) {\\n\\t\\t\\t\\t\\t\\tif ($node.is(_event.target)) {\\n\\t\\t\\t\\t\\t\\t\\tthis.require(_event.targetScope);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n\\t});\\n});\\n\\nexports['default'] = { Scope: Scope, createEntity: createEntity };\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _Object$keys = __webpack_require__(25)['default'];\\n\\nvar _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n*  jQProxy\\n*  @desc Contains all the jQuery methods targeted towards a property which references a jQuery object.\\n*  @proto Basic\\n*  \\n*  NOTE: Custom events may trigger on scopes\\n*  that also targets the same elments. Testing needed.\\n*/\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesBasic = __webpack_require__(11);\\n\\nvar _typesBasic2 = _interopRequireDefault(_typesBasic);\\n\\nvar jQProxy = _typesBasic2['default'].extend(function () {\\n\\tvar method, exclude;\\n\\n\\t/**\\n *  @desc Creates a function with a proxy to the jQuery method.\\n *  @param _name (String) The name of the method being proxied.\\n *  @return (jQuery|*) Either a jQuery object or whatever the original method returns.\\n *  @private\\n */\\n\\tfunction createProxyFunction(_name) {\\n\\t\\treturn function () {\\n\\t\\t\\tvar response;\\n\\n\\t\\t\\t// This makes sure your not calling any jQuery methods before initialization.\\n\\t\\t\\tif (!this.hasOwnProperty('$els')) {\\n\\t\\t\\t\\tif (_name === 'on') {\\n\\t\\t\\t\\t\\tregisterHandler.call(this, arguments);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tthrow new ReferenceError('Unable to invoke ' + _name + ' because the scope is not initialized.');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tresponse = $.fn[_name].apply(this.$els, resolveEventHandler(this, _name, arguments));\\n\\n\\t\\t\\tif (response === this.$els || response && response.jquery && response.is(this.$els)) {\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn response;\\n\\t\\t};\\n\\t}\\n\\n\\tfunction resolveEventHandler(_scope, _method, _args) {\\n\\t\\tvar i, arg, args;\\n\\n\\t\\targs = [];\\n\\n\\t\\tif (~['on', 'load'].indexOf(_method)) {\\n\\t\\t\\tfor (i = 0; arg = _args[i]; i += 1) {\\n\\t\\t\\t\\tif (typeof arg === 'function') {\\n\\t\\t\\t\\t\\targs.push((function (_handler) {\\n\\t\\t\\t\\t\\t\\treturn function () {\\n\\t\\t\\t\\t\\t\\t\\treturn _handler.apply(_scope, arguments);\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t})(arg));\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\targs.push(arg);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn args;\\n\\t\\t}\\n\\n\\t\\treturn _args;\\n\\t}\\n\\n\\tfunction registerHandler(_definition) {\\n\\t\\tif (!this.hasOwnProperty('eventRegistry')) {\\n\\t\\t\\tif (this.eventRegistry && this.isMemberSafe('eventRegistry')) {\\n\\t\\t\\t\\tthis.eventRegistry = this.eventRegistry.slice(0);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.eventRegistry = [];\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tthis.eventRegistry.push(_definition);\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// We don't want jQuery methods overridding our base type's methods.\\n\\texclude = ['constructor'].concat(_Object$keys(_typesBasic2['default']));\\n\\n\\tthis.baseType = 'TYPE_JQPROXY';\\n\\tthis.$els = null;\\n\\tthis.eventRegistry = null;\\n\\n\\tfor (method in $.fn) {\\n\\t\\tif (!$.fn.hasOwnProperty(method) || ~exclude.indexOf(method)) continue;\\n\\t\\tthis[method] = createProxyFunction(method);\\n\\t}\\n\\n\\tthis.node = function () {\\n\\t\\treturn this.$els[0];\\n\\t};\\n\\n\\tthis.attachEvents = function () {\\n\\t\\tvar self;\\n\\n\\t\\tself = this;\\n\\n\\t\\tif (this.eventRegistry && this.isMemberSafe('eventRegistry')) {\\n\\t\\t\\tthis.eventRegistry.forEach(function (_definition) {\\n\\t\\t\\t\\tself.on.apply(self, _definition);\\n\\t\\t\\t});\\n\\t\\t}\\n\\t};\\n\\n\\tthis.listen = function (_name, _isCapure_handler, _handler) {\\n\\t\\tvar _isCapture, node, handler;\\n\\n\\t\\t_isCapture = false;\\n\\n\\t\\t// resolve arguments\\n\\t\\ttypeof _isCapure_handler === 'boolean' ? _isCapture = _isCapure_handler : _handler = _isCapure_handler;\\n\\n\\t\\t_handler.cb = _handler.bind(this);\\n\\n\\t\\tif (this.$els) {\\n\\t\\t\\tnode = this.$els[0];\\n\\t\\t\\tif (node) return node.addEventListener(_name, _handler.cb, _isCapture);\\n\\t\\t} else {\\n\\t\\t\\treturn registerHandler([_name, _handler.cb, _isCapture]);\\n\\t\\t}\\n\\n\\t\\treturn false;\\n\\t};\\n\\n\\tthis.ignore = function (_name, _handler) {\\n\\t\\tvar node = this.$els && this.$els[0];\\n\\n\\t\\tif (node) return node.removeEventListener(_name, _handler.cb || _handler);\\n\\n\\t\\treturn false;\\n\\t};\\n\\n\\t// Wraps you function 'this' to the scope.\\n\\t//\\n\\tthis.bind = function (_handler) {\\n\\t\\tvar args;\\n\\n\\t\\targs = [].map.call(arguments, function (m) {\\n\\t\\t\\treturn m;\\n\\t\\t}).slice(1);\\n\\n\\t\\treturn _handler.bind.apply(_handler, [this].concat(args));\\n\\t};\\n\\n\\tthis.findOwn = function (_selector) {\\n\\t\\treturn this.find(_selector).filter(this.bind(function (_index, _node) {\\n\\t\\t\\tvar $node;\\n\\n\\t\\t\\t$node = $(_node);\\n\\n\\t\\t\\tif ($node.hasClass('pl-scope')) {\\n\\t\\t\\t\\treturn $node.parent().scope() === this;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn $node.scope() === this;\\n\\t\\t}));\\n\\t};\\n\\n\\tthis.isMemberSafe = function (_name) {\\n\\t\\tvar owner, elOwner, prototype;\\n\\n\\t\\tif (this.hasOwnProperty(_name)) {\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\tprototype = Object.getPrototypeOf(this);\\n\\t\\t\\towner = _util2['default'].getOwner(this, this[_name]);\\n\\n\\t\\t\\tif (owner.object.hasOwnProperty('$els') || prototype.hasOwnProperty('$els')) return false;\\n\\n\\t\\t\\tif (prototype.$els) {\\n\\t\\t\\t\\telOwner = _util2['default'].getOwner(prototype, prototype.$els);\\n\\n\\t\\t\\t\\tif (owner.object.isPrototypeOf(elOwner.object)) {\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\treturn false;\\n\\t};\\n\\n\\tthis.is = function (_obj) {\\n\\t\\tif (!_obj) return false;\\n\\t\\tif (_obj.$els) return this.$els.is(_obj.$els);\\n\\n\\t\\treturn this.$els.is(_obj);\\n\\t};\\n});\\n\\nexports['default'] = jQProxy;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"module.exports = { \\\"default\\\": __webpack_require__(26), __esModule: true };//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5cy5qcz9mZTA2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQiIsImZpbGUiOiIyNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qva2V5c1wiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5cy5qc1xuICoqIG1vZHVsZSBpZCA9IDI1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"__webpack_require__(27);\\nmodule.exports = __webpack_require__(33).Object.keys;//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qva2V5cy5qcz9jYzNmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EiLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzLyQuY29yZScpLk9iamVjdC5rZXlzO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qva2V5cy5qc1xuICoqIG1vZHVsZSBpZCA9IDI2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// 19.1.2.14 Object.keys(O)\\nvar toObject = __webpack_require__(28);\\n\\n__webpack_require__(30)('keys', function($keys){\\n  return function keys(it){\\n    return $keys(toObject(it));\\n  };\\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcz9jOThmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwiZmlsZSI6IjI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLyQudG8tb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vJC5vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbigka2V5cyl7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KXtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qc1xuICoqIG1vZHVsZSBpZCA9IDI3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// 7.1.13 ToObject(argument)\\nvar defined = __webpack_require__(29);\\nmodule.exports = function(it){\\n  return Object(defined(it));\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQudG8tb2JqZWN0LmpzPzA5M2MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi8kLmRlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC50by1vYmplY3QuanNcbiAqKiBtb2R1bGUgaWQgPSAyOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 29 */\n/***/ function(module, exports) {\n\n\teval(\"// 7.2.1 RequireObjectCoercible(argument)\\nmodule.exports = function(it){\\n  if(it == undefined)throw TypeError(\\\"Can't call method on  \\\" + it);\\n  return it;\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuZGVmaW5lZC5qcz83MDg3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKGl0ID09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5kZWZpbmVkLmpzXG4gKiogbW9kdWxlIGlkID0gMjlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// most Object methods by ES6 should accept primitives\\nvar $export = __webpack_require__(31)\\n  , core    = __webpack_require__(33)\\n  , fails   = __webpack_require__(36);\\nmodule.exports = function(KEY, exec){\\n  var fn  = (core.Object || {})[KEY] || Object[KEY]\\n    , exp = {};\\n  exp[KEY] = exec(fn);\\n  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQub2JqZWN0LXNhcC5qcz9mMzlkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBLG1EQUFtRCxPQUFPLEVBQUU7QUFDNUQiLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi8kLmV4cG9ydCcpXG4gICwgY29yZSAgICA9IHJlcXVpcmUoJy4vJC5jb3JlJylcbiAgLCBmYWlscyAgID0gcmVxdWlyZSgnLi8kLmZhaWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSwgZXhlYyl7XG4gIHZhciBmbiAgPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV1cbiAgICAsIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uKCl7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQub2JqZWN0LXNhcC5qc1xuICoqIG1vZHVsZSBpZCA9IDMwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var global    = __webpack_require__(32)\\n  , core      = __webpack_require__(33)\\n  , ctx       = __webpack_require__(34)\\n  , PROTOTYPE = 'prototype';\\n\\nvar $export = function(type, name, source){\\n  var IS_FORCED = type & $export.F\\n    , IS_GLOBAL = type & $export.G\\n    , IS_STATIC = type & $export.S\\n    , IS_PROTO  = type & $export.P\\n    , IS_BIND   = type & $export.B\\n    , IS_WRAP   = type & $export.W\\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\\n    , key, own, out;\\n  if(IS_GLOBAL)source = name;\\n  for(key in source){\\n    // contains in native\\n    own = !IS_FORCED && target && key in target;\\n    if(own && key in exports)continue;\\n    // export native or passed\\n    out = own ? target[key] : source[key];\\n    // prevent global pollution for namespaces\\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\\n    // bind timers to global for call from export context\\n    : IS_BIND && own ? ctx(out, global)\\n    // wrap global constructors for prevent change them in library\\n    : IS_WRAP && target[key] == out ? (function(C){\\n      var F = function(param){\\n        return this instanceof C ? new C(param) : C(param);\\n      };\\n      F[PROTOTYPE] = C[PROTOTYPE];\\n      return F;\\n    // make static versions for prototype methods\\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\\n    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;\\n  }\\n};\\n// type bitmap\\n$export.F = 1;  // forced\\n$export.G = 2;  // global\\n$export.S = 4;  // static\\n$export.P = 8;  // proto\\n$export.B = 16; // bind\\n$export.W = 32; // wrap\\nmodule.exports = $export;//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuZXhwb3J0LmpzP2I3MzQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRUFBbUU7QUFDbkUscUZBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsK0RBQStEO0FBQy9EO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZCxjQUFjO0FBQ2QsY0FBYztBQUNkLGNBQWM7QUFDZCxlQUFlO0FBQ2YsZUFBZTtBQUNmIiwiZmlsZSI6IjMxLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoJy4vJC5nbG9iYWwnKVxuICAsIGNvcmUgICAgICA9IHJlcXVpcmUoJy4vJC5jb3JlJylcbiAgLCBjdHggICAgICAgPSByZXF1aXJlKCcuLyQuY3R4JylcbiAgLCBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbih0eXBlLCBuYW1lLCBzb3VyY2Upe1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRlxuICAgICwgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuR1xuICAgICwgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuU1xuICAgICwgSVNfUFJPVE8gID0gdHlwZSAmICRleHBvcnQuUFxuICAgICwgSVNfQklORCAgID0gdHlwZSAmICRleHBvcnQuQlxuICAgICwgSVNfV1JBUCAgID0gdHlwZSAmICRleHBvcnQuV1xuICAgICwgZXhwb3J0cyAgID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSlcbiAgICAsIHRhcmdldCAgICA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV1cbiAgICAsIGtleSwgb3duLCBvdXQ7XG4gIGlmKElTX0dMT0JBTClzb3VyY2UgPSBuYW1lO1xuICBmb3Ioa2V5IGluIHNvdXJjZSl7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYga2V5IGluIHRhcmdldDtcbiAgICBpZihvd24gJiYga2V5IGluIGV4cG9ydHMpY29udGludWU7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSBvd24gPyB0YXJnZXRba2V5XSA6IHNvdXJjZVtrZXldO1xuICAgIC8vIHByZXZlbnQgZ2xvYmFsIHBvbGx1dGlvbiBmb3IgbmFtZXNwYWNlc1xuICAgIGV4cG9ydHNba2V5XSA9IElTX0dMT0JBTCAmJiB0eXBlb2YgdGFyZ2V0W2tleV0gIT0gJ2Z1bmN0aW9uJyA/IHNvdXJjZVtrZXldXG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICA6IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKVxuICAgIC8vIHdyYXAgZ2xvYmFsIGNvbnN0cnVjdG9ycyBmb3IgcHJldmVudCBjaGFuZ2UgdGhlbSBpbiBsaWJyYXJ5XG4gICAgOiBJU19XUkFQICYmIHRhcmdldFtrZXldID09IG91dCA/IChmdW5jdGlvbihDKXtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24ocGFyYW0pe1xuICAgICAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIEMgPyBuZXcgQyhwYXJhbSkgOiBDKHBhcmFtKTtcbiAgICAgIH07XG4gICAgICBGW1BST1RPVFlQRV0gPSBDW1BST1RPVFlQRV07XG4gICAgICByZXR1cm4gRjtcbiAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHNcbiAgICB9KShvdXQpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgaWYoSVNfUFJPVE8pKGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pKVtrZXldID0gb3V0O1xuICB9XG59O1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7IC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAvLyB3cmFwXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5leHBvcnQuanNcbiAqKiBtb2R1bGUgaWQgPSAzMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 32 */\n/***/ function(module, exports) {\n\n\teval(\"// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuZ2xvYmFsLmpzPzRkZWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDIiwiZmlsZSI6IjMyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZiA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZih0eXBlb2YgX19nID09ICdudW1iZXInKV9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuZ2xvYmFsLmpzXG4gKiogbW9kdWxlIGlkID0gMzJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 33 */\n/***/ function(module, exports) {\n\n\teval(\"var core = module.exports = {version: '1.2.6'};\\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuY29yZS5qcz83NjgwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZCQUE2QjtBQUM3QixxQ0FBcUMiLCJmaWxlIjoiMzMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0ge3ZlcnNpb246ICcxLjIuNid9O1xuaWYodHlwZW9mIF9fZSA9PSAnbnVtYmVyJylfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5jb3JlLmpzXG4gKiogbW9kdWxlIGlkID0gMzNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// optional / simple context binding\\nvar aFunction = __webpack_require__(35);\\nmodule.exports = function(fn, that, length){\\n  aFunction(fn);\\n  if(that === undefined)return fn;\\n  switch(length){\\n    case 1: return function(a){\\n      return fn.call(that, a);\\n    };\\n    case 2: return function(a, b){\\n      return fn.call(that, a, b);\\n    };\\n    case 3: return function(a, b, c){\\n      return fn.call(that, a, b, c);\\n    };\\n  }\\n  return function(/* ...args */){\\n    return fn.apply(that, arguments);\\n  };\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuY3R4LmpzP2U3OTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIzNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vJC5hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCB0aGF0LCBsZW5ndGgpe1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZih0aGF0ID09PSB1bmRlZmluZWQpcmV0dXJuIGZuO1xuICBzd2l0Y2gobGVuZ3RoKXtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbihhKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24oYSwgYil7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKGEsIGIsIGMpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oLyogLi4uYXJncyAqLyl7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuY3R4LmpzXG4gKiogbW9kdWxlIGlkID0gMzRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 35 */\n/***/ function(module, exports) {\n\n\teval(\"module.exports = function(it){\\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\\n  return it;\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuYS1mdW5jdGlvbi5qcz84NjBiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjM1LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5hLWZ1bmN0aW9uLmpzXG4gKiogbW9kdWxlIGlkID0gMzVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 36 */\n/***/ function(module, exports) {\n\n\teval(\"module.exports = function(exec){\\n  try {\\n    return !!exec();\\n  } catch(e){\\n    return true;\\n  }\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuZmFpbHMuanM/NmMyOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBIiwiZmlsZSI6IjM2LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjKXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5mYWlscy5qc1xuICoqIG1vZHVsZSBpZCA9IDM2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n*  Queue\\n*  @desc Contains...\\n*  @proto Array, Events, Basic\\n*/\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesCollection = __webpack_require__(21);\\n\\nvar _typesCollection2 = _interopRequireDefault(_typesCollection);\\n\\nvar _typesEvents = __webpack_require__(18);\\n\\nvar _typesEvents2 = _interopRequireDefault(_typesEvents);\\n\\nvar Queue = _typesCollection2['default'].extend(function () {\\n\\n\\tthis.baseType = 'TYPE_QUEUE';\\n\\n\\tthis.ready = function (_record) {\\n\\t\\tif (_record != null) this.remove(_record);\\n\\n\\t\\tif (!this.length) {\\n\\t\\t\\tthis.trigger('complete');\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t_util2['default'].mixin(this, _typesEvents2['default']);\\n\\n\\treturn this;\\n});\\n\\nexports['default'] = Queue;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvUXVldWUuanM/MDNjYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Z0NBTWlCLEVBQU07Ozs7MkNBQ0EsRUFBa0I7Ozs7dUNBQ3RCLEVBQWM7Ozs7QUFFakMsSUFBSSxLQUFLLEdBQUcsNkJBQVcsTUFBTSxDQUFDLFlBQVk7O0FBRXpDLEtBQUksQ0FBQyxRQUFRLEdBQUcsWUFBWSxDQUFDOztBQUU3QixLQUFJLENBQUMsS0FBSyxHQUFHLFVBQVUsT0FBTyxFQUFFO0FBQy9CLE1BQUksT0FBTyxJQUFJLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDOztBQUUxQyxNQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUNqQixPQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0dBQ3pCOztBQUVELFNBQU8sSUFBSSxDQUFDO0VBQ1osQ0FBQzs7QUFFRixtQkFBSyxLQUFLLENBQUMsSUFBSSwyQkFBUyxDQUFDOztBQUV6QixRQUFPLElBQUksQ0FBQztDQUVaLENBQUMsQ0FBQzs7cUJBRVksS0FBSyIsImZpbGUiOiIzNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuKiAgUXVldWVcbiogIEBkZXNjIENvbnRhaW5zLi4uXG4qICBAcHJvdG8gQXJyYXksIEV2ZW50cywgQmFzaWNcbiovXG5cbmltcG9ydCB1dGlsIGZyb20gJ3V0aWwnO1xuaW1wb3J0IENvbGxlY3Rpb24gZnJvbSAndHlwZXMvQ29sbGVjdGlvbic7XG5pbXBvcnQgRXZlbnRzIGZyb20gJ3R5cGVzL0V2ZW50cyc7XG5cbnZhciBRdWV1ZSA9IENvbGxlY3Rpb24uZXh0ZW5kKGZ1bmN0aW9uICgpIHtcblxuXHR0aGlzLmJhc2VUeXBlID0gJ1RZUEVfUVVFVUUnO1xuXG5cdHRoaXMucmVhZHkgPSBmdW5jdGlvbiAoX3JlY29yZCkge1xuXHRcdGlmIChfcmVjb3JkICE9IG51bGwpIHRoaXMucmVtb3ZlKF9yZWNvcmQpO1xuXG5cdFx0aWYgKCF0aGlzLmxlbmd0aCkge1xuXHRcdFx0dGhpcy50cmlnZ2VyKCdjb21wbGV0ZScpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXHRcblx0dXRpbC5taXhpbih0aGlzLCBFdmVudHMpO1xuXG5cdHJldHVybiB0aGlzO1xuXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgUXVldWU7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NvdXJjZS90eXBlcy9RdWV1ZS5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 38 */\n/***/ function(module, exports) {\n\n\teval(\"exports.__esModule = true;\\n/**\\n * @module evalAction\\n */\\n\\n/**\\n * Performs `eval()` on the value of an `action` attribute on an HTML element.\\n * @arg {string} _source - JavaScript source code.\\n * @arg {Scope} _scope - The context in which to run the source.\\n * @returns {*} The result of the evaluated source.\\n */\\nfunction evalAction(_source, _scope) {\\n\\tvar error;\\n\\n\\tfunction target(_selector) {\\n\\t\\tif (_scope.event) {\\n\\t\\t\\treturn _selector ? $(_scope.event.target).closest(_selector) : $(_scope.event.target);\\n\\t\\t}\\n\\t}\\n\\n\\t// expose members of the object as if they were local variables.\\n\\t// NOTE: methods still retain their \\\"this\\\" binding to the object! :D\\n\\treturn eval(\\\"with (_scope) { try {\\\" + _source + \\\";} catch (error) { console.error('Error:', error.message, 'evaluating action', _source, 'in', _scope.id() || _scope.address()); } }\\\");\\n}\\n\\nexports[\\\"default\\\"] = evalAction;\\nmodule.exports = exports[\\\"default\\\"];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvZXZhbEFjdGlvbi5qcz8zY2ZiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBVUEsU0FBUyxVQUFVLENBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRTtBQUNyQyxLQUFJLEtBQUssQ0FBQzs7QUFFVixVQUFTLE1BQU0sQ0FBRSxTQUFTLEVBQUU7QUFDM0IsTUFBSSxNQUFNLENBQUMsS0FBSyxFQUFFO0FBQ2pCLFVBQU8sU0FBUyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUN0RjtFQUNEOzs7O0FBSUQsUUFBTyxJQUFJLENBQUMsdUJBQXVCLEdBQUMsT0FBTyxHQUFDLHFJQUFxSSxDQUFDLENBQUM7Q0FDbkw7O3FCQUVjLFVBQVUiLCJmaWxlIjoiMzguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb2R1bGUgZXZhbEFjdGlvblxuICovXG5cbi8qKlxuICogUGVyZm9ybXMgYGV2YWwoKWAgb24gdGhlIHZhbHVlIG9mIGFuIGBhY3Rpb25gIGF0dHJpYnV0ZSBvbiBhbiBIVE1MIGVsZW1lbnQuXG4gKiBAYXJnIHtzdHJpbmd9IF9zb3VyY2UgLSBKYXZhU2NyaXB0IHNvdXJjZSBjb2RlLlxuICogQGFyZyB7U2NvcGV9IF9zY29wZSAtIFRoZSBjb250ZXh0IGluIHdoaWNoIHRvIHJ1biB0aGUgc291cmNlLlxuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHQgb2YgdGhlIGV2YWx1YXRlZCBzb3VyY2UuXG4gKi9cbmZ1bmN0aW9uIGV2YWxBY3Rpb24gKF9zb3VyY2UsIF9zY29wZSkge1xuXHR2YXIgZXJyb3I7XG5cblx0ZnVuY3Rpb24gdGFyZ2V0IChfc2VsZWN0b3IpIHtcblx0XHRpZiAoX3Njb3BlLmV2ZW50KSB7XG5cdFx0XHRyZXR1cm4gX3NlbGVjdG9yID8gJChfc2NvcGUuZXZlbnQudGFyZ2V0KS5jbG9zZXN0KF9zZWxlY3RvcikgOiAkKF9zY29wZS5ldmVudC50YXJnZXQpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly8gZXhwb3NlIG1lbWJlcnMgb2YgdGhlIG9iamVjdCBhcyBpZiB0aGV5IHdlcmUgbG9jYWwgdmFyaWFibGVzLlxuXHQvLyBOT1RFOiBtZXRob2RzIHN0aWxsIHJldGFpbiB0aGVpciBcInRoaXNcIiBiaW5kaW5nIHRvIHRoZSBvYmplY3QhIDpEXG5cdHJldHVybiBldmFsKFwid2l0aCAoX3Njb3BlKSB7IHRyeSB7XCIrX3NvdXJjZStcIjt9IGNhdGNoIChlcnJvcikgeyBjb25zb2xlLmVycm9yKCdFcnJvcjonLCBlcnJvci5tZXNzYWdlLCAnZXZhbHVhdGluZyBhY3Rpb24nLCBfc291cmNlLCAnaW4nLCBfc2NvcGUuaWQoKSB8fCBfc2NvcGUuYWRkcmVzcygpKTsgfSB9XCIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBldmFsQWN0aW9uO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zb3VyY2UvZXZhbEFjdGlvbi5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Base class for a scope acting as an \\\"entity\\\" with \\\"states\\\", \\\"behaviors\\\" and the ability to respond (responsibilities) to behaviors.\\n *\\n * @module\\n */\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesGlobalScope = __webpack_require__(22);\\n\\nvar _typesGlobalScope2 = _interopRequireDefault(_typesGlobalScope);\\n\\nvar _typesCollection = __webpack_require__(21);\\n\\nvar _typesCollection2 = _interopRequireDefault(_typesCollection);\\n\\nvar _typesDimensions = __webpack_require__(5);\\n\\nvar _typesQueue = __webpack_require__(37);\\n\\nvar _typesQueue2 = _interopRequireDefault(_typesQueue);\\n\\nfunction invokeResponsibilities(_scope, _event) {\\n\\tif (_scope && _scope.responsibilities && _scope.isMemberSafe('responsibilities')) {\\n\\t\\t_scope.responsibilities.forEach(function (_record) {\\n\\t\\t\\tif (_record.name === _event.name) {\\n\\n\\t\\t\\t\\t// console.log(_scope.id(), 'respond', _record.name, 'from', _event.targetScope.id());\\n\\t\\t\\t\\t_record.ability.call(_scope, _event);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n}\\n\\n/**\\n * <span class=\\\"note important\\\">NOTE: This is NOT a constructor. Use `Entity.create()` to get a new instance.</span>\\n * @classdesc Base class for a scope acting as an \\\"entity\\\" with \\\"states\\\", \\\"behaviors\\\" and the ability to respond (responsibilities) to behaviors. For more information on these terms read [this]{@link module:types/Entity}.\\n * <style>\\n * .tag {\\n *   padding: 1px 4px;\\n *   border-radius: 4px;\\n *\\n *   color: #fff;\\n *   background-color: #aaa;\\n * }\\n *\\n * .tag.behavior {\\n *\\t background-color: #0ba;\\n * }\\n *\\n * .tag.state {\\n *\\t background-color: #ba0;\\n * }\\n *\\n * .note {\\n *   border: solid 1px;\\n *   border-radius: 4px;\\n *   padding: 1px 4px;\\n *   color: #aaa;\\n *   background-color: #eee;\\n * }\\n * \\n * .note.important {\\n *   color: #b55;\\n *   background-color: #fee;\\n * }\\n * </style>\\n *\\n * @class\\n * @prop {module:types/Collection~Collection} responsibilities - A collection of ResponsibilityRecords for the scope.\\n * @prop {boolean} isComplete - Marks a scope as \\\"complete\\\" via the [`complete()`]{@link module:types/Entity~Entity#complete} behavior.\\n * @extends GlobalScope\\n */\\nvar Entity = _typesGlobalScope2['default'].extend(function () {\\n\\n\\tfunction resolveTarget(_target) {\\n\\n\\t\\tswitch (typeof _target) {\\n\\t\\t\\tcase 'string':\\n\\t\\t\\t\\treturn this.findOwn(_target);\\n\\t\\t\\tcase 'object':\\n\\t\\t\\t\\tif (_target.jquery) return _target;\\n\\t\\t\\t\\tif (Entity.isPrototypeOf(_target)) return _target;\\n\\t\\t\\t\\tif (_target.nodeType === document.ELEMENT_NODE) return $(_target);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\tfunction ResponsibilityRecord(_name, _ability) {\\n\\t\\tthis.name = _name;\\n\\t\\tthis.ability = _ability;\\n\\t}\\n\\n\\tfunction dragGreeter(_event) {\\n\\t\\tswitch (_event.type) {\\n\\t\\t\\tcase 'drag-start':\\n\\t\\t\\t\\tthis.grab(_event.state);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'drag-move':\\n\\t\\t\\t\\tthis.dragging(_event.state);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'drag-end':\\n\\t\\t\\t\\tthis.release(_event.state);\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction attachDragEvents() {\\n\\t\\tif (this.draggables && this.isMemberSafe('draggables') && this.draggables.length) {\\n\\t\\t\\tthis.on('drag-start drag-move drag-end', dragGreeter);\\n\\t\\t}\\n\\t}\\n\\n\\tthis.baseType = 'TYPE_ENTITY';\\n\\tthis.STATE = {\\n\\t\\tPLAYING: 'PLAYING',\\n\\t\\tBACKGROUND: 'BACKGROUND',\\n\\t\\tVOICE_OVER: 'VOICE-OVER',\\n\\t\\tSFX: 'SFX'\\n\\t};\\n\\n\\tthis.timeoutID = null;\\n\\tthis.intervalID = null;\\n\\tthis.responsibilities = null;\\n\\tthis.isComplete = false;\\n\\tthis.shouldInheritAbilities = true;\\n\\tthis.frameHandlers = null;\\n\\tthis.frameRate = 60; // 60fps\\n\\tthis.draggables = null;\\n\\tthis.requiredQueue = null;\\n\\tthis.bgImageCollection = null;\\n\\n\\tthis.handleProperty({\\n\\t\\tsize: function size(_node, _name, _value) {\\n\\t\\t\\tvar size;\\n\\n\\t\\t\\tif (this.is(_node)) {\\n\\t\\t\\t\\tsize = _value.split(/\\\\s*[x,]\\\\s*/);\\n\\t\\t\\t\\tthis.css({\\n\\t\\t\\t\\t\\twidth: size[0],\\n\\t\\t\\t\\t\\theight: size[1] || size[0]\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\tposition: function position(_node, _name, _value) {\\n\\t\\t\\tvar size;\\n\\n\\t\\t\\tif (this.is(_node)) {\\n\\t\\t\\t\\tsize = _value.split(/\\\\s*[x,]\\\\s*/);\\n\\t\\t\\t\\tthis.css({\\n\\t\\t\\t\\t\\ttop: size[1] || size[0],\\n\\t\\t\\t\\t\\tleft: size[0]\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\tdraggable: function draggable(_node, _name, _value) {\\n\\t\\t\\tif (!this.hasOwnProperty('draggables')) {\\n\\t\\t\\t\\tthis.draggables = $();\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.draggables.push(_node);\\n\\t\\t},\\n\\n\\t\\tbg: function bg(_node, _name, _value) {\\n\\t\\t\\tvar img = new Image();\\n\\n\\t\\t\\tif (!this.hasOwnProperty('bgImageCollection')) this.bgImageCollection = [];\\n\\n\\t\\t\\tif (this.isMemberSafe('bgImageCollection')) {\\n\\t\\t\\t\\timg.src = _value;\\n\\t\\t\\t\\tthis.bgImageCollection.push(img);\\n\\t\\t\\t\\t$(_node).css('background-image', 'url(' + _value + ')');\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\n\\tthis.__init = function (_event) {\\n\\t\\tif (this.bgImageCollection && this.isMemberSafe('bgImageCollection')) {\\n\\t\\t\\tthis.watchAssets(this.bgImageCollection);\\n\\t\\t}\\n\\t\\tattachDragEvents.call(this);\\n\\n\\t\\treturn this.proto();\\n\\t};\\n\\n\\tthis.size = function () {\\n\\t\\tvar size;\\n\\n\\t\\tif (arguments.length) {\\n\\t\\t\\tsize = _typesDimensions.Size.create(arguments);\\n\\t\\t\\tthis.css(size);\\n\\t\\t\\treturn size;\\n\\t\\t}\\n\\n\\t\\treturn _typesDimensions.Size.create().set(this.width(), this.height());\\n\\t};\\n\\n\\tthis.propagateBehavior = function (_event) {\\n\\t\\tvar ids;\\n\\n\\t\\tids = [];\\n\\n\\t\\tthis.findOwn('.pl-scope').each(function (_index, _node) {\\n\\t\\t\\tvar $node = $(_node);\\n\\t\\t\\tids.push($node.id() || $node.address());\\n\\t\\t});\\n\\n\\t\\tif (this.hasOwnProperty('entities') && this.entities.length) {\\n\\t\\t\\t// console.log(this.id(), 'propagate', _event.name, 'to', this.entities.length, 'nodes', ids);\\n\\n\\t\\t\\tthis.entities.forEach(function (_scope) {\\n\\t\\t\\t\\tinvokeResponsibilities(_scope, _event);\\n\\t\\t\\t\\t_scope.propagateBehavior(_event);\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.require = function (_entity) {\\n\\t\\tif (!this.hasOwnProperty('requiredQueue')) {\\n\\t\\t\\tthis.requiredQueue = _typesQueue2['default'].create();\\n\\t\\t\\tthis.requiredQueue.on('complete', this.bind(function () {\\n\\t\\t\\t\\tthis.log('entity complete');\\n\\t\\t\\t\\tthis.complete();\\n\\t\\t\\t}));\\n\\n\\t\\t\\tthis.respond('complete', function (_event) {\\n\\t\\t\\t\\tif (!this.has(_event.target)) return;\\n\\t\\t\\t\\tif (_event.targetScope === this) return;\\n\\n\\t\\t\\t\\tthis.requiredQueue.ready(_event.behaviorTarget);\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tthis.requiredQueue.add(_entity);\\n\\t\\tthis.gate();\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.behavior = function (_name, _behavior) {\\n\\t\\t_behavior.method = this[_name] = function () {\\n\\t\\t\\tvar behaviorEvent, result;\\n\\n\\t\\t\\tbehaviorEvent = {\\n\\t\\t\\t\\tname: _name,\\n\\t\\t\\t\\tmessage: '',\\n\\t\\t\\t\\ttargetScope: this,\\n\\t\\t\\t\\tbehaviorTarget: this\\n\\t\\t\\t};\\n\\n\\t\\t\\tresult = _behavior.apply(this, arguments);\\n\\n\\t\\t\\tif (typeof result === 'object') {\\n\\t\\t\\t\\tbehaviorEvent = _util2['default'].mixin(behaviorEvent, result);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (result !== false) {\\n\\t\\t\\t\\tthis.trigger($.Event('behavior', behaviorEvent));\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this;\\n\\t\\t};\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.respond = function () {\\n\\t\\tvar name, ability, parentScope, abilities, protoAbilities;\\n\\n\\t\\tif (!this.hasOwnProperty('responsibilities')) {\\n\\t\\t\\tabilities = _typesCollection2['default'].create();\\n\\t\\t\\tprotoAbilities = this.provideAblilityPototype();\\n\\n\\t\\t\\tif (this.shouldInheritAbilities && protoAbilities && protoAbilities.responsibilities) {\\n\\t\\t\\t\\tabilities.push.apply(abilities, protoAbilities.responsibilities);\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.responsibilities = abilities;\\n\\t\\t}\\n\\n\\t\\tif (arguments.length === 1) {\\n\\t\\t\\tswitch (typeof arguments[0]) {\\n\\t\\t\\t\\tcase 'string':\\n\\t\\t\\t\\t\\tname = arguments[0];break;\\n\\n\\t\\t\\t\\tcase 'function':\\n\\t\\t\\t\\tcase 'object':\\n\\t\\t\\t\\t\\tability = arguments[0];break;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tname = arguments[0];\\n\\t\\t\\tability = arguments[1];\\n\\t\\t}\\n\\n\\t\\tswitch (typeof ability) {\\n\\t\\t\\tcase 'object':\\n\\t\\t\\t\\tfor (name in ability) {\\n\\t\\t\\t\\t\\tif (!ability.hasOwnProperty(name)) continue;\\n\\n\\t\\t\\t\\t\\tthis.respond(name, ability[name]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'function':\\n\\t\\t\\t\\tthis.responsibilities.add(new ResponsibilityRecord(name, ability));\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.delay = function (_time, _cb) {\\n\\t\\tvar screen, time;\\n\\n\\t\\tscreen = this;\\n\\t\\ttime = _util2['default'].toMillisec(_time);\\n\\n\\t\\t_util2['default'].assignRef(this, 'timeoutID', setTimeout(_cb.bind(screen), time));\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.repeat = function (_time, _cb) {\\n\\t\\tvar screen, time;\\n\\n\\t\\tscreen = this;\\n\\t\\ttime = _util2['default'].toMillisec(_time);\\n\\n\\t\\t_util2['default'].assignRef(this, 'intervalID', setInterval(_cb.bind(screen), time));\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.kill = function (_timer) {\\n\\t\\tvar id;\\n\\n\\t\\tid = _timer === 'repeat' ? this.intervalID : this.timeoutID;\\n\\n\\t\\tif (typeof id === 'number') {\\n\\t\\t\\t(_timer === 'repeat' ? clearInterval : clearTimeout)(id);\\n\\t\\t\\tthis[_timer === 'repeat' ? 'intervalID' : 'timeoutID'] = null;\\n\\t\\t} else if (id) {\\n\\t\\t\\tid.forEach((function (_id) {\\n\\t\\t\\t\\tthis.kill(_id);\\n\\t\\t\\t}).bind(this));\\n\\n\\t\\t\\t_timer === 'repeat' ? this.intervalID = null : this.timeoutID = null;\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.eachFrame = function (_handler, _on) {\\n\\t\\tvar binder, frame, lastTime, rate, frames;\\n\\n\\t\\trate = this.frameRate || 1000;\\n\\t\\tframes = 0;\\n\\t\\tlastTime = 0;\\n\\n\\t\\tif (!this.hasOwnProperty('frameHandlers')) {\\n\\t\\t\\tframe = function (_time) {\\n\\t\\t\\t\\tvar i, handler;\\n\\n\\t\\t\\t\\tif (rate) {\\n\\t\\t\\t\\t\\tif (_time - lastTime >= 1000 / rate) {\\n\\t\\t\\t\\t\\t\\tfor (i = 0; handler = this.frameHandlers[i]; i += 1) {\\n\\t\\t\\t\\t\\t\\t\\thandler.call(this, _time, Math.round(1000 / (_time - lastTime)), rate);\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tif (frames === rate) frames = 0;\\n\\n\\t\\t\\t\\t\\t\\tframes += 1;\\n\\t\\t\\t\\t\\t\\tlastTime = _time;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (this.frameHandlers.length) {\\n\\t\\t\\t\\t\\twindow.requestAnimationFrame(binder);\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\n\\t\\t\\tbinder = this.bind(frame);\\n\\n\\t\\t\\t// allows methods passed as _handler's to\\n\\t\\t\\t// be able to trace back for proto() callbacks.\\n\\t\\t\\tframe.method = this.eachFrame;\\n\\n\\t\\t\\tthis.frameHandlers = _typesCollection2['default'].create();\\n\\t\\t\\twindow.requestAnimationFrame(binder);\\n\\t\\t}\\n\\n\\t\\tif (_on !== false) {\\n\\t\\t\\tthis.frameHandlers.add(_handler);\\n\\t\\t} else {\\n\\t\\t\\tthis.frameHandlers.remove(_handler);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.state = function (_flag, _definition, _imp) {\\n\\t\\tvar flag, tester, setter, getter, STATE, def, opperations, names;\\n\\n\\t\\tif (!_definition) {\\n\\t\\t\\treturn this.proto(_flag);\\n\\t\\t}\\n\\n\\t\\tdef = _definition.split(/\\\\s+/);\\n\\t\\tnames = _flag.split(/\\\\s+/);\\n\\t\\topperations = [];\\n\\n\\t\\tdef.forEach(this.bind(function (_opp) {\\n\\t\\t\\tvar method, flag;\\n\\n\\t\\t\\tmethod = _opp.slice(0, 1) === '+' ? 'addClass' : 'removeClass';\\n\\n\\t\\t\\topperations.push({\\n\\t\\t\\t\\tmethod: method,\\n\\t\\t\\t\\tflag: _opp.slice(1)\\n\\t\\t\\t});\\n\\n\\t\\t\\tif (method === 'addClass') {\\n\\t\\t\\t\\tflag = _opp.slice(1);\\n\\t\\t\\t\\tSTATE = _util2['default'].transformId(flag);\\n\\t\\t\\t\\tthis.STATE[STATE] = flag;\\n\\t\\t\\t}\\n\\t\\t}));\\n\\n\\t\\tsetter = names[0];\\n\\t\\ttester = names[1];\\n\\n\\t\\tthis[setter] = function (_target) {\\n\\t\\t\\tvar target, uiStateEvent, oppsPerformed;\\n\\n\\t\\t\\ttarget = resolveTarget.call(this, _target);\\n\\t\\t\\tuiStateEvent = $.Event('ui-' + setter, {\\n\\t\\t\\t\\ttarget: target.jquery ? target[0] : target,\\n\\t\\t\\t\\ttargetScope: this\\n\\t\\t\\t});\\n\\t\\t\\toppsPerformed = 0;\\n\\n\\t\\t\\tif (_imp && _imp.shouldSet && _imp.shouldSet.apply(this, arguments) === false) {\\n\\t\\t\\t\\treturn !!(_imp && _imp.notSet) && _imp.notSet.apply(this, arguments);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (_imp && _imp.willSet) _imp.willSet.apply(this, arguments);\\n\\n\\t\\t\\topperations.forEach(function (_record) {\\n\\t\\t\\t\\t// If we are adding or removing a class, test if the target already has/removed it.\\n\\t\\t\\t\\t// If so, then bump \\\"oppsPerformed\\\".\\n\\t\\t\\t\\toppsPerformed += Number(target.hasClass(_record.flag) === ! ~_record.method.indexOf('add'));\\n\\t\\t\\t\\ttarget[_record.method](_record.flag);\\n\\t\\t\\t});\\n\\n\\t\\t\\tif (_imp && _imp.didSet) _imp.didSet.apply(this, arguments);\\n\\n\\t\\t\\tif (oppsPerformed) {\\n\\t\\t\\t\\tthis.trigger(uiStateEvent);\\n\\t\\t\\t\\treturn target;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn false;\\n\\t\\t};\\n\\n\\t\\tif (tester) {\\n\\t\\t\\tgetter = 'get' + tester.slice(0, 1).toUpperCase() + tester.slice(1);\\n\\n\\t\\t\\tthis[tester] = function (_target) {\\n\\t\\t\\t\\tvar target;\\n\\n\\t\\t\\t\\ttarget = resolveTarget.call(this, _target);\\n\\n\\t\\t\\t\\treturn target.hasClass(this.STATE[STATE]);\\n\\t\\t\\t};\\n\\n\\t\\t\\tthis[getter] = function () {\\n\\t\\t\\t\\treturn this.findOwn('.' + this.STATE[STATE]);\\n\\t\\t\\t};\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.provideBehaviorEventScope = function () {\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.provideAblilityPototype = function () {\\n\\t\\tvar owner;\\n\\n\\t\\towner = _util2['default'].getOwner(this, this.baseType);\\n\\n\\t\\treturn !!owner && owner.object;\\n\\t};\\n\\n\\tthis.completed = function () {\\n\\t\\treturn this.game.demoMode || this.hasOwnProperty('isComplete') && this.isComplete || !this.requiredQueue || this.hasOwnProperty('requiredQueue') && this.requiredQueue.length === 0;\\n\\t};\\n\\n\\t/**\\n  * <span class=\\\"tag behavior\\\">Behavior</span>\\n  * Marks a scope \\\"complete\\\" by seting `isComplete` to `true` and add the `COMPLETE` state flag.\\n  * @function module:types/Entity~Entity#complete\\n  * @returns {object} A messages object with `behaviorTarget` set to the scope performing the behavior.\\n  */\\n\\tthis.behavior('complete', function () {\\n\\t\\tif (this.hasOwnProperty('isComplete') && this.isComplete) return false;\\n\\n\\t\\tthis.isComplete = true;\\n\\t\\tthis.addClass('COMPLETE');\\n\\n\\t\\treturn {\\n\\t\\t\\tbehaviorTarget: this\\n\\t\\t};\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag behavior\\\">Behavior</span>\\n  * Reports a drggable has been grabbed for dragging.\\n  * @function module:types/Entity~Entity#grab\\n  * @arg {object} _state - An object containing the state of a draggable.\\n  * @returns {object} A messages object with `behaviorTarget` set to the scope performing the behavior.\\n  *\\n  * @see module:play~pl.game.manager.draggable for more info on draggable state.\\n  */\\n\\tthis.behavior('grab', function (_state) {\\n\\t\\treturn {\\n\\t\\t\\tstate: _state,\\n\\t\\t\\tbehaviorTarget: _state.$draggable\\n\\t\\t};\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag behavior\\\">Behavior</span>\\n  * Reports a draggable as being dragged.\\n  * @function module:types/Entity~Entity#dragging\\n  * @arg {object} _state - An object containing the state of a draggable.\\n  * @returns {object} A messages object with `behaviorTarget` set to the scope performing the behavior.\\n  *\\n  * @see module:play~pl.game.manager.draggable for more info on draggable state.\\n  */\\n\\tthis.behavior('dragging', function (_state) {\\n\\t\\treturn {\\n\\t\\t\\tstate: _state,\\n\\t\\t\\tbehaviorTarget: _state.$draggable\\n\\t\\t};\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag behavior\\\">Behavior</span>\\n  * Reports a drggable as released or droped.\\n  * @function module:types/Entity~Entity#release\\n  * @arg {object} _state - An object containing the state of a draggable.\\n  * @returns {object} A messages object with `behaviorTarget` set to the scope performing the behavior.\\n  *\\n  * @see module:play~pl.game.manager.draggable for more info on draggable state.\\n  */\\n\\tthis.behavior('release', function (_state) {\\n\\t\\treturn {\\n\\t\\t\\tstate: _state,\\n\\t\\t\\tbehaviorTarget: _state.$draggable\\n\\t\\t};\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds `OPEN` and removes the `LEAVE` CSS class names from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#open\\n  * @fires Entity#ui-open\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `OPEN` class name.\\n  * @function module:types/Entity~Entity#opened\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Open'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `OPEN` class name.\\n  * @function module:types/Entity~Entity#getOpened\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('open opened', '+OPEN -LEAVE');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Removes the `OPEN` CSS class name from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#close\\n  * @fires Entity#ui-close\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\tthis.state('close', '-OPEN');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds the `LEAVE` CSS class name to the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#leave\\n  * @fires Entity#ui-leave\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `LEAVE` class name.\\n  * @function module:types/Entity~Entity#left\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Leave'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `LEAVE` class name.\\n  * @function module:types/Entity~Entity#getLeft\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('leave left', '+LEAVE', {\\n\\t\\twillSet: function willSet(_target) {\\n\\t\\t\\tthis.close(_target);\\n\\t\\t}\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds `ENABLED` and removes the `DISABLED` CSS class names from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#enable\\n  * @fires Entity#ui-enable\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `ENABLED` class name.\\n  * @function module:types/Entity~Entity#enabled\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Enabled'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `ENABLED` class name.\\n  * @function module:types/Entity~Entity#getEnabled\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('enable enabled', '+ENABLED -DISABLED');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds `DISABLED` and removes the `ENABLED` CSS class names from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#disable\\n  * @fires Entity#ui-disable\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `DISABLED` class name.\\n  * @function module:types/Entity~Entity#disabled\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Disabled'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `DISABLED` class name.\\n  * @function module:types/Entity~Entity#getDisabled\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('disable disabled', '+DISABLED -ENABLED');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds the `SELECTED` CSS class name to the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#select\\n  * @fires Entity#ui-select\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `SELECTED` class name.\\n  * @function module:types/Entity~Entity#selected\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Selected'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `SELECTED` class name.\\n  * @function module:types/Entity~Entity#getDisabled\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('select selected', '+SELECTED', {\\n\\t\\twillSet: function willSet(_target) {\\n\\t\\t\\tvar target, $parent;\\n\\n\\t\\t\\ttarget = resolveTarget.call(this, _target);\\n\\t\\t\\t$parent = target.parent();\\n\\n\\t\\t\\t$parent.find('> .SELECTED').each(this.bind(function (_index, _node) {\\n\\t\\t\\t\\tthis.deselect(_node);\\n\\t\\t\\t}));\\n\\t\\t\\t$parent.find('> .HIGHLIGHTED').each(this.bind(function (_index, _node) {\\n\\t\\t\\t\\tthis.unhighlight(_node);\\n\\t\\t\\t}));\\n\\t\\t}\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Removes the `SELECTED` CSS class name from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#deselect\\n  * @fires Entity#ui-deselect\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\tthis.state('deselect', '-SELECTED');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds the `HIGHLIGHTED` CSS class name to the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#highlight\\n  * @fires Entity#ui-highlight\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `HIGHLIGHTED` class name.\\n  * @function module:types/Entity~Entity#highlighted\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Highlighted'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `HIGHLIGHTED` class name.\\n  * @function module:types/Entity~Entity#getHighlighted\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('highlight highlighted', '+HIGHLIGHTED');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Removes the `HIGHLIGHTED` CSS class name from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#unhighlight\\n  * @fires Entity#ui-unhighlight\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\tthis.state('unhighlight', '-HIGHLIGHTED');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds the `DRAGGABLE` CSS class name to the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#draggable\\n  * @fires Entity#ui-draggable\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `DRAGGABLE` class name.\\n  * @function module:types/Entity~Entity#dragEnabled\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Draggable'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `DRAGGABLE` class name.\\n  * @function module:types/Entity~Entity#getDragEnabled\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('draggable dragEnabled', '+DRAGGABLE', {\\n\\t\\tdidSet: function didSet(_target) {\\n\\t\\t\\tthis.translate(resolveTarget.call(this, _target));\\n\\t\\t}\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Removes the `DRAGGABLE` CSS class name from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#undraggable\\n  * @fires Entity#ui-undraggable\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\tthis.state('undraggable', '-DRAGGABLE');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds the `TRANSLATED` CSS class name to the scope or the given `_target`. The target also gets a 2d transform at the given `_point`.\\n  * @function module:types/Entity~Entity#translate\\n  * @fires Entity#ui-translate\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @arg {module:types/Dimensions~Point} _point - Point object with coordinates {x,y}.\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds the `TRANSLATED` CSS class name to the scope. The scope also gets a 2d transform at the given `_point`.\\n  * @function module:types/Entity~Entity#translate\\n  * @fires Entity#ui-translate\\n  * @arg {module:types/Dimensions~Point} _point - Point object with coordinates {x,y}.\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `TRANSLATED` class name.\\n  * @function module:types/Entity~Entity#translated\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Translate'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `TRANSLATED` class name.\\n  * @function module:types/Entity~Entity#getTranslated\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('translate translated', '+TRANSLATED', {\\n\\t\\twillSet: function willSet(_target_point, _point) {\\n\\t\\t\\tvar point, target;\\n\\n\\t\\t\\ttarget = resolveTarget.call(this, _target_point);\\n\\t\\t\\tpoint = ! ~[_target_point.x, _target_point.y].indexOf(undefined) ? _target_point : _point;\\n\\n\\t\\t\\tif (point) {\\n\\t\\t\\t\\ttarget.css('transform', 'translateX(' + point.x + 'px) translateY(' + point.y + 'px)');\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Removes the `TRANSLATED` CSS class name and CSS transform from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#untranslate\\n  * @fires Entity#ui-untranslate\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\tthis.state('untranslate', '-TRANSLATED', {\\n\\t\\twillSet: function willSet() {\\n\\t\\t\\tthis.css('transform', 'none');\\n\\t\\t}\\n\\t});\\n\\n\\tthis.state('gate gated', '+GATED');\\n});\\n\\nexports['default'] = { Entity: Entity, invokeResponsibilities: invokeResponsibilities };\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"exports.__esModule = true;\\n/**\\n*  Screen\\n*  @desc Contains...\\n*  @proto Entity\\n*/\\n\\nvar _typesEntity = __webpack_require__(39);\\n\\nvar Screen = _typesEntity.Entity.extend(function () {\\n\\n\\tfunction attachBehaviorEvent() {\\n\\t\\tthis.on('behavior', function (_event) {\\n\\t\\t\\t// console.log('SCREEN GOT', _event.targetScope.id(), _event.name);\\n\\n\\t\\t\\tif (this !== _event.targetScope) {\\n\\t\\t\\t\\t_typesEntity.invokeResponsibilities(this, _event);\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.propagateBehavior(_event);\\n\\t\\t});\\n\\t}\\n\\n\\tthis.baseType = 'TYPE_SCREEN';\\n\\tthis.game = null;\\n\\tthis.screen = null;\\n\\n\\tthis.__init = function () {\\n\\t\\tthis.proto();\\n\\n\\t\\tif (this.is(pl.game.config('screenSelector'))) {\\n\\t\\t\\tattachBehaviorEvent.call(this);\\n\\t\\t}\\n\\t};\\n\\n\\tthis.start = function () {\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.stop = function () {\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.index = function () {\\n\\t\\tif (this === this.screen) return this.game.screens.indexOf(this);\\n\\t\\treturn this.$els.index();\\n\\t};\\n\\n\\tthis.next = function () {\\n\\t\\tif (!this.completed()) return false;\\n\\t\\treturn this.game.screens[this.screen.index() + 1];\\n\\t};\\n\\n\\tthis.prev = function () {\\n\\t\\treturn this.game.screens[this.screen.index() - 1];\\n\\t};\\n\\n\\tthis.quit = function () {\\n\\t\\tthis.game.quit.open();\\n\\t};\\n\\n\\tthis.nextSib = function () {\\n\\t\\treturn $.fn.next.apply(this.$els, arguments);\\n\\t};\\n\\n\\tthis.prevSib = function () {\\n\\t\\treturn $.fn.prev.apply(this.$els, arguments);\\n\\t};\\n\\n\\tthis.isLast = function () {\\n\\t\\treturn this.game.screens.indexOf(this.screen) === this.game.screens.length - 1;\\n\\t};\\n});\\n\\nexports['default'] = Screen;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvU2NyZWVuLmpzP2U0MTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozt1Q0FNK0MsRUFBYzs7QUFFN0QsSUFBSSxNQUFNLEdBQUcsb0JBQU8sTUFBTSxDQUFDLFlBQVk7O0FBRXRDLFVBQVMsbUJBQW1CLEdBQUk7QUFDL0IsTUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsVUFBVSxNQUFNLEVBQUU7OztBQUdyQyxPQUFJLElBQUksS0FBSyxNQUFNLENBQUMsV0FBVyxFQUFFO0FBQ2hDLHdDQUF1QixJQUFJLEVBQUcsTUFBTSxDQUFDLENBQUM7SUFDdEM7O0FBRUQsT0FBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0dBQy9CLENBQUMsQ0FBQztFQUNIOztBQUVELEtBQUksQ0FBQyxRQUFRLEdBQUcsYUFBYSxDQUFDO0FBQzlCLEtBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLEtBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDOztBQUVuQixLQUFJLENBQUMsTUFBTSxHQUFHLFlBQVk7QUFDekIsTUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDOztBQUViLE1BQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUU7QUFDOUMsc0JBQW1CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQy9CO0VBQ0QsQ0FBQzs7QUFFRixLQUFJLENBQUMsS0FBSyxHQUFHLFlBQVk7QUFDeEIsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDOztBQUVGLEtBQUksQ0FBQyxJQUFJLEdBQUcsWUFBWTtBQUN2QixTQUFPLElBQUksQ0FBQztFQUNaLENBQUM7O0FBRUYsS0FBSSxDQUFDLEtBQUssR0FBRyxZQUFZO0FBQ3hCLE1BQUksSUFBSSxLQUFLLElBQUksQ0FBQyxNQUFNLEVBQUUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakUsU0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0VBQ3pCLENBQUM7O0FBRUYsS0FBSSxDQUFDLElBQUksR0FBRyxZQUFZO0FBQ3ZCLE1BQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUUsT0FBTyxLQUFLLENBQUM7QUFDcEMsU0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2hELENBQUM7O0FBRUYsS0FBSSxDQUFDLElBQUksR0FBRyxZQUFZO0FBQ3ZCLFNBQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQztFQUNoRCxDQUFDOztBQUVGLEtBQUksQ0FBQyxJQUFJLEdBQUcsWUFBWTtBQUN2QixNQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztFQUN0QixDQUFDOztBQUVGLEtBQUksQ0FBQyxPQUFPLEdBQUcsWUFBWTtBQUMxQixTQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0VBQzdDLENBQUM7O0FBRUYsS0FBSSxDQUFDLE9BQU8sR0FBRyxZQUFZO0FBQzFCLFNBQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7RUFDN0MsQ0FBQzs7QUFFRixLQUFJLENBQUMsTUFBTSxHQUFHLFlBQVk7QUFDekIsU0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUM7RUFDN0UsQ0FBQztDQUVGLENBQUMsQ0FBQzs7cUJBRVksTUFBTSIsImZpbGUiOiI0MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuKiAgU2NyZWVuXG4qICBAZGVzYyBDb250YWlucy4uLlxuKiAgQHByb3RvIEVudGl0eVxuKi9cblxuaW1wb3J0IHsgRW50aXR5LCBpbnZva2VSZXNwb25zaWJpbGl0aWVzIH0gZnJvbSAndHlwZXMvRW50aXR5JztcblxudmFyIFNjcmVlbiA9IEVudGl0eS5leHRlbmQoZnVuY3Rpb24gKCkge1xuXG5cdGZ1bmN0aW9uIGF0dGFjaEJlaGF2aW9yRXZlbnQgKCkge1xuXHRcdHRoaXMub24oJ2JlaGF2aW9yJywgZnVuY3Rpb24gKF9ldmVudCkge1xuXHRcdFx0Ly8gY29uc29sZS5sb2coJ1NDUkVFTiBHT1QnLCBfZXZlbnQudGFyZ2V0U2NvcGUuaWQoKSwgX2V2ZW50Lm5hbWUpO1xuXG5cdFx0XHRpZiAodGhpcyAhPT0gX2V2ZW50LnRhcmdldFNjb3BlKSB7XG5cdFx0XHRcdGludm9rZVJlc3BvbnNpYmlsaXRpZXModGhpcywgIF9ldmVudCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMucHJvcGFnYXRlQmVoYXZpb3IoX2V2ZW50KTtcblx0XHR9KTtcblx0fVxuXHRcblx0dGhpcy5iYXNlVHlwZSA9ICdUWVBFX1NDUkVFTic7XG5cdHRoaXMuZ2FtZSA9IG51bGw7XG5cdHRoaXMuc2NyZWVuID0gbnVsbDtcblxuXHR0aGlzLl9faW5pdCA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLnByb3RvKCk7XG5cblx0XHRpZiAodGhpcy5pcyhwbC5nYW1lLmNvbmZpZygnc2NyZWVuU2VsZWN0b3InKSkpIHtcblx0XHRcdGF0dGFjaEJlaGF2aW9yRXZlbnQuY2FsbCh0aGlzKTtcblx0XHR9XG5cdH07XG5cblx0dGhpcy5zdGFydCA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHR0aGlzLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0dGhpcy5pbmRleCA9IGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodGhpcyA9PT0gdGhpcy5zY3JlZW4pIHJldHVybiB0aGlzLmdhbWUuc2NyZWVucy5pbmRleE9mKHRoaXMpO1xuXHRcdHJldHVybiB0aGlzLiRlbHMuaW5kZXgoKTtcblx0fTtcblxuXHR0aGlzLm5leHQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKCF0aGlzLmNvbXBsZXRlZCgpKSByZXR1cm4gZmFsc2U7XG5cdFx0cmV0dXJuIHRoaXMuZ2FtZS5zY3JlZW5zW3RoaXMuc2NyZWVuLmluZGV4KCkrMV07XG5cdH07XG5cblx0dGhpcy5wcmV2ID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLmdhbWUuc2NyZWVuc1t0aGlzLnNjcmVlbi5pbmRleCgpLTFdO1xuXHR9O1xuXG5cdHRoaXMucXVpdCA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLmdhbWUucXVpdC5vcGVuKCk7XG5cdH07XG5cblx0dGhpcy5uZXh0U2liID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiAkLmZuLm5leHQuYXBwbHkodGhpcy4kZWxzLCBhcmd1bWVudHMpO1xuXHR9O1xuXG5cdHRoaXMucHJldlNpYiA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gJC5mbi5wcmV2LmFwcGx5KHRoaXMuJGVscywgYXJndW1lbnRzKTtcblx0fTtcblxuXHR0aGlzLmlzTGFzdCA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5nYW1lLnNjcmVlbnMuaW5kZXhPZih0aGlzLnNjcmVlbikgPT09IHRoaXMuZ2FtZS5zY3JlZW5zLmxlbmd0aC0xO1xuXHR9O1xuXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgU2NyZWVuO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zb3VyY2UvdHlwZXMvU2NyZWVuLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _Object$defineProperties = __webpack_require__(6)['default'];\\n\\nvar _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Node scope for the top level game node.\\n */\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _playGame = __webpack_require__(16);\\n\\nvar _playGame2 = _interopRequireDefault(_playGame);\\n\\nvar _typesGlobalScope = __webpack_require__(22);\\n\\nvar _typesGlobalScope2 = _interopRequireDefault(_typesGlobalScope);\\n\\nvar _typesScreen = __webpack_require__(40);\\n\\nvar _typesScreen2 = _interopRequireDefault(_typesScreen);\\n\\nvar _typesCollection = __webpack_require__(21);\\n\\nvar _typesCollection2 = _interopRequireDefault(_typesCollection);\\n\\nvar _typesScope = __webpack_require__(23);\\n\\nvar _typesDimensions = __webpack_require__(5);\\n\\nvar Game = _typesGlobalScope2['default'].extend(function () {\\n\\n\\tvar Viewport, screenPrototype, platformEventHandler;\\n\\n\\t/**\\n  * Scales the game view to fill the browser window.\\n  */\\n\\tfunction scaleGame() {\\n\\t\\tvar vpSize, gameDimensions, width, height, zoom;\\n\\n\\t\\tvpSize = this.viewport.size();\\n\\t\\tgameDimensions = _playGame2['default'].config('dimensions');\\n\\t\\twidth = gameDimensions.width || this.width();\\n\\t\\theight = Math.round(gameDimensions.width / gameDimensions.ratio);\\n\\t\\tzoom = this.viewport.width / width;\\n\\n\\t\\tif (Math.round(height * zoom) > this.viewport.height) {\\n\\t\\t\\tzoom = (this.viewport.height / height).toPrecision(4);\\n\\t\\t}\\n\\n\\t\\t_util2['default'].mixin(this.node().style, {\\n\\t\\t\\twidth: width + 'px',\\n\\t\\t\\tzoom: zoom\\n\\t\\t});\\n\\n\\t\\tif (!this.css('zoom')) {\\n\\t\\t\\tthis.css({\\n\\t\\t\\t\\ttransform: 'scale(' + zoom + ')',\\n\\t\\t\\t\\ttransformOrigin: (zoom < 1 ? '0px' : '50%') + ' 0px 0px',\\n\\t\\t\\t\\theight: this.viewport.height / zoom\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tthis.zoom = zoom;\\n\\t}\\n\\n\\tfunction demoMode(_set) {\\n\\t\\tthis.demoMode = _set != null ? _set : !this.demoMode;\\n\\t\\tthis[this.demoMode ? 'addClass' : 'removeClass']('DEMO');\\n\\n\\t\\tconsole.info(this.id(), 'is now ' + (this.demoMode ? 'in' : 'out of') + ' Demo Mode.');\\n\\t}\\n\\n\\tscreenPrototype = _typesScreen2['default'];\\n\\tplatformEventHandler = new function () {\\n\\n\\t\\tthis.invoke = function (_event, _ctx) {\\n\\t\\t\\tif (typeof this[_event.name] === 'function') {\\n\\t\\t\\t\\tthis[_event.name].call(_ctx, _event);\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\tthis['toggle-demo-mode'] = function (_set) {\\n\\t\\t\\tdemoMode.call(this);\\n\\t\\t};\\n\\t}();\\n\\n\\tthis.baseType = 'TYPE_GAME';\\n\\tthis.screens = null;\\n\\tthis.zoom = 1;\\n\\tthis.keyCommands = null;\\n\\tthis.demoMode = false;\\n\\tthis.viewport = new function () {\\n\\t\\tvar vp, $html, RESIZE_HANDLERS;\\n\\n\\t\\tvp = this;\\n\\t\\t$html = $('html');\\n\\t\\tRESIZE_HANDLERS = [];\\n\\n\\t\\t$(window).on('resize', function (_event) {\\n\\t\\t\\tif (!$html.hasClass(vp.orientation)) {\\n\\t\\t\\t\\t$html.removeClass('squareish landscape protrait').addClass(vp.orientation);\\n\\t\\t\\t}\\n\\n\\t\\t\\tRESIZE_HANDLERS.forEach(function (_handler) {\\n\\t\\t\\t\\t_handler(_event);\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\tthis.LANDSCAPE = 'landscape';\\n\\t\\tthis.PROTRAIT = 'protrait';\\n\\t\\tthis.SQUAREISH = 'squareish';\\n\\n\\t\\tthis.size = function () {\\n\\t\\t\\treturn _typesDimensions.Size.create().set(window.innerWidth, window.innerHeight);\\n\\t\\t};\\n\\n\\t\\t_Object$defineProperties(this, {\\n\\t\\t\\twidth: {\\n\\t\\t\\t\\tget: function get() {\\n\\t\\t\\t\\t\\treturn window.innerWidth;\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\tconfigurable: false\\n\\t\\t\\t},\\n\\n\\t\\t\\theight: {\\n\\t\\t\\t\\tget: function get() {\\n\\t\\t\\t\\t\\treturn window.innerHeight;\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\tconfigurable: false\\n\\t\\t\\t},\\n\\n\\t\\t\\torientation: {\\n\\t\\t\\t\\tget: function get() {\\n\\t\\t\\t\\t\\tvar ratio = this.size().ratio();\\n\\n\\t\\t\\t\\t\\tswitch (true) {\\n\\t\\t\\t\\t\\t\\tcase ratio > 0.9 && ratio < 1.1:\\n\\t\\t\\t\\t\\t\\t\\treturn 'squareish';\\n\\t\\t\\t\\t\\t\\tcase ratio > 1.1:\\n\\t\\t\\t\\t\\t\\t\\treturn 'landscape';\\n\\t\\t\\t\\t\\t\\tcase ratio < 0.9:\\n\\t\\t\\t\\t\\t\\t\\treturn 'protrait';\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tthis.onResize = function (_handler) {\\n\\t\\t\\tRESIZE_HANDLERS.push(_handler);\\n\\t\\t};\\n\\n\\t\\tthis.offResize = function (_handler) {\\n\\t\\t\\tvar index = RESIZE_HANDLERS.indexOf(_handler);\\n\\n\\t\\t\\tif (~index) RESIZE_HANDLERS.splice(index, 1);\\n\\t\\t};\\n\\n\\t\\t$html.addClass(this.orientation);\\n\\t}();;\\n\\n\\tthis.willInit = function () {\\n\\t\\tthis.addClass('pl-game');\\n\\n\\t\\tscaleGame.call(this);\\n\\t\\tthis.captureScreens();\\n\\t\\tthis.watchAudio();\\n\\n\\t\\tthis.viewport.onResize(this.bind(scaleGame));\\n\\n\\t\\tpl.game.on('platform-event', this.bind(function (_event) {\\n\\t\\t\\tplatformEventHandler.invoke(_event, this);\\n\\t\\t}));\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * Watch for specific keys or combination of keys. NOTE: meta key commands DO NOT support chords (i.e. meta+K,B).\\n  * ### Key Names\\n  * - *meta*: Command (aka Apple ⌘ or win)\\n  * - *alt*: Alt (aka Option ⌥)\\n  * - *shift*: Shift ⇪\\n  * - *ctrl*: Control ^\\n  * - *enter*: Enter or Return\\n  * - *esc*: Escape\\n  * - *left*: Left arrow\\n  * - *up*: Up arrow\\n  * - *right*: Right arrow\\n  * - *down*: Down arrow\\n  *\\n  * ### Example\\n  * ```javascript\\n  * // Overriding print.\\n  * this.game.onKeys('cmd+P', printHandler);\\n  *\\n  * // Holding Control and pressing \\\"K\\\" then \\\"B\\\"\\n  * this.game.onKeys('ctrl+K,B', handler);\\n  * ```\\n  * @arg {string} _commands - The key or sequence of keys.\\n  * @arg {function} _handler - Your event handler for when you key pattern is matched.\\n  * @returns `this`\\n  */\\n\\tthis.onKeys = function (_commands, _handler) {\\n\\t\\tvar sequence, chords, modifiers, map;\\n\\n\\t\\tif (!this.keyCommands) {\\n\\t\\t\\tthis.keyCommands = {};\\n\\n\\t\\t\\tmap = {\\n\\t\\t\\t\\t13: 'enter',\\n\\t\\t\\t\\t16: 'shift',\\n\\t\\t\\t\\t17: 'ctrl',\\n\\t\\t\\t\\t18: 'alt',\\n\\t\\t\\t\\t27: 'esc',\\n\\t\\t\\t\\t37: 'left',\\n\\t\\t\\t\\t38: 'up',\\n\\t\\t\\t\\t39: 'right',\\n\\t\\t\\t\\t40: 'down',\\n\\t\\t\\t\\t91: 'meta',\\n\\t\\t\\t\\tenter: 13,\\n\\t\\t\\t\\tshift: 16,\\n\\t\\t\\t\\tctrl: 17,\\n\\t\\t\\t\\talt: 18,\\n\\t\\t\\t\\tesc: 27,\\n\\t\\t\\t\\tleft: 37,\\n\\t\\t\\t\\tup: 38,\\n\\t\\t\\t\\tright: 39,\\n\\t\\t\\t\\tdown: 40,\\n\\t\\t\\t\\tmeta: 91\\n\\t\\t\\t};\\n\\n\\t\\t\\tmodifiers = [16, 17, 18, 91];\\n\\t\\t\\tsequence = [];\\n\\t\\t\\tchords = [];\\n\\n\\t\\t\\tthis.on('keydown', function (_event) {\\n\\t\\t\\t\\tvar modifier, key, eventMods, currentMods, command, handler;\\n\\n\\t\\t\\t\\tmodifier = !! ~modifiers.indexOf(_event.keyCode) && map[_event.keyCode];\\n\\t\\t\\t\\tkey = modifier ? modifier : map[_event.keyCode] || String.fromCharCode(_event.keyCode);\\n\\t\\t\\t\\teventMods = [_event.shiftKey, _event.ctrlKey, _event.altKey, _event.metaKey];\\n\\t\\t\\t\\tcurrentMods = [];\\n\\n\\t\\t\\t\\t// Collect the modifiers the event says are still down.\\n\\t\\t\\t\\teventMods.forEach(function (_modifierDown, _index) {\\n\\t\\t\\t\\t\\t// use the modifier name\\n\\t\\t\\t\\t\\tif (_modifierDown) currentMods.push(map[modifiers[_index]]);\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\t// Don't add keys we already have during rapid-fire events\\n\\t\\t\\t\\tif (~chords.indexOf(key) || ~sequence.indexOf(key)) return;\\n\\n\\t\\t\\t\\t// Construct the command\\n\\t\\t\\t\\tcommand = chords.length ? (chords.push(key), chords.join(',')) : (sequence.push(key), sequence.join('+'));\\n\\n\\t\\t\\t\\thandler = this.keyCommands[command];\\n\\n\\t\\t\\t\\tif (handler) {\\n\\t\\t\\t\\t\\thandler.call(this, _event, command);\\n\\t\\t\\t\\t\\t// Keep current modifiers.\\n\\t\\t\\t\\t\\tsequence = currentMods.map(function (_key, _index) {\\n\\t\\t\\t\\t\\t\\tvar key = sequence[_index];\\n\\t\\t\\t\\t\\t\\treturn currentMods[currentMods.indexOf(key)];\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\tchords = [];\\n\\n\\t\\t\\t\\t\\t// Override original key command (i.e. meta+Q).\\n\\t\\t\\t\\t\\t_event.preventDefault();\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\n\\t\\t\\tthis.on('keyup', function (_event) {\\n\\t\\t\\t\\tvar key, index, modifier, eventMods, currentMods;\\n\\n\\t\\t\\t\\tkey = modifier ? modifier : map[_event.keyCode] || String.fromCharCode(_event.keyCode);\\n\\t\\t\\t\\tindex = sequence.indexOf(key);\\n\\t\\t\\t\\tmodifier = !! ~modifiers.indexOf(_event.keyCode) && map[_event.keyCode];\\n\\t\\t\\t\\t// Follows the same index order as \\\"modifiers\\\" [16, 17, 18, 91]\\n\\t\\t\\t\\teventMods = [_event.shiftKey, _event.ctrlKey, _event.altKey, _event.metaKey];\\n\\t\\t\\t\\tcurrentMods = [];\\n\\n\\t\\t\\t\\t// Collect the modifiers the event says are still down.\\n\\t\\t\\t\\teventMods.forEach(function (_modifierDown, _index) {\\n\\t\\t\\t\\t\\t// use the modifier name\\n\\t\\t\\t\\t\\tif (_modifierDown) currentMods.push(map[modifiers[_index]]);\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\t// If the key released is a modifier...\\n\\t\\t\\t\\tif (key === modifier) {\\n\\t\\t\\t\\t\\t// ...keep current modifiers...\\n\\t\\t\\t\\t\\tsequence = currentMods.map(function (_key, _index) {\\n\\t\\t\\t\\t\\t\\tvar key = sequence[_index];\\n\\t\\t\\t\\t\\t\\treturn currentMods[currentMods.indexOf(key)];\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t// ...clear registered chords.\\n\\t\\t\\t\\t\\tchords = [];\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// If we had pressed more than one key...\\n\\t\\t\\t\\t\\tif (sequence.length > 1) {\\n\\t\\t\\t\\t\\t\\t// Check if the first is a modifier then switch to chord capturing\\n\\t\\t\\t\\t\\t\\tif (~modifiers.indexOf(map[sequence[0]])) {\\n\\t\\t\\t\\t\\t\\t\\tchords.push(sequence.join('+'));\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tif (~index) sequence.splice(index, 1);\\n\\t\\t\\t\\t\\tif (!sequence.length) chords = [];\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tthis.keyCommands[_commands] = _handler;\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.screen = function (_id, _implementation) {\\n\\t\\tvar prototype, selector, screenSelector, instance;\\n\\n\\t\\tif (arguments.length === 1 && typeof _id === 'function') {\\n\\t\\t\\tscreenPrototype = _typesScreen2['default'].extend(_id);\\n\\t\\t\\treturn this;\\n\\t\\t}\\n\\n\\t\\tif (!this.hasOwnProperty('screens')) this.screens = _typesCollection2['default'].create();\\n\\n\\t\\tif (this.hasOwnProperty('$els')) {\\n\\t\\t\\tdebugger;\\n\\t\\t\\tscreenSelector = pl.game.config('screenSelector');\\n\\t\\t\\tprototype = screenPrototype.isPrototypeOf(this) ? this : screenPrototype;\\n\\t\\t\\tselector = typeof _id === 'number' ? screenSelector + ':nth-child(' + (_id + 1) + ')' : '#' + _id;\\n\\t\\t\\tinstance = prototype.extend(_implementation).initialize(this.find(selector));\\n\\n\\t\\t\\tinstance.screen = instance;\\n\\t\\t\\tif (!instance.game) {\\n\\t\\t\\t\\tinstance.game = instance.closest('.pl-game').scope();\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tthis.screens.push({\\n\\t\\t\\t\\tindex: typeof _id === 'number' ? _id : null,\\n\\t\\t\\t\\tname: typeof _id === 'string' ? _id : null,\\n\\t\\t\\t\\timplementation: _implementation\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.captureScreens = function () {\\n\\t\\tvar screenSelector, prototype, collection;\\n\\n\\t\\tscreenSelector = pl.game.config('screenSelector');\\n\\t\\tprototype = screenPrototype.isPrototypeOf(this) ? this : screenPrototype;\\n\\t\\tcollection = [];\\n\\n\\t\\tthis.findOwn(screenSelector).each(this.bind(function (_index, _node) {\\n\\t\\t\\tvar $node, screen, record, key, id, index, component;\\n\\n\\t\\t\\t$node = $(_node);\\n\\t\\t\\tid = $node.id();\\n\\t\\t\\tkey = id ? 'name' : (id = _index, 'index');\\n\\t\\t\\trecord = this.screens && this.screens.get(id, key);\\n\\t\\t\\tcomponent = $node.attr('pl-component');\\n\\t\\t\\tscreen = _typesScope.createEntity.call(prototype, $node, record && record.implementation);\\n\\t\\t\\tscreen.screen = screen;\\n\\t\\t\\tscreen.game = this;\\n\\n\\t\\t\\tif ($node.attr('pl-skip') == null) collection.push(screen);\\n\\n\\t\\t\\tif (key === 'name' || component) {\\n\\t\\t\\t\\t_util2['default'].assignRef(this, _util2['default'].transformId(key === 'name' && id || component, true), screen);\\n\\t\\t\\t}\\n\\t\\t}));\\n\\n\\t\\tif (collection.length) this.screens = collection;\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.watchAudio = function () {\\n\\t\\tvar playing;\\n\\n\\t\\tfunction deQueue(_scope, _item) {\\n\\t\\t\\t[_scope, _scope.screen].forEach(function (_scope) {\\n\\t\\t\\t\\tif (_scope.requiredQueue && _scope.isMemberSafe('requiredQueue') && _scope.requiredQueue.has(_item)) {\\n\\t\\t\\t\\t\\t_scope.requiredQueue.ready(_item);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tplaying = _typesCollection2['default'].create();\\n\\n\\t\\tthis.on('audio-play', function (_event) {\\n\\t\\t\\tvar current, bgMusic;\\n\\n\\t\\t\\tif (_event.audioType !== 'sfx') {\\n\\t\\t\\t\\tcurrent = playing.filter(_event.audioType, 'type');\\n\\t\\t\\t\\tbgMusic = playing.filter('background', 'type');\\n\\n\\t\\t\\t\\tif (current) {\\n\\t\\t\\t\\t\\tcurrent.forEach(function (_record) {\\n\\t\\t\\t\\t\\t\\t_record.audio.pause();\\n\\t\\t\\t\\t\\t\\t_record.audio.currentTime = 0;\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (_event.audioType === 'voice-over') {\\n\\t\\t\\t\\t\\tif (bgMusic) bgMusic.forEach(function (_record) {\\n\\t\\t\\t\\t\\t\\t_record.audio.volume = 0.2;\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tplaying.push({\\n\\t\\t\\t\\taudio: _event.target,\\n\\t\\t\\t\\ttype: _event.audioType\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\tthis.on('audio-ended audio-pause', function (_event) {\\n\\t\\t\\tvar current, scope, bgMusic;\\n\\n\\t\\t\\tcurrent = playing.get(_event.target, 'audio');\\n\\t\\t\\tscope = $(_event.target).scope();\\n\\t\\t\\tbgMusic = playing.filter('background', 'type');\\n\\n\\t\\t\\tplaying.remove(current);\\n\\t\\t\\tdeQueue(scope, _event.target);\\n\\n\\t\\t\\tif (_event.audioType === 'voice-over' && !playing.get('voice-over', 'type')) {\\n\\t\\t\\t\\tif (bgMusic) bgMusic.forEach(function (_record) {\\n\\t\\t\\t\\t\\t_record.audio.volume = 1;\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t};\\n\\n\\tthis.progress = function () {\\n\\t\\treturn {\\n\\t\\t\\tcurrentScreen: this.currentScreen().index()\\n\\t\\t};\\n\\t};\\n\\n\\tthis.currentScreen = function () {\\n\\t\\treturn this.findOwn(pl.game.config('screenSelector') + '.OPEN').not('#quit').scope();\\n\\t};\\n\\n\\tthis.flip = function () {\\n\\t\\tconsole.log('THATS A FLIP!');\\n\\t\\t_playGame2['default'].report.flip(this);\\n\\t};\\n\\n\\tthis.exit = function () {\\n\\t\\tconsole.log('GOODBYE!');\\n\\t\\t_playGame2['default'].report.exit(this);\\n\\t};\\n\\n\\t/**\\n  * Demo mode key command\\n  */\\n\\tthis.onKeys('ctrl+D,M', function () {\\n\\t\\tdemoMode.call(this);\\n\\t});\\n\\n\\t/**\\n  * Keyboard screen navigation\\n  */\\n\\tthis.onKeys('left', function () {\\n\\t\\tvar current;\\n\\n\\t\\tcurrent = this.currentScreen();\\n\\n\\t\\tif (current) current.prev();\\n\\t});\\n\\n\\tthis.onKeys('right', function () {\\n\\t\\tvar current;\\n\\n\\t\\tcurrent = this.currentScreen();\\n\\n\\t\\tif (current) current.next();\\n\\t});\\n});\\n\\nexports['default'] = Game;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvR2FtZS5qcz9hOTc1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztnQ0FHaUIsRUFBTTs7OztvQ0FDTixFQUFXOzs7OzRDQUNKLEVBQW1COzs7O3VDQUN4QixFQUFjOzs7OzJDQUNWLEVBQWtCOzs7O3NDQUNaLEVBQWE7OzJDQUNyQixDQUFrQjs7QUFFdkMsSUFBSSxJQUFJLEdBQUcsOEJBQVksTUFBTSxDQUFDLFlBQVk7O0FBRXpDLEtBQUksUUFBUSxFQUFFLGVBQWUsRUFBRSxvQkFBb0IsQ0FBQzs7Ozs7QUFLcEQsVUFBUyxTQUFTLEdBQUk7QUFDckIsTUFBSSxNQUFNLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDOztBQUVoRCxRQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUM5QixnQkFBYyxHQUFHLHNCQUFLLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUMzQyxPQUFLLEdBQUcsY0FBYyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDN0MsUUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEtBQUssR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDakUsTUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQzs7QUFFbkMsTUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRTtBQUNyRCxPQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQ3REOztBQUVELG9CQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxF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RyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7O0FBRS9CLE1BQUksT0FBTyxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztFQUM1QixDQUFDLENBQUM7Q0FFSCxDQUFDLENBQUM7O3FCQUVZLElBQUkiLCJmaWxlIjoiNDEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE5vZGUgc2NvcGUgZm9yIHRoZSB0b3AgbGV2ZWwgZ2FtZSBub2RlLlxuICovXG5pbXBvcnQgdXRpbCBmcm9tICd1dGlsJztcbmltcG9ydCBnYW1lIGZyb20gJ3BsYXkuZ2FtZSc7XG5pbXBvcnQgR2xvYmFsU2NvcGUgZnJvbSAndHlwZXMvR2xvYmFsU2NvcGUnO1xuaW1wb3J0IFNjcmVlbiBmcm9tICd0eXBlcy9TY3JlZW4nO1xuaW1wb3J0IENvbGxlY3Rpb24gZnJvbSAndHlwZXMvQ29sbGVjdGlvbic7XG5pbXBvcnQgeyBjcmVhdGVFbnRpdHkgfSBmcm9tICd0eXBlcy9TY29wZSc7XG5pbXBvcnQgeyBTaXplIH0gZnJvbSAndHlwZXMvRGltZW5zaW9ucyc7XG5cbnZhciBHYW1lID0gR2xvYmFsU2NvcGUuZXh0ZW5kKGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgVmlld3BvcnQsIHNjcmVlblByb3RvdHlwZSwgcGxhdGZvcm1FdmVudEhhbmRsZXI7XG5cblx0LyoqXG5cdCAqIFNjYWxlcyB0aGUgZ2FtZSB2aWV3IHRvIGZpbGwgdGhlIGJyb3dzZXIgd2luZG93LlxuXHQgKi9cblx0ZnVuY3Rpb24gc2NhbGVHYW1lICgpIHtcblx0XHR2YXIgdnBTaXplLCBnYW1lRGltZW5zaW9ucywgd2lkdGgsIGhlaWdodCwgem9vbTtcblxuXHRcdHZwU2l6ZSA9IHRoaXMudmlld3BvcnQuc2l6ZSgpO1xuXHRcdGdhbWVEaW1lbnNpb25zID0gZ2FtZS5jb25maWcoJ2RpbWVuc2lvbnMnKTtcblx0XHR3aWR0aCA9IGdhbWVEaW1lbnNpb25zLndpZHRoIHx8IHRoaXMud2lkdGgoKTtcblx0XHRoZWlnaHQgPSBNYXRoLnJvdW5kKGdhbWVEaW1lbnNpb25zLndpZHRoIC8gZ2FtZURpbWVuc2lvbnMucmF0aW8pO1xuXHRcdHpvb20gPSB0aGlzLnZpZXdwb3J0LndpZHRoIC8gd2lkdGg7XG5cblx0XHRpZiAoTWF0aC5yb3VuZChoZWlnaHQgKiB6b29tKSA+IHRoaXMudmlld3BvcnQuaGVpZ2h0KSB7XG5cdFx0XHR6b29tID0gKHRoaXMudmlld3BvcnQuaGVpZ2h0IC8gaGVpZ2h0KS50b1ByZWNpc2lvbig0KTtcblx0XHR9XG5cblx0XHR1dGlsLm1peGluKHRoaXMubm9kZSgpLnN0eWxlLCB7XG5cdFx0XHR3aWR0aDogd2lkdGgrJ3B4Jyxcblx0XHRcdHpvb206IHpvb21cblx0XHR9KTtcblxuXHRcdGlmICghdGhpcy5jc3MoJ3pvb20nKSkge1xuXHRcdFx0dGhpcy5jc3Moe1xuXHRcdFx0XHR0cmFuc2Zvcm06ICdzY2FsZSgnK3pvb20rJyknLFxuXHRcdFx0XHR0cmFuc2Zvcm1PcmlnaW46ICh6b29tIDwgMSA/ICcwcHgnIDogJzUwJScpKycgMHB4IDBweCcsXG5cdFx0XHRcdGhlaWdodDogdGhpcy52aWV3cG9ydC5oZWlnaHQgLyB6b29tXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHR0aGlzLnpvb20gPSB6b29tO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGVtb01vZGUgKF9zZXQpIHtcblx0XHR0aGlzLmRlbW9Nb2RlID0gX3NldCAhPSBudWxsID8gX3NldCA6ICF0aGlzLmRlbW9Nb2RlO1xuXHRcdHRoaXNbdGhpcy5kZW1vTW9kZSA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXSgnREVNTycpO1xuXG5cdFx0Y29uc29sZS5pbmZvKHRoaXMuaWQoKSwgJ2lzIG5vdyAnKyh0aGlzLmRlbW9Nb2RlID8gJ2luJyA6ICdvdXQgb2YnKSsnIERlbW8gTW9kZS4nKTtcblx0fVxuXG5cdHNjcmVlblByb3RvdHlwZSA9IFNjcmVlbjtcblx0cGxhdGZvcm1FdmVudEhhbmRsZXIgPSBuZXcgKGZ1bmN0aW9uICgpIHtcblx0XHRcblx0XHR0aGlzLmludm9rZSA9IGZ1bmN0aW9uIChfZXZlbnQsIF9jdHgpIHtcblx0XHRcdGlmICh0eXBlb2YgdGhpc1tfZXZlbnQubmFtZV0gPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0dGhpc1tfZXZlbnQubmFtZV0uY2FsbChfY3R4LCBfZXZlbnQpO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR0aGlzWyd0b2dnbGUtZGVtby1tb2RlJ10gPSBmdW5jdGlvbiAoX3NldCkge1xuXHRcdFx0ZGVtb01vZGUuY2FsbCh0aGlzKTtcblx0XHR9O1xuXHR9KTtcblxuXHR0aGlzLmJhc2VUeXBlID0gJ1RZUEVfR0FNRSc7XG5cdHRoaXMuc2NyZWVucyA9IG51bGw7XG5cdHRoaXMuem9vbSA9IDE7XG5cdHRoaXMua2V5Q29tbWFuZHMgPSBudWxsO1xuXHR0aGlzLmRlbW9Nb2RlID0gZmFsc2U7XG5cdHRoaXMudmlld3BvcnQgPSBuZXcgKGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgdnAsICRodG1sLCBSRVNJWkVfSEFORExFUlM7XG5cblx0XHR2cCA9IHRoaXM7XG5cdFx0JGh0bWwgPSAkKCdodG1sJyk7XG5cdFx0UkVTSVpFX0hBTkRMRVJTID0gW107XG5cblx0XHQkKHdpbmRvdykub24oJ3Jlc2l6ZScsIGZ1bmN0aW9uIChfZXZlbnQpIHtcblx0XHRcdGlmICghJGh0bWwuaGFzQ2xhc3ModnAub3JpZW50YXRpb24pKSB7XG5cdFx0XHRcdCRodG1sXG5cdFx0XHRcdFx0LnJlbW92ZUNsYXNzKCdzcXVhcmVpc2ggbGFuZHNjYXBlIHByb3RyYWl0Jylcblx0XHRcdFx0XHQuYWRkQ2xhc3ModnAub3JpZW50YXRpb24pO1xuXHRcdFx0fVxuXG5cdFx0XHRSRVNJWkVfSEFORExFUlMuZm9yRWFjaChmdW5jdGlvbiAoX2hhbmRsZXIpIHtcblx0XHRcdFx0X2hhbmRsZXIoX2V2ZW50KTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXG5cdFx0dGhpcy5MQU5EU0NBUEUgPSAnbGFuZHNjYXBlJztcblx0XHR0aGlzLlBST1RSQUlUID0gJ3Byb3RyYWl0Jztcblx0XHR0aGlzLlNRVUFSRUlTSCA9ICdzcXVhcmVpc2gnO1xuXHRcdFxuXHRcdHRoaXMuc2l6ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBTaXplLmNyZWF0ZSgpLnNldCh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcblx0XHR9O1xuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuXHRcdFx0d2lkdGg6IHtcblx0XHRcdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHdpbmRvdy5pbm5lcldpZHRoO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2Vcblx0XHRcdH0sXG5cblx0XHRcdGhlaWdodDoge1xuXHRcdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRyZXR1cm4gd2luZG93LmlubmVySGVpZ2h0O1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2Vcblx0XHRcdH0sXG5cblx0XHRcdG9yaWVudGF0aW9uOiB7XG5cdFx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdHZhciByYXRpbyA9IHRoaXMuc2l6ZSgpLnJhdGlvKCk7XG5cblx0XHRcdFx0XHRzd2l0Y2ggKHRydWUpIHtcblx0XHRcdFx0XHRcdGNhc2UgcmF0aW8gPiAwLjkgJiYgcmF0aW8gPCAxLjE6IHJldHVybiAnc3F1YXJlaXNoJztcblx0XHRcdFx0XHRcdGNhc2UgcmF0aW8gPiAxLjE6IHJldHVybiAnbGFuZHNjYXBlJztcblx0XHRcdFx0XHRcdGNhc2UgcmF0aW8gPCAwLjk6IHJldHVybiAncHJvdHJhaXQnO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0dGhpcy5vblJlc2l6ZSA9IGZ1bmN0aW9uIChfaGFuZGxlcikge1xuXHRcdFx0UkVTSVpFX0hBTkRMRVJTLnB1c2goX2hhbmRsZXIpO1xuXHRcdH07XG5cblx0XHR0aGlzLm9mZlJlc2l6ZSA9IGZ1bmN0aW9uIChfaGFuZGxlcikge1xuXHRcdFx0dmFyIGluZGV4ID0gUkVTSVpFX0hBTkRMRVJTLmluZGV4T2YoX2hhbmRsZXIpO1xuXG5cdFx0XHRpZiAofmluZGV4KSBSRVNJWkVfSEFORExFUlMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHR9O1xuXG5cdFx0JGh0bWwuYWRkQ2xhc3ModGhpcy5vcmllbnRhdGlvbik7XG5cblx0fSk7O1xuXG5cdHRoaXMud2lsbEluaXQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5hZGRDbGFzcygncGwtZ2FtZScpO1xuXG5cdFx0c2NhbGVHYW1lLmNhbGwodGhpcyk7XG5cdFx0dGhpcy5jYXB0dXJlU2NyZWVucygpO1xuXHRcdHRoaXMud2F0Y2hBdWRpbygpO1xuXG5cdFx0dGhpcy52aWV3cG9ydC5vblJlc2l6ZSh0aGlzLmJpbmQoc2NhbGVHYW1lKSk7XG5cblx0XHRwbC5nYW1lLm9uKCdwbGF0Zm9ybS1ldmVudCcsIHRoaXMuYmluZChmdW5jdGlvbiAoX2V2ZW50KSB7XG5cdFx0XHRwbGF0Zm9ybUV2ZW50SGFuZGxlci5pbnZva2UoX2V2ZW50LCB0aGlzKTtcblx0XHR9KSk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvKipcblx0ICogV2F0Y2ggZm9yIHNwZWNpZmljIGtleXMgb3IgY29tYmluYXRpb24gb2Yga2V5cy4gTk9URTogbWV0YSBrZXkgY29tbWFuZHMgRE8gTk9UIHN1cHBvcnQgY2hvcmRzIChpLmUuIG1ldGErSyxCKS5cblx0ICogIyMjIEtleSBOYW1lc1xuXHQgKiAtICptZXRhKjogQ29tbWFuZCAoYWthIEFwcGxlIOKMmCBvciB3aW4pXG5cdCAqIC0gKmFsdCo6IEFsdCAoYWthIE9wdGlvbiDijKUpXG5cdCAqIC0gKnNoaWZ0KjogU2hpZnQg4oeqXG5cdCAqIC0gKmN0cmwqOiBDb250cm9sIF5cblx0ICogLSAqZW50ZXIqOiBFbnRlciBvciBSZXR1cm5cblx0ICogLSAqZXNjKjogRXNjYXBlXG5cdCAqIC0gKmxlZnQqOiBMZWZ0IGFycm93XG5cdCAqIC0gKnVwKjogVXAgYXJyb3dcblx0ICogLSAqcmlnaHQqOiBSaWdodCBhcnJvd1xuXHQgKiAtICpkb3duKjogRG93biBhcnJvd1xuXHQgKlxuXHQgKiAjIyMgRXhhbXBsZVxuXHQgKiBgYGBqYXZhc2NyaXB0XG5cdCAqIC8vIE92ZXJyaWRpbmcgcHJpbnQuXG5cdCAqIHRoaXMuZ2FtZS5vbktleXMoJ2NtZCtQJywgcHJpbnRIYW5kbGVyKTtcblx0ICpcblx0ICogLy8gSG9sZGluZyBDb250cm9sIGFuZCBwcmVzc2luZyBcIktcIiB0aGVuIFwiQlwiXG5cdCAqIHRoaXMuZ2FtZS5vbktleXMoJ2N0cmwrSyxCJywgaGFuZGxlcik7XG5cdCAqIGBgYFxuXHQgKiBAYXJnIHtzdHJpbmd9IF9jb21tYW5kcyAtIFRoZSBrZXkgb3Igc2VxdWVuY2Ugb2Yga2V5cy5cblx0ICogQGFyZyB7ZnVuY3Rpb259IF9oYW5kbGVyIC0gWW91ciBldmVudCBoYW5kbGVyIGZvciB3aGVuIHlvdSBrZXkgcGF0dGVybiBpcyBtYXRjaGVkLlxuXHQgKiBAcmV0dXJucyBgdGhpc2Bcblx0ICovXG5cdHRoaXMub25LZXlzID0gZnVuY3Rpb24gKF9jb21tYW5kcywgX2hhbmRsZXIpIHtcblx0XHR2YXIgc2VxdWVuY2UsIGNob3JkcywgbW9kaWZpZXJzLCBtYXA7XG5cblx0XHRpZiAoIXRoaXMua2V5Q29tbWFuZHMpIHtcblx0XHRcdHRoaXMua2V5Q29tbWFuZHMgPSB7fTtcblxuXHRcdFx0bWFwID0ge1xuXHRcdFx0XHQxMzogJ2VudGVyJyxcblx0XHRcdFx0MTY6ICdzaGlmdCcsXG5cdFx0XHRcdDE3OiAnY3RybCcsXG5cdFx0XHRcdDE4OiAnYWx0Jyxcblx0XHRcdFx0Mjc6ICdlc2MnLFxuXHRcdFx0XHQzNzogJ2xlZnQnLFxuXHRcdFx0XHQzODogJ3VwJyxcblx0XHRcdFx0Mzk6ICdyaWdodCcsXG5cdFx0XHRcdDQwOiAnZG93bicsXG5cdFx0XHRcdDkxOiAnbWV0YScsXG5cdFx0XHRcdGVudGVyOiAxMyxcblx0XHRcdFx0c2hpZnQ6IDE2LFxuXHRcdFx0XHRjdHJsIDogMTcsXG5cdFx0XHRcdGFsdCAgOiAxOCxcblx0XHRcdFx0ZXNjICA6IDI3LFxuXHRcdFx0XHRsZWZ0IDogMzcsXG5cdFx0XHRcdHVwICAgOiAzOCxcblx0XHRcdFx0cmlnaHQ6IDM5LFxuXHRcdFx0XHRkb3duIDogNDAsXG5cdFx0XHRcdG1ldGEgOiA5MVxuXHRcdFx0fTtcblxuXHRcdFx0bW9kaWZpZXJzID0gWzE2LCAxNywgMTgsIDkxXTtcblx0XHRcdHNlcXVlbmNlID0gW107XG5cdFx0XHRjaG9yZHMgPSBbXTtcblxuXHRcdFx0dGhpcy5vbigna2V5ZG93bicsIGZ1bmN0aW9uIChfZXZlbnQpIHtcblx0XHRcdFx0dmFyIG1vZGlmaWVyLCBrZXksIGV2ZW50TW9kcywgY3VycmVudE1vZHMsIGNvbW1hbmQsIGhhbmRsZXI7XG5cblx0XHRcdFx0bW9kaWZpZXIgPSAoISF+bW9kaWZpZXJzLmluZGV4T2YoX2V2ZW50LmtleUNvZGUpKSAmJiBtYXBbX2V2ZW50LmtleUNvZGVdO1xuXHRcdFx0XHRrZXkgPSAobW9kaWZpZXIpID8gbW9kaWZpZXIgOiBtYXBbX2V2ZW50LmtleUNvZGVdIHx8IFN0cmluZy5mcm9tQ2hhckNvZGUoX2V2ZW50LmtleUNvZGUpO1xuXHRcdFx0XHRldmVudE1vZHMgPSBbX2V2ZW50LnNoaWZ0S2V5LCBfZXZlbnQuY3RybEtleSwgX2V2ZW50LmFsdEtleSwgX2V2ZW50Lm1ldGFLZXldO1xuXHRcdFx0XHRjdXJyZW50TW9kcyA9IFtdO1xuXG5cdFx0XHRcdC8vIENvbGxlY3QgdGhlIG1vZGlmaWVycyB0aGUgZXZlbnQgc2F5cyBhcmUgc3RpbGwgZG93bi5cblx0XHRcdFx0ZXZlbnRNb2RzLmZvckVhY2goZnVuY3Rpb24gKF9tb2RpZmllckRvd24sIF9pbmRleCkge1xuXHRcdFx0XHRcdC8vIHVzZSB0aGUgbW9kaWZpZXIgbmFtZVxuXHRcdFx0XHRcdGlmIChfbW9kaWZpZXJEb3duKSBjdXJyZW50TW9kcy5wdXNoKG1hcFttb2RpZmllcnNbX2luZGV4XV0pO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHQvLyBEb24ndCBhZGQga2V5cyB3ZSBhbHJlYWR5IGhhdmUgZHVyaW5nIHJhcGlkLWZpcmUgZXZlbnRzXG5cdFx0XHRcdGlmICh+Y2hvcmRzLmluZGV4T2Yoa2V5KSB8fCB+c2VxdWVuY2UuaW5kZXhPZihrZXkpKSByZXR1cm47XG5cblx0XHRcdFx0Ly8gQ29uc3RydWN0IHRoZSBjb21tYW5kXG5cdFx0XHRcdGNvbW1hbmQgPSBjaG9yZHMubGVuZ3RoID9cblx0XHRcdFx0XHQoY2hvcmRzLnB1c2goa2V5KSwgY2hvcmRzLmpvaW4oJywnKSkgOlxuXHRcdFx0XHRcdChzZXF1ZW5jZS5wdXNoKGtleSksIHNlcXVlbmNlLmpvaW4oJysnKSk7XG5cblx0XHRcdFx0aGFuZGxlciA9IHRoaXMua2V5Q29tbWFuZHNbY29tbWFuZF07XG5cblx0XHRcdFx0aWYgKGhhbmRsZXIpIHtcblx0XHRcdFx0XHRoYW5kbGVyLmNhbGwodGhpcywgX2V2ZW50LCBjb21tYW5kKTtcblx0XHRcdFx0XHQvLyBLZWVwIGN1cnJlbnQgbW9kaWZpZXJzLlxuXHRcdFx0XHRcdHNlcXVlbmNlID0gY3VycmVudE1vZHMubWFwKGZ1bmN0aW9uIChfa2V5LCBfaW5kZXgpIHtcblx0XHRcdFx0XHRcdHZhciBrZXkgPSBzZXF1ZW5jZVtfaW5kZXhdO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGN1cnJlbnRNb2RzW2N1cnJlbnRNb2RzLmluZGV4T2Yoa2V5KV07XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0Y2hvcmRzID0gW107XG5cblx0XHRcdFx0XHQvLyBPdmVycmlkZSBvcmlnaW5hbCBrZXkgY29tbWFuZCAoaS5lLiBtZXRhK1EpLlxuXHRcdFx0XHRcdF9ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5vbigna2V5dXAnLCBmdW5jdGlvbiAoX2V2ZW50KSB7XG5cdFx0XHRcdHZhciBrZXksIGluZGV4LCBtb2RpZmllciwgZXZlbnRNb2RzLCBjdXJyZW50TW9kcztcblxuXHRcdFx0XHRrZXkgPSAobW9kaWZpZXIpID8gbW9kaWZpZXIgOiBtYXBbX2V2ZW50LmtleUNvZGVdIHx8IFN0cmluZy5mcm9tQ2hhckNvZGUoX2V2ZW50LmtleUNvZGUpO1xuXHRcdFx0XHRpbmRleCA9IHNlcXVlbmNlLmluZGV4T2Yoa2V5KTtcblx0XHRcdFx0bW9kaWZpZXIgPSAoISF+bW9kaWZpZXJzLmluZGV4T2YoX2V2ZW50LmtleUNvZGUpKSAmJiBtYXBbX2V2ZW50LmtleUNvZGVdO1xuXHRcdFx0XHQvLyBGb2xsb3dzIHRoZSBzYW1lIGluZGV4IG9yZGVyIGFzIFwibW9kaWZpZXJzXCIgWzE2LCAxNywgMTgsIDkxXVxuXHRcdFx0XHRldmVudE1vZHMgPSBbX2V2ZW50LnNoaWZ0S2V5LCBfZXZlbnQuY3RybEtleSwgX2V2ZW50LmFsdEtleSwgX2V2ZW50Lm1ldGFLZXldO1xuXHRcdFx0XHRjdXJyZW50TW9kcyA9IFtdO1xuXG5cdFx0XHRcdC8vIENvbGxlY3QgdGhlIG1vZGlmaWVycyB0aGUgZXZlbnQgc2F5cyBhcmUgc3RpbGwgZG93bi5cblx0XHRcdFx0ZXZlbnRNb2RzLmZvckVhY2goZnVuY3Rpb24gKF9tb2RpZmllckRvd24sIF9pbmRleCkge1xuXHRcdFx0XHRcdC8vIHVzZSB0aGUgbW9kaWZpZXIgbmFtZVxuXHRcdFx0XHRcdGlmIChfbW9kaWZpZXJEb3duKSBjdXJyZW50TW9kcy5wdXNoKG1hcFttb2RpZmllcnNbX2luZGV4XV0pO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHQvLyBJZiB0aGUga2V5IHJlbGVhc2VkIGlzIGEgbW9kaWZpZXIuLi5cblx0XHRcdFx0aWYgKGtleSA9PT0gbW9kaWZpZXIpIHtcblx0XHRcdFx0XHQvLyAuLi5rZWVwIGN1cnJlbnQgbW9kaWZpZXJzLi4uXG5cdFx0XHRcdFx0c2VxdWVuY2UgPSBjdXJyZW50TW9kcy5tYXAoZnVuY3Rpb24gKF9rZXksIF9pbmRleCkge1xuXHRcdFx0XHRcdFx0dmFyIGtleSA9IHNlcXVlbmNlW19pbmRleF07XG5cdFx0XHRcdFx0XHRyZXR1cm4gY3VycmVudE1vZHNbY3VycmVudE1vZHMuaW5kZXhPZihrZXkpXTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHQvLyAuLi5jbGVhciByZWdpc3RlcmVkIGNob3Jkcy5cblx0XHRcdFx0XHRjaG9yZHMgPSBbXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdC8vIElmIHdlIGhhZCBwcmVzc2VkIG1vcmUgdGhhbiBvbmUga2V5Li4uXG5cdFx0XHRcdFx0aWYgKHNlcXVlbmNlLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0XHRcdC8vIENoZWNrIGlmIHRoZSBmaXJzdCBpcyBhIG1vZGlmaWVyIHRoZW4gc3dpdGNoIHRvIGNob3JkIGNhcHR1cmluZ1xuXHRcdFx0XHRcdFx0aWYgKH5tb2RpZmllcnMuaW5kZXhPZihtYXBbc2VxdWVuY2VbMF1dKSkge1xuXHRcdFx0XHRcdFx0XHRjaG9yZHMucHVzaChzZXF1ZW5jZS5qb2luKCcrJykpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZiAofmluZGV4KSBzZXF1ZW5jZS5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0XHRcdGlmICghc2VxdWVuY2UubGVuZ3RoKSBjaG9yZHMgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5rZXlDb21tYW5kc1tfY29tbWFuZHNdID0gX2hhbmRsZXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHR0aGlzLnNjcmVlbiA9IGZ1bmN0aW9uIChfaWQsIF9pbXBsZW1lbnRhdGlvbikge1xuXHRcdHZhciBwcm90b3R5cGUsIHNlbGVjdG9yLCBzY3JlZW5TZWxlY3RvciwgaW5zdGFuY2U7XG5cblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgX2lkID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRzY3JlZW5Qcm90b3R5cGUgPSBTY3JlZW4uZXh0ZW5kKF9pZCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHRpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoJ3NjcmVlbnMnKSkgdGhpcy5zY3JlZW5zID0gQ29sbGVjdGlvbi5jcmVhdGUoKTtcblxuXHRcdGlmICh0aGlzLmhhc093blByb3BlcnR5KCckZWxzJykpIHtcblx0XHRcdGRlYnVnZ2VyO1xuXHRcdFx0c2NyZWVuU2VsZWN0b3IgPSBwbC5nYW1lLmNvbmZpZygnc2NyZWVuU2VsZWN0b3InKTtcblx0XHRcdHByb3RvdHlwZSA9IChzY3JlZW5Qcm90b3R5cGUuaXNQcm90b3R5cGVPZih0aGlzKSkgPyB0aGlzIDogc2NyZWVuUHJvdG90eXBlO1xuXHRcdFx0c2VsZWN0b3IgPSAodHlwZW9mIF9pZCA9PT0gJ251bWJlcicpID8gc2NyZWVuU2VsZWN0b3IrJzpudGgtY2hpbGQoJysoX2lkKzEpKycpJyA6ICcjJytfaWQ7XG5cdFx0XHRpbnN0YW5jZSA9IHByb3RvdHlwZS5leHRlbmQoX2ltcGxlbWVudGF0aW9uKS5pbml0aWFsaXplKHRoaXMuZmluZChzZWxlY3RvcikpO1xuXG5cdFx0XHRpbnN0YW5jZS5zY3JlZW4gPSBpbnN0YW5jZTtcblx0XHRcdGlmICghaW5zdGFuY2UuZ2FtZSkge1xuXHRcdFx0XHRpbnN0YW5jZS5nYW1lID0gaW5zdGFuY2UuY2xvc2VzdCgnLnBsLWdhbWUnKS5zY29wZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGVsc2Uge1xuXHRcdFx0dGhpcy5zY3JlZW5zLnB1c2goe1xuXHRcdFx0XHRpbmRleDogKHR5cGVvZiBfaWQgPT09ICdudW1iZXInKSA/IF9pZCA6IG51bGwsXG5cdFx0XHRcdG5hbWU6ICh0eXBlb2YgX2lkID09PSAnc3RyaW5nJykgPyBfaWQgOiBudWxsLFxuXHRcdFx0XHRpbXBsZW1lbnRhdGlvbjogX2ltcGxlbWVudGF0aW9uXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHR0aGlzLmNhcHR1cmVTY3JlZW5zID0gZnVuY3Rpb24gKCkge1xuXHRcdHZhciBzY3JlZW5TZWxlY3RvciwgcHJvdG90eXBlLCBjb2xsZWN0aW9uO1xuXG5cdFx0c2NyZWVuU2VsZWN0b3IgPSBwbC5nYW1lLmNvbmZpZygnc2NyZWVuU2VsZWN0b3InKTtcblx0XHRwcm90b3R5cGUgPSAoc2NyZWVuUHJvdG90eXBlLmlzUHJvdG90eXBlT2YodGhpcykpID8gdGhpcyA6IHNjcmVlblByb3RvdHlwZTtcblx0XHRjb2xsZWN0aW9uID0gW107XG5cdFx0XG5cdFx0dGhpcy5maW5kT3duKHNjcmVlblNlbGVjdG9yKS5lYWNoKHRoaXMuYmluZChmdW5jdGlvbiAoX2luZGV4LCBfbm9kZSkge1xuXHRcdFx0dmFyICRub2RlLCBzY3JlZW4sIHJlY29yZCwga2V5LCBpZCwgaW5kZXgsIGNvbXBvbmVudDtcblxuXHRcdFx0JG5vZGUgPSAkKF9ub2RlKTtcblx0XHRcdGlkID0gJG5vZGUuaWQoKTtcblx0XHRcdGtleSA9IChpZCkgPyAnbmFtZScgOiAoaWQgPSBfaW5kZXgsICdpbmRleCcpO1xuXHRcdFx0cmVjb3JkID0gdGhpcy5zY3JlZW5zICYmIHRoaXMuc2NyZWVucy5nZXQoaWQsIGtleSk7XG5cdFx0XHRjb21wb25lbnQgPSAkbm9kZS5hdHRyKCdwbC1jb21wb25lbnQnKTtcblx0XHRcdHNjcmVlbiA9IGNyZWF0ZUVudGl0eS5jYWxsKHByb3RvdHlwZSwgJG5vZGUsIHJlY29yZCAmJiByZWNvcmQuaW1wbGVtZW50YXRpb24pO1xuXHRcdFx0c2NyZWVuLnNjcmVlbiA9IHNjcmVlbjtcblx0XHRcdHNjcmVlbi5nYW1lID0gdGhpcztcblxuXHRcdFx0aWYgKCRub2RlLmF0dHIoJ3BsLXNraXAnKSA9PSBudWxsKSBjb2xsZWN0aW9uLnB1c2goc2NyZWVuKTtcblx0XHRcdFxuXHRcdFx0aWYgKGtleSA9PT0gJ25hbWUnIHx8IGNvbXBvbmVudCkge1xuXHRcdFx0XHR1dGlsLmFzc2lnblJlZih0aGlzLCB1dGlsLnRyYW5zZm9ybUlkKChrZXkgPT09ICduYW1lJyAmJiBpZCkgfHwgY29tcG9uZW50LCB0cnVlKSwgc2NyZWVuKTtcblx0XHRcdH1cblx0XHR9KSk7XG5cblx0XHRpZiAoY29sbGVjdGlvbi5sZW5ndGgpIHRoaXMuc2NyZWVucyA9IGNvbGxlY3Rpb247XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHR0aGlzLndhdGNoQXVkaW8gPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHBsYXlpbmc7XG5cblx0XHRmdW5jdGlvbiBkZVF1ZXVlIChfc2NvcGUsIF9pdGVtKSB7XG5cdFx0XHRbX3Njb3BlLCBfc2NvcGUuc2NyZWVuXS5mb3JFYWNoKGZ1bmN0aW9uIChfc2NvcGUpIHtcblx0XHRcdFx0aWYgKF9zY29wZS5yZXF1aXJlZFF1ZXVlICYmIF9zY29wZS5pc01lbWJlclNhZmUoJ3JlcXVpcmVkUXVldWUnKSAmJiBfc2NvcGUucmVxdWlyZWRRdWV1ZS5oYXMoX2l0ZW0pKSB7XG5cdFx0XHRcdFx0X3Njb3BlLnJlcXVpcmVkUXVldWUucmVhZHkoX2l0ZW0pO1xuXHRcdFx0XHR9XHRcdFx0XHRcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHBsYXlpbmcgPSBDb2xsZWN0aW9uLmNyZWF0ZSgpO1xuXG5cdFx0dGhpcy5vbignYXVkaW8tcGxheScsIGZ1bmN0aW9uIChfZXZlbnQpIHtcblx0XHRcdHZhciBjdXJyZW50LCBiZ011c2ljO1xuXG5cdFx0XHRpZiAoX2V2ZW50LmF1ZGlvVHlwZSAhPT0gJ3NmeCcpIHtcblx0XHRcdFx0Y3VycmVudCA9IHBsYXlpbmcuZmlsdGVyKF9ldmVudC5hdWRpb1R5cGUsICd0eXBlJyk7XG5cdFx0XHRcdGJnTXVzaWMgPSBwbGF5aW5nLmZpbHRlcignYmFja2dyb3VuZCcsICd0eXBlJyk7XG5cblx0XHRcdFx0aWYgKGN1cnJlbnQpIHtcblx0XHRcdFx0XHRjdXJyZW50LmZvckVhY2goZnVuY3Rpb24gKF9yZWNvcmQpIHtcblx0XHRcdFx0XHRcdF9yZWNvcmQuYXVkaW8ucGF1c2UoKTtcblx0XHRcdFx0XHRcdF9yZWNvcmQuYXVkaW8uY3VycmVudFRpbWUgPSAwO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKF9ldmVudC5hdWRpb1R5cGUgPT09ICd2b2ljZS1vdmVyJykge1xuXHRcdFx0XHRcdGlmIChiZ011c2ljKSBiZ011c2ljLmZvckVhY2goZnVuY3Rpb24gKF9yZWNvcmQpIHtcblx0XHRcdFx0XHRcdF9yZWNvcmQuYXVkaW8udm9sdW1lID0gMC4yO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHBsYXlpbmcucHVzaCh7XG5cdFx0XHRcdGF1ZGlvOiBfZXZlbnQudGFyZ2V0LFxuXHRcdFx0XHR0eXBlOiBfZXZlbnQuYXVkaW9UeXBlXG5cdFx0XHR9KTtcblx0XHR9KTtcblxuXHRcdHRoaXMub24oJ2F1ZGlvLWVuZGVkIGF1ZGlvLXBhdXNlJywgZnVuY3Rpb24gKF9ldmVudCkge1xuXHRcdFx0dmFyIGN1cnJlbnQsIHNjb3BlLCBiZ011c2ljO1xuXG5cdFx0XHRjdXJyZW50ID0gcGxheWluZy5nZXQoX2V2ZW50LnRhcmdldCwgJ2F1ZGlvJylcblx0XHRcdHNjb3BlID0gJChfZXZlbnQudGFyZ2V0KS5zY29wZSgpO1xuXHRcdFx0YmdNdXNpYyA9IHBsYXlpbmcuZmlsdGVyKCdiYWNrZ3JvdW5kJywgJ3R5cGUnKTtcblxuXHRcdFx0cGxheWluZy5yZW1vdmUoY3VycmVudCk7XG5cdFx0XHRkZVF1ZXVlKHNjb3BlLCBfZXZlbnQudGFyZ2V0KTtcblxuXHRcdFx0aWYgKF9ldmVudC5hdWRpb1R5cGUgPT09ICd2b2ljZS1vdmVyJyAmJiAhcGxheWluZy5nZXQoJ3ZvaWNlLW92ZXInLCAndHlwZScpKSB7XG5cdFx0XHRcdGlmIChiZ011c2ljKSBiZ011c2ljLmZvckVhY2goZnVuY3Rpb24gKF9yZWNvcmQpIHtcblx0XHRcdFx0XHRfcmVjb3JkLmF1ZGlvLnZvbHVtZSA9IDE7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9O1xuXG5cdHRoaXMucHJvZ3Jlc3MgPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGN1cnJlbnRTY3JlZW46IHRoaXMuY3VycmVudFNjcmVlbigpLmluZGV4KClcblx0XHR9O1xuXHR9O1xuXG5cdHRoaXMuY3VycmVudFNjcmVlbiA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5maW5kT3duKHBsLmdhbWUuY29uZmlnKCdzY3JlZW5TZWxlY3RvcicpKycuT1BFTicpLm5vdCgnI3F1aXQnKS5zY29wZSgpO1xuXHR9O1xuXG5cdHRoaXMuZmxpcCA9IGZ1bmN0aW9uICgpIHtcblx0XHRjb25zb2xlLmxvZygnVEhBVFMgQSBGTElQIScpO1xuXHRcdGdhbWUucmVwb3J0LmZsaXAodGhpcyk7XG5cdH07XG5cblx0dGhpcy5leGl0ID0gZnVuY3Rpb24gKCkge1xuXHRcdGNvbnNvbGUubG9nKCdHT09EQllFIScpO1xuXHRcdGdhbWUucmVwb3J0LmV4aXQodGhpcyk7XG5cdH07XG5cblx0LyoqXG5cdCAqIERlbW8gbW9kZSBrZXkgY29tbWFuZFxuXHQgKi9cblx0dGhpcy5vbktleXMoJ2N0cmwrRCxNJywgZnVuY3Rpb24gKCkge1xuXHRcdGRlbW9Nb2RlLmNhbGwodGhpcyk7XG5cdH0pO1xuXG5cdC8qKlxuXHQgKiBLZXlib2FyZCBzY3JlZW4gbmF2aWdhdGlvblxuXHQgKi9cblx0dGhpcy5vbktleXMoJ2xlZnQnLCBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIGN1cnJlbnQ7XG5cblx0XHRjdXJyZW50ID0gdGhpcy5jdXJyZW50U2NyZWVuKCk7XG5cblx0XHRpZiAoY3VycmVudCkgY3VycmVudC5wcmV2KCk7XG5cdH0pO1xuXG5cdHRoaXMub25LZXlzKCdyaWdodCcsIGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgY3VycmVudDtcblxuXHRcdGN1cnJlbnQgPSB0aGlzLmN1cnJlbnRTY3JlZW4oKTtcblx0XHRcblx0XHRpZiAoY3VycmVudCkgY3VycmVudC5uZXh0KCk7XG5cdH0pO1xuXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgR2FtZTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc291cmNlL3R5cGVzL0dhbWUuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * API for communicaion between a game and the platform.\\n *\\n * @module\\n */\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar platform = new function () {\\n\\n\\tfunction createEvent(_name, _props) {\\n\\t\\tvar eventObject;\\n\\n\\t\\teventObject = _util2['default'].mixin(new Event('game-event', { bubbles: true, cancelable: false }), {\\n\\t\\t\\tname: _name,\\n\\t\\t\\trespond: function respond(_data) {\\n\\t\\t\\t\\tvar platformEvent;\\n\\n\\t\\t\\t\\tplatformEvent = $.Event('platform-event', {\\n\\t\\t\\t\\t\\tname: _name,\\n\\t\\t\\t\\t\\tgameData: _data\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\tpl.game.trigger(platformEvent);\\n\\t\\t\\t}\\n\\t\\t}, _props);\\n\\n\\t\\treturn eventObject;\\n\\t}\\n\\n\\tthis.EVENT_INIT = 'init';\\n\\tthis.EVENT_SAVE = 'save';\\n\\tthis.EVENT_EXIT = 'exit';\\n\\tthis.EVENT_FLIPPED = 'flipped';\\n\\n\\tthis.emit = function (_name) {\\n\\t\\twindow.frameElement.dispatchEvent(createEvent(_name));\\n\\t};\\n\\n\\tthis.saveGameState = function (_data) {\\n\\t\\twindow.frameElement.dispatchEvent(createEvent(this.EVENT_SAVE, {\\n\\t\\t\\tgameData: _data\\n\\t\\t}));\\n\\t};\\n\\n\\twindow.addEventListener('platform-event', function (_event) {\\n\\t\\tvar platformEvent;\\n\\n\\t\\tplatformEvent = $.Event('platform-event', {\\n\\t\\t\\tname: _event.name\\n\\t\\t});\\n\\n\\t\\tpl.game.trigger(platformEvent);\\n\\t});\\n}();\\n\\nexports['default'] = platform;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvcGxhdGZvcm0uanM/NWQxOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Z0NBS2lCLEVBQU07Ozs7QUFFdkIsSUFBSSxRQUFRLEdBQUcsSUFBSyxZQUFZOztBQUUvQixVQUFTLFdBQVcsQ0FBRSxLQUFLLEVBQUUsTUFBTSxFQUFFO0FBQ3BDLE1BQUksV0FBVyxDQUFDOztBQUVoQixhQUFXLEdBQUcsa0JBQUssS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLFlBQVksRUFBRSxFQUFDLE9BQU8sRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUU7QUFDbkYsT0FBSSxFQUFFLEtBQUs7QUFDWCxVQUFPLEVBQUUsaUJBQVUsS0FBSyxFQUFFO0FBQ3pCLFFBQUksYUFBYSxDQUFDOztBQUVsQixpQkFBYSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUU7QUFDekMsU0FBSSxFQUFFLEtBQUs7QUFDWCxhQUFRLEVBQUUsS0FBSztLQUNmLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMvQjtHQUNELEVBQUUsTUFBTSxDQUFDLENBQUM7O0FBRVgsU0FBTyxXQUFXLENBQUM7RUFDbkI7O0FBRUQsS0FBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7QUFDekIsS0FBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7QUFDekIsS0FBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7QUFDekIsS0FBSSxDQUFDLGFBQWEsR0FBRyxTQUFTLENBQUM7O0FBRS9CLEtBQUksQ0FBQyxJQUFJLEdBQUcsVUFBVSxLQUFLLEVBQUU7QUFDNUIsUUFBTSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDdEQsQ0FBQzs7QUFFRixLQUFJLENBQUMsYUFBYSxHQUFHLFVBQVUsS0FBSyxFQUFFO0FBQ3JDLFFBQU0sQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO0FBQzlELFdBQVEsRUFBRSxLQUFLO0dBQ2YsQ0FBQyxDQUFDLENBQUM7RUFDSixDQUFDOztBQUVGLE9BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsRUFBRSxVQUFVLE1BQU0sRUFBRTtBQUMzRCxNQUFJLGFBQWEsQ0FBQzs7QUFFbEIsZUFBYSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUU7QUFDekMsT0FBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO0dBQ2pCLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztFQUMvQixDQUFDLENBQUM7Q0FFSCxFQUFDLENBQUM7O3FCQUVZLFFBQVEiLCJmaWxlIjoiNDIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFQSSBmb3IgY29tbXVuaWNhaW9uIGJldHdlZW4gYSBnYW1lIGFuZCB0aGUgcGxhdGZvcm0uXG4gKlxuICogQG1vZHVsZVxuICovXG5pbXBvcnQgdXRpbCBmcm9tICd1dGlsJztcblxudmFyIHBsYXRmb3JtID0gbmV3IChmdW5jdGlvbiAoKSB7XG5cblx0ZnVuY3Rpb24gY3JlYXRlRXZlbnQgKF9uYW1lLCBfcHJvcHMpIHtcblx0XHR2YXIgZXZlbnRPYmplY3Q7XG5cblx0XHRldmVudE9iamVjdCA9IHV0aWwubWl4aW4obmV3IEV2ZW50KCdnYW1lLWV2ZW50Jywge2J1YmJsZXM6dHJ1ZSwgY2FuY2VsYWJsZTpmYWxzZX0pLCB7XG5cdFx0XHRuYW1lOiBfbmFtZSxcblx0XHRcdHJlc3BvbmQ6IGZ1bmN0aW9uIChfZGF0YSkge1xuXHRcdFx0XHR2YXIgcGxhdGZvcm1FdmVudDtcblxuXHRcdFx0XHRwbGF0Zm9ybUV2ZW50ID0gJC5FdmVudCgncGxhdGZvcm0tZXZlbnQnLCB7XG5cdFx0XHRcdFx0bmFtZTogX25hbWUsXG5cdFx0XHRcdFx0Z2FtZURhdGE6IF9kYXRhXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRcblx0XHRcdFx0cGwuZ2FtZS50cmlnZ2VyKHBsYXRmb3JtRXZlbnQpO1xuXHRcdFx0fVxuXHRcdH0sIF9wcm9wcyk7XG5cblx0XHRyZXR1cm4gZXZlbnRPYmplY3Q7XG5cdH1cblxuXHR0aGlzLkVWRU5UX0lOSVQgPSAnaW5pdCc7XG5cdHRoaXMuRVZFTlRfU0FWRSA9ICdzYXZlJztcblx0dGhpcy5FVkVOVF9FWElUID0gJ2V4aXQnO1xuXHR0aGlzLkVWRU5UX0ZMSVBQRUQgPSAnZmxpcHBlZCc7XG5cblx0dGhpcy5lbWl0ID0gZnVuY3Rpb24gKF9uYW1lKSB7XG5cdFx0d2luZG93LmZyYW1lRWxlbWVudC5kaXNwYXRjaEV2ZW50KGNyZWF0ZUV2ZW50KF9uYW1lKSk7XG5cdH07XG5cblx0dGhpcy5zYXZlR2FtZVN0YXRlID0gZnVuY3Rpb24gKF9kYXRhKSB7XG5cdFx0d2luZG93LmZyYW1lRWxlbWVudC5kaXNwYXRjaEV2ZW50KGNyZWF0ZUV2ZW50KHRoaXMuRVZFTlRfU0FWRSwge1xuXHRcdFx0Z2FtZURhdGE6IF9kYXRhXG5cdFx0fSkpO1xuXHR9O1xuXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwbGF0Zm9ybS1ldmVudCcsIGZ1bmN0aW9uIChfZXZlbnQpIHtcblx0XHR2YXIgcGxhdGZvcm1FdmVudDtcblxuXHRcdHBsYXRmb3JtRXZlbnQgPSAkLkV2ZW50KCdwbGF0Zm9ybS1ldmVudCcsIHtcblx0XHRcdG5hbWU6IF9ldmVudC5uYW1lXG5cdFx0fSk7XG5cdFx0XG5cdFx0cGwuZ2FtZS50cmlnZ2VyKHBsYXRmb3JtRXZlbnQpO1xuXHR9KTtcblxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHBsYXRmb3JtO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zb3VyY2UvcGxhdGZvcm0uanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ }\n/******/ ]);//@ sourceMappingURL=data:application/json;base64,");

/***/ },
/* 4 */
/***/ function(module, exports) {

	eval("pl.game.config({\n\tscreenSelector: '.screen',\n\tcomponentDirectory: 'components/',\n\tdimensions: {\n\t\twidth: 960,\n\t\tratio: 16 / 9\n\t},\n\tshouldLoadComponentStyles: false\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wcmludG1hc3Rlci9zb3VyY2UvanMvY29uZmlnLmdhbWUuanM/MWUzYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUNkLGVBQWMsRUFBRSxTQUFTO0FBQ3pCLG1CQUFrQixFQUFFLGFBQWE7QUFDakMsV0FBVSxFQUFFO0FBQ1gsT0FBSyxFQUFFLEdBQUc7QUFDVixPQUFLLEVBQUUsRUFBRSxHQUFDLENBQUM7RUFDWDtBQUNELDBCQUF5QixFQUFFLEtBQUs7Q0FDaEMsQ0FBQyIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsicGwuZ2FtZS5jb25maWcoe1xuXHRzY3JlZW5TZWxlY3RvcjogJy5zY3JlZW4nLFxuXHRjb21wb25lbnREaXJlY3Rvcnk6ICdjb21wb25lbnRzLycsXG5cdGRpbWVuc2lvbnM6IHtcblx0XHR3aWR0aDogOTYwLFxuXHRcdHJhdGlvOiAxNi85XG5cdH0sXG5cdHNob3VsZExvYWRDb21wb25lbnRTdHlsZXM6IGZhbHNlXG59KTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vcHJpbnRtYXN0ZXIvc291cmNlL2pzL2NvbmZpZy5nYW1lLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 5 */
/***/ function(module, exports) {

	eval("Object.defineProperty(exports, '__esModule', {\n\tvalue: true\n});\nexports['default'] = identify;\n/**\n * Printmaster - Identify Screen\n */\n\nfunction identify() {\n\tthis.on('ready', function (_event) {\n\t\tvar correct;\n\n\t\tif (!this.is(_event.target)) return;\n\n\t\tcorrect = pl.Queue.create();\n\n\t\tcorrect.on('complete', this.bind(function () {\n\t\t\tthis.delay('1.5s', this.audio.sfx.confirmed.play.bind(this.audio.sfx.confirmed));\n\t\t}));\n\n\t\tthis.items = this.find('.header img').map(function (_index, _node) {\n\t\t\tcorrect.add($(_node).id());\n\t\t\treturn _node;\n\t\t}).toArray();\n\n\t\tthis.items.correct = correct;\n\n\t\tthis.headers = this.find('.header img');\n\t\tthis.answers = this.find('.items li');\n\t\tthis.setItem();\n\t});\n\n\tthis.setItem = function (_idx) {\n\t\tif (this.item && this.items[this.item]) this.items[this.item].ready();\n\t\tthis.idx = _idx || 0;\n\t\tthis.item = $(this.items[this.idx]).id();\n\n\t\tif (this.item) {\n\t\t\tthis.select(this.headers.filter('[pl-id=' + this.item + ']'));\n\t\t\tif (this.selectable) this.selectable.deselectAll();\n\n\t\t\tfor (var i = 0; i < 5; i++) {\n\t\t\t\tthis.delay(i * 150, function () {\n\t\t\t\t\tthis.answers.each(function (_index, _node) {\n\t\t\t\t\t\t_node.style.order = Math.round(20 * Math.random());\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.respond('select', function (_event) {\n\t\tif (_event.message === this.item) {\n\t\t\tthis.audio.sfx.correct.play();\n\t\t\tthis.audio.sfx.granted.play();\n\t\t\tthis.select(_event.behaviorTarget);\n\t\t\tthis.items.correct.ready(this.item);\n\t\t\tthis.delay('1s', this.setItem.bind(this, ++this.idx));\n\t\t} else {\n\t\t\tthis.audio.sfx.incorrect.play();\n\t\t\tthis.audio.sfx.denied.play();\n\t\t\tthis.highlight(_event.behaviorTarget);\n\t\t}\n\t});\n}\n\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wcmludG1hc3Rlci9zb3VyY2UvanMvc2NyZWVucy9pZGVudGlmeS5qcz8zY2VjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztxQkFHd0IsUUFBUTs7Ozs7QUFBakIsU0FBUyxRQUFRLEdBQUk7QUFDbkMsS0FBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDakMsTUFBSSxPQUFPLENBQUM7O0FBRVosTUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLE9BQU87O0FBRXBDLFNBQU8sR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDOztBQUU1QixTQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVk7QUFDNUMsT0FBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztHQUNoRixDQUFDLENBQUMsQ0FBQzs7QUFFSixNQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FDZixJQUFJLENBQUMsYUFBYSxDQUFDLENBQ25CLEdBQUcsQ0FBQyxVQUFVLE1BQU0sRUFBRSxLQUFLLEVBQUU7QUFDN0IsVUFBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUMzQixVQUFPLEtBQUssQ0FBQztHQUNiLENBQUMsQ0FDRCxPQUFPLEVBQUUsQ0FBQzs7QUFFWixNQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7O0FBRTdCLE1BQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN4QyxNQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDdEMsTUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0VBQ2YsQ0FBQyxDQUFDOztBQUVILEtBQUksQ0FBQyxPQUFPLEdBQUcsVUFBUyxJQUFJLEVBQUU7QUFDN0IsTUFBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ3JFLE1BQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQztBQUNyQixNQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDOztBQUV6QyxNQUFHLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDYixPQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBQyxJQUFJLENBQUMsSUFBSSxHQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDMUQsT0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUM7O0FBRWxELFFBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDMUIsUUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUMsR0FBRyxFQUFFLFlBQVc7QUFDNUIsU0FBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxNQUFNLEVBQUUsS0FBSyxFQUFFO0FBQzFDLFdBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO01BQ2pELENBQUMsQ0FBQztLQUNILENBQUMsQ0FBQztJQUNIO0dBQ0Q7RUFDRCxDQUFDOztBQUVGLEtBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFVBQVMsTUFBTSxFQUFFO0FBQ3ZDLE1BQUcsTUFBTSxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ2hDLE9BQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUM5QixPQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDOUIsT0FBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDbkMsT0FBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNwQyxPQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztHQUNyRCxNQUFNO0FBQ04sT0FBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2hDLE9BQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUM3QixPQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztHQUN0QztFQUNELENBQUMsQ0FBQztDQUNIIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFByaW50bWFzdGVyIC0gSWRlbnRpZnkgU2NyZWVuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlkZW50aWZ5ICgpIHtcblx0dGhpcy5vbigncmVhZHknLCBmdW5jdGlvbihfZXZlbnQpIHtcblx0XHR2YXIgY29ycmVjdDtcblxuXHRcdGlmICghdGhpcy5pcyhfZXZlbnQudGFyZ2V0KSkgcmV0dXJuO1xuXG5cdFx0Y29ycmVjdCA9IHBsLlF1ZXVlLmNyZWF0ZSgpO1xuXG5cdFx0Y29ycmVjdC5vbignY29tcGxldGUnLCB0aGlzLmJpbmQoZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhpcy5kZWxheSgnMS41cycsdGhpcy5hdWRpby5zZnguY29uZmlybWVkLnBsYXkuYmluZCh0aGlzLmF1ZGlvLnNmeC5jb25maXJtZWQpKTtcblx0XHR9KSk7XG5cblx0XHR0aGlzLml0ZW1zID0gdGhpc1xuXHRcdFx0LmZpbmQoJy5oZWFkZXIgaW1nJylcblx0XHRcdC5tYXAoZnVuY3Rpb24gKF9pbmRleCwgX25vZGUpIHtcblx0XHRcdFx0Y29ycmVjdC5hZGQoJChfbm9kZSkuaWQoKSk7XG5cdFx0XHRcdHJldHVybiBfbm9kZTtcblx0XHRcdH0pXG5cdFx0XHQudG9BcnJheSgpO1xuXG5cdFx0dGhpcy5pdGVtcy5jb3JyZWN0ID0gY29ycmVjdDtcblxuXHRcdHRoaXMuaGVhZGVycyA9IHRoaXMuZmluZCgnLmhlYWRlciBpbWcnKTtcblx0XHR0aGlzLmFuc3dlcnMgPSB0aGlzLmZpbmQoJy5pdGVtcyBsaScpO1xuXHRcdHRoaXMuc2V0SXRlbSgpO1xuXHR9KTtcblxuXHR0aGlzLnNldEl0ZW0gPSBmdW5jdGlvbihfaWR4KSB7XG5cdFx0aWYodGhpcy5pdGVtICYmIHRoaXMuaXRlbXNbdGhpcy5pdGVtXSkgdGhpcy5pdGVtc1t0aGlzLml0ZW1dLnJlYWR5KCk7XG5cdFx0dGhpcy5pZHggPSBfaWR4IHx8IDA7XG5cdFx0dGhpcy5pdGVtID0gJCh0aGlzLml0ZW1zW3RoaXMuaWR4XSkuaWQoKTtcblxuXHRcdGlmKHRoaXMuaXRlbSkge1xuXHRcdFx0dGhpcy5zZWxlY3QodGhpcy5oZWFkZXJzLmZpbHRlcignW3BsLWlkPScrdGhpcy5pdGVtKyddJykpO1xuXHRcdFx0aWYodGhpcy5zZWxlY3RhYmxlKSB0aGlzLnNlbGVjdGFibGUuZGVzZWxlY3RBbGwoKTtcblxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IDU7IGkrKykge1xuXHRcdFx0XHR0aGlzLmRlbGF5KGkqMTUwLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHR0aGlzLmFuc3dlcnMuZWFjaChmdW5jdGlvbiAoX2luZGV4LCBfbm9kZSkge1xuXHRcdFx0XHRcdFx0X25vZGUuc3R5bGUub3JkZXIgPSBNYXRoLnJvdW5kKDIwKk1hdGgucmFuZG9tKCkpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0dGhpcy5yZXNwb25kKCdzZWxlY3QnLCBmdW5jdGlvbihfZXZlbnQpIHtcblx0XHRpZihfZXZlbnQubWVzc2FnZSA9PT0gdGhpcy5pdGVtKSB7XG5cdFx0XHR0aGlzLmF1ZGlvLnNmeC5jb3JyZWN0LnBsYXkoKTtcblx0XHRcdHRoaXMuYXVkaW8uc2Z4LmdyYW50ZWQucGxheSgpO1xuXHRcdFx0dGhpcy5zZWxlY3QoX2V2ZW50LmJlaGF2aW9yVGFyZ2V0KTtcblx0XHRcdHRoaXMuaXRlbXMuY29ycmVjdC5yZWFkeSh0aGlzLml0ZW0pO1xuXHRcdFx0dGhpcy5kZWxheSgnMXMnLCB0aGlzLnNldEl0ZW0uYmluZCh0aGlzLCsrdGhpcy5pZHgpKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5hdWRpby5zZnguaW5jb3JyZWN0LnBsYXkoKTtcblx0XHRcdHRoaXMuYXVkaW8uc2Z4LmRlbmllZC5wbGF5KCk7XG5cdFx0XHR0aGlzLmhpZ2hsaWdodChfZXZlbnQuYmVoYXZpb3JUYXJnZXQpO1xuXHRcdH1cblx0fSk7XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3ByaW50bWFzdGVyL3NvdXJjZS9qcy9zY3JlZW5zL2lkZW50aWZ5LmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 6 */
/***/ function(module, exports) {

	eval("Object.defineProperty(exports, '__esModule', {\n\tvalue: true\n});\nexports['default'] = carousel;\n/**\n * Printmaster - Carousel Screen\n */\n\nfunction carousel() {\n\tthis.on('ready', function (_event) {\n\t\tif (!this.is(_event.target)) return;\n\n\t\tthis.$targets = this.find('.target img');\n\t\tthis.setTarget();\n\t});\n\n\tthis.setTarget = function (_idx) {\n\t\tthis.idx = _idx || 0;\n\t\tthis.target = $(this.$targets[this.idx]).id();\n\t\tthis.amount = $(this.$targets[this.idx]).attr('pl-amount');\n\n\t\tif (this.target) {\n\t\t\tthis.select(this.$targets[this.idx]);\n\n\t\t\tif (this.score) {\n\t\t\t\tthis.score.removeClass('loops whorl arch doubleloops').addClass(this.target);\n\t\t\t\tthis.score.attr('pl-max', this.amount);\n\t\t\t\tthis.score.properties.max = this.amount;\n\t\t\t\tthis.score.reset();\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.respond('complete', function (_event) {\n\t\tif (_event.message === 'score') {\n\t\t\tthis.modal.item(this.idx);\n\t\t\tthis.setTarget(++this.idx);\n\t\t}\n\t});\n\n\tthis.start = function (_event) {\n\t\tthis.proto();\n\t\tthis.carousel.start();\n\t};\n\n\tthis.stop = function () {\n\t\tthis.carousel.stop();\n\t};\n\n\tthis.on('ui-open', function (_event) {\n\t\tif (!this.is(_event.target)) return;\n\n\t\tthis.carousel.start();\n\t\tthis.modal.item(8);\n\t\tthis.incomplete();\n\n\t\tthis.game.audio.sfx.typing.play();\n\t\tthis.delay('3.5s', function () {\n\t\t\tthis.game.audio.sfx.typing.pause();\n\t\t});\n\t});\n\n\tthis.state('incomplete', '-COMPLETE', {\n\t\twillSet: function willSet(_target) {\n\t\t\tthis.isComplete = false;\n\t\t}\n\t});\n\n\tthis.entity('carousel', function () {\n\t\t// The event 'behaviorTarget' for this entities 'hit' behavior\n\t\tthis.provideBehaviorTarget = function () {\n\t\t\t// Choose the item thats in the middle of the 3 visible.\n\t\t\treturn this.current().next();\n\t\t};\n\t});\n\n\tthis.entity('cannon', function () {\n\t\tthis.behavior('fire', function () {\n\t\t\tif (this.isLaunchComplete) {\n\t\t\t\tthis.launch(this.ball);\n\t\t\t\treturn {\n\t\t\t\t\tmessage: this.screen.target\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn false;\n\t\t});\n\t});\n\n\tthis.entity('score', function () {\n\n\t\tthis.entity('board', function () {\n\n\t\t\tthis.on('ready', function (_event) {\n\t\t\t\tif (!this.is(_event.target)) return;\n\n\t\t\t\tthis.items = this.find('div');\n\t\t\t});\n\n\t\t\tthis.render = function () {\n\t\t\t\tthis.highlight(this.items[this.value - 1]);\n\t\t\t\treturn this;\n\t\t\t};\n\t\t});\n\n\t\tthis.up = function (_count) {\n\t\t\tthis.value += _count || 1;\n\n\t\t\tthis.board.render();\n\n\t\t\tconsole.log('score', this.value, this.properties.max);\n\n\t\t\tif (this.value == this.properties.max) {\n\t\t\t\tconsole.log('score complete');\n\t\t\t\tthis.delay('1s', this.complete);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.behavior('complete', function () {\n\t\t\treturn {\n\t\t\t\tmessage: 'score'\n\t\t\t};\n\t\t});\n\n\t\tthis.reset = function () {\n\t\t\tthis.value = 0;\n\t\t\tthis.unhighlight(this.board.items);\n\t\t};\n\t});\n\n\tthis.respond('hit', function (_event) {\n\t\tif (_event.message === _event.behaviorTarget.id()) {\n\t\t\tthis.score.up();\n\t\t\tthis.playSFX('correct');\n\t\t} else {\n\t\t\tthis.playSFX('incorrect');\n\t\t}\n\t});\n\n\tthis.respond('next', function () {\n\t\tthis.cannon.reload();\n\t});\n\n\tthis.complete = function () {\n\t\tvar r = this.proto();\n\t\treturn r;\n\t};\n\n\tthis.playSFX = function (_name) {\n\t\tvar sfx;\n\n\t\tsfx = pl.util.resolvePath(this, 'audio.sfx.' + _name);\n\n\t\tif (sfx) sfx.play();\n\n\t\treturn this;\n\t};\n}\n\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,");

/***/ },
/* 7 */
/***/ function(module, exports) {

	eval("pl.game.component('screen-basic', function () {\n\tvar characters;\n\n\tthis.currentVO = null;\n\n\t/**\n  * Nodes, including the node of this screen, with a\n  * attribute of pl-bg will get a background-image style\n  * and the resource preloaded and collected for watching.\n  */\n\tthis.handleProperty({\n\t\tbg: function bg(_node, _name, _value) {\n\t\t\tvar img = new Image();\n\n\t\t\tif (!characters) characters = [];\n\n\t\t\timg.src = _value;\n\t\t\tcharacters.push(img);\n\t\t\t$(_node).css('background-image', 'url(' + _value + ')');\n\t\t}\n\t});\n\n\tthis.on('initialize', function (_event) {\n\t\tif (!this.is(_event.targetScope)) return;\n\t\tthis.watchAssets(characters);\n\t});\n\n\tthis.playSound = function (_sound) {\n\t\tvar delay;\n\n\t\tdelay = $(_sound).attr('pl-delay');\n\n\t\tif ($(_sound).hasClass('voice-over')) {\n\t\t\tthis.currentVO = _sound;\n\t\t}\n\n\t\tif (delay) {\n\t\t\treturn this.delay(delay, _sound.play.bind(_sound));\n\t\t} else {\n\t\t\treturn _sound.play();\n\t\t}\n\t};\n\n\tthis.next = function () {\n\t\tvar nextScreen, buttonSound;\n\n\t\tnextScreen = this.proto();\n\t\tbuttonSound = pl.util.resolvePath(this, 'game.audio.sfx.button');\n\n\t\tif (nextScreen) {\n\t\t\tthis.leave();\n\t\t\tnextScreen.open();\n\t\t\tif (buttonSound) buttonSound.play();\n\t\t}\n\n\t\treturn nextScreen;\n\t};\n\n\tthis.prev = function () {\n\t\tvar prevScreen, buttonSound;\n\n\t\tprevScreen = this.proto();\n\t\tbuttonSound = pl.util.resolvePath(this, 'game.audio.sfx.button');\n\n\t\tif (prevScreen) {\n\t\t\tthis.screen.close();\n\t\t\tprevScreen.open();\n\t\t\tif (buttonSound) buttonSound.play();\n\t\t}\n\n\t\treturn prevScreen;\n\t};\n\n\tthis.start = function () {\n\t\tvar bgSound, voSound;\n\n\t\tbgSound = pl.util.resolvePath(this, 'audio.background[0]?');\n\t\tvoSound = pl.util.resolvePath(this, 'audio.voiceOver[0]?');\n\t\tfxSound = pl.util.resolvePath(this, 'audio.sfx.start');\n\n\t\tif (bgSound) {\n\t\t\tthis.game.bgSound = bgSound;\n\t\t\tbgSound.play();\n\t\t}\n\t\tif (fxSound) fxSound.play();\n\t\tif (voSound && !voSound.hasAttribute(\"pl-dontautoplay\")) this.playSound(voSound);\n\n\t\tif (this.hasOwnProperty('entities') && this.entities[0]) this.entities[0].start();\n\n\t\treturn this;\n\t};\n\n\tthis.stop = function () {\n\t\tif (this.timeoutID) {\n\t\t\tclearTimeout(this.timeoutID);\n\t\t}\n\n\t\tif (this.currentVO) {\n\t\t\tthis.currentVO.pause();\n\t\t\tthis.currentVO.currentTime = 0;\n\t\t}\n\t};\n\n\tthis.on('ui-open', function (_event) {\n\t\tif (this.isReady && this === _event.targetScope) {\n\t\t\tthis.start();\n\t\t}\n\n\t\tif (this.properties.gameClass) {\n\t\t\tthis.game.addClass(this.properties.gameClass);\n\t\t}\n\n\t\tif (!this.requiredQueue || this.hasOwnProperty('requiredQueue') && !this.requiredQueue.length) {\n\t\t\tthis.complete();\n\t\t}\n\t});\n\n\tthis.on('ui-leave', function (_event) {\n\t\tif (this.properties.gameClass) {\n\t\t\tthis.game.removeClass(this.properties.gameClass);\n\t\t}\n\n\t\tif (this.isReady && this === _event.targetScope) {\n\t\t\tthis.stop();\n\t\t}\n\t});\n\n\tthis.on('ui-close', function (_event) {\n\t\tif (this.properties.gameClass) {\n\t\t\tthis.game.removeClass(this.properties.gameClass);\n\t\t}\n\n\t\tif (this.isReady && this === _event.targetScope) {\n\t\t\tthis.stop();\n\t\t}\n\t});\n\n\tthis.on('ready', function () {\n\t\tif (this.isMemberSafe('requiredQueue') && this.requiredQueue) {\n\t\t\tthis.requiredQueue.on('complete', this.bind(function () {\n\t\t\t\tvar sfx;\n\n\t\t\t\tsfx = pl.util.resolvePath(this, 'screen.audio.sfx.screenComplete') || pl.util.resolvePath(this, 'game.audio.sfx.screenComplete');\n\n\t\t\t\tif (sfx) sfx.play();\n\t\t\t}));\n\t\t}\n\t});\n});//@ sourceMappingURL=data:application/json;base64,");

/***/ },
/* 8 */
/***/ function(module, exports) {

	eval("pl.game.component('screen-quit', function () {\n\n\t// TODO: Make an automated way to handle this\n\tthis.on('transitionend', function (_event) {\n\t\tif (this.state(this.STATE.LEAVE)) {\n\t\t\tthis.addClass('LEAVE-END');\n\t\t}\n\t});\n\n\tthis.on('ui-open', function (_event) {\n\t\tthis.removeClass('LEAVE-END');\n\t});\n\n\tthis.init = function () {\n\t\tthis.addClass('LEAVE LEAVE-END');\n\t};\n\n\tthis.okay = function () {\n\t\tthis.game.exit();\n\t};\n\n\tthis.cancel = function () {\n\t\tthis.leave();\n\t};\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wcmludG1hc3Rlci9zb3VyY2UvanMvY29tcG9uZW50cy9zY3JlZW4tcXVpdC9iZWhhdmlvci5qcz85Mzk3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxZQUFZOzs7QUFHNUMsS0FBSSxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsVUFBVSxNQUFNLEVBQUU7QUFDMUMsTUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDakMsT0FBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztHQUMzQjtFQUNELENBQUMsQ0FBQzs7QUFFSCxLQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxVQUFVLE1BQU0sRUFBRTtBQUNwQyxNQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0VBQzlCLENBQUMsQ0FBQzs7QUFFSCxLQUFJLENBQUMsSUFBSSxHQUFHLFlBQVk7QUFDdkIsTUFBSSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0VBQ2pDLENBQUM7O0FBRUYsS0FBSSxDQUFDLElBQUksR0FBRyxZQUFZO0FBQ3ZCLE1BQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7RUFDakIsQ0FBQzs7QUFFRixLQUFJLENBQUMsTUFBTSxHQUFHLFlBQVk7QUFDekIsTUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0VBQ2IsQ0FBQztDQUVGLENBQUMiLCJmaWxlIjoiOC5qcyIsInNvdXJjZXNDb250ZW50IjpbInBsLmdhbWUuY29tcG9uZW50KCdzY3JlZW4tcXVpdCcsIGZ1bmN0aW9uICgpIHtcblxuXHQvLyBUT0RPOiBNYWtlIGFuIGF1dG9tYXRlZCB3YXkgdG8gaGFuZGxlIHRoaXNcblx0dGhpcy5vbigndHJhbnNpdGlvbmVuZCcsIGZ1bmN0aW9uIChfZXZlbnQpIHtcblx0XHRpZiAodGhpcy5zdGF0ZSh0aGlzLlNUQVRFLkxFQVZFKSkge1xuXHRcdFx0dGhpcy5hZGRDbGFzcygnTEVBVkUtRU5EJyk7XHRcblx0XHR9XG5cdH0pO1xuXG5cdHRoaXMub24oJ3VpLW9wZW4nLCBmdW5jdGlvbiAoX2V2ZW50KSB7XG5cdFx0dGhpcy5yZW1vdmVDbGFzcygnTEVBVkUtRU5EJyk7XG5cdH0pO1xuXG5cdHRoaXMuaW5pdCA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLmFkZENsYXNzKCdMRUFWRSBMRUFWRS1FTkQnKTtcblx0fTtcblx0XG5cdHRoaXMub2theSA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLmdhbWUuZXhpdCgpO1xuXHR9O1xuXG5cdHRoaXMuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMubGVhdmUoKTtcblx0fTtcblxufSk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9wcmludG1hc3Rlci9zb3VyY2UvanMvY29tcG9uZW50cy9zY3JlZW4tcXVpdC9iZWhhdmlvci5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 9 */
/***/ function(module, exports) {

	eval("pl.game.component('title', function () {\n\n\tthis.ready = function () {\n\t\tthis.open();\n\t\tthis.audio.background.play();\n\t\tthis.delay(1500, function () {\n\t\t\tthis.complete();\n\t\t});\n\t};\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wcmludG1hc3Rlci9zb3VyY2UvanMvY29tcG9uZW50cy90aXRsZS9iZWhhdmlvci5qcz9jNTM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxZQUFZOztBQUV0QyxLQUFJLENBQUMsS0FBSyxHQUFHLFlBQVk7QUFDeEIsTUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osTUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDN0IsTUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsWUFBWTtBQUM1QixPQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7R0FDaEIsQ0FBQyxDQUFDO0VBQ0gsQ0FBQztDQUVGLENBQUMiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbInBsLmdhbWUuY29tcG9uZW50KCd0aXRsZScsIGZ1bmN0aW9uICgpIHtcblxuXHR0aGlzLnJlYWR5ID0gZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMub3BlbigpO1xuXHRcdHRoaXMuYXVkaW8uYmFja2dyb3VuZC5wbGF5KCk7XG5cdFx0dGhpcy5kZWxheSgxNTAwLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aGlzLmNvbXBsZXRlKCk7XG5cdFx0fSk7XG5cdH07XG5cbn0pO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9wcmludG1hc3Rlci9zb3VyY2UvanMvY29tcG9uZW50cy90aXRsZS9iZWhhdmlvci5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 10 */
/***/ function(module, exports) {

	eval("pl.game.component('frame', function () {\n\n\tthis.start = function () {\n\t\tvar bgSound, voSound;\n\n\t\tbgSound = pl.util.resolvePath(this, 'audio.background[0]?');\n\t\tvoSound = pl.util.resolvePath(this, 'audio.voiceOver[0]?');\n\n\t\tif (bgSound) bgSound.play();\n\t\tif (voSound && !voSound.hasAttribute(\"pl-dontautoplay\")) voSound.play();\n\n\t\tif (this.hasOwnProperty('entities') && this.entities[0]) this.entities[0].start();\n\n\t\treturn this;\n\t};\n\n\tthis.handleProperty({\n\t\ttitle: function title(_node, _name, _value) {\n\t\t\tif (this.is(_node)) {\n\t\t\t\tthis.find('.frame').addClass('title');\n\t\t\t\tthis.game.defineRule('.experiment:nth-of-type(' + (this.screen.index() + 1) + ') .frame-component .frame.title::before', {\n\t\t\t\t\tbackgroundImage: 'url(' + _value + ')'\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\tthis.on('ui-open', function (_event) {\n\t\tif (this.isReady) {\n\t\t\tthis.start();\n\t\t}\n\n\t\tif (this === _event.targetScope) {\n\t\t\tif (!(this.hasOwnProperty('isComplete') && this.isComplete) && !(this.hasOwnProperty('requiredQueue') && this.requiredQueue && this.requiredQueue.length)) {\n\t\t\t\tthis.complete();\n\t\t\t}\n\t\t}\n\t});\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wcmludG1hc3Rlci9zb3VyY2UvanMvY29tcG9uZW50cy9mcmFtZS9iZWhhdmlvci5qcz81MWYxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxZQUFZOztBQUV0QyxLQUFJLENBQUMsS0FBSyxHQUFHLFlBQVk7QUFDeEIsTUFBSSxPQUFPLEVBQUUsT0FBTyxDQUFDOztBQUVyQixTQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLHNCQUFzQixDQUFDLENBQUM7QUFDNUQsU0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxxQkFBcUIsQ0FBQyxDQUFDOztBQUUzRCxNQUFJLE9BQU8sRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDNUIsTUFBSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDOztBQUV4RSxNQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDOztBQUVsRixTQUFPLElBQUksQ0FBQztFQUNaLENBQUM7O0FBRUYsS0FBSSxDQUFDLGNBQWMsQ0FBQztBQUNuQixPQUFLLEVBQUUsZUFBVSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRTtBQUN0QyxPQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDbkIsUUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDdEMsUUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsMEJBQTBCLElBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBQyxDQUFDLENBQUMsR0FBQyx5Q0FBeUMsRUFBRTtBQUNsSCxvQkFBZSxFQUFFLE1BQU0sR0FBRSxNQUFNLEdBQUUsR0FBRztLQUNwQyxDQUFDLENBQUM7SUFDSDtHQUNEO0VBQ0QsQ0FBQyxDQUFDOztBQUVILEtBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLFVBQVUsTUFBTSxFQUFFO0FBQ3BDLE1BQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtBQUNqQixPQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7R0FDYjs7QUFFRCxNQUFJLElBQUksS0FBSyxNQUFNLENBQUMsV0FBVyxFQUFFO0FBQ2hDLE9BQUksRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLElBQUssSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBRSxFQUFFO0FBQzVKLFFBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNoQjtHQUNEO0VBQ0QsQ0FBQyxDQUFDO0NBRUgsQ0FBQyIsImZpbGUiOiIxMC5qcyIsInNvdXJjZXNDb250ZW50IjpbInBsLmdhbWUuY29tcG9uZW50KCdmcmFtZScsIGZ1bmN0aW9uICgpIHtcblx0XG5cdHRoaXMuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIGJnU291bmQsIHZvU291bmQ7XG5cblx0XHRiZ1NvdW5kID0gcGwudXRpbC5yZXNvbHZlUGF0aCh0aGlzLCAnYXVkaW8uYmFja2dyb3VuZFswXT8nKTtcblx0XHR2b1NvdW5kID0gcGwudXRpbC5yZXNvbHZlUGF0aCh0aGlzLCAnYXVkaW8udm9pY2VPdmVyWzBdPycpO1xuXG5cdFx0aWYgKGJnU291bmQpIGJnU291bmQucGxheSgpO1xuXHRcdGlmICh2b1NvdW5kICYmICF2b1NvdW5kLmhhc0F0dHJpYnV0ZShcInBsLWRvbnRhdXRvcGxheVwiKSkgdm9Tb3VuZC5wbGF5KCk7XG5cblx0XHRpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eSgnZW50aXRpZXMnKSAmJiB0aGlzLmVudGl0aWVzWzBdKSB0aGlzLmVudGl0aWVzWzBdLnN0YXJ0KCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHR0aGlzLmhhbmRsZVByb3BlcnR5KHtcblx0XHR0aXRsZTogZnVuY3Rpb24gKF9ub2RlLCBfbmFtZSwgX3ZhbHVlKSB7XG5cdFx0XHRpZiAodGhpcy5pcyhfbm9kZSkpIHtcblx0XHRcdFx0dGhpcy5maW5kKCcuZnJhbWUnKS5hZGRDbGFzcygndGl0bGUnKTtcblx0XHRcdFx0dGhpcy5nYW1lLmRlZmluZVJ1bGUoJy5leHBlcmltZW50Om50aC1vZi10eXBlKCcrKHRoaXMuc2NyZWVuLmluZGV4KCkrMSkrJykgLmZyYW1lLWNvbXBvbmVudCAuZnJhbWUudGl0bGU6OmJlZm9yZScsIHtcblx0XHRcdFx0XHRiYWNrZ3JvdW5kSW1hZ2U6ICd1cmwoJysgX3ZhbHVlICsnKSdcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHR0aGlzLm9uKCd1aS1vcGVuJywgZnVuY3Rpb24gKF9ldmVudCkge1xuXHRcdGlmICh0aGlzLmlzUmVhZHkpIHtcblx0XHRcdHRoaXMuc3RhcnQoKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcyA9PT0gX2V2ZW50LnRhcmdldFNjb3BlKSB7XG5cdFx0XHRpZiAoISh0aGlzLmhhc093blByb3BlcnR5KCdpc0NvbXBsZXRlJykgJiYgdGhpcy5pc0NvbXBsZXRlKSAmJiAhKHRoaXMuaGFzT3duUHJvcGVydHkoJ3JlcXVpcmVkUXVldWUnKSAmJiAodGhpcy5yZXF1aXJlZFF1ZXVlICYmIHRoaXMucmVxdWlyZWRRdWV1ZS5sZW5ndGgpKSkge1xuXHRcdFx0XHR0aGlzLmNvbXBsZXRlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxufSk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3ByaW50bWFzdGVyL3NvdXJjZS9qcy9jb21wb25lbnRzL2ZyYW1lL2JlaGF2aW9yLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 11 */
/***/ function(module, exports) {

	eval("pl.game.component('score', function () {\n\n\tthis.value = 0;\n\n\tthis.entity('.board', function () {\n\n\t\tthis.template = null;\n\n\t\tthis.ready = function () {\n\t\t\tthis.template = this.html();\n\t\t};\n\n\t\tthis.render = function () {\n\t\t\tthis.html(this.template.replace('{{score}}', this.value));\n\t\t\treturn this;\n\t\t};\n\t});\n\n\tthis.init = function () {\n\t\tthis.screen.require(this);\n\t};\n\n\tthis.ready = function () {\n\t\tthis.board.render();\n\t};\n\n\tthis.up = function (_count) {\n\t\tthis.value += _count || 1;\n\n\t\tthis.board.render();\n\n\t\tconsole.log('score', this.value, this.properties.max);\n\n\t\tif (this.value == this.properties.max) {\n\t\t\tconsole.log('oh word');\n\t\t\tthis.complete();\n\t\t}\n\n\t\treturn this;\n\t};\n\n\tthis.down = function (_count) {\n\t\tthis.value -= _count || 1;\n\n\t\tthis.board.render();\n\n\t\tif (this.value == this.properties.max) {\n\t\t\tthis.complete();\n\t\t}\n\n\t\treturn this;\n\t};\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wcmludG1hc3Rlci9zb3VyY2UvanMvY29tcG9uZW50cy9zY29yZS9iZWhhdmlvci5qcz9kYTk0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxZQUFZOztBQUV0QyxLQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQzs7QUFFZixLQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxZQUFZOztBQUVqQyxNQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQzs7QUFFckIsTUFBSSxDQUFDLEtBQUssR0FBRyxZQUFZO0FBQ3hCLE9BQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0dBQzVCLENBQUM7O0FBRUYsTUFBSSxDQUFDLE1BQU0sR0FBRyxZQUFZO0FBQ3pCLE9BQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQzFELFVBQU8sSUFBSSxDQUFDO0dBQ1osQ0FBQztFQUVGLENBQUMsQ0FBQzs7QUFFSCxLQUFJLENBQUMsSUFBSSxHQUFHLFlBQVk7QUFDdkIsTUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7RUFDMUIsQ0FBQzs7QUFFRixLQUFJLENBQUMsS0FBSyxHQUFHLFlBQVk7QUFDeEIsTUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztFQUNwQixDQUFDOztBQUVGLEtBQUksQ0FBQyxFQUFFLEdBQUcsVUFBVSxNQUFNLEVBQUU7QUFDM0IsTUFBSSxDQUFDLEtBQUssSUFBRyxNQUFNLElBQUksQ0FBQyxDQUFDOztBQUV6QixNQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDOztBQUVwQixTQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDOztBQUVyRCxNQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7QUFDdEMsVUFBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN2QixPQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7R0FDaEI7O0FBRUQsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDOztBQUVGLEtBQUksQ0FBQyxJQUFJLEdBQUcsVUFBVSxNQUFNLEVBQUU7QUFDN0IsTUFBSSxDQUFDLEtBQUssSUFBRyxNQUFNLElBQUksQ0FBQyxDQUFDOztBQUV6QixNQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDOztBQUVwQixNQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7QUFDdEMsT0FBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0dBQ2hCOztBQUVELFNBQU8sSUFBSSxDQUFDO0VBQ1osQ0FBQztDQUVGLENBQUMiLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJwbC5nYW1lLmNvbXBvbmVudCgnc2NvcmUnLCBmdW5jdGlvbiAoKSB7XG5cblx0dGhpcy52YWx1ZSA9IDA7XG5cblx0dGhpcy5lbnRpdHkoJy5ib2FyZCcsIGZ1bmN0aW9uICgpIHtcblx0XHRcblx0XHR0aGlzLnRlbXBsYXRlID0gbnVsbDtcblxuXHRcdHRoaXMucmVhZHkgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aGlzLnRlbXBsYXRlID0gdGhpcy5odG1sKCk7XG5cdFx0fTtcblxuXHRcdHRoaXMucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhpcy5odG1sKHRoaXMudGVtcGxhdGUucmVwbGFjZSgne3tzY29yZX19JywgdGhpcy52YWx1ZSkpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fTtcblxuXHR9KTtcblxuXHR0aGlzLmluaXQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5zY3JlZW4ucmVxdWlyZSh0aGlzKTtcblx0fTtcblxuXHR0aGlzLnJlYWR5ID0gZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMuYm9hcmQucmVuZGVyKCk7XG5cdH07XG5cblx0dGhpcy51cCA9IGZ1bmN0aW9uIChfY291bnQpIHtcblx0XHR0aGlzLnZhbHVlKz0gX2NvdW50IHx8IDE7XG5cblx0XHR0aGlzLmJvYXJkLnJlbmRlcigpO1xuXG5cdFx0Y29uc29sZS5sb2coJ3Njb3JlJywgdGhpcy52YWx1ZSwgdGhpcy5wcm9wZXJ0aWVzLm1heClcblxuXHRcdGlmICh0aGlzLnZhbHVlID09IHRoaXMucHJvcGVydGllcy5tYXgpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdvaCB3b3JkJyk7XG5cdFx0XHR0aGlzLmNvbXBsZXRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0dGhpcy5kb3duID0gZnVuY3Rpb24gKF9jb3VudCkge1xuXHRcdHRoaXMudmFsdWUtPSBfY291bnQgfHwgMTtcblxuXHRcdHRoaXMuYm9hcmQucmVuZGVyKCk7XG5cdFx0XG5cdFx0aWYgKHRoaXMudmFsdWUgPT0gdGhpcy5wcm9wZXJ0aWVzLm1heCkge1xuXHRcdFx0dGhpcy5jb21wbGV0ZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG59KTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vcHJpbnRtYXN0ZXIvc291cmNlL2pzL2NvbXBvbmVudHMvc2NvcmUvYmVoYXZpb3IuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 12 */
/***/ function(module, exports) {

	eval("pl.game.component('reveal', function () {\n\n\tthis.item = function (_id) {\n\t\tvar vo, index;\n\n\t\tif (typeof _id === 'number') {\n\t\t\tthis.select(this.find('li').eq(_id));\n\t\t\tthis.audio.voiceOver[_id].play();\n\t\t} else if (typeof _id === 'string') {\n\t\t\tif (this[_id]) {\n\t\t\t\tthis.select(this[_id]);\n\n\t\t\t\tif (this.audio) {\n\t\t\t\t\tindex = this[_id].index();\n\t\t\t\t\tvo = this.audio.voiceOver[_id] || this.audio.voiceOver[index];\n\n\t\t\t\t\tif (vo) vo.play();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wcmludG1hc3Rlci9zb3VyY2UvanMvY29tcG9uZW50cy9yZXZlYWwvYmVoYXZpb3IuanM/ZmY5YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsWUFBWTs7QUFFdkMsS0FBSSxDQUFDLElBQUksR0FBRyxVQUFVLEdBQUcsRUFBRTtBQUMxQixNQUFJLEVBQUUsRUFBRSxLQUFLLENBQUM7O0FBRWQsTUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7QUFDNUIsT0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3JDLE9BQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0dBQ2pDLE1BRUksSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7QUFDakMsT0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDZCxRQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDOztBQUV2QixRQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7QUFDZixVQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQzFCLE9BQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQzs7QUFFOUQsU0FBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0tBQ2xCO0lBQ0Q7R0FDRDtFQUNELENBQUM7Q0FDRixDQUFDIiwiZmlsZSI6IjEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsicGwuZ2FtZS5jb21wb25lbnQoJ3JldmVhbCcsIGZ1bmN0aW9uICgpIHtcblxuXHR0aGlzLml0ZW0gPSBmdW5jdGlvbiAoX2lkKSB7XG5cdFx0dmFyIHZvLCBpbmRleDtcblxuXHRcdGlmICh0eXBlb2YgX2lkID09PSAnbnVtYmVyJykge1xuXHRcdFx0dGhpcy5zZWxlY3QodGhpcy5maW5kKCdsaScpLmVxKF9pZCkpO1xuXHRcdFx0dGhpcy5hdWRpby52b2ljZU92ZXJbX2lkXS5wbGF5KCk7XG5cdFx0fVxuXHRcdFx0XG5cdFx0ZWxzZSBpZiAodHlwZW9mIF9pZCA9PT0gJ3N0cmluZycpIHtcblx0XHRcdGlmICh0aGlzW19pZF0pIHtcblx0XHRcdFx0dGhpcy5zZWxlY3QodGhpc1tfaWRdKTtcblxuXHRcdFx0XHRpZiAodGhpcy5hdWRpbykge1xuXHRcdFx0XHRcdGluZGV4ID0gdGhpc1tfaWRdLmluZGV4KCk7XG5cdFx0XHRcdFx0dm8gPSB0aGlzLmF1ZGlvLnZvaWNlT3ZlcltfaWRdIHx8IHRoaXMuYXVkaW8udm9pY2VPdmVyW2luZGV4XTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZiAodm8pIHZvLnBsYXkoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn0pO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9wcmludG1hc3Rlci9zb3VyY2UvanMvY29tcG9uZW50cy9yZXZlYWwvYmVoYXZpb3IuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 13 */
/***/ function(module, exports) {

	eval("pl.game.component('multiple-choice', function () {\n\n\tfunction validateAnswer(_scope) {\n\t\tvar answers;\n\n\t\tif (_scope.properties.correct) {\n\t\t\tanswers = _scope.properties.correct.split(/\\s*,\\s*/);\n\n\t\t\tif (~answers.indexOf(String(_scope.getSelected().index()))) {\n\t\t\t\t_scope.complete();\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tthis.answer = function () {\n\t\tif (this.event) {\n\t\t\t$li = $(this.event.target).closest('li');\n\n\t\t\tif (!this.isComplete && this.select($li)) {\n\t\t\t\tvalidateAnswer(this);\n\t\t\t}\n\t\t}\n\t};\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wcmludG1hc3Rlci9zb3VyY2UvanMvY29tcG9uZW50cy9tdWx0aXBsZS1jaG9pY2UvYmVoYXZpb3IuanM/M2Q1OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsRUFBRSxZQUFZOztBQUVoRCxVQUFTLGNBQWMsQ0FBRSxNQUFNLEVBQUU7QUFDaEMsTUFBSSxPQUFPLENBQUM7O0FBRVosTUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRTtBQUM5QixVQUFPLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDOztBQUVyRCxPQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRTtBQUMzRCxVQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbEI7R0FDRDs7QUFFRCxTQUFPLEtBQUssQ0FBQztFQUNiOztBQUVELEtBQUksQ0FBQyxNQUFNLEdBQUcsWUFBWTtBQUN6QixNQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7QUFDZixNQUFHLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDOztBQUV6QyxPQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQ3pDLGtCQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckI7R0FDRDtFQUNELENBQUM7Q0FFRixDQUFDIiwiZmlsZSI6IjEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsicGwuZ2FtZS5jb21wb25lbnQoJ211bHRpcGxlLWNob2ljZScsIGZ1bmN0aW9uICgpIHtcblxuXHRmdW5jdGlvbiB2YWxpZGF0ZUFuc3dlciAoX3Njb3BlKSB7XG5cdFx0dmFyIGFuc3dlcnM7XG5cblx0XHRpZiAoX3Njb3BlLnByb3BlcnRpZXMuY29ycmVjdCkge1xuXHRcdFx0YW5zd2VycyA9IF9zY29wZS5wcm9wZXJ0aWVzLmNvcnJlY3Quc3BsaXQoL1xccyosXFxzKi8pO1xuXG5cdFx0XHRpZiAofmFuc3dlcnMuaW5kZXhPZihTdHJpbmcoX3Njb3BlLmdldFNlbGVjdGVkKCkuaW5kZXgoKSkpKSB7XG5cdFx0XHRcdF9zY29wZS5jb21wbGV0ZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHRoaXMuYW5zd2VyID0gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0aGlzLmV2ZW50KSB7XG5cdFx0XHQkbGkgPSAkKHRoaXMuZXZlbnQudGFyZ2V0KS5jbG9zZXN0KCdsaScpO1xuXG5cdFx0XHRpZiAoIXRoaXMuaXNDb21wbGV0ZSAmJiB0aGlzLnNlbGVjdCgkbGkpKSB7XG5cdFx0XHRcdHZhbGlkYXRlQW5zd2VyKHRoaXMpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxufSk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9wcmludG1hc3Rlci9zb3VyY2UvanMvY29tcG9uZW50cy9tdWx0aXBsZS1jaG9pY2UvYmVoYXZpb3IuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 14 */
/***/ function(module, exports) {

	eval("pl.game.component('selectable', function () {\n\n\tthis.behavior('select', function (_target) {\n\t\tvar $target;\n\n\t\tif (this.event) {\n\t\t\t$target = $(this.event.target).closest('li');\n\n\t\t\tif (this.shouldSelect($target) !== false) {\n\t\t\t\treturn {\n\t\t\t\t\tmessage: $target.id(),\n\t\t\t\t\tbehaviorTarget: $target\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\tthis.proto(_target);\n\t\t}\n\n\t\treturn false;\n\t});\n\n\tthis.shouldSelect = function (_target) {\n\t\treturn true;\n\t};\n\n\tthis.deselectAll = function () {\n\t\tvar items = this.find('li');\n\t\tthis.deselect(items);\n\t\tthis.unhighlight(items);\n\t};\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wcmludG1hc3Rlci9zb3VyY2UvanMvY29tcG9uZW50cy9zZWxlY3RhYmxlL2JlaGF2aW9yLmpzP2U4NWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLFlBQVk7O0FBRTNDLEtBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLFVBQVUsT0FBTyxFQUFFO0FBQzFDLE1BQUksT0FBTyxDQUFDOztBQUVaLE1BQUksSUFBSSxDQUFDLEtBQUssRUFBRTtBQUNmLFVBQU8sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7O0FBRTdDLE9BQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxLQUFLLEVBQUU7QUFDekMsV0FBTztBQUNOLFlBQU8sRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFO0FBQ3JCLG1CQUFjLEVBQUUsT0FBTztLQUN2QixDQUFDO0lBQ0Y7R0FDRCxNQUVJO0FBQ0osT0FBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztHQUNwQjs7QUFFRCxTQUFPLEtBQUssQ0FBQztFQUNiLENBQUMsQ0FBQzs7QUFFSCxLQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsT0FBTyxFQUFFO0FBQ3RDLFNBQU8sSUFBSSxDQUFDO0VBQ1osQ0FBQzs7QUFFRixLQUFJLENBQUMsV0FBVyxHQUFHLFlBQVc7QUFDN0IsTUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM1QixNQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3JCLE1BQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7RUFDeEIsQ0FBQztDQUVGLENBQUMiLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJwbC5nYW1lLmNvbXBvbmVudCgnc2VsZWN0YWJsZScsIGZ1bmN0aW9uICgpIHtcblxuXHR0aGlzLmJlaGF2aW9yKCdzZWxlY3QnLCBmdW5jdGlvbiAoX3RhcmdldCkge1xuXHRcdHZhciAkdGFyZ2V0O1xuXG5cdFx0aWYgKHRoaXMuZXZlbnQpIHtcblx0XHRcdCR0YXJnZXQgPSAkKHRoaXMuZXZlbnQudGFyZ2V0KS5jbG9zZXN0KCdsaScpO1xuXG5cdFx0XHRpZiAodGhpcy5zaG91bGRTZWxlY3QoJHRhcmdldCkgIT09IGZhbHNlKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWVzc2FnZTogJHRhcmdldC5pZCgpLFxuXHRcdFx0XHRcdGJlaGF2aW9yVGFyZ2V0OiAkdGFyZ2V0XG5cdFx0XHRcdH07XG5cdFx0XHR9XHRcblx0XHR9XG5cblx0XHRlbHNlIHtcblx0XHRcdHRoaXMucHJvdG8oX3RhcmdldCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9KTtcblxuXHR0aGlzLnNob3VsZFNlbGVjdCA9IGZ1bmN0aW9uIChfdGFyZ2V0KSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH07XG5cblx0dGhpcy5kZXNlbGVjdEFsbCA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpdGVtcyA9IHRoaXMuZmluZCgnbGknKTtcblx0XHR0aGlzLmRlc2VsZWN0KGl0ZW1zKTtcblx0XHR0aGlzLnVuaGlnaGxpZ2h0KGl0ZW1zKTtcblx0fTtcblxufSk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3ByaW50bWFzdGVyL3NvdXJjZS9qcy9jb21wb25lbnRzL3NlbGVjdGFibGUvYmVoYXZpb3IuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 15 */
/***/ function(module, exports) {

	eval("pl.game.component('selectable-reveal', function () {\n\n\tthis.respond('select', function (_event) {\n\t\tvar index, stateMethod;\n\n\t\tindex = _event.message;\n\t\tstateMethod = this.properties.select_state || 'select';\n\n\t\tif (~index) {\n\t\t\tthis[stateMethod](_event.behaviorTarget);\n\t\t\tthis.reveal.item(index);\n\t\t}\n\t});\n\n\tthis.entity('selectable', function () {\n\n\t\tthis.shouldSelect = function (_$target) {\n\t\t\tif (_$target.prev().hasClass(this.STATE.HIGHLIGHTED) || _$target.index() === 0) {\n\t\t\t\treturn !this.screen.state(this.STATE.VOICE_OVER);\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\t});\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wcmludG1hc3Rlci9zb3VyY2UvanMvY29tcG9uZW50cy9zZWxlY3RhYmxlLXJldmVhbC9iZWhhdmlvci5qcz84NGRkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixFQUFFLFlBQVk7O0FBRWxELEtBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFVBQVUsTUFBTSxFQUFFO0FBQ3hDLE1BQUksS0FBSyxFQUFFLFdBQVcsQ0FBQzs7QUFFdkIsT0FBSyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7QUFDdkIsYUFBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxJQUFJLFFBQVEsQ0FBQzs7QUFFdkQsTUFBSSxDQUFDLEtBQUssRUFBRTtBQUNYLE9BQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDekMsT0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDeEI7RUFDRCxDQUFDLENBQUM7O0FBRUgsS0FBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsWUFBWTs7QUFFckMsTUFBSSxDQUFDLFlBQVksR0FBRyxVQUFVLFFBQVEsRUFBRTtBQUN2QyxPQUFJLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFO0FBQy9FLFdBQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2pEOztBQUVELFVBQU8sS0FBSyxDQUFDO0dBQ2IsQ0FBQztFQUVGLENBQUMsQ0FBQztDQUVILENBQUMiLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJwbC5nYW1lLmNvbXBvbmVudCgnc2VsZWN0YWJsZS1yZXZlYWwnLCBmdW5jdGlvbiAoKSB7XG5cdFxuXHR0aGlzLnJlc3BvbmQoJ3NlbGVjdCcsIGZ1bmN0aW9uIChfZXZlbnQpIHtcblx0XHR2YXIgaW5kZXgsIHN0YXRlTWV0aG9kO1xuXG5cdFx0aW5kZXggPSBfZXZlbnQubWVzc2FnZTtcblx0XHRzdGF0ZU1ldGhvZCA9IHRoaXMucHJvcGVydGllcy5zZWxlY3Rfc3RhdGUgfHwgJ3NlbGVjdCc7XG5cblx0XHRpZiAofmluZGV4KSB7XG5cdFx0XHR0aGlzW3N0YXRlTWV0aG9kXShfZXZlbnQuYmVoYXZpb3JUYXJnZXQpO1xuXHRcdFx0dGhpcy5yZXZlYWwuaXRlbShpbmRleCk7XG5cdFx0fVxuXHR9KTtcblxuXHR0aGlzLmVudGl0eSgnc2VsZWN0YWJsZScsIGZ1bmN0aW9uICgpIHtcblx0XHRcblx0XHR0aGlzLnNob3VsZFNlbGVjdCA9IGZ1bmN0aW9uIChfJHRhcmdldCkge1xuXHRcdFx0aWYgKF8kdGFyZ2V0LnByZXYoKS5oYXNDbGFzcyh0aGlzLlNUQVRFLkhJR0hMSUdIVEVEKSB8fCBfJHRhcmdldC5pbmRleCgpID09PSAwKSB7XG5cdFx0XHRcdHJldHVybiAhdGhpcy5zY3JlZW4uc3RhdGUodGhpcy5TVEFURS5WT0lDRV9PVkVSKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZhbHNlOyBcblx0XHR9O1xuXG5cdH0pO1xuXG59KTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3ByaW50bWFzdGVyL3NvdXJjZS9qcy9jb21wb25lbnRzL3NlbGVjdGFibGUtcmV2ZWFsL2JlaGF2aW9yLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 16 */
/***/ function(module, exports) {

	eval("pl.game.component('audio-sequence', function () {\n\n\tvar sounds = null;\n\n\tthis.on('ready', function (_event) {\n\t\tvar self = this;\n\n\t\tif (!this.is(_event.target)) return;\n\n\t\tsounds = this.find(\"> audio\");\n\t\tsounds.each(function (i, audio) {\n\t\t\taudio.onended = function () {\n\t\t\t\tif (sounds[i + 1]) self.screen.playSound(sounds[i + 1]);\n\t\t\t};\n\t\t});\n\t\tif (typeof this.properties.loop !== 'undefined') {\n\t\t\tsounds[sounds.length - 1].onended = this.start.bind(this);\n\t\t}\n\t});\n\n\tthis.start = function () {\n\t\tif (sounds[0] && this.screen.state(this.screen.STATE.OPEN)) this.screen.playSound(sounds[0]);\n\t};\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wcmludG1hc3Rlci9zb3VyY2UvanMvY29tcG9uZW50cy9hdWRpby1zZXF1ZW5jZS9iZWhhdmlvci5qcz9iMjhjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLFlBQVk7O0FBRS9DLEtBQUksTUFBTSxHQUFHLElBQUksQ0FBQzs7QUFFbEIsS0FBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDakMsTUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDOztBQUVoQixNQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsT0FBTzs7QUFFcEMsUUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDOUIsUUFBTSxDQUFDLElBQUksQ0FBQyxVQUFTLENBQUMsRUFBRSxLQUFLLEVBQUU7QUFDOUIsUUFBSyxDQUFDLE9BQU8sR0FBRyxZQUFXO0FBQzFCLFFBQUcsTUFBTSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkQsQ0FBQztHQUNGLENBQUMsQ0FBQztBQUNILE1BQUcsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksS0FBSyxXQUFXLEVBQUU7QUFDL0MsU0FBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQ3hEO0VBQ0QsQ0FBQyxDQUFDOztBQUVILEtBQUksQ0FBQyxLQUFLLEdBQUcsWUFBVztBQUN2QixNQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUM1RixDQUFDO0NBQ0YsQ0FBQyIsImZpbGUiOiIxNi5qcyIsInNvdXJjZXNDb250ZW50IjpbInBsLmdhbWUuY29tcG9uZW50KCdhdWRpby1zZXF1ZW5jZScsIGZ1bmN0aW9uICgpIHtcblx0XG5cdHZhciBzb3VuZHMgPSBudWxsO1xuXG5cdHRoaXMub24oJ3JlYWR5JywgZnVuY3Rpb24oX2V2ZW50KSB7XG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCF0aGlzLmlzKF9ldmVudC50YXJnZXQpKSByZXR1cm47XG5cblx0XHRzb3VuZHMgPSB0aGlzLmZpbmQoXCI+IGF1ZGlvXCIpO1xuXHRcdHNvdW5kcy5lYWNoKGZ1bmN0aW9uKGksIGF1ZGlvKSB7XG5cdFx0XHRhdWRpby5vbmVuZGVkID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKHNvdW5kc1tpKzFdKSBzZWxmLnNjcmVlbi5wbGF5U291bmQoc291bmRzW2krMV0pO1xuXHRcdFx0fTtcblx0XHR9KTtcblx0XHRpZih0eXBlb2YgdGhpcy5wcm9wZXJ0aWVzLmxvb3AgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRzb3VuZHNbc291bmRzLmxlbmd0aC0xXS5vbmVuZGVkID0gdGhpcy5zdGFydC5iaW5kKHRoaXMpO1xuXHRcdH1cblx0fSk7XG5cblx0dGhpcy5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmKHNvdW5kc1swXSAmJiB0aGlzLnNjcmVlbi5zdGF0ZSh0aGlzLnNjcmVlbi5TVEFURS5PUEVOKSkgdGhpcy5zY3JlZW4ucGxheVNvdW5kKHNvdW5kc1swXSk7XG5cdH07XG59KTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vcHJpbnRtYXN0ZXIvc291cmNlL2pzL2NvbXBvbmVudHMvYXVkaW8tc2VxdWVuY2UvYmVoYXZpb3IuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 17 */
/***/ function(module, exports) {

	eval("pl.game.component('modal', function () {\n\n\tthis.item = function (_id) {\n\t\tthis.select(this);\n\t\tthis.reveal.item(_id);\n\t};\n\n\tthis.close = function () {\n\t\tif (!this.screen.state(this.screen.STATE.VOICE_OVER) || this.game.demoMode) {\n\t\t\tthis.deselect(this);\n\t\t}\n\t};\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wcmludG1hc3Rlci9zb3VyY2UvanMvY29tcG9uZW50cy9tb2RhbC9iZWhhdmlvci5qcz85OWJmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxZQUFZOztBQUV0QyxLQUFJLENBQUMsSUFBSSxHQUFHLFVBQVMsR0FBRyxFQUFFO0FBQ3pCLE1BQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEIsTUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDdEIsQ0FBQzs7QUFFRixLQUFJLENBQUMsS0FBSyxHQUFHLFlBQVc7QUFDdkIsTUFBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQzFFLE9BQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDcEI7RUFDRCxDQUFDO0NBQ0YsQ0FBQyIsImZpbGUiOiIxNy5qcyIsInNvdXJjZXNDb250ZW50IjpbInBsLmdhbWUuY29tcG9uZW50KCdtb2RhbCcsIGZ1bmN0aW9uICgpIHtcblxuXHR0aGlzLml0ZW0gPSBmdW5jdGlvbihfaWQpIHtcblx0XHR0aGlzLnNlbGVjdCh0aGlzKTtcblx0XHR0aGlzLnJldmVhbC5pdGVtKF9pZCk7XG5cdH07XG5cdFxuXHR0aGlzLmNsb3NlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYoIXRoaXMuc2NyZWVuLnN0YXRlKHRoaXMuc2NyZWVuLlNUQVRFLlZPSUNFX09WRVIpIHx8IHRoaXMuZ2FtZS5kZW1vTW9kZSkge1xuXHRcdFx0dGhpcy5kZXNlbGVjdCh0aGlzKTtcblx0XHR9XG5cdH07XG59KTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vcHJpbnRtYXN0ZXIvc291cmNlL2pzL2NvbXBvbmVudHMvbW9kYWwvYmVoYXZpb3IuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ }
/******/ ]);