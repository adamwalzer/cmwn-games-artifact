/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	eval("/**\n * Defines the game scope and imports used component behaviors.\n */\n\n__webpack_require__(2);\n\n__webpack_require__(3);\n\n__webpack_require__(4);\n\n// INCLUDE USED COMPONENT BEHAVIORS HERE\n\n__webpack_require__(5);\n\n__webpack_require__(6);\n\n__webpack_require__(7);\n\n__webpack_require__(8);\n\n__webpack_require__(9);\n\n__webpack_require__(10);\n\n__webpack_require__(11);\n\n__webpack_require__(12);\n\n__webpack_require__(13);\n\n__webpack_require__(14);\n\n// Sea Turtle game scope.\n// This selects the element `#sea-turtle`.\n//\npl.game('sea-turtle', function () {\n\n\t/**\n  * Make the title screen auto display when its ready.\n  * @override\n  */\n\tthis.screen('title', function () {\n\n\t\tthis.on('ready', function (_event) {\n\t\t\t// Screens are display:none then when READY get display:block.\n\t\t\t// When a screen is OPEN then it transitions a transform,\n\t\t\t// the delay is to prevent the transition failing to play\n\t\t\t// because of collision of these styles.\n\t\t\t//\n\t\t\tif (this.is(_event.target)) this.delay(0, this.open);\n\t\t});\n\t});\n\n\tthis.screen('video', function () {\n\n\t\tthis.on('ui-open', function () {\n\t\t\tthis.video.start();\n\t\t});\n\n\t\tthis.on('ui-close', function () {\n\t\t\tthis.video.pause();\n\t\t});\n\t});\n\n\tthis.screen('globe', function () {\n\n\t\tvar characters;\n\n\t\tthis.entity('characters', function () {\n\t\t\t/**\n    * Responds to the \"mousedown\" event on the capture phase\n    * to prevent propagation of the event.\n    *\n    * This will prevent the draggables inside to not be\n    * draggable when the draggable or the container (this)\n    * has the DISABLED UIState.\n    */\n\t\t\tfunction preventDrag(_event) {\n\t\t\t\tvar $target, isDisabled;\n\n\t\t\t\t$target = $(_event.target);\n\t\t\t\tisDisabled = [this.state(this.STATE.DISABLED), $target.state(this.STATE.DISABLED)];\n\n\t\t\t\tif (~isDisabled.indexOf(true)) {\n\t\t\t\t\t_event.stopPropagation();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.$active = null;\n\n\t\t\tthis.on('drag-start', function (_event) {\n\t\t\t\t(this.$active = _event.state.$draggable.closest('li')).addClass('ACTIVE');\n\t\t\t});\n\n\t\t\tthis.on('initialize', function () {\n\t\t\t\t// Add a vanilajs event listener attached to the capture event propagation phase.\n\t\t\t\tthis.listen('mousedown', true, this.bind(preventDrag));\n\t\t\t});\n\n\t\t\tthis.respond('answer', function (_event) {\n\t\t\t\tif (_event.message === 'correct') {\n\t\t\t\t\tthis.disable(this.$active.removeClass('ACTIVE'));\n\t\t\t\t} else {\n\t\t\t\t\tthis.$active.removeClass('ACTIVE');\n\t\t\t\t}\n\n\t\t\t\tthis.enable();\n\t\t\t});\n\t\t});\n\n\t\t/**\n   * The reveal compoent holds the correct/incorrect splash\n   * images. So its responsible for handling the multiple\n   * choice \"answer\" behavior by displaying the\n   * \"correct\" or \"incorrect\" image.\n   */\n\t\tthis.entity('reveal', function () {\n\n\t\t\tthis.respond('answer', function (_event) {\n\t\t\t\tvar message = this[_event.message];\n\t\t\t\tif (message && !this.isComplete) this.select(message);\n\t\t\t});\n\t\t});\n\n\t\tthis.STATE.COMPLETE = \"COMPLETE\";\n\n\t\t/**\n   * Nodes, including the node of this screen, with a\n   * attribute of pl-bg will get a background-image style\n   * and the resource preloaded and collected for watching.\n   */\n\t\tthis.handleProperty({\n\t\t\tbg: function bg(_node, _name, _value) {\n\t\t\t\tvar img = new Image();\n\n\t\t\t\tif (!characters) characters = [];\n\n\t\t\t\timg.src = _value;\n\t\t\t\tcharacters.push(img);\n\t\t\t\t$(_node).css('background-image', 'url(' + _value + ')');\n\t\t\t}\n\t\t});\n\n\t\t/**\n   * When the screen has initialized, start watching the\n   * background images we collected.\n   */\n\t\tthis.on('initialize', function (_event) {\n\t\t\tif (!this.is(_event.targetScope)) return;\n\t\t\tthis.watchAssets(characters);\n\t\t\tthis.area = this.find('.area');\n\t\t});\n\n\t\t/**\n   * When the character is droped, reveal the question.\n   */\n\t\tthis.respond('drop', function (_event) {\n\t\t\tvar $character, sfx;\n\n\t\t\t$character = _event.behaviorTarget.parent();\n\t\t\tsfx = pl.util.resolvePath(this, 'dropzone.audio.sfx.drop');\n\n\t\t\tthis.area.find('img:eq(' + $character.index() + ')').addClass('show active');\n\t\t\tthis.reveal.item($character.index() + 1);\n\n\t\t\tthis.characters.disable();\n\t\t\tthis.deselect(this.reveal.find('img.response'));\n\n\t\t\tif (sfx) sfx.play();\n\t\t});\n\n\t\tthis.respond('missed', function (_event) {\n\t\t\t_event.behaviorTarget.parent().removeClass('ACTIVE');\n\t\t});\n\n\t\tthis.respond('answer', function (_event) {\n\t\t\tvar sfx;\n\n\t\t\tsfx = pl.util.resolvePath(this, 'audio.sfx.' + _event.message);\n\n\t\t\tif (_event.targetScope.state(this.STATE.COMPLETE)) {\n\t\t\t\tthis.area.find('img.active').removeClass('active');\n\t\t\t} else {\n\t\t\t\tthis.area.find('img.active').removeClass('show active');\n\t\t\t}\n\n\t\t\tif (sfx) sfx.play();\n\t\t});\n\n\t\tthis.respond('complete', function (_event) {\n\t\t\tif (this.reveal.is(_event.targetScope)) {\n\t\t\t\tthis.reveal.item('wellDone');\n\t\t\t}\n\t\t});\n\n\t\tthis.start = function () {\n\t\t\t// take advantage of the screen's start()\n\t\t\tthis.proto();\n\t\t\tthis.reveal.item(0);\n\t\t};\n\t});\n\n\tthis.screen('flip', function () {\n\t\tthis.next = function () {\n\t\t\tthis.game.quit.okay();\n\t\t};\n\t});\n\n\t/**\n  * Creates a style noded with the given style definition and selector.\n  * @arg {string} _selector - The CSS selector for the rule.\n  * @arg {object} _def - Literal with the rule props.\n  * @returns {string} The generated CSS.\n  *\n  * @todo Move to JS-Lib. Make sure new rules get added the same node.\n  */\n\tthis.defineRule = function (_selector_scope, _selector_def, _definition) {\n\t\tvar _scope, _selector, source, prop, value;\n\t\t// Resolve arguments.\n\t\t_selector_scope.$els ? ( // (A) if we are a scope\n\t\t_scope = _selector_scope, // assign scope arg...\n\t\ttypeof _selector_def === 'string' ? // ...also, (B) if arg 2 is a string\n\t\t_selector = _scope.address() + _selector_def : ( // assing selector arg with scope address:\n\t\t_selector = _scope.address(), _definition = _selector_def)) : ( // (B) otherwise, assign selector arg to scope address, also assing definition arg\n\t\t_selector = _selector_scope, _definition = _selector_def); // (A) otherwise, assing selector and definition args.\n\n\t\tsource = _selector + ' {';\n\n\t\tfor (prop in _definition) {\n\t\t\tif (!_definition.hasOwnProperty(prop)) continue;\n\t\t\tvalue = _definition[prop];\n\t\t\tsource += prop.replace(/([A-Z]+)/g, '-$1').toLowerCase() + ': ' + value + ';';\n\t\t}\n\n\t\tsource += '}';\n\n\t\t$('<style type=\"text/css\" class=\"dynanic-styles\">' + source + '</style>').appendTo(document.body);\n\n\t\treturn source;\n\t};\n});//@ sourceMappingURL=data:application/json;base64,");

/***/ },
/* 2 */
/***/ function(module, exports) {

	eval("/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/build/\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\n/**\\n * Boot file for the Play library.\\n *\\n * @module\\n *\\n * @author Micah Rolon <micah@ginasink.com>\\n *\\n * @requires jQExtentions\\n * @requires play\\n */\\n\\n__webpack_require__(4);\\n\\nvar _play = __webpack_require__(15);\\n\\nvar _play2 = _interopRequireDefault(_play);\\n\\n/**\\n * Begin running the library\\n */\\nfunction run() {\\n  _play2['default'].game.run();\\n}\\n\\n// export namespace to global object.\\nwindow.play = window.pl = _play2['default'];\\n\\n// Invoke 'run' when DOM has finished loading.\\ndocument.addEventListener('DOMContentLoaded', run, false);//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvbWFpbi5qcz82NDgwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7b0JBVU8sQ0FBYzs7Z0NBQ0osRUFBTTs7Ozs7OztBQUt2QixTQUFTLEdBQUcsR0FBSTtBQUNmLG9CQUFLLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztDQUNoQjs7O0FBR0QsTUFBTSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsRUFBRSxvQkFBTyxDQUFDOzs7QUFHL0IsUUFBUSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQm9vdCBmaWxlIGZvciB0aGUgUGxheSBsaWJyYXJ5LlxuICpcbiAqIEBtb2R1bGVcbiAqXG4gKiBAYXV0aG9yIE1pY2FoIFJvbG9uIDxtaWNhaEBnaW5hc2luay5jb20+XG4gKlxuICogQHJlcXVpcmVzIGpRRXh0ZW50aW9uc1xuICogQHJlcXVpcmVzIHBsYXlcbiAqL1xuaW1wb3J0ICdqUUV4dGVudGlvbnMnO1xuaW1wb3J0IHBsYXkgZnJvbSAncGxheSc7XG5cbi8qKlxuICogQmVnaW4gcnVubmluZyB0aGUgbGlicmFyeVxuICovXG5mdW5jdGlvbiBydW4gKCkge1xuXHRwbGF5LmdhbWUucnVuKCk7XG59XG5cbi8vIGV4cG9ydCBuYW1lc3BhY2UgdG8gZ2xvYmFsIG9iamVjdC5cbndpbmRvdy5wbGF5ID0gd2luZG93LnBsID0gcGxheTtcblxuLy8gSW52b2tlICdydW4nIHdoZW4gRE9NIGhhcyBmaW5pc2hlZCBsb2FkaW5nLlxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIHJ1biwgZmFsc2UpO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zb3VyY2UvbWFpbi5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"module.exports = __webpack_require__(3);//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9oZWxwZXJzL2ludGVyb3AtcmVxdWlyZS1kZWZhdWx0LmpzP2U0ZGEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzXCIpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9oZWxwZXJzL2ludGVyb3AtcmVxdWlyZS1kZWZhdWx0LmpzXG4gKiogbW9kdWxlIGlkID0gMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\teval(\"\\\"use strict\\\";\\n\\nexports.__esModule = true;\\n\\nexports.default = function (obj) {\\n  return obj && obj.__esModule ? obj : {\\n    default: obj\\n  };\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcz83ZDI1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgZGVmYXVsdDogb2JqXG4gIH07XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qc1xuICoqIG1vZHVsZSBpZCA9IDNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\n/**\\n * Extentions to jQuery used by the library.\\n * \\n * @module\\n * @author Micah Rolon <micah@ginasink.com>\\n *\\n * @requires types/Dimensions\\n * @requires Matrix\\n */\\n\\nvar _typesDimensions = __webpack_require__(5);\\n\\nvar _libMatrix = __webpack_require__(14);\\n\\nvar _libMatrix2 = _interopRequireDefault(_libMatrix);\\n\\n/**\\n * jQuery's prototype\\n * @external jQuery\\n * @see {@link http://api.jquery.com/}\\n */\\n\\n(function () {\\n\\t/**\\n  * Resolves the scope for each of the set of matched nodes.\\n  * @function external:jQuery#scope\\n  * @returns {Scope|array} Scope - for 1 result. array - for multiple.\\n  */\\n\\tthis.scope = function () {\\n\\t\\tvar result;\\n\\n\\t\\tresult = [];\\n\\n\\t\\tthis.each(function () {\\n\\t\\t\\tvar $node, scope;\\n\\n\\t\\t\\t$node = $(this);\\n\\t\\t\\tscope = $node.data('pl-scope');\\n\\n\\t\\t\\tif (!scope) {\\n\\t\\t\\t\\tscope = $node.closest('.pl-scope').data('pl-scope');\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (scope) result.push(scope);\\n\\t\\t});\\n\\n\\t\\treturn result.length > 1 ? result : result[0];\\n\\t};\\n\\n\\t/**\\n  * Resolves the id on the first node in the collection. The id can be sourced from a node's 'id', 'pl-id' or 'pl-component' arguments.\\n  * @function external:jQuery#id\\n  * @arg {string} [_set] Name to set as the node's id.\\n  * @returns {string} The resolved id.\\n  */\\n\\tthis.id = function (_set) {\\n\\t\\tif (_set !== undefined) {\\n\\t\\t\\t// Remove attribute.\\n\\t\\t\\tif (~['', null].indexOf(_set)) {\\n\\t\\t\\t\\tthis.attr('id', null);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If document already has the id defined then set as a unique library id.\\n\\t\\t\\tif ($(_set).length) {\\n\\t\\t\\t\\tthis.attr('pl-id', _set);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.attr('id', _set);\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this;\\n\\t\\t}\\n\\n\\t\\treturn this.attr('id') || this.attr('pl-id') || this.attr('pl-component');\\n\\t};\\n\\n\\t/**\\n  * Provides the 'relative' CSS selector for the first node in the collection.\\n  * @function external:jQuery#address\\n  * @returns {string}\\n  *\\n  * @example\\n  * // HTML: <div id=\\\"sweater\\\" class=\\\"wide\\\"></div>\\n  * $('#sweater').address() // div#sweater.wide\\n  */\\n\\tthis.address = function () {\\n\\t\\tvar tag, id, classes;\\n\\n\\t\\ttag = this[0].nodeName.toLowerCase();\\n\\t\\tid = this.attr('id');\\n\\t\\tclasses = this.attr('class') ? '.' + this.attr('class').split(' ').join('.') : '';\\n\\n\\t\\treturn tag + (id ? '#' + id : '') + classes;\\n\\t};\\n\\n\\t/**\\n  * Provides a node's UPPER CASE class names. Given '_test' it will check if the node has the class.\\n  * @function external:jQuery#state\\n  * @arg {string} [_test] The UPPER CASE class name to test on the first node in the collection.\\n  * @returns {string|array|boolean} string - for one result. array - for multiple. boolean - for tests.\\n  */\\n\\tthis.state = function (_test) {\\n\\t\\tvar classes;\\n\\n\\t\\tif (_test) return this.hasClass(_test.toUpperCase());\\n\\n\\t\\tclasses = (this.attr('class') || '').match(/[0-9A-Z]+(?:-[0-9A-Z]+)?/g);\\n\\n\\t\\treturn classes && (classes.length === 1 ? classes[0] : classes);\\n\\t};\\n\\n\\t/**\\n  * Provides the jQuery offset for the first node in the collection.\\n  * Given a point, all nodes in the collection will get {position: absolute;} to the corrdinates.\\n  * @function external:jQuery#absolutePosition\\n  * @returns {Point}\\n  */\\n\\tthis.absolutePosition = function () {\\n\\t\\tvar offset;\\n\\n\\t\\tif (!arguments.length) {\\n\\t\\t\\toffset = this.offset();\\n\\n\\t\\t\\treturn _typesDimensions.Point.create().set(offset.left, offset.top);\\n\\t\\t} else {\\n\\t\\t\\toffset = _typesDimensions.Point.create(arguments);\\n\\n\\t\\t\\tthis.css({\\n\\t\\t\\t\\tposition: 'absolute',\\n\\t\\t\\t\\ttop: offset.y,\\n\\t\\t\\t\\tleft: offset.x\\n\\t\\t\\t});\\n\\n\\t\\t\\treturn offset;\\n\\t\\t}\\n\\t};\\n\\n\\t/**\\n  * Sets a CSS matrix transform on all nodes in the collection. (overloaded)\\n  * @function external:jQuery#transform\\n  * @arg {number} [_scaleX] - scale x\\n  * @arg {number} [_shearY] - shear y\\n  * @arg {number} [_shearX] - shear x\\n  * @arg {number} [_scaleY] - scale y\\n  * @arg {number} [_translateX] - translate x\\n  * @arg {number} [_translateY] - translate y\\n  * @returns {Matrix}\\n  */\\n\\n\\t/**\\n  * Provides the CSS matrix transform for the first node in the collection.\\n  * @function external:jQuery#transform\\n  * @returns {Matrix}\\n  */\\n\\tthis.transform = function () {\\n\\t\\tvar t, matrix, is3d;\\n\\n\\t\\tmatrix = new _libMatrix2['default']();\\n\\n\\t\\tif (!arguments.length) {\\n\\t\\t\\tt = this.css('transform');\\n\\t\\t\\tis3d = !! ~t.indexOf('matrix3d');\\n\\n\\t\\t\\tif (t !== 'none') {\\n\\t\\t\\t\\tt = ((t.match(/\\\\(([,\\\\d\\\\.\\\\s\\\\-]+)\\\\)/) || [])[1] || '').split(/\\\\s*,\\\\s*/);\\n\\t\\t\\t\\tif (is3d) {\\n\\t\\t\\t\\t\\tt = (function (_matrix) {\\n\\t\\t\\t\\t\\t\\tvar i, result;\\n\\n\\t\\t\\t\\t\\t\\tresult = [];\\n\\n\\t\\t\\t\\t\\t\\tfor (i = 0; i < _matrix.length; i += 4) {\\n\\t\\t\\t\\t\\t\\t\\tresult = result.concat(_matrix.slice(i, i + 2));\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\treturn result;\\n\\t\\t\\t\\t\\t})(t);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tt = t.map(parseFloat);\\n\\n\\t\\t\\t\\tmatrix.setTransform.apply(matrix, t);\\n\\n\\t\\t\\t\\treturn matrix;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn t;\\n\\t\\t}\\n\\n\\t\\tmatrix.setTransform.apply(matrix, arguments);\\n\\n\\t\\tthis.css('transform', matrix.toCSS());\\n\\n\\t\\treturn matrix;\\n\\t};\\n\\n\\t/**\\n  * Getter/Setter for the CSS transform translation. (overloaded)\\n  * @function external:jQuery#transformPosition\\n  * @arg {Point} _point - A point object {x,y}\\n  * @returns {Point}\\n  */\\n\\n\\t/**\\n  * Getter/Setter for the CSS transform translation.\\n  * @function external:jQuery#transformPosition\\n  * @arg {number} _x - x coordinate\\n  * @arg {number} _y - y coordinate\\n  * @returns {Point}\\n  */\\n\\tthis.transformPosition = function () {\\n\\t\\tvar matrix, point;\\n\\n\\t\\tmatrix = this.transform();\\n\\t\\tpoint = _typesDimensions.Point.create();\\n\\n\\t\\tif (matrix !== 'none') {\\n\\t\\t\\tif (!arguments.length) {\\n\\t\\t\\t\\tpoint.set(matrix.e, matrix.f);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tmatrix = new _libMatrix2['default']();\\n\\n\\t\\t\\t\\tpoint.set.apply(point, arguments);\\n\\t\\t\\t\\tmatrix.translate(point.x, point.y);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn point;\\n\\t};\\n}).call($.fn);//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _Object$defineProperties = __webpack_require__(6)['default'];\\n\\nvar _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * \\n * @module\\n * @version 1.1\\n * @author Micah Rolon <functionmicah@gmail.com>\\n * @requires module:types/BasicArray~BasicArray\\n *\\n * @desc *Created: 11/12/14*\\n *\\n * This file contains objects for containing values about a plane. i.e. x or width.\\n * Adds the convenience of keeping these values paired to passed around your application.\\n * It also includes methods which you perform on the values and returns a new object\\n * so the original values are maintained.\\n *\\n * #### Usage\\n *\\n * New instances can be created by calling the create method.\\n * ```\\n * cursorLocation = Point.create();\\n * ```\\n *\\n * Then call `set()` to apply your values.\\n * ```\\n * cursorLocation.set(event.clientX, event.clientY);\\n * ```\\n *\\n * Then you can use the calculation methods to perform transformations.\\n * ```\\n * relativeCursor = cursorLocation.scale(zoom);\\n * ```\\n *\\n * #### Developer Notes\\n *\\n * When adding new methods make sure you are returning a new instance.\\n * Dimensional objects are meant to be immutable.\\n *\\n * Follow this pattern:\\n * ```\\n * this.method = function () {\\n *     // set with your calculated values.\\n *     return this.create().set( ... )\\n * }\\n * ```\\n *\\n * #### Change Log\\n * *v1.1 - 12/13/15*\\n * - Defined setter/getter properties for unique planes keys. You can now do `point.width = 10`.\\n */\\n\\n/*jslint browser: true, eqeq: true, nomen: true, sloppy: true, white: true */\\n\\nvar _typesBasicArray = __webpack_require__(9);\\n\\nvar _typesBasicArray2 = _interopRequireDefault(_typesBasicArray);\\n\\nvar Dimension, Size, Point;\\n\\n/**\\n * The native Array\\n * @external Array\\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array}\\n */\\n\\n/**\\n * Array prototype extension\\n * Creates an instance of `_Thing` and passes the array to its set function as its arguments.\\n * @function external:Array#to\\n * @arg {Point|Size|string} _Thing - A Dimension object or one the strings 'point'/'size'\\n * @example\\n * somePoint = [10, 10].to(Point);\\n * somePoint = [10, 10].to('point');\\n */\\nArray.prototype.to = function (_Thing) {\\n\\tvar map;\\n\\n\\tmap = {\\n\\t\\tpoint: Point,\\n\\t\\tsize: Size\\n\\t};\\n\\n\\tif (typeof _Thing === 'string') {\\n\\t\\treturn map[_Thing.toLowerCase()].create().set(this);\\n\\t} else if (typeof _Thing === 'object' && ~[Point.set, Size.set].indexOf(_Thing.set)) {\\n\\t\\tif (!_Thing.isPrototypeOf(this)) {\\n\\t\\t\\treturn _Thing.set.apply(_Thing.create(), this);\\n\\t\\t}\\n\\t}\\n\\n\\treturn this;\\n};\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. use `Dimension.create()` to get a new instance.\\n * @class\\n * @classdesc Base class for dimensional objects consisting of 2 planes.<br>\\n * <span class=\\\"important\\\">NOTE:</span> This is an immutable class. Methods return a new object with the original as its prototype.\\n * @extends module:types/BasicArray~BasicArray\\n */\\nDimension = _typesBasicArray2['default'].extend(function () {\\n\\tvar originalMap;\\n\\n\\toriginalMap = this.map;\\n\\n\\tthis[0] = this[1] = 0;\\n\\tthis.planeMap = null, this.length = 2;\\n\\n\\t/**\\n  * Provides a new instance.\\n  * @arg {array} _argumentsArray - Create a new instace with an arguments array.\\n  * @returns {Dimension}\\n  */\\n\\tthis.create = function (_argumentsArray) {\\n\\t\\tvar instance;\\n\\n\\t\\tinstance = this.proto();\\n\\n\\t\\tif (_argumentsArray) instance.set.apply(instance, _argumentsArray);\\n\\n\\t\\treturn instance;\\n\\t};\\n\\n\\t/**\\n  * Incerement each plane by a value or specify each plane.\\n  * @arg {number} _val - plane a of (a,b)\\n  * @arg {number} [_plane2] - plane b of (a,b)\\n  * @returns {Dimension}\\n  */\\n\\tthis.inc = function (_val, _plane2) {\\n\\t\\tvar a, b;\\n\\n\\t\\tif (_val.length === 2) {\\n\\t\\t\\ta = _val[0];\\n\\t\\t\\tb = _val[1];\\n\\t\\t} else if (_plane2 != null) {\\n\\t\\t\\ta = _val;\\n\\t\\t\\tb = _plane2;\\n\\t\\t} else {\\n\\t\\t\\ta = b = _val;\\n\\t\\t}\\n\\n\\t\\treturn this.create().set(this[0] + a, this[1] + b);\\n\\t};\\n\\n\\t/**\\n  * Decerement each plane by a value or specify each plane.\\n  * @arg {number} _val - plane a of (a,b)\\n  * @arg {number} [_plane2] - plane b of (a,b)\\n  * @returns {Dimension}\\n  */\\n\\tthis.dec = function (_val, _plane2) {\\n\\t\\tvar a, b;\\n\\n\\t\\tif (_val.length === 2) {\\n\\t\\t\\ta = _val[0];\\n\\t\\t\\tb = _val[1];\\n\\t\\t} else if (_plane2 != null) {\\n\\t\\t\\ta = _val;\\n\\t\\t\\tb = _plane2;\\n\\t\\t} else {\\n\\t\\t\\ta = b = _val;\\n\\t\\t}\\n\\n\\t\\treturn this.create().set(this[0] - a, this[1] - b);\\n\\t};\\n\\n\\t/**\\n  * Multiply each plane by a value or specify each plane.\\n  * @arg {number} _scale - plane a of (a,b)\\n  * @arg {number} [_plane2] - plane b of (a,b)\\n  * @returns {Dimension}\\n  */\\n\\tthis.scale = function (_scale, _plane2) {\\n\\t\\treturn this.create().set(this[0] * _scale, this[1] * (_plane2 != null ? _plane2 : _scale));\\n\\t};\\n\\n\\t/**\\n  * Perfom a Math function on each plane\\n  * @arg {string} _fun - a string of the function name in the JS Math object,\\n  * followed by the whatever arguments the function takes after its first\\n  * since the first argument is the plane value.\\n  * @returns {Dimension}\\n  */\\n\\tthis.math = function (_fun) {\\n\\t\\tvar args = [].slice.call(arguments, 1);\\n\\n\\t\\treturn this.create().set(Math[_fun].apply(Math, [this[0]].concat(args)), Math[_fun].apply(Math, [this[1]].concat(args)));\\n\\t};\\n\\n\\t/**\\n  * Takes each plane value and passes it to parseInt().\\n  * @returns {Dimension}\\n  */\\n\\tthis.parseInt = function () {\\n\\t\\treturn this.create().set(parseInt(this[0]), parseInt(this[1]));\\n\\t};\\n\\n\\t/**\\n  * Takes each plane value and passes it to parseFloat().\\n  * @returns {Dimension}\\n  */\\n\\tthis.parseFloat = function () {\\n\\t\\treturn this.create().set(parseFloat(this[0]), parseFloat(this[1]));\\n\\t};\\n\\n\\t/**\\n  * Resolves the name of the plane at the given index.\\n  * @arg {number} _index - The index of the plane.\\n  * @returns {string}\\n  */\\n\\tthis.planeOf = function (_index) {\\n\\t\\tif (isNaN(parseInt(_index))) return null;\\n\\t\\treturn this.planeMap[_index];\\n\\t};\\n\\n\\t/**\\n  * Make a new array by iterating over each plane.<br>\\n  * See [`Array.prototype.map()`]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map}\\n  * @arg {function} _handler - handler for each index.\\n  * @override\\n  * @returns {Dimension}\\n  */\\n\\tthis.map = function (_handler) {\\n\\t\\treturn originalMap.call(this, _handler).to(Object.getPrototypeOf(this));\\n\\t};\\n\\n\\t/**\\n  * Multiplies the planes.\\n  * @returns {number}\\n  */\\n\\tthis.product = function () {\\n\\t\\treturn this[0] * this[1];\\n\\t};\\n\\n\\t/**\\n  * Divides the planes.\\n  * @returns {number}\\n  */\\n\\tthis.ratio = function () {\\n\\t\\treturn this[0] / this[1];\\n\\t};\\n\\n\\tthis.quotient = function () {\\n\\t\\treturn Math.floor(this[0] / this[1]);\\n\\t};\\n\\n\\tthis.remainder = function () {\\n\\t\\treturn this[0] % this[1];\\n\\t};\\n});\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. use `Size.create()` to get a new instance.\\n * @class\\n * @extends module:types/Dimensions~Dimension\\n * @classdesc 2 Dimensional object containing width and height.<br>\\n * <span class=\\\"important\\\">NOTE:</span> This is an immutable class. Methods return a new object with the original as its prototype.\\n * @prop {number} width - The width.\\n * @prop {number} height - The height.\\n */\\nSize = Dimension.extend(function () {\\n\\t/**\\n  * Maps the names of the indexes.<br>\\n  * See [Dimension#planeOf]{@link module:types/Dimensions~Dimension#planeOf} for resolving plane name.\\n  * @protected\\n  * @default ['width', 'height']\\n  */\\n\\tthis.planeMap = ['width', 'height'];\\n\\n\\t_Object$defineProperties(this, {\\n\\t\\twidth: {\\n\\t\\t\\tget: function get() {\\n\\t\\t\\t\\treturn this[0];\\n\\t\\t\\t},\\n\\n\\t\\t\\tset: function set(_val) {\\n\\t\\t\\t\\tthis[0] = Number(_val);\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\theight: {\\n\\t\\t\\tget: function get() {\\n\\t\\t\\t\\treturn this[1];\\n\\t\\t\\t},\\n\\n\\t\\t\\tset: function set(_val) {\\n\\t\\t\\t\\tthis[1] = Number(_val);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\n\\t/**\\n  * Define the size with an object. (overloaded)\\n  * @function module:types/Dimensions~Size#set\\n  * @arg {object} _size - A size object {width, height}.\\n  * @returns {Size}\\n  */\\n\\n\\t/**\\n  * Define the size with an array. (overloaded)\\n  * @function module:types/Dimensions~Size#set\\n  * @arg {array} _size - A size array [width, height].\\n  * @returns {Size}\\n  */\\n\\n\\t/**\\n  * Define the size.\\n  * @arg {number} _width - The width.\\n  * @arg {number} _height - The height.\\n  * @returns {Size}\\n  */\\n\\tthis.set = function (_width, _height) {\\n\\t\\tif (arguments.length === 1) {\\n\\t\\t\\tif (_width.width !== undefined && _width.height !== undefined) {\\n\\t\\t\\t\\tthis[0] = Number(_width.width);\\n\\t\\t\\t\\tthis[1] = Number(_width.height);\\n\\t\\t\\t} else if (_width.length === 2) {\\n\\t\\t\\t\\tthis[0] = Number(_width[0]);\\n\\t\\t\\t\\tthis[1] = Number(_width[1]);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tthis[0] = Number(_width);\\n\\t\\t\\tthis[1] = Number(_height);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * Calculates the hypotenuse.\\n  * @see {@link https://en.wikipedia.org/wiki/Hypotenuse}\\n  * @returns {number}\\n  */\\n\\tthis.hypotenuse = function () {\\n\\t\\treturn Math.sqrt(Math.pow(this.width, 2) + Math.pow(this.height, 2));\\n\\t};\\n\\n\\t/**\\n  * Sets width and height properties on the given object. If the object is an HTML node then it will be set on the nodes style object.\\n  * @arg {object|HTMLElement} - The object or DOM node.\\n  * @returns {this}\\n  */\\n\\tthis.applyTo = function (_object) {\\n\\t\\tif (_object.nodeType === document.ELEMENT_NODE) {\\n\\t\\t\\tif (!(_object.width !== undefined || _object.height !== undefined)) {\\n\\t\\t\\t\\t_object.style.width = this.width;\\n\\t\\t\\t\\t_object.style.height = this.height;\\n\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t_object.width = this.width;\\n\\t\\t_object.height = this.height;\\n\\n\\t\\treturn this;\\n\\t};\\n});\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. use `Point.create()` to get a new instance.\\n * @class\\n * @extends module:types/Dimensions~Dimension\\n * @classdesc Object containing coordinates on a 2-dimensional cartesian plane.<br>\\n * <span class=\\\"important\\\">NOTE:</span> This is an immutable class. Methods return a new object with the original as its prototype.\\n * @prop {number} x - The x coordinate.\\n * @prop {number} y - The y coordinate.\\n */\\nPoint = Dimension.extend(function () {\\n\\t/**\\n  * Maps the names of the indexes.<br>\\n  * See [Dimension#planeOf]{@link module:types/Dimensions~Dimension#planeOf} for resolving plane name.\\n  * @protected\\n  * @default ['x', 'y']\\n  */\\n\\tthis.planeMap = ['x', 'y'];\\n\\n\\t_Object$defineProperties(this, {\\n\\t\\tx: {\\n\\t\\t\\tget: function get() {\\n\\t\\t\\t\\treturn this[0];\\n\\t\\t\\t},\\n\\n\\t\\t\\tset: function set(_val) {\\n\\t\\t\\t\\tthis[0] = Number(_val);\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\ty: {\\n\\t\\t\\tget: function get() {\\n\\t\\t\\t\\treturn this[1];\\n\\t\\t\\t},\\n\\n\\t\\t\\tset: function set(_val) {\\n\\t\\t\\t\\tthis[1] = Number(_val);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\n\\t/**\\n  * Define the point with an object. (overloaded)\\n  * @function module:types/Dimensions~Point#set\\n  * @arg {object} _point - A point object {x, y}.\\n  * @returns {Point}\\n  */\\n\\n\\t/**\\n  * Define the point with an array. (overloaded)\\n  * @function module:types/Dimensions~Point#set\\n  * @arg {array} _point - A point array [x, y].\\n  * @returns {Point}\\n  */\\n\\n\\t/**\\n  * Define the point.\\n  * @arg {number} _x - The x.\\n  * @arg {number} _y - The y.\\n  * @returns {Point}\\n  */\\n\\tthis.set = function (_x, _y) {\\n\\t\\tif (arguments.length === 1) {\\n\\t\\t\\tif (_x.x !== undefined && _x.y !== undefined) {\\n\\t\\t\\t\\tthis[0] = Number(_x.x);\\n\\t\\t\\t\\tthis[1] = Number(_x.y);\\n\\t\\t\\t} else if (_x.length === 2) {\\n\\t\\t\\t\\tthis[0] = Number(_x[0]);\\n\\t\\t\\t\\tthis[1] = Number(_x[1]);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tthis[0] = Number(_x);\\n\\t\\t\\tthis[1] = Number(_y);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * Calculates the distance between the insatnce and a point object.\\n  * @arg {Point} _point - A point object {x,y}.\\n  * @returns {Size}\\n  */\\n\\tthis.distance = function (_point) {\\n\\t\\tif (_point.x !== undefined && _point.y !== undefined) {\\n\\t\\t\\treturn Size.create().set(_point.x - this.x, _point.y - this.y);\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t};\\n\\n\\t/**\\n  * Sets x and y properties on the given object. If the object is an HTML node then the left and top properties will be set on the nodes style object.\\n  * @arg {object|HTMLElement} - The object or DOM node.\\n  * @returns {this}\\n  */\\n\\tthis.applyTo = function (_object) {\\n\\t\\tif (_object.nodeType === document.ELEMENT_NODE) {\\n\\t\\t\\t_object.style.left = this.x;\\n\\t\\t\\t_object.style.top = this.y;\\n\\t\\t} else {\\n\\t\\t\\t_object.x = this.x;\\n\\t\\t\\t_object.y = this.y;\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * Rotate the point based on an origin point and an angle in degrees.\\n  * @arg {Point} _origin - A point object {x,y}.\\n  * @arg {number} _angle - The angle of rotation in degrees.\\n  * @returns {this}\\n  */\\n\\tthis.rotate = function (_origin, _angle) {\\n\\t\\tvar x, y, rad;\\n\\n\\t\\trad = _angle * (Math.PI / 180);\\n\\n\\t\\tx = this.x - _origin.x;\\n\\t\\ty = this.y - _origin.y;\\n\\n\\t\\treturn this.create().set(Math.sin(rad) * x - Math.cos(rad) * y + _origin.x, Math.cos(rad) * x + Math.sin(rad) * y + _origin.y);\\n\\t};\\n});\\n\\nexports['default'] = { Dimension: Dimension, Size: Size, Point: Point };\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"module.exports = { \\\"default\\\": __webpack_require__(7), __esModule: true };//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydGllcy5qcz9iMzg1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQiIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydGllc1wiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydGllcy5qc1xuICoqIG1vZHVsZSBpZCA9IDZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var $ = __webpack_require__(8);\\nmodule.exports = function defineProperties(T, D){\\n  return $.setDescs(T, D);\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydGllcy5qcz9hMTBmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgJCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvJCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKFQsIEQpe1xuICByZXR1cm4gJC5zZXREZXNjcyhULCBEKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0aWVzLmpzXG4gKiogbW9kdWxlIGlkID0gN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\teval(\"var $Object = Object;\\nmodule.exports = {\\n  create:     $Object.create,\\n  getProto:   $Object.getPrototypeOf,\\n  isEnum:     {}.propertyIsEnumerable,\\n  getDesc:    $Object.getOwnPropertyDescriptor,\\n  setDesc:    $Object.defineProperty,\\n  setDescs:   $Object.defineProperties,\\n  getKeys:    $Object.keys,\\n  getNames:   $Object.getOwnPropertyNames,\\n  getSymbols: $Object.getOwnPropertySymbols,\\n  each:       [].forEach\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5qcz9kOGJjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiOC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciAkT2JqZWN0ID0gT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZTogICAgICRPYmplY3QuY3JlYXRlLFxuICBnZXRQcm90bzogICAkT2JqZWN0LmdldFByb3RvdHlwZU9mLFxuICBpc0VudW06ICAgICB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZSxcbiAgZ2V0RGVzYzogICAgJE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIHNldERlc2M6ICAgICRPYmplY3QuZGVmaW5lUHJvcGVydHksXG4gIHNldERlc2NzOiAgICRPYmplY3QuZGVmaW5lUHJvcGVydGllcyxcbiAgZ2V0S2V5czogICAgJE9iamVjdC5rZXlzLFxuICBnZXROYW1lczogICAkT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMsXG4gIGdldFN5bWJvbHM6ICRPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLFxuICBlYWNoOiAgICAgICBbXS5mb3JFYWNoXG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5qc1xuICoqIG1vZHVsZSBpZCA9IDhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Base object type for 'array like' objects.\\n * @module\\n * @requires module:util\\n * @requires module:types/Basic\\n */\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesBasic = __webpack_require__(11);\\n\\nvar _typesBasic2 = _interopRequireDefault(_typesBasic);\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. use `BasicArray.create()` to get a new instance.\\n * @classdesc A base object type for 'array like' object.\\n * @class\\n * @extends external:Array\\n * @extends module:types/Basic~Basic\\n * @mixes module:types/Basic~Basic\\n */\\nvar BasicArray = (function () {\\n  /**\\n   * Objects with this as an own property will be identified as the root object.\\n   * @memberof module:types/BasicArray~BasicArray\\n   * @readonly\\n   * @default\\n   */\\n  this.baseType = 'TYPE_BASIC_ARRAY';\\n\\n  _util2['default'].mixin(this, _typesBasic2['default']);\\n\\n  return this;\\n}).call([]);\\n\\nexports['default'] = BasicArray;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvQmFzaWNBcnJheS5qcz9lZjNmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Z0NBTWlCLEVBQU07Ozs7c0NBQ0wsRUFBYTs7Ozs7Ozs7Ozs7O0FBVS9CLElBQUksVUFBVSxHQUFHLENBQUMsWUFBWTs7Ozs7OztBQU83QixNQUFJLENBQUMsUUFBUSxHQUFHLGtCQUFrQixDQUFDOztBQUVuQyxvQkFBSyxLQUFLLENBQUMsSUFBSSwwQkFBUSxDQUFDOztBQUV4QixTQUFPLElBQUksQ0FBQztDQUVaLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDOztxQkFFRyxVQUFVIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEJhc2Ugb2JqZWN0IHR5cGUgZm9yICdhcnJheSBsaWtlJyBvYmplY3RzLlxuICogQG1vZHVsZVxuICogQHJlcXVpcmVzIG1vZHVsZTp1dGlsXG4gKiBAcmVxdWlyZXMgbW9kdWxlOnR5cGVzL0Jhc2ljXG4gKi9cbmltcG9ydCB1dGlsIGZyb20gJ3V0aWwnO1xuaW1wb3J0IEJhc2ljIGZyb20gJ3R5cGVzL0Jhc2ljJztcblxuLyoqXG4gKiA8c3BhbiBjbGFzcz1cImltcG9ydGFudFwiPk5PVEU6PC9zcGFuPiBUaGlzIGlzIE5PVCBhIGNvbnN0cnVjdG9yLiB1c2UgYEJhc2ljQXJyYXkuY3JlYXRlKClgIHRvIGdldCBhIG5ldyBpbnN0YW5jZS5cbiAqIEBjbGFzc2Rlc2MgQSBiYXNlIG9iamVjdCB0eXBlIGZvciAnYXJyYXkgbGlrZScgb2JqZWN0LlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBleHRlcm5hbDpBcnJheVxuICogQGV4dGVuZHMgbW9kdWxlOnR5cGVzL0Jhc2ljfkJhc2ljXG4gKiBAbWl4ZXMgbW9kdWxlOnR5cGVzL0Jhc2ljfkJhc2ljXG4gKi9cbnZhciBCYXNpY0FycmF5ID0gKGZ1bmN0aW9uICgpIHtcblx0LyoqXG5cdCAqIE9iamVjdHMgd2l0aCB0aGlzIGFzIGFuIG93biBwcm9wZXJ0eSB3aWxsIGJlIGlkZW50aWZpZWQgYXMgdGhlIHJvb3Qgb2JqZWN0LlxuXHQgKiBAbWVtYmVyb2YgbW9kdWxlOnR5cGVzL0Jhc2ljQXJyYXl+QmFzaWNBcnJheVxuXHQgKiBAcmVhZG9ubHlcblx0ICogQGRlZmF1bHRcblx0ICovXG5cdHRoaXMuYmFzZVR5cGUgPSAnVFlQRV9CQVNJQ19BUlJBWSc7XG5cdFxuXHR1dGlsLm1peGluKHRoaXMsIEJhc2ljKTtcblxuXHRyZXR1cm4gdGhpcztcblxufSkuY2FsbChbXSk7XG5cbmV4cG9ydCBkZWZhdWx0IEJhc2ljQXJyYXk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zb3VyY2UvdHlwZXMvQmFzaWNBcnJheS5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\teval(\"exports.__esModule = true;\\n/**\\n * Utility functions.\\n * @namespace\\n * @author Micah Rolon <micah@ginasink.com>\\n * @memberof module:play~pl\\n */\\nvar util = new function () {\\n\\n\\t/**\\n  * Accepts one or more objects to combine their own properties to single object.\\n  * @arg {object} _target - The object that will recieve all members.\\n  * @arg {object} _sources... - The object(s) to join with the '_target'.\\n  * @returns {object} _target\\n  */\\n\\tthis.mixin = function () {\\n\\t\\tvar member, i, target, objs;\\n\\n\\t\\ttarget = arguments[0];\\n\\t\\tobjs = [].slice.call(arguments, 1);\\n\\n\\t\\tfor (i = 0; i < objs.length; i += 1) {\\n\\t\\t\\tfor (member in objs[i]) {\\n\\t\\t\\t\\tif (!objs[i].hasOwnProperty(member)) continue;\\n\\t\\t\\t\\ttarget[member] = objs[i][member];\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn target;\\n\\t};\\n\\n\\t/**\\n  * Matches the name of the key which references the given pointer inside an object. Like indexOf() for objects.\\n  * @arg {object} _obj - Object to search in.\\n  * @arg {*} _member - The reference which is expected to be in the object as a property.\\n  * @returns {string} The name of the key in the object matching '_member'.\\n  */\\n\\tthis.keyOf = function (_obj, _member) {\\n\\t\\tvar member;\\n\\n\\t\\tfor (member in _obj) {\\n\\t\\t\\tif (!_obj.hasOwnProperty(member)) continue;\\n\\t\\t\\tif (_obj[member] === _member) return member;\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t};\\n\\n\\t/**\\n  * Matches the object, deep in the prototype chain, which is the owner of the property referencing the given pointer.\\n  * @arg {object} _obj - The object to search.\\n  * @arg {*} _member - The reference which is expected to be a property in the prototype chain.\\n  * @return {object} An object containing the name of the property and the owning object. {name, object}\\n  */\\n\\tthis.getOwner = function (_obj, _member) {\\n\\t\\tvar prototype, name;\\n\\n\\t\\tprototype = Object.getPrototypeOf(_obj);\\n\\n\\t\\t// keep searching until we go as deep as we can go.\\n\\t\\twhile (prototype) {\\n\\t\\t\\t// search for the key in the prototype\\n\\t\\t\\tname = util.keyOf(prototype, _member);\\n\\n\\t\\t\\t// If we found the key in the prototype then we found\\n\\t\\t\\t// our match and we can break out of the loop.\\n\\t\\t\\tif (name) break;\\n\\n\\t\\t\\t// Otherwise go deeper (thats what she said ;p)\\n\\t\\t\\tprototype = Object.getPrototypeOf(prototype);\\n\\t\\t}\\n\\n\\t\\treturn {\\n\\t\\t\\tname: name,\\n\\t\\t\\tobject: prototype\\n\\t\\t};\\n\\t};\\n\\n\\t/**\\n  * Given a range; provides a random number in that range.\\n  * @function play~pl.util.random\\n  * @arg {number} _rangeA - A number for the low end of the range.\\n  * @arg {number} _rangeB - The top end of the range.\\n  * @returns {number|*} The resulting number in range or the member found at random.\\n  */\\n\\n\\t/**\\n  * Given an iterable; provides a random item.\\n  * @arg {array} _collection - The iterable.\\n  * @returns {number|*} The member found at random.\\n  */\\n\\tthis.random = function (_collection_rangeA, _rangeB) {\\n\\t\\tvar index, val;\\n\\n\\t\\tindex = Math.floor(Math.random() * _collection_rangeA.length);\\n\\n\\t\\tif (arguments.length === 2) {\\n\\t\\t\\tval = Math.round(Math.random() * _rangeB);\\n\\n\\t\\t\\treturn val < _collection_rangeA ? _collection_rangeA : val;\\n\\t\\t}\\n\\n\\t\\tif (index === _collection_rangeA.length) index = _collection_rangeA.length - 1;\\n\\n\\t\\treturn _collection_rangeA && _collection_rangeA[index];\\n\\t};\\n\\n\\t/**\\n  * Take string and makes it dot notation friendly.\\n  * @arg {string} _id - The string to transform.\\n  * @arg {boolean} _camelCase - Transform with camel case.\\n  * @returns {string}\\n  */\\n\\tthis.transformId = function (_id, _camelCase) {\\n\\t\\tif (_id && _camelCase) {\\n\\t\\t\\treturn _id.replace(/[-\\\\s]+([\\\\w\\\\d]?)/g, function (_match) {\\n\\t\\t\\t\\treturn RegExp.$1.toUpperCase();\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn _id && _id.replace(/[-\\\\s]+/g, '_');\\n\\t};\\n\\n\\t/**\\n  * Test all arguments for != null\\n  * @return {boolean}\\n  */\\n\\tthis.isSet = function () {\\n\\t\\treturn [].every.call(arguments, function (_arg) {\\n\\t\\t\\treturn _arg != null;\\n\\t\\t});\\n\\t};\\n\\n\\t/**\\n  * Parses a formated string and calculates it in milliseconds.\\n  * @arg {string} _source - The formated string for calculation in the pattern '1d 1h 1m 1s'.\\n  * @return {number}\\n  */\\n\\tthis.toMillisec = function (_source) {\\n\\t\\tvar tokens, time, units;\\n\\n\\t\\tif (!_source) return;\\n\\t\\tif (typeof _source === 'number') return _source;\\n\\n\\t\\ttokens = _source.split(/\\\\s+/);\\n\\t\\ttime = 0;\\n\\t\\tunits = {\\n\\t\\t\\td: 24 * 60 * 60 * 1000,\\n\\t\\t\\th: 60 * 60 * 1000,\\n\\t\\t\\tm: 60 * 1000,\\n\\t\\t\\ts: 1000\\n\\t\\t};\\n\\n\\t\\ttokens.forEach(function (_token) {\\n\\t\\t\\tvar unit, value;\\n\\n\\t\\t\\tunit = (_token.match(/[dhms]/) || [])[0];\\n\\n\\t\\t\\tif (unit) {\\n\\t\\t\\t\\tvalue = Number(_token.slice(0, -1));\\n\\t\\t\\t\\ttime += value * units[unit];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttime += Number(_token);\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\treturn time;\\n\\t};\\n\\n\\t/**\\n  * Needs no introduction\\n  * @arg {iterable} _collection - iterable.\\n  * @return {array}\\n  */\\n\\tthis.toArray = function (_collection) {\\n\\t\\treturn Array.prototype.map.call(_collection, function (i) {\\n\\t\\t\\treturn i;\\n\\t\\t});\\n\\t};\\n\\n\\t/**\\n  * Resolves the value in the object at the given path.\\n  * @arg {object} _obj - The object to query.\\n  * @arg {string} _path - The path to the desired reference.\\n  * @returns {*} The resulting reference value.\\n  * @example\\n  * var user = {\\n  *   name: 'John',\\n  *   family: {\\n  *\\t   guardians: {David}, // property could be an array of multiple guardians.\\n  *     siblings: [{Jane}, {Thomas}] // collection of user objects.\\n  *   }\\n  * };\\n  *\\n  * pl.util.resolvePath(user, 'family.sliblings[2].name');\\n  * // Matches the `guardians` propery if `guardians[0]` is undefined when `?` is used.\\n  * pl.util.resolvePath(user, 'family.guardians[0]?.name'); \\n  */\\n\\tthis.resolvePath = function (_obj, _path) {\\n\\t\\tvar path, obj, i, name, index, testArray;\\n\\n\\t\\tpath = _path.split('.');\\n\\t\\tobj = _obj;\\n\\t\\ti = 0;\\n\\n\\t\\twhile (obj) {\\n\\t\\t\\ttestArray = /\\\\?$/.test(path[i]);\\n\\t\\t\\tindex = (path[i].match(/\\\\[(\\\\d+)\\\\]/) || [])[1] || -1;\\n\\t\\t\\tname = ~index ? path[i].slice(0, path[i].indexOf('[')) : path[i];\\n\\t\\t\\tobj = obj[name];\\n\\n\\t\\t\\tif (~index && obj) {\\n\\t\\t\\t\\tobj = testArray ? obj[index] || obj : obj[index];\\n\\t\\t\\t}\\n\\n\\t\\t\\ti += 1;\\n\\n\\t\\t\\tif (path.length === i) break;\\n\\t\\t}\\n\\n\\t\\treturn obj;\\n\\t};\\n\\n\\tthis.assignRef = function (_obj, _name, _ref) {\\n\\t\\tvar name;\\n\\n\\t\\tname = util.transformId(_name, true);\\n\\n\\t\\tif (_obj[name]) {\\n\\t\\t\\tif (!_obj[name].__refCollction__) {\\n\\t\\t\\t\\t_obj[name] = [_obj[name]];\\n\\n\\t\\t\\t\\tObject.defineProperty(_obj[name], '__refCollction__', {\\n\\t\\t\\t\\t\\tvalue: true,\\n\\t\\t\\t\\t\\tenumerable: false,\\n\\t\\t\\t\\t\\twriteable: false,\\n\\t\\t\\t\\t\\tconfigureable: false\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\t_obj[name].push(_ref);\\n\\t\\t} else {\\n\\t\\t\\t_obj[name] = _ref;\\n\\t\\t}\\n\\t};\\n}();\\n\\nexports['default'] = util;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _Object$create = __webpack_require__(12)['default'];\\n\\nvar _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Base object type for 'classes' implementing methods for extention and super callbacks.\\n * @module\\n * @requires module:play~pl.util\\n */\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. use `Basic.create()` to get a new instance.\\n * @classdesc The base type for all objects which will act as prototypes.\\n * @class\\n */\\nvar Basic = {\\n\\t/**\\n  * Objects with this as an own property will be identified as the root object.\\n  * @readonly\\n  * @default\\n  */\\n\\tbaseType: 'TYPE_BASIC',\\n\\n\\t/**\\n  * Creates a new object with the current object as its prototype.\\n  * @instance\\n  * @returns {Basic} The new instance.\\n  */\\n\\tcreate: function create() {\\n\\t\\treturn _Object$create(this);\\n\\t},\\n\\n\\t/**\\n  * Creates a new object using a constructor function or object with the current object as its prototype.\\n  * @instance\\n  * @arg {Function|Object} _implementation - The implementation of the new type as either a constructor function or object to mixin.\\n  * @returns {Basic} The new instance.\\n  *\\n  * @todo define constructor property\\n  */\\n\\textend: function extend(_implementation) {\\n\\t\\tvar instance;\\n\\n\\t\\tif (!_implementation) return null;\\n\\n\\t\\tswitch (typeof _implementation) {\\n\\t\\t\\tcase 'function':\\n\\t\\t\\t\\t_implementation.prototype = this;\\n\\t\\t\\t\\tinstance = new _implementation();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'object':\\n\\t\\t\\t\\tinstance = this.create();\\n\\t\\t\\t\\tinstance.mixin(_implementation);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tconsole.error('TypeError: Invalid type given for object extention.', typeof _implementation);\\n\\t\\t}\\n\\n\\t\\treturn instance;\\n\\t},\\n\\n\\t/**\\n  * Accepts one or more objects to combine their own properties to the instance.\\n  * @instance\\n  * @arg {object} _sources... - The object(s) to join with the instance.\\n  * @returns this\\n  */\\n\\tmixin: function mixin() {\\n\\t\\treturn _util2['default'].mixin.apply(null, [this].concat([].slice.call(arguments, 0)));\\n\\t},\\n\\n\\t/**\\n  * Matches the name of the key which references the given pointer inside the instance. Like indexOf() for objects.\\n  * @instance\\n  * @arg {*} _member - The reference which is expected to be in the object as a property.\\n  * @returns {string} The name of the key in the object matching '_member'.\\n  */\\n\\tkeyOf: function keyOf(_member) {\\n\\t\\treturn _util2['default'].keyOf(this, _member);\\n\\t},\\n\\n\\t/**\\n  * Performs a super callback of the function which called it. Allowing you to still invoke a method which was overridden.\\n  * @instance\\n  * @arg {*} _args... - Whatever amount of arguments the caller takes.\\n  * @returns {*} Whatever the caller returns.\\n  */\\n\\tproto: function proto() {\\n\\t\\tvar method, name, owner, prototype;\\n\\n\\t\\t// Get the function which invoked proto() in the call stack.\\n\\t\\t// If the caller is a behavior then we retrieve the method.\\n\\t\\tmethod = this.proto.caller.method || this.proto.caller;\\n\\n\\t\\t// Check to see if 'this' owns the method.\\n\\t\\t// NOTE: We may want to move this logic into getOwner().\\n\\t\\tif (name = this.keyOf(method)) {\\n\\t\\t\\tprototype = Object.getPrototypeOf(this);\\n\\t\\t}\\n\\n\\t\\t// Otherwise find the object which owns the caller function.\\n\\t\\telse {\\n\\t\\t\\t\\towner = _util2['default'].getOwner(this, method);\\n\\t\\t\\t\\tname = owner.name;\\n\\t\\t\\t\\tprototype = Object.getPrototypeOf(owner.object);\\n\\t\\t\\t}\\n\\n\\t\\tmethod = prototype[name];\\n\\n\\t\\tif (!method) {\\n\\t\\t\\tconsole.error('ReferenceError: Unable to locate prototype method.', this.proto.caller);\\n\\t\\t\\tdebugger;\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\treturn method.apply(this, arguments);\\n\\t},\\n\\n\\t/**\\n  * Performs a super callback of the function which called it. Unlike `proto()` which looks for the overidden method, sup looks for the base class' implementation.\\n  * @instance\\n  * @arg {*} _args... - Whatever amount of arguments the caller takes.\\n  * @returns {*} Whatever the caller returns.\\n  */\\n\\tsup: function sup() {\\n\\t\\tvar method, name, owner, prototype;\\n\\n\\t\\t// Get the function which invoked sup() in the call stack.\\n\\t\\tmethod = this.sup.caller;\\n\\t\\towner = _util2['default'].getOwner(this, this.baseType);\\n\\t\\tprototype = owner.object;\\n\\t\\tname = this.keyOf(method);\\n\\n\\t\\t// Check to see if 'this' owns the method.\\n\\t\\t// NOTE: We may want to move this logic into getOwner().\\n\\t\\t//\\n\\t\\tif (!name) {\\n\\t\\t\\towner = _util2['default'].getOwner(this, method);\\n\\t\\t\\tname = owner.name;\\n\\t\\t}\\n\\n\\t\\tmethod = prototype[name];\\n\\n\\t\\tif (!method) {\\n\\t\\t\\tconsole.error('ReferenceError: Unable to locate prototype method.', this.sup.caller);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\treturn method.apply(this, arguments);\\n\\t},\\n\\n\\t/**\\n  * Provides the object type.\\n  * @instance\\n  */\\n\\ttoString: function toString() {\\n\\t\\tvar type;\\n\\n\\t\\ttype = this.baseType.replace('TYPE_', '');\\n\\t\\ttype = type.slice(0, 1) + type.slice(1).toLowerCase();\\n\\n\\t\\treturn '[object ' + type + ']';\\n\\t}\\n\\n};\\n\\nexports['default'] = Basic;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"module.exports = { \\\"default\\\": __webpack_require__(13), __esModule: true };//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9jcmVhdGUuanM/MzFiZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0IiLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9jcmVhdGUuanNcbiAqKiBtb2R1bGUgaWQgPSAxMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var $ = __webpack_require__(8);\\nmodule.exports = function create(P, D){\\n  return $.create(P, D);\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUuanM/MDNhNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxMy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciAkID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy8kJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZShQLCBEKXtcbiAgcmV0dXJuICQuY3JlYXRlKFAsIEQpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlLmpzXG4gKiogbW9kdWxlIGlkID0gMTNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\teval(\"exports.__esModule = true;\\n/**\\r\\n *\\r\\n * Copy of the deleted repository epistemex/transformation-matrix-js.\\r\\n * All rights are reserved to Epistemex.\\r\\n *\\r\\n * 2D transformation matrix object initialized with identity matrix.\\r\\n *\\r\\n * The matrix can synchronize a canvas context by supplying the context\\r\\n * as an argument, or later apply current absolute transform to an\\r\\n * existing context.\\r\\n *\\r\\n * All values are handled as floating point values.\\r\\n *\\r\\n * @param {CanvasRenderingContext2D} [context] - Optional context to sync with Matrix\\r\\n * @prop {number} a - scale x\\r\\n * @prop {number} b - shear y\\r\\n * @prop {number} c - shear x\\r\\n * @prop {number} d - scale y\\r\\n * @prop {number} e - translate x\\r\\n * @prop {number} f - translate y\\r\\n * @prop {CanvasRenderingContext2D|null} [context=null] - set or get current canvas context\\r\\n * @constructor\\r\\n */\\nfunction Matrix(context) {\\n\\n    var me = this;\\n    me._t = me.transform;\\n\\n    me.a = me.d = 1;\\n    me.b = me.c = me.e = me.f = 0;\\n\\n    me.context = context;\\n\\n    // reset canvas transformations (if any) to enable 100% sync.\\n    if (context) context.setTransform(1, 0, 0, 1, 0, 0);\\n}\\n\\nMatrix.prototype = {\\n\\n    /**\\r\\n     * Concatenates transforms of this matrix onto the given child matrix and\\r\\n     * returns a new matrix. This instance is used on left side.\\r\\n     *\\r\\n     * @param {Matrix} cm - child matrix to apply concatenation to\\r\\n     * @returns {Matrix}\\r\\n     */\\n    concat: function concat(cm) {\\n        return this.clone()._t(cm.a, cm.b, cm.c, cm.d, cm.e, cm.f);\\n    },\\n\\n    /**\\r\\n     * Flips the horizontal values.\\r\\n     */\\n    flipX: function flipX() {\\n        return this._t(-1, 0, 0, 1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Flips the vertical values.\\r\\n     */\\n    flipY: function flipY() {\\n        return this._t(1, 0, 0, -1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Reflects incoming (velocity) vector on the normal which will be the\\r\\n     * current transformed x axis. Call when a trigger condition is met.\\r\\n     *\\r\\n     * NOTE: BETA, simple implementation\\r\\n     *\\r\\n     * @param {number} x - vector end point for x (start = 0)\\r\\n     * @param {number} y - vector end point for y (start = 0)\\r\\n     * @returns {{x: number, y: number}}\\r\\n     */\\n    reflectVector: function reflectVector(x, y) {\\n\\n        var v = this.applyToPoint(0, 1),\\n            d = 2 * (v.x * x + v.y * y);\\n\\n        x -= d * v.x;\\n        y -= d * v.y;\\n\\n        return { x: x, y: y };\\n    },\\n\\n    /**\\r\\n     * Short-hand to reset current matrix to an identity matrix.\\r\\n     */\\n    reset: function reset() {\\n        return this.setTransform(1, 0, 0, 1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Rotates current matrix accumulative by angle.\\r\\n     * @param {number} angle - angle in radians\\r\\n     */\\n    rotate: function rotate(angle) {\\n        var cos = Math.cos(angle),\\n            sin = Math.sin(angle);\\n        return this._t(cos, sin, -sin, cos, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Converts a vector given as x and y to angle, and\\r\\n     * rotates (accumulative).\\r\\n     * @param x\\r\\n     * @param y\\r\\n     * @returns {*}\\r\\n     */\\n    rotateFromVector: function rotateFromVector(x, y) {\\n        return this.rotate(Math.atan2(y, x));\\n    },\\n\\n    /**\\r\\n     * Helper method to make a rotation based on an angle in degrees.\\r\\n     * @param {number} angle - angle in degrees\\r\\n     */\\n    rotateDeg: function rotateDeg(angle) {\\n        return this.rotate(angle * Math.PI / 180);\\n    },\\n\\n    /**\\r\\n     * Scales current matrix uniformly and accumulative.\\r\\n     * @param {number} f - scale factor for both x and y (1 does nothing)\\r\\n     */\\n    scaleU: function scaleU(f) {\\n        return this._t(f, 0, 0, f, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Scales current matrix accumulative.\\r\\n     * @param {number} sx - scale factor x (1 does nothing)\\r\\n     * @param {number} sy - scale factor y (1 does nothing)\\r\\n     */\\n    scale: function scale(sx, sy) {\\n        return this._t(sx, 0, 0, sy, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Scales current matrix on x axis accumulative.\\r\\n     * @param {number} sx - scale factor x (1 does nothing)\\r\\n     */\\n    scaleX: function scaleX(sx) {\\n        return this._t(sx, 0, 0, 1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Scales current matrix on y axis accumulative.\\r\\n     * @param {number} sy - scale factor y (1 does nothing)\\r\\n     */\\n    scaleY: function scaleY(sy) {\\n        return this._t(1, 0, 0, sy, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Apply shear to the current matrix accumulative.\\r\\n     * @param {number} sx - amount of shear for x\\r\\n     * @param {number} sy - amount of shear for y\\r\\n     */\\n    shear: function shear(sx, sy) {\\n        return this._t(1, sy, sx, 1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Apply shear for x to the current matrix accumulative.\\r\\n     * @param {number} sx - amount of shear for x\\r\\n     */\\n    shearX: function shearX(sx) {\\n        return this._t(1, 0, sx, 1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Apply shear for y to the current matrix accumulative.\\r\\n     * @param {number} sy - amount of shear for y\\r\\n     */\\n    shearY: function shearY(sy) {\\n        return this._t(1, sy, 0, 1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Apply skew to the current matrix accumulative.\\r\\n     * @param {number} ax - angle of skew for x\\r\\n     * @param {number} ay - angle of skew for y\\r\\n     */\\n    skew: function skew(ax, ay) {\\n        return this.shear(Math.tan(ax), Math.tan(ay));\\n    },\\n\\n    /**\\r\\n     * Apply skew for x to the current matrix accumulative.\\r\\n     * @param {number} ax - angle of skew for x\\r\\n     */\\n    skewX: function skewX(ax) {\\n        return this.shearX(Math.tan(ax));\\n    },\\n\\n    /**\\r\\n     * Apply skew for y to the current matrix accumulative.\\r\\n     * @param {number} ay - angle of skew for y\\r\\n     */\\n    skewY: function skewY(ay) {\\n        return this.shearY(Math.tan(ay));\\n    },\\n\\n    /**\\r\\n     * Set current matrix to new absolute matrix.\\r\\n     * @param {number} a - scale x\\r\\n     * @param {number} b - shear y\\r\\n     * @param {number} c - shear x\\r\\n     * @param {number} d - scale y\\r\\n     * @param {number} e - translate x\\r\\n     * @param {number} f - translate y\\r\\n     */\\n    setTransform: function setTransform(a, b, c, d, e, f) {\\n        var me = this;\\n        me.a = a;\\n        me.b = b;\\n        me.c = c;\\n        me.d = d;\\n        me.e = e;\\n        me.f = f;\\n        return me._x();\\n    },\\n\\n    /**\\r\\n     * Translate current matrix accumulative.\\r\\n     * @param {number} tx - translation for x\\r\\n     * @param {number} ty - translation for y\\r\\n     */\\n    translate: function translate(tx, ty) {\\n        return this._t(1, 0, 0, 1, tx, ty);\\n    },\\n\\n    /**\\r\\n     * Translate current matrix on x axis accumulative.\\r\\n     * @param {number} tx - translation for x\\r\\n     */\\n    translateX: function translateX(tx) {\\n        return this._t(1, 0, 0, 1, tx, 0);\\n    },\\n\\n    /**\\r\\n     * Translate current matrix on y axis accumulative.\\r\\n     * @param {number} ty - translation for y\\r\\n     */\\n    translateY: function translateY(ty) {\\n        return this._t(1, 0, 0, 1, 0, ty);\\n    },\\n\\n    /**\\r\\n     * Multiplies current matrix with new matrix values.\\r\\n     * @param {number} a2 - scale x\\r\\n     * @param {number} b2 - shear y\\r\\n     * @param {number} c2 - shear x\\r\\n     * @param {number} d2 - scale y\\r\\n     * @param {number} e2 - translate x\\r\\n     * @param {number} f2 - translate y\\r\\n     */\\n    transform: function transform(a2, b2, c2, d2, e2, f2) {\\n\\n        var me = this,\\n            a1 = me.a,\\n            b1 = me.b,\\n            c1 = me.c,\\n            d1 = me.d,\\n            e1 = me.e,\\n            f1 = me.f;\\n\\n        /* matrix order (canvas compatible):\\r\\n         * ace\\r\\n         * bdf\\r\\n         * 001\\r\\n         */\\n        me.a = a1 * a2 + c1 * b2;\\n        me.b = b1 * a2 + d1 * b2;\\n        me.c = a1 * c2 + c1 * d2;\\n        me.d = b1 * c2 + d1 * d2;\\n        me.e = a1 * e2 + c1 * f2 + e1;\\n        me.f = b1 * e2 + d1 * f2 + f1;\\n\\n        return me._x();\\n    },\\n\\n    /**\\r\\n     * Divide this matrix on input matrix which must be invertible.\\r\\n     * @param {Matrix} m - matrix to divide on (divisor)\\r\\n     * @returns {Matrix}\\r\\n     */\\n    divide: function divide(m) {\\n\\n        if (!m.isInvertible()) throw \\\"Input matrix is not invertible\\\";\\n\\n        var im = m.inverse();\\n\\n        return this._t(im.a, im.b, im.c, im.d, im.e, im.f);\\n    },\\n\\n    /**\\r\\n     * Divide current matrix on scalar value != 0.\\r\\n     * @param {number} d - divisor (can not be 0)\\r\\n     * @returns {Matrix}\\r\\n     */\\n    divideScalar: function divideScalar(d) {\\n\\n        var me = this;\\n        me.a /= d;\\n        me.b /= d;\\n        me.c /= d;\\n        me.d /= d;\\n        me.e /= d;\\n        me.f /= d;\\n\\n        return me._x();\\n    },\\n\\n    /**\\r\\n     * Get an inverse matrix of current matrix. The method returns a new\\r\\n     * matrix with values you need to use to get to an identity matrix.\\r\\n     * Context from parent matrix is not applied to the returned matrix.\\r\\n     * @returns {Matrix}\\r\\n     */\\n    inverse: function inverse() {\\n\\n        if (this.isIdentity()) {\\n            return new Matrix();\\n        } else if (!this.isInvertible()) {\\n            throw \\\"Matrix is not invertible.\\\";\\n        } else {\\n            var me = this,\\n                a = me.a,\\n                b = me.b,\\n                c = me.c,\\n                d = me.d,\\n                e = me.e,\\n                f = me.f,\\n                m = new Matrix(),\\n                dt = a * d - b * c; // determinant(), skip DRY here...\\n\\n            m.a = d / dt;\\n            m.b = -b / dt;\\n            m.c = -c / dt;\\n            m.d = a / dt;\\n            m.e = (c * f - d * e) / dt;\\n            m.f = -(a * f - b * e) / dt;\\n\\n            return m;\\n        }\\n    },\\n\\n    /**\\r\\n     * Interpolate this matrix with another and produce a new matrix.\\r\\n     * t is a value in the range [0.0, 1.0] where 0 is this instance and\\r\\n     * 1 is equal to the second matrix. The t value is not constrained.\\r\\n     *\\r\\n     * Context from parent matrix is not applied to the returned matrix.\\r\\n     *\\r\\n     * Note: this interpolation is naive. For animation use the\\r\\n     * intrpolateAnim() method instead.\\r\\n     *\\r\\n     * @param {Matrix} m2 - the matrix to interpolate with.\\r\\n     * @param {number} t - interpolation [0.0, 1.0]\\r\\n     * @param {CanvasRenderingContext2D} [context] - optional context to affect\\r\\n     * @returns {Matrix} - new instance with the interpolated result\\r\\n     */\\n    interpolate: function interpolate(m2, t, context) {\\n\\n        var me = this,\\n            m = context ? new Matrix(context) : new Matrix();\\n\\n        m.a = me.a + (m2.a - me.a) * t;\\n        m.b = me.b + (m2.b - me.b) * t;\\n        m.c = me.c + (m2.c - me.c) * t;\\n        m.d = me.d + (m2.d - me.d) * t;\\n        m.e = me.e + (m2.e - me.e) * t;\\n        m.f = me.f + (m2.f - me.f) * t;\\n\\n        return m._x();\\n    },\\n\\n    /**\\r\\n     * Interpolate this matrix with another and produce a new matrix.\\r\\n     * t is a value in the range [0.0, 1.0] where 0 is this instance and\\r\\n     * 1 is equal to the second matrix. The t value is not constrained.\\r\\n     *\\r\\n     * Context from parent matrix is not applied to the returned matrix.\\r\\n     *\\r\\n     * Note: this interpolation method uses decomposition which makes\\r\\n     * it suitable for animations (in particular where rotation takes\\r\\n     * places).\\r\\n     *\\r\\n     * @param {Matrix} m2 - the matrix to interpolate with.\\r\\n     * @param {number} t - interpolation [0.0, 1.0]\\r\\n     * @param {CanvasRenderingContext2D} [context] - optional context to affect\\r\\n     * @returns {Matrix} - new instance with the interpolated result\\r\\n     */\\n    interpolateAnim: function interpolateAnim(m2, t, context) {\\n\\n        var me = this,\\n            m = context ? new Matrix(context) : new Matrix(),\\n            d1 = me.decompose(),\\n            d2 = m2.decompose(),\\n            rotation = d1.rotation + (d2.rotation - d1.rotation) * t,\\n            translateX = d1.translate.x + (d2.translate.x - d1.translate.x) * t,\\n            translateY = d1.translate.y + (d2.translate.y - d1.translate.y) * t,\\n            scaleX = d1.scale.x + (d2.scale.x - d1.scale.x) * t,\\n            scaleY = d1.scale.y + (d2.scale.y - d1.scale.y) * t;\\n\\n        m.translate(translateX, translateY);\\n        m.rotate(rotation);\\n        m.scale(scaleX, scaleY);\\n\\n        return m._x();\\n    },\\n\\n    /**\\r\\n     * Decompose the current matrix into simple transforms using either\\r\\n     * QR (default) or LU decomposition. Code adapted from\\r\\n     * http://www.maths-informatique-jeux.com/blog/frederic/?post/2013/12/01/Decomposition-of-2D-transform-matrices\\r\\n     *\\r\\n     * The result must be applied in the following order to reproduce the current matrix:\\r\\n     *\\r\\n     *     QR: translate -> rotate -> scale -> skewX\\r\\n     *     LU: translate -> skewY  -> scale -> skewX\\r\\n     *\\r\\n     * @param {boolean} [useLU=false] - set to true to use LU rather than QR algorithm\\r\\n     * @returns {*} - an object containing current decomposed values (rotate, skew, scale, translate)\\r\\n     */\\n    decompose: function decompose(useLU) {\\n\\n        var me = this,\\n            a = me.a,\\n            b = me.b,\\n            c = me.c,\\n            d = me.d,\\n            acos = Math.acos,\\n            atan = Math.atan,\\n            sqrt = Math.sqrt,\\n            pi = Math.PI,\\n            translate = { x: me.e, y: me.f },\\n            rotation = 0,\\n            scale = { x: 1, y: 1 },\\n            skew = { x: 0, y: 0 },\\n            determ = a * d - b * c; // determinant(), skip DRY here...\\n\\n        if (useLU) {\\n            if (a) {\\n                skew = { x: atan(c / a), y: atan(b / a) };\\n                scale = { x: a, y: determ / a };\\n            } else if (b) {\\n                rotation = pi * 0.5;\\n                scale = { x: b, y: determ / b };\\n                skew.x = atan(d / b);\\n            } else {\\n                // a = b = 0\\n                scale = { x: c, y: d };\\n                skew.x = pi * 0.25;\\n            }\\n        } else {\\n            // Apply the QR-like decomposition.\\n            if (a || b) {\\n                var r = sqrt(a * a + b * b);\\n                rotation = b > 0 ? acos(a / r) : -acos(a / r);\\n                scale = { x: r, y: determ / r };\\n                skew.x = atan((a * c + b * d) / (r * r));\\n            } else if (c || d) {\\n                var s = sqrt(c * c + d * d);\\n                rotation = pi * 0.5 - (d > 0 ? acos(-c / s) : -acos(c / s));\\n                scale = { x: determ / s, y: s };\\n                skew.y = atan((a * c + b * d) / (s * s));\\n            } else {\\n                // a = b = c = d = 0\\n                scale = { x: 0, y: 0 }; // = invalid matrix\\n            }\\n        }\\n\\n        return {\\n            scale: scale,\\n            translate: translate,\\n            rotation: rotation,\\n            skew: skew\\n        };\\n    },\\n\\n    /**\\r\\n     * Returns the determinant of the current matrix.\\r\\n     * @returns {number}\\r\\n     */\\n    determinant: function determinant() {\\n        return this.a * this.d - this.b * this.c;\\n    },\\n\\n    /**\\r\\n     * Apply current matrix to x and y point.\\r\\n     * Returns a point object.\\r\\n     *\\r\\n     * @param {number} x - value for x\\r\\n     * @param {number} y - value for y\\r\\n     * @returns {{x: number, y: number}} A new transformed point object\\r\\n     */\\n    applyToPoint: function applyToPoint(x, y) {\\n\\n        var me = this;\\n\\n        return {\\n            x: x * me.a + y * me.c + me.e,\\n            y: x * me.b + y * me.d + me.f\\n        };\\n    },\\n\\n    /**\\r\\n     * Apply current matrix to array with point objects or point pairs.\\r\\n     * Returns a new array with points in the same format as the input array.\\r\\n     *\\r\\n     * A point object is an object literal:\\r\\n     *\\r\\n     * {x: x, y: y}\\r\\n     *\\r\\n     * so an array would contain either:\\r\\n     *\\r\\n     * [{x: x1, y: y1}, {x: x2, y: y2}, ... {x: xn, y: yn}]\\r\\n     *\\r\\n     * or\\r\\n     * [x1, y1, x2, y2, ... xn, yn]\\r\\n     *\\r\\n     * @param {Array} points - array with point objects or pairs\\r\\n     * @returns {Array} A new array with transformed points\\r\\n     */\\n    applyToArray: function applyToArray(points) {\\n\\n        var i = 0,\\n            p,\\n            l,\\n            mxPoints = [];\\n\\n        if (typeof points[0] === 'number') {\\n\\n            l = points.length;\\n\\n            while (i < l) {\\n                p = this.applyToPoint(points[i++], points[i++]);\\n                mxPoints.push(p.x, p.y);\\n            }\\n        } else {\\n            for (; p = points[i]; i++) {\\n                mxPoints.push(this.applyToPoint(p.x, p.y));\\n            }\\n        }\\n\\n        return mxPoints;\\n    },\\n\\n    /**\\r\\n     * Apply current matrix to a typed array with point pairs. Although\\r\\n     * the input array may be an ordinary array, this method is intended\\r\\n     * for more performant use where typed arrays are used. The returned\\r\\n     * array is regardless always returned as a Float32Array.\\r\\n     *\\r\\n     * @param {*} points - (typed) array with point pairs\\r\\n     * @param {boolean} [use64=false] - use Float64Array instead of Float32Array\\r\\n     * @returns {*} A new typed array with transformed points\\r\\n     */\\n    applyToTypedArray: function applyToTypedArray(points, use64) {\\n\\n        var i = 0,\\n            p,\\n            l = points.length,\\n            mxPoints = use64 ? new Float64Array(l) : new Float32Array(l);\\n\\n        while (i < l) {\\n            p = this.applyToPoint(points[i], points[i + 1]);\\n            mxPoints[i++] = p.x;\\n            mxPoints[i++] = p.y;\\n        }\\n\\n        return mxPoints;\\n    },\\n\\n    /**\\r\\n     * Apply to any canvas 2D context object. This does not affect the\\r\\n     * context that optionally was referenced in constructor unless it is\\r\\n     * the same context.\\r\\n     * @param {CanvasRenderingContext2D} context\\r\\n     */\\n    applyToContext: function applyToContext(context) {\\n        var me = this;\\n        context.setTransform(me.a, me.b, me.c, me.d, me.e, me.f);\\n        return me;\\n    },\\n\\n    /**\\r\\n     * Returns true if matrix is an identity matrix (no transforms applied).\\r\\n     * @returns {boolean} True if identity (not transformed)\\r\\n     */\\n    isIdentity: function isIdentity() {\\n        var me = this;\\n        return me._q(me.a, 1) && me._q(me.b, 0) && me._q(me.c, 0) && me._q(me.d, 1) && me._q(me.e, 0) && me._q(me.f, 0);\\n    },\\n\\n    /**\\r\\n     * Returns true if matrix is invertible\\r\\n     * @returns {boolean}\\r\\n     */\\n    isInvertible: function isInvertible() {\\n        return !this._q(this.determinant(), 0);\\n    },\\n\\n    /**\\r\\n     * Test if matrix is valid.\\r\\n     */\\n    isValid: function isValid() {\\n        return !this._q(this.a * this.d, 0);\\n    },\\n\\n    /**\\r\\n     * Clones current instance and returning a new matrix.\\r\\n     * @param {boolean} [noContext=false] don't clone context reference if true\\r\\n     * @returns {Matrix}\\r\\n     */\\n    clone: function clone(noContext) {\\n        var me = this,\\n            m = new Matrix();\\n        m.a = me.a;\\n        m.b = me.b;\\n        m.c = me.c;\\n        m.d = me.d;\\n        m.e = me.e;\\n        m.f = me.f;\\n        if (!noContext) m.context = me.context;\\n\\n        return m;\\n    },\\n\\n    /**\\r\\n     * Compares current matrix with another matrix. Returns true if equal\\r\\n     * (within epsilon tolerance).\\r\\n     * @param {Matrix} m - matrix to compare this matrix with\\r\\n     * @returns {boolean}\\r\\n     */\\n    isEqual: function isEqual(m) {\\n\\n        var me = this,\\n            q = me._q;\\n\\n        return q(me.a, m.a) && q(me.b, m.b) && q(me.c, m.c) && q(me.d, m.d) && q(me.e, m.e) && q(me.f, m.f);\\n    },\\n\\n    /**\\r\\n     * Returns an array with current matrix values.\\r\\n     * @returns {Array}\\r\\n     */\\n    toArray: function toArray() {\\n        var me = this;\\n        return [me.a, me.b, me.c, me.d, me.e, me.f];\\n    },\\n\\n    /**\\r\\n     * Generates a matrix() string that can be used with CSS transform.\\r\\n     * @returns {string}\\r\\n     */\\n    toCSS: function toCSS() {\\n        return \\\"matrix(\\\" + this.toArray() + \\\")\\\";\\n    },\\n\\n    /**\\r\\n     * Generates a matrix3d() string that can be used with CSS transform.\\r\\n     * @returns {string}\\r\\n     */\\n    toCSS3D: function toCSS3D() {\\n        var me = this;\\n        return \\\"matrix3d(\\\" + me.a + \\\", \\\" + me.b + \\\", 0, 0, \\\" + me.c + \\\", \\\" + me.d + \\\", 0, 0, 0, 0, 1, 0, \\\" + me.e + \\\", \\\" + me.f + \\\", 0, 1)\\\";\\n    },\\n\\n    /**\\r\\n     * Returns a JSON compatible string of current matrix.\\r\\n     * @returns {string}\\r\\n     */\\n    toJSON: function toJSON() {\\n        return JSON.stringify(this.toArray());\\n    },\\n\\n    /**\\r\\n     * Returns a string with current matrix as comma-separated list.\\r\\n     * @returns {string}\\r\\n     */\\n    toString: function toString() {\\n        return \\\"\\\" + this.toArray();\\n    },\\n\\n    /**\\r\\n     * Compares floating point values with some tolerance (epsilon)\\r\\n     * @param {number} f1 - float 1\\r\\n     * @param {number} f2 - float 2\\r\\n     * @returns {boolean}\\r\\n     * @private\\r\\n     */\\n    _q: function _q(f1, f2) {\\n        return Math.abs(f1 - f2) < 1e-14;\\n    },\\n\\n    /**\\r\\n     * Apply current absolute matrix to context if defined, to sync it.\\r\\n     * @private\\r\\n     */\\n    _x: function _x() {\\n        var me = this;\\n        if (me.context) me.context.setTransform(me.a, me.b, me.c, me.d, me.e, me.f);\\n        return me;\\n    }\\n};\\n\\nexports[\\\"default\\\"] = Matrix;\\nmodule.exports = exports[\\\"default\\\"];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Defines the global root level namespace for the library.\\n *\\n * @module\\n * @author Micah Rolon <micah@ginasink.com>\\n *\\n * @requires game\\n * @requires module:play~pl.util\\n * @requires types/Basic\\n * @requires types/Dimensions\\n */\\n\\nvar _playGame = __webpack_require__(16);\\n\\nvar _playGame2 = _interopRequireDefault(_playGame);\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesBasic = __webpack_require__(11);\\n\\nvar _typesBasic2 = _interopRequireDefault(_typesBasic);\\n\\nvar _typesQueue = __webpack_require__(37);\\n\\nvar _typesQueue2 = _interopRequireDefault(_typesQueue);\\n\\nvar _typesDimensions = __webpack_require__(5);\\n\\n/**\\n * Globaly accesable, root level namespace for the library.\\n * @namespace\\n * @prop {object} EVENT - Namespace for noralized event name constants.\\n * @prop {Basic} Basic - Base object type.\\n * @prop {Point} Point - Object type which holds values on a 2D cartesian plane.\\n * @prop {Size} Size - Object type which holds 2-dimentional values for size.\\n * @prop {function} game - Registers a game view implementation. Also a namespace for other methods.\\n * @prop {object} util - Namespace for utility functions.\\n */\\nvar pl = {\\n  Basic: _typesBasic2['default'], Point: _typesDimensions.Point, Size: _typesDimensions.Size, Queue: _typesQueue2['default'],\\n  game: _playGame2['default'],\\n  util: _util2['default'],\\n\\n  /**\\n   * @namespace\\n   * @prop {string} CLICK - The device normalized click event name.\\n   */\\n  EVENT: {\\n    // TODO: Find a better way to test for touch enabled devices.\\n    CLICK: /ipad|iphone|android/i.test(navigator.userAgent) ? 'touchend' : 'click'\\n  }\\n};\\n\\nexports['default'] = pl;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvcGxheS5qcz82ZWUyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztvQ0FXaUIsRUFBVzs7OztnQ0FDWCxFQUFNOzs7O3NDQUNMLEVBQWE7Ozs7c0NBQ2IsRUFBYTs7OzsyQ0FDSCxDQUFrQjs7Ozs7Ozs7Ozs7O0FBWTlDLElBQUksRUFBRSxHQUFHO0FBQ1IsT0FBSywyQkFBRSxLQUFLLDBCQUFFLElBQUkseUJBQUUsS0FBSztBQUN6QixNQUFJO0FBQ0osTUFBSTs7Ozs7O0FBTUosT0FBSyxFQUFFOztBQUVOLFNBQUssRUFBRyxzQkFBc0IsQ0FBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLFVBQVUsR0FBRyxPQUFPO0dBQ2hGO0NBQ0QsQ0FBQzs7cUJBRWEsRUFBRSIsImZpbGUiOiIxNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRGVmaW5lcyB0aGUgZ2xvYmFsIHJvb3QgbGV2ZWwgbmFtZXNwYWNlIGZvciB0aGUgbGlicmFyeS5cbiAqXG4gKiBAbW9kdWxlXG4gKiBAYXV0aG9yIE1pY2FoIFJvbG9uIDxtaWNhaEBnaW5hc2luay5jb20+XG4gKlxuICogQHJlcXVpcmVzIGdhbWVcbiAqIEByZXF1aXJlcyBtb2R1bGU6cGxheX5wbC51dGlsXG4gKiBAcmVxdWlyZXMgdHlwZXMvQmFzaWNcbiAqIEByZXF1aXJlcyB0eXBlcy9EaW1lbnNpb25zXG4gKi9cbmltcG9ydCBnYW1lIGZyb20gJ3BsYXkuZ2FtZSc7XG5pbXBvcnQgdXRpbCBmcm9tICd1dGlsJztcbmltcG9ydCBCYXNpYyBmcm9tICd0eXBlcy9CYXNpYyc7XG5pbXBvcnQgUXVldWUgZnJvbSAndHlwZXMvUXVldWUnO1xuaW1wb3J0IHsgUG9pbnQsIFNpemUgfSBmcm9tICd0eXBlcy9EaW1lbnNpb25zJztcblxuLyoqXG4gKiBHbG9iYWx5IGFjY2VzYWJsZSwgcm9vdCBsZXZlbCBuYW1lc3BhY2UgZm9yIHRoZSBsaWJyYXJ5LlxuICogQG5hbWVzcGFjZVxuICogQHByb3Age29iamVjdH0gRVZFTlQgLSBOYW1lc3BhY2UgZm9yIG5vcmFsaXplZCBldmVudCBuYW1lIGNvbnN0YW50cy5cbiAqIEBwcm9wIHtCYXNpY30gQmFzaWMgLSBCYXNlIG9iamVjdCB0eXBlLlxuICogQHByb3Age1BvaW50fSBQb2ludCAtIE9iamVjdCB0eXBlIHdoaWNoIGhvbGRzIHZhbHVlcyBvbiBhIDJEIGNhcnRlc2lhbiBwbGFuZS5cbiAqIEBwcm9wIHtTaXplfSBTaXplIC0gT2JqZWN0IHR5cGUgd2hpY2ggaG9sZHMgMi1kaW1lbnRpb25hbCB2YWx1ZXMgZm9yIHNpemUuXG4gKiBAcHJvcCB7ZnVuY3Rpb259IGdhbWUgLSBSZWdpc3RlcnMgYSBnYW1lIHZpZXcgaW1wbGVtZW50YXRpb24uIEFsc28gYSBuYW1lc3BhY2UgZm9yIG90aGVyIG1ldGhvZHMuXG4gKiBAcHJvcCB7b2JqZWN0fSB1dGlsIC0gTmFtZXNwYWNlIGZvciB1dGlsaXR5IGZ1bmN0aW9ucy5cbiAqL1xudmFyIHBsID0ge1xuXHRCYXNpYywgUG9pbnQsIFNpemUsIFF1ZXVlLFxuXHRnYW1lLFxuXHR1dGlsLFxuXHRcblx0LyoqXG5cdCAqIEBuYW1lc3BhY2Vcblx0ICogQHByb3Age3N0cmluZ30gQ0xJQ0sgLSBUaGUgZGV2aWNlIG5vcm1hbGl6ZWQgY2xpY2sgZXZlbnQgbmFtZS5cblx0ICovXG5cdEVWRU5UOiB7XG5cdFx0Ly8gVE9ETzogRmluZCBhIGJldHRlciB3YXkgdG8gdGVzdCBmb3IgdG91Y2ggZW5hYmxlZCBkZXZpY2VzLlxuXHRcdENMSUNLOiAoL2lwYWR8aXBob25lfGFuZHJvaWQvaSkudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSA/ICd0b3VjaGVuZCcgOiAnY2xpY2snXG5cdH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHBsO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zb3VyY2UvcGxheS5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Defines the 'game' method for registration and initialization of game scopes. This method also acts as a namespace for game level functions (See: [pl.game]{@link module:play~pl.game}).\\n *\\n * @module game\\n * @author Micah Rolon <micah@ginasink.com>\\n *\\n * @requires play.game.component\\n * @requires play.game.manager\\n * @requires util\\n * @requires types/Events\\n * @requires types/GlobalScope\\n * @requires types/Entity\\n * @requires types/Screen\\n * @requires types/Game\\n */\\n\\nvar _playGameComponent = __webpack_require__(17);\\n\\nvar _playGameComponent2 = _interopRequireDefault(_playGameComponent);\\n\\nvar _playGameManager = __webpack_require__(19);\\n\\nvar _playGameManager2 = _interopRequireDefault(_playGameManager);\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesEvents = __webpack_require__(18);\\n\\nvar _typesEvents2 = _interopRequireDefault(_typesEvents);\\n\\nvar _typesGlobalScope = __webpack_require__(22);\\n\\nvar _typesGlobalScope2 = _interopRequireDefault(_typesGlobalScope);\\n\\nvar _typesEntity = __webpack_require__(39);\\n\\nvar _typesEntity2 = _interopRequireDefault(_typesEntity);\\n\\nvar _typesScreen = __webpack_require__(40);\\n\\nvar _typesScreen2 = _interopRequireDefault(_typesScreen);\\n\\nvar _typesGame = __webpack_require__(41);\\n\\nvar _typesGame2 = _interopRequireDefault(_typesGame);\\n\\nvar _platform = __webpack_require__(42);\\n\\nvar _platform2 = _interopRequireDefault(_platform);\\n\\nvar GAMES, CONFIG, READY_QUEUE;\\n\\n/**\\n * Define a game scope for registration and/or initialization.\\n * This method also acts as a namespace for game level functions (See: [pl.game]{@link module:play~pl.game}).\\n *\\n * @arg {string} _name - The name of the game matched with a DOM nodes 'id' attribute.\\n * @arg {function|object} _implementation - The constructor or object which implements the scope behavior.\\n */\\nfunction game(_name, _implementation) {\\n\\tif (game.isDOMReady) {\\n\\t\\tinitialize(_name, _implementation);\\n\\t} else {\\n\\t\\tregister(_name, _implementation);\\n\\t}\\n}\\n\\nfunction ready(_eventName) {\\n\\tif (READY_QUEUE.length) return false;\\n\\tgame.trigger(_eventName || 'ready');\\n}\\n\\n/**\\n * Registers an implementation of a game scope for initialization.\\n * @protected\\n * @arg {string} _name - The name of the game matched with a DOM nodes 'id' attribute.\\n * @arg {function|object} _implementation - The constructor or object which implements the scope behavior.\\n */\\nfunction register(_name, _implementation) {\\n\\tif (! ~GAMES.indexOf(_name)) {\\n\\t\\tGAMES.push({\\n\\t\\t\\tid: _name,\\n\\t\\t\\timplementation: _implementation\\n\\t\\t});\\n\\t}\\n}\\n\\n/**\\n * Initializes an implementation of a game scope. (overloaded)\\n * @function initialize\\n * @protected\\n * @arg {string} _name - The name of the game matched with a DOM nodes 'id' attribute.\\n * @arg {function|object} _implementation - The constructor or object which implements the scope behavior.\\n */\\n\\n/**\\n * Initializes an implementation of a game scope.\\n * @protected\\n * @arg {array} _collection - The collection of game scope records for initialization.\\n * @arg {function|object} _implementation - The constructor or object which implements the scope behavior.\\n */\\nfunction initialize(_name_collection, _implementation) {\\n\\tswitch (typeof _name_collection) {\\n\\t\\tcase 'string':\\n\\t\\t\\t_typesGlobalScope2['default'][_name_collection] = _typesGame2['default'].extend(_implementation).initialize('#' + _name_collection);\\n\\t\\t\\tbreak;\\n\\n\\t\\tcase 'object':\\n\\t\\t\\t_name_collection.forEach(function (_item, _index) {\\n\\t\\t\\t\\tinitialize(_item.id, _item.implementation);\\n\\t\\t\\t});\\n\\t\\t\\tbreak;\\n\\t}\\n}\\n\\n/** @protected */\\nGAMES = [];\\n/** @protected */\\nCONFIG = {};\\n/** @protected */\\nREADY_QUEUE = [];\\n\\n/**\\n * Interface for game level configuration.\\n * @namespace game\\n * @memberof module:play~pl\\n * @mixes Events\\n */\\n(function () {\\n\\n\\tthis.component = _playGameComponent2['default'];\\n\\tthis.manager = _playGameManager2['default'];\\n\\n\\t_util2['default'].mixin(game, _typesEvents2['default']);\\n\\n\\tthis.on('platform-event', function (_event) {\\n\\t\\tconsole.log('play.game -', _event.name, _event.gameData);\\n\\t});\\n\\n\\t/**\\n  * Starts the dominos falling\\n  * @function run\\n  * @memberof module:play~pl.game\\n  */\\n\\tthis.run = function () {\\n\\t\\tgame.isDOMReady = true;\\n\\t\\tgame.trigger('dom-ready');\\n\\n\\t\\tgame.component.loadAll(function () {\\n\\t\\t\\t// console.log('** All component sources loaded.');\\n\\t\\t\\tinitialize(GAMES);\\n\\n\\t\\t\\tGAMES = null;\\n\\t\\t});\\n\\n\\t\\t_platform2['default'].emit(_platform2['default'].EVENT_INIT);\\n\\t};\\n\\n\\tthis.report = function (_name) {\\n\\t\\t_platform2['default'].emit(_name);\\n\\n\\t\\treturn this.report;\\n\\t};\\n\\n\\tthis.report.exit = function (_gameScope) {\\n\\t\\t_platform2['default'].saveGameState(_gameScope.progress());\\n\\t\\t_platform2['default'].emit(_platform2['default'].EVENT_EXIT);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.report.flip = function (_gameScope) {\\n\\t\\t_platform2['default'].saveGameState(_gameScope.progress());\\n\\t\\t_platform2['default'].emit(_platform2['default'].EVENT_FLIPPED);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * Getter/Setter for game level configuration.\\n  * @function module:play~pl.game.config\\n  * @arg {string} _key - The key to retrieve\\n  * @returns {this}\\n  */\\n\\n\\t/**\\n  * Getter/Setter for game level configuration.\\n  * @function config\\n  * @memberof module:play~pl.game\\n  * @arg {object} _mixin - Object to set properties on configuration.\\n  * @returns {this}\\n  */\\n\\tthis.config = function (_key_mixin) {\\n\\t\\tswitch (typeof _key_mixin) {\\n\\t\\t\\tcase 'string':\\n\\t\\t\\t\\treturn CONFIG[_key_mixin];\\n\\t\\t\\tcase 'object':\\n\\t\\t\\t\\tif (_key_mixin) _util2['default'].mixin(CONFIG, _key_mixin);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * @function provideEntityType\\n  * @deprecated\\n  * @memberof module:play~pl.game\\n  */\\n\\tthis.provideEntityType = function () {\\n\\t\\treturn _typesEntity2['default'];\\n\\t};\\n\\n\\t/**\\n  * @function provideScreenType\\n  * @deprecated\\n  * @memberof module:play~pl.game\\n  */\\n\\tthis.provideScreenType = function () {\\n\\t\\treturn _typesScreen2['default'];\\n\\t};\\n\\n\\t/**\\n  * Augments the global scope.\\n  * @function scope\\n  * @arg {function|object} _mixin - Object or constructor to define members.\\n  * @returns {this}\\n  *\\n  * @memberof module:play~pl.game\\n  */\\n\\tthis.scope = function (_mixin) {\\n\\t\\tif (typeof _mixin === 'function') {\\n\\t\\t\\t_mixin.call(_typesGlobalScope2['default']);\\n\\t\\t} else if (_mixin) {\\n\\t\\t\\t_typesGlobalScope2['default'].mixin(_mixin);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * @function queue\\n  * @deprecated\\n  * @memberof module:play~pl.game\\n  */\\n\\tthis.queue = function (_item) {\\n\\t\\tif (! ~READY_QUEUE.indexOf(_item)) READY_QUEUE.push(_item);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.queue.complete = function (_item, _eventName) {\\n\\t\\tvar index;\\n\\n\\t\\tindex = READY_QUEUE.indexOf(_item);\\n\\t\\tREADY_QUEUE.splice(index, 1);\\n\\n\\t\\tready(_eventName);\\n\\n\\t\\treturn this;\\n\\t};\\n}).call(game);\\n\\nexports['default'] = game;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Defines the `component()` method for component behavior registration. This method is also a namesapce for methods to manage and load component behavior scripts.\\n *\\n * @module\\n * @author Micah Rolon <micah@ginasink.com>\\n *\\n * @requires play~pl.util\\n * @requires types/Events\\n */\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesEvents = __webpack_require__(18);\\n\\nvar _typesEvents2 = _interopRequireDefault(_typesEvents);\\n\\n/**\\n * Collection of component behavior records\\n * @const\\n */\\nvar COMPONENTS;\\n\\n/**\\n * Registers a component behavior.\\n * @arg {string} _name - The name for the component.\\n * @arg {function|object} _implementation - Constructor function or object with the behavior's implementation.\\n * @returns {@link module:play~pl.game}\\n */\\nfunction component(_name, _implementation) {\\n\\tif (!component.get(_name)) {\\n\\t\\tCOMPONENTS.push({\\n\\t\\t\\tname: _name,\\n\\t\\t\\timplementation: _implementation,\\n\\t\\t\\tconfig: {}\\n\\t\\t});\\n\\t}\\n\\n\\treturn this;\\n}\\n\\nCOMPONENTS = [];\\n\\n/**\\n * Methods to manage and load component behavior scripts.\\n * @namespace component\\n * @memberof module:play~pl.game\\n * @mixes Events\\n */\\n(function () {\\n\\n\\t_util2['default'].mixin(this, _typesEvents2['default']);\\n\\n\\t/**\\n  * Given a name; provides the component record. `{name, implementation}`\\n  * @memberof module:play~pl.game.component\\n  * @arg {string} _name - The name of the component.\\n  * @returns {object} The record.\\n  */\\n\\tthis.get = function (_name) {\\n\\t\\tvar i, record;\\n\\n\\t\\tfor (i = 0; record = COMPONENTS[i]; i += 1) {\\n\\t\\t\\tif (record.name === _name) return record;\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t};\\n\\n\\t/**\\n  * Loads the script for the component. The HTML and CSS will be loaded when the component scope initalizes.<br>\\n  * The path of the script file is resolved `{pl.game.config.componentDirectory}/{_name}/behavior.js`.\\n  * @memberof module:play~pl.game.component\\n  * @arg {string} _name - The name of the component.\\n  * @arg {function} _callback - Callback for load success.\\n  * @todo Implement Promises.\\n  * @returns `this`\\n  */\\n\\tthis.load = function (_name, _callback) {\\n\\t\\tvar path;\\n\\n\\t\\tif (component.get(_name)) {\\n\\t\\t\\tif (_callback) _callback.call(component, _name);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\tpath = pl.game.config('componentDirectory') + _name + '/behavior.js';\\n\\n\\t\\t$.getScript(path, function () {\\n\\t\\t\\tif (_callback) _callback.call(component, _name);\\n\\t\\t\\tcomponent.trigger('loaded', [_name]);\\n\\t\\t});\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * Loads all the component scripts for HTML elements with `pl-component` attributes.\\n  * @memberof module:play~pl.game.component\\n  * @arg {function} _callback - Callback for load success.\\n  * @todo Implement Promises.\\n  * @returns `this`\\n  */\\n\\tthis.loadAll = function (_callback) {\\n\\t\\tvar $components, queue;\\n\\n\\t\\t$components = $('[pl-component]');\\n\\t\\tqueue = [];\\n\\n\\t\\t$components.each(function (_index) {\\n\\t\\t\\tvar name;\\n\\n\\t\\t\\tname = $(this).attr('pl-component');\\n\\n\\t\\t\\tif (~queue.indexOf(name)) return;\\n\\n\\t\\t\\tqueue.push(name);\\n\\t\\t});\\n\\n\\t\\tqueue.slice(0).forEach(function (_name) {\\n\\t\\t\\tcomponent.load(_name, function () {\\n\\t\\t\\t\\tvar index;\\n\\n\\t\\t\\t\\tindex = queue.indexOf(_name);\\n\\t\\t\\t\\tqueue.splice(index, 1);\\n\\n\\t\\t\\t\\tif (!queue.length && _callback) _callback.apply(component, arguments);\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t// Maybe?\\n\\t// this.config = function () {};\\n}).call(component);\\n\\nexports['default'] = component;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvcGxheS5nYW1lLmNvbXBvbmVudC5qcz9lMTg2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Z0NBU2lCLEVBQU07Ozs7dUNBQ0osRUFBYzs7Ozs7Ozs7QUFNakMsSUFBSSxVQUFVLENBQUM7Ozs7Ozs7O0FBUWYsU0FBUyxTQUFTLENBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRTtBQUMzQyxLQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUMxQixZQUFVLENBQUMsSUFBSSxDQUFDO0FBQ2YsT0FBSSxFQUFFLEtBQUs7QUFDWCxpQkFBYyxFQUFFLGVBQWU7QUFDL0IsU0FBTSxFQUFFLEVBQUU7R0FDVixDQUFDLENBQUM7RUFDSDs7QUFFRCxRQUFPLElBQUksQ0FBQztDQUNaOztBQUVELFVBQVUsR0FBRyxFQUFFLENBQUM7Ozs7Ozs7O0FBUWhCLENBQUMsWUFBWTs7QUFFWixtQkFBSyxLQUFLLENBQUMsSUFBSSwyQkFBUyxDQUFDOzs7Ozs7OztBQVF6QixLQUFJLENBQUMsR0FBRyxHQUFHLFVBQVUsS0FBSyxFQUFFO0FBQzNCLE1BQUksQ0FBQyxFQUFFLE1BQU0sQ0FBQzs7QUFFZCxPQUFLLENBQUMsR0FBQyxDQUFDLEVBQUUsTUFBTSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUUsQ0FBQyxFQUFFO0FBQ3ZDLE9BQUksTUFBTSxDQUFDLElBQUksS0FBSyxLQUFLLEVBQUUsT0FBTyxNQUFNLENBQUM7R0FDekM7O0FBRUQsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDOzs7Ozs7Ozs7OztBQVdGLEtBQUksQ0FBQyxJQUFJLEdBQUcsVUFBVSxLQUFLLEVBQUUsU0FBUyxFQUFFO0FBQ3ZDLE1BQUksSUFBSTs7QUFFUixNQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDekIsT0FBSSxTQUFTLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDaEQsVUFBTyxJQUFJLENBQUM7R0FDWjs7QUFFRCxNQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsR0FBQyxLQUFLLEdBQUMsY0FBYyxDQUFDOztBQUVqRSxHQUFDLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxZQUFZO0FBQzdCLE9BQUksU0FBUyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ2hELFlBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztHQUNyQyxDQUFDLENBQUM7O0FBRUgsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDOzs7Ozs7Ozs7QUFTRixLQUFJLENBQUMsT0FBTyxHQUFHLFVBQVUsU0FBUyxFQUFFO0FBQ25DLE1BQUksV0FBVyxFQUFFLEtBQUssQ0FBQzs7QUFFdkIsYUFBVyxHQUFHLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ2xDLE9BQUssR0FBRyxFQUFFLENBQUM7O0FBRVgsYUFBVyxDQUFDLElBQUksQ0FBQyxVQUFVLE1BQU0sRUFBRTtBQUNsQyxPQUFJLElBQUksQ0FBQzs7QUFFVCxPQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQzs7QUFFcEMsT0FBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTzs7QUFFakMsUUFBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUNqQixDQUFDLENBQUM7O0FBRUgsT0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxLQUFLLEVBQUU7QUFDdkMsWUFBUyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsWUFBWTtBQUNqQyxRQUFJLEtBQUssQ0FBQzs7QUFFVixTQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM3QixTQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQzs7QUFFdkIsUUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksU0FBUyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQztJQUNyRSxDQUFDLENBQUM7R0FDSCxDQUFDLENBQUM7O0FBRUgsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDOzs7O0NBS0YsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7O3FCQUVKLFNBQVMiLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERlZmluZXMgdGhlIGBjb21wb25lbnQoKWAgbWV0aG9kIGZvciBjb21wb25lbnQgYmVoYXZpb3IgcmVnaXN0cmF0aW9uLiBUaGlzIG1ldGhvZCBpcyBhbHNvIGEgbmFtZXNhcGNlIGZvciBtZXRob2RzIHRvIG1hbmFnZSBhbmQgbG9hZCBjb21wb25lbnQgYmVoYXZpb3Igc2NyaXB0cy5cbiAqXG4gKiBAbW9kdWxlXG4gKiBAYXV0aG9yIE1pY2FoIFJvbG9uIDxtaWNhaEBnaW5hc2luay5jb20+XG4gKlxuICogQHJlcXVpcmVzIHBsYXl+cGwudXRpbFxuICogQHJlcXVpcmVzIHR5cGVzL0V2ZW50c1xuICovXG5pbXBvcnQgdXRpbCBmcm9tICd1dGlsJztcbmltcG9ydCBFdmVudHMgZnJvbSAndHlwZXMvRXZlbnRzJztcblxuLyoqXG4gKiBDb2xsZWN0aW9uIG9mIGNvbXBvbmVudCBiZWhhdmlvciByZWNvcmRzXG4gKiBAY29uc3RcbiAqL1xudmFyIENPTVBPTkVOVFM7XG5cbi8qKlxuICogUmVnaXN0ZXJzIGEgY29tcG9uZW50IGJlaGF2aW9yLlxuICogQGFyZyB7c3RyaW5nfSBfbmFtZSAtIFRoZSBuYW1lIGZvciB0aGUgY29tcG9uZW50LlxuICogQGFyZyB7ZnVuY3Rpb258b2JqZWN0fSBfaW1wbGVtZW50YXRpb24gLSBDb25zdHJ1Y3RvciBmdW5jdGlvbiBvciBvYmplY3Qgd2l0aCB0aGUgYmVoYXZpb3IncyBpbXBsZW1lbnRhdGlvbi5cbiAqIEByZXR1cm5zIHtAbGluayBtb2R1bGU6cGxheX5wbC5nYW1lfVxuICovXG5mdW5jdGlvbiBjb21wb25lbnQgKF9uYW1lLCBfaW1wbGVtZW50YXRpb24pIHtcblx0aWYgKCFjb21wb25lbnQuZ2V0KF9uYW1lKSkge1xuXHRcdENPTVBPTkVOVFMucHVzaCh7XG5cdFx0XHRuYW1lOiBfbmFtZSxcblx0XHRcdGltcGxlbWVudGF0aW9uOiBfaW1wbGVtZW50YXRpb24sXG5cdFx0XHRjb25maWc6IHt9XG5cdFx0fSk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn1cblxuQ09NUE9ORU5UUyA9IFtdO1xuXG4vKipcbiAqIE1ldGhvZHMgdG8gbWFuYWdlIGFuZCBsb2FkIGNvbXBvbmVudCBiZWhhdmlvciBzY3JpcHRzLlxuICogQG5hbWVzcGFjZSBjb21wb25lbnRcbiAqIEBtZW1iZXJvZiBtb2R1bGU6cGxheX5wbC5nYW1lXG4gKiBAbWl4ZXMgRXZlbnRzXG4gKi9cbihmdW5jdGlvbiAoKSB7XG5cdFxuXHR1dGlsLm1peGluKHRoaXMsIEV2ZW50cyk7XG5cblx0LyoqXG5cdCAqIEdpdmVuIGEgbmFtZTsgcHJvdmlkZXMgdGhlIGNvbXBvbmVudCByZWNvcmQuIGB7bmFtZSwgaW1wbGVtZW50YXRpb259YFxuXHQgKiBAbWVtYmVyb2YgbW9kdWxlOnBsYXl+cGwuZ2FtZS5jb21wb25lbnRcblx0ICogQGFyZyB7c3RyaW5nfSBfbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBjb21wb25lbnQuXG5cdCAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSByZWNvcmQuXG5cdCAqL1xuXHR0aGlzLmdldCA9IGZ1bmN0aW9uIChfbmFtZSkge1xuXHRcdHZhciBpLCByZWNvcmQ7XG5cblx0XHRmb3IgKGk9MDsgcmVjb3JkID0gQ09NUE9ORU5UU1tpXTsgaSs9MSkge1xuXHRcdFx0aWYgKHJlY29yZC5uYW1lID09PSBfbmFtZSkgcmV0dXJuIHJlY29yZDtcblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblx0fTtcblxuXHQvKipcblx0ICogTG9hZHMgdGhlIHNjcmlwdCBmb3IgdGhlIGNvbXBvbmVudC4gVGhlIEhUTUwgYW5kIENTUyB3aWxsIGJlIGxvYWRlZCB3aGVuIHRoZSBjb21wb25lbnQgc2NvcGUgaW5pdGFsaXplcy48YnI+XG5cdCAqIFRoZSBwYXRoIG9mIHRoZSBzY3JpcHQgZmlsZSBpcyByZXNvbHZlZCBge3BsLmdhbWUuY29uZmlnLmNvbXBvbmVudERpcmVjdG9yeX0ve19uYW1lfS9iZWhhdmlvci5qc2AuXG5cdCAqIEBtZW1iZXJvZiBtb2R1bGU6cGxheX5wbC5nYW1lLmNvbXBvbmVudFxuXHQgKiBAYXJnIHtzdHJpbmd9IF9uYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGNvbXBvbmVudC5cblx0ICogQGFyZyB7ZnVuY3Rpb259IF9jYWxsYmFjayAtIENhbGxiYWNrIGZvciBsb2FkIHN1Y2Nlc3MuXG5cdCAqIEB0b2RvIEltcGxlbWVudCBQcm9taXNlcy5cblx0ICogQHJldHVybnMgYHRoaXNgXG5cdCAqL1xuXHR0aGlzLmxvYWQgPSBmdW5jdGlvbiAoX25hbWUsIF9jYWxsYmFjaykge1xuXHRcdHZhciBwYXRoXG5cblx0XHRpZiAoY29tcG9uZW50LmdldChfbmFtZSkpIHtcblx0XHRcdGlmIChfY2FsbGJhY2spIF9jYWxsYmFjay5jYWxsKGNvbXBvbmVudCwgX25hbWUpO1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0cGF0aCA9IHBsLmdhbWUuY29uZmlnKCdjb21wb25lbnREaXJlY3RvcnknKStfbmFtZSsnL2JlaGF2aW9yLmpzJztcblxuXHRcdCQuZ2V0U2NyaXB0KHBhdGgsIGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmIChfY2FsbGJhY2spIF9jYWxsYmFjay5jYWxsKGNvbXBvbmVudCwgX25hbWUpO1xuXHRcdFx0Y29tcG9uZW50LnRyaWdnZXIoJ2xvYWRlZCcsIFtfbmFtZV0pO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0LyoqXG5cdCAqIExvYWRzIGFsbCB0aGUgY29tcG9uZW50IHNjcmlwdHMgZm9yIEhUTUwgZWxlbWVudHMgd2l0aCBgcGwtY29tcG9uZW50YCBhdHRyaWJ1dGVzLlxuXHQgKiBAbWVtYmVyb2YgbW9kdWxlOnBsYXl+cGwuZ2FtZS5jb21wb25lbnRcblx0ICogQGFyZyB7ZnVuY3Rpb259IF9jYWxsYmFjayAtIENhbGxiYWNrIGZvciBsb2FkIHN1Y2Nlc3MuXG5cdCAqIEB0b2RvIEltcGxlbWVudCBQcm9taXNlcy5cblx0ICogQHJldHVybnMgYHRoaXNgXG5cdCAqL1xuXHR0aGlzLmxvYWRBbGwgPSBmdW5jdGlvbiAoX2NhbGxiYWNrKSB7XG5cdFx0dmFyICRjb21wb25lbnRzLCBxdWV1ZTtcblxuXHRcdCRjb21wb25lbnRzID0gJCgnW3BsLWNvbXBvbmVudF0nKTtcblx0XHRxdWV1ZSA9IFtdO1xuXG5cdFx0JGNvbXBvbmVudHMuZWFjaChmdW5jdGlvbiAoX2luZGV4KSB7XG5cdFx0XHR2YXIgbmFtZTtcblxuXHRcdFx0bmFtZSA9ICQodGhpcykuYXR0cigncGwtY29tcG9uZW50Jyk7XG5cblx0XHRcdGlmICh+cXVldWUuaW5kZXhPZihuYW1lKSkgcmV0dXJuO1xuXG5cdFx0XHRxdWV1ZS5wdXNoKG5hbWUpO1xuXHRcdH0pO1xuXG5cdFx0cXVldWUuc2xpY2UoMCkuZm9yRWFjaChmdW5jdGlvbiAoX25hbWUpIHtcblx0XHRcdGNvbXBvbmVudC5sb2FkKF9uYW1lLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHZhciBpbmRleDtcblxuXHRcdFx0XHRpbmRleCA9IHF1ZXVlLmluZGV4T2YoX25hbWUpO1xuXHRcdFx0XHRxdWV1ZS5zcGxpY2UoaW5kZXgsIDEpO1xuXG5cdFx0XHRcdGlmICghcXVldWUubGVuZ3RoICYmIF9jYWxsYmFjaykgX2NhbGxiYWNrLmFwcGx5KGNvbXBvbmVudCwgYXJndW1lbnRzKVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvLyBNYXliZT9cblx0Ly8gdGhpcy5jb25maWcgPSBmdW5jdGlvbiAoKSB7fTtcblxufSkuY2FsbChjb21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQ7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NvdXJjZS9wbGF5LmdhbWUuY29tcG9uZW50LmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n*  Events\\n*  @desc Contains methods for managing and dispatching events from objects.\\n*  @proto Basic\\n*/\\n\\nvar _typesBasic = __webpack_require__(11);\\n\\nvar _typesBasic2 = _interopRequireDefault(_typesBasic);\\n\\nvar Events = _typesBasic2['default'].extend(function () {\\n\\tvar i, method, methods;\\n\\t/**\\n *  @desc Creates a function with a proxy to the jQuery method.\\n *  @param _name (String) The name of the method being proxied.\\n *  @return (jQuery|*) Either a jQuery object or whatever the original method returns.\\n *  @private\\n */\\n\\tfunction createProxyFunction(_name) {\\n\\t\\treturn function () {\\n\\t\\t\\tvar $jq = $();\\n\\t\\t\\t// We must wrap our object in jQuery. If 'typeof this' is a function then we need\\n\\t\\t\\t// to add it in this manner, otherwise jQuery treats it like a ready callback.\\n\\t\\t\\t$jq.push(this);\\n\\n\\t\\t\\treturn $.fn[_name].apply($jq, arguments);\\n\\t\\t};\\n\\t}\\n\\n\\tmethods = ['on', 'off', 'trigger'];\\n\\n\\tthis.baseType = 'TYPE_EVENTS';\\n\\n\\tfor (i = 0; method = methods[i]; i += 1) {\\n\\t\\tthis[method] = createProxyFunction(method);\\n\\t}\\n});\\n\\nexports['default'] = Events;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvRXZlbnRzLmpzP2VlZTMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O3NDQU1rQixFQUFhOzs7O0FBRS9CLElBQUksTUFBTSxHQUFHLHdCQUFNLE1BQU0sQ0FBQyxZQUFZO0FBQ3JDLEtBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUM7Ozs7Ozs7QUFPdkIsVUFBUyxtQkFBbUIsQ0FBRSxLQUFLLEVBQUU7QUFDcEMsU0FBTyxZQUFZO0FBQ2xCLE9BQUksR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDOzs7QUFHZCxNQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDOztBQUVmLFVBQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0dBQ3pDLENBQUM7RUFDRjs7QUFFRCxRQUFPLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDOztBQUVuQyxLQUFJLENBQUMsUUFBUSxHQUFHLGFBQWEsQ0FBQzs7QUFFOUIsTUFBSyxDQUFDLEdBQUMsQ0FBQyxFQUFFLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFFLENBQUMsRUFBRTtBQUNwQyxNQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7RUFDM0M7Q0FDRCxDQUFDLENBQUM7O3FCQUVZLE1BQU0iLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiogIEV2ZW50c1xuKiAgQGRlc2MgQ29udGFpbnMgbWV0aG9kcyBmb3IgbWFuYWdpbmcgYW5kIGRpc3BhdGNoaW5nIGV2ZW50cyBmcm9tIG9iamVjdHMuXG4qICBAcHJvdG8gQmFzaWNcbiovXG5cbmltcG9ydCBCYXNpYyBmcm9tICd0eXBlcy9CYXNpYyc7XG5cbnZhciBFdmVudHMgPSBCYXNpYy5leHRlbmQoZnVuY3Rpb24gKCkge1xuXHR2YXIgaSwgbWV0aG9kLCBtZXRob2RzO1xuXHQvKipcblx0KiAgQGRlc2MgQ3JlYXRlcyBhIGZ1bmN0aW9uIHdpdGggYSBwcm94eSB0byB0aGUgalF1ZXJ5IG1ldGhvZC5cblx0KiAgQHBhcmFtIF9uYW1lIChTdHJpbmcpIFRoZSBuYW1lIG9mIHRoZSBtZXRob2QgYmVpbmcgcHJveGllZC5cblx0KiAgQHJldHVybiAoalF1ZXJ5fCopIEVpdGhlciBhIGpRdWVyeSBvYmplY3Qgb3Igd2hhdGV2ZXIgdGhlIG9yaWdpbmFsIG1ldGhvZCByZXR1cm5zLlxuXHQqICBAcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBjcmVhdGVQcm94eUZ1bmN0aW9uIChfbmFtZSkge1xuXHRcdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgJGpxID0gJCgpO1xuXHRcdFx0Ly8gV2UgbXVzdCB3cmFwIG91ciBvYmplY3QgaW4galF1ZXJ5LiBJZiAndHlwZW9mIHRoaXMnIGlzIGEgZnVuY3Rpb24gdGhlbiB3ZSBuZWVkXG5cdFx0XHQvLyB0byBhZGQgaXQgaW4gdGhpcyBtYW5uZXIsIG90aGVyd2lzZSBqUXVlcnkgdHJlYXRzIGl0IGxpa2UgYSByZWFkeSBjYWxsYmFjay5cblx0XHRcdCRqcS5wdXNoKHRoaXMpO1xuXG5cdFx0XHRyZXR1cm4gJC5mbltfbmFtZV0uYXBwbHkoJGpxLCBhcmd1bWVudHMpO1xuXHRcdH07XG5cdH1cblxuXHRtZXRob2RzID0gWydvbicsICdvZmYnLCAndHJpZ2dlciddO1xuXG5cdHRoaXMuYmFzZVR5cGUgPSAnVFlQRV9FVkVOVFMnO1xuXG5cdGZvciAoaT0wOyBtZXRob2QgPSBtZXRob2RzW2ldOyBpKz0xKSB7XG5cdFx0dGhpc1ttZXRob2RdID0gY3JlYXRlUHJveHlGdW5jdGlvbihtZXRob2QpO1xuXHR9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgRXZlbnRzO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc291cmNlL3R5cGVzL0V2ZW50cy5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n\\nvar _playGameManagerDraggable = __webpack_require__(20);\\n\\nvar _playGameManagerDraggable2 = _interopRequireDefault(_playGameManagerDraggable);\\n\\nexports.draggable = _playGameManagerDraggable2['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvcGxheS5nYW1lLm1hbmFnZXIuanM/ODJiNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O29EQUFzQixFQUE2Qjs7OztRQUUxQyxTQUFTIiwiZmlsZSI6IjE5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRyYWdnYWJsZSBmcm9tICdwbGF5LmdhbWUubWFuYWdlci5kcmFnZ2FibGUnO1xuXG5leHBvcnQgeyBkcmFnZ2FibGUgfVxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc291cmNlL3BsYXkuZ2FtZS5tYW5hZ2VyLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesCollection = __webpack_require__(21);\\n\\nvar _typesCollection2 = _interopRequireDefault(_typesCollection);\\n\\nvar _typesDimensions = __webpack_require__(5);\\n\\nvar COLLECTION_DRAGABLES = _typesCollection2['default'].create();\\n\\nvar draggableStyleSheet;\\n\\nfunction boot() {\\n\\tcreateHelperStyleSheet();\\n\\tattachEvents();\\n}\\n\\nfunction attachEvents() {\\n\\tvar state;\\n\\n\\t$(document).on('mousedown', function (_event) {\\n\\t\\tvar draggable, scope, cursor, $transform, point, mode, style, dragStartEvent, helperUUID;\\n\\n\\t\\t$draggable = $(_event.target).closest('[pl-draggable]');\\n\\n\\t\\tif ($draggable.length) {\\n\\t\\t\\tscope = $draggable.scope();\\n\\t\\t\\tcursor = resolveEventPoint(_event, 1 / scope.game.zoom);\\n\\t\\t\\tmode = $draggable.attr('pl-draggable');\\n\\t\\t\\tpoint = $draggable.absolutePosition();\\n\\t\\t\\ttransform = $draggable.transform();\\n\\t\\t\\t// TODO: Set these styles in a style node.\\n\\t\\t\\t// That way I dont have to override them important :/\\n\\t\\t\\tstyle = _util2['default'].mixin({}, window.getComputedStyle($draggable[0]));\\n\\t\\t\\thelperUUID = createUUID();\\n\\n\\t\\t\\tdelete style.zIndex;\\n\\t\\t\\tdelete style.opacity;\\n\\t\\t\\tdelete style.cursor;\\n\\t\\t\\tdelete style.transition;\\n\\t\\t\\tdelete style.transitionDelay;\\n\\t\\t\\tdelete style.transitionDuration;\\n\\t\\t\\tdelete style.transitionProperty;\\n\\t\\t\\tdelete style.transitionTimingFunction;\\n\\n\\t\\t\\tdraggableStyleSheet.html(provideSource(helperUUID, style));\\n\\n\\t\\t\\tstate = {\\n\\t\\t\\t\\tmode: mode,\\n\\t\\t\\t\\t$draggable: $draggable,\\n\\t\\t\\t\\tscope: scope,\\n\\t\\t\\t\\t$helper: null,\\n\\n\\t\\t\\t\\tstart: {\\n\\t\\t\\t\\t\\tcursor: cursor,\\n\\t\\t\\t\\t\\tpoint: point,\\n\\t\\t\\t\\t\\ttransform: transform\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\tprogress: {\\n\\t\\t\\t\\t\\tdistance: null,\\n\\t\\t\\t\\t\\tpoint: null,\\n\\t\\t\\t\\t\\ttransform: null\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\n\\t\\t\\tswitch (mode) {\\n\\t\\t\\t\\tcase 'clone':\\n\\t\\t\\t\\t\\tstate.$helper = $draggable.clone();\\n\\t\\t\\t\\t\\tstate.$helper.id(helperUUID).removeAttr('pl-draggable') // helpers are not to be captured as draggable\\n\\t\\t\\t\\t\\t.addClass('draggable-helper').appendTo(document.body).absolutePosition(point);\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tcase 'pluck':\\n\\t\\t\\t\\t\\t$draggable.addClass('PLUCKED');\\n\\n\\t\\t\\t\\t\\tstate.$helper = $draggable.clone();\\n\\t\\t\\t\\t\\tstate.$helper.id(helperUUID).removeAttr('pl-draggable') // helpers are not to be captured as draggable\\n\\t\\t\\t\\t\\t.addClass('draggable-helper').appendTo(document.body).absolutePosition(point);\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\tstate.$helper = $draggable;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\tstate.$helper.removeClass('DRAG-ENDED').addClass('DRAG-START');\\n\\n\\t\\t\\tdragStartEvent = $.Event('drag-start', {\\n\\t\\t\\t\\tstate: state,\\n\\t\\t\\t\\ttargetScope: scope\\n\\t\\t\\t});\\n\\n\\t\\t\\tscope.trigger(dragStartEvent);\\n\\t\\t}\\n\\t}).on('mousemove', function (_event) {\\n\\t\\tvar cursor, $draggable, distance, point, transform, dragMoveEvent;\\n\\n\\t\\tif (state) {\\n\\t\\t\\tcursor = resolveEventPoint(_event, 1 / state.scope.game.zoom);\\n\\t\\t\\tdistance = state.start.cursor.distance(cursor);\\n\\t\\t\\tpoint = _typesDimensions.Point.create();\\n\\t\\t\\ttransform = null;\\n\\n\\t\\t\\tif (state.start.transform !== 'none') {\\n\\t\\t\\t\\ttransform = state.start.transform.clone();\\n\\t\\t\\t\\ttransform.translate(distance.width, distance.height);\\n\\t\\t\\t\\tpoint.set(transform.applyToPoint(0, 0));\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tpoint = distance.to('point');\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (state.$helper.hasClass('DRAG-START')) {\\n\\t\\t\\t\\tstate.$helper.removeClass('DRAG-START').addClass('DRAGGING');\\n\\t\\t\\t}\\n\\n\\t\\t\\tdragMoveEvent = $.Event('drag-move', {\\n\\t\\t\\t\\tstate: state,\\n\\t\\t\\t\\ttargetScope: state.scope\\n\\t\\t\\t});\\n\\n\\t\\t\\tstate.progress.distance = distance;\\n\\t\\t\\tstate.progress.point = state.start.point.inc(point);\\n\\t\\t\\tstate.progress.transform = transform;\\n\\n\\t\\t\\tstate.scope.translate(state.$helper, point);\\n\\t\\t\\tstate.scope.trigger(dragMoveEvent);\\n\\t\\t}\\n\\t}).on('mouseup mouseout', function (_event) {\\n\\t\\tvar $draggable, dragEndEvent;\\n\\n\\t\\tif (state) {\\n\\t\\t\\t// Do not end dragging if we dont mouse out of the document.\\n\\t\\t\\tif (_event.type === 'mouseout' && ! ~[null, document.documentElement].indexOf(_event.toElement)) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t$draggable = state.$draggable;\\n\\n\\t\\t\\tif (state.$helper.hasClass('draggable-helper')) {\\n\\t\\t\\t\\tstate.$helper.on('transitionend', function () {\\n\\t\\t\\t\\t\\t$draggable.removeClass('PLUCKED');\\n\\t\\t\\t\\t\\t$(this).remove();\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\tstate.$helper.removeClass('DRAG-START DRAGGING').addClass('DRAG-ENDED');\\n\\n\\t\\t\\tdragEndEvent = $.Event('drag-end', {\\n\\t\\t\\t\\tstate: state,\\n\\t\\t\\t\\ttargetScope: state.scope\\n\\t\\t\\t});\\n\\n\\t\\t\\tstate.scope.trigger(dragEndEvent);\\n\\n\\t\\t\\tstate = null;\\n\\t\\t}\\n\\t});\\n}\\n\\nfunction resolveEventPoint(_event, _scale) {\\n\\tvar x, y, scale;\\n\\n\\tscale = _scale || 1;\\n\\n\\tif (_event.touches) {\\n\\t\\tx = _event.touches[0].clientX;\\n\\t\\ty = _event.touches[0].clientY;\\n\\t} else {\\n\\t\\tx = _event.clientX;\\n\\t\\ty = _event.clientY;\\n\\t}\\n\\n\\treturn _typesDimensions.Point.create().set(x * scale, y * scale);\\n}\\n\\nfunction createHelperStyleSheet() {\\n\\tdraggableStyleSheet = $('<style id=\\\"draggable-helper-css\\\" type=\\\"text/css\\\"></style>').appendTo(document.body);\\n}\\n\\nfunction provideSource(_uuid, _definition) {\\n\\tvar source, prop, value;\\n\\n\\tsource = '#' + _uuid + '.draggable-helper {';\\n\\n\\tfor (prop in _definition) {\\n\\t\\tif (!_definition.hasOwnProperty(prop)) continue;\\n\\t\\tvalue = _definition[prop];\\n\\t\\tsource += prop.replace(/([A-Z]+)/g, '-$1').toLowerCase() + ': ' + value + ';';\\n\\t}\\n\\n\\tsource += '}';\\n\\n\\treturn source;\\n};\\n\\nfunction createUUID() {\\n\\treturn 'xy-xyxy-y'.replace(/x|y/g, function (_token) {\\n\\t\\tif (_token === 'x') return (Math.floor(Math.random() * 5) + 10).toString(16);\\n\\t\\treturn Math.floor(Math.random() * Date.now()).toString(16).slice(2);\\n\\t});\\n}\\n\\nvar draggableManager = {};\\n\\n$(boot);\\n\\nexports['default'] = draggableManager;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Collections are iterables which hold a consistent interface throughout its indexes.\\n *\\n * @module\\n * @requires module:types/BasicArray\\n */\\n\\nvar _typesBasicArray = __webpack_require__(9);\\n\\nvar _typesBasicArray2 = _interopRequireDefault(_typesBasicArray);\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. use `Collection.create()` to get a new instance.\\n * @classdesc Iterable holding record objects of the same interface.\\n * @class\\n * @extends module:types/BasicArray~BasicArray\\n */\\nvar Collection = _typesBasicArray2['default'].extend(function () {\\n\\t/**\\n  * Gets the record object which has `_member` as a member.\\n  * @instance\\n  * @protected\\n  * @memberof module:types/Collection~Collection\\n  * @arg {*} _member - object reference to search for.\\n  * @arg {string} _key - the target key to test the `_member` against.\\n  * @arg {boolean} _shouldCollect - <span style=\\\"color: blue; font-weight: bold;\\\">`true`</span>: collect all matching elements.<br>\\n  * <span style=\\\"color: blue; font-weight: bold;\\\">`false`</span>: return first result.\\n  */\\n\\tfunction getRecord(_member, _key, _shouldCollect) {\\n\\t\\tvar i, record, member, result;\\n\\n\\t\\tresult = [];\\n\\n\\t\\tfor (i = 0; record = this[i]; i += 1) {\\n\\t\\t\\tif (_key !== undefined) {\\n\\t\\t\\t\\tif (record[_key] === _member) {\\n\\t\\t\\t\\t\\tif (_shouldCollect) {\\n\\t\\t\\t\\t\\t\\tresult.push(record);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\treturn record;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (record instanceof Array) {\\n\\t\\t\\t\\tif (~record.indexOf(_member)) {\\n\\t\\t\\t\\t\\tif (_shouldCollect) {\\n\\t\\t\\t\\t\\t\\tresult.push(record);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\treturn record;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tfor (member in record) {\\n\\t\\t\\t\\t\\tif (!record.hasOwnProperty(member)) continue;\\n\\t\\t\\t\\t\\tif (record[member] === _member) {\\n\\t\\t\\t\\t\\t\\tif (_shouldCollect) {\\n\\t\\t\\t\\t\\t\\t\\tresult.push(record);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\treturn record;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn result.length ? result : null;\\n\\t}\\n\\n\\t/**\\n  * Objects with this as an own property will be identified as the root object.\\n  * @memberof module:types/Collection~Collection\\n  * @readonly\\n  * @default\\n  */\\n\\tthis.baseType = 'TYPE_COLLECTION';\\n\\n\\tthis.add = function (_record) {\\n\\t\\tif (~this.indexOf(_record)) return false;\\n\\t\\tthis.push(_record);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.remove = function (_record) {\\n\\t\\tvar index;\\n\\n\\t\\tindex = this.indexOf(_record);\\n\\t\\tif (~index) this.splice(index, 1);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.has = function (_record) {\\n\\t\\treturn !! ~this.indexOf(_record);\\n\\t};\\n\\n\\tthis.get = function (_member, _key) {\\n\\t\\treturn getRecord.call(this, _member, _key);\\n\\t};\\n\\n\\tthis.filter = function (_member, _key) {\\n\\t\\treturn getRecord.call(this, _member, _key, true);\\n\\t};\\n});\\n\\nexports['default'] = Collection;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvQ29sbGVjdGlvbi5qcz9lN2RjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7MkNBTXVCLENBQWtCOzs7Ozs7Ozs7O0FBUXpDLElBQUksVUFBVSxHQUFHLDZCQUFXLE1BQU0sQ0FBQyxZQUFZOzs7Ozs7Ozs7OztBQVc5QyxVQUFTLFNBQVMsQ0FBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRTtBQUNsRCxNQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQzs7QUFFOUIsUUFBTSxHQUFHLEVBQUUsQ0FBQzs7QUFFWixPQUFLLENBQUMsR0FBQyxDQUFDLEVBQUUsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUUsQ0FBQyxFQUFFO0FBQ2pDLE9BQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtBQUN2QixRQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxPQUFPLEVBQUU7QUFDN0IsU0FBSSxjQUFjLEVBQUU7QUFDbkIsWUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztNQUNwQixNQUVJO0FBQ0osYUFBTyxNQUFNLENBQUM7TUFDZDtLQUNEO0lBQ0QsTUFFSSxJQUFJLE1BQU0sWUFBWSxLQUFLLEVBQUU7QUFDakMsUUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDN0IsU0FBSSxjQUFjLEVBQUU7QUFDbkIsWUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztNQUNwQixNQUVJO0FBQ0osYUFBTyxNQUFNLENBQUM7TUFDZDtLQUNEO0lBQ0QsTUFFSTtBQUNKLFNBQUssTUFBTSxJQUFJLE1BQU0sRUFBRTtBQUN0QixTQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRSxTQUFTO0FBQzdDLFNBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLE9BQU8sRUFBRTtBQUMvQixVQUFJLGNBQWMsRUFBRTtBQUNuQixhQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO09BQ3BCLE1BRUk7QUFDSixjQUFPLE1BQU0sQ0FBQztPQUNkO01BQ0Q7S0FDRDtJQUNEO0dBQ0Q7O0FBRUQsU0FBTyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUM7RUFDckM7Ozs7Ozs7O0FBUUQsS0FBSSxDQUFDLFFBQVEsR0FBRyxpQkFBaUIsQ0FBQzs7QUFFbEMsS0FBSSxDQUFDLEdBQUcsR0FBRyxVQUFVLE9BQU8sRUFBRTtBQUM3QixNQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxPQUFPLEtBQUssQ0FBQztBQUN6QyxNQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDOztBQUVuQixTQUFPLElBQUksQ0FBQztFQUNaLENBQUM7O0FBRUYsS0FBSSxDQUFDLE1BQU0sR0FBRyxVQUFVLE9BQU8sRUFBRTtBQUNoQyxNQUFJLEtBQUssQ0FBQzs7QUFFVixPQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM5QixNQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDOztBQUVsQyxTQUFPLElBQUksQ0FBQztFQUNaLENBQUM7O0FBRUYsS0FBSSxDQUFDLEdBQUcsR0FBRyxVQUFVLE9BQU8sRUFBRTtBQUM3QixTQUFPLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7RUFDaEMsQ0FBQzs7QUFFRixLQUFJLENBQUMsR0FBRyxHQUFHLFVBQVUsT0FBTyxFQUFFLElBQUksRUFBRTtBQUNuQyxTQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztFQUMzQyxDQUFDOztBQUVGLEtBQUksQ0FBQyxNQUFNLEdBQUcsVUFBVSxPQUFPLEVBQUUsSUFBSSxFQUFFO0FBQ3RDLFNBQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztFQUNqRCxDQUFDO0NBRUYsQ0FBQyxDQUFDOztxQkFFWSxVQUFVIiwiZmlsZSI6IjIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb2xsZWN0aW9ucyBhcmUgaXRlcmFibGVzIHdoaWNoIGhvbGQgYSBjb25zaXN0ZW50IGludGVyZmFjZSB0aHJvdWdob3V0IGl0cyBpbmRleGVzLlxuICpcbiAqIEBtb2R1bGVcbiAqIEByZXF1aXJlcyBtb2R1bGU6dHlwZXMvQmFzaWNBcnJheVxuICovXG5pbXBvcnQgQmFzaWNBcnJheSBmcm9tICd0eXBlcy9CYXNpY0FycmF5JztcblxuLyoqXG4gKiA8c3BhbiBjbGFzcz1cImltcG9ydGFudFwiPk5PVEU6PC9zcGFuPiBUaGlzIGlzIE5PVCBhIGNvbnN0cnVjdG9yLiB1c2UgYENvbGxlY3Rpb24uY3JlYXRlKClgIHRvIGdldCBhIG5ldyBpbnN0YW5jZS5cbiAqIEBjbGFzc2Rlc2MgSXRlcmFibGUgaG9sZGluZyByZWNvcmQgb2JqZWN0cyBvZiB0aGUgc2FtZSBpbnRlcmZhY2UuXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIG1vZHVsZTp0eXBlcy9CYXNpY0FycmF5fkJhc2ljQXJyYXlcbiAqL1xudmFyIENvbGxlY3Rpb24gPSBCYXNpY0FycmF5LmV4dGVuZChmdW5jdGlvbiAoKSB7XG5cdC8qKlxuXHQgKiBHZXRzIHRoZSByZWNvcmQgb2JqZWN0IHdoaWNoIGhhcyBgX21lbWJlcmAgYXMgYSBtZW1iZXIuXG5cdCAqIEBpbnN0YW5jZVxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBtZW1iZXJvZiBtb2R1bGU6dHlwZXMvQ29sbGVjdGlvbn5Db2xsZWN0aW9uXG5cdCAqIEBhcmcgeyp9IF9tZW1iZXIgLSBvYmplY3QgcmVmZXJlbmNlIHRvIHNlYXJjaCBmb3IuXG5cdCAqIEBhcmcge3N0cmluZ30gX2tleSAtIHRoZSB0YXJnZXQga2V5IHRvIHRlc3QgdGhlIGBfbWVtYmVyYCBhZ2FpbnN0LlxuXHQgKiBAYXJnIHtib29sZWFufSBfc2hvdWxkQ29sbGVjdCAtIDxzcGFuIHN0eWxlPVwiY29sb3I6IGJsdWU7IGZvbnQtd2VpZ2h0OiBib2xkO1wiPmB0cnVlYDwvc3Bhbj46IGNvbGxlY3QgYWxsIG1hdGNoaW5nIGVsZW1lbnRzLjxicj5cblx0ICogPHNwYW4gc3R5bGU9XCJjb2xvcjogYmx1ZTsgZm9udC13ZWlnaHQ6IGJvbGQ7XCI+YGZhbHNlYDwvc3Bhbj46IHJldHVybiBmaXJzdCByZXN1bHQuXG5cdCAqL1xuXHRmdW5jdGlvbiBnZXRSZWNvcmQgKF9tZW1iZXIsIF9rZXksIF9zaG91bGRDb2xsZWN0KSB7XG5cdFx0dmFyIGksIHJlY29yZCwgbWVtYmVyLCByZXN1bHQ7XG5cblx0XHRyZXN1bHQgPSBbXTtcblxuXHRcdGZvciAoaT0wOyByZWNvcmQgPSB0aGlzW2ldOyBpKz0xKSB7XG5cdFx0XHRpZiAoX2tleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGlmIChyZWNvcmRbX2tleV0gPT09IF9tZW1iZXIpIHtcblx0XHRcdFx0XHRpZiAoX3Nob3VsZENvbGxlY3QpIHtcblx0XHRcdFx0XHRcdHJlc3VsdC5wdXNoKHJlY29yZCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVjb3JkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRlbHNlIGlmIChyZWNvcmQgaW5zdGFuY2VvZiBBcnJheSkge1xuXHRcdFx0XHRpZiAofnJlY29yZC5pbmRleE9mKF9tZW1iZXIpKSB7XG5cdFx0XHRcdFx0aWYgKF9zaG91bGRDb2xsZWN0KSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQucHVzaChyZWNvcmQpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlY29yZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdGZvciAobWVtYmVyIGluIHJlY29yZCkge1xuXHRcdFx0XHRcdGlmICghcmVjb3JkLmhhc093blByb3BlcnR5KG1lbWJlcikpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdGlmIChyZWNvcmRbbWVtYmVyXSA9PT0gX21lbWJlcikge1xuXHRcdFx0XHRcdFx0aWYgKF9zaG91bGRDb2xsZWN0KSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdC5wdXNoKHJlY29yZCk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVjb3JkO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQubGVuZ3RoID8gcmVzdWx0IDogbnVsbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBPYmplY3RzIHdpdGggdGhpcyBhcyBhbiBvd24gcHJvcGVydHkgd2lsbCBiZSBpZGVudGlmaWVkIGFzIHRoZSByb290IG9iamVjdC5cblx0ICogQG1lbWJlcm9mIG1vZHVsZTp0eXBlcy9Db2xsZWN0aW9ufkNvbGxlY3Rpb25cblx0ICogQHJlYWRvbmx5XG5cdCAqIEBkZWZhdWx0XG5cdCAqL1xuXHR0aGlzLmJhc2VUeXBlID0gJ1RZUEVfQ09MTEVDVElPTic7XG5cblx0dGhpcy5hZGQgPSBmdW5jdGlvbiAoX3JlY29yZCkge1xuXHRcdGlmICh+dGhpcy5pbmRleE9mKF9yZWNvcmQpKSByZXR1cm4gZmFsc2U7XG5cdFx0dGhpcy5wdXNoKF9yZWNvcmQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0dGhpcy5yZW1vdmUgPSBmdW5jdGlvbiAoX3JlY29yZCkge1xuXHRcdHZhciBpbmRleDtcblxuXHRcdGluZGV4ID0gdGhpcy5pbmRleE9mKF9yZWNvcmQpO1xuXHRcdGlmICh+aW5kZXgpIHRoaXMuc3BsaWNlKGluZGV4LCAxKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdHRoaXMuaGFzID0gZnVuY3Rpb24gKF9yZWNvcmQpIHtcblx0XHRyZXR1cm4gISF+dGhpcy5pbmRleE9mKF9yZWNvcmQpO1xuXHR9O1xuXG5cdHRoaXMuZ2V0ID0gZnVuY3Rpb24gKF9tZW1iZXIsIF9rZXkpIHtcblx0XHRyZXR1cm4gZ2V0UmVjb3JkLmNhbGwodGhpcywgX21lbWJlciwgX2tleSk7XG5cdH07XG5cblx0dGhpcy5maWx0ZXIgPSBmdW5jdGlvbiAoX21lbWJlciwgX2tleSkge1xuXHRcdHJldHVybiBnZXRSZWNvcmQuY2FsbCh0aGlzLCBfbWVtYmVyLCBfa2V5LCB0cnVlKTtcblx0fTtcblxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IENvbGxlY3Rpb247XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zb3VyY2UvdHlwZXMvQ29sbGVjdGlvbi5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"exports.__esModule = true;\\n/**\\n*  GlobalScope\\n*/\\n\\nvar _typesScope = __webpack_require__(23);\\n\\nvar GlobalScope = _typesScope.Scope.extend(function () {\\n\\n\\tthis.baseType = 'TYPE_GLOBAL_SCOPE';\\n});\\n\\nexports['default'] = GlobalScope;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvR2xvYmFsU2NvcGUuanM/ZmE3YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztzQ0FJc0IsRUFBYTs7QUFFbkMsSUFBSSxXQUFXLEdBQUcsa0JBQU0sTUFBTSxDQUFDLFlBQVk7O0FBRTFDLEtBQUksQ0FBQyxRQUFRLEdBQUcsbUJBQW1CLENBQUM7Q0FFcEMsQ0FBQyxDQUFDOztxQkFFWSxXQUFXIiwiZmlsZSI6IjIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4qICBHbG9iYWxTY29wZVxuKi9cblxuaW1wb3J0IHsgU2NvcGUgfSBmcm9tICd0eXBlcy9TY29wZSc7XG5cbnZhciBHbG9iYWxTY29wZSA9IFNjb3BlLmV4dGVuZChmdW5jdGlvbiAoKSB7XG5cdFxuXHR0aGlzLmJhc2VUeXBlID0gJ1RZUEVfR0xPQkFMX1NDT1BFJztcblxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEdsb2JhbFNjb3BlO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc291cmNlL3R5cGVzL0dsb2JhbFNjb3BlLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Scopes are packages which contain a reference to a DOM element wrapped in a jQuery object.\\n * This enables properties and methods to be in context of the DOM node and its descendants.\\n *\\n * @module\\n * @requires types/jQProxy\\n * @requires types/Basic\\n * @requires types/Queue\\n * @requires play.game\\n * @requires util\\n * @requires evalAction\\n *\\n * @exports createEntity\\n */\\n\\nvar _typesJQProxy = __webpack_require__(24);\\n\\nvar _typesJQProxy2 = _interopRequireDefault(_typesJQProxy);\\n\\nvar _typesBasic = __webpack_require__(11);\\n\\nvar _typesBasic2 = _interopRequireDefault(_typesBasic);\\n\\nvar _typesQueue = __webpack_require__(37);\\n\\nvar _typesQueue2 = _interopRequireDefault(_typesQueue);\\n\\nvar _typesDimensions = __webpack_require__(5);\\n\\nvar _playGame = __webpack_require__(16);\\n\\nvar _playGame2 = _interopRequireDefault(_playGame);\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _evalAction = __webpack_require__(38);\\n\\nvar _evalAction2 = _interopRequireDefault(_evalAction);\\n\\n/**\\n * Creates a new Enitiy instance with a context node and implementation.\\n * The instance is prototyped from the parent scope.\\n *\\n * @memberof module:types/Scope~Scope#createEntity\\n * @protected\\n * @arg {jQuery} _$node - jQuery object with a single node in the collection.\\n * @arg {function|object} _implementation - Constructor function or object with the entity behavior.\\n * @returns {module:types/Scope~Scope}\\n */\\nfunction createEntity(_$node, _implementation) {\\n\\tvar component, prototype, componentRecord, instance;\\n\\n\\tcomponent = _$node.attr('pl-component');\\n\\tprototype = this;\\n\\n\\tif (component) {\\n\\t\\tcomponentRecord = _playGame2['default'].component.get(component);\\n\\n\\t\\tif (componentRecord) {\\n\\t\\t\\tprototype = this.extend(componentRecord.implementation);\\n\\t\\t} else {\\n\\t\\t\\tthrow new Error('No implementation record for the ' + component + 'component.');\\n\\t\\t}\\n\\t}\\n\\n\\tinstance = typeof _implementation === 'function' ? prototype.extend(_implementation) : prototype.create();\\n\\n\\treturn instance.initialize(_$node, component);\\n}\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. Use `Scope.create()` to get a new instance.\\n * @classdesc A package which contains a reference to a DOM node wrapped in a jQuery object. For more information on scopes read [this]{@link module:types/Scope}.\\n * @class\\n * @extends module:types/jQProxy~jQProxy\\n */\\nvar Scope = _typesJQProxy2['default'].extend(function () {\\n\\n\\t/**\\n  * Collection of records pairing a node with its action.\\n  * @memberof module:types/Scope~Scope\\n  * @static\\n  * @protected\\n  * @todo Convert to types/Collection\\n  */\\n\\tvar Actionables;\\n\\n\\tfunction attachActionHandler() {\\n\\t\\tvar entity;\\n\\n\\t\\tentity = this;\\n\\n\\t\\tthis.on(pl.EVENT.CLICK, function (_event) {\\n\\t\\t\\tvar target, record;\\n\\n\\t\\t\\ttarget = $(_event.target).closest('[pl-action]')[0];\\n\\t\\t\\t// TODO: Resolve for touches\\n\\t\\t\\t_event.cursor = _typesDimensions.Point.create().set(_event.clientX, _event.clientY);\\n\\n\\t\\t\\tif (target) {\\n\\t\\t\\t\\trecord = entity.actionables.item(target);\\n\\n\\t\\t\\t\\tif (record) {\\n\\t\\t\\t\\t\\t_event.targetScope = entity;\\n\\t\\t\\t\\t\\tentity.event = _event;\\n\\t\\t\\t\\t\\t_evalAction2['default'](record.action, entity);\\n\\t\\t\\t\\t\\tentity.event = null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\n\\tfunction getRecordBy(_key, _member, _collection) {\\n\\t\\tvar i, record;\\n\\n\\t\\tif (_collection) {\\n\\t\\t\\tfor (i = 0; record = _collection[i]; i += 1) {\\n\\t\\t\\t\\tif (record[_key] === _member) return record;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t}\\n\\n\\tfunction removeRecord(_record, _collection) {\\n\\t\\tvar index;\\n\\n\\t\\tindex = _collection.indexOf(_record);\\n\\t\\tif (~index) _collection.splice(index, 1);\\n\\t}\\n\\n\\tfunction captureDropables(_scope) {\\n\\t\\tvar collection;\\n\\n\\t\\tcollection = [];\\n\\n\\t\\t_scope.find('> [pl-pluck]').each(function () {\\n\\t\\t\\tvar name;\\n\\n\\t\\t\\tname = $(this).attr('pl-pluck');\\n\\n\\t\\t\\tcollection.push(this);\\n\\t\\t\\tcollection[name] = this;\\n\\t\\t});\\n\\n\\t\\treturn collection;\\n\\t}\\n\\n\\tfunction pluckAndDrop(_dropables, _template) {\\n\\t\\t$(_template).find('[pl-drop]').each(function () {\\n\\t\\t\\tvar $node, name, dropable;\\n\\n\\t\\t\\t$node = $(this);\\n\\t\\t\\tname = $node.attr('pl-drop');\\n\\t\\t\\tdropable = _dropables[name];\\n\\n\\t\\t\\tif (dropable) {\\n\\t\\t\\t\\t$node.replaceWith(dropable.children);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\n\\t// Protected\\n\\tfunction loadComponentAssets(_name, _callback) {\\n\\t\\tvar scope, path, totalRequests, transcludeMode, dropables;\\n\\n\\t\\tfunction ready() {\\n\\t\\t\\tready.status += 1;\\n\\n\\t\\t\\tif (ready.status === totalRequests) {\\n\\t\\t\\t\\tif (_callback) {\\n\\t\\t\\t\\t\\t_callback.call(scope, _name);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\ttotalRequests = 0;\\n\\t\\tscope = this;\\n\\t\\tpath = _playGame2['default'].config('componentDirectory') + _name + '/';\\n\\t\\tdropables = captureDropables(this);\\n\\t\\ttranscludeMode = dropables.length ? this.TRANSCLUDE_PLUCK : this.properties.transclude;\\n\\t\\tready.status = 0;\\n\\n\\t\\tif (!this.children().length || transcludeMode) {\\n\\t\\t\\ttotalRequests += 1;\\n\\t\\t\\t$('<div>').load(path + 'template.html', function () {\\n\\t\\t\\t\\tvar memory;\\n\\n\\t\\t\\t\\tmemory = [];\\n\\n\\t\\t\\t\\tswitch (transcludeMode) {\\n\\t\\t\\t\\t\\tcase scope.TRANSCLUDE_APPEND:\\n\\t\\t\\t\\t\\t\\tscope.append(this.children);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase scope.TRANSCLUDE_PREPEND:\\n\\t\\t\\t\\t\\t\\tscope.prepend(this.children);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase scope.TRANSCLUDE_PLUCK:\\n\\t\\t\\t\\t\\t\\tpluckAndDrop(dropables, this);\\n\\t\\t\\t\\t\\t\\tscope.empty().append(this.children);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase scope.TRANSCLUDE_REPLACE:\\n\\t\\t\\t\\t\\t\\tscope.empty().append(this.children);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\tif (transcludeMode) {\\n\\t\\t\\t\\t\\t\\t\\tpluckAndDrop(new function () {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis[transcludeMode] = scope.node();\\n\\t\\t\\t\\t\\t\\t\\t}(), this);\\n\\t\\t\\t\\t\\t\\t\\tscope.empty().append(this.children);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\tscope.empty().append(this.children);\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tscope.findOwn('[pl-component]').each(function () {\\n\\t\\t\\t\\t\\tvar name;\\n\\n\\t\\t\\t\\t\\tname = $(this).attr('pl-component');\\n\\n\\t\\t\\t\\t\\tif (~memory.indexOf(name)) return;\\n\\n\\t\\t\\t\\t\\tmemory.push(name);\\n\\n\\t\\t\\t\\t\\ttotalRequests += 1;\\n\\n\\t\\t\\t\\t\\t_playGame2['default'].component.load(name, function () {\\n\\t\\t\\t\\t\\t\\tready();\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\tready();\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tif (!$('style[pl-for-component=\\\"' + _name + '\\\"]').length && _playGame2['default'].config('shouldLoadComponentStyles') !== false) {\\n\\t\\t\\ttotalRequests += 1;\\n\\t\\t\\t$('<style type=\\\"text/css\\\" pl-for-component=\\\"' + _name + '\\\">').load(path + 'style.css', ready).appendTo(document.body);\\n\\t\\t}\\n\\n\\t\\tif (!totalRequests) _callback && _callback.call(this, _name);\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\tfunction captureProperties() {\\n\\t\\tvar i, attr, name, collection;\\n\\n\\t\\tcollection = (function () {\\n\\n\\t\\t\\tthis.has = function (_name) {\\n\\t\\t\\t\\treturn !! ~this.indexOf(_name);\\n\\t\\t\\t};\\n\\n\\t\\t\\treturn this;\\n\\t\\t}).call([]);\\n\\n\\t\\tfor (i = 0; attr = this.$els[0].attributes[i]; i += 1) {\\n\\t\\t\\t// I explicitly want it to be at the beginning.\\n\\t\\t\\tif (attr.name.indexOf('pl-') === 0) {\\n\\t\\t\\t\\tname = attr.name.slice(3);\\n\\t\\t\\t\\tcollection[_util2['default'].transformId(name, true)] = attr.value;\\n\\n\\t\\t\\t\\tcollection.push(name);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (collection.length) this.properties = collection;\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\tfunction initializeEntities() {\\n\\t\\tif (!this.hasOwnProperty('entities')) return this;\\n\\n\\t\\tthis.entities.forEach(this.bind(function (_record, _index) {\\n\\t\\t\\tvar $node, instance, id, query, index;\\n\\n\\t\\t\\t$node = this.findOwn(_record.selector);\\n\\t\\t\\tquery = ['#' + _record.selector, '[pl-id=' + _record.selector + ']', '[pl-component=' + _record.selector + ']', '[pl-' + _record.selector + ']'];\\n\\t\\t\\tindex = 0;\\n\\n\\t\\t\\twhile (!$node.length) {\\n\\t\\t\\t\\tif (index === query.length) {\\n\\t\\t\\t\\t\\tthrow new Error(\\\"Unable to locate entity with selector\\\", _record.selector);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t$node = this.findOwn(query[index]);\\n\\t\\t\\t\\tindex += 1;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!Scope.isPrototypeOf(_record)) {\\n\\t\\t\\t\\tinstance = createEntity.call(this, $node, _record.implementation);\\n\\n\\t\\t\\t\\tif (!instance.isReady) {\\n\\t\\t\\t\\t\\tthis.assetQueue.add(instance);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tinstance = _record;\\n\\t\\t\\t}\\n\\n\\t\\t\\tid = _util2['default'].transformId(instance.id(), true);\\n\\t\\t\\tif (id) _util2['default'].assignRef(this, id, instance);\\n\\t\\t}));\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\tfunction handleProperties() {\\n\\t\\tvar scope, property, handler;\\n\\n\\t\\tscope = this;\\n\\n\\t\\tif (this.hasOwnProperty('properties')) {\\n\\t\\t\\tthis.properties.forEach(function (_name) {\\n\\t\\t\\t\\thandler = scope.propertyHandlers[_name];\\n\\t\\t\\t\\tif (handler) handler.call(scope, scope.$els[0], _name, scope.properties[_name]);\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tif (this.propertyHandlers) {\\n\\t\\t\\tfor (property in this.propertyHandlers) {\\n\\t\\t\\t\\t// Only exclide members on the base type.\\n\\t\\t\\t\\tif (_typesBasic2['default'].hasOwnProperty(property)) continue;\\n\\n\\t\\t\\t\\thandler = this.propertyHandlers[property];\\n\\n\\t\\t\\t\\tthis.find('[pl-' + property + ']').each(function () {\\n\\t\\t\\t\\t\\tvar attr;\\n\\n\\t\\t\\t\\t\\tif (scope === $(this).scope()) {\\n\\t\\t\\t\\t\\t\\tattr = this.attributes.getNamedItem('pl-' + property);\\n\\n\\t\\t\\t\\t\\t\\tif (handler) handler.call(scope, this, property, attr.value);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\tfunction invokeLocal(_name) {\\n\\t\\tvar args, owner;\\n\\n\\t\\targs = [].slice.call(arguments, 1);\\n\\n\\t\\tif (this.isMemberSafe(_name)) {\\n\\t\\t\\treturn this[_name].apply(this, arguments);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction init() {\\n\\t\\tvar initEvent;\\n\\n\\t\\tinitEvent = $.Event('initialize', { targetScope: this });\\n\\n\\t\\tinvokeLocal.call(this, 'willInit');\\n\\n\\t\\tthis.attachEvents();\\n\\n\\t\\tinitializeEntities.call(this);\\n\\t\\thandleProperties.call(this);\\n\\n\\t\\tthis.watchAssets();\\n\\t\\tthis.captureAudioAssets();\\n\\t\\tthis.captureReferences();\\n\\n\\t\\tthis.__init();\\n\\t\\tinvokeLocal.call(this, 'init');\\n\\n\\t\\tthis.trigger(initEvent);\\n\\n\\t\\tif (!this.isReady) this.assetQueue.ready();\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\tfunction ready() {\\n\\t\\tvar readyEvent, entities;\\n\\n\\t\\treadyEvent = $.Event('ready', { targetScope: this });\\n\\t\\tentities = this.findOwn('.pl-scope').scope();\\n\\n\\t\\tif (entities) {\\n\\t\\t\\tif (entities.length > 0) {\\n\\t\\t\\t\\tthis.entities = entities;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.entities = [entities];\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tthis.isReady = true;\\n\\t\\tthis.addClass('READY');\\n\\n\\t\\tthis.__ready();\\n\\t\\tinvokeLocal.call(this, 'ready');\\n\\n\\t\\tthis.trigger(readyEvent);\\n\\t}\\n\\n\\tActionables = (function () {\\n\\n\\t\\t_util2['default'].mixin(this, _typesBasic2['default']);\\n\\n\\t\\tthis.add = function (_node, _action) {\\n\\t\\t\\tif (!this.has(_node)) {\\n\\t\\t\\t\\tthis.push({\\n\\t\\t\\t\\t\\tnode: _node,\\n\\t\\t\\t\\t\\taction: _action\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this;\\n\\t\\t};\\n\\n\\t\\tthis.remove = function (_node) {\\n\\t\\t\\tvar item, index;\\n\\n\\t\\t\\titem = this.item(_node);\\n\\t\\t\\tindex = this.indexOf(item);\\n\\t\\t\\tif (~index) this.splice(index, 1);\\n\\n\\t\\t\\treturn this;\\n\\t\\t};\\n\\n\\t\\tthis.item = function (_node) {\\n\\t\\t\\tvar i, item;\\n\\n\\t\\t\\tfor (i = 0; item = this[i]; i += 1) {\\n\\t\\t\\t\\tif (item.node === _node) return item;\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\tthis.has = function (_node) {\\n\\t\\t\\treturn !!this.item(_node);\\n\\t\\t};\\n\\n\\t\\treturn this;\\n\\t}).call([]);\\n\\n\\tthis.TRANSCLUDE_REPLACE = 'replace';\\n\\tthis.TRANSCLUDE_PREPEND = 'prepend';\\n\\tthis.TRANSCLUDE_APPEND = 'append';\\n\\tthis.TRANSCLUDE_PLUCK = 'pluck';\\n\\n\\tthis.baseType = 'TYPE_SCOPE';\\n\\tthis.actionables = null;\\n\\tthis.isReady = null;\\n\\tthis.isComponent = false;\\n\\tthis.entities = null;\\n\\tthis.audio = null;\\n\\tthis.properties = null;\\n\\tthis.propertyHandlers = null;\\n\\tthis.assetQueue = null;\\n\\tthis.event = null;\\n\\n\\tthis.initialize = function (_node_selector, _componentName) {\\n\\t\\tvar scope;\\n\\n\\t\\tscope = this;\\n\\n\\t\\tthis.isReady = false;\\n\\t\\tthis.isComponent = !!_componentName;\\n\\t\\tthis.event = null;\\n\\t\\tthis.assetQueue = _typesQueue2['default'].create();\\n\\t\\tthis.$els = _node_selector.jquery ? _node_selector : $(_node_selector);\\n\\n\\t\\tif (!this.$els.length) {\\n\\t\\t\\tthrow new ReferenceError('Unable to locate the element with selector ' + this.$els.selector + '.');\\n\\t\\t}\\n\\n\\t\\tthis.addClass('pl-scope ' + (_componentName ? _componentName + '-component' : ''));\\n\\t\\tthis.data('pl-scope', this);\\n\\t\\tthis.data('pl-isComponent', !!_componentName);\\n\\n\\t\\tcaptureProperties.call(this);\\n\\n\\t\\tif (_componentName) {\\n\\t\\t\\tloadComponentAssets.call(this, _componentName, function () {\\n\\t\\t\\t\\tinit.call(this);\\n\\t\\t\\t});\\n\\t\\t} else {\\n\\t\\t\\tinit.call(this);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t// only for use in base types\\n\\tthis.__init = function () {\\n\\t\\treturn this;\\n\\t};\\n\\tthis.__ready = function () {\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.willInit = function () {\\n\\t\\treturn this;\\n\\t};\\n\\tthis.init = function () {\\n\\t\\treturn this;\\n\\t};\\n\\tthis.ready = function () {\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.watchAssets = function (_nodes) {\\n\\t\\tvar scope, assetTypes;\\n\\n\\t\\tfunction watch(_node) {\\n\\t\\t\\tvar eventMap, isNodeComplete;\\n\\n\\t\\t\\tfunction createHandler(_node) {\\n\\t\\t\\t\\treturn function () {\\n\\t\\t\\t\\t\\tvar loadedEvent;\\n\\n\\t\\t\\t\\t\\tloadedEvent = $.Event('loaded', { targetScope: scope });\\n\\t\\t\\t\\t\\tscope.assetQueue.ready(_node.src);\\n\\t\\t\\t\\t\\tscope.trigger(loadedEvent, [_node]);\\n\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\n\\t\\t\\teventMap = {\\n\\t\\t\\t\\tAUDIO: 'onloadeddata',\\n\\t\\t\\t\\tVIDEO: 'onloadeddata',\\n\\t\\t\\t\\tIMG: 'onload'\\n\\t\\t\\t};\\n\\n\\t\\t\\tisNodeComplete = {\\n\\t\\t\\t\\tAUDIO: _node.readyState === _node.HAVE_ENOUGH_DATA,\\n\\t\\t\\t\\tVIDEO: _node.readyState === _node.HAVE_ENOUGH_DATA,\\n\\t\\t\\t\\tIMG: _node.complete\\n\\t\\t\\t};\\n\\n\\t\\t\\t// console.log('found asset', this.nodeName);\\n\\n\\t\\t\\tif (isNodeComplete[_node.nodeName]) return;\\n\\t\\t\\tif (scope.assetQueue.add(_node.src)) {\\n\\t\\t\\t\\t// console.log('watch', this.nodeName, this.src, scope.id());\\n\\t\\t\\t\\t_node[eventMap[_node.nodeName]] = createHandler(_node);\\n\\t\\t\\t\\t_node.onerror = function () {\\n\\t\\t\\t\\t\\tconsole.error('Image failed to load', _node.src);\\n\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tscope = this;\\n\\t\\tassetTypes = ['IMG', 'AUDIO', 'VIDEO'];\\n\\n\\t\\tif (_nodes) {\\n\\t\\t\\t_nodes.forEach(watch);\\n\\t\\t\\treturn this;\\n\\t\\t}\\n\\n\\t\\tthis.each(function () {\\n\\t\\t\\tif (~assetTypes.indexOf(this.nodeName)) {\\n\\t\\t\\t\\twatch(this);\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tthis.findOwn(assetTypes.join(',')).each(function () {\\n\\t\\t\\twatch(this);\\n\\t\\t});\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.attachEvents = function () {\\n\\t\\tvar scope;\\n\\n\\t\\tthis.proto();\\n\\n\\t\\tscope = this;\\n\\n\\t\\t// if (this.is('#bears')) debugger;\\n\\n\\t\\tthis.assetQueue.on('complete', function () {\\n\\t\\t\\tscope.assetQueue.off();\\n\\t\\t\\tready.call(scope);\\n\\t\\t});\\n\\n\\t\\tthis.on('ready', function (_event) {\\n\\t\\t\\t// console.log('* ready:', this.address(), ', target:', _event.targetScope.address());\\n\\n\\t\\t\\tif (this.has(_event.targetScope) && this.assetQueue.has(_event.targetScope)) {\\n\\t\\t\\t\\t// console.log('** update queue', _event.targetScope.address(), this.assetQueue.length);\\n\\t\\t\\t\\tthis.assetQueue.ready(_event.targetScope);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!this.assetQueue.length && this.isReady) this.off('ready');\\n\\t\\t});\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.captureReferences = function () {\\n\\t\\tthis.findOwn('[id], [pl-id]').each(this.bind(function (_index, _node) {\\n\\t\\t\\tvar $node, id;\\n\\n\\t\\t\\tif (_node.nodeName === 'AUDIO') return;\\n\\n\\t\\t\\t$node = $(_node);\\n\\t\\t\\tid = $node.attr('id') || $node.attr('pl-id');\\n\\n\\t\\t\\tif (!this[id]) {\\n\\t\\t\\t\\t_util2['default'].assignRef(this, id, $node.data('pl-scope') || $node);\\n\\t\\t\\t}\\n\\t\\t}));\\n\\t};\\n\\n\\tthis.captureAudioAssets = function () {\\n\\t\\tvar scope, screen;\\n\\n\\t\\tscope = this;\\n\\t\\tscreen = typeof scope.screen === 'object' ? scope.screen : scope;\\n\\n\\t\\tscope.findOwn('audio').each(function () {\\n\\t\\t\\tvar $node, id, audioTypes;\\n\\n\\t\\t\\tif (!scope.hasOwnProperty('audio')) {\\n\\t\\t\\t\\tscope.audio = {\\n\\t\\t\\t\\t\\tbackground: null,\\n\\t\\t\\t\\t\\tvoiceOver: null,\\n\\t\\t\\t\\t\\tsfx: null\\n\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\n\\t\\t\\t$node = $(this);\\n\\t\\t\\tid = _util2['default'].transformId($node.id(), true);\\n\\t\\t\\taudioTypes = ['background', 'voice-over', 'sfx'];\\n\\n\\t\\t\\taudioTypes.forEach(function (_type) {\\n\\t\\t\\t\\tif ($node.hasClass(_type)) {\\n\\t\\t\\t\\t\\t$node.on('play pause ended', function (_event) {\\n\\t\\t\\t\\t\\t\\tvar screen;\\n\\n\\t\\t\\t\\t\\t\\tscreen = typeof scope.screen === 'object' ? scope.screen : scope;\\n\\n\\t\\t\\t\\t\\t\\tswitch (_event.type) {\\n\\t\\t\\t\\t\\t\\t\\tcase 'play':\\n\\t\\t\\t\\t\\t\\t\\t\\tscreen.addClass('PLAYING ' + _type.toUpperCase());\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\t\\tcase 'pause':\\n\\t\\t\\t\\t\\t\\t\\tcase 'ended':\\n\\t\\t\\t\\t\\t\\t\\t\\tscreen.removeClass('PLAYING ' + _type.toUpperCase());\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tscope.trigger($.Event('audio-' + _event.type, {\\n\\t\\t\\t\\t\\t\\t\\ttarget: $node[0],\\n\\t\\t\\t\\t\\t\\t\\ttargetScope: scope,\\n\\t\\t\\t\\t\\t\\t\\taudioType: _type\\n\\t\\t\\t\\t\\t\\t}));\\n\\t\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\t\\tif ($node.attr('pl-required') != null) {\\n\\t\\t\\t\\t\\t\\tscreen.require($node[0]);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// This property can be either an array of nodes or the node.\\n\\t\\t\\t\\t\\t_util2['default'].assignRef(scope.audio, _type, $node[0]);\\n\\n\\t\\t\\t\\t\\t// Makes sure the property is set on the final value of scope.audio[_type].\\n\\t\\t\\t\\t\\t// This should be safe to run out of the callstack.\\n\\t\\t\\t\\t\\tsetTimeout(function () {\\n\\t\\t\\t\\t\\t\\tif (id) _util2['default'].assignRef(scope.audio[_util2['default'].transformId(_type, true)], id, $node[0]);\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\treturn scope;\\n\\t};\\n\\n\\tthis.handleProperty = function (_implementation) {\\n\\t\\tif (this.propertyHandlers) {\\n\\t\\t\\tif (this.hasOwnProperty('propertyHandlers')) {\\n\\t\\t\\t\\tswitch (typeof _implementation) {\\n\\t\\t\\t\\t\\tcase 'function':\\n\\t\\t\\t\\t\\t\\t_implementation.call(this.propertyHandlers);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'object':\\n\\t\\t\\t\\t\\t\\tthis.propertyHandlers.mixin(_implementation);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.propertyHandlers = this.propertyHandlers.extend(_implementation);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tthis.propertyHandlers = _typesBasic2['default'].extend(_implementation);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.entity = function (_selector, _implementation) {\\n\\t\\tvar Entity, prototype, id;\\n\\n\\t\\tEntity = _playGame2['default'].provideEntityType();\\n\\n\\t\\tif (!this.hasOwnProperty('entities')) this.entities = [];\\n\\n\\t\\tif (this.hasOwnProperty('$els')) {\\n\\t\\t\\tthrow new Error('Wait this hasn\\\\'t been tested.');\\n\\t\\t\\tprototype = Entity.isPrototypeOf(this) ? this : Entity;\\n\\t\\t\\tinstance = prototype.extend(_implementation).initialize(this.find(_selector));\\n\\t\\t\\tid = _util2['default'].transformId(instance.id());\\n\\n\\t\\t\\t// this.entities.push(instance);\\n\\t\\t\\tif (id) this[id] = instance;\\n\\t\\t} else {\\n\\t\\t\\tthis.entities.push({\\n\\t\\t\\t\\tselector: _selector,\\n\\t\\t\\t\\timplementation: _implementation\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.has = function (_child) {\\n\\t\\tvar child;\\n\\n\\t\\tchild = Scope.isPrototypeOf(_child) ? _child.$els : _child;\\n\\n\\t\\treturn !!this.$els.has(child).length;\\n\\t};\\n\\n\\tthis.toString = function () {\\n\\t\\tvar type;\\n\\n\\t\\ttype = this.baseType.replace('TYPE_', '');\\n\\t\\ttype = type.slice(0, 1) + type.slice(1).toLowerCase();\\n\\n\\t\\treturn ['[', this.id() || this.address(), ' ', type, ']'].join('');\\n\\t};\\n\\n\\tthis.log = function () {\\n\\t\\tvar args;\\n\\n\\t\\targs = _util2['default'].toArray(arguments);\\n\\n\\t\\tconsole.log.apply(console, [this.id() || this.address(), '-'].concat(args));\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.handleProperty(function () {\\n\\n\\t\\tthis.component = function (_node, _name, _value, _property) {\\n\\t\\t\\tvar $node, record, scope, id;\\n\\n\\t\\t\\t$node = $(_node);\\n\\n\\t\\t\\tif (!$node.data('pl-isComponent')) {\\n\\t\\t\\t\\trecord = _playGame2['default'].component.get(_value);\\n\\n\\t\\t\\t\\tif (record) {\\n\\t\\t\\t\\t\\tscope = createEntity.call(this, $node, record.implementation);\\n\\t\\t\\t\\t\\tid = _util2['default'].transformId(scope.id() || _value, true);\\n\\t\\t\\t\\t\\t_util2['default'].assignRef(this, id, scope);\\n\\n\\t\\t\\t\\t\\tif (!scope.isReady) this.assetQueue.add(scope);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tthrow new Error('Ahh!');\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\tthis.action = function (_node, _name, _value) {\\n\\t\\t\\tif (!this.hasOwnProperty('actionables')) {\\n\\t\\t\\t\\tthis.actionables = Actionables.create();\\n\\t\\t\\t\\tattachActionHandler.call(this);\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.actionables.add(_node, _value);\\n\\t\\t};\\n\\n\\t\\tthis.required = function (_node, _name, _value) {\\n\\t\\t\\tif (this.is(_node)) {\\n\\t\\t\\t\\tthis.screen.require(this);\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\tthis.require = function (_node, _name, _value) {\\n\\t\\t\\tvar query, $node;\\n\\n\\t\\t\\t// if the node with the attribute is the node for this scope\\n\\t\\t\\tif (this.is(_node)) {\\n\\t\\t\\t\\tquery = '#_value, [pl-id=_value], [pl-component=_value]'.replace(/_value/g, _value);\\n\\t\\t\\t\\t$node = this.find(query);\\n\\n\\t\\t\\t\\tif ($node.is('audio, video')) {\\n\\t\\t\\t\\t\\t$node.each(this.bind(function (_index, _node) {\\n\\t\\t\\t\\t\\t\\tthis.require(_node);\\n\\t\\t\\t\\t\\t}));\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t$node.on('ready', this.bind(function (_event) {\\n\\t\\t\\t\\t\\t\\tif ($node.is(_event.target)) {\\n\\t\\t\\t\\t\\t\\t\\tthis.require(_event.targetScope);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n\\t});\\n});\\n\\nexports['default'] = { Scope: Scope, createEntity: createEntity };\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _Object$keys = __webpack_require__(25)['default'];\\n\\nvar _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n*  jQProxy\\n*  @desc Contains all the jQuery methods targeted towards a property which references a jQuery object.\\n*  @proto Basic\\n*  \\n*  NOTE: Custom events may trigger on scopes\\n*  that also targets the same elments. Testing needed.\\n*/\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesBasic = __webpack_require__(11);\\n\\nvar _typesBasic2 = _interopRequireDefault(_typesBasic);\\n\\nvar jQProxy = _typesBasic2['default'].extend(function () {\\n\\tvar method, exclude;\\n\\n\\t/**\\n *  @desc Creates a function with a proxy to the jQuery method.\\n *  @param _name (String) The name of the method being proxied.\\n *  @return (jQuery|*) Either a jQuery object or whatever the original method returns.\\n *  @private\\n */\\n\\tfunction createProxyFunction(_name) {\\n\\t\\treturn function () {\\n\\t\\t\\tvar response;\\n\\n\\t\\t\\t// This makes sure your not calling any jQuery methods before initialization.\\n\\t\\t\\tif (!this.hasOwnProperty('$els')) {\\n\\t\\t\\t\\tif (_name === 'on') {\\n\\t\\t\\t\\t\\tthis.registerHandler(arguments);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tthrow new ReferenceError('Unable to invoke ' + _name + ' because the scope is not initialized.');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tresponse = $.fn[_name].apply(this.$els, resolveEventHandler(this, _name, arguments));\\n\\n\\t\\t\\tif (response === this.$els || response && response.jquery && response.is(this.$els)) {\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn response;\\n\\t\\t};\\n\\t}\\n\\n\\tfunction resolveEventHandler(_scope, _method, _args) {\\n\\t\\tvar i, arg, args;\\n\\n\\t\\targs = [];\\n\\n\\t\\tif (~['on', 'load'].indexOf(_method)) {\\n\\t\\t\\tfor (i = 0; arg = _args[i]; i += 1) {\\n\\t\\t\\t\\tif (typeof arg === 'function') {\\n\\t\\t\\t\\t\\targs.push((function (_handler) {\\n\\t\\t\\t\\t\\t\\treturn function () {\\n\\t\\t\\t\\t\\t\\t\\treturn _handler.apply(_scope, arguments);\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t})(arg));\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\targs.push(arg);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn args;\\n\\t\\t}\\n\\n\\t\\treturn _args;\\n\\t}\\n\\n\\t// We don't want jQuery methods overridding our base type's methods.\\n\\texclude = ['constructor'].concat(_Object$keys(_typesBasic2['default']));\\n\\n\\tthis.baseType = 'TYPE_JQPROXY';\\n\\tthis.$els = null;\\n\\tthis.eventRegistry = null;\\n\\n\\tfor (method in $.fn) {\\n\\t\\tif (!$.fn.hasOwnProperty(method) || ~exclude.indexOf(method)) continue;\\n\\t\\tthis[method] = createProxyFunction(method);\\n\\t}\\n\\n\\tthis.node = function () {\\n\\t\\treturn this.$els[0];\\n\\t};\\n\\n\\t// TODO: make this private\\n\\tthis.registerHandler = function (_definition) {\\n\\t\\tif (!this.hasOwnProperty('eventRegistry')) {\\n\\t\\t\\tif (this.eventRegistry && this.isMemberSafe('eventRegistry')) {\\n\\t\\t\\t\\tthis.eventRegistry = this.eventRegistry.slice(0);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.eventRegistry = [];\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tthis.eventRegistry.push(_definition);\\n\\t};\\n\\n\\tthis.attachEvents = function () {\\n\\t\\tvar self;\\n\\n\\t\\tself = this;\\n\\n\\t\\tif (this.eventRegistry && this.isMemberSafe('eventRegistry')) {\\n\\t\\t\\tthis.eventRegistry.forEach(function (_definition) {\\n\\t\\t\\t\\tself.on.apply(self, _definition);\\n\\t\\t\\t});\\n\\t\\t}\\n\\t};\\n\\n\\t// Wraps you function 'this' to the scope.\\n\\t//\\n\\tthis.bind = function (_handler) {\\n\\t\\tvar scope, dataArgs;\\n\\n\\t\\tscope = this;\\n\\t\\tdataArgs = [].slice.call(arguments, 1);\\n\\n\\t\\treturn function () {\\n\\t\\t\\tvar args;\\n\\n\\t\\t\\targs = [].slice.call(arguments, 0);\\n\\t\\t\\treturn _handler.apply(scope, args.concat(dataArgs));\\n\\t\\t};\\n\\t};\\n\\n\\tthis.findOwn = function (_selector) {\\n\\t\\treturn this.find(_selector).filter(this.bind(function (_index, _node) {\\n\\t\\t\\tvar $node;\\n\\n\\t\\t\\t$node = $(_node);\\n\\n\\t\\t\\tif ($node.hasClass('pl-scope')) {\\n\\t\\t\\t\\treturn $node.parent().scope() === this;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn $node.scope() === this;\\n\\t\\t}));\\n\\t};\\n\\n\\tthis.isMemberSafe = function (_name) {\\n\\t\\tvar owner, elOwner, prototype;\\n\\n\\t\\tif (this.hasOwnProperty(_name)) {\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\tprototype = Object.getPrototypeOf(this);\\n\\t\\t\\towner = _util2['default'].getOwner(this, this[_name]);\\n\\n\\t\\t\\tif (owner.object.hasOwnProperty('$els') || prototype.hasOwnProperty('$els')) return false;\\n\\n\\t\\t\\tif (prototype.$els) {\\n\\t\\t\\t\\telOwner = _util2['default'].getOwner(prototype, prototype.$els);\\n\\n\\t\\t\\t\\tif (owner.object.isPrototypeOf(elOwner.object)) {\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\treturn false;\\n\\t};\\n\\n\\tthis.is = function (_obj) {\\n\\t\\tif (!_obj) return false;\\n\\t\\tif (_obj.$els) return this.$els.is(_obj.$els);\\n\\n\\t\\treturn this.$els.is(_obj);\\n\\t};\\n});\\n\\nexports['default'] = jQProxy;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"module.exports = { \\\"default\\\": __webpack_require__(26), __esModule: true };//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzLmpzPzkxMzgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCIiwiZmlsZSI6IjI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXMuanNcbiAqKiBtb2R1bGUgaWQgPSAyNVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"__webpack_require__(27);\\nmodule.exports = __webpack_require__(33).Object.keys;//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzLmpzPzBkY2IiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSIsImZpbGUiOiIyNi5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvJC5jb3JlJykuT2JqZWN0LmtleXM7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXMuanNcbiAqKiBtb2R1bGUgaWQgPSAyNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// 19.1.2.14 Object.keys(O)\\nvar toObject = __webpack_require__(28);\\n\\n__webpack_require__(30)('keys', function($keys){\\n  return function keys(it){\\n    return $keys(toObject(it));\\n  };\\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzP2M5MTUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vJC50by1vYmplY3QnKTtcblxucmVxdWlyZSgnLi8kLm9iamVjdC1zYXAnKSgna2V5cycsIGZ1bmN0aW9uKCRrZXlzKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpe1xuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanNcbiAqKiBtb2R1bGUgaWQgPSAyN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// 7.1.13 ToObject(argument)\\nvar defined = __webpack_require__(29);\\nmodule.exports = function(it){\\n  return Object(defined(it));\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC50by1vYmplY3QuanM/NjA0YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuLyQuZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQudG8tb2JqZWN0LmpzXG4gKiogbW9kdWxlIGlkID0gMjhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 29 */\n/***/ function(module, exports) {\n\n\teval(\"// 7.2.1 RequireObjectCoercible(argument)\\nmodule.exports = function(it){\\n  if(it == undefined)throw TypeError(\\\"Can't call method on  \\\" + it);\\n  return it;\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5kZWZpbmVkLmpzPzVjNjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoaXQgPT0gdW5kZWZpbmVkKXRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuZGVmaW5lZC5qc1xuICoqIG1vZHVsZSBpZCA9IDI5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// most Object methods by ES6 should accept primitives\\nvar $export = __webpack_require__(31)\\n  , core    = __webpack_require__(33)\\n  , fails   = __webpack_require__(36);\\nmodule.exports = function(KEY, exec){\\n  var fn  = (core.Object || {})[KEY] || Object[KEY]\\n    , exp = {};\\n  exp[KEY] = exec(fn);\\n  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5vYmplY3Qtc2FwLmpzP2NlODYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0EsbURBQW1ELE9BQU8sRUFBRTtBQUM1RCIsImZpbGUiOiIzMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuLyQuZXhwb3J0JylcbiAgLCBjb3JlICAgID0gcmVxdWlyZSgnLi8kLmNvcmUnKVxuICAsIGZhaWxzICAgPSByZXF1aXJlKCcuLyQuZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZLCBleGVjKXtcbiAgdmFyIGZuICA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXVxuICAgICwgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24oKXsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLm9iamVjdC1zYXAuanNcbiAqKiBtb2R1bGUgaWQgPSAzMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var global    = __webpack_require__(32)\\n  , core      = __webpack_require__(33)\\n  , ctx       = __webpack_require__(34)\\n  , PROTOTYPE = 'prototype';\\n\\nvar $export = function(type, name, source){\\n  var IS_FORCED = type & $export.F\\n    , IS_GLOBAL = type & $export.G\\n    , IS_STATIC = type & $export.S\\n    , IS_PROTO  = type & $export.P\\n    , IS_BIND   = type & $export.B\\n    , IS_WRAP   = type & $export.W\\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\\n    , key, own, out;\\n  if(IS_GLOBAL)source = name;\\n  for(key in source){\\n    // contains in native\\n    own = !IS_FORCED && target && key in target;\\n    if(own && key in exports)continue;\\n    // export native or passed\\n    out = own ? target[key] : source[key];\\n    // prevent global pollution for namespaces\\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\\n    // bind timers to global for call from export context\\n    : IS_BIND && own ? ctx(out, global)\\n    // wrap global constructors for prevent change them in library\\n    : IS_WRAP && target[key] == out ? (function(C){\\n      var F = function(param){\\n        return this instanceof C ? new C(param) : C(param);\\n      };\\n      F[PROTOTYPE] = C[PROTOTYPE];\\n      return F;\\n    // make static versions for prototype methods\\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\\n    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;\\n  }\\n};\\n// type bitmap\\n$export.F = 1;  // forced\\n$export.G = 2;  // global\\n$export.S = 4;  // static\\n$export.P = 8;  // proto\\n$export.B = 16; // bind\\n$export.W = 32; // wrap\\nmodule.exports = $export;//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5leHBvcnQuanM/MTQ5MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRTtBQUNuRSxxRkFBcUY7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCwrREFBK0Q7QUFDL0Q7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLGNBQWM7QUFDZCxjQUFjO0FBQ2QsY0FBYztBQUNkLGVBQWU7QUFDZixlQUFlO0FBQ2YiLCJmaWxlIjoiMzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2xvYmFsICAgID0gcmVxdWlyZSgnLi8kLmdsb2JhbCcpXG4gICwgY29yZSAgICAgID0gcmVxdWlyZSgnLi8kLmNvcmUnKVxuICAsIGN0eCAgICAgICA9IHJlcXVpcmUoJy4vJC5jdHgnKVxuICAsIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHNvdXJjZSl7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GXG4gICAgLCBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HXG4gICAgLCBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TXG4gICAgLCBJU19QUk9UTyAgPSB0eXBlICYgJGV4cG9ydC5QXG4gICAgLCBJU19CSU5EICAgPSB0eXBlICYgJGV4cG9ydC5CXG4gICAgLCBJU19XUkFQICAgPSB0eXBlICYgJGV4cG9ydC5XXG4gICAgLCBleHBvcnRzICAgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KVxuICAgICwgdGFyZ2V0ICAgID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXVxuICAgICwga2V5LCBvd24sIG91dDtcbiAgaWYoSVNfR0xPQkFMKXNvdXJjZSA9IG5hbWU7XG4gIGZvcihrZXkgaW4gc291cmNlKXtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiBrZXkgaW4gdGFyZ2V0O1xuICAgIGlmKG93biAmJiBrZXkgaW4gZXhwb3J0cyljb250aW51ZTtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG4gICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzXG4gICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV1cbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpXG4gICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnlcbiAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uKEMpe1xuICAgICAgdmFyIEYgPSBmdW5jdGlvbihwYXJhbSl7XG4gICAgICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgQyA/IG5ldyBDKHBhcmFtKSA6IEMocGFyYW0pO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICBpZihJU19QUk9UTykoZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSkpW2tleV0gPSBvdXQ7XG4gIH1cbn07XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7IC8vIHdyYXBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuZXhwb3J0LmpzXG4gKiogbW9kdWxlIGlkID0gMzFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 32 */\n/***/ function(module, exports) {\n\n\teval(\"// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5nbG9iYWwuanM/YzRiNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMiLCJmaWxlIjoiMzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmdsb2JhbC5qc1xuICoqIG1vZHVsZSBpZCA9IDMyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 33 */\n/***/ function(module, exports) {\n\n\teval(\"var core = module.exports = {version: '1.2.6'};\\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5jb3JlLmpzP2M5YjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkJBQTZCO0FBQzdCLHFDQUFxQyIsImZpbGUiOiIzMy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7dmVyc2lvbjogJzEuMi42J307XG5pZih0eXBlb2YgX19lID09ICdudW1iZXInKV9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuY29yZS5qc1xuICoqIG1vZHVsZSBpZCA9IDMzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// optional / simple context binding\\nvar aFunction = __webpack_require__(35);\\nmodule.exports = function(fn, that, length){\\n  aFunction(fn);\\n  if(that === undefined)return fn;\\n  switch(length){\\n    case 1: return function(a){\\n      return fn.call(that, a);\\n    };\\n    case 2: return function(a, b){\\n      return fn.call(that, a, b);\\n    };\\n    case 3: return function(a, b, c){\\n      return fn.call(that, a, b, c);\\n    };\\n  }\\n  return function(/* ...args */){\\n    return fn.apply(that, arguments);\\n  };\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5jdHguanM/MDZmNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjM0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi8kLmEtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4sIHRoYXQsIGxlbmd0aCl7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmKHRoYXQgPT09IHVuZGVmaW5lZClyZXR1cm4gZm47XG4gIHN3aXRjaChsZW5ndGgpe1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uKGEpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbihhLCBiKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24oYSwgYiwgYyl7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbigvKiAuLi5hcmdzICovKXtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmN0eC5qc1xuICoqIG1vZHVsZSBpZCA9IDM0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 35 */\n/***/ function(module, exports) {\n\n\teval(\"module.exports = function(it){\\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\\n  return it;\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5hLWZ1bmN0aW9uLmpzP2NjYTkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMzUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuYS1mdW5jdGlvbi5qc1xuICoqIG1vZHVsZSBpZCA9IDM1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 36 */\n/***/ function(module, exports) {\n\n\teval(\"module.exports = function(exec){\\n  try {\\n    return !!exec();\\n  } catch(e){\\n    return true;\\n  }\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5mYWlscy5qcz9lNjg5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EiLCJmaWxlIjoiMzYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGV4ZWMpe1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuZmFpbHMuanNcbiAqKiBtb2R1bGUgaWQgPSAzNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n*  Queue\\n*  @desc Contains...\\n*  @proto Array, Events, Basic\\n*/\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesCollection = __webpack_require__(21);\\n\\nvar _typesCollection2 = _interopRequireDefault(_typesCollection);\\n\\nvar _typesEvents = __webpack_require__(18);\\n\\nvar _typesEvents2 = _interopRequireDefault(_typesEvents);\\n\\nvar Queue = _typesCollection2['default'].extend(function () {\\n\\n\\tthis.baseType = 'TYPE_QUEUE';\\n\\n\\tthis.ready = function (_record) {\\n\\t\\tthis.remove(_record);\\n\\n\\t\\tif (!this.length) {\\n\\t\\t\\tthis.trigger('complete');\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t_util2['default'].mixin(this, _typesEvents2['default']);\\n\\n\\treturn this;\\n});\\n\\nexports['default'] = Queue;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvUXVldWUuanM/MDNjYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Z0NBTWlCLEVBQU07Ozs7MkNBQ0EsRUFBa0I7Ozs7dUNBQ3RCLEVBQWM7Ozs7QUFFakMsSUFBSSxLQUFLLEdBQUcsNkJBQVcsTUFBTSxDQUFDLFlBQVk7O0FBRXpDLEtBQUksQ0FBQyxRQUFRLEdBQUcsWUFBWSxDQUFDOztBQUU3QixLQUFJLENBQUMsS0FBSyxHQUFHLFVBQVUsT0FBTyxFQUFFO0FBQy9CLE1BQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7O0FBRXJCLE1BQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ2pCLE9BQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7R0FDekI7O0FBRUQsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDOztBQUVGLG1CQUFLLEtBQUssQ0FBQyxJQUFJLDJCQUFTLENBQUM7O0FBRXpCLFFBQU8sSUFBSSxDQUFDO0NBRVosQ0FBQyxDQUFDOztxQkFFWSxLQUFLIiwiZmlsZSI6IjM3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4qICBRdWV1ZVxuKiAgQGRlc2MgQ29udGFpbnMuLi5cbiogIEBwcm90byBBcnJheSwgRXZlbnRzLCBCYXNpY1xuKi9cblxuaW1wb3J0IHV0aWwgZnJvbSAndXRpbCc7XG5pbXBvcnQgQ29sbGVjdGlvbiBmcm9tICd0eXBlcy9Db2xsZWN0aW9uJztcbmltcG9ydCBFdmVudHMgZnJvbSAndHlwZXMvRXZlbnRzJztcblxudmFyIFF1ZXVlID0gQ29sbGVjdGlvbi5leHRlbmQoZnVuY3Rpb24gKCkge1xuXG5cdHRoaXMuYmFzZVR5cGUgPSAnVFlQRV9RVUVVRSc7XG5cblx0dGhpcy5yZWFkeSA9IGZ1bmN0aW9uIChfcmVjb3JkKSB7XG5cdFx0dGhpcy5yZW1vdmUoX3JlY29yZCk7XG5cblx0XHRpZiAoIXRoaXMubGVuZ3RoKSB7XG5cdFx0XHR0aGlzLnRyaWdnZXIoJ2NvbXBsZXRlJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cdFxuXHR1dGlsLm1peGluKHRoaXMsIEV2ZW50cyk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBRdWV1ZTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NvdXJjZS90eXBlcy9RdWV1ZS5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 38 */\n/***/ function(module, exports) {\n\n\teval(\"exports.__esModule = true;\\n/**\\n * @module evalAction\\n */\\n\\n/**\\n * Performs `eval()` on the value of an `action` attribute on an HTML element.\\n * @arg {string} _source - JavaScript source code.\\n * @arg {Scope} _scope - The context in which to run the source.\\n * @returns {*} The result of the evaluated source.\\n */\\nfunction evalAction(_source, _scope) {\\n\\tvar error;\\n\\n\\tfunction target(_selector) {\\n\\t\\tif (_scope.event) {\\n\\t\\t\\treturn _selector ? $(_scope.event.target).closest(_selector) : $(_scope.event.target);\\n\\t\\t}\\n\\t}\\n\\n\\t// expose members of the object as if they were local variables.\\n\\t// NOTE: methods still retain their \\\"this\\\" binding to the object! :D\\n\\treturn eval(\\\"with (_scope) { try {\\\" + _source + \\\";} catch (error) { console.error('Error:', error.message, 'evaluating action', _source, 'in', _scope.id() || _scope.address()); } }\\\");\\n}\\n\\nexports[\\\"default\\\"] = evalAction;\\nmodule.exports = exports[\\\"default\\\"];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvZXZhbEFjdGlvbi5qcz8zY2ZiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBVUEsU0FBUyxVQUFVLENBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRTtBQUNyQyxLQUFJLEtBQUssQ0FBQzs7QUFFVixVQUFTLE1BQU0sQ0FBRSxTQUFTLEVBQUU7QUFDM0IsTUFBSSxNQUFNLENBQUMsS0FBSyxFQUFFO0FBQ2pCLFVBQU8sU0FBUyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUN0RjtFQUNEOzs7O0FBSUQsUUFBTyxJQUFJLENBQUMsdUJBQXVCLEdBQUMsT0FBTyxHQUFDLHFJQUFxSSxDQUFDLENBQUM7Q0FDbkw7O3FCQUVjLFVBQVUiLCJmaWxlIjoiMzguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb2R1bGUgZXZhbEFjdGlvblxuICovXG5cbi8qKlxuICogUGVyZm9ybXMgYGV2YWwoKWAgb24gdGhlIHZhbHVlIG9mIGFuIGBhY3Rpb25gIGF0dHJpYnV0ZSBvbiBhbiBIVE1MIGVsZW1lbnQuXG4gKiBAYXJnIHtzdHJpbmd9IF9zb3VyY2UgLSBKYXZhU2NyaXB0IHNvdXJjZSBjb2RlLlxuICogQGFyZyB7U2NvcGV9IF9zY29wZSAtIFRoZSBjb250ZXh0IGluIHdoaWNoIHRvIHJ1biB0aGUgc291cmNlLlxuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHQgb2YgdGhlIGV2YWx1YXRlZCBzb3VyY2UuXG4gKi9cbmZ1bmN0aW9uIGV2YWxBY3Rpb24gKF9zb3VyY2UsIF9zY29wZSkge1xuXHR2YXIgZXJyb3I7XG5cblx0ZnVuY3Rpb24gdGFyZ2V0IChfc2VsZWN0b3IpIHtcblx0XHRpZiAoX3Njb3BlLmV2ZW50KSB7XG5cdFx0XHRyZXR1cm4gX3NlbGVjdG9yID8gJChfc2NvcGUuZXZlbnQudGFyZ2V0KS5jbG9zZXN0KF9zZWxlY3RvcikgOiAkKF9zY29wZS5ldmVudC50YXJnZXQpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly8gZXhwb3NlIG1lbWJlcnMgb2YgdGhlIG9iamVjdCBhcyBpZiB0aGV5IHdlcmUgbG9jYWwgdmFyaWFibGVzLlxuXHQvLyBOT1RFOiBtZXRob2RzIHN0aWxsIHJldGFpbiB0aGVpciBcInRoaXNcIiBiaW5kaW5nIHRvIHRoZSBvYmplY3QhIDpEXG5cdHJldHVybiBldmFsKFwid2l0aCAoX3Njb3BlKSB7IHRyeSB7XCIrX3NvdXJjZStcIjt9IGNhdGNoIChlcnJvcikgeyBjb25zb2xlLmVycm9yKCdFcnJvcjonLCBlcnJvci5tZXNzYWdlLCAnZXZhbHVhdGluZyBhY3Rpb24nLCBfc291cmNlLCAnaW4nLCBfc2NvcGUuaWQoKSB8fCBfc2NvcGUuYWRkcmVzcygpKTsgfSB9XCIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBldmFsQWN0aW9uO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zb3VyY2UvZXZhbEFjdGlvbi5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Base class for a scope acting as an \\\"entity\\\" with \\\"states\\\", \\\"behaviors\\\" and the ability to respond (responsibilities) to behaviors.\\n *\\n * @module\\n */\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesGlobalScope = __webpack_require__(22);\\n\\nvar _typesGlobalScope2 = _interopRequireDefault(_typesGlobalScope);\\n\\nvar _typesCollection = __webpack_require__(21);\\n\\nvar _typesCollection2 = _interopRequireDefault(_typesCollection);\\n\\nvar _typesDimensions = __webpack_require__(5);\\n\\nvar _typesQueue = __webpack_require__(37);\\n\\nvar _typesQueue2 = _interopRequireDefault(_typesQueue);\\n\\nfunction invokeResponsibilities(_scope, _event) {\\n\\tif (_scope && _scope.responsibilities && _scope.isMemberSafe('responsibilities')) {\\n\\t\\t_scope.responsibilities.forEach(function (_record) {\\n\\t\\t\\tif (_record.name === _event.name) {\\n\\n\\t\\t\\t\\t// console.log(_scope.id(), 'respond', _record.name, 'from', _event.targetScope.id());\\n\\t\\t\\t\\t_record.ability.call(_scope, _event);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n}\\n\\n/**\\n * <span class=\\\"note important\\\">NOTE: This is NOT a constructor. Use `Entity.create()` to get a new instance.</span>\\n * @classdesc Base class for a scope acting as an \\\"entity\\\" with \\\"states\\\", \\\"behaviors\\\" and the ability to respond (responsibilities) to behaviors. For more information on these terms read [this]{@link module:types/Entity}.\\n * <style>\\n * .tag {\\n *   padding: 1px 4px;\\n *   border-radius: 4px;\\n *\\n *   color: #fff;\\n *   background-color: #aaa;\\n * }\\n *\\n * .tag.behavior {\\n *\\t background-color: #0ba;\\n * }\\n *\\n * .tag.state {\\n *\\t background-color: #ba0;\\n * }\\n *\\n * .note {\\n *   border: solid 1px;\\n *   border-radius: 4px;\\n *   padding: 1px 4px;\\n *   color: #aaa;\\n *   background-color: #eee;\\n * }\\n * \\n * .note.important {\\n *   color: #b55;\\n *   background-color: #fee;\\n * }\\n * </style>\\n *\\n * @class\\n * @prop {module:types/Collection~Collection} responsibilities - A collection of ResponsibilityRecords for the scope.\\n * @prop {boolean} isComplete - Marks a scope as \\\"complete\\\" via the [`complete()`]{@link module:types/Entity~Entity#complete} behavior.\\n * @extends GlobalScope\\n */\\nvar Entity = _typesGlobalScope2['default'].extend(function () {\\n\\n\\tfunction resolveTarget(_target) {\\n\\n\\t\\tswitch (typeof _target) {\\n\\t\\t\\tcase 'string':\\n\\t\\t\\t\\treturn this.findOwn(_target);\\n\\t\\t\\tcase 'object':\\n\\t\\t\\t\\tif (_target.jquery) return _target;\\n\\t\\t\\t\\tif (Entity.isPrototypeOf(_target)) return _target;\\n\\t\\t\\t\\tif (_target.nodeType === document.ELEMENT_NODE) return $(_target);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\tfunction ResponsibilityRecord(_name, _ability) {\\n\\t\\tthis.name = _name;\\n\\t\\tthis.ability = _ability;\\n\\t}\\n\\n\\tfunction dragGreeter(_event) {\\n\\t\\tswitch (_event.type) {\\n\\t\\t\\tcase 'drag-start':\\n\\t\\t\\t\\tthis.grab(_event.state);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'drag-move':\\n\\t\\t\\t\\tthis.dragging(_event.state);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'drag-end':\\n\\t\\t\\t\\tthis.release(_event.state);\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction attachDragEvents() {\\n\\t\\tif (this.draggables && this.isMemberSafe('draggables') && this.draggables.length) {\\n\\t\\t\\tthis.on('drag-start drag-move drag-end', dragGreeter);\\n\\t\\t}\\n\\t}\\n\\n\\tthis.baseType = 'TYPE_ENTITY';\\n\\tthis.STATE = {\\n\\t\\tPLAYING: 'PLAYING',\\n\\t\\tBACKGROUND: 'BACKGROUND',\\n\\t\\tVOICE_OVER: 'VOICE-OVER',\\n\\t\\tSFX: 'SFX'\\n\\t};\\n\\n\\tthis.timeoutID = null;\\n\\tthis.intervalID = null;\\n\\tthis.responsibilities = null;\\n\\tthis.isComplete = false;\\n\\tthis.shouldInheritAbilities = true;\\n\\tthis.frameHandlers = null;\\n\\tthis.frameRate = 60; // 60fps\\n\\tthis.draggables = null;\\n\\tthis.requiredQueue = null;\\n\\n\\tthis.handleProperty(function () {\\n\\t\\tthis.size = function (_node, _name, _value, _property) {\\n\\t\\t\\tvar size;\\n\\n\\t\\t\\tif (this.is(_node)) {\\n\\t\\t\\t\\tsize = _value.split(/\\\\s*[x,]\\\\s*/);\\n\\t\\t\\t\\tthis.css({\\n\\t\\t\\t\\t\\twidth: size[0],\\n\\t\\t\\t\\t\\theight: size[1] || size[0]\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\tthis.position = function (_node, _name, _value, _property) {\\n\\t\\t\\tvar size;\\n\\n\\t\\t\\tif (this.is(_node)) {\\n\\t\\t\\t\\tsize = _value.split(/\\\\s*[x,]\\\\s*/);\\n\\t\\t\\t\\tthis.css({\\n\\t\\t\\t\\t\\ttop: size[1] || size[0],\\n\\t\\t\\t\\t\\tleft: size[0]\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\tthis.draggable = function (_node, _name, _value, _property) {\\n\\t\\t\\tif (!this.hasOwnProperty('draggables')) {\\n\\t\\t\\t\\tthis.draggables = $();\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.draggables.push(_node);\\n\\t\\t};\\n\\t});\\n\\n\\tthis.__init = function () {\\n\\t\\tthis.proto();\\n\\t\\tattachDragEvents.call(this);\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.size = function () {\\n\\t\\tvar size;\\n\\n\\t\\tif (arguments.length) {\\n\\t\\t\\tsize = _typesDimensions.Size.create(arguments);\\n\\t\\t\\tthis.css(size);\\n\\t\\t\\treturn size;\\n\\t\\t}\\n\\n\\t\\treturn _typesDimensions.Size.create().set(this.width(), this.height());\\n\\t};\\n\\n\\tthis.propagateBehavior = function (_event) {\\n\\t\\tvar ids;\\n\\n\\t\\tids = [];\\n\\n\\t\\tthis.findOwn('.pl-scope').each(function (_index, _node) {\\n\\t\\t\\tvar $node = $(_node);\\n\\t\\t\\tids.push($node.id() || $node.address());\\n\\t\\t});\\n\\n\\t\\tif (this.hasOwnProperty('entities') && this.entities.length) {\\n\\t\\t\\t// console.log(this.id(), 'propagate', _event.name, 'to', this.entities.length, 'nodes', ids);\\n\\n\\t\\t\\tthis.entities.forEach(function (_scope) {\\n\\t\\t\\t\\tinvokeResponsibilities(_scope, _event);\\n\\t\\t\\t\\t_scope.propagateBehavior(_event);\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.require = function (_entity) {\\n\\t\\tif (!this.hasOwnProperty('requiredQueue')) {\\n\\t\\t\\tthis.requiredQueue = _typesQueue2['default'].create();\\n\\t\\t\\tthis.requiredQueue.on('complete', this.bind(function () {\\n\\t\\t\\t\\tthis.log('entity complete');\\n\\t\\t\\t\\tthis.complete();\\n\\t\\t\\t}));\\n\\n\\t\\t\\tthis.respond('complete', function (_event) {\\n\\t\\t\\t\\tif (!this.has(_event.target)) return;\\n\\t\\t\\t\\tif (_event.targetScope === this) return;\\n\\n\\t\\t\\t\\tthis.requiredQueue.ready(_event.behaviorTarget);\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tthis.requiredQueue.add(_entity);\\n\\t\\tthis.gate();\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.behavior = function (_name, _behavior) {\\n\\t\\t_behavior.method = this[_name] = function () {\\n\\t\\t\\tvar behaviorEvent, result;\\n\\n\\t\\t\\tbehaviorEvent = {\\n\\t\\t\\t\\tname: _name,\\n\\t\\t\\t\\tmessage: '',\\n\\t\\t\\t\\ttargetScope: this,\\n\\t\\t\\t\\tbehaviorTarget: this\\n\\t\\t\\t};\\n\\n\\t\\t\\tresult = _behavior.apply(this, arguments);\\n\\n\\t\\t\\tif (typeof result === 'object') {\\n\\t\\t\\t\\tbehaviorEvent = _util2['default'].mixin(behaviorEvent, result);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (result !== false) {\\n\\t\\t\\t\\tthis.trigger($.Event('behavior', behaviorEvent));\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this;\\n\\t\\t};\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.respond = function () {\\n\\t\\tvar name, ability, parentScope, abilities, protoAbilities;\\n\\n\\t\\tif (!this.hasOwnProperty('responsibilities')) {\\n\\t\\t\\tabilities = _typesCollection2['default'].create();\\n\\t\\t\\tprotoAbilities = this.provideAblilityPototype();\\n\\n\\t\\t\\tif (this.shouldInheritAbilities && protoAbilities && protoAbilities.responsibilities) {\\n\\t\\t\\t\\tabilities.push.apply(abilities, protoAbilities.responsibilities);\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.responsibilities = abilities;\\n\\t\\t}\\n\\n\\t\\tif (arguments.length === 1) {\\n\\t\\t\\tswitch (typeof arguments[0]) {\\n\\t\\t\\t\\tcase 'string':\\n\\t\\t\\t\\t\\tname = arguments[0];break;\\n\\n\\t\\t\\t\\tcase 'function':\\n\\t\\t\\t\\tcase 'object':\\n\\t\\t\\t\\t\\tability = arguments[0];break;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tname = arguments[0];\\n\\t\\t\\tability = arguments[1];\\n\\t\\t}\\n\\n\\t\\tswitch (typeof ability) {\\n\\t\\t\\tcase 'object':\\n\\t\\t\\t\\tfor (name in ability) {\\n\\t\\t\\t\\t\\tif (!ability.hasOwnProperty(name)) continue;\\n\\n\\t\\t\\t\\t\\tthis.respond(name, ability[name]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'function':\\n\\t\\t\\t\\tthis.responsibilities.add(new ResponsibilityRecord(name, ability));\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.delay = function (_time, _cb) {\\n\\t\\tvar screen, time;\\n\\n\\t\\tscreen = this;\\n\\t\\ttime = _util2['default'].toMillisec(_time);\\n\\n\\t\\tthis.timeoutID = setTimeout(function () {\\n\\t\\t\\t_cb.call(screen);\\n\\t\\t}, time);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.repeat = function (_time, _cb) {\\n\\t\\tvar screen, time;\\n\\n\\t\\tscreen = this;\\n\\t\\ttime = _util2['default'].toMillisec(_time);\\n\\n\\t\\tthis.intervalID = setInterval(function () {\\n\\t\\t\\t_cb.call(screen);\\n\\t\\t}, time);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.eachFrame = function (_handler, _on) {\\n\\t\\tvar binder, frame, lastTime, rate, frames;\\n\\n\\t\\trate = this.frameRate || 1000;\\n\\t\\tframes = 0;\\n\\t\\tlastTime = 0;\\n\\n\\t\\tif (!this.hasOwnProperty('frameHandlers')) {\\n\\t\\t\\tframe = function (_time) {\\n\\t\\t\\t\\tvar i, handler;\\n\\n\\t\\t\\t\\tif (rate) {\\n\\t\\t\\t\\t\\tif (_time - lastTime >= 1000 / rate) {\\n\\t\\t\\t\\t\\t\\tfor (i = 0; handler = this.frameHandlers[i]; i += 1) {\\n\\t\\t\\t\\t\\t\\t\\thandler.call(this, _time, Math.round(1000 / (_time - lastTime)), rate);\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tif (frames === rate) frames = 0;\\n\\n\\t\\t\\t\\t\\t\\tframes += 1;\\n\\t\\t\\t\\t\\t\\tlastTime = _time;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (this.frameHandlers.length) {\\n\\t\\t\\t\\t\\twindow.requestAnimationFrame(binder);\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\n\\t\\t\\tbinder = this.bind(frame);\\n\\n\\t\\t\\t// allows methods passed as _handler's to\\n\\t\\t\\t// be able to trace back for proto() callbacks.\\n\\t\\t\\tframe.method = this.eachFrame;\\n\\n\\t\\t\\tthis.frameHandlers = _typesCollection2['default'].create();\\n\\t\\t\\twindow.requestAnimationFrame(binder);\\n\\t\\t}\\n\\n\\t\\tif (_on !== false) {\\n\\t\\t\\tthis.frameHandlers.add(_handler);\\n\\t\\t} else {\\n\\t\\t\\tthis.frameHandlers.remove(_handler);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.kill = function (_timer) {\\n\\t\\tif (_timer === 'repeat') {\\n\\t\\t\\tclearInterval(this.intervalID);\\n\\t\\t} else {\\n\\t\\t\\tclearTimeout(this.timeoutID);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.state = function (_flag, _definition, _imp) {\\n\\t\\tvar flag, tester, setter, getter, STATE, def, opperations, names;\\n\\n\\t\\tif (!_definition) {\\n\\t\\t\\treturn this.proto(_flag);\\n\\t\\t}\\n\\n\\t\\tdef = _definition.split(/\\\\s+/);\\n\\t\\tnames = _flag.split(/\\\\s+/);\\n\\t\\topperations = [];\\n\\n\\t\\tdef.forEach(this.bind(function (_opp) {\\n\\t\\t\\tvar method, flag;\\n\\n\\t\\t\\tmethod = _opp.slice(0, 1) === '+' ? 'addClass' : 'removeClass';\\n\\n\\t\\t\\topperations.push({\\n\\t\\t\\t\\tmethod: method,\\n\\t\\t\\t\\tflag: _opp.slice(1)\\n\\t\\t\\t});\\n\\n\\t\\t\\tif (method === 'addClass') {\\n\\t\\t\\t\\tflag = _opp.slice(1);\\n\\t\\t\\t\\tSTATE = _util2['default'].transformId(flag);\\n\\t\\t\\t\\tthis.STATE[STATE] = flag;\\n\\t\\t\\t}\\n\\t\\t}));\\n\\n\\t\\tsetter = names[0];\\n\\t\\ttester = names[1];\\n\\n\\t\\tthis[setter] = function (_target) {\\n\\t\\t\\tvar target, uiStateEvent, oppsPerformed;\\n\\n\\t\\t\\ttarget = resolveTarget.call(this, _target);\\n\\t\\t\\tuiStateEvent = $.Event('ui-' + setter, {\\n\\t\\t\\t\\ttarget: target.jquery ? target[0] : target,\\n\\t\\t\\t\\ttargetScope: this\\n\\t\\t\\t});\\n\\t\\t\\toppsPerformed = 0;\\n\\n\\t\\t\\tif (_imp && _imp.shouldSet && _imp.shouldSet.apply(this, arguments) === false) {\\n\\t\\t\\t\\treturn !!(_imp && _imp.notSet) && _imp.notSet.apply(this, arguments);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (_imp && _imp.willSet) _imp.willSet.apply(this, arguments);\\n\\n\\t\\t\\topperations.forEach(function (_record) {\\n\\t\\t\\t\\t// If we are adding or removing a class, test if the target already has/removed it.\\n\\t\\t\\t\\t// If so, then bump \\\"oppsPerformed\\\".\\n\\t\\t\\t\\toppsPerformed += Number(target.hasClass(_record.flag) === ! ~_record.method.indexOf('add'));\\n\\t\\t\\t\\ttarget[_record.method](_record.flag);\\n\\t\\t\\t});\\n\\n\\t\\t\\tif (_imp && _imp.didSet) _imp.didSet.apply(this, arguments);\\n\\n\\t\\t\\tif (oppsPerformed) {\\n\\t\\t\\t\\tthis.trigger(uiStateEvent);\\n\\t\\t\\t\\treturn target;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn false;\\n\\t\\t};\\n\\n\\t\\tif (tester) {\\n\\t\\t\\tgetter = 'get' + tester.slice(0, 1).toUpperCase() + tester.slice(1);\\n\\n\\t\\t\\tthis[tester] = function (_target) {\\n\\t\\t\\t\\tvar target;\\n\\n\\t\\t\\t\\ttarget = resolveTarget.call(this, _target);\\n\\n\\t\\t\\t\\treturn target.hasClass(this.STATE[STATE]);\\n\\t\\t\\t};\\n\\n\\t\\t\\tthis[getter] = function () {\\n\\t\\t\\t\\treturn this.findOwn('.' + this.STATE[STATE]);\\n\\t\\t\\t};\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.provideBehaviorEventScope = function () {\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.provideAblilityPototype = function () {\\n\\t\\tvar owner;\\n\\n\\t\\towner = _util2['default'].getOwner(this, this.baseType);\\n\\n\\t\\treturn !!owner && owner.object;\\n\\t};\\n\\n\\tthis.completed = function () {\\n\\t\\treturn this.game.demoMode || this.hasOwnProperty('isComplete') && this.isComplete || !this.requiredQueue || this.requiredQueue.length === 0;\\n\\t};\\n\\n\\t/**\\n  * <span class=\\\"tag behavior\\\">Behavior</span>\\n  * Marks a scope \\\"complete\\\" by seting `isComplete` to `true` and add the `COMPLETE` state flag.\\n  * @function module:types/Entity~Entity#complete\\n  * @returns {object} A messages object with `behaviorTarget` set to the scope performing the behavior.\\n  */\\n\\tthis.behavior('complete', function () {\\n\\t\\tif (this.hasOwnProperty('isComplete') && this.isComplete) return false;\\n\\n\\t\\tthis.isComplete = true;\\n\\t\\tthis.addClass('COMPLETE');\\n\\n\\t\\treturn {\\n\\t\\t\\tbehaviorTarget: this\\n\\t\\t};\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag behavior\\\">Behavior</span>\\n  * Reports a drggable has been grabbed for dragging.\\n  * @function module:types/Entity~Entity#grab\\n  * @arg {object} _state - An object containing the state of a draggable.\\n  * @returns {object} A messages object with `behaviorTarget` set to the scope performing the behavior.\\n  *\\n  * @see module:play~pl.game.manager.draggable for more info on draggable state.\\n  */\\n\\tthis.behavior('grab', function (_state) {\\n\\t\\treturn {\\n\\t\\t\\tstate: _state,\\n\\t\\t\\tbehaviorTarget: _state.$draggable\\n\\t\\t};\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag behavior\\\">Behavior</span>\\n  * Reports a draggable as being dragged.\\n  * @function module:types/Entity~Entity#dragging\\n  * @arg {object} _state - An object containing the state of a draggable.\\n  * @returns {object} A messages object with `behaviorTarget` set to the scope performing the behavior.\\n  *\\n  * @see module:play~pl.game.manager.draggable for more info on draggable state.\\n  */\\n\\tthis.behavior('dragging', function (_state) {\\n\\t\\treturn {\\n\\t\\t\\tstate: _state,\\n\\t\\t\\tbehaviorTarget: _state.$draggable\\n\\t\\t};\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag behavior\\\">Behavior</span>\\n  * Reports a drggable as released or droped.\\n  * @function module:types/Entity~Entity#release\\n  * @arg {object} _state - An object containing the state of a draggable.\\n  * @returns {object} A messages object with `behaviorTarget` set to the scope performing the behavior.\\n  *\\n  * @see module:play~pl.game.manager.draggable for more info on draggable state.\\n  */\\n\\tthis.behavior('release', function (_state) {\\n\\t\\treturn {\\n\\t\\t\\tstate: _state,\\n\\t\\t\\tbehaviorTarget: _state.$draggable\\n\\t\\t};\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds `OPEN` and removes the `LEAVE` CSS class names from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#open\\n  * @fires Entity#ui-open\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `OPEN` class name.\\n  * @function module:types/Entity~Entity#opened\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Open'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `OPEN` class name.\\n  * @function module:types/Entity~Entity#getOpened\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('open opened', '+OPEN -LEAVE');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Removes the `OPEN` CSS class name from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#close\\n  * @fires Entity#ui-close\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\tthis.state('close', '-OPEN');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds the `LEAVE` CSS class name to the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#leave\\n  * @fires Entity#ui-leave\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `LEAVE` class name.\\n  * @function module:types/Entity~Entity#left\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Leave'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `LEAVE` class name.\\n  * @function module:types/Entity~Entity#getLeft\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('leave left', '+LEAVE', {\\n\\t\\twillSet: function willSet(_target) {\\n\\t\\t\\tthis.close(_target);\\n\\t\\t}\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds `ENABLED` and removes the `DISABLED` CSS class names from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#enable\\n  * @fires Entity#ui-enable\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `ENABLED` class name.\\n  * @function module:types/Entity~Entity#enabled\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Enabled'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `ENABLED` class name.\\n  * @function module:types/Entity~Entity#getEnabled\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('enable enabled', '+ENABLED -DISABLED');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds `DISABLED` and removes the `ENABLED` CSS class names from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#disable\\n  * @fires Entity#ui-disable\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `DISABLED` class name.\\n  * @function module:types/Entity~Entity#disabled\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Disabled'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `DISABLED` class name.\\n  * @function module:types/Entity~Entity#getDisabled\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('disable disabled', '+DISABLED -ENABLED');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds the `SELECTED` CSS class name to the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#select\\n  * @fires Entity#ui-select\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `SELECTED` class name.\\n  * @function module:types/Entity~Entity#selected\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Selected'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `SELECTED` class name.\\n  * @function module:types/Entity~Entity#getDisabled\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('select selected', '+SELECTED', {\\n\\t\\twillSet: function willSet(_target) {\\n\\t\\t\\tvar target, $parent;\\n\\n\\t\\t\\ttarget = resolveTarget.call(this, _target);\\n\\t\\t\\t$parent = target.parent();\\n\\n\\t\\t\\t$parent.find('> .SELECTED').each(this.bind(function (_index, _node) {\\n\\t\\t\\t\\tthis.deselect(_node);\\n\\t\\t\\t}));\\n\\t\\t\\t$parent.find('> .HIGHLIGHTED').each(this.bind(function (_index, _node) {\\n\\t\\t\\t\\tthis.unhighlight(_node);\\n\\t\\t\\t}));\\n\\t\\t}\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Removes the `SELECTED` CSS class name from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#deselect\\n  * @fires Entity#ui-deselect\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\tthis.state('deselect', '-SELECTED');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds the `HIGHLIGHTED` CSS class name to the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#highlight\\n  * @fires Entity#ui-highlight\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `HIGHLIGHTED` class name.\\n  * @function module:types/Entity~Entity#highlighted\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Highlighted'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `HIGHLIGHTED` class name.\\n  * @function module:types/Entity~Entity#getHighlighted\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('highlight highlighted', '+HIGHLIGHTED');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Removes the `HIGHLIGHTED` CSS class name from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#unhighlight\\n  * @fires Entity#ui-unhighlight\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\tthis.state('unhighlight', '-HIGHLIGHTED');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds the `DRAGGABLE` CSS class name to the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#draggable\\n  * @fires Entity#ui-draggable\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `DRAGGABLE` class name.\\n  * @function module:types/Entity~Entity#dragEnabled\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Draggable'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `DRAGGABLE` class name.\\n  * @function module:types/Entity~Entity#getDragEnabled\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('draggable dragEnabled', '+DRAGGABLE', {\\n\\t\\tdidSet: function didSet(_target) {\\n\\t\\t\\tthis.translate(resolveTarget.call(this, _target));\\n\\t\\t}\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Removes the `DRAGGABLE` CSS class name from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#undraggable\\n  * @fires Entity#ui-undraggable\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\tthis.state('undraggable', '-DRAGGABLE');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds the `TRANSLATED` CSS class name to the scope or the given `_target`. The target also gets a 2d transform at the given `_point`.\\n  * @function module:types/Entity~Entity#translate\\n  * @fires Entity#ui-translate\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @arg {module:types/Dimensions~Point} _point - Point object with coordinates {x,y}.\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds the `TRANSLATED` CSS class name to the scope. The scope also gets a 2d transform at the given `_point`.\\n  * @function module:types/Entity~Entity#translate\\n  * @fires Entity#ui-translate\\n  * @arg {module:types/Dimensions~Point} _point - Point object with coordinates {x,y}.\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `TRANSLATED` class name.\\n  * @function module:types/Entity~Entity#translated\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Translate'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `TRANSLATED` class name.\\n  * @function module:types/Entity~Entity#getTranslated\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('translate translated', '+TRANSLATED', {\\n\\t\\twillSet: function willSet(_target_point, _point) {\\n\\t\\t\\tvar point, target;\\n\\n\\t\\t\\ttarget = resolveTarget.call(this, _target_point);\\n\\t\\t\\tpoint = ! ~[_target_point.x, _target_point.y].indexOf(undefined) ? _target_point : _point;\\n\\n\\t\\t\\tif (point) {\\n\\t\\t\\t\\ttarget.css('transform', 'translateX(' + point.x + 'px) translateY(' + point.y + 'px)');\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Removes the `TRANSLATED` CSS class name and CSS transform from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#untranslate\\n  * @fires Entity#ui-untranslate\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\tthis.state('untranslate', '-TRANSLATED', {\\n\\t\\twillSet: function willSet() {\\n\\t\\t\\tthis.css('transform', 'none');\\n\\t\\t}\\n\\t});\\n\\n\\tthis.state('gate gated', '+GATED');\\n});\\n\\nexports['default'] = { Entity: Entity, invokeResponsibilities: invokeResponsibilities };\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvRW50aXR5LmpzPzkxNmYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O2dDQUtpQixFQUFNOzs7OzRDQUNDLEVBQW1COzs7OzJDQUNwQixFQUFrQjs7OzsyQ0FDYixDQUFrQjs7c0NBQzVCLEVBQWE7Ozs7QUFFL0IsU0FBUyxzQkFBc0IsQ0FBRSxNQUFNLEVBQUUsTUFBTSxFQUFFO0FBQ2hELEtBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLGtCQUFrQixDQUFDLEVBQUU7QUFDakYsUUFBTSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxVQUFVLE9BQU8sRUFBRTtBQUNsRCxPQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLElBQUksRUFBRTs7O0FBR2pDLFdBQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNyQztHQUNELENBQUMsQ0FBQztFQUNIO0NBQ0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUNELElBQUksTUFBTSxHQUFHLDhCQUFZLE1BQU0sQ0FBQyxZQUFZOztBQUUzQyxVQUFTLGFBQWEsQ0FBRSxPQUFPLEVBQUU7O0FBRWhDLFVBQVEsT0FBTyxPQUFPO0FBQ3JCLFFBQUssUUFBUTtBQUFFLFdBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM1QyxRQUFLLFFBQVE7QUFDWixRQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxPQUFPLENBQUM7QUFDbkMsUUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxFQUFFLE9BQU8sT0FBTyxDQUFDO0FBQ2xELFFBQUksT0FBTyxDQUFDLFFBQVEsS0FBSyxRQUFRLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQUEsR0FDbkU7O0FBRUQsU0FBTyxJQUFJLENBQUM7RUFDWjs7QUFFRCxVQUFTLG9CQUFvQixDQUFFLEtBQUssRUFBRSxRQUFRLEVBQUU7QUFDL0MsTUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7QUFDbEIsTUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUM7RUFDeEI7O0FBRUQsVUFBUyxXQUFXLENBQUUsTUFBTSxFQUFFO0FBQzdCLFVBQVEsTUFBTSxDQUFDLElBQUk7QUFDbEIsUUFBSyxZQUFZO0FBQ2hCLFFBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3hCLFVBQU07O0FBRVAsUUFBSyxXQUFXO0FBQ2YsUUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDNUIsVUFBTTs7QUFFUCxRQUFLLFVBQVU7QUFDZCxRQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMzQixVQUFNO0FBQUEsR0FDUDtFQUNEOztBQUVELFVBQVMsZ0JBQWdCLEdBQUk7QUFDNUIsTUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUU7QUFDakYsT0FBSSxDQUFDLEVBQUUsQ0FBQywrQkFBK0IsRUFBRSxXQUFXLENBQUMsQ0FBQztHQUN0RDtFQUNEOztBQUVELEtBQUksQ0FBQyxRQUFRLEdBQUcsYUFBYSxDQUFDO0FBQzlCLEtBQUksQ0FBQyxLQUFLLEdBQUc7QUFDWixTQUFPLEVBQUUsU0FBUztBQUNsQixZQUFVLEVBQUUsWUFBWTtBQUN4QixZQUFVLEVBQUUsWUFBWTtBQUN4QixLQUFHLEVBQUUsS0FBSztFQUNWLENBQUM7O0FBRUYsS0FBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7QUFDdEIsS0FBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7QUFDdkIsS0FBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztBQUM3QixLQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztBQUN4QixLQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxDQUFDO0FBQ25DLEtBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO0FBQzFCLEtBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLEtBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3ZCLEtBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDOztBQUUxQixLQUFJLENBQUMsY0FBYyxDQUFDLFlBQVk7QUFDL0IsTUFBSSxDQUFDLElBQUksR0FBRyxVQUFVLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRTtBQUN0RCxPQUFJLElBQUksQ0FBQzs7QUFFVCxPQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDbkIsUUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDbEMsUUFBSSxDQUFDLEdBQUcsQ0FBQztBQUNSLFVBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ2QsV0FBTSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO0tBQzFCLENBQUMsQ0FBQztJQUNIO0dBQ0QsQ0FBQzs7QUFFRixNQUFJLENBQUMsUUFBUSxHQUFHLFVBQVUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFO0FBQzFELE9BQUksSUFBSSxDQUFDOztBQUVULE9BQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUNuQixRQUFJLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNsQyxRQUFJLENBQUMsR0FBRyxDQUFDO0FBQ1IsUUFBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3ZCLFNBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0tBQ2IsQ0FBQyxDQUFDO0lBQ0g7R0FDRCxDQUFDOztBQUVGLE1BQUksQ0FBQyxTQUFTLEdBQUcsVUFBVSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUU7QUFDM0QsT0FBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLEVBQUU7QUFDdkMsUUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLEVBQUUsQ0FBQztJQUN0Qjs7QUFFRCxPQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUM1QixDQUFDO0VBQ0YsQ0FBQyxDQUFDOztBQUVILEtBQUksQ0FBQyxNQUFNLEdBQUcsWUFBWTtBQUN6QixNQUFJLENBQUMsS0FBSyxFQUFFO0FBQ1osa0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzVCLFNBQU8sSUFBSSxDQUFDO0VBQ1osQ0FBQzs7QUFFRixLQUFJLENBQUMsSUFBSSxHQUFHLFlBQVk7QUFDdkIsTUFBSSxJQUFJLENBQUM7O0FBRVQsTUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFO0FBQ3JCLE9BQUksR0FBRyxzQkFBSyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDOUIsT0FBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNmLFVBQU8sSUFBSSxDQUFDO0dBQ1o7O0FBRUQsU0FBTyxzQkFBSyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0VBQ3RELENBQUM7O0FBRUYsS0FBSSxDQUFDLGlCQUFpQixHQUFHLFVBQVUsTUFBTSxFQUFFO0FBQzFDLE1BQUksR0FBRyxDQUFDOztBQUVSLEtBQUcsR0FBRyxFQUFFLENBQUM7O0FBRVQsTUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxNQUFNLEVBQUUsS0FBSyxFQUFFO0FBQ3ZELE9BQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNyQixNQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztHQUN4QyxDQUFDLENBQUM7O0FBRUgsTUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFOzs7QUFHNUQsT0FBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVSxNQUFNLEVBQUU7QUFDdkMsMEJBQXNCLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZDLFVBQU0sQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqQyxDQUFDLENBQUM7R0FDSDs7QUFFRCxTQUFPLElBQUksQ0FBQztFQUNaLENBQUM7O0FBRUYsS0FBSSxDQUFDLE9BQU8sR0FBRyxVQUFVLE9BQU8sRUFBRTtBQUNqQyxNQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsRUFBRTtBQUMxQyxPQUFJLENBQUMsYUFBYSxHQUFHLHdCQUFNLE1BQU0sRUFBRSxDQUFDO0FBQ3BDLE9BQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVk7QUFDdkQsUUFBSSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQzVCLFFBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNoQixDQUFDLENBQUMsQ0FBQzs7QUFFSixPQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxVQUFVLE1BQU0sRUFBRTtBQUMxQyxRQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsT0FBTztBQUNyQyxRQUFJLE1BQU0sQ0FBQyxXQUFXLEtBQUssSUFBSSxFQUFFLE9BQU87O0FBRXhDLFFBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNoRCxDQUFDLENBQUM7R0FDSDs7QUFFRCxNQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNoQyxNQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7O0FBRVosU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDOztBQUVGLEtBQUksQ0FBQyxRQUFRLEdBQUcsVUFBVSxLQUFLLEVBQUUsU0FBUyxFQUFFO0FBQzNDLFdBQVMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLFlBQVk7QUFDNUMsT0FBSSxhQUFhLEVBQUUsTUFBTSxDQUFDOztBQUUxQixnQkFBYSxHQUFHO0FBQ2YsUUFBSSxFQUFFLEtBQUs7QUFDWCxXQUFPLEVBQUUsRUFBRTtBQUNYLGVBQVcsRUFBRSxJQUFJO0FBQ2pCLGtCQUFjLEVBQUUsSUFBSTtJQUNwQixDQUFDOztBQUVGLFNBQU0sR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQzs7QUFFMUMsT0FBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7QUFDL0IsaUJBQWEsR0FBRyxrQkFBSyxLQUFLLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2xEOztBQUVELE9BQUksTUFBTSxLQUFLLEtBQUssRUFBRTtBQUNyQixRQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDakQ7O0FBRUQsVUFBTyxJQUFJLENBQUM7R0FDWixDQUFDOztBQUVGLFNBQU8sSUFBSSxDQUFDO0VBQ1osQ0FBQzs7QUFFRixLQUFJLENBQUMsT0FBTyxHQUFHLFlBQVk7QUFDMUIsTUFBSSxJQUFJLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsY0FBYyxDQUFDOztBQUUxRCxNQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFO0FBQzdDLFlBQVMsR0FBRyw2QkFBVyxNQUFNLEVBQUUsQ0FBQztBQUNoQyxpQkFBYyxHQUFHLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDOztBQUVoRCxPQUFJLElBQUksQ0FBQyxzQkFBc0IsSUFBSyxjQUFjLElBQUksY0FBYyxDQUFDLGdCQUFpQixFQUFFO0FBQ3ZGLGFBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxjQUFjLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUNqRTs7QUFFRCxPQUFJLENBQUMsZ0JBQWdCLEdBQUcsU0FBUyxDQUFDO0dBQ2xDOztBQUVELE1BQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7QUFDM0IsV0FBUSxPQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsU0FBSyxRQUFRO0FBQUUsU0FBSSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBRSxNQUFNOztBQUUxQyxTQUFLLFVBQVUsQ0FBQztBQUNoQixTQUFLLFFBQVE7QUFBRSxZQUFPLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFFLE1BQU07QUFBQSxJQUM3QztHQUNELE1BRUk7QUFDSixPQUFJLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BCLFVBQU8sR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDdkI7O0FBRUQsVUFBUSxPQUFPLE9BQU87QUFDckIsUUFBSyxRQUFRO0FBQ1osU0FBSyxJQUFJLElBQUksT0FBTyxFQUFFO0FBQ3JCLFNBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVM7O0FBRTVDLFNBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0tBQ2xDO0FBQ0QsVUFBTTs7QUFFUCxRQUFLLFVBQVU7QUFDZCxRQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLElBQUksb0JBQW9CLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDbkUsVUFBTTtBQUFBLEdBQ1A7O0FBRUQsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDOztBQUVGLEtBQUksQ0FBQyxLQUFLLEdBQUcsVUFBVSxLQUFLLEVBQUUsR0FBRyxFQUFFO0FBQ2xDLE1BQUksTUFBTSxFQUFFLElBQUksQ0FBQzs7QUFFakIsUUFBTSxHQUFHLElBQUksQ0FBQztBQUNkLE1BQUksR0FBRyxrQkFBSyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7O0FBRTlCLE1BQUksQ0FBQyxTQUFTLEdBQUcsVUFBVSxDQUFDLFlBQVc7QUFDdEMsTUFBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUNqQixFQUFFLElBQUksQ0FBQyxDQUFDOztBQUVULFNBQU8sSUFBSSxDQUFDO0VBQ1osQ0FBQzs7QUFFRixLQUFJLENBQUMsTUFBTSxHQUFHLFVBQVUsS0FBSyxFQUFFLEdBQUcsRUFBRTtBQUNuQyxNQUFJLE1BQU0sRUFBRSxJQUFJLENBQUM7O0FBRWpCLFFBQU0sR0FBRyxJQUFJLENBQUM7QUFDZCxNQUFJLEdBQUcsa0JBQUssVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDOztBQUU5QixNQUFJLENBQUMsVUFBVSxHQUFHLFdBQVcsQ0FBQyxZQUFXO0FBQ3hDLE1BQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7R0FDakIsRUFBRSxJQUFJLENBQUMsQ0FBQzs7QUFFVCxTQUFPLElBQUksQ0FBQztFQUNaLENBQUM7O0FBRUYsS0FBSSxDQUFDLFNBQVMsR0FBRyxVQUFVLFFBQVEsRUFBRSxHQUFHLEVBQUU7QUFDekMsTUFBSSxNQUFNLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDOztBQUUxQyxNQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUM7QUFDOUIsUUFBTSxHQUFHLENBQUMsQ0FBQztBQUNYLFVBQVEsR0FBRyxDQUFDLENBQUM7O0FBRWIsTUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLEVBQUU7QUFDMUMsUUFBSyxHQUFHLFVBQVUsS0FBSyxFQUFFO0FBQ3hCLFFBQUksQ0FBQyxFQUFFLE9BQU8sQ0FBQzs7QUFFZixRQUFJLElBQUksRUFBRTtBQUNULFNBQUksS0FBSyxHQUFHLFFBQVEsSUFBSyxJQUFJLEdBQUMsSUFBSyxFQUFFO0FBQ3BDLFdBQUssQ0FBQyxHQUFDLENBQUMsRUFBRSxPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUUsQ0FBQyxFQUFFO0FBQ2hELGNBQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksSUFBRSxLQUFLLEdBQUcsUUFBUSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztPQUNyRTs7QUFFRCxVQUFJLE1BQU0sS0FBSyxJQUFJLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQzs7QUFFaEMsWUFBTSxJQUFFLENBQUMsQ0FBQztBQUNWLGNBQVEsR0FBRyxLQUFLLENBQUM7TUFDakI7S0FDRDs7QUFFRCxRQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFO0FBQzlCLFdBQU0sQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUNyQztJQUNELENBQUM7O0FBRUYsU0FBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Ozs7QUFJMUIsUUFBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDOztBQUU5QixPQUFJLENBQUMsYUFBYSxHQUFHLDZCQUFXLE1BQU0sRUFBRSxDQUFDO0FBQ3pDLFNBQU0sQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUNyQzs7QUFFRCxNQUFJLEdBQUcsS0FBSyxLQUFLLEVBQUU7QUFDbEIsT0FBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7R0FDakMsTUFFSTtBQUNKLE9BQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0dBQ3BDOztBQUVELFNBQU8sSUFBSSxDQUFDO0VBQ1osQ0FBQzs7QUFFRixLQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsTUFBTSxFQUFFO0FBQzdCLE1BQUksTUFBTSxLQUFLLFFBQVEsRUFBRTtBQUN4QixnQkFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztHQUMvQixNQUVJO0FBQ0osZUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztHQUM3Qjs7QUFFRCxTQUFPLElBQUksQ0FBQztFQUNaLENBQUM7O0FBRUYsS0FBSSxDQUFDLEtBQUssR0FBRyxVQUFVLEtBQUssRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFO0FBQ2hELE1BQUksSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLEtBQUssQ0FBQzs7QUFFakUsTUFBSSxDQUFDLFdBQVcsRUFBRTtBQUNqQixVQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDekI7O0FBRUQsS0FBRyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDL0IsT0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDM0IsYUFBVyxHQUFHLEVBQUUsQ0FBQzs7QUFFakIsS0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxFQUFFO0FBQ3JDLE9BQUksTUFBTSxFQUFFLElBQUksQ0FBQzs7QUFFakIsU0FBTSxHQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FBSSxVQUFVLEdBQUcsYUFBYSxDQUFDOztBQUVqRSxjQUFXLENBQUMsSUFBSSxDQUFDO0FBQ2hCLFVBQU0sRUFBRSxNQUFNO0FBQ2QsUUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ25CLENBQUMsQ0FBQzs7QUFFSCxPQUFJLE1BQU0sS0FBSyxVQUFVLEVBQUU7QUFDMUIsUUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDckIsU0FBSyxHQUFHLGtCQUFLLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMvQixRQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQztJQUN6QjtHQUNELENBQUMsQ0FBQyxDQUFDOztBQUVKLFFBQU0sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEIsUUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFbEIsTUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLFVBQVUsT0FBTyxFQUFFO0FBQ2pDLE9BQUksTUFBTSxFQUFFLFlBQVksRUFBRSxhQUFhLENBQUM7O0FBRXhDLFNBQU0sR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMzQyxlQUFZLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUMsTUFBTSxFQUFFO0FBQ3BDLFVBQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNO0FBQzFDLGVBQVcsRUFBRSxJQUFJO0lBQ2pCLENBQUMsQ0FBQztBQUNILGdCQUFhLEdBQUcsQ0FBQyxDQUFDOztBQUVsQixPQUFJLElBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsS0FBSyxLQUFLLEVBQUU7QUFDOUUsV0FBTyxDQUFDLEVBQUUsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDckU7O0FBRUQsT0FBSSxJQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7O0FBRTlELGNBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxPQUFPLEVBQUU7OztBQUd0QyxpQkFBYSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUMzRixVQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxDQUFDLENBQUM7O0FBRUgsT0FBSSxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7O0FBRzVELE9BQUksYUFBYSxFQUFFO0FBQ2xCLFFBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDM0IsV0FBTyxNQUFNLENBQUM7SUFDZDs7QUFFRCxVQUFPLEtBQUssQ0FBQztHQUNiLENBQUM7O0FBRUYsTUFBSSxNQUFNLEVBQUU7QUFDWCxTQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7O0FBRXBFLE9BQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxVQUFVLE9BQU8sRUFBRTtBQUNqQyxRQUFJLE1BQU0sQ0FBQzs7QUFFWCxVQUFNLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7O0FBRTNDLFdBQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQzs7QUFFRixPQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsWUFBWTtBQUMxQixXQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDO0dBQ0Y7O0FBRUQsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDOztBQUVGLEtBQUksQ0FBQyx5QkFBeUIsR0FBRyxZQUFZO0FBQzVDLFNBQU8sSUFBSSxDQUFDO0VBQ1osQ0FBQzs7QUFFRixLQUFJLENBQUMsdUJBQXVCLEdBQUcsWUFBWTtBQUMxQyxNQUFJLEtBQUssQ0FBQzs7QUFFVixPQUFLLEdBQUcsa0JBQUssUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7O0FBRTNDLFNBQU8sQ0FBQyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDO0VBQy9CLENBQUM7O0FBRUYsS0FBSSxDQUFDLFNBQVMsR0FBRyxZQUFZO0FBQzVCLFNBQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUssSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7RUFDOUksQ0FBQzs7Ozs7Ozs7QUFRRixLQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxZQUFZO0FBQ3JDLE1BQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFLE9BQU8sS0FBSyxDQUFDOztBQUV2RSxNQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztBQUN2QixNQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDOztBQUUxQixTQUFPO0FBQ04saUJBQWMsRUFBRSxJQUFJO0dBQ3BCLENBQUM7RUFDRixDQUFDLENBQUM7Ozs7Ozs7Ozs7O0FBV0gsS0FBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsVUFBVSxNQUFNLEVBQUU7QUFDdkMsU0FBTztBQUNOLFFBQUssRUFBRSxNQUFNO0FBQ2IsaUJBQWMsRUFBRSxNQUFNLENBQUMsVUFBVTtHQUNqQyxDQUFDO0VBQ0YsQ0FBQyxDQUFDOzs7Ozs7Ozs7OztBQVdILEtBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLFVBQVUsTUFBTSxFQUFFO0FBQzNDLFNBQU87QUFDTixRQUFLLEVBQUUsTUFBTTtBQUNiLGlCQUFjLEVBQUUsTUFBTSxDQUFDLFVBQVU7R0FDakMsQ0FBQztFQUNGLENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7QUFXSCxLQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxVQUFVLE1BQU0sRUFBRTtBQUMxQyxTQUFPO0FBQ04sUUFBSyxFQUFFLE1BQU07QUFDYixpQkFBYyxFQUFFLE1BQU0sQ0FBQyxVQUFVO0dBQ2pDLENBQUM7RUFDRixDQUFDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMEJILEtBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLGNBQWMsQ0FBQyxDQUFDOzs7Ozs7Ozs7O0FBVTFDLEtBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBCN0IsS0FBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsUUFBUSxFQUFFO0FBQ2xDLFNBQU8sRUFBRSxpQkFBVSxPQUFPLEVBQUU7QUFDM0IsT0FBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztHQUNwQjtFQUNELENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEwQkgsS0FBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBCbkQsS0FBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBCckQsS0FBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxXQUFXLEVBQUU7QUFDMUMsU0FBTyxFQUFFLGlCQUFVLE9BQU8sRUFBRTtBQUMzQixPQUFJLE1BQU0sRUFBRSxPQUFPLENBQUM7O0FBRXBCLFNBQU0sR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMzQyxVQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDOztBQUUxQixVQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsTUFBTSxFQUFFLEtBQUssRUFBRTtBQUNuRSxRQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JCLENBQUMsQ0FBQyxDQUFDO0FBQ0osVUFBTyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsTUFBTSxFQUFFLEtBQUssRUFBRTtBQUN0RSxRQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hCLENBQUMsQ0FBQyxDQUFDO0dBQ0o7RUFDRCxDQUFDLENBQUM7Ozs7Ozs7Ozs7QUFVSCxLQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEwQnBDLEtBQUksQ0FBQyxLQUFLLENBQUMsdUJBQXVCLEVBQUUsY0FBYyxDQUFDLENBQUM7Ozs7Ozs7Ozs7QUFVcEQsS0FBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsY0FBYyxDQUFDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMEIxQyxLQUFJLENBQUMsS0FBSyxDQUFDLHVCQUF1QixFQUFFLFlBQVksRUFBRTtBQUNqRCxRQUFNLEVBQUUsZ0JBQVUsT0FBTyxFQUFFO0FBQzFCLE9BQUksQ0FBQyxTQUFTLENBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUUsQ0FBQztHQUNwRDtFQUNELENBQUMsQ0FBQzs7Ozs7Ozs7OztBQVVILEtBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQ3hDLEtBQUksQ0FBQyxLQUFLLENBQUMsc0JBQXNCLEVBQUUsYUFBYSxFQUFFO0FBQ2pELFNBQU8sRUFBRSxpQkFBVSxhQUFhLEVBQUUsTUFBTSxFQUFFO0FBQ3pDLE9BQUksS0FBSyxFQUFFLE1BQU0sQ0FBQzs7QUFFbEIsU0FBTSxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQ2pELFFBQUssR0FBSSxFQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUksYUFBYSxHQUFHLE1BQU0sQ0FBQzs7QUFFM0YsT0FBSSxLQUFLLEVBQUU7QUFDVixVQUFNLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxhQUFhLEdBQUMsS0FBSyxDQUFDLENBQUMsR0FBQyxpQkFBaUIsR0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9FO0dBQ0Q7RUFDRCxDQUFDLENBQUM7Ozs7Ozs7Ozs7QUFVSCxLQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxhQUFhLEVBQUU7QUFDeEMsU0FBTyxFQUFFLG1CQUFZO0FBQ3BCLE9BQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0dBQzlCO0VBQ0QsQ0FBQyxDQUFDOztBQUVILEtBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0NBRW5DLENBQUMsQ0FBQzs7cUJBRVksRUFBRSxNQUFNLEVBQU4sTUFBTSxFQUFFLHNCQUFzQixFQUF0QixzQkFBc0IsRUFBRSIsImZpbGUiOiIzOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQmFzZSBjbGFzcyBmb3IgYSBzY29wZSBhY3RpbmcgYXMgYW4gXCJlbnRpdHlcIiB3aXRoIFwic3RhdGVzXCIsIFwiYmVoYXZpb3JzXCIgYW5kIHRoZSBhYmlsaXR5IHRvIHJlc3BvbmQgKHJlc3BvbnNpYmlsaXRpZXMpIHRvIGJlaGF2aW9ycy5cbiAqXG4gKiBAbW9kdWxlXG4gKi9cbmltcG9ydCB1dGlsIGZyb20gJ3V0aWwnO1xuaW1wb3J0IEdsb2JhbFNjb3BlIGZyb20gJ3R5cGVzL0dsb2JhbFNjb3BlJztcbmltcG9ydCBDb2xsZWN0aW9uIGZyb20gJ3R5cGVzL0NvbGxlY3Rpb24nO1xuaW1wb3J0IHsgUG9pbnQsIFNpemUgfSBmcm9tICd0eXBlcy9EaW1lbnNpb25zJztcbmltcG9ydCBRdWV1ZSBmcm9tICd0eXBlcy9RdWV1ZSc7XG5cdFxuZnVuY3Rpb24gaW52b2tlUmVzcG9uc2liaWxpdGllcyAoX3Njb3BlLCBfZXZlbnQpIHtcblx0aWYgKF9zY29wZSAmJiBfc2NvcGUucmVzcG9uc2liaWxpdGllcyAmJiBfc2NvcGUuaXNNZW1iZXJTYWZlKCdyZXNwb25zaWJpbGl0aWVzJykpIHtcblx0XHRfc2NvcGUucmVzcG9uc2liaWxpdGllcy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVjb3JkKSB7XG5cdFx0XHRpZiAoX3JlY29yZC5uYW1lID09PSBfZXZlbnQubmFtZSkge1xuXG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKF9zY29wZS5pZCgpLCAncmVzcG9uZCcsIF9yZWNvcmQubmFtZSwgJ2Zyb20nLCBfZXZlbnQudGFyZ2V0U2NvcGUuaWQoKSk7XG5cdFx0XHRcdF9yZWNvcmQuYWJpbGl0eS5jYWxsKF9zY29wZSwgX2V2ZW50KTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxufVxuXG4vKipcbiAqIDxzcGFuIGNsYXNzPVwibm90ZSBpbXBvcnRhbnRcIj5OT1RFOiBUaGlzIGlzIE5PVCBhIGNvbnN0cnVjdG9yLiBVc2UgYEVudGl0eS5jcmVhdGUoKWAgdG8gZ2V0IGEgbmV3IGluc3RhbmNlLjwvc3Bhbj5cbiAqIEBjbGFzc2Rlc2MgQmFzZSBjbGFzcyBmb3IgYSBzY29wZSBhY3RpbmcgYXMgYW4gXCJlbnRpdHlcIiB3aXRoIFwic3RhdGVzXCIsIFwiYmVoYXZpb3JzXCIgYW5kIHRoZSBhYmlsaXR5IHRvIHJlc3BvbmQgKHJlc3BvbnNpYmlsaXRpZXMpIHRvIGJlaGF2aW9ycy4gRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdGhlc2UgdGVybXMgcmVhZCBbdGhpc117QGxpbmsgbW9kdWxlOnR5cGVzL0VudGl0eX0uXG4gKiA8c3R5bGU+XG4gKiAudGFnIHtcbiAqICAgcGFkZGluZzogMXB4IDRweDtcbiAqICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICpcbiAqICAgY29sb3I6ICNmZmY7XG4gKiAgIGJhY2tncm91bmQtY29sb3I6ICNhYWE7XG4gKiB9XG4gKlxuICogLnRhZy5iZWhhdmlvciB7XG4gKlx0IGJhY2tncm91bmQtY29sb3I6ICMwYmE7XG4gKiB9XG4gKlxuICogLnRhZy5zdGF0ZSB7XG4gKlx0IGJhY2tncm91bmQtY29sb3I6ICNiYTA7XG4gKiB9XG4gKlxuICogLm5vdGUge1xuICogICBib3JkZXI6IHNvbGlkIDFweDtcbiAqICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICogICBwYWRkaW5nOiAxcHggNHB4O1xuICogICBjb2xvcjogI2FhYTtcbiAqICAgYmFja2dyb3VuZC1jb2xvcjogI2VlZTtcbiAqIH1cbiAqIFxuICogLm5vdGUuaW1wb3J0YW50IHtcbiAqICAgY29sb3I6ICNiNTU7XG4gKiAgIGJhY2tncm91bmQtY29sb3I6ICNmZWU7XG4gKiB9XG4gKiA8L3N0eWxlPlxuICpcbiAqIEBjbGFzc1xuICogQHByb3Age21vZHVsZTp0eXBlcy9Db2xsZWN0aW9ufkNvbGxlY3Rpb259IHJlc3BvbnNpYmlsaXRpZXMgLSBBIGNvbGxlY3Rpb24gb2YgUmVzcG9uc2liaWxpdHlSZWNvcmRzIGZvciB0aGUgc2NvcGUuXG4gKiBAcHJvcCB7Ym9vbGVhbn0gaXNDb21wbGV0ZSAtIE1hcmtzIGEgc2NvcGUgYXMgXCJjb21wbGV0ZVwiIHZpYSB0aGUgW2Bjb21wbGV0ZSgpYF17QGxpbmsgbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjY29tcGxldGV9IGJlaGF2aW9yLlxuICogQGV4dGVuZHMgR2xvYmFsU2NvcGVcbiAqL1xudmFyIEVudGl0eSA9IEdsb2JhbFNjb3BlLmV4dGVuZChmdW5jdGlvbiAoKSB7XG5cblx0ZnVuY3Rpb24gcmVzb2x2ZVRhcmdldCAoX3RhcmdldCkge1xuXHRcdFxuXHRcdHN3aXRjaCAodHlwZW9mIF90YXJnZXQpIHtcblx0XHRcdGNhc2UgJ3N0cmluZyc6IHJldHVybiB0aGlzLmZpbmRPd24oX3RhcmdldCk7XG5cdFx0XHRjYXNlICdvYmplY3QnOlxuXHRcdFx0XHRpZiAoX3RhcmdldC5qcXVlcnkpIHJldHVybiBfdGFyZ2V0O1xuXHRcdFx0XHRpZiAoRW50aXR5LmlzUHJvdG90eXBlT2YoX3RhcmdldCkpIHJldHVybiBfdGFyZ2V0O1xuXHRcdFx0XHRpZiAoX3RhcmdldC5ub2RlVHlwZSA9PT0gZG9jdW1lbnQuRUxFTUVOVF9OT0RFKSByZXR1cm4gJChfdGFyZ2V0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdGZ1bmN0aW9uIFJlc3BvbnNpYmlsaXR5UmVjb3JkIChfbmFtZSwgX2FiaWxpdHkpIHtcblx0XHR0aGlzLm5hbWUgPSBfbmFtZTtcblx0XHR0aGlzLmFiaWxpdHkgPSBfYWJpbGl0eTtcblx0fVxuXG5cdGZ1bmN0aW9uIGRyYWdHcmVldGVyIChfZXZlbnQpIHtcblx0XHRzd2l0Y2ggKF9ldmVudC50eXBlKSB7XG5cdFx0XHRjYXNlICdkcmFnLXN0YXJ0Jzpcblx0XHRcdFx0dGhpcy5ncmFiKF9ldmVudC5zdGF0ZSk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdkcmFnLW1vdmUnOlxuXHRcdFx0XHR0aGlzLmRyYWdnaW5nKF9ldmVudC5zdGF0ZSk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdkcmFnLWVuZCc6XG5cdFx0XHRcdHRoaXMucmVsZWFzZShfZXZlbnQuc3RhdGUpO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBhdHRhY2hEcmFnRXZlbnRzICgpIHtcblx0XHRpZiAodGhpcy5kcmFnZ2FibGVzICYmIHRoaXMuaXNNZW1iZXJTYWZlKCdkcmFnZ2FibGVzJykgJiYgdGhpcy5kcmFnZ2FibGVzLmxlbmd0aCkge1xuXHRcdFx0dGhpcy5vbignZHJhZy1zdGFydCBkcmFnLW1vdmUgZHJhZy1lbmQnLCBkcmFnR3JlZXRlcik7XG5cdFx0fVxuXHR9XG5cblx0dGhpcy5iYXNlVHlwZSA9ICdUWVBFX0VOVElUWSc7XG5cdHRoaXMuU1RBVEUgPSB7XG5cdFx0UExBWUlORzogJ1BMQVlJTkcnLFxuXHRcdEJBQ0tHUk9VTkQ6ICdCQUNLR1JPVU5EJyxcblx0XHRWT0lDRV9PVkVSOiAnVk9JQ0UtT1ZFUicsXG5cdFx0U0ZYOiAnU0ZYJ1xuXHR9O1xuXG5cdHRoaXMudGltZW91dElEID0gbnVsbDtcblx0dGhpcy5pbnRlcnZhbElEID0gbnVsbDtcblx0dGhpcy5yZXNwb25zaWJpbGl0aWVzID0gbnVsbDtcblx0dGhpcy5pc0NvbXBsZXRlID0gZmFsc2U7XG5cdHRoaXMuc2hvdWxkSW5oZXJpdEFiaWxpdGllcyA9IHRydWU7XG5cdHRoaXMuZnJhbWVIYW5kbGVycyA9IG51bGw7XG5cdHRoaXMuZnJhbWVSYXRlID0gNjA7IC8vIDYwZnBzXG5cdHRoaXMuZHJhZ2dhYmxlcyA9IG51bGw7XG5cdHRoaXMucmVxdWlyZWRRdWV1ZSA9IG51bGw7XG5cblx0dGhpcy5oYW5kbGVQcm9wZXJ0eShmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5zaXplID0gZnVuY3Rpb24gKF9ub2RlLCBfbmFtZSwgX3ZhbHVlLCBfcHJvcGVydHkpIHtcblx0XHRcdHZhciBzaXplO1xuXG5cdFx0XHRpZiAodGhpcy5pcyhfbm9kZSkpIHtcblx0XHRcdFx0c2l6ZSA9IF92YWx1ZS5zcGxpdCgvXFxzKlt4LF1cXHMqLyk7XG5cdFx0XHRcdHRoaXMuY3NzKHtcblx0XHRcdFx0XHR3aWR0aDogc2l6ZVswXSxcblx0XHRcdFx0XHRoZWlnaHQ6IHNpemVbMV0gfHwgc2l6ZVswXVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dGhpcy5wb3NpdGlvbiA9IGZ1bmN0aW9uIChfbm9kZSwgX25hbWUsIF92YWx1ZSwgX3Byb3BlcnR5KSB7XG5cdFx0XHR2YXIgc2l6ZTtcblxuXHRcdFx0aWYgKHRoaXMuaXMoX25vZGUpKSB7XG5cdFx0XHRcdHNpemUgPSBfdmFsdWUuc3BsaXQoL1xccypbeCxdXFxzKi8pO1xuXHRcdFx0XHR0aGlzLmNzcyh7XG5cdFx0XHRcdFx0dG9wOiBzaXplWzFdIHx8IHNpemVbMF0sXG5cdFx0XHRcdFx0bGVmdDogc2l6ZVswXVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dGhpcy5kcmFnZ2FibGUgPSBmdW5jdGlvbiAoX25vZGUsIF9uYW1lLCBfdmFsdWUsIF9wcm9wZXJ0eSkge1xuXHRcdFx0aWYgKCF0aGlzLmhhc093blByb3BlcnR5KCdkcmFnZ2FibGVzJykpIHtcblx0XHRcdFx0dGhpcy5kcmFnZ2FibGVzID0gJCgpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmRyYWdnYWJsZXMucHVzaChfbm9kZSk7XG5cdFx0fTtcblx0fSk7XG5cblx0dGhpcy5fX2luaXQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5wcm90bygpXG5cdFx0YXR0YWNoRHJhZ0V2ZW50cy5jYWxsKHRoaXMpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdHRoaXMuc2l6ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgc2l6ZTtcblxuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRzaXplID0gU2l6ZS5jcmVhdGUoYXJndW1lbnRzKTtcblx0XHRcdHRoaXMuY3NzKHNpemUpO1xuXHRcdFx0cmV0dXJuIHNpemU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFNpemUuY3JlYXRlKCkuc2V0KHRoaXMud2lkdGgoKSwgdGhpcy5oZWlnaHQoKSk7XG5cdH07XG5cblx0dGhpcy5wcm9wYWdhdGVCZWhhdmlvciA9IGZ1bmN0aW9uIChfZXZlbnQpIHtcblx0XHR2YXIgaWRzO1xuXG5cdFx0aWRzID0gW107XG5cblx0XHR0aGlzLmZpbmRPd24oJy5wbC1zY29wZScpLmVhY2goZnVuY3Rpb24gKF9pbmRleCwgX25vZGUpIHtcblx0XHRcdHZhciAkbm9kZSA9ICQoX25vZGUpOyBcblx0XHRcdGlkcy5wdXNoKCRub2RlLmlkKCkgfHwgJG5vZGUuYWRkcmVzcygpKTtcblx0XHR9KTtcblxuXHRcdGlmICh0aGlzLmhhc093blByb3BlcnR5KCdlbnRpdGllcycpICYmIHRoaXMuZW50aXRpZXMubGVuZ3RoKSB7XG5cdFx0XHQvLyBjb25zb2xlLmxvZyh0aGlzLmlkKCksICdwcm9wYWdhdGUnLCBfZXZlbnQubmFtZSwgJ3RvJywgdGhpcy5lbnRpdGllcy5sZW5ndGgsICdub2RlcycsIGlkcyk7XG5cblx0XHRcdHRoaXMuZW50aXRpZXMuZm9yRWFjaChmdW5jdGlvbiAoX3Njb3BlKSB7XG5cdFx0XHRcdGludm9rZVJlc3BvbnNpYmlsaXRpZXMoX3Njb3BlLCBfZXZlbnQpO1xuXHRcdFx0XHRfc2NvcGUucHJvcGFnYXRlQmVoYXZpb3IoX2V2ZW50KTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdHRoaXMucmVxdWlyZSA9IGZ1bmN0aW9uIChfZW50aXR5KSB7XG5cdFx0aWYgKCF0aGlzLmhhc093blByb3BlcnR5KCdyZXF1aXJlZFF1ZXVlJykpIHtcblx0XHRcdHRoaXMucmVxdWlyZWRRdWV1ZSA9IFF1ZXVlLmNyZWF0ZSgpO1xuXHRcdFx0dGhpcy5yZXF1aXJlZFF1ZXVlLm9uKCdjb21wbGV0ZScsIHRoaXMuYmluZChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHRoaXMubG9nKCdlbnRpdHkgY29tcGxldGUnKTtcblx0XHRcdFx0dGhpcy5jb21wbGV0ZSgpO1xuXHRcdFx0fSkpO1xuXG5cdFx0XHR0aGlzLnJlc3BvbmQoJ2NvbXBsZXRlJywgZnVuY3Rpb24gKF9ldmVudCkge1xuXHRcdFx0XHRpZiAoIXRoaXMuaGFzKF9ldmVudC50YXJnZXQpKSByZXR1cm47XG5cdFx0XHRcdGlmIChfZXZlbnQudGFyZ2V0U2NvcGUgPT09IHRoaXMpIHJldHVybjtcblxuXHRcdFx0XHR0aGlzLnJlcXVpcmVkUXVldWUucmVhZHkoX2V2ZW50LmJlaGF2aW9yVGFyZ2V0KTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHRoaXMucmVxdWlyZWRRdWV1ZS5hZGQoX2VudGl0eSk7XG5cdFx0dGhpcy5nYXRlKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHR0aGlzLmJlaGF2aW9yID0gZnVuY3Rpb24gKF9uYW1lLCBfYmVoYXZpb3IpIHtcblx0XHRfYmVoYXZpb3IubWV0aG9kID0gdGhpc1tfbmFtZV0gPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgYmVoYXZpb3JFdmVudCwgcmVzdWx0O1xuXG5cdFx0XHRiZWhhdmlvckV2ZW50ID0ge1xuXHRcdFx0XHRuYW1lOiBfbmFtZSxcblx0XHRcdFx0bWVzc2FnZTogJycsXG5cdFx0XHRcdHRhcmdldFNjb3BlOiB0aGlzLFxuXHRcdFx0XHRiZWhhdmlvclRhcmdldDogdGhpc1xuXHRcdFx0fTtcblxuXHRcdFx0cmVzdWx0ID0gX2JlaGF2aW9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cblx0XHRcdGlmICh0eXBlb2YgcmVzdWx0ID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRiZWhhdmlvckV2ZW50ID0gdXRpbC5taXhpbihiZWhhdmlvckV2ZW50LCByZXN1bHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAocmVzdWx0ICE9PSBmYWxzZSkge1xuXHRcdFx0XHR0aGlzLnRyaWdnZXIoJC5FdmVudCgnYmVoYXZpb3InLCBiZWhhdmlvckV2ZW50KSk7XHRcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdHRoaXMucmVzcG9uZCA9IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgbmFtZSwgYWJpbGl0eSwgcGFyZW50U2NvcGUsIGFiaWxpdGllcywgcHJvdG9BYmlsaXRpZXM7XG5cblx0XHRpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoJ3Jlc3BvbnNpYmlsaXRpZXMnKSkge1xuXHRcdFx0YWJpbGl0aWVzID0gQ29sbGVjdGlvbi5jcmVhdGUoKTtcblx0XHRcdHByb3RvQWJpbGl0aWVzID0gdGhpcy5wcm92aWRlQWJsaWxpdHlQb3RvdHlwZSgpO1xuXG5cdFx0XHRpZiAodGhpcy5zaG91bGRJbmhlcml0QWJpbGl0aWVzICYmIChwcm90b0FiaWxpdGllcyAmJiBwcm90b0FiaWxpdGllcy5yZXNwb25zaWJpbGl0aWVzKSkge1xuXHRcdFx0XHRhYmlsaXRpZXMucHVzaC5hcHBseShhYmlsaXRpZXMsIHByb3RvQWJpbGl0aWVzLnJlc3BvbnNpYmlsaXRpZXMpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnJlc3BvbnNpYmlsaXRpZXMgPSBhYmlsaXRpZXM7XG5cdFx0fVxuXG5cdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcblx0XHRcdHN3aXRjaCAodHlwZW9mIGFyZ3VtZW50c1swXSkge1xuXHRcdFx0XHRjYXNlICdzdHJpbmcnOiBuYW1lID0gYXJndW1lbnRzWzBdOyBicmVhaztcblxuXHRcdFx0XHRjYXNlICdmdW5jdGlvbic6XG5cdFx0XHRcdGNhc2UgJ29iamVjdCc6IGFiaWxpdHkgPSBhcmd1bWVudHNbMF07IGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGVsc2Uge1xuXHRcdFx0bmFtZSA9IGFyZ3VtZW50c1swXTtcblx0XHRcdGFiaWxpdHkgPSBhcmd1bWVudHNbMV07XG5cdFx0fVxuXG5cdFx0c3dpdGNoICh0eXBlb2YgYWJpbGl0eSkge1xuXHRcdFx0Y2FzZSAnb2JqZWN0Jzpcblx0XHRcdFx0Zm9yIChuYW1lIGluIGFiaWxpdHkpIHtcblx0XHRcdFx0XHRpZiAoIWFiaWxpdHkuaGFzT3duUHJvcGVydHkobmFtZSkpIGNvbnRpbnVlO1xuXG5cdFx0XHRcdFx0dGhpcy5yZXNwb25kKG5hbWUsIGFiaWxpdHlbbmFtZV0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdmdW5jdGlvbic6XG5cdFx0XHRcdHRoaXMucmVzcG9uc2liaWxpdGllcy5hZGQobmV3IFJlc3BvbnNpYmlsaXR5UmVjb3JkKG5hbWUsIGFiaWxpdHkpKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0dGhpcy5kZWxheSA9IGZ1bmN0aW9uIChfdGltZSwgX2NiKSB7XG5cdFx0dmFyIHNjcmVlbiwgdGltZTtcblxuXHRcdHNjcmVlbiA9IHRoaXM7XG5cdFx0dGltZSA9IHV0aWwudG9NaWxsaXNlYyhfdGltZSk7XG5cblx0XHR0aGlzLnRpbWVvdXRJRCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRfY2IuY2FsbChzY3JlZW4pO1xuXHRcdH0sIHRpbWUpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0dGhpcy5yZXBlYXQgPSBmdW5jdGlvbiAoX3RpbWUsIF9jYikge1xuXHRcdHZhciBzY3JlZW4sIHRpbWU7XG5cblx0XHRzY3JlZW4gPSB0aGlzO1xuXHRcdHRpbWUgPSB1dGlsLnRvTWlsbGlzZWMoX3RpbWUpO1xuXG5cdFx0dGhpcy5pbnRlcnZhbElEID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG5cdFx0XHRfY2IuY2FsbChzY3JlZW4pO1xuXHRcdH0sIHRpbWUpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0dGhpcy5lYWNoRnJhbWUgPSBmdW5jdGlvbiAoX2hhbmRsZXIsIF9vbikge1xuXHRcdHZhciBiaW5kZXIsIGZyYW1lLCBsYXN0VGltZSwgcmF0ZSwgZnJhbWVzO1xuXG5cdFx0cmF0ZSA9IHRoaXMuZnJhbWVSYXRlIHx8IDEwMDA7XG5cdFx0ZnJhbWVzID0gMDtcblx0XHRsYXN0VGltZSA9IDA7XG5cblx0XHRpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoJ2ZyYW1lSGFuZGxlcnMnKSkge1xuXHRcdFx0ZnJhbWUgPSBmdW5jdGlvbiAoX3RpbWUpIHtcblx0XHRcdFx0dmFyIGksIGhhbmRsZXI7XG5cblx0XHRcdFx0aWYgKHJhdGUpIHtcblx0XHRcdFx0XHRpZiAoX3RpbWUgLSBsYXN0VGltZSA+PSAoMTAwMC9yYXRlKSkge1xuXHRcdFx0XHRcdFx0Zm9yIChpPTA7IGhhbmRsZXIgPSB0aGlzLmZyYW1lSGFuZGxlcnNbaV07IGkrPTEpIHtcblx0XHRcdFx0XHRcdFx0aGFuZGxlci5jYWxsKHRoaXMsIF90aW1lLCBNYXRoLnJvdW5kKDEwMDAvKF90aW1lIC0gbGFzdFRpbWUpKSwgcmF0ZSk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmIChmcmFtZXMgPT09IHJhdGUpIGZyYW1lcyA9IDA7XG5cblx0XHRcdFx0XHRcdGZyYW1lcys9MTtcblx0XHRcdFx0XHRcdGxhc3RUaW1lID0gX3RpbWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHRoaXMuZnJhbWVIYW5kbGVycy5sZW5ndGgpIHtcblx0XHRcdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGJpbmRlcik7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRcdGJpbmRlciA9IHRoaXMuYmluZChmcmFtZSk7XG5cblx0XHRcdC8vIGFsbG93cyBtZXRob2RzIHBhc3NlZCBhcyBfaGFuZGxlcidzIHRvXG5cdFx0XHQvLyBiZSBhYmxlIHRvIHRyYWNlIGJhY2sgZm9yIHByb3RvKCkgY2FsbGJhY2tzLlxuXHRcdFx0ZnJhbWUubWV0aG9kID0gdGhpcy5lYWNoRnJhbWU7XG5cblx0XHRcdHRoaXMuZnJhbWVIYW5kbGVycyA9IENvbGxlY3Rpb24uY3JlYXRlKCk7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGJpbmRlcik7XG5cdFx0fVxuXG5cdFx0aWYgKF9vbiAhPT0gZmFsc2UpIHtcblx0XHRcdHRoaXMuZnJhbWVIYW5kbGVycy5hZGQoX2hhbmRsZXIpO1xuXHRcdH1cblxuXHRcdGVsc2Uge1xuXHRcdFx0dGhpcy5mcmFtZUhhbmRsZXJzLnJlbW92ZShfaGFuZGxlcik7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0dGhpcy5raWxsID0gZnVuY3Rpb24gKF90aW1lcikge1xuXHRcdGlmIChfdGltZXIgPT09ICdyZXBlYXQnKSB7XG5cdFx0XHRjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWxJRCk7XG5cdFx0fVxuXG5cdFx0ZWxzZSB7XG5cdFx0XHRjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0SUQpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdHRoaXMuc3RhdGUgPSBmdW5jdGlvbiAoX2ZsYWcsIF9kZWZpbml0aW9uLCBfaW1wKSB7XG5cdFx0dmFyIGZsYWcsIHRlc3Rlciwgc2V0dGVyLCBnZXR0ZXIsIFNUQVRFLCBkZWYsIG9wcGVyYXRpb25zLCBuYW1lcztcblxuXHRcdGlmICghX2RlZmluaXRpb24pIHtcblx0XHRcdHJldHVybiB0aGlzLnByb3RvKF9mbGFnKTtcblx0XHR9XG5cblx0XHRkZWYgPSBfZGVmaW5pdGlvbi5zcGxpdCgvXFxzKy8pO1xuXHRcdG5hbWVzID0gX2ZsYWcuc3BsaXQoL1xccysvKTtcblx0XHRvcHBlcmF0aW9ucyA9IFtdO1xuXG5cdFx0ZGVmLmZvckVhY2godGhpcy5iaW5kKGZ1bmN0aW9uIChfb3BwKSB7XG5cdFx0XHR2YXIgbWV0aG9kLCBmbGFnO1xuXG5cdFx0XHRtZXRob2QgPSAoX29wcC5zbGljZSgwLCAxKSA9PT0gJysnKSA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnO1xuXG5cdFx0XHRvcHBlcmF0aW9ucy5wdXNoKHtcblx0XHRcdFx0bWV0aG9kOiBtZXRob2QsXG5cdFx0XHRcdGZsYWc6IF9vcHAuc2xpY2UoMSlcblx0XHRcdH0pO1xuXG5cdFx0XHRpZiAobWV0aG9kID09PSAnYWRkQ2xhc3MnKSB7XG5cdFx0XHRcdGZsYWcgPSBfb3BwLnNsaWNlKDEpO1xuXHRcdFx0XHRTVEFURSA9IHV0aWwudHJhbnNmb3JtSWQoZmxhZyk7XG5cdFx0XHRcdHRoaXMuU1RBVEVbU1RBVEVdID0gZmxhZztcblx0XHRcdH1cblx0XHR9KSk7XG5cblx0XHRzZXR0ZXIgPSBuYW1lc1swXTtcblx0XHR0ZXN0ZXIgPSBuYW1lc1sxXTtcblxuXHRcdHRoaXNbc2V0dGVyXSA9IGZ1bmN0aW9uIChfdGFyZ2V0KSB7XG5cdFx0XHR2YXIgdGFyZ2V0LCB1aVN0YXRlRXZlbnQsIG9wcHNQZXJmb3JtZWQ7XG5cblx0XHRcdHRhcmdldCA9IHJlc29sdmVUYXJnZXQuY2FsbCh0aGlzLCBfdGFyZ2V0KTtcblx0XHRcdHVpU3RhdGVFdmVudCA9ICQuRXZlbnQoJ3VpLScrc2V0dGVyLCB7XG5cdFx0XHRcdHRhcmdldDogdGFyZ2V0LmpxdWVyeSA/IHRhcmdldFswXSA6IHRhcmdldCxcblx0XHRcdFx0dGFyZ2V0U2NvcGU6IHRoaXNcblx0XHRcdH0pO1xuXHRcdFx0b3Bwc1BlcmZvcm1lZCA9IDA7XG5cblx0XHRcdGlmIChfaW1wICYmIF9pbXAuc2hvdWxkU2V0ICYmIF9pbXAuc2hvdWxkU2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgPT09IGZhbHNlKSB7XG5cdFx0XHRcdHJldHVybiAhIShfaW1wICYmIF9pbXAubm90U2V0KSAmJiBfaW1wLm5vdFNldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoX2ltcCAmJiBfaW1wLndpbGxTZXQpIF9pbXAud2lsbFNldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG5cdFx0XHRvcHBlcmF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVjb3JkKSB7XG5cdFx0XHRcdC8vIElmIHdlIGFyZSBhZGRpbmcgb3IgcmVtb3ZpbmcgYSBjbGFzcywgdGVzdCBpZiB0aGUgdGFyZ2V0IGFscmVhZHkgaGFzL3JlbW92ZWQgaXQuXG5cdFx0XHRcdC8vIElmIHNvLCB0aGVuIGJ1bXAgXCJvcHBzUGVyZm9ybWVkXCIuXG5cdFx0XHRcdG9wcHNQZXJmb3JtZWQgKz0gTnVtYmVyKHRhcmdldC5oYXNDbGFzcyhfcmVjb3JkLmZsYWcpID09PSAhfl9yZWNvcmQubWV0aG9kLmluZGV4T2YoJ2FkZCcpKTtcblx0XHRcdFx0dGFyZ2V0W19yZWNvcmQubWV0aG9kXShfcmVjb3JkLmZsYWcpO1xuXHRcdFx0fSk7XG5cblx0XHRcdGlmIChfaW1wICYmIF9pbXAuZGlkU2V0KSBfaW1wLmRpZFNldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG5cblx0XHRcdGlmIChvcHBzUGVyZm9ybWVkKSB7XG5cdFx0XHRcdHRoaXMudHJpZ2dlcih1aVN0YXRlRXZlbnQpO1xuXHRcdFx0XHRyZXR1cm4gdGFyZ2V0O1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHRcdGlmICh0ZXN0ZXIpIHtcblx0XHRcdGdldHRlciA9ICdnZXQnICsgdGVzdGVyLnNsaWNlKDAsIDEpLnRvVXBwZXJDYXNlKCkgKyB0ZXN0ZXIuc2xpY2UoMSk7XG5cblx0XHRcdHRoaXNbdGVzdGVyXSA9IGZ1bmN0aW9uIChfdGFyZ2V0KSB7XG5cdFx0XHRcdHZhciB0YXJnZXQ7XG5cblx0XHRcdFx0dGFyZ2V0ID0gcmVzb2x2ZVRhcmdldC5jYWxsKHRoaXMsIF90YXJnZXQpO1xuXG5cdFx0XHRcdHJldHVybiB0YXJnZXQuaGFzQ2xhc3ModGhpcy5TVEFURVtTVEFURV0pO1xuXHRcdFx0fTtcblxuXHRcdFx0dGhpc1tnZXR0ZXJdID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5maW5kT3duKCcuJyt0aGlzLlNUQVRFW1NUQVRFXSk7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdHRoaXMucHJvdmlkZUJlaGF2aW9yRXZlbnRTY29wZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHR0aGlzLnByb3ZpZGVBYmxpbGl0eVBvdG90eXBlID0gZnVuY3Rpb24gKCkge1xuXHRcdHZhciBvd25lcjtcblxuXHRcdG93bmVyID0gdXRpbC5nZXRPd25lcih0aGlzLCB0aGlzLmJhc2VUeXBlKTtcblxuXHRcdHJldHVybiAhIW93bmVyICYmIG93bmVyLm9iamVjdDtcblx0fTtcblxuXHR0aGlzLmNvbXBsZXRlZCA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5nYW1lLmRlbW9Nb2RlIHx8ICh0aGlzLmhhc093blByb3BlcnR5KCdpc0NvbXBsZXRlJykgJiYgdGhpcy5pc0NvbXBsZXRlKSB8fCAhdGhpcy5yZXF1aXJlZFF1ZXVlIHx8IHRoaXMucmVxdWlyZWRRdWV1ZS5sZW5ndGggPT09IDA7XG5cdH07XG5cblx0LyoqXG5cdCAqIDxzcGFuIGNsYXNzPVwidGFnIGJlaGF2aW9yXCI+QmVoYXZpb3I8L3NwYW4+XG5cdCAqIE1hcmtzIGEgc2NvcGUgXCJjb21wbGV0ZVwiIGJ5IHNldGluZyBgaXNDb21wbGV0ZWAgdG8gYHRydWVgIGFuZCBhZGQgdGhlIGBDT01QTEVURWAgc3RhdGUgZmxhZy5cblx0ICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I2NvbXBsZXRlXG5cdCAqIEByZXR1cm5zIHtvYmplY3R9IEEgbWVzc2FnZXMgb2JqZWN0IHdpdGggYGJlaGF2aW9yVGFyZ2V0YCBzZXQgdG8gdGhlIHNjb3BlIHBlcmZvcm1pbmcgdGhlIGJlaGF2aW9yLlxuXHQgKi9cblx0dGhpcy5iZWhhdmlvcignY29tcGxldGUnLCBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHRoaXMuaGFzT3duUHJvcGVydHkoJ2lzQ29tcGxldGUnKSAmJiB0aGlzLmlzQ29tcGxldGUpIHJldHVybiBmYWxzZTtcblxuXHRcdHRoaXMuaXNDb21wbGV0ZSA9IHRydWU7XG5cdFx0dGhpcy5hZGRDbGFzcygnQ09NUExFVEUnKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRiZWhhdmlvclRhcmdldDogdGhpc1xuXHRcdH07XG5cdH0pO1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBiZWhhdmlvclwiPkJlaGF2aW9yPC9zcGFuPlxuXHQgKiBSZXBvcnRzIGEgZHJnZ2FibGUgaGFzIGJlZW4gZ3JhYmJlZCBmb3IgZHJhZ2dpbmcuXG5cdCAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSNncmFiXG5cdCAqIEBhcmcge29iamVjdH0gX3N0YXRlIC0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHN0YXRlIG9mIGEgZHJhZ2dhYmxlLlxuXHQgKiBAcmV0dXJucyB7b2JqZWN0fSBBIG1lc3NhZ2VzIG9iamVjdCB3aXRoIGBiZWhhdmlvclRhcmdldGAgc2V0IHRvIHRoZSBzY29wZSBwZXJmb3JtaW5nIHRoZSBiZWhhdmlvci5cblx0ICpcblx0ICogQHNlZSBtb2R1bGU6cGxheX5wbC5nYW1lLm1hbmFnZXIuZHJhZ2dhYmxlIGZvciBtb3JlIGluZm8gb24gZHJhZ2dhYmxlIHN0YXRlLlxuXHQgKi9cblx0dGhpcy5iZWhhdmlvcignZ3JhYicsIGZ1bmN0aW9uIChfc3RhdGUpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c3RhdGU6IF9zdGF0ZSxcblx0XHRcdGJlaGF2aW9yVGFyZ2V0OiBfc3RhdGUuJGRyYWdnYWJsZVxuXHRcdH07XG5cdH0pO1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBiZWhhdmlvclwiPkJlaGF2aW9yPC9zcGFuPlxuXHQgKiBSZXBvcnRzIGEgZHJhZ2dhYmxlIGFzIGJlaW5nIGRyYWdnZWQuXG5cdCAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSNkcmFnZ2luZ1xuXHQgKiBAYXJnIHtvYmplY3R9IF9zdGF0ZSAtIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBzdGF0ZSBvZiBhIGRyYWdnYWJsZS5cblx0ICogQHJldHVybnMge29iamVjdH0gQSBtZXNzYWdlcyBvYmplY3Qgd2l0aCBgYmVoYXZpb3JUYXJnZXRgIHNldCB0byB0aGUgc2NvcGUgcGVyZm9ybWluZyB0aGUgYmVoYXZpb3IuXG5cdCAqXG5cdCAqIEBzZWUgbW9kdWxlOnBsYXl+cGwuZ2FtZS5tYW5hZ2VyLmRyYWdnYWJsZSBmb3IgbW9yZSBpbmZvIG9uIGRyYWdnYWJsZSBzdGF0ZS5cblx0ICovXG5cdHRoaXMuYmVoYXZpb3IoJ2RyYWdnaW5nJywgZnVuY3Rpb24gKF9zdGF0ZSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzdGF0ZTogX3N0YXRlLFxuXHRcdFx0YmVoYXZpb3JUYXJnZXQ6IF9zdGF0ZS4kZHJhZ2dhYmxlXG5cdFx0fTtcblx0fSk7XG5cblx0LyoqXG5cdCAqIDxzcGFuIGNsYXNzPVwidGFnIGJlaGF2aW9yXCI+QmVoYXZpb3I8L3NwYW4+XG5cdCAqIFJlcG9ydHMgYSBkcmdnYWJsZSBhcyByZWxlYXNlZCBvciBkcm9wZWQuXG5cdCAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSNyZWxlYXNlXG5cdCAqIEBhcmcge29iamVjdH0gX3N0YXRlIC0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHN0YXRlIG9mIGEgZHJhZ2dhYmxlLlxuXHQgKiBAcmV0dXJucyB7b2JqZWN0fSBBIG1lc3NhZ2VzIG9iamVjdCB3aXRoIGBiZWhhdmlvclRhcmdldGAgc2V0IHRvIHRoZSBzY29wZSBwZXJmb3JtaW5nIHRoZSBiZWhhdmlvci5cblx0ICpcblx0ICogQHNlZSBtb2R1bGU6cGxheX5wbC5nYW1lLm1hbmFnZXIuZHJhZ2dhYmxlIGZvciBtb3JlIGluZm8gb24gZHJhZ2dhYmxlIHN0YXRlLlxuXHQgKi9cblx0dGhpcy5iZWhhdmlvcigncmVsZWFzZScsIGZ1bmN0aW9uIChfc3RhdGUpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c3RhdGU6IF9zdGF0ZSxcblx0XHRcdGJlaGF2aW9yVGFyZ2V0OiBfc3RhdGUuJGRyYWdnYWJsZVxuXHRcdH07XG5cdH0pO1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBBZGRzIGBPUEVOYCBhbmQgcmVtb3ZlcyB0aGUgYExFQVZFYCBDU1MgY2xhc3MgbmFtZXMgZnJvbSB0aGUgc2NvcGUgb3IgdGhlIGdpdmVuIGBfdGFyZ2V0YC5cblx0ICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I29wZW5cblx0ICogQGZpcmVzIEVudGl0eSN1aS1vcGVuXG5cdCAqIEBhcmcge3N0cmluZ3xTY29wZXxqUXVlcnl8SFRNTEVsZW1lbnR9IF90YXJnZXQgLSBBIENTUyBzZWxlY3RvciwgRE9NIG5vZGUgcmVmZXJlbmNlIG9yIGNvbnRleHQgb2JqZWN0IChpLmUuIFNjb3BlL2pRdWVyeSkuXG5cdCAqIEByZXR1cm5zIGB0aGlzYFxuXHQgKi9cblxuXHQvKipcblx0ICogPHNwYW4gY2xhc3M9XCJ0YWcgc3RhdGVcIj5TdGF0ZTwvc3Bhbj5cblx0ICogVGVzdHMgaWYgdGhlIHNjb3BlIG9yIGdpdmVuIGBfdGFyZ2V0YCBoYXMgdGhlIGBPUEVOYCBjbGFzcyBuYW1lLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjb3BlbmVkXG5cdCAqIEBhcmcge3N0cmluZ3xTY29wZXxqUXVlcnl8SFRNTEVsZW1lbnR9IF90YXJnZXQgLSBBIENTUyBzZWxlY3RvciwgRE9NIG5vZGUgcmVmZXJlbmNlIG9yIGNvbnRleHQgb2JqZWN0IChpLmUuIFNjb3BlL2pRdWVyeSkuXG5cdCAqIEByZXR1cm5zIHtCb29sZWFufSBPcGVuJ25lc3MuXG5cdCAqL1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBQcm92aWRlcyB0aGUgZWxlbWVudHMgd2l0aCB0aGUgYE9QRU5gIGNsYXNzIG5hbWUuXG5cdCAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSNnZXRPcGVuZWRcblx0ICogQHJldHVybnMge2pRdWVyeX0galF1ZXJ5IGNvbGxlY3Rpb24gb2YgbWF0Y2hlZCBub2Rlcy5cblx0ICogQHRvZG8gUmV0dXJuIHNjb3BlIGlmIGF2YWlsYWJsZS5cblx0ICovXG5cdHRoaXMuc3RhdGUoJ29wZW4gb3BlbmVkJywgJytPUEVOIC1MRUFWRScpO1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBSZW1vdmVzIHRoZSBgT1BFTmAgQ1NTIGNsYXNzIG5hbWUgZnJvbSB0aGUgc2NvcGUgb3IgdGhlIGdpdmVuIGBfdGFyZ2V0YC5cblx0ICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I2Nsb3NlXG5cdCAqIEBmaXJlcyBFbnRpdHkjdWktY2xvc2Vcblx0ICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cblx0ICogQHJldHVybnMgYHRoaXNgXG5cdCAqL1xuXHR0aGlzLnN0YXRlKCdjbG9zZScsICctT1BFTicpO1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBBZGRzIHRoZSBgTEVBVkVgIENTUyBjbGFzcyBuYW1lIHRvIHRoZSBzY29wZSBvciB0aGUgZ2l2ZW4gYF90YXJnZXRgLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjbGVhdmVcblx0ICogQGZpcmVzIEVudGl0eSN1aS1sZWF2ZVxuXHQgKiBAYXJnIHtzdHJpbmd8U2NvcGV8alF1ZXJ5fEhUTUxFbGVtZW50fSBfdGFyZ2V0IC0gQSBDU1Mgc2VsZWN0b3IsIERPTSBub2RlIHJlZmVyZW5jZSBvciBjb250ZXh0IG9iamVjdCAoaS5lLiBTY29wZS9qUXVlcnkpLlxuXHQgKiBAcmV0dXJucyBgdGhpc2Bcblx0ICovXG5cblx0LyoqXG5cdCAqIDxzcGFuIGNsYXNzPVwidGFnIHN0YXRlXCI+U3RhdGU8L3NwYW4+XG5cdCAqIFRlc3RzIGlmIHRoZSBzY29wZSBvciBnaXZlbiBgX3RhcmdldGAgaGFzIHRoZSBgTEVBVkVgIGNsYXNzIG5hbWUuXG5cdCAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSNsZWZ0XG5cdCAqIEBhcmcge3N0cmluZ3xTY29wZXxqUXVlcnl8SFRNTEVsZW1lbnR9IF90YXJnZXQgLSBBIENTUyBzZWxlY3RvciwgRE9NIG5vZGUgcmVmZXJlbmNlIG9yIGNvbnRleHQgb2JqZWN0IChpLmUuIFNjb3BlL2pRdWVyeSkuXG5cdCAqIEByZXR1cm5zIHtCb29sZWFufSBMZWF2ZSduZXNzLlxuXHQgKi9cblxuXHQvKipcblx0ICogPHNwYW4gY2xhc3M9XCJ0YWcgc3RhdGVcIj5TdGF0ZTwvc3Bhbj5cblx0ICogUHJvdmlkZXMgdGhlIGVsZW1lbnRzIHdpdGggdGhlIGBMRUFWRWAgY2xhc3MgbmFtZS5cblx0ICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I2dldExlZnRcblx0ICogQHJldHVybnMge2pRdWVyeX0galF1ZXJ5IGNvbGxlY3Rpb24gb2YgbWF0Y2hlZCBub2Rlcy5cblx0ICogQHRvZG8gUmV0dXJuIHNjb3BlIGlmIGF2YWlsYWJsZS5cblx0ICovXG5cdHRoaXMuc3RhdGUoJ2xlYXZlIGxlZnQnLCAnK0xFQVZFJywge1xuXHRcdHdpbGxTZXQ6IGZ1bmN0aW9uIChfdGFyZ2V0KSB7XG5cdFx0XHR0aGlzLmNsb3NlKF90YXJnZXQpO1xuXHRcdH1cblx0fSk7XG5cblx0LyoqXG5cdCAqIDxzcGFuIGNsYXNzPVwidGFnIHN0YXRlXCI+U3RhdGU8L3NwYW4+XG5cdCAqIEFkZHMgYEVOQUJMRURgIGFuZCByZW1vdmVzIHRoZSBgRElTQUJMRURgIENTUyBjbGFzcyBuYW1lcyBmcm9tIHRoZSBzY29wZSBvciB0aGUgZ2l2ZW4gYF90YXJnZXRgLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjZW5hYmxlXG5cdCAqIEBmaXJlcyBFbnRpdHkjdWktZW5hYmxlXG5cdCAqIEBhcmcge3N0cmluZ3xTY29wZXxqUXVlcnl8SFRNTEVsZW1lbnR9IF90YXJnZXQgLSBBIENTUyBzZWxlY3RvciwgRE9NIG5vZGUgcmVmZXJlbmNlIG9yIGNvbnRleHQgb2JqZWN0IChpLmUuIFNjb3BlL2pRdWVyeSkuXG5cdCAqIEByZXR1cm5zIGB0aGlzYFxuXHQgKi9cblxuXHQvKipcblx0ICogPHNwYW4gY2xhc3M9XCJ0YWcgc3RhdGVcIj5TdGF0ZTwvc3Bhbj5cblx0ICogVGVzdHMgaWYgdGhlIHNjb3BlIG9yIGdpdmVuIGBfdGFyZ2V0YCBoYXMgdGhlIGBFTkFCTEVEYCBjbGFzcyBuYW1lLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjZW5hYmxlZFxuXHQgKiBAYXJnIHtzdHJpbmd8U2NvcGV8alF1ZXJ5fEhUTUxFbGVtZW50fSBfdGFyZ2V0IC0gQSBDU1Mgc2VsZWN0b3IsIERPTSBub2RlIHJlZmVyZW5jZSBvciBjb250ZXh0IG9iamVjdCAoaS5lLiBTY29wZS9qUXVlcnkpLlxuXHQgKiBAcmV0dXJucyB7Qm9vbGVhbn0gRW5hYmxlZCduZXNzLlxuXHQgKi9cblxuXHQvKipcblx0ICogPHNwYW4gY2xhc3M9XCJ0YWcgc3RhdGVcIj5TdGF0ZTwvc3Bhbj5cblx0ICogUHJvdmlkZXMgdGhlIGVsZW1lbnRzIHdpdGggdGhlIGBFTkFCTEVEYCBjbGFzcyBuYW1lLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjZ2V0RW5hYmxlZFxuXHQgKiBAcmV0dXJucyB7alF1ZXJ5fSBqUXVlcnkgY29sbGVjdGlvbiBvZiBtYXRjaGVkIG5vZGVzLlxuXHQgKiBAdG9kbyBSZXR1cm4gc2NvcGUgaWYgYXZhaWxhYmxlLlxuXHQgKi9cblx0dGhpcy5zdGF0ZSgnZW5hYmxlIGVuYWJsZWQnLCAnK0VOQUJMRUQgLURJU0FCTEVEJyk7XG5cblx0LyoqXG5cdCAqIDxzcGFuIGNsYXNzPVwidGFnIHN0YXRlXCI+U3RhdGU8L3NwYW4+XG5cdCAqIEFkZHMgYERJU0FCTEVEYCBhbmQgcmVtb3ZlcyB0aGUgYEVOQUJMRURgIENTUyBjbGFzcyBuYW1lcyBmcm9tIHRoZSBzY29wZSBvciB0aGUgZ2l2ZW4gYF90YXJnZXRgLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjZGlzYWJsZVxuXHQgKiBAZmlyZXMgRW50aXR5I3VpLWRpc2FibGVcblx0ICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cblx0ICogQHJldHVybnMgYHRoaXNgXG5cdCAqL1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBUZXN0cyBpZiB0aGUgc2NvcGUgb3IgZ2l2ZW4gYF90YXJnZXRgIGhhcyB0aGUgYERJU0FCTEVEYCBjbGFzcyBuYW1lLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjZGlzYWJsZWRcblx0ICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cblx0ICogQHJldHVybnMge0Jvb2xlYW59IERpc2FibGVkJ25lc3MuXG5cdCAqL1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBQcm92aWRlcyB0aGUgZWxlbWVudHMgd2l0aCB0aGUgYERJU0FCTEVEYCBjbGFzcyBuYW1lLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjZ2V0RGlzYWJsZWRcblx0ICogQHJldHVybnMge2pRdWVyeX0galF1ZXJ5IGNvbGxlY3Rpb24gb2YgbWF0Y2hlZCBub2Rlcy5cblx0ICogQHRvZG8gUmV0dXJuIHNjb3BlIGlmIGF2YWlsYWJsZS5cblx0ICovXG5cdHRoaXMuc3RhdGUoJ2Rpc2FibGUgZGlzYWJsZWQnLCAnK0RJU0FCTEVEIC1FTkFCTEVEJyk7XG5cblx0LyoqXG5cdCAqIDxzcGFuIGNsYXNzPVwidGFnIHN0YXRlXCI+U3RhdGU8L3NwYW4+XG5cdCAqIEFkZHMgdGhlIGBTRUxFQ1RFRGAgQ1NTIGNsYXNzIG5hbWUgdG8gdGhlIHNjb3BlIG9yIHRoZSBnaXZlbiBgX3RhcmdldGAuXG5cdCAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSNzZWxlY3Rcblx0ICogQGZpcmVzIEVudGl0eSN1aS1zZWxlY3Rcblx0ICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cblx0ICogQHJldHVybnMgYHRoaXNgXG5cdCAqL1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBUZXN0cyBpZiB0aGUgc2NvcGUgb3IgZ2l2ZW4gYF90YXJnZXRgIGhhcyB0aGUgYFNFTEVDVEVEYCBjbGFzcyBuYW1lLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjc2VsZWN0ZWRcblx0ICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cblx0ICogQHJldHVybnMge0Jvb2xlYW59IFNlbGVjdGVkJ25lc3MuXG5cdCAqL1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBQcm92aWRlcyB0aGUgZWxlbWVudHMgd2l0aCB0aGUgYFNFTEVDVEVEYCBjbGFzcyBuYW1lLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjZ2V0RGlzYWJsZWRcblx0ICogQHJldHVybnMge2pRdWVyeX0galF1ZXJ5IGNvbGxlY3Rpb24gb2YgbWF0Y2hlZCBub2Rlcy5cblx0ICogQHRvZG8gUmV0dXJuIHNjb3BlIGlmIGF2YWlsYWJsZS5cblx0ICovXG5cdHRoaXMuc3RhdGUoJ3NlbGVjdCBzZWxlY3RlZCcsICcrU0VMRUNURUQnLCB7XG5cdFx0d2lsbFNldDogZnVuY3Rpb24gKF90YXJnZXQpIHtcblx0XHRcdHZhciB0YXJnZXQsICRwYXJlbnQ7XG5cdFx0XHRcblx0XHRcdHRhcmdldCA9IHJlc29sdmVUYXJnZXQuY2FsbCh0aGlzLCBfdGFyZ2V0KTtcblx0XHRcdCRwYXJlbnQgPSB0YXJnZXQucGFyZW50KCk7XG5cblx0XHRcdCRwYXJlbnQuZmluZCgnPiAuU0VMRUNURUQnKS5lYWNoKHRoaXMuYmluZChmdW5jdGlvbiAoX2luZGV4LCBfbm9kZSkge1xuXHRcdFx0XHR0aGlzLmRlc2VsZWN0KF9ub2RlKTtcblx0XHRcdH0pKTtcblx0XHRcdCRwYXJlbnQuZmluZCgnPiAuSElHSExJR0hURUQnKS5lYWNoKHRoaXMuYmluZChmdW5jdGlvbiAoX2luZGV4LCBfbm9kZSkge1xuXHRcdFx0XHR0aGlzLnVuaGlnaGxpZ2h0KF9ub2RlKTtcblx0XHRcdH0pKTtcblx0XHR9XG5cdH0pO1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBSZW1vdmVzIHRoZSBgU0VMRUNURURgIENTUyBjbGFzcyBuYW1lIGZyb20gdGhlIHNjb3BlIG9yIHRoZSBnaXZlbiBgX3RhcmdldGAuXG5cdCAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSNkZXNlbGVjdFxuXHQgKiBAZmlyZXMgRW50aXR5I3VpLWRlc2VsZWN0XG5cdCAqIEBhcmcge3N0cmluZ3xTY29wZXxqUXVlcnl8SFRNTEVsZW1lbnR9IF90YXJnZXQgLSBBIENTUyBzZWxlY3RvciwgRE9NIG5vZGUgcmVmZXJlbmNlIG9yIGNvbnRleHQgb2JqZWN0IChpLmUuIFNjb3BlL2pRdWVyeSkuXG5cdCAqIEByZXR1cm5zIGB0aGlzYFxuXHQgKi9cblx0dGhpcy5zdGF0ZSgnZGVzZWxlY3QnLCAnLVNFTEVDVEVEJyk7XG5cblx0LyoqXG5cdCAqIDxzcGFuIGNsYXNzPVwidGFnIHN0YXRlXCI+U3RhdGU8L3NwYW4+XG5cdCAqIEFkZHMgdGhlIGBISUdITElHSFRFRGAgQ1NTIGNsYXNzIG5hbWUgdG8gdGhlIHNjb3BlIG9yIHRoZSBnaXZlbiBgX3RhcmdldGAuXG5cdCAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSNoaWdobGlnaHRcblx0ICogQGZpcmVzIEVudGl0eSN1aS1oaWdobGlnaHRcblx0ICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cblx0ICogQHJldHVybnMgYHRoaXNgXG5cdCAqL1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBUZXN0cyBpZiB0aGUgc2NvcGUgb3IgZ2l2ZW4gYF90YXJnZXRgIGhhcyB0aGUgYEhJR0hMSUdIVEVEYCBjbGFzcyBuYW1lLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjaGlnaGxpZ2h0ZWRcblx0ICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cblx0ICogQHJldHVybnMge0Jvb2xlYW59IEhpZ2hsaWdodGVkJ25lc3MuXG5cdCAqL1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBQcm92aWRlcyB0aGUgZWxlbWVudHMgd2l0aCB0aGUgYEhJR0hMSUdIVEVEYCBjbGFzcyBuYW1lLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjZ2V0SGlnaGxpZ2h0ZWRcblx0ICogQHJldHVybnMge2pRdWVyeX0galF1ZXJ5IGNvbGxlY3Rpb24gb2YgbWF0Y2hlZCBub2Rlcy5cblx0ICogQHRvZG8gUmV0dXJuIHNjb3BlIGlmIGF2YWlsYWJsZS5cblx0ICovXG5cdHRoaXMuc3RhdGUoJ2hpZ2hsaWdodCBoaWdobGlnaHRlZCcsICcrSElHSExJR0hURUQnKTtcblxuXHQvKipcblx0ICogPHNwYW4gY2xhc3M9XCJ0YWcgc3RhdGVcIj5TdGF0ZTwvc3Bhbj5cblx0ICogUmVtb3ZlcyB0aGUgYEhJR0hMSUdIVEVEYCBDU1MgY2xhc3MgbmFtZSBmcm9tIHRoZSBzY29wZSBvciB0aGUgZ2l2ZW4gYF90YXJnZXRgLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjdW5oaWdobGlnaHRcblx0ICogQGZpcmVzIEVudGl0eSN1aS11bmhpZ2hsaWdodFxuXHQgKiBAYXJnIHtzdHJpbmd8U2NvcGV8alF1ZXJ5fEhUTUxFbGVtZW50fSBfdGFyZ2V0IC0gQSBDU1Mgc2VsZWN0b3IsIERPTSBub2RlIHJlZmVyZW5jZSBvciBjb250ZXh0IG9iamVjdCAoaS5lLiBTY29wZS9qUXVlcnkpLlxuXHQgKiBAcmV0dXJucyBgdGhpc2Bcblx0ICovXG5cdHRoaXMuc3RhdGUoJ3VuaGlnaGxpZ2h0JywgJy1ISUdITElHSFRFRCcpO1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBBZGRzIHRoZSBgRFJBR0dBQkxFYCBDU1MgY2xhc3MgbmFtZSB0byB0aGUgc2NvcGUgb3IgdGhlIGdpdmVuIGBfdGFyZ2V0YC5cblx0ICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I2RyYWdnYWJsZVxuXHQgKiBAZmlyZXMgRW50aXR5I3VpLWRyYWdnYWJsZVxuXHQgKiBAYXJnIHtzdHJpbmd8U2NvcGV8alF1ZXJ5fEhUTUxFbGVtZW50fSBfdGFyZ2V0IC0gQSBDU1Mgc2VsZWN0b3IsIERPTSBub2RlIHJlZmVyZW5jZSBvciBjb250ZXh0IG9iamVjdCAoaS5lLiBTY29wZS9qUXVlcnkpLlxuXHQgKiBAcmV0dXJucyBgdGhpc2Bcblx0ICovXG5cblx0LyoqXG5cdCAqIDxzcGFuIGNsYXNzPVwidGFnIHN0YXRlXCI+U3RhdGU8L3NwYW4+XG5cdCAqIFRlc3RzIGlmIHRoZSBzY29wZSBvciBnaXZlbiBgX3RhcmdldGAgaGFzIHRoZSBgRFJBR0dBQkxFYCBjbGFzcyBuYW1lLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjZHJhZ0VuYWJsZWRcblx0ICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cblx0ICogQHJldHVybnMge0Jvb2xlYW59IERyYWdnYWJsZSduZXNzLlxuXHQgKi9cblxuXHQvKipcblx0ICogPHNwYW4gY2xhc3M9XCJ0YWcgc3RhdGVcIj5TdGF0ZTwvc3Bhbj5cblx0ICogUHJvdmlkZXMgdGhlIGVsZW1lbnRzIHdpdGggdGhlIGBEUkFHR0FCTEVgIGNsYXNzIG5hbWUuXG5cdCAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSNnZXREcmFnRW5hYmxlZFxuXHQgKiBAcmV0dXJucyB7alF1ZXJ5fSBqUXVlcnkgY29sbGVjdGlvbiBvZiBtYXRjaGVkIG5vZGVzLlxuXHQgKiBAdG9kbyBSZXR1cm4gc2NvcGUgaWYgYXZhaWxhYmxlLlxuXHQgKi9cblx0dGhpcy5zdGF0ZSgnZHJhZ2dhYmxlIGRyYWdFbmFibGVkJywgJytEUkFHR0FCTEUnLCB7XG5cdFx0ZGlkU2V0OiBmdW5jdGlvbiAoX3RhcmdldCkge1xuXHRcdFx0dGhpcy50cmFuc2xhdGUoIHJlc29sdmVUYXJnZXQuY2FsbCh0aGlzLCBfdGFyZ2V0KSApO1xuXHRcdH1cblx0fSk7XG5cblx0LyoqXG5cdCAqIDxzcGFuIGNsYXNzPVwidGFnIHN0YXRlXCI+U3RhdGU8L3NwYW4+XG5cdCAqIFJlbW92ZXMgdGhlIGBEUkFHR0FCTEVgIENTUyBjbGFzcyBuYW1lIGZyb20gdGhlIHNjb3BlIG9yIHRoZSBnaXZlbiBgX3RhcmdldGAuXG5cdCAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSN1bmRyYWdnYWJsZVxuXHQgKiBAZmlyZXMgRW50aXR5I3VpLXVuZHJhZ2dhYmxlXG5cdCAqIEBhcmcge3N0cmluZ3xTY29wZXxqUXVlcnl8SFRNTEVsZW1lbnR9IF90YXJnZXQgLSBBIENTUyBzZWxlY3RvciwgRE9NIG5vZGUgcmVmZXJlbmNlIG9yIGNvbnRleHQgb2JqZWN0IChpLmUuIFNjb3BlL2pRdWVyeSkuXG5cdCAqIEByZXR1cm5zIGB0aGlzYFxuXHQgKi9cblx0dGhpcy5zdGF0ZSgndW5kcmFnZ2FibGUnLCAnLURSQUdHQUJMRScpO1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBBZGRzIHRoZSBgVFJBTlNMQVRFRGAgQ1NTIGNsYXNzIG5hbWUgdG8gdGhlIHNjb3BlIG9yIHRoZSBnaXZlbiBgX3RhcmdldGAuIFRoZSB0YXJnZXQgYWxzbyBnZXRzIGEgMmQgdHJhbnNmb3JtIGF0IHRoZSBnaXZlbiBgX3BvaW50YC5cblx0ICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I3RyYW5zbGF0ZVxuXHQgKiBAZmlyZXMgRW50aXR5I3VpLXRyYW5zbGF0ZVxuXHQgKiBAYXJnIHtzdHJpbmd8U2NvcGV8alF1ZXJ5fEhUTUxFbGVtZW50fSBfdGFyZ2V0IC0gQSBDU1Mgc2VsZWN0b3IsIERPTSBub2RlIHJlZmVyZW5jZSBvciBjb250ZXh0IG9iamVjdCAoaS5lLiBTY29wZS9qUXVlcnkpLlxuXHQgKiBAYXJnIHttb2R1bGU6dHlwZXMvRGltZW5zaW9uc35Qb2ludH0gX3BvaW50IC0gUG9pbnQgb2JqZWN0IHdpdGggY29vcmRpbmF0ZXMge3gseX0uXG5cdCAqIEByZXR1cm5zIGB0aGlzYFxuXHQgKi9cblxuXHQvKipcblx0ICogPHNwYW4gY2xhc3M9XCJ0YWcgc3RhdGVcIj5TdGF0ZTwvc3Bhbj5cblx0ICogQWRkcyB0aGUgYFRSQU5TTEFURURgIENTUyBjbGFzcyBuYW1lIHRvIHRoZSBzY29wZS4gVGhlIHNjb3BlIGFsc28gZ2V0cyBhIDJkIHRyYW5zZm9ybSBhdCB0aGUgZ2l2ZW4gYF9wb2ludGAuXG5cdCAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSN0cmFuc2xhdGVcblx0ICogQGZpcmVzIEVudGl0eSN1aS10cmFuc2xhdGVcblx0ICogQGFyZyB7bW9kdWxlOnR5cGVzL0RpbWVuc2lvbnN+UG9pbnR9IF9wb2ludCAtIFBvaW50IG9iamVjdCB3aXRoIGNvb3JkaW5hdGVzIHt4LHl9LlxuXHQgKiBAcmV0dXJucyBgdGhpc2Bcblx0ICovXG5cblx0LyoqXG5cdCAqIDxzcGFuIGNsYXNzPVwidGFnIHN0YXRlXCI+U3RhdGU8L3NwYW4+XG5cdCAqIFRlc3RzIGlmIHRoZSBzY29wZSBvciBnaXZlbiBgX3RhcmdldGAgaGFzIHRoZSBgVFJBTlNMQVRFRGAgY2xhc3MgbmFtZS5cblx0ICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I3RyYW5zbGF0ZWRcblx0ICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cblx0ICogQHJldHVybnMge0Jvb2xlYW59IFRyYW5zbGF0ZSduZXNzLlxuXHQgKi9cblxuXHQvKipcblx0ICogPHNwYW4gY2xhc3M9XCJ0YWcgc3RhdGVcIj5TdGF0ZTwvc3Bhbj5cblx0ICogUHJvdmlkZXMgdGhlIGVsZW1lbnRzIHdpdGggdGhlIGBUUkFOU0xBVEVEYCBjbGFzcyBuYW1lLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjZ2V0VHJhbnNsYXRlZFxuXHQgKiBAcmV0dXJucyB7alF1ZXJ5fSBqUXVlcnkgY29sbGVjdGlvbiBvZiBtYXRjaGVkIG5vZGVzLlxuXHQgKiBAdG9kbyBSZXR1cm4gc2NvcGUgaWYgYXZhaWxhYmxlLlxuXHQgKi9cblx0dGhpcy5zdGF0ZSgndHJhbnNsYXRlIHRyYW5zbGF0ZWQnLCAnK1RSQU5TTEFURUQnLCB7XG5cdFx0d2lsbFNldDogZnVuY3Rpb24gKF90YXJnZXRfcG9pbnQsIF9wb2ludCkge1xuXHRcdFx0dmFyIHBvaW50LCB0YXJnZXQ7XG5cdFx0XHRcblx0XHRcdHRhcmdldCA9IHJlc29sdmVUYXJnZXQuY2FsbCh0aGlzLCBfdGFyZ2V0X3BvaW50KTtcblx0XHRcdHBvaW50ID0gKCF+W190YXJnZXRfcG9pbnQueCwgX3RhcmdldF9wb2ludC55XS5pbmRleE9mKHVuZGVmaW5lZCkpID8gX3RhcmdldF9wb2ludCA6IF9wb2ludDtcblxuXHRcdFx0aWYgKHBvaW50KSB7XG5cdFx0XHRcdHRhcmdldC5jc3MoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGVYKCcrcG9pbnQueCsncHgpIHRyYW5zbGF0ZVkoJytwb2ludC55KydweCknKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBSZW1vdmVzIHRoZSBgVFJBTlNMQVRFRGAgQ1NTIGNsYXNzIG5hbWUgYW5kIENTUyB0cmFuc2Zvcm0gZnJvbSB0aGUgc2NvcGUgb3IgdGhlIGdpdmVuIGBfdGFyZ2V0YC5cblx0ICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I3VudHJhbnNsYXRlXG5cdCAqIEBmaXJlcyBFbnRpdHkjdWktdW50cmFuc2xhdGVcblx0ICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cblx0ICogQHJldHVybnMgYHRoaXNgXG5cdCAqL1xuXHR0aGlzLnN0YXRlKCd1bnRyYW5zbGF0ZScsICctVFJBTlNMQVRFRCcsIHtcblx0XHR3aWxsU2V0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aGlzLmNzcygndHJhbnNmb3JtJywgJ25vbmUnKTtcblx0XHR9XG5cdH0pO1xuXG5cdHRoaXMuc3RhdGUoJ2dhdGUgZ2F0ZWQnLCAnK0dBVEVEJyk7XG5cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB7IEVudGl0eSwgaW52b2tlUmVzcG9uc2liaWxpdGllcyB9O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zb3VyY2UvdHlwZXMvRW50aXR5LmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"exports.__esModule = true;\\n/**\\n*  Screen\\n*  @desc Contains...\\n*  @proto Entity\\n*/\\n\\nvar _typesEntity = __webpack_require__(39);\\n\\nvar Screen = _typesEntity.Entity.extend(function () {\\n\\n\\tfunction attachBehaviorEvent() {\\n\\t\\tthis.on('behavior', function (_event) {\\n\\t\\t\\t// console.log('SCREEN GOT', _event.targetScope.id(), _event.name);\\n\\n\\t\\t\\tif (this !== _event.targetScope) {\\n\\t\\t\\t\\t_typesEntity.invokeResponsibilities(this, _event);\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.propagateBehavior(_event);\\n\\t\\t});\\n\\t}\\n\\n\\tthis.baseType = 'TYPE_SCREEN';\\n\\tthis.game = null;\\n\\tthis.screen = null;\\n\\n\\tthis.__init = function () {\\n\\t\\tthis.proto();\\n\\n\\t\\tif (this.hasClass('screen')) {\\n\\t\\t\\tattachBehaviorEvent.call(this);\\n\\t\\t}\\n\\t};\\n\\n\\tthis.start = function () {\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.stop = function () {\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.index = function () {\\n\\t\\tif (this === this.screen) return this.game.screens.indexOf(this);\\n\\t\\treturn this.$els.index();\\n\\t};\\n\\n\\tthis.next = function () {\\n\\t\\tif (!this.completed()) return false;\\n\\t\\treturn this.game.screens[this.screen.index() + 1];\\n\\t};\\n\\n\\tthis.prev = function () {\\n\\t\\treturn this.game.screens[this.screen.index() - 1];\\n\\t};\\n\\n\\tthis.quit = function () {\\n\\t\\tthis.game.quit.open();\\n\\t};\\n\\n\\tthis.nextSib = function () {\\n\\t\\treturn $.fn.next.apply(this.$els, arguments);\\n\\t};\\n\\n\\tthis.prevSib = function () {\\n\\t\\treturn $.fn.prev.apply(this.$els, arguments);\\n\\t};\\n\\n\\tthis.isLast = function () {\\n\\t\\treturn this.game.screens.indexOf(this.screen) === this.game.screens.length - 1;\\n\\t};\\n});\\n\\nexports['default'] = Screen;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvU2NyZWVuLmpzP2U0MTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozt1Q0FNK0MsRUFBYzs7QUFFN0QsSUFBSSxNQUFNLEdBQUcsb0JBQU8sTUFBTSxDQUFDLFlBQVk7O0FBRXRDLFVBQVMsbUJBQW1CLEdBQUk7QUFDL0IsTUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsVUFBVSxNQUFNLEVBQUU7OztBQUdyQyxPQUFJLElBQUksS0FBSyxNQUFNLENBQUMsV0FBVyxFQUFFO0FBQ2hDLHdDQUF1QixJQUFJLEVBQUcsTUFBTSxDQUFDLENBQUM7SUFDdEM7O0FBRUQsT0FBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0dBQy9CLENBQUMsQ0FBQztFQUNIOztBQUVELEtBQUksQ0FBQyxRQUFRLEdBQUcsYUFBYSxDQUFDO0FBQzlCLEtBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLEtBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDOztBQUVuQixLQUFJLENBQUMsTUFBTSxHQUFHLFlBQVk7QUFDekIsTUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDOztBQUViLE1BQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUM1QixzQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDL0I7RUFDRCxDQUFDOztBQUVGLEtBQUksQ0FBQyxLQUFLLEdBQUcsWUFBWTtBQUN4QixTQUFPLElBQUksQ0FBQztFQUNaLENBQUM7O0FBRUYsS0FBSSxDQUFDLElBQUksR0FBRyxZQUFZO0FBQ3ZCLFNBQU8sSUFBSSxDQUFDO0VBQ1osQ0FBQzs7QUFFRixLQUFJLENBQUMsS0FBSyxHQUFHLFlBQVk7QUFDeEIsTUFBSSxJQUFJLEtBQUssSUFBSSxDQUFDLE1BQU0sRUFBRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNqRSxTQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7RUFDekIsQ0FBQzs7QUFFRixLQUFJLENBQUMsSUFBSSxHQUFHLFlBQVk7QUFDdkIsTUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRSxPQUFPLEtBQUssQ0FBQztBQUNwQyxTQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUM7RUFDaEQsQ0FBQzs7QUFFRixLQUFJLENBQUMsSUFBSSxHQUFHLFlBQVk7QUFDdkIsU0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2hELENBQUM7O0FBRUYsS0FBSSxDQUFDLElBQUksR0FBRyxZQUFZO0FBQ3ZCLE1BQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0VBQ3RCLENBQUM7O0FBRUYsS0FBSSxDQUFDLE9BQU8sR0FBRyxZQUFZO0FBQzFCLFNBQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7RUFDN0MsQ0FBQzs7QUFFRixLQUFJLENBQUMsT0FBTyxHQUFHLFlBQVk7QUFDMUIsU0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztFQUM3QyxDQUFDOztBQUVGLEtBQUksQ0FBQyxNQUFNLEdBQUcsWUFBWTtBQUN6QixTQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQztFQUM3RSxDQUFDO0NBRUYsQ0FBQyxDQUFDOztxQkFFWSxNQUFNIiwiZmlsZSI6IjQwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4qICBTY3JlZW5cbiogIEBkZXNjIENvbnRhaW5zLi4uXG4qICBAcHJvdG8gRW50aXR5XG4qL1xuXG5pbXBvcnQgeyBFbnRpdHksIGludm9rZVJlc3BvbnNpYmlsaXRpZXMgfSBmcm9tICd0eXBlcy9FbnRpdHknO1xuXG52YXIgU2NyZWVuID0gRW50aXR5LmV4dGVuZChmdW5jdGlvbiAoKSB7XG5cblx0ZnVuY3Rpb24gYXR0YWNoQmVoYXZpb3JFdmVudCAoKSB7XG5cdFx0dGhpcy5vbignYmVoYXZpb3InLCBmdW5jdGlvbiAoX2V2ZW50KSB7XG5cdFx0XHQvLyBjb25zb2xlLmxvZygnU0NSRUVOIEdPVCcsIF9ldmVudC50YXJnZXRTY29wZS5pZCgpLCBfZXZlbnQubmFtZSk7XG5cblx0XHRcdGlmICh0aGlzICE9PSBfZXZlbnQudGFyZ2V0U2NvcGUpIHtcblx0XHRcdFx0aW52b2tlUmVzcG9uc2liaWxpdGllcyh0aGlzLCAgX2V2ZW50KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5wcm9wYWdhdGVCZWhhdmlvcihfZXZlbnQpO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHR0aGlzLmJhc2VUeXBlID0gJ1RZUEVfU0NSRUVOJztcblx0dGhpcy5nYW1lID0gbnVsbDtcblx0dGhpcy5zY3JlZW4gPSBudWxsO1xuXG5cdHRoaXMuX19pbml0ID0gZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMucHJvdG8oKTtcblxuXHRcdGlmICh0aGlzLmhhc0NsYXNzKCdzY3JlZW4nKSkge1xuXHRcdFx0YXR0YWNoQmVoYXZpb3JFdmVudC5jYWxsKHRoaXMpO1xuXHRcdH1cblx0fTtcblxuXHR0aGlzLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdHRoaXMuc3RvcCA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHR0aGlzLmluZGV4ID0gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0aGlzID09PSB0aGlzLnNjcmVlbikgcmV0dXJuIHRoaXMuZ2FtZS5zY3JlZW5zLmluZGV4T2YodGhpcyk7XG5cdFx0cmV0dXJuIHRoaXMuJGVscy5pbmRleCgpO1xuXHR9O1xuXG5cdHRoaXMubmV4dCA9IGZ1bmN0aW9uICgpIHtcblx0XHRpZiAoIXRoaXMuY29tcGxldGVkKCkpIHJldHVybiBmYWxzZTtcblx0XHRyZXR1cm4gdGhpcy5nYW1lLnNjcmVlbnNbdGhpcy5zY3JlZW4uaW5kZXgoKSsxXTtcblx0fTtcblxuXHR0aGlzLnByZXYgPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2FtZS5zY3JlZW5zW3RoaXMuc2NyZWVuLmluZGV4KCktMV07XG5cdH07XG5cblx0dGhpcy5xdWl0ID0gZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMuZ2FtZS5xdWl0Lm9wZW4oKTtcblx0fTtcblxuXHR0aGlzLm5leHRTaWIgPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuICQuZm4ubmV4dC5hcHBseSh0aGlzLiRlbHMsIGFyZ3VtZW50cyk7XG5cdH07XG5cblx0dGhpcy5wcmV2U2liID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiAkLmZuLnByZXYuYXBwbHkodGhpcy4kZWxzLCBhcmd1bWVudHMpO1xuXHR9O1xuXG5cdHRoaXMuaXNMYXN0ID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLmdhbWUuc2NyZWVucy5pbmRleE9mKHRoaXMuc2NyZWVuKSA9PT0gdGhpcy5nYW1lLnNjcmVlbnMubGVuZ3RoLTE7XG5cdH07XG5cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBTY3JlZW47XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NvdXJjZS90eXBlcy9TY3JlZW4uanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _Object$defineProperties = __webpack_require__(6)['default'];\\n\\nvar _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Node scope for the top level game node.\\n */\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _playGame = __webpack_require__(16);\\n\\nvar _playGame2 = _interopRequireDefault(_playGame);\\n\\nvar _typesGlobalScope = __webpack_require__(22);\\n\\nvar _typesGlobalScope2 = _interopRequireDefault(_typesGlobalScope);\\n\\nvar _typesScreen = __webpack_require__(40);\\n\\nvar _typesScreen2 = _interopRequireDefault(_typesScreen);\\n\\nvar _typesCollection = __webpack_require__(21);\\n\\nvar _typesCollection2 = _interopRequireDefault(_typesCollection);\\n\\nvar _typesScope = __webpack_require__(23);\\n\\nvar _typesDimensions = __webpack_require__(5);\\n\\nvar Game = _typesGlobalScope2['default'].extend(function () {\\n\\n\\tvar Viewport, screenPrototype;\\n\\n\\t/**\\n  * Scales the game view to fill the browser window.\\n  */\\n\\tfunction scaleGame() {\\n\\t\\tvar vpSize, gameDimensions, width, height, zoom;\\n\\n\\t\\tvpSize = this.viewport.size();\\n\\t\\tgameDimensions = _playGame2['default'].config('dimensions');\\n\\t\\twidth = gameDimensions.width || this.width();\\n\\t\\theight = Math.round(gameDimensions.width / gameDimensions.ratio);\\n\\t\\tzoom = this.viewport.width / width;\\n\\n\\t\\tif (Math.round(height * zoom) > this.viewport.height) {\\n\\t\\t\\tzoom = this.viewport.height / height;\\n\\t\\t}\\n\\n\\t\\tthis.css({\\n\\t\\t\\twidth: width,\\n\\t\\t\\tzoom: zoom\\n\\t\\t});\\n\\n\\t\\tthis.zoom = zoom;\\n\\t}\\n\\n\\tscreenPrototype = _typesScreen2['default'];\\n\\n\\tthis.baseType = 'TYPE_GAME';\\n\\tthis.screens = null;\\n\\tthis.zoom = 1;\\n\\tthis.keyCommands = null;\\n\\tthis.demoMode = false;\\n\\tthis.viewport = new function () {\\n\\t\\tvar vp, $html, RESIZE_HANDLERS;\\n\\n\\t\\tvp = this;\\n\\t\\tRESIZE_HANDLERS = [];\\n\\t\\t$html = $('html');\\n\\t\\t$html.addClass(this.orientation);\\n\\n\\t\\t$(window).on('resize', function (_event) {\\n\\t\\t\\tif (!$html.hasClass(vp.orientation)) {\\n\\t\\t\\t\\t$html.removeClass('squareish landscape protrait').addClass(vp.orientation);\\n\\t\\t\\t}\\n\\n\\t\\t\\tRESIZE_HANDLERS.forEach(function (_handler) {\\n\\t\\t\\t\\t_handler(_event);\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\tthis.LANDSCAPE = 'landscape';\\n\\t\\tthis.PROTRAIT = 'protrait';\\n\\t\\tthis.SQUAREISH = 'squareish';\\n\\n\\t\\tthis.size = function () {\\n\\t\\t\\treturn _typesDimensions.Size.create().set(window.innerWidth, window.innerHeight);\\n\\t\\t};\\n\\n\\t\\t_Object$defineProperties(this, {\\n\\t\\t\\twidth: {\\n\\t\\t\\t\\tget: function get() {\\n\\t\\t\\t\\t\\treturn window.innerWidth;\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\tconfigurable: false\\n\\t\\t\\t},\\n\\n\\t\\t\\theight: {\\n\\t\\t\\t\\tget: function get() {\\n\\t\\t\\t\\t\\treturn window.innerHeight;\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\tconfigurable: false\\n\\t\\t\\t},\\n\\n\\t\\t\\torientation: {\\n\\t\\t\\t\\tget: function get() {\\n\\t\\t\\t\\t\\tvar ratio = this.size().ratio();\\n\\n\\t\\t\\t\\t\\tswitch (true) {\\n\\t\\t\\t\\t\\t\\tcase ratio > 0.9 && ratio < 1.1:\\n\\t\\t\\t\\t\\t\\t\\treturn 'squareish';\\n\\t\\t\\t\\t\\t\\tcase ratio > 1.1:\\n\\t\\t\\t\\t\\t\\t\\treturn 'landscape';\\n\\t\\t\\t\\t\\t\\tcase ratio < 0.9:\\n\\t\\t\\t\\t\\t\\t\\treturn 'protrait';\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tthis.onResize = function (_handler) {\\n\\t\\t\\tRESIZE_HANDLERS.push(_handler);\\n\\t\\t};\\n\\t}();;\\n\\n\\tthis.willInit = function () {\\n\\t\\tthis.addClass('pl-game');\\n\\n\\t\\tscaleGame.call(this);\\n\\t\\tthis.captureScreens();\\n\\t\\tthis.watchAudio();\\n\\n\\t\\tthis.viewport.onResize(this.bind(scaleGame));\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * Watch for specific keys or combination of keys. NOTE: meta key commands DO NOT support chords (i.e. meta+K,B).\\n  * ### Key Names\\n  * - *meta*: Command (aka Apple ⌘ or win)\\n  * - *alt*: Alt (aka Option ⌥)\\n  * - *shift*: Shift ⇪\\n  * - *ctrl*: Control ^\\n  * - *enter*: Enter or Return\\n  * - *esc*: Escape\\n  * - *left*: Left arrow\\n  * - *up*: Up arrow\\n  * - *right*: Right arrow\\n  * - *down*: Down arrow\\n  *\\n  * ### Example\\n  * ```javascript\\n  * // Overriding print.\\n  * this.game.onKeys('cmd+P', printHandler);\\n  *\\n  * // Holding Control and pressing \\\"K\\\" then \\\"B\\\"\\n  * this.game.onKeys('ctrl+K,B', handler);\\n  * ```\\n  * @arg {string} _commands - The key or sequence of keys.\\n  * @arg {function} _handler - Your event handler for when you key pattern is matched.\\n  * @returns `this`\\n  */\\n\\tthis.onKeys = function (_commands, _handler) {\\n\\t\\tvar sequence, chords, modifiers, map;\\n\\n\\t\\tif (!this.keyCommands) {\\n\\t\\t\\tthis.keyCommands = {};\\n\\n\\t\\t\\tmap = {\\n\\t\\t\\t\\t13: 'enter',\\n\\t\\t\\t\\t16: 'shift',\\n\\t\\t\\t\\t17: 'ctrl',\\n\\t\\t\\t\\t18: 'alt',\\n\\t\\t\\t\\t27: 'esc',\\n\\t\\t\\t\\t37: 'left',\\n\\t\\t\\t\\t38: 'up',\\n\\t\\t\\t\\t39: 'right',\\n\\t\\t\\t\\t40: 'down',\\n\\t\\t\\t\\t91: 'meta',\\n\\t\\t\\t\\tenter: 13,\\n\\t\\t\\t\\tshift: 16,\\n\\t\\t\\t\\tctrl: 17,\\n\\t\\t\\t\\talt: 18,\\n\\t\\t\\t\\tesc: 27,\\n\\t\\t\\t\\tleft: 37,\\n\\t\\t\\t\\tup: 38,\\n\\t\\t\\t\\tright: 39,\\n\\t\\t\\t\\tdown: 40,\\n\\t\\t\\t\\tmeta: 91\\n\\t\\t\\t};\\n\\n\\t\\t\\tmodifiers = [16, 17, 18, 91];\\n\\t\\t\\tsequence = [];\\n\\t\\t\\tchords = [];\\n\\n\\t\\t\\tthis.on('keydown', function (_event) {\\n\\t\\t\\t\\tvar modifier, key, eventMods, currentMods, command, handler;\\n\\n\\t\\t\\t\\tmodifier = !! ~modifiers.indexOf(_event.keyCode) && map[_event.keyCode];\\n\\t\\t\\t\\tkey = modifier ? modifier : map[_event.keyCode] || String.fromCharCode(_event.keyCode);\\n\\t\\t\\t\\teventMods = [_event.shiftKey, _event.ctrlKey, _event.altKey, _event.metaKey];\\n\\t\\t\\t\\tcurrentMods = [];\\n\\n\\t\\t\\t\\t// Collect the modifiers the event says are still down.\\n\\t\\t\\t\\teventMods.forEach(function (_modifierDown, _index) {\\n\\t\\t\\t\\t\\t// use the modifier name\\n\\t\\t\\t\\t\\tif (_modifierDown) currentMods.push(map[modifiers[_index]]);\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\t// Don't add keys we already have during rapid-fire events\\n\\t\\t\\t\\tif (~chords.indexOf(key) || ~sequence.indexOf(key)) return;\\n\\n\\t\\t\\t\\t// Construct the command\\n\\t\\t\\t\\tcommand = chords.length ? (chords.push(key), chords.join(',')) : (sequence.push(key), sequence.join('+'));\\n\\n\\t\\t\\t\\thandler = this.keyCommands[command];\\n\\n\\t\\t\\t\\tif (handler) {\\n\\t\\t\\t\\t\\thandler.call(this, _event, command);\\n\\t\\t\\t\\t\\t// Keep current modifiers.\\n\\t\\t\\t\\t\\tsequence = currentMods.map(function (_key, _index) {\\n\\t\\t\\t\\t\\t\\tvar key = sequence[_index];\\n\\t\\t\\t\\t\\t\\treturn currentMods[currentMods.indexOf(key)];\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\tchords = [];\\n\\n\\t\\t\\t\\t\\t// Override original key command (i.e. meta+Q).\\n\\t\\t\\t\\t\\t_event.preventDefault();\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\n\\t\\t\\tthis.on('keyup', function (_event) {\\n\\t\\t\\t\\tvar key, index, modifier, eventMods, currentMods;\\n\\n\\t\\t\\t\\tkey = modifier ? modifier : map[_event.keyCode] || String.fromCharCode(_event.keyCode);\\n\\t\\t\\t\\tindex = sequence.indexOf(key);\\n\\t\\t\\t\\tmodifier = !! ~modifiers.indexOf(_event.keyCode) && map[_event.keyCode];\\n\\t\\t\\t\\t// Follows the same index order as \\\"modifiers\\\" [16, 17, 18, 91]\\n\\t\\t\\t\\teventMods = [_event.shiftKey, _event.ctrlKey, _event.altKey, _event.metaKey];\\n\\t\\t\\t\\tcurrentMods = [];\\n\\n\\t\\t\\t\\t// Collect the modifiers the event says are still down.\\n\\t\\t\\t\\teventMods.forEach(function (_modifierDown, _index) {\\n\\t\\t\\t\\t\\t// use the modifier name\\n\\t\\t\\t\\t\\tif (_modifierDown) currentMods.push(map[modifiers[_index]]);\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\t// If the key released is a modifier...\\n\\t\\t\\t\\tif (key === modifier) {\\n\\t\\t\\t\\t\\t// ...keep current modifiers...\\n\\t\\t\\t\\t\\tsequence = currentMods.map(function (_key, _index) {\\n\\t\\t\\t\\t\\t\\tvar key = sequence[_index];\\n\\t\\t\\t\\t\\t\\treturn currentMods[currentMods.indexOf(key)];\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t// ...clear registered chords.\\n\\t\\t\\t\\t\\tchords = [];\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// If we had pressed more than one key...\\n\\t\\t\\t\\t\\tif (sequence.length > 1) {\\n\\t\\t\\t\\t\\t\\t// Check if the first is a modifier then switch to chord capturing\\n\\t\\t\\t\\t\\t\\tif (~modifiers.indexOf(map[sequence[0]])) {\\n\\t\\t\\t\\t\\t\\t\\tchords.push(sequence.join('+'));\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tif (~index) sequence.splice(index, 1);\\n\\t\\t\\t\\t\\tif (!sequence.length) chords = [];\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tthis.keyCommands[_commands] = _handler;\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.screen = function (_id, _implementation) {\\n\\t\\tvar prototype, selector, screenSelector, instance;\\n\\n\\t\\tif (arguments.length === 1 && typeof _id === 'function') {\\n\\t\\t\\tscreenPrototype = _typesScreen2['default'].extend(_id);\\n\\t\\t\\treturn this;\\n\\t\\t}\\n\\n\\t\\tif (!this.hasOwnProperty('screens')) this.screens = _typesCollection2['default'].create();\\n\\n\\t\\tif (this.hasOwnProperty('$els')) {\\n\\t\\t\\tdebugger;\\n\\t\\t\\tscreenSelector = pl.game.config('screenSelector');\\n\\t\\t\\tprototype = screenPrototype.isPrototypeOf(this) ? this : screenPrototype;\\n\\t\\t\\tselector = typeof _id === 'number' ? screenSelector + ':nth-child(' + (_id + 1) + ')' : '#' + _id;\\n\\t\\t\\tinstance = prototype.extend(_implementation).initialize(this.find(selector));\\n\\n\\t\\t\\tinstance.screen = instance;\\n\\t\\t\\tif (!instance.game) {\\n\\t\\t\\t\\tinstance.game = instance.closest('.pl-game').scope();\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tthis.screens.push({\\n\\t\\t\\t\\tindex: typeof _id === 'number' ? _id : null,\\n\\t\\t\\t\\tname: typeof _id === 'string' ? _id : null,\\n\\t\\t\\t\\timplementation: _implementation\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.captureScreens = function () {\\n\\t\\tvar screenSelector, prototype, collection;\\n\\n\\t\\tif (!this.hasOwnProperty('screens')) return this;\\n\\n\\t\\tscreenSelector = pl.game.config('screenSelector');\\n\\t\\tprototype = screenPrototype.isPrototypeOf(this) ? this : screenPrototype;\\n\\t\\tcollection = [];\\n\\n\\t\\tthis.findOwn(screenSelector).each(this.bind(function (_index, _node) {\\n\\t\\t\\tvar $node, screen, record, key, id, index, component;\\n\\n\\t\\t\\t$node = $(_node);\\n\\t\\t\\tid = $node.id();\\n\\t\\t\\tkey = id ? 'name' : (id = _index, 'index');\\n\\t\\t\\trecord = this.screens.get(id, key);\\n\\t\\t\\tcomponent = $node.attr('pl-component');\\n\\t\\t\\tscreen = _typesScope.createEntity.call(prototype, $node, record && record.implementation);\\n\\t\\t\\tscreen.screen = screen;\\n\\t\\t\\tscreen.game = this;\\n\\n\\t\\t\\tif ($node.attr('pl-skip') == null) collection.push(screen);\\n\\n\\t\\t\\tif (key === 'name' || component) {\\n\\t\\t\\t\\t_util2['default'].assignRef(this, _util2['default'].transformId(key === 'name' && id || component, true), screen);\\n\\t\\t\\t}\\n\\t\\t}));\\n\\n\\t\\tif (collection.length) this.screens = collection;\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.watchAudio = function () {\\n\\t\\tvar playing;\\n\\n\\t\\tfunction deQueue(_scope, _item) {\\n\\t\\t\\t[_scope, _scope.screen].forEach(function (_scope) {\\n\\t\\t\\t\\tif (_scope.requiredQueue && _scope.isMemberSafe('requiredQueue') && _scope.requiredQueue.has(_item)) {\\n\\t\\t\\t\\t\\t_scope.requiredQueue.ready(_item);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tplaying = _typesCollection2['default'].create();\\n\\n\\t\\tthis.on('audio-play', function (_event) {\\n\\t\\t\\tvar current, bgMusic;\\n\\n\\t\\t\\tif (_event.audioType !== 'sfx') {\\n\\t\\t\\t\\tcurrent = playing.filter(_event.audioType, 'type');\\n\\t\\t\\t\\tbgMusic = playing.filter('background', 'type');\\n\\n\\t\\t\\t\\tif (current) {\\n\\t\\t\\t\\t\\tcurrent.forEach(function (_record) {\\n\\t\\t\\t\\t\\t\\t_record.audio.pause();\\n\\t\\t\\t\\t\\t\\t_record.audio.currentTime = 0;\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (_event.audioType === 'voice-over') {\\n\\t\\t\\t\\t\\tif (bgMusic) bgMusic.forEach(function (_record) {\\n\\t\\t\\t\\t\\t\\t_record.audio.volume = 0.2;\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tplaying.push({\\n\\t\\t\\t\\taudio: _event.target,\\n\\t\\t\\t\\ttype: _event.audioType\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\tthis.on('audio-ended audio-pause', function (_event) {\\n\\t\\t\\tvar current, scope, bgMusic;\\n\\n\\t\\t\\tcurrent = playing.get(_event.target, 'audio');\\n\\t\\t\\tscope = $(_event.target).scope();\\n\\t\\t\\tbgMusic = playing.filter('background', 'type');\\n\\n\\t\\t\\tplaying.remove(current);\\n\\t\\t\\tdeQueue(scope, _event.target);\\n\\n\\t\\t\\tif (_event.audioType === 'voice-over' && !playing.get('voice-over', 'type')) {\\n\\t\\t\\t\\tif (bgMusic) bgMusic.forEach(function (_record) {\\n\\t\\t\\t\\t\\t_record.audio.volume = 1;\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t};\\n\\n\\tthis.progress = function () {\\n\\t\\treturn {\\n\\t\\t\\tcurrentScreen: this.currentScreen().index()\\n\\t\\t};\\n\\t};\\n\\n\\tthis.currentScreen = function () {\\n\\t\\treturn this.findOwn('.screen.OPEN').not('#quit').scope();\\n\\t};\\n\\n\\tthis.flip = function () {\\n\\t\\tconsole.log('THATS A FLIP!');\\n\\t\\t_playGame2['default'].report.flip(this);\\n\\t};\\n\\n\\tthis.exit = function () {\\n\\t\\tconsole.log('GOODBYE!');\\n\\t\\t_playGame2['default'].report.exit(this);\\n\\t};\\n\\n\\t/**\\n  * Demo mode key command\\n  */\\n\\tthis.onKeys('ctrl+D,M', function () {\\n\\t\\t// toggle\\n\\t\\tthis.demoMode = !this.demoMode;\\n\\t\\tthis[this.demoMode ? 'addClass' : 'removeClass']('DEMO');\\n\\n\\t\\tconsole.info(this.id(), 'is now ' + (this.demoMode ? 'in' : 'out of') + ' Demo Mode.');\\n\\t});\\n\\n\\t/**\\n  * Keyboard screen navigation\\n  */\\n\\tthis.onKeys('left', function () {\\n\\t\\tvar current;\\n\\n\\t\\tcurrent = this.currentScreen();\\n\\n\\t\\tif (current) current.prev();\\n\\t});\\n\\n\\tthis.onKeys('right', function () {\\n\\t\\tvar current;\\n\\n\\t\\tcurrent = this.currentScreen();\\n\\n\\t\\tif (current) current.next();\\n\\t});\\n});\\n\\nexports['default'] = Game;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * API for communicaion between a game and the platform.\\n *\\n * @module\\n */\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar platform = new function () {\\n\\n\\tfunction createEvent(_name, _props) {\\n\\t\\tvar eventObject;\\n\\n\\t\\teventObject = _util2['default'].mixin(new Event('game-event', { bubbles: true, cancelable: false }), {\\n\\t\\t\\tname: _name,\\n\\t\\t\\trespond: function respond(_data) {\\n\\t\\t\\t\\tvar platformEvent;\\n\\n\\t\\t\\t\\tplatformEvent = $.Event('platform-event', {\\n\\t\\t\\t\\t\\tname: _name,\\n\\t\\t\\t\\t\\tgameData: _data\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\tpl.game.trigger(platformEvent);\\n\\t\\t\\t}\\n\\t\\t}, _props);\\n\\n\\t\\treturn eventObject;\\n\\t}\\n\\n\\tthis.EVENT_INIT = 'init';\\n\\tthis.EVENT_SAVE = 'save';\\n\\tthis.EVENT_EXIT = 'exit';\\n\\tthis.EVENT_FLIPPED = 'flipped';\\n\\n\\tthis.emit = function (_name) {\\n\\t\\twindow.frameElement.dispatchEvent(createEvent(_name));\\n\\t};\\n\\n\\tthis.saveGameState = function (_data) {\\n\\t\\twindow.frameElement.dispatchEvent(createEvent(this.EVENT_SAVE, {\\n\\t\\t\\tgameData: _data\\n\\t\\t}));\\n\\t};\\n}();\\n\\nexports['default'] = platform;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvcGxhdGZvcm0uanM/NWQxOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Z0NBS2lCLEVBQU07Ozs7QUFFdkIsSUFBSSxRQUFRLEdBQUcsSUFBSyxZQUFZOztBQUUvQixVQUFTLFdBQVcsQ0FBRSxLQUFLLEVBQUUsTUFBTSxFQUFFO0FBQ3BDLE1BQUksV0FBVyxDQUFDOztBQUVoQixhQUFXLEdBQUcsa0JBQUssS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLFlBQVksRUFBRSxFQUFDLE9BQU8sRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUU7QUFDbkYsT0FBSSxFQUFFLEtBQUs7QUFDWCxVQUFPLEVBQUUsaUJBQVUsS0FBSyxFQUFFO0FBQ3pCLFFBQUksYUFBYSxDQUFDOztBQUVsQixpQkFBYSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUU7QUFDekMsU0FBSSxFQUFFLEtBQUs7QUFDWCxhQUFRLEVBQUUsS0FBSztLQUNmLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMvQjtHQUNELEVBQUUsTUFBTSxDQUFDLENBQUM7O0FBRVgsU0FBTyxXQUFXLENBQUM7RUFDbkI7O0FBRUQsS0FBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7QUFDekIsS0FBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7QUFDekIsS0FBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7QUFDekIsS0FBSSxDQUFDLGFBQWEsR0FBRyxTQUFTLENBQUM7O0FBRS9CLEtBQUksQ0FBQyxJQUFJLEdBQUcsVUFBVSxLQUFLLEVBQUU7QUFDNUIsUUFBTSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDdEQsQ0FBQzs7QUFFRixLQUFJLENBQUMsYUFBYSxHQUFHLFVBQVUsS0FBSyxFQUFFO0FBQ3JDLFFBQU0sQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO0FBQzlELFdBQVEsRUFBRSxLQUFLO0dBQ2YsQ0FBQyxDQUFDLENBQUM7RUFDSixDQUFDO0NBRUYsRUFBQyxDQUFDOztxQkFFWSxRQUFRIiwiZmlsZSI6IjQyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBUEkgZm9yIGNvbW11bmljYWlvbiBiZXR3ZWVuIGEgZ2FtZSBhbmQgdGhlIHBsYXRmb3JtLlxuICpcbiAqIEBtb2R1bGVcbiAqL1xuaW1wb3J0IHV0aWwgZnJvbSAndXRpbCc7XG5cbnZhciBwbGF0Zm9ybSA9IG5ldyAoZnVuY3Rpb24gKCkge1xuXG5cdGZ1bmN0aW9uIGNyZWF0ZUV2ZW50IChfbmFtZSwgX3Byb3BzKSB7XG5cdFx0dmFyIGV2ZW50T2JqZWN0O1xuXG5cdFx0ZXZlbnRPYmplY3QgPSB1dGlsLm1peGluKG5ldyBFdmVudCgnZ2FtZS1ldmVudCcsIHtidWJibGVzOnRydWUsIGNhbmNlbGFibGU6ZmFsc2V9KSwge1xuXHRcdFx0bmFtZTogX25hbWUsXG5cdFx0XHRyZXNwb25kOiBmdW5jdGlvbiAoX2RhdGEpIHtcblx0XHRcdFx0dmFyIHBsYXRmb3JtRXZlbnQ7XG5cblx0XHRcdFx0cGxhdGZvcm1FdmVudCA9ICQuRXZlbnQoJ3BsYXRmb3JtLWV2ZW50Jywge1xuXHRcdFx0XHRcdG5hbWU6IF9uYW1lLFxuXHRcdFx0XHRcdGdhbWVEYXRhOiBfZGF0YVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0XG5cdFx0XHRcdHBsLmdhbWUudHJpZ2dlcihwbGF0Zm9ybUV2ZW50KTtcblx0XHRcdH1cblx0XHR9LCBfcHJvcHMpO1xuXG5cdFx0cmV0dXJuIGV2ZW50T2JqZWN0O1xuXHR9XG5cblx0dGhpcy5FVkVOVF9JTklUID0gJ2luaXQnO1xuXHR0aGlzLkVWRU5UX1NBVkUgPSAnc2F2ZSc7XG5cdHRoaXMuRVZFTlRfRVhJVCA9ICdleGl0Jztcblx0dGhpcy5FVkVOVF9GTElQUEVEID0gJ2ZsaXBwZWQnO1xuXG5cdHRoaXMuZW1pdCA9IGZ1bmN0aW9uIChfbmFtZSkge1xuXHRcdHdpbmRvdy5mcmFtZUVsZW1lbnQuZGlzcGF0Y2hFdmVudChjcmVhdGVFdmVudChfbmFtZSkpO1xuXHR9O1xuXG5cdHRoaXMuc2F2ZUdhbWVTdGF0ZSA9IGZ1bmN0aW9uIChfZGF0YSkge1xuXHRcdHdpbmRvdy5mcmFtZUVsZW1lbnQuZGlzcGF0Y2hFdmVudChjcmVhdGVFdmVudCh0aGlzLkVWRU5UX1NBVkUsIHtcblx0XHRcdGdhbWVEYXRhOiBfZGF0YVxuXHRcdH0pKTtcblx0fTtcblxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHBsYXRmb3JtO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zb3VyY2UvcGxhdGZvcm0uanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ }\n/******/ ]);//@ sourceMappingURL=data:application/json;base64,");

/***/ },
/* 3 */
/***/ function(module, exports) {

	eval("if (window.parent === window) {\n\twindow.location.href = 'https://www.changemyworldnow.com/';\n} else {\n\tdocument.domain = 'changemyworldnow.com';\n}//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zZWEtdHVydGxlL3NvdXJjZS9qcy90ZXN0UGxhdGZvcm1JbnRlZ3JhdGlvbi5qcz9hODVkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxNQUFNLEVBQUU7QUFDN0IsT0FBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsbUNBQW1DLENBQUM7Q0FDM0QsTUFBTTtBQUNOLFNBQVEsQ0FBQyxNQUFNLEdBQUcsc0JBQXNCLENBQUMiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImlmICh3aW5kb3cucGFyZW50ID09PSB3aW5kb3cpIHtcblx0d2luZG93LmxvY2F0aW9uLmhyZWYgPSAnaHR0cHM6Ly93d3cuY2hhbmdlbXl3b3JsZG5vdy5jb20vJztcbn0gZWxzZSB7XG5cdGRvY3VtZW50LmRvbWFpbiA9ICdjaGFuZ2VteXdvcmxkbm93LmNvbSc7XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NlYS10dXJ0bGUvc291cmNlL2pzL3Rlc3RQbGF0Zm9ybUludGVncmF0aW9uLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 4 */
/***/ function(module, exports) {

	eval("pl.game.config({\n\tscreenSelector: '.screen',\n\tcomponentDirectory: 'components/',\n\tdimensions: {\n\t\twidth: 960,\n\t\tratio: 16 / 9\n\t},\n\tshouldLoadComponentStyles: false\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zZWEtdHVydGxlL3NvdXJjZS9qcy9jb25maWcuZ2FtZS5qcz83OTMyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ2QsZUFBYyxFQUFFLFNBQVM7QUFDekIsbUJBQWtCLEVBQUUsYUFBYTtBQUNqQyxXQUFVLEVBQUU7QUFDWCxPQUFLLEVBQUUsR0FBRztBQUNWLE9BQUssRUFBRSxFQUFFLEdBQUMsQ0FBQztFQUNYO0FBQ0QsMEJBQXlCLEVBQUUsS0FBSztDQUNoQyxDQUFDIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJwbC5nYW1lLmNvbmZpZyh7XG5cdHNjcmVlblNlbGVjdG9yOiAnLnNjcmVlbicsXG5cdGNvbXBvbmVudERpcmVjdG9yeTogJ2NvbXBvbmVudHMvJyxcblx0ZGltZW5zaW9uczoge1xuXHRcdHdpZHRoOiA5NjAsXG5cdFx0cmF0aW86IDE2Lzlcblx0fSxcblx0c2hvdWxkTG9hZENvbXBvbmVudFN0eWxlczogZmFsc2Vcbn0pO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zZWEtdHVydGxlL3NvdXJjZS9qcy9jb25maWcuZ2FtZS5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 5 */
/***/ function(module, exports) {

	eval("pl.game.component('screen-basic', function () {\n\n\tthis.ready = function () {\n\t\tif (this.isMemberSafe('requiredQueue') && this.requiredQueue) {\n\t\t\tthis.requiredQueue.on('complete', this.bind(function () {\n\t\t\t\tvar sfx;\n\n\t\t\t\tsfx = pl.util.resolvePath(this, 'game.audio.sfx.screenComplete');\n\n\t\t\t\tif (sfx) sfx.play();\n\t\t\t}));\n\t\t}\n\t};\n\n\tthis.next = function () {\n\t\tvar nextScreen, buttonSound;\n\n\t\tif (this.hasClass('last') && this.hasClass('COMPLETE')) this.game.quit.okay();\n\n\t\tnextScreen = this.proto();\n\t\tbuttonSound = pl.util.resolvePath(this, 'game.audio.sfx.button');\n\n\t\tif (nextScreen) {\n\t\t\tthis.screen.leave();\n\t\t\tnextScreen.open();\n\t\t\tif (buttonSound) buttonSound.play();\n\t\t}\n\n\t\treturn nextScreen;\n\t};\n\n\tthis.prev = function () {\n\t\tvar prevScreen, buttonSound;\n\n\t\tprevScreen = this.proto();\n\t\tbuttonSound = pl.util.resolvePath(this, 'game.audio.sfx.button');\n\n\t\tif (prevScreen) {\n\t\t\tthis.screen.close();\n\t\t\tprevScreen.open();\n\t\t\tif (buttonSound) buttonSound.play();\n\t\t}\n\n\t\treturn prevScreen;\n\t};\n\n\tthis.start = function () {\n\t\tvar bgSound, voSound;\n\n\t\tbgSound = pl.util.resolvePath(this, 'audio.background[0]?');\n\t\tvoSound = pl.util.resolvePath(this, 'audio.voiceOver[0]?');\n\n\t\tif (bgSound) bgSound.play();\n\t\tif (voSound) voSound.play();\n\n\t\tif (this.hasOwnProperty('entities') && this.entities[0]) this.entities[0].start();\n\n\t\treturn this;\n\t};\n\n\tthis.on('ui-open', function (_event) {\n\t\tif (this !== _event.targetScope) return;\n\n\t\tif (this.isReady) {\n\t\t\tthis.start();\n\t\t}\n\n\t\tif (!this.isComplete) {\n\t\t\tif (!this.requiredQueue || this.isMemberSafe('requiredQueue') && !this.requiredQueue.length) {\n\t\t\t\tthis.complete();\n\t\t\t}\n\t\t}\n\n\t\tif (this.screen.isLast()) {\n\t\t\tthis.addClass('last');\n\t\t}\n\t});\n\n\tthis.on('ui-leave', function (_event) {\n\t\tif (this.isReady && this === _event.targetScope) {\n\t\t\tthis.stop();\n\t\t}\n\t});\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zZWEtdHVydGxlL3NvdXJjZS9qcy9jb21wb25lbnRzL3NjcmVlbi1iYXNpYy9iZWhhdmlvci5qcz9lNjNmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxZQUFZOztBQUU3QyxLQUFJLENBQUMsS0FBSyxHQUFHLFlBQVk7QUFDeEIsTUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7QUFDN0QsT0FBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWTtBQUN2RCxRQUFJLEdBQUcsQ0FBQzs7QUFFUixPQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLCtCQUErQixDQUFDLENBQUM7O0FBRWpFLFFBQUksR0FBRyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNwQixDQUFDLENBQUMsQ0FBQztHQUNKO0VBQ0QsQ0FBQzs7QUFFRixLQUFJLENBQUMsSUFBSSxHQUFHLFlBQVk7QUFDdkIsTUFBSSxVQUFVLEVBQUUsV0FBVyxDQUFDOztBQUU1QixNQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQzs7QUFFN0UsWUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUMxQixhQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLHVCQUF1QixDQUFDLENBQUM7O0FBRWpFLE1BQUksVUFBVSxFQUFFO0FBQ2YsT0FBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNwQixhQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbEIsT0FBSSxXQUFXLEVBQUUsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0dBQ3BDOztBQUVELFNBQU8sVUFBVSxDQUFDO0VBQ2xCLENBQUM7O0FBRUYsS0FBSSxDQUFDLElBQUksR0FBRyxZQUFZO0FBQ3ZCLE1BQUksVUFBVSxFQUFFLFdBQVcsQ0FBQzs7QUFFNUIsWUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUMxQixhQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLHVCQUF1QixDQUFDLENBQUM7O0FBRWpFLE1BQUksVUFBVSxFQUFFO0FBQ2YsT0FBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNwQixhQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbEIsT0FBSSxXQUFXLEVBQUUsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0dBQ3BDOztBQUVELFNBQU8sVUFBVSxDQUFDO0VBQ2xCLENBQUM7O0FBRUYsS0FBSSxDQUFDLEtBQUssR0FBRyxZQUFZO0FBQ3hCLE1BQUksT0FBTyxFQUFFLE9BQU8sQ0FBQzs7QUFFckIsU0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO0FBQzVELFNBQU8sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUscUJBQXFCLENBQUMsQ0FBQzs7QUFFM0QsTUFBSSxPQUFPLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzVCLE1BQUksT0FBTyxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQzs7QUFFNUIsTUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7QUFFbEYsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDOztBQUVGLEtBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLFVBQVUsTUFBTSxFQUFFO0FBQ3BDLE1BQUksSUFBSSxLQUFLLE1BQU0sQ0FBQyxXQUFXLEVBQUUsT0FBTzs7QUFFeEMsTUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO0FBQ2pCLE9BQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztHQUNiOztBQUVELE1BQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO0FBQ3JCLE9BQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxJQUFLLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU8sRUFBRTtBQUM5RixRQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDaEI7R0FDRDs7QUFFRCxNQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUU7QUFDekIsT0FBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUN0QjtFQUNELENBQUMsQ0FBQzs7QUFFSCxLQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxVQUFVLE1BQU0sRUFBRTtBQUNyQyxNQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxLQUFLLE1BQU0sQ0FBQyxXQUFXLEVBQUU7QUFDaEQsT0FBSSxDQUFDLElBQUksRUFBRSxDQUFDO0dBQ1o7RUFDRCxDQUFDLENBQUM7Q0FFSCxDQUFDIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJwbC5nYW1lLmNvbXBvbmVudCgnc2NyZWVuLWJhc2ljJywgZnVuY3Rpb24gKCkge1xuXG5cdHRoaXMucmVhZHkgPSBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHRoaXMuaXNNZW1iZXJTYWZlKCdyZXF1aXJlZFF1ZXVlJykgJiYgdGhpcy5yZXF1aXJlZFF1ZXVlKSB7XG5cdFx0XHR0aGlzLnJlcXVpcmVkUXVldWUub24oJ2NvbXBsZXRlJywgdGhpcy5iaW5kKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dmFyIHNmeDtcblxuXHRcdFx0XHRzZnggPSBwbC51dGlsLnJlc29sdmVQYXRoKHRoaXMsICdnYW1lLmF1ZGlvLnNmeC5zY3JlZW5Db21wbGV0ZScpO1xuXG5cdFx0XHRcdGlmIChzZngpIHNmeC5wbGF5KCk7XG5cdFx0XHR9KSk7XG5cdFx0fVxuXHR9O1xuXHRcblx0dGhpcy5uZXh0ID0gZnVuY3Rpb24gKCkge1xuXHRcdHZhciBuZXh0U2NyZWVuLCBidXR0b25Tb3VuZDtcblxuXHRcdGlmKHRoaXMuaGFzQ2xhc3MoJ2xhc3QnKSAmJiB0aGlzLmhhc0NsYXNzKCdDT01QTEVURScpKSB0aGlzLmdhbWUucXVpdC5va2F5KCk7XG5cblx0XHRuZXh0U2NyZWVuID0gdGhpcy5wcm90bygpO1xuXHRcdGJ1dHRvblNvdW5kID0gcGwudXRpbC5yZXNvbHZlUGF0aCh0aGlzLCAnZ2FtZS5hdWRpby5zZnguYnV0dG9uJyk7XG5cblx0XHRpZiAobmV4dFNjcmVlbikge1xuXHRcdFx0dGhpcy5zY3JlZW4ubGVhdmUoKTtcblx0XHRcdG5leHRTY3JlZW4ub3BlbigpO1xuXHRcdFx0aWYgKGJ1dHRvblNvdW5kKSBidXR0b25Tb3VuZC5wbGF5KCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5leHRTY3JlZW47XG5cdH07XG5cblx0dGhpcy5wcmV2ID0gZnVuY3Rpb24gKCkge1xuXHRcdHZhciBwcmV2U2NyZWVuLCBidXR0b25Tb3VuZDtcblxuXHRcdHByZXZTY3JlZW4gPSB0aGlzLnByb3RvKCk7XG5cdFx0YnV0dG9uU291bmQgPSBwbC51dGlsLnJlc29sdmVQYXRoKHRoaXMsICdnYW1lLmF1ZGlvLnNmeC5idXR0b24nKTtcblxuXHRcdGlmIChwcmV2U2NyZWVuKSB7XG5cdFx0XHR0aGlzLnNjcmVlbi5jbG9zZSgpO1xuXHRcdFx0cHJldlNjcmVlbi5vcGVuKCk7XG5cdFx0XHRpZiAoYnV0dG9uU291bmQpIGJ1dHRvblNvdW5kLnBsYXkoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcHJldlNjcmVlbjtcblx0fTtcblxuXHR0aGlzLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuXHRcdHZhciBiZ1NvdW5kLCB2b1NvdW5kO1xuXG5cdFx0YmdTb3VuZCA9IHBsLnV0aWwucmVzb2x2ZVBhdGgodGhpcywgJ2F1ZGlvLmJhY2tncm91bmRbMF0/Jyk7XG5cdFx0dm9Tb3VuZCA9IHBsLnV0aWwucmVzb2x2ZVBhdGgodGhpcywgJ2F1ZGlvLnZvaWNlT3ZlclswXT8nKTtcblxuXHRcdGlmIChiZ1NvdW5kKSBiZ1NvdW5kLnBsYXkoKTtcblx0XHRpZiAodm9Tb3VuZCkgdm9Tb3VuZC5wbGF5KCk7XG5cblx0XHRpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eSgnZW50aXRpZXMnKSAmJiB0aGlzLmVudGl0aWVzWzBdKSB0aGlzLmVudGl0aWVzWzBdLnN0YXJ0KCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHR0aGlzLm9uKCd1aS1vcGVuJywgZnVuY3Rpb24gKF9ldmVudCkge1xuXHRcdGlmICh0aGlzICE9PSBfZXZlbnQudGFyZ2V0U2NvcGUpIHJldHVybjtcblxuXHRcdGlmICh0aGlzLmlzUmVhZHkpIHtcblx0XHRcdHRoaXMuc3RhcnQoKTtcblx0XHR9XG5cblx0XHRpZiAoIXRoaXMuaXNDb21wbGV0ZSkge1xuXHRcdFx0aWYgKCF0aGlzLnJlcXVpcmVkUXVldWUgfHwgKHRoaXMuaXNNZW1iZXJTYWZlKCdyZXF1aXJlZFF1ZXVlJykgJiYgIXRoaXMucmVxdWlyZWRRdWV1ZS5sZW5ndGgpKSB7XG5cdFx0XHRcdHRoaXMuY29tcGxldGUoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAodGhpcy5zY3JlZW4uaXNMYXN0KCkpIHtcblx0XHRcdHRoaXMuYWRkQ2xhc3MoJ2xhc3QnKTtcblx0XHR9XG5cdH0pO1xuXG5cdHRoaXMub24oJ3VpLWxlYXZlJywgZnVuY3Rpb24gKF9ldmVudCkge1xuXHRcdGlmICh0aGlzLmlzUmVhZHkgJiYgdGhpcyA9PT0gX2V2ZW50LnRhcmdldFNjb3BlKSB7XG5cdFx0XHR0aGlzLnN0b3AoKTtcblx0XHR9XG5cdH0pO1xuXG59KTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc2VhLXR1cnRsZS9zb3VyY2UvanMvY29tcG9uZW50cy9zY3JlZW4tYmFzaWMvYmVoYXZpb3IuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 6 */
/***/ function(module, exports) {

	eval("pl.game.component('screen-quit', function () {\n\n\t// TODO: Make an automated way to handle this\n\tthis.on('transitionend', function (_event) {\n\t\tif (this.state(this.STATE.LEAVE)) {\n\t\t\tthis.addClass('LEAVE-END');\n\t\t}\n\t});\n\n\tthis.on('ui-open', function (_event) {\n\t\tthis.game.addClass('QUIT-SCREEN');\n\t\tthis.removeClass('LEAVE-END');\n\t});\n\n\tthis.on('ui-leave', function () {\n\t\tthis.game.removeClass('QUIT-SCREEN');\n\t});\n\n\tthis.okay = function () {\n\t\tthis.screen.audio.sfx.play();\n\t\tthis.game.exit();\n\t};\n\n\tthis.cancel = function () {\n\t\tthis.screen.audio.sfx.play();\n\t\tthis.leave();\n\t};\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zZWEtdHVydGxlL3NvdXJjZS9qcy9jb21wb25lbnRzL3NjcmVlbi1xdWl0L2JlaGF2aW9yLmpzPzU3ZDQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLFlBQVk7OztBQUc1QyxLQUFJLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxVQUFVLE1BQU0sRUFBRTtBQUMxQyxNQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUNqQyxPQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0dBQzNCO0VBQ0QsQ0FBQyxDQUFDOztBQUVILEtBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLFVBQVUsTUFBTSxFQUFFO0FBQ3BDLE1BQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ2xDLE1BQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7RUFDOUIsQ0FBQyxDQUFDOztBQUVILEtBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLFlBQVk7QUFDL0IsTUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7RUFDckMsQ0FBQyxDQUFDOztBQUVILEtBQUksQ0FBQyxJQUFJLEdBQUcsWUFBWTtBQUN2QixNQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDN0IsTUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztFQUNqQixDQUFDOztBQUVGLEtBQUksQ0FBQyxNQUFNLEdBQUcsWUFBWTtBQUN6QixNQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDN0IsTUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0VBQ2IsQ0FBQztDQUVGLENBQUMiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbInBsLmdhbWUuY29tcG9uZW50KCdzY3JlZW4tcXVpdCcsIGZ1bmN0aW9uICgpIHtcblxuXHQvLyBUT0RPOiBNYWtlIGFuIGF1dG9tYXRlZCB3YXkgdG8gaGFuZGxlIHRoaXNcblx0dGhpcy5vbigndHJhbnNpdGlvbmVuZCcsIGZ1bmN0aW9uIChfZXZlbnQpIHtcblx0XHRpZiAodGhpcy5zdGF0ZSh0aGlzLlNUQVRFLkxFQVZFKSkge1xuXHRcdFx0dGhpcy5hZGRDbGFzcygnTEVBVkUtRU5EJyk7XHRcblx0XHR9XG5cdH0pO1xuXHRcblx0dGhpcy5vbigndWktb3BlbicsIGZ1bmN0aW9uIChfZXZlbnQpIHtcblx0XHR0aGlzLmdhbWUuYWRkQ2xhc3MoJ1FVSVQtU0NSRUVOJyk7XG5cdFx0dGhpcy5yZW1vdmVDbGFzcygnTEVBVkUtRU5EJyk7XG5cdH0pO1xuXG5cdHRoaXMub24oJ3VpLWxlYXZlJywgZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMuZ2FtZS5yZW1vdmVDbGFzcygnUVVJVC1TQ1JFRU4nKTtcblx0fSk7XG5cdFxuXHR0aGlzLm9rYXkgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5zY3JlZW4uYXVkaW8uc2Z4LnBsYXkoKTtcblx0XHR0aGlzLmdhbWUuZXhpdCgpO1xuXHR9O1xuXG5cdHRoaXMuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMuc2NyZWVuLmF1ZGlvLnNmeC5wbGF5KCk7XG5cdFx0dGhpcy5sZWF2ZSgpO1xuXHR9O1xuXG59KTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NlYS10dXJ0bGUvc291cmNlL2pzL2NvbXBvbmVudHMvc2NyZWVuLXF1aXQvYmVoYXZpb3IuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 7 */
/***/ function(module, exports) {

	eval("pl.game.component('title', function () {\n\n\tthis.start = function () {\n\t\tthis.proto();\n\t\tthis.showTitle();\n\t};\n\n\tthis.showTitle = function () {\n\t\tthis.image.addClass('animated ' + this.image.attr('pl-animation'));\n\t\tthis.complete();\n\t};\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zZWEtdHVydGxlL3NvdXJjZS9qcy9jb21wb25lbnRzL3RpdGxlL2JlaGF2aW9yLmpzP2E1ODIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLFlBQVk7O0FBRXRDLEtBQUksQ0FBQyxLQUFLLEdBQUcsWUFBWTtBQUN4QixNQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDYixNQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7RUFDakIsQ0FBQzs7QUFFRixLQUFJLENBQUMsU0FBUyxHQUFHLFlBQVk7QUFDNUIsTUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsV0FBVyxHQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7QUFDakUsTUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0VBQ2hCLENBQUM7Q0FFRixDQUFDIiwiZmlsZSI6IjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJwbC5nYW1lLmNvbXBvbmVudCgndGl0bGUnLCBmdW5jdGlvbiAoKSB7XG5cblx0dGhpcy5zdGFydCA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLnByb3RvKCk7XG5cdFx0dGhpcy5zaG93VGl0bGUoKTtcblx0fTtcblxuXHR0aGlzLnNob3dUaXRsZSA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLmltYWdlLmFkZENsYXNzKCdhbmltYXRlZCAnK3RoaXMuaW1hZ2UuYXR0cigncGwtYW5pbWF0aW9uJykpO1xuXHRcdHRoaXMuY29tcGxldGUoKTtcblx0fTtcblxufSk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NlYS10dXJ0bGUvc291cmNlL2pzL2NvbXBvbmVudHMvdGl0bGUvYmVoYXZpb3IuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 8 */
/***/ function(module, exports) {

	eval("pl.game.component('video', function () {\n\n\tthis.start = function () {\n\t\tvar self = this;\n\t\tthis.video.on('ended', function () {\n\t\t\tself.screen.complete();\n\t\t});\n\t\tthis.video[0].play();\n\t};\n\n\tthis.pause = function () {\n\t\tthis.video[0].pause();\n\t};\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zZWEtdHVydGxlL3NvdXJjZS9qcy9jb21wb25lbnRzL3ZpZGVvL2JlaGF2aW9yLmpzPzQ0YjgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLFlBQVk7O0FBRXRDLEtBQUksQ0FBQyxLQUFLLEdBQUcsWUFBVztBQUN2QixNQUFJLElBQUksR0FBRyxJQUFJLENBQUM7QUFDaEIsTUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFlBQVc7QUFDakMsT0FBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztHQUN2QixDQUFDLENBQUM7QUFDSCxNQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0VBQ3JCLENBQUM7O0FBRUYsS0FBSSxDQUFDLEtBQUssR0FBRyxZQUFXO0FBQ3ZCLE1BQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7RUFDdEIsQ0FBQztDQUVGLENBQUMiLCJmaWxlIjoiOC5qcyIsInNvdXJjZXNDb250ZW50IjpbInBsLmdhbWUuY29tcG9uZW50KCd2aWRlbycsIGZ1bmN0aW9uICgpIHtcblxuXHR0aGlzLnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdHRoaXMudmlkZW8ub24oJ2VuZGVkJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRzZWxmLnNjcmVlbi5jb21wbGV0ZSgpO1xuXHRcdH0pO1xuXHRcdHRoaXMudmlkZW9bMF0ucGxheSgpO1xuXHR9O1xuXG5cdHRoaXMucGF1c2UgPSBmdW5jdGlvbigpIHtcblx0XHR0aGlzLnZpZGVvWzBdLnBhdXNlKCk7XG5cdH07XG5cbn0pO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc2VhLXR1cnRsZS9zb3VyY2UvanMvY29tcG9uZW50cy92aWRlby9iZWhhdmlvci5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 9 */
/***/ function(module, exports) {

	eval("pl.game.component('frame', function () {\n\n\tthis.start = function () {\n\t\tvar bgSound, voSound;\n\n\t\tbgSound = pl.util.resolvePath(this, 'audio.background[0]?');\n\t\tvoSound = pl.util.resolvePath(this, 'audio.voiceOver[0]?');\n\n\t\tif (bgSound) bgSound.play();\n\t\tif (voSound && !voSound.hasAttribute(\"pl-dontautoplay\")) voSound.play();\n\n\t\tif (this.hasOwnProperty('entities') && this.entities[0]) this.entities[0].start();\n\n\t\treturn this;\n\t};\n\n\tthis.handleProperty({\n\t\ttitle: function title(_node, _name, _value) {\n\t\t\tif (this.is(_node)) {\n\t\t\t\tthis.find('.frame').addClass('title');\n\t\t\t\tthis.game.defineRule('.experiment:nth-of-type(' + (this.screen.index() + 1) + ') .frame-component .frame.title::before', {\n\t\t\t\t\tbackgroundImage: 'url(' + _value + ')'\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\tthis.on('ui-open', function (_event) {\n\t\tif (this.isReady) {\n\t\t\tthis.start();\n\t\t}\n\n\t\tif (this === _event.targetScope) {\n\t\t\tif (!(this.hasOwnProperty('isComplete') && this.isComplete) && !(this.hasOwnProperty('requiredQueue') && this.requiredQueue && this.requiredQueue.length)) {\n\t\t\t\tthis.complete();\n\t\t\t}\n\t\t}\n\t});\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zZWEtdHVydGxlL3NvdXJjZS9qcy9jb21wb25lbnRzL2ZyYW1lL2JlaGF2aW9yLmpzP2M5OWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLFlBQVk7O0FBRXRDLEtBQUksQ0FBQyxLQUFLLEdBQUcsWUFBWTtBQUN4QixNQUFJLE9BQU8sRUFBRSxPQUFPLENBQUM7O0FBRXJCLFNBQU8sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztBQUM1RCxTQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLHFCQUFxQixDQUFDLENBQUM7O0FBRTNELE1BQUksT0FBTyxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUM1QixNQUFJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7O0FBRXhFLE1BQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7O0FBRWxGLFNBQU8sSUFBSSxDQUFDO0VBQ1osQ0FBQzs7QUFFRixLQUFJLENBQUMsY0FBYyxDQUFDO0FBQ25CLE9BQUssRUFBRSxlQUFVLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFO0FBQ3RDLE9BQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUNuQixRQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN0QyxRQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQywwQkFBMEIsSUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxHQUFDLENBQUMsQ0FBQyxHQUFDLHlDQUF5QyxFQUFFO0FBQ2xILG9CQUFlLEVBQUUsTUFBTSxHQUFFLE1BQU0sR0FBRSxHQUFHO0tBQ3BDLENBQUMsQ0FBQztJQUNIO0dBQ0Q7RUFDRCxDQUFDLENBQUM7O0FBRUgsS0FBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsVUFBVSxNQUFNLEVBQUU7QUFDcEMsTUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO0FBQ2pCLE9BQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztHQUNiOztBQUVELE1BQUksSUFBSSxLQUFLLE1BQU0sQ0FBQyxXQUFXLEVBQUU7QUFDaEMsT0FBSSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsSUFBSyxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFFLEVBQUU7QUFDNUosUUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2hCO0dBQ0Q7RUFDRCxDQUFDLENBQUM7Q0FFSCxDQUFDIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJwbC5nYW1lLmNvbXBvbmVudCgnZnJhbWUnLCBmdW5jdGlvbiAoKSB7XG5cdFxuXHR0aGlzLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuXHRcdHZhciBiZ1NvdW5kLCB2b1NvdW5kO1xuXG5cdFx0YmdTb3VuZCA9IHBsLnV0aWwucmVzb2x2ZVBhdGgodGhpcywgJ2F1ZGlvLmJhY2tncm91bmRbMF0/Jyk7XG5cdFx0dm9Tb3VuZCA9IHBsLnV0aWwucmVzb2x2ZVBhdGgodGhpcywgJ2F1ZGlvLnZvaWNlT3ZlclswXT8nKTtcblxuXHRcdGlmIChiZ1NvdW5kKSBiZ1NvdW5kLnBsYXkoKTtcblx0XHRpZiAodm9Tb3VuZCAmJiAhdm9Tb3VuZC5oYXNBdHRyaWJ1dGUoXCJwbC1kb250YXV0b3BsYXlcIikpIHZvU291bmQucGxheSgpO1xuXG5cdFx0aWYgKHRoaXMuaGFzT3duUHJvcGVydHkoJ2VudGl0aWVzJykgJiYgdGhpcy5lbnRpdGllc1swXSkgdGhpcy5lbnRpdGllc1swXS5zdGFydCgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0dGhpcy5oYW5kbGVQcm9wZXJ0eSh7XG5cdFx0dGl0bGU6IGZ1bmN0aW9uIChfbm9kZSwgX25hbWUsIF92YWx1ZSkge1xuXHRcdFx0aWYgKHRoaXMuaXMoX25vZGUpKSB7XG5cdFx0XHRcdHRoaXMuZmluZCgnLmZyYW1lJykuYWRkQ2xhc3MoJ3RpdGxlJyk7XG5cdFx0XHRcdHRoaXMuZ2FtZS5kZWZpbmVSdWxlKCcuZXhwZXJpbWVudDpudGgtb2YtdHlwZSgnKyh0aGlzLnNjcmVlbi5pbmRleCgpKzEpKycpIC5mcmFtZS1jb21wb25lbnQgLmZyYW1lLnRpdGxlOjpiZWZvcmUnLCB7XG5cdFx0XHRcdFx0YmFja2dyb3VuZEltYWdlOiAndXJsKCcrIF92YWx1ZSArJyknXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0dGhpcy5vbigndWktb3BlbicsIGZ1bmN0aW9uIChfZXZlbnQpIHtcblx0XHRpZiAodGhpcy5pc1JlYWR5KSB7XG5cdFx0XHR0aGlzLnN0YXJ0KCk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMgPT09IF9ldmVudC50YXJnZXRTY29wZSkge1xuXHRcdFx0aWYgKCEodGhpcy5oYXNPd25Qcm9wZXJ0eSgnaXNDb21wbGV0ZScpICYmIHRoaXMuaXNDb21wbGV0ZSkgJiYgISh0aGlzLmhhc093blByb3BlcnR5KCdyZXF1aXJlZFF1ZXVlJykgJiYgKHRoaXMucmVxdWlyZWRRdWV1ZSAmJiB0aGlzLnJlcXVpcmVkUXVldWUubGVuZ3RoKSkpIHtcblx0XHRcdFx0dGhpcy5jb21wbGV0ZSgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cbn0pO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zZWEtdHVydGxlL3NvdXJjZS9qcy9jb21wb25lbnRzL2ZyYW1lL2JlaGF2aW9yLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 10 */
/***/ function(module, exports) {

	eval("pl.game.component('reveal', function () {\n\n\tthis.items = null;\n\n\tthis.on('ready', function () {\n\t\tthis.items = this.findOwn('li');\n\t});\n\n\tthis.item = function (_id) {\n\t\tvar vo, index;\n\n\t\tif (this.shouldRevealItem(_id) === false) return false;\n\n\t\tif (typeof _id === 'number') {\n\t\t\tthis.select(this.items[_id]);\n\t\t\tthis.audio.voiceOver[_id].play();\n\t\t} else if (typeof _id === 'string') {\n\t\t\tif (this[_id]) {\n\t\t\t\tthis.select(this[_id]);\n\n\t\t\t\tif (this.audio) {\n\t\t\t\t\tindex = this[_id].index();\n\t\t\t\t\tvo = this.audio.voiceOver[_id] || this.audio.voiceOver[index];\n\n\t\t\t\t\tif (vo) vo.play();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t};\n\n\tthis.shouldRevealItem = function () {\n\t\treturn true;\n\t};\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zZWEtdHVydGxlL3NvdXJjZS9qcy9jb21wb25lbnRzL3JldmVhbC9iZWhhdmlvci5qcz9kYjEwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxZQUFZOztBQUV2QyxLQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQzs7QUFFbEIsS0FBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsWUFBWTtBQUM1QixNQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO0VBQy9CLENBQUMsQ0FBQzs7QUFFSCxLQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsR0FBRyxFQUFFO0FBQzFCLE1BQUksRUFBRSxFQUFFLEtBQUssQ0FBQzs7QUFFZCxNQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxLQUFLLEVBQUUsT0FBTyxLQUFLLENBQUM7O0FBRXZELE1BQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO0FBQzVCLE9BQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzdCLE9BQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0dBRWpDLE1BRUksSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7QUFDakMsT0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDZCxRQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDOztBQUV2QixRQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7QUFDZixVQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQzFCLE9BQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQzs7QUFFOUQsU0FBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0tBQ2xCO0lBQ0Q7R0FDRDs7QUFFRCxTQUFPLElBQUksQ0FBQztFQUNaLENBQUM7O0FBRUYsS0FBSSxDQUFDLGdCQUFnQixHQUFHLFlBQVk7QUFDbkMsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDO0NBRUYsQ0FBQyIsImZpbGUiOiIxMC5qcyIsInNvdXJjZXNDb250ZW50IjpbInBsLmdhbWUuY29tcG9uZW50KCdyZXZlYWwnLCBmdW5jdGlvbiAoKSB7XG5cdFxuXHR0aGlzLml0ZW1zID0gbnVsbDtcblxuXHR0aGlzLm9uKCdyZWFkeScsIGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLml0ZW1zID0gdGhpcy5maW5kT3duKCdsaScpXG5cdH0pO1xuXG5cdHRoaXMuaXRlbSA9IGZ1bmN0aW9uIChfaWQpIHtcblx0XHR2YXIgdm8sIGluZGV4O1xuXG5cdFx0aWYgKHRoaXMuc2hvdWxkUmV2ZWFsSXRlbShfaWQpID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0aWYgKHR5cGVvZiBfaWQgPT09ICdudW1iZXInKSB7XG5cdFx0XHR0aGlzLnNlbGVjdCh0aGlzLml0ZW1zW19pZF0pO1xuXHRcdFx0dGhpcy5hdWRpby52b2ljZU92ZXJbX2lkXS5wbGF5KCk7XG5cblx0XHR9XG5cdFx0XHRcblx0XHRlbHNlIGlmICh0eXBlb2YgX2lkID09PSAnc3RyaW5nJykge1xuXHRcdFx0aWYgKHRoaXNbX2lkXSkge1xuXHRcdFx0XHR0aGlzLnNlbGVjdCh0aGlzW19pZF0pO1xuXG5cdFx0XHRcdGlmICh0aGlzLmF1ZGlvKSB7XG5cdFx0XHRcdFx0aW5kZXggPSB0aGlzW19pZF0uaW5kZXgoKTtcblx0XHRcdFx0XHR2byA9IHRoaXMuYXVkaW8udm9pY2VPdmVyW19pZF0gfHwgdGhpcy5hdWRpby52b2ljZU92ZXJbaW5kZXhdO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmICh2bykgdm8ucGxheSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0dGhpcy5zaG91bGRSZXZlYWxJdGVtID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9O1xuXG59KTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc2VhLXR1cnRsZS9zb3VyY2UvanMvY29tcG9uZW50cy9yZXZlYWwvYmVoYXZpb3IuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 11 */
/***/ function(module, exports) {

	eval("pl.game.component('multiple-choice', function () {\n\n\tfunction validateAnswer(_$selected) {\n\t\tvar index;\n\n\t\tif (this.properties.correct) {\n\t\t\tindex = _$selected.index();\n\n\t\t\tif (this.correct.has(index)) {\n\t\t\t\tthis.correct.ready(index);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else if (_$selected) {\n\t\t\tif (_$selected.is('[pl-correct]') && this.correct.has(_$selected[0])) {\n\t\t\t\tthis.correct.ready(_$selected[0]);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tthis.correct = null;\n\n\tthis.handleProperty({\n\t\tcorrect: function correct(_node, _name, _value) {\n\t\t\tvar answers;\n\n\t\t\tif (!this.correct) {\n\t\t\t\tthis.correct = pl.Queue.create();\n\t\t\t\tthis.correct.on('complete', this.bind(function (_event) {\n\t\t\t\t\tthis.complete();\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tif (this.is(_node)) {\n\t\t\t\tanswers = this.properties.correct.split(/\\s*,\\s*/);\n\t\t\t\tanswer.forEach(this.bind(function (_index) {\n\t\t\t\t\tthis.correct.add(Number(_index));\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\tthis.correct.add(_node);\n\t\t\t}\n\t\t}\n\t});\n\n\tthis.behavior('answer', function (_$target) {\n\t\tvar isCorrect;\n\n\t\tif (!this.isComplete && this.select(_$target)) {\n\t\t\tisCorrect = validateAnswer.call(this, _$target);\n\t\t}\n\n\t\treturn {\n\t\t\tmessage: isCorrect ? 'correct' : 'incorrect',\n\t\t\tbehaviorTarget: _$target\n\t\t};\n\t});\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zZWEtdHVydGxlL3NvdXJjZS9qcy9jb21wb25lbnRzL211bHRpcGxlLWNob2ljZS9iZWhhdmlvci5qcz85ZWQ2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixFQUFFLFlBQVk7O0FBRWhELFVBQVMsY0FBYyxDQUFFLFVBQVUsRUFBRTtBQUNwQyxNQUFJLEtBQUssQ0FBQzs7QUFFVixNQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFO0FBQzVCLFFBQUssR0FBRyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7O0FBRTNCLE9BQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDNUIsUUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUIsV0FBTyxJQUFJLENBQUM7SUFDWjtHQUNELE1BRUksSUFBSSxVQUFVLEVBQUU7QUFDcEIsT0FBSSxVQUFVLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0FBQ3JFLFFBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLFdBQU8sSUFBSSxDQUFDO0lBQ1o7R0FDRDs7QUFFRCxTQUFPLEtBQUssQ0FBQztFQUNiOztBQUVELEtBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDOztBQUVwQixLQUFJLENBQUMsY0FBYyxDQUFDO0FBQ25CLFNBQU8sRUFBRSxpQkFBVSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRTtBQUN4QyxPQUFJLE9BQU8sQ0FBQzs7QUFFWixPQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtBQUNsQixRQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDakMsUUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxNQUFNLEVBQUU7QUFDdkQsU0FBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0tBQ2hCLENBQUMsQ0FBQyxDQUFDO0lBQ0o7O0FBRUQsT0FBSSxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ25CLFdBQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDbkQsVUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsTUFBTSxFQUFFO0FBQzFDLFNBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0tBQ2pDLENBQUMsQ0FBQyxDQUFDO0lBQ0osTUFFSTtBQUNKLFFBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hCO0dBQ0Q7RUFDRCxDQUFDLENBQUM7O0FBRUgsS0FBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsVUFBVSxRQUFRLEVBQUU7QUFDM0MsTUFBSSxTQUFTLENBQUM7O0FBRWQsTUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUM5QyxZQUFTLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7R0FDaEQ7O0FBRUQsU0FBTztBQUNOLFVBQU8sRUFBRSxTQUFTLEdBQUcsU0FBUyxHQUFHLFdBQVc7QUFDNUMsaUJBQWMsRUFBRSxRQUFRO0dBQ3hCLENBQUM7RUFDRixDQUFDLENBQUM7Q0FFSCxDQUFDIiwiZmlsZSI6IjExLmpzIiwic291cmNlc0NvbnRlbnQiOlsicGwuZ2FtZS5jb21wb25lbnQoJ211bHRpcGxlLWNob2ljZScsIGZ1bmN0aW9uICgpIHtcblxuXHRmdW5jdGlvbiB2YWxpZGF0ZUFuc3dlciAoXyRzZWxlY3RlZCkge1xuXHRcdHZhciBpbmRleDtcblxuXHRcdGlmICh0aGlzLnByb3BlcnRpZXMuY29ycmVjdCkge1xuXHRcdFx0aW5kZXggPSBfJHNlbGVjdGVkLmluZGV4KCk7XG5cblx0XHRcdGlmICh0aGlzLmNvcnJlY3QuaGFzKGluZGV4KSkge1xuXHRcdFx0XHR0aGlzLmNvcnJlY3QucmVhZHkoaW5kZXgpO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRlbHNlIGlmIChfJHNlbGVjdGVkKSB7XG5cdFx0XHRpZiAoXyRzZWxlY3RlZC5pcygnW3BsLWNvcnJlY3RdJykgJiYgdGhpcy5jb3JyZWN0LmhhcyhfJHNlbGVjdGVkWzBdKSkge1xuXHRcdFx0XHR0aGlzLmNvcnJlY3QucmVhZHkoXyRzZWxlY3RlZFswXSk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHRoaXMuY29ycmVjdCA9IG51bGw7XG5cblx0dGhpcy5oYW5kbGVQcm9wZXJ0eSh7XG5cdFx0Y29ycmVjdDogZnVuY3Rpb24gKF9ub2RlLCBfbmFtZSwgX3ZhbHVlKSB7XG5cdFx0XHR2YXIgYW5zd2VycztcblxuXHRcdFx0aWYgKCF0aGlzLmNvcnJlY3QpIHtcblx0XHRcdFx0dGhpcy5jb3JyZWN0ID0gcGwuUXVldWUuY3JlYXRlKCk7XG5cdFx0XHRcdHRoaXMuY29ycmVjdC5vbignY29tcGxldGUnLCB0aGlzLmJpbmQoZnVuY3Rpb24gKF9ldmVudCkge1xuXHRcdFx0XHRcdHRoaXMuY29tcGxldGUoKTtcblx0XHRcdFx0fSkpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGhpcy5pcyhfbm9kZSkpIHtcblx0XHRcdFx0YW5zd2VycyA9IHRoaXMucHJvcGVydGllcy5jb3JyZWN0LnNwbGl0KC9cXHMqLFxccyovKTtcblx0XHRcdFx0YW5zd2VyLmZvckVhY2godGhpcy5iaW5kKGZ1bmN0aW9uIChfaW5kZXgpIHtcblx0XHRcdFx0XHR0aGlzLmNvcnJlY3QuYWRkKE51bWJlcihfaW5kZXgpKTtcblx0XHRcdFx0fSkpO1xuXHRcdFx0fVxuXG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0dGhpcy5jb3JyZWN0LmFkZChfbm9kZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHR0aGlzLmJlaGF2aW9yKCdhbnN3ZXInLCBmdW5jdGlvbiAoXyR0YXJnZXQpIHtcblx0XHR2YXIgaXNDb3JyZWN0O1xuXG5cdFx0aWYgKCF0aGlzLmlzQ29tcGxldGUgJiYgdGhpcy5zZWxlY3QoXyR0YXJnZXQpKSB7XG5cdFx0XHRpc0NvcnJlY3QgPSB2YWxpZGF0ZUFuc3dlci5jYWxsKHRoaXMsIF8kdGFyZ2V0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0bWVzc2FnZTogaXNDb3JyZWN0ID8gJ2NvcnJlY3QnIDogJ2luY29ycmVjdCcsXG5cdFx0XHRiZWhhdmlvclRhcmdldDogXyR0YXJnZXRcblx0XHR9O1xuXHR9KTtcblxufSk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NlYS10dXJ0bGUvc291cmNlL2pzL2NvbXBvbmVudHMvbXVsdGlwbGUtY2hvaWNlL2JlaGF2aW9yLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 12 */
/***/ function(module, exports) {

	eval("pl.game.component('selectable-all', function () {\n\n\tvar Column;\n\n\tfunction populateViewport() {\n\t\tvar width, item, i, columns;\n\n\t\t// width of the first item\n\t\twidth = this.$bin.outerWidth(true);\n\t\tcolumns = Math.floor(this.$viewport.width() / width);\n\n\t\tfor (i = 0; i < columns; i += 1) {\n\t\t\tthis.columns.push(Column.create().init(this.$bin, this.$viewport));\n\t\t}\n\t}\n\n\tColumn = pl.Basic.extend(function () {\n\n\t\tthis.$el = null;\n\t\tthis.$collection = null;\n\t\tthis.$viewport = null;\n\t\tthis.shouldRecycel = true;\n\n\t\tthis.init = function (_$collection, _$viewport) {\n\t\t\tthis.$collection = _$collection;\n\t\t\tthis.$viewport = _$viewport;\n\t\t\tthis.$el = $(pl.util.random(_$collection)).clone();\n\n\t\t\tthis.$viewport.append(this.$el);\n\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.recycle = function () {\n\t\t\tvar $clone;\n\n\t\t\tif (!this.shouldRecycel) return;\n\n\t\t\t$clone = $(pl.util.random(this.$collection)).clone();\n\n\t\t\tthis.$el.replaceWith($clone);\n\t\t\tthis.$el = $clone;\n\n\t\t\tsetTimeout(this.bind(function () {\n\t\t\t\tthis.launch();\n\t\t\t}), 0);\n\n\t\t\treturn $clone;\n\t\t};\n\n\t\tthis.launch = function () {\n\t\t\tthis.$el.on('transitionend', this.bind(function () {\n\t\t\t\tif (!this.recycle()) {\n\t\t\t\t\tthis.$el.off();\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tthis.$el.addClass('LAUNCHED');\n\t\t};\n\n\t\tthis.bind = function (_fun) {\n\t\t\tvar self = this;\n\t\t\treturn function () {\n\t\t\t\treturn _fun.apply(self, arguments);\n\t\t\t};\n\t\t};\n\t});\n\n\tthis.$viewport = null;\n\tthis.$bin = null;\n\tthis.columns = null;\n\tthis.count = 0;\n\n\tthis.init = function () {\n\t\tthis.$viewport = this.find('.viewport');\n\t\tthis.$bin = this.find('.bin li');\n\t\tthis.columns = [];\n\n\t\tthis.$bin.each(this.bind(function (_index, _node) {\n\t\t\tvar $node, message;\n\n\t\t\t$node = $(_node);\n\t\t\tmessage = $node.attr('pl-message');\n\n\t\t\tif ($node.attr('pl-correct') != null) {\n\t\t\t\tthis.screen.require(message);\n\t\t\t}\n\t\t}));\n\n\t\tpopulateViewport.call(this);\n\n\t\treturn this;\n\t};\n\n\tthis.start = function () {\n\t\tthis.columns.forEach(function (_item) {\n\t\t\t_item.launch();\n\t\t});\n\n\t\tthis.screen.requiredQueue.ready();\n\t};\n\n\tthis.stop = function () {\n\t\tthis.columns.forEach(function (_item) {\n\t\t\t_item.shouldRecycel = false;\n\t\t\t_item.$el.removeClass('LAUNCHED').css('transition', 'none');\n\t\t});\n\t};\n\n\tthis.behavior('pick', function (_$target) {\n\t\tvar message = this.count;\n\n\t\tif (_$target.attr('pl-correct') == null || this.screen.isComplete || this.screen.state(this.STATE.VOICE_OVER)) return;\n\n\t\tthis.screen.requiredQueue.ready(this.count);\n\t\tthis.screen.reveal.item(this.count);\n\n\t\tthis.audio.sfx.play();\n\n\t\tthis.count++;\n\n\t\tthis.highlight(_$target);\n\n\t\treturn {\n\t\t\tmessage: message,\n\t\t\tbehaviorTarget: _$target\n\t\t};\n\t});\n});//@ sourceMappingURL=data:application/json;base64,");

/***/ },
/* 13 */
/***/ function(module, exports) {

	eval("pl.game.component('selectable-remove', function () {\n\n\tthis.behavior('select', function (_target) {\n\t\tvar $target;\n\n\t\tif (this.event && !_target) {\n\t\t\t$target = $(this.event.target).closest('li');\n\n\t\t\tif (this.shouldSelect($target) !== false) {\n\t\t\t\t$target.is('li') && this.audio.sfx.correct.play();\n\t\t\t\treturn {\n\t\t\t\t\tmessage: $target.attr('class'),\n\t\t\t\t\tbehaviorTarget: $target\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tthis.audio.sfx.incorrect.play();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.proto(_target);\n\t\t}\n\n\t\treturn false;\n\t});\n\n\tthis.respond('select', function (_event) {\n\t\tvar index, stateMethod;\n\n\t\tindex = _event.message;\n\t\tstateMethod = this.properties.selectState || 'select';\n\n\t\tif (index) {\n\t\t\tthis[stateMethod](_event.behaviorTarget);\n\t\t\tthis.items.correct.ready(index);\n\t\t}\n\t});\n\n\tthis.shouldSelect = function (_target) {\n\t\tvar $target = $(_target);\n\t\tif (!$target.hasClass(this.STATE.HIGHLIGHTED) && !$target.is('[pl-incorrect]')) {\n\t\t\treturn !this.screen.state(this.STATE.VOICE_OVER);\n\t\t}\n\n\t\treturn false;\n\t};\n\n\tthis.ready = function () {\n\t\tvar correct, $net;\n\n\t\tcorrect = pl.Queue.create();\n\n\t\tcorrect.on('complete', this.bind(function () {\n\t\t\tthis.complete();\n\t\t}));\n\n\t\tthis.items = this.find('.items li:not([pl-incorrect])').map(function (_index, _node) {\n\t\t\tcorrect.add(_node.className);\n\t\t\treturn _node;\n\t\t}).toArray();\n\n\t\tthis.items.correct = correct;\n\n\t\t$net = $('.selectable-remove-component .net');\n\n\t\t$('.selectable-remove-component .center').mousemove(this.bind(function (e) {\n\t\t\t$net.css({ left: e.clientX / this.game.zoom - 85, top: e.clientY / this.game.zoom - 65 });\n\t\t}));\n\t};\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zZWEtdHVydGxlL3NvdXJjZS9qcy9jb21wb25lbnRzL3NlbGVjdGFibGUtcmVtb3ZlL2JlaGF2aW9yLmpzPzk4YTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsWUFBWTs7QUFFbEQsS0FBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsVUFBVSxPQUFPLEVBQUU7QUFDMUMsTUFBSSxPQUFPLENBQUM7O0FBRVosTUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsT0FBTyxFQUFFO0FBQzNCLFVBQU8sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7O0FBRTdDLE9BQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxLQUFLLEVBQUU7QUFDekMsV0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbEQsV0FBTztBQUNOLFlBQU8sRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUM5QixtQkFBYyxFQUFFLE9BQU87S0FDdkIsQ0FBQztJQUNGLE1BRUk7QUFDSixRQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEM7R0FDRCxNQUVJO0FBQ0osT0FBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztHQUNwQjs7QUFFRCxTQUFPLEtBQUssQ0FBQztFQUNiLENBQUMsQ0FBQzs7QUFFSCxLQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxVQUFVLE1BQU0sRUFBRTtBQUN4QyxNQUFJLEtBQUssRUFBRSxXQUFXLENBQUM7O0FBRXZCLE9BQUssR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO0FBQ3ZCLGFBQVcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsSUFBSSxRQUFRLENBQUM7O0FBRXRELE1BQUksS0FBSyxFQUFFO0FBQ1YsT0FBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUN6QyxPQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDaEM7RUFDRCxDQUFDLENBQUM7O0FBRUgsS0FBSSxDQUFDLFlBQVksR0FBRyxVQUFVLE9BQU8sRUFBRTtBQUN0QyxNQUFJLE9BQU8sR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDekIsTUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtBQUMvRSxVQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztHQUNqRDs7QUFFRCxTQUFPLEtBQUssQ0FBQztFQUNiLENBQUM7O0FBRUYsS0FBSSxDQUFDLEtBQUssR0FBRyxZQUFZO0FBQ3hCLE1BQUksT0FBTyxFQUFFLElBQUksQ0FBQzs7QUFFbEIsU0FBTyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7O0FBRTVCLFNBQU8sQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWTtBQUM1QyxPQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7R0FDaEIsQ0FBQyxDQUFDLENBQUM7O0FBRUosTUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQ2YsSUFBSSxDQUFDLCtCQUErQixDQUFDLENBQ3JDLEdBQUcsQ0FBQyxVQUFVLE1BQU0sRUFBRSxLQUFLLEVBQUU7QUFDN0IsVUFBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDN0IsVUFBTyxLQUFLLENBQUM7R0FDYixDQUFDLENBQ0QsT0FBTyxFQUFFLENBQUM7O0FBRVosTUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDOztBQUU3QixNQUFJLEdBQUcsQ0FBQyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7O0FBRTlDLEdBQUMsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQ3hFLE9BQUksQ0FBQyxHQUFHLENBQUMsRUFBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxFQUFDLENBQUMsQ0FBQztHQUN4RixDQUFDLENBQUMsQ0FBQztFQUNKLENBQUM7Q0FFRixDQUFDIiwiZmlsZSI6IjEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsicGwuZ2FtZS5jb21wb25lbnQoJ3NlbGVjdGFibGUtcmVtb3ZlJywgZnVuY3Rpb24gKCkge1xuXHRcblx0dGhpcy5iZWhhdmlvcignc2VsZWN0JywgZnVuY3Rpb24gKF90YXJnZXQpIHtcblx0XHR2YXIgJHRhcmdldDtcblxuXHRcdGlmICh0aGlzLmV2ZW50ICYmICFfdGFyZ2V0KSB7XG5cdFx0XHQkdGFyZ2V0ID0gJCh0aGlzLmV2ZW50LnRhcmdldCkuY2xvc2VzdCgnbGknKTtcblxuXHRcdFx0aWYgKHRoaXMuc2hvdWxkU2VsZWN0KCR0YXJnZXQpICE9PSBmYWxzZSkge1xuXHRcdFx0XHQkdGFyZ2V0LmlzKCdsaScpICYmIHRoaXMuYXVkaW8uc2Z4LmNvcnJlY3QucGxheSgpO1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdG1lc3NhZ2U6ICR0YXJnZXQuYXR0cignY2xhc3MnKSxcblx0XHRcdFx0XHRiZWhhdmlvclRhcmdldDogJHRhcmdldFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0dGhpcy5hdWRpby5zZnguaW5jb3JyZWN0LnBsYXkoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRlbHNlIHtcblx0XHRcdHRoaXMucHJvdG8oX3RhcmdldCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9KTtcblxuXHR0aGlzLnJlc3BvbmQoJ3NlbGVjdCcsIGZ1bmN0aW9uIChfZXZlbnQpIHtcblx0XHR2YXIgaW5kZXgsIHN0YXRlTWV0aG9kO1xuXG5cdFx0aW5kZXggPSBfZXZlbnQubWVzc2FnZTtcblx0XHRzdGF0ZU1ldGhvZCA9IHRoaXMucHJvcGVydGllcy5zZWxlY3RTdGF0ZSB8fCAnc2VsZWN0JztcblxuXHRcdGlmIChpbmRleCkge1xuXHRcdFx0dGhpc1tzdGF0ZU1ldGhvZF0oX2V2ZW50LmJlaGF2aW9yVGFyZ2V0KTtcblx0XHRcdHRoaXMuaXRlbXMuY29ycmVjdC5yZWFkeShpbmRleCk7XG5cdFx0fVxuXHR9KTtcblxuXHR0aGlzLnNob3VsZFNlbGVjdCA9IGZ1bmN0aW9uIChfdGFyZ2V0KSB7XG5cdFx0dmFyICR0YXJnZXQgPSAkKF90YXJnZXQpO1xuXHRcdGlmICghJHRhcmdldC5oYXNDbGFzcyh0aGlzLlNUQVRFLkhJR0hMSUdIVEVEKSAmJiAhJHRhcmdldC5pcygnW3BsLWluY29ycmVjdF0nKSkge1xuXHRcdFx0cmV0dXJuICF0aGlzLnNjcmVlbi5zdGF0ZSh0aGlzLlNUQVRFLlZPSUNFX09WRVIpO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcblxuXHR0aGlzLnJlYWR5ID0gZnVuY3Rpb24gKCkge1xuXHRcdHZhciBjb3JyZWN0LCAkbmV0O1xuXG5cdFx0Y29ycmVjdCA9IHBsLlF1ZXVlLmNyZWF0ZSgpO1xuXG5cdFx0Y29ycmVjdC5vbignY29tcGxldGUnLCB0aGlzLmJpbmQoZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhpcy5jb21wbGV0ZSgpO1xuXHRcdH0pKTtcblxuXHRcdHRoaXMuaXRlbXMgPSB0aGlzXG5cdFx0XHQuZmluZCgnLml0ZW1zIGxpOm5vdChbcGwtaW5jb3JyZWN0XSknKVxuXHRcdFx0Lm1hcChmdW5jdGlvbiAoX2luZGV4LCBfbm9kZSkge1xuXHRcdFx0XHRjb3JyZWN0LmFkZChfbm9kZS5jbGFzc05hbWUpO1xuXHRcdFx0XHRyZXR1cm4gX25vZGU7XG5cdFx0XHR9KVxuXHRcdFx0LnRvQXJyYXkoKTtcblxuXHRcdHRoaXMuaXRlbXMuY29ycmVjdCA9IGNvcnJlY3Q7XG5cblx0XHQkbmV0ID0gJCgnLnNlbGVjdGFibGUtcmVtb3ZlLWNvbXBvbmVudCAubmV0Jyk7XG5cblx0XHQkKCcuc2VsZWN0YWJsZS1yZW1vdmUtY29tcG9uZW50IC5jZW50ZXInKS5tb3VzZW1vdmUodGhpcy5iaW5kKGZ1bmN0aW9uKGUpe1xuXHRcdFx0JG5ldC5jc3Moe2xlZnQ6IGUuY2xpZW50WCAvIHRoaXMuZ2FtZS56b29tIC0gODUsIHRvcDogZS5jbGllbnRZIC8gdGhpcy5nYW1lLnpvb20gLSA2NX0pO1xuXHRcdH0pKTtcblx0fTtcblxufSk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NlYS10dXJ0bGUvc291cmNlL2pzL2NvbXBvbmVudHMvc2VsZWN0YWJsZS1yZW1vdmUvYmVoYXZpb3IuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 14 */
/***/ function(module, exports) {

	eval("pl.game.component('dropzone', function () {\n\n\t/**\n  * Handler for a dropzone behavior.\n  * @insatnce\n  */\n\tfunction reportState(_state) {\n\t\treturn {\n\t\t\tstate: _state,\n\t\t\tbehaviorTarget: _state.$draggable\n\t\t};\n\t}\n\n\tthis.entity('.area', function () {\n\n\t\tthis.cache = null;\n\n\t\t/**\n   * This is the area entities' ability to respond to the \"grab\" behavior\n   * of a draggable's scope somewhere on `this.screen`.\n   * -------------------\n   * Caches the position and size of the area.\n   */\n\t\tthis.respond('grab', function () {\n\t\t\tthis.cache = {\n\t\t\t\tposition: this.absolutePosition(),\n\t\t\t\tsize: this.size()\n\t\t\t};\n\t\t});\n\n\t\t/**\n   * This is the area entities' ability to respond to the \"release\" behavior\n   * of a draggable's scope somewhere on `this.screen`.\n   * -------------------\n   * Tests if the location of the drop falls in bounds of the area.\n   * Also validates if our dropzone takes the draggable as defined\n   * by the `pl-take` attribute on the component node.\n   */\n\t\tthis.respond('release', function (_event) {\n\t\t\tif (_event.state.progress.point && this.isPointInBounds(_event.state.progress.point)) {\n\t\t\t\tif (this.takes(_event.state.$draggable.id())) {\n\t\t\t\t\t_event.state.$draggable.removeClass('PLUCKED');\n\t\t\t\t\t_event.state.$helper.addClass('DROPED');\n\n\t\t\t\t\tthis.drop(_event.state.$draggable);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.reject(_event.state);\n\t\t\t}\n\n\t\t\tthis.missed(_event.state);\n\n\t\t\t_event.state.$helper.addClass('RETURN');\n\t\t});\n\t});\n\n\tthis.init = function () {\n\t\tthis.takes().forEach(this.bind(function (_id) {\n\t\t\tthis.require(_id);\n\t\t}));\n\t};\n\n\tthis.takes = function (_id) {\n\t\tvar takes;\n\n\t\t// if no pl-take attribute is defined then\n\t\t// the dropzone will take any draggable.\n\t\tif (!this.properties.take) return _id != null ? true : [];\n\n\t\ttakes = this.properties.take.split(/\\s+/);\n\t\treturn _id != null ? !! ~takes.indexOf(_id) : takes;\n\t};\n\n\tthis.isPointInBounds = function (_point, _y) {\n\t\tvar point, position;\n\n\t\tpoint = pl.Point.create(arguments);\n\n\t\tif (point.x >= this.cache.position.x && point.x <= this.cache.position.x + this.cache.size.width) {\n\t\t\tif (point.y >= this.cache.position.y && point.y <= this.cache.position.y + this.cache.size.height) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t};\n\n\tthis.isBoxInBounds = function (_point, _size) {\n\t\t// comming soon!\n\t};\n\n\tthis.behavior('drop', function (_$draggable) {\n\t\tif (_$draggable.id()) this.requiredQueue.ready(_$draggable.id());\n\n\t\treturn {\n\t\t\tbehaviorTarget: _$draggable\n\t\t};\n\t});\n\n\t/**\n  * Performed when a draggable is in bounds of the area and\n  * is rejected; or out of bounds of the dropzone area.\n  */\n\tthis.behavior('missed', reportState);\n\n\t/**\n  * Performed when a draggable is droped in bounds of the area but\n  * the component does not \"take\" it.\n  */\n\tthis.behavior('reject', reportState);\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zZWEtdHVydGxlL3NvdXJjZS9qcy9jb21wb25lbnRzL2Ryb3B6b25lL2JlaGF2aW9yLmpzP2IxN2MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFLFlBQVk7Ozs7OztBQU16QyxVQUFTLFdBQVcsQ0FBRSxNQUFNLEVBQUU7QUFDN0IsU0FBTztBQUNOLFFBQUssRUFBRSxNQUFNO0FBQ2IsaUJBQWMsRUFBRSxNQUFNLENBQUMsVUFBVTtHQUNqQyxDQUFDO0VBQ0Y7O0FBRUQsS0FBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsWUFBWTs7QUFFaEMsTUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7Ozs7Ozs7O0FBUWxCLE1BQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFlBQVk7QUFDaEMsT0FBSSxDQUFDLEtBQUssR0FBRztBQUNaLFlBQVEsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7QUFDakMsUUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUU7SUFDakIsQ0FBQztHQUNGLENBQUMsQ0FBQzs7Ozs7Ozs7OztBQVVILE1BQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVUsTUFBTSxFQUFFO0FBQ3pDLE9BQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDckYsUUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7QUFDN0MsV0FBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9DLFdBQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxR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IGZ1bmN0aW9uICgpIHtcblxuXHQvKipcblx0ICogSGFuZGxlciBmb3IgYSBkcm9wem9uZSBiZWhhdmlvci5cblx0ICogQGluc2F0bmNlXG5cdCAqL1xuXHRmdW5jdGlvbiByZXBvcnRTdGF0ZSAoX3N0YXRlKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHN0YXRlOiBfc3RhdGUsXG5cdFx0XHRiZWhhdmlvclRhcmdldDogX3N0YXRlLiRkcmFnZ2FibGVcblx0XHR9O1xuXHR9XG5cdFx0XG5cdHRoaXMuZW50aXR5KCcuYXJlYScsIGZ1bmN0aW9uICgpIHtcblx0XHRcblx0XHR0aGlzLmNhY2hlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgaXMgdGhlIGFyZWEgZW50aXRpZXMnIGFiaWxpdHkgdG8gcmVzcG9uZCB0byB0aGUgXCJncmFiXCIgYmVoYXZpb3Jcblx0XHQgKiBvZiBhIGRyYWdnYWJsZSdzIHNjb3BlIHNvbWV3aGVyZSBvbiBgdGhpcy5zY3JlZW5gLlxuXHRcdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS1cblx0XHQgKiBDYWNoZXMgdGhlIHBvc2l0aW9uIGFuZCBzaXplIG9mIHRoZSBhcmVhLlxuXHRcdCAqL1xuXHRcdHRoaXMucmVzcG9uZCgnZ3JhYicsIGZ1bmN0aW9uICgpIHtcblx0XHRcdHRoaXMuY2FjaGUgPSB7XG5cdFx0XHRcdHBvc2l0aW9uOiB0aGlzLmFic29sdXRlUG9zaXRpb24oKSxcblx0XHRcdFx0c2l6ZTogdGhpcy5zaXplKClcblx0XHRcdH07XG5cdFx0fSk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGlzIHRoZSBhcmVhIGVudGl0aWVzJyBhYmlsaXR5IHRvIHJlc3BvbmQgdG8gdGhlIFwicmVsZWFzZVwiIGJlaGF2aW9yXG5cdFx0ICogb2YgYSBkcmFnZ2FibGUncyBzY29wZSBzb21ld2hlcmUgb24gYHRoaXMuc2NyZWVuYC5cblx0XHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFx0ICogVGVzdHMgaWYgdGhlIGxvY2F0aW9uIG9mIHRoZSBkcm9wIGZhbGxzIGluIGJvdW5kcyBvZiB0aGUgYXJlYS5cblx0XHQgKiBBbHNvIHZhbGlkYXRlcyBpZiBvdXIgZHJvcHpvbmUgdGFrZXMgdGhlIGRyYWdnYWJsZSBhcyBkZWZpbmVkXG5cdFx0ICogYnkgdGhlIGBwbC10YWtlYCBhdHRyaWJ1dGUgb24gdGhlIGNvbXBvbmVudCBub2RlLlxuXHRcdCAqL1xuXHRcdHRoaXMucmVzcG9uZCgncmVsZWFzZScsIGZ1bmN0aW9uIChfZXZlbnQpIHtcblx0XHRcdGlmIChfZXZlbnQuc3RhdGUucHJvZ3Jlc3MucG9pbnQgJiYgdGhpcy5pc1BvaW50SW5Cb3VuZHMoX2V2ZW50LnN0YXRlLnByb2dyZXNzLnBvaW50KSkge1xuXHRcdFx0XHRpZiAodGhpcy50YWtlcyhfZXZlbnQuc3RhdGUuJGRyYWdnYWJsZS5pZCgpKSkge1xuXHRcdFx0XHRcdF9ldmVudC5zdGF0ZS4kZHJhZ2dhYmxlLnJlbW92ZUNsYXNzKCdQTFVDS0VEJyk7XG5cdFx0XHRcdFx0X2V2ZW50LnN0YXRlLiRoZWxwZXIuYWRkQ2xhc3MoJ0RST1BFRCcpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHRoaXMuZHJvcChfZXZlbnQuc3RhdGUuJGRyYWdnYWJsZSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMucmVqZWN0KF9ldmVudC5zdGF0ZSk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMubWlzc2VkKF9ldmVudC5zdGF0ZSk7XG5cblx0XHRcdF9ldmVudC5zdGF0ZS4kaGVscGVyLmFkZENsYXNzKCdSRVRVUk4nKTtcblx0XHR9KTtcblxuXHR9KTtcblxuXHR0aGlzLmluaXQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy50YWtlcygpLmZvckVhY2godGhpcy5iaW5kKGZ1bmN0aW9uIChfaWQpIHtcblx0XHRcdHRoaXMucmVxdWlyZShfaWQpO1xuXHRcdH0pKTtcblx0fTtcblxuXHR0aGlzLnRha2VzID0gZnVuY3Rpb24gKF9pZCkge1xuXHRcdHZhciB0YWtlc1xuXG5cdFx0Ly8gaWYgbm8gcGwtdGFrZSBhdHRyaWJ1dGUgaXMgZGVmaW5lZCB0aGVuXG5cdFx0Ly8gdGhlIGRyb3B6b25lIHdpbGwgdGFrZSBhbnkgZHJhZ2dhYmxlLlxuXHRcdGlmICghdGhpcy5wcm9wZXJ0aWVzLnRha2UpIHJldHVybiBfaWQgIT0gbnVsbCA/IHRydWUgOiBbXTtcblxuXHRcdHRha2VzID0gdGhpcy5wcm9wZXJ0aWVzLnRha2Uuc3BsaXQoL1xccysvKTtcblx0XHRyZXR1cm4gX2lkICE9IG51bGwgPyAhIX50YWtlcy5pbmRleE9mKF9pZCkgOiB0YWtlcztcblx0fTtcblxuXHR0aGlzLmlzUG9pbnRJbkJvdW5kcyA9IGZ1bmN0aW9uIChfcG9pbnQsIF95KSB7XG5cdFx0dmFyIHBvaW50LCBwb3NpdGlvbjtcblxuXHRcdHBvaW50ID0gcGwuUG9pbnQuY3JlYXRlKGFyZ3VtZW50cyk7XG5cblx0XHRpZiAocG9pbnQueCA+PSB0aGlzLmNhY2hlLnBvc2l0aW9uLnggJiYgcG9pbnQueCA8PSB0aGlzLmNhY2hlLnBvc2l0aW9uLngrdGhpcy5jYWNoZS5zaXplLndpZHRoKSB7XG5cdFx0XHRpZiAocG9pbnQueSA+PSB0aGlzLmNhY2hlLnBvc2l0aW9uLnkgJiYgcG9pbnQueSA8PSB0aGlzLmNhY2hlLnBvc2l0aW9uLnkrdGhpcy5jYWNoZS5zaXplLmhlaWdodCkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG5cblx0dGhpcy5pc0JveEluQm91bmRzID0gZnVuY3Rpb24gKF9wb2ludCwgX3NpemUpIHtcblx0XHQvLyBjb21taW5nIHNvb24hXG5cdH07XG5cblx0dGhpcy5iZWhhdmlvcignZHJvcCcsIGZ1bmN0aW9uIChfJGRyYWdnYWJsZSkge1xuXHRcdGlmIChfJGRyYWdnYWJsZS5pZCgpKSB0aGlzLnJlcXVpcmVkUXVldWUucmVhZHkoXyRkcmFnZ2FibGUuaWQoKSk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0YmVoYXZpb3JUYXJnZXQ6IF8kZHJhZ2dhYmxlXG5cdFx0fTtcblx0fSk7XG5cblx0LyoqXG5cdCAqIFBlcmZvcm1lZCB3aGVuIGEgZHJhZ2dhYmxlIGlzIGluIGJvdW5kcyBvZiB0aGUgYXJlYSBhbmRcblx0ICogaXMgcmVqZWN0ZWQ7IG9yIG91dCBvZiBib3VuZHMgb2YgdGhlIGRyb3B6b25lIGFyZWEuXG5cdCAqL1xuXHR0aGlzLmJlaGF2aW9yKCdtaXNzZWQnLCByZXBvcnRTdGF0ZSk7XG5cblx0LyoqXG5cdCAqIFBlcmZvcm1lZCB3aGVuIGEgZHJhZ2dhYmxlIGlzIGRyb3BlZCBpbiBib3VuZHMgb2YgdGhlIGFyZWEgYnV0XG5cdCAqIHRoZSBjb21wb25lbnQgZG9lcyBub3QgXCJ0YWtlXCIgaXQuXG5cdCAqL1xuXHR0aGlzLmJlaGF2aW9yKCdyZWplY3QnLCByZXBvcnRTdGF0ZSk7XG5cbn0pO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zZWEtdHVydGxlL3NvdXJjZS9qcy9jb21wb25lbnRzL2Ryb3B6b25lL2JlaGF2aW9yLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }
/******/ ]);