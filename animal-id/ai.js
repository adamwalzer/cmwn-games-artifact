/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	eval("/**\n * Index script\n * @module\n */\n\n__webpack_require__(2);\n\n__webpack_require__(3);\n\n__webpack_require__(4);\n\n__webpack_require__(5);\n\n__webpack_require__(6);\n\n__webpack_require__(7);\n\n__webpack_require__(8);\n\n__webpack_require__(9);\n\n__webpack_require__(10);\n\n__webpack_require__(11);\n\n__webpack_require__(12);\n\n__webpack_require__(13);\n\n__webpack_require__(14);\n\n__webpack_require__(15);\n\n__webpack_require__(16);\n\npl.game('animal-id', function () {\n\n\tthis.screen('title', function () {\n\n\t\tthis.ready = function () {\n\t\t\tthis.open();\n\t\t};\n\n\t\tthis.on('ui-open', function (_event) {\n\t\t\tif (this === _event.targetScope) {\n\t\t\t\tthis.title.start();\n\t\t\t}\n\t\t});\n\n\t\tthis.on('ready', function (_event) {\n\t\t\t// Screens are display:none then when READY get display:block.\n\t\t\t// When a screen is OPEN then it transitions a transform,\n\t\t\t// the delay is to prevent the transition failing to play\n\t\t\t// because of collision of these styles.\n\t\t\t//\n\t\t\tif (this.is(_event.target)) this.delay(0, this.open);\n\t\t});\n\t});\n\n\tthis.defineRule = function (_selector_scope, _selector_def, _definition) {\n\t\tvar _scope, _selector, source, prop, value;\n\t\t// Resolve arguments.\n\t\t_selector_scope.$els ? ( // (A) if we are a scope\n\t\t_scope = _selector_scope, // assign scope arg...\n\t\ttypeof _selector_def === 'string' ? // ...also, (B) if arg 2 is a string\n\t\t_selector = _scope.address() + _selector_def : ( // assing selector arg with scope address:\n\t\t_selector = _scope.address(), _definition = _selector_def)) : ( // (B) otherwise, assign selector arg to scope address, also assing definition arg\n\t\t_selector = _selector_scope, _definition = _selector_def); // (A) otherwise, assing selector and definition args.\n\n\t\tsource = _selector + ' {';\n\n\t\tfor (prop in _definition) {\n\t\t\tif (!_definition.hasOwnProperty(prop)) continue;\n\t\t\tvalue = _definition[prop];\n\t\t\tsource += prop.replace(/([A-Z]+)/g, '-$1').toLowerCase() + ': ' + value + ';';\n\t\t}\n\n\t\tsource += '}';\n\n\t\t$('<style type=\"text/css\" class=\"dynanic-styles\">' + source + '</style>').appendTo(document.body);\n\n\t\treturn source;\n\t};\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hbmltYWwtaWQvc291cmNlL2pzL2luZGV4LmpzP2YxYTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7b0JBSU8sQ0FBMkI7O29CQUMzQixDQUF3Qjs7b0JBQ3hCLENBQWU7O29CQUVmLENBQW9DOztvQkFDcEMsQ0FBbUM7O29CQUNuQyxDQUE2Qjs7b0JBQzdCLENBQTZCOztvQkFDN0IsQ0FBNkI7O29CQUM3QixFQUE4Qjs7b0JBQzlCLEVBQXVDOztvQkFDdkMsRUFBa0M7O29CQUNsQyxFQUFzQzs7b0JBQ3RDLEVBQXlDOztvQkFDekMsRUFBc0M7O29CQUN0QyxFQUFrQzs7QUFFekMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsWUFBWTs7QUFFaEMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsWUFBWTs7QUFFaEMsTUFBSSxDQUFDLEtBQUssR0FBRyxZQUFZO0FBQ3hCLE9BQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztHQUNaLENBQUM7O0FBRUYsTUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsVUFBVSxNQUFNLEVBQUU7QUFDcEMsT0FBSSxJQUFJLEtBQUssTUFBTSxDQUFDLFdBQVcsRUFBRTtBQUNoQyxRQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ25CO0dBQ0QsQ0FBQyxDQUFDOztBQUVGLE1BQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQVUsTUFBTSxFQUFFOzs7Ozs7QUFNbEMsT0FBSSxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDcEQsQ0FBQyxDQUFDO0VBRUwsQ0FBQyxDQUFDOztBQUVILEtBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxlQUFlLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRTtBQUN4RSxNQUFJLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUM7O0FBRTNDLGlCQUFlLENBQUMsSUFBSTtBQUNsQixRQUFNLEdBQUcsZUFBZTtBQUN6QixTQUFPLGFBQWEsS0FBSyxRQUFRO0FBQ2hDLFdBQVMsR0FBRyxNQUFNLENBQUMsT0FBTyxFQUFFLEdBQUcsYUFBYTtBQUMzQyxXQUFTLEdBQUcsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFFLFdBQVcsR0FBRyxhQUFhLENBQUM7QUFDM0QsV0FBUyxHQUFHLGVBQWUsRUFBRSxXQUFXLEdBQUcsYUFBYSxDQUFDLENBQUM7O0FBRTVELFFBQU0sR0FBRyxTQUFTLEdBQUMsSUFBSSxDQUFDOztBQUV4QixPQUFLLElBQUksSUFBSSxXQUFXLEVBQUU7QUFDekIsT0FBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUUsU0FBUztBQUNoRCxRQUFLLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzFCLFNBQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBQyxJQUFJLEdBQUMsS0FBSyxHQUFDLEdBQUc7R0FDdkU7O0FBRUQsUUFBTSxJQUFJLEdBQUc7O0FBRWIsR0FBQyxDQUFDLGdEQUFnRCxHQUFDLE1BQU0sR0FBQyxVQUFVLENBQUMsQ0FDbkUsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7QUFFMUIsU0FBTyxNQUFNLENBQUM7RUFDZCxDQUFDO0NBRUYsQ0FBQyIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBJbmRleCBzY3JpcHRcbiAqIEBtb2R1bGVcbiAqL1xuaW1wb3J0ICcuL3Rlc3RQbGF0Zm9ybUludGVncmF0aW9uJztcbmltcG9ydCAnanMtaW50ZXJhY3RpdmUtbGlicmFyeSc7XG5pbXBvcnQgJy4vY29uZmlnLmdhbWUnO1xuXG5pbXBvcnQgJy4vY29tcG9uZW50cy9zY3JlZW4tYmFzaWMvYmVoYXZpb3InO1xuaW1wb3J0ICcuL2NvbXBvbmVudHMvc2NyZWVuLXF1aXQvYmVoYXZpb3InO1xuaW1wb3J0ICcuL2NvbXBvbmVudHMvdGl0bGUvYmVoYXZpb3InO1xuaW1wb3J0ICcuL2NvbXBvbmVudHMvZnJhbWUvYmVoYXZpb3InO1xuaW1wb3J0ICcuL2NvbXBvbmVudHMvc2NvcmUvYmVoYXZpb3InO1xuaW1wb3J0ICcuL2NvbXBvbmVudHMvcmV2ZWFsL2JlaGF2aW9yJztcbmltcG9ydCAnLi9jb21wb25lbnRzL211bHRpcGxlLWNob2ljZS9iZWhhdmlvcic7XG5pbXBvcnQgJy4vY29tcG9uZW50cy9zZWxlY3RhYmxlL2JlaGF2aW9yJztcbmltcG9ydCAnLi9jb21wb25lbnRzL3NlbGVjdGFibGUtYWxsL2JlaGF2aW9yJztcbmltcG9ydCAnLi9jb21wb25lbnRzL3NlbGVjdGFibGUtcmV2ZWFsL2JlaGF2aW9yJztcbmltcG9ydCAnLi9jb21wb25lbnRzL2NsYXNzLXN3aXRjaGVyL2JlaGF2aW9yJztcbmltcG9ydCAnLi9jb21wb25lbnRzL21hdGNoLWdhbWUvYmVoYXZpb3InO1xuXG5wbC5nYW1lKCdhbmltYWwtaWQnLCBmdW5jdGlvbiAoKSB7XG5cblx0dGhpcy5zY3JlZW4oJ3RpdGxlJywgZnVuY3Rpb24gKCkge1xuXHRcdFxuXHRcdHRoaXMucmVhZHkgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aGlzLm9wZW4oKTtcblx0XHR9O1xuXG5cdFx0dGhpcy5vbigndWktb3BlbicsIGZ1bmN0aW9uIChfZXZlbnQpIHtcblx0XHRcdGlmICh0aGlzID09PSBfZXZlbnQudGFyZ2V0U2NvcGUpIHtcblx0XHRcdFx0dGhpcy50aXRsZS5zdGFydCgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG4gXHRcdHRoaXMub24oJ3JlYWR5JywgZnVuY3Rpb24gKF9ldmVudCkge1xuIFx0XHRcdC8vIFNjcmVlbnMgYXJlIGRpc3BsYXk6bm9uZSB0aGVuIHdoZW4gUkVBRFkgZ2V0IGRpc3BsYXk6YmxvY2suXG4gXHRcdFx0Ly8gV2hlbiBhIHNjcmVlbiBpcyBPUEVOIHRoZW4gaXQgdHJhbnNpdGlvbnMgYSB0cmFuc2Zvcm0sXG4gXHRcdFx0Ly8gdGhlIGRlbGF5IGlzIHRvIHByZXZlbnQgdGhlIHRyYW5zaXRpb24gZmFpbGluZyB0byBwbGF5XG4gXHRcdFx0Ly8gYmVjYXVzZSBvZiBjb2xsaXNpb24gb2YgdGhlc2Ugc3R5bGVzLlxuIFx0XHRcdC8vIFxuIFx0XHRcdGlmICh0aGlzLmlzKF9ldmVudC50YXJnZXQpKSB0aGlzLmRlbGF5KDAsIHRoaXMub3Blbik7XG4gIFx0XHR9KTtcblxuXHR9KTtcblxuXHR0aGlzLmRlZmluZVJ1bGUgPSBmdW5jdGlvbiAoX3NlbGVjdG9yX3Njb3BlLCBfc2VsZWN0b3JfZGVmLCBfZGVmaW5pdGlvbikge1xuXHRcdHZhciBfc2NvcGUsIF9zZWxlY3Rvciwgc291cmNlLCBwcm9wLCB2YWx1ZTtcblx0XHQvLyBSZXNvbHZlIGFyZ3VtZW50cy5cblx0XHRfc2VsZWN0b3Jfc2NvcGUuJGVscyA/IC8vIChBKSBpZiB3ZSBhcmUgYSBzY29wZVxuXHRcdFx0KF9zY29wZSA9IF9zZWxlY3Rvcl9zY29wZSwgLy8gYXNzaWduIHNjb3BlIGFyZy4uLlxuXHRcdFx0dHlwZW9mIF9zZWxlY3Rvcl9kZWYgPT09ICdzdHJpbmcnID8gLy8gLi4uYWxzbywgKEIpIGlmIGFyZyAyIGlzIGEgc3RyaW5nXG5cdFx0XHRcdF9zZWxlY3RvciA9IF9zY29wZS5hZGRyZXNzKCkgKyBfc2VsZWN0b3JfZGVmOiAvLyBhc3Npbmcgc2VsZWN0b3IgYXJnIHdpdGggc2NvcGUgYWRkcmVzczpcblx0XHRcdFx0KF9zZWxlY3RvciA9IF9zY29wZS5hZGRyZXNzKCksIF9kZWZpbml0aW9uID0gX3NlbGVjdG9yX2RlZikpOiAvLyAoQikgb3RoZXJ3aXNlLCBhc3NpZ24gc2VsZWN0b3IgYXJnIHRvIHNjb3BlIGFkZHJlc3MsIGFsc28gYXNzaW5nIGRlZmluaXRpb24gYXJnXG5cdFx0XHQoX3NlbGVjdG9yID0gX3NlbGVjdG9yX3Njb3BlLCBfZGVmaW5pdGlvbiA9IF9zZWxlY3Rvcl9kZWYpOyAvLyAoQSkgb3RoZXJ3aXNlLCBhc3Npbmcgc2VsZWN0b3IgYW5kIGRlZmluaXRpb24gYXJncy5cblxuXHRcdHNvdXJjZSA9IF9zZWxlY3RvcisnIHsnO1xuXG5cdFx0Zm9yIChwcm9wIGluIF9kZWZpbml0aW9uKSB7XG5cdFx0XHRpZiAoIV9kZWZpbml0aW9uLmhhc093blByb3BlcnR5KHByb3ApKSBjb250aW51ZTtcblx0XHRcdHZhbHVlID0gX2RlZmluaXRpb25bcHJvcF07XG5cdFx0XHRzb3VyY2UgKz0gcHJvcC5yZXBsYWNlKC8oW0EtWl0rKS9nLCAnLSQxJykudG9Mb3dlckNhc2UoKSsnOiAnK3ZhbHVlKyc7J1xuXHRcdH1cblxuXHRcdHNvdXJjZSArPSAnfSdcblxuXHRcdCQoJzxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIiBjbGFzcz1cImR5bmFuaWMtc3R5bGVzXCI+Jytzb3VyY2UrJzwvc3R5bGU+Jylcblx0XHRcdC5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KTtcblxuXHRcdHJldHVybiBzb3VyY2U7XG5cdH07XG5cbn0pO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hbmltYWwtaWQvc291cmNlL2pzL2luZGV4LmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 2 */
/***/ function(module, exports) {

	eval("if (window.parent === window) {\n\twindow.location.href = 'http://www.changemyworldnow.com/';\n} else {\n\tdocument.domain = 'changemyworldnow.com';\n}//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hbmltYWwtaWQvc291cmNlL2pzL3Rlc3RQbGF0Zm9ybUludGVncmF0aW9uLmpzP2ZmMGEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLE1BQU0sRUFBRTtBQUM3QixPQUFNLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxrQ0FBa0MsQ0FBQztDQUMxRCxNQUFNO0FBQ04sU0FBUSxDQUFDLE1BQU0sR0FBRyxzQkFBc0IsQ0FBQyIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaWYgKHdpbmRvdy5wYXJlbnQgPT09IHdpbmRvdykge1xuXHR3aW5kb3cubG9jYXRpb24uaHJlZiA9ICdodHRwOi8vd3d3LmNoYW5nZW15d29ybGRub3cuY29tLyc7XG59IGVsc2Uge1xuXHRkb2N1bWVudC5kb21haW4gPSAnY2hhbmdlbXl3b3JsZG5vdy5jb20nO1xufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hbmltYWwtaWQvc291cmNlL2pzL3Rlc3RQbGF0Zm9ybUludGVncmF0aW9uLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 3 */
/***/ function(module, exports) {

	eval("/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/build/\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\n/**\\n * Boot file for the Play library.\\n *\\n * @module\\n *\\n * @author Micah Rolon <micah@ginasink.com>\\n *\\n * @requires jQExtentions\\n * @requires play\\n */\\n\\n__webpack_require__(4);\\n\\nvar _play = __webpack_require__(15);\\n\\nvar _play2 = _interopRequireDefault(_play);\\n\\n/**\\n * Begin running the library\\n */\\nfunction run() {\\n  _play2['default'].game.run();\\n}\\n\\n// export namespace to global object.\\nwindow.play = window.pl = _play2['default'];\\n\\n// Invoke 'run' when DOM has finished loading.\\ndocument.addEventListener('DOMContentLoaded', run, false);//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvbWFpbi5qcz82NDgwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7b0JBVU8sQ0FBYzs7Z0NBQ0osRUFBTTs7Ozs7OztBQUt2QixTQUFTLEdBQUcsR0FBSTtBQUNmLG9CQUFLLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztDQUNoQjs7O0FBR0QsTUFBTSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsRUFBRSxvQkFBTyxDQUFDOzs7QUFHL0IsUUFBUSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQm9vdCBmaWxlIGZvciB0aGUgUGxheSBsaWJyYXJ5LlxuICpcbiAqIEBtb2R1bGVcbiAqXG4gKiBAYXV0aG9yIE1pY2FoIFJvbG9uIDxtaWNhaEBnaW5hc2luay5jb20+XG4gKlxuICogQHJlcXVpcmVzIGpRRXh0ZW50aW9uc1xuICogQHJlcXVpcmVzIHBsYXlcbiAqL1xuaW1wb3J0ICdqUUV4dGVudGlvbnMnO1xuaW1wb3J0IHBsYXkgZnJvbSAncGxheSc7XG5cbi8qKlxuICogQmVnaW4gcnVubmluZyB0aGUgbGlicmFyeVxuICovXG5mdW5jdGlvbiBydW4gKCkge1xuXHRwbGF5LmdhbWUucnVuKCk7XG59XG5cbi8vIGV4cG9ydCBuYW1lc3BhY2UgdG8gZ2xvYmFsIG9iamVjdC5cbndpbmRvdy5wbGF5ID0gd2luZG93LnBsID0gcGxheTtcblxuLy8gSW52b2tlICdydW4nIHdoZW4gRE9NIGhhcyBmaW5pc2hlZCBsb2FkaW5nLlxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIHJ1biwgZmFsc2UpO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zb3VyY2UvbWFpbi5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"module.exports = __webpack_require__(3);//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbnRlcm9wLXJlcXVpcmUtZGVmYXVsdC5qcz8zODViIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qc1wiKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvaW50ZXJvcC1yZXF1aXJlLWRlZmF1bHQuanNcbiAqKiBtb2R1bGUgaWQgPSAyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\teval(\"\\\"use strict\\\";\\n\\nexports.__esModule = true;\\n\\nexports.default = function (obj) {\\n  return obj && obj.__esModule ? obj : {\\n    default: obj\\n  };\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanM/OTA3YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIGRlZmF1bHQ6IG9ialxuICB9O1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzXG4gKiogbW9kdWxlIGlkID0gM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\n/**\\n * Extentions to jQuery used by the library.\\n * \\n * @module\\n * @author Micah Rolon <micah@ginasink.com>\\n *\\n * @requires types/Dimensions\\n * @requires Matrix\\n */\\n\\nvar _typesDimensions = __webpack_require__(5);\\n\\nvar _libMatrix = __webpack_require__(14);\\n\\nvar _libMatrix2 = _interopRequireDefault(_libMatrix);\\n\\n/**\\n * jQuery's prototype\\n * @external jQuery\\n * @see {@link http://api.jquery.com/}\\n */\\n\\n(function () {\\n\\t/**\\n  * Resolves the scope for each of the set of matched nodes.\\n  * @function external:jQuery#scope\\n  * @returns {Scope|array} Scope - for 1 result. array - for multiple.\\n  */\\n\\tthis.scope = function () {\\n\\t\\tvar result;\\n\\n\\t\\tresult = [];\\n\\n\\t\\tthis.each(function () {\\n\\t\\t\\tvar $node, scope;\\n\\n\\t\\t\\t$node = $(this);\\n\\t\\t\\tscope = $node.data('pl-scope');\\n\\n\\t\\t\\tif (!scope) {\\n\\t\\t\\t\\tscope = $node.closest('.pl-scope').data('pl-scope');\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (scope) result.push(scope);\\n\\t\\t});\\n\\n\\t\\treturn result.length > 1 ? result : result[0];\\n\\t};\\n\\n\\t/**\\n  * Resolves the id on the first node in the collection. The id can be sourced from a node's 'id', 'pl-id' or 'pl-component' arguments.\\n  * @function external:jQuery#id\\n  * @arg {string} [_set] Name to set as the node's id.\\n  * @returns {string} The resolved id.\\n  */\\n\\tthis.id = function (_set) {\\n\\t\\tif (_set !== undefined) {\\n\\t\\t\\t// Remove attribute.\\n\\t\\t\\tif (~['', null].indexOf(_set)) {\\n\\t\\t\\t\\tthis.attr('id', null);\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If document already has the id defined then set as a unique library id.\\n\\t\\t\\tif ($(_set).length) {\\n\\t\\t\\t\\tthis.attr('pl-id', _set);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.attr('id', _set);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn this.attr('id') || this.attr('pl-id') || this.attr('pl-component');\\n\\t};\\n\\n\\t/**\\n  * Provides the 'relative' CSS selector for the first node in the collection.\\n  * @function external:jQuery#address\\n  * @returns {string}\\n  *\\n  * @example\\n  * // HTML: <div id=\\\"sweater\\\" class=\\\"wide\\\"></div>\\n  * $('#sweater').address() // div#sweater.wide\\n  */\\n\\tthis.address = function () {\\n\\t\\tvar tag, id, classes;\\n\\n\\t\\ttag = this[0].nodeName.toLowerCase();\\n\\t\\tid = this.attr('id');\\n\\t\\tclasses = this.attr('class') ? '.' + this.attr('class').split(' ').join('.') : '';\\n\\n\\t\\treturn tag + (id ? '#' + id : '') + classes;\\n\\t};\\n\\n\\t/**\\n  * Provides a node's UPPER CASE class names. Given '_test' it will check if the node has the class.\\n  * @function external:jQuery#state\\n  * @arg {string} [_test] The UPPER CASE class name to test on the first node in the collection.\\n  * @returns {string|array|boolean} string - for one result. array - for multiple. boolean - for tests.\\n  */\\n\\tthis.state = function (_test) {\\n\\t\\tvar classes;\\n\\n\\t\\tif (_test) return this.hasClass(_test.toUpperCase());\\n\\n\\t\\tclasses = (this.attr('class') || '').match(/[0-9A-Z]+(?:-[0-9A-Z]+)?/g);\\n\\n\\t\\treturn classes && (classes.length === 1 ? classes[0] : classes);\\n\\t};\\n\\n\\t/**\\n  * Provides the jQuery offset for the first node in the collection.\\n  * Given a point, all nodes in the collection will get {position: absolute;} to the corrdinates.\\n  * @function external:jQuery#absolutePosition\\n  * @returns {Point}\\n  */\\n\\tthis.absolutePosition = function () {\\n\\t\\tvar offset;\\n\\n\\t\\tif (!arguments.length) {\\n\\t\\t\\toffset = this.offset();\\n\\n\\t\\t\\treturn _typesDimensions.Point.create().set(offset.left, offset.top);\\n\\t\\t} else {\\n\\t\\t\\toffset = _typesDimensions.Point.create(arguments);\\n\\n\\t\\t\\tthis.css({\\n\\t\\t\\t\\tposition: 'absolute',\\n\\t\\t\\t\\ttop: offset.y,\\n\\t\\t\\t\\tleft: offset.x\\n\\t\\t\\t});\\n\\n\\t\\t\\treturn offset;\\n\\t\\t}\\n\\t};\\n\\n\\t/**\\n  * Sets a CSS matrix transform on all nodes in the collection. (overloaded)\\n  * @function external:jQuery#transform\\n  * @arg {number} [_scaleX] - scale x\\n  * @arg {number} [_shearY] - shear y\\n  * @arg {number} [_shearX] - shear x\\n  * @arg {number} [_scaleY] - scale y\\n  * @arg {number} [_translateX] - translate x\\n  * @arg {number} [_translateY] - translate y\\n  * @returns {Matrix}\\n  */\\n\\n\\t/**\\n  * Provides the CSS matrix transform for the first node in the collection.\\n  * @function external:jQuery#transform\\n  * @returns {Matrix}\\n  */\\n\\tthis.transform = function () {\\n\\t\\tvar t, matrix, is3d;\\n\\n\\t\\tmatrix = new _libMatrix2['default']();\\n\\n\\t\\tif (!arguments.length) {\\n\\t\\t\\tt = this.css('transform');\\n\\t\\t\\tis3d = !! ~t.indexOf('matrix3d');\\n\\n\\t\\t\\tif (t !== 'none') {\\n\\t\\t\\t\\tt = ((t.match(/\\\\(([,\\\\d\\\\.\\\\s\\\\-]+)\\\\)/) || [])[1] || '').split(/\\\\s*,\\\\s*/);\\n\\t\\t\\t\\tif (is3d) {\\n\\t\\t\\t\\t\\tt = (function (_matrix) {\\n\\t\\t\\t\\t\\t\\tvar i, result;\\n\\n\\t\\t\\t\\t\\t\\tresult = [];\\n\\n\\t\\t\\t\\t\\t\\tfor (i = 0; i < _matrix.length; i += 4) {\\n\\t\\t\\t\\t\\t\\t\\tresult = result.concat(_matrix.slice(i, i + 2));\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\treturn result;\\n\\t\\t\\t\\t\\t})(t);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tt = t.map(parseFloat);\\n\\n\\t\\t\\t\\tmatrix.setTransform.apply(matrix, t);\\n\\n\\t\\t\\t\\treturn matrix;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn t;\\n\\t\\t}\\n\\n\\t\\tmatrix.setTransform.apply(matrix, arguments);\\n\\n\\t\\tthis.css('transform', matrix.toCSS());\\n\\n\\t\\treturn matrix;\\n\\t};\\n\\n\\t/**\\n  * Getter/Setter for the CSS transform translation. (overloaded)\\n  * @function external:jQuery#transformPosition\\n  * @arg {Point} _point - A point object {x,y}\\n  * @returns {Point}\\n  */\\n\\n\\t/**\\n  * Getter/Setter for the CSS transform translation.\\n  * @function external:jQuery#transformPosition\\n  * @arg {number} _x - x coordinate\\n  * @arg {number} _y - y coordinate\\n  * @returns {Point}\\n  */\\n\\tthis.transformPosition = function () {\\n\\t\\tvar matrix, point;\\n\\n\\t\\tmatrix = this.transform();\\n\\t\\tpoint = _typesDimensions.Point.create();\\n\\n\\t\\tif (matrix !== 'none') {\\n\\t\\t\\tif (!arguments.length) {\\n\\t\\t\\t\\tpoint.set(matrix.e, matrix.f);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tmatrix = new _libMatrix2['default']();\\n\\n\\t\\t\\t\\tpoint.set.apply(point, arguments);\\n\\t\\t\\t\\tmatrix.translate(point.x, point.y);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn point;\\n\\t};\\n}).call($.fn);//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _Object$defineProperties = __webpack_require__(6)['default'];\\n\\nvar _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * \\n * @module\\n * @version 1.1\\n * @author Micah Rolon <functionmicah@gmail.com>\\n * @requires module:types/BasicArray~BasicArray\\n *\\n * @desc *Created: 11/12/14*\\n *\\n * This file contains objects for containing values about a plane. i.e. x or width.\\n * Adds the convenience of keeping these values paired to passed around your application.\\n * It also includes methods which you perform on the values and returns a new object\\n * so the original values are maintained.\\n *\\n * #### Usage\\n *\\n * New instances can be created by calling the create method.\\n * ```\\n * cursorLocation = Point.create();\\n * ```\\n *\\n * Then call `set()` to apply your values.\\n * ```\\n * cursorLocation.set(event.clientX, event.clientY);\\n * ```\\n *\\n * Then you can use the calculation methods to perform transformations.\\n * ```\\n * relativeCursor = cursorLocation.scale(zoom);\\n * ```\\n *\\n * #### Developer Notes\\n *\\n * When adding new methods make sure you are returning a new instance.\\n * Dimensional objects are meant to be immutable.\\n *\\n * Follow this pattern:\\n * ```\\n * this.method = function () {\\n *     // set with your calculated values.\\n *     return this.create().set( ... )\\n * }\\n * ```\\n *\\n * #### Change Log\\n * *v1.1 - 12/13/15*\\n * - Defined setter/getter properties for unique planes keys. You can now do `point.width = 10`.\\n */\\n\\n/*jslint browser: true, eqeq: true, nomen: true, sloppy: true, white: true */\\n\\nvar _typesBasicArray = __webpack_require__(9);\\n\\nvar _typesBasicArray2 = _interopRequireDefault(_typesBasicArray);\\n\\nvar Dimension, Size, Point;\\n\\n/**\\n * The native Array\\n * @external Array\\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array}\\n */\\n\\n/**\\n * Array prototype extension\\n * Creates an instance of `_Thing` and passes the array to its set function as its arguments.\\n * @function external:Array#to\\n * @arg {Point|Size|string} _Thing - A Dimension object or one the strings 'point'/'size'\\n * @example\\n * somePoint = [10, 10].to(Point);\\n * somePoint = [10, 10].to('point');\\n */\\nArray.prototype.to = function (_Thing) {\\n\\tvar map;\\n\\n\\tmap = {\\n\\t\\tpoint: Point,\\n\\t\\tsize: Size\\n\\t};\\n\\n\\tif (typeof _Thing === 'string') {\\n\\t\\treturn map[_Thing.toLowerCase()].create().set(this);\\n\\t} else if (typeof _Thing === 'object' && ~[Point.set, Size.set].indexOf(_Thing.set)) {\\n\\t\\tif (!_Thing.isPrototypeOf(this)) {\\n\\t\\t\\treturn _Thing.set.apply(_Thing.create(), this);\\n\\t\\t}\\n\\t}\\n\\n\\treturn this;\\n};\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. use `Dimension.create()` to get a new instance.\\n * @class\\n * @classdesc Base class for dimensional objects consisting of 2 planes.<br>\\n * <span class=\\\"important\\\">NOTE:</span> This is an immutable class. Methods return a new object with the original as its prototype.\\n * @extends module:types/BasicArray~BasicArray\\n */\\nDimension = _typesBasicArray2['default'].extend(function () {\\n\\tvar originalMap;\\n\\n\\toriginalMap = this.map;\\n\\n\\tthis[0] = this[1] = 0;\\n\\tthis.planeMap = null, this.length = 2;\\n\\n\\t/**\\n  * Provides a new instance.\\n  * @arg {array} _argumentsArray - Create a new instace with an arguments array.\\n  * @returns {Dimension}\\n  */\\n\\tthis.create = function (_argumentsArray) {\\n\\t\\tvar instance;\\n\\n\\t\\tinstance = this.proto();\\n\\n\\t\\tif (_argumentsArray) instance.set.apply(instance, _argumentsArray);\\n\\n\\t\\treturn instance;\\n\\t};\\n\\n\\t/**\\n  * Incerement each plane by a value or specify each plane.\\n  * @arg {number} _val - plane a of (a,b)\\n  * @arg {number} [_plane2] - plane b of (a,b)\\n  * @returns {Dimension}\\n  */\\n\\tthis.inc = function (_val, _plane2) {\\n\\t\\tvar a, b;\\n\\n\\t\\tif (_val.length === 2) {\\n\\t\\t\\ta = _val[0];\\n\\t\\t\\tb = _val[1];\\n\\t\\t} else if (_plane2 != null) {\\n\\t\\t\\ta = _val;\\n\\t\\t\\tb = _plane2;\\n\\t\\t} else {\\n\\t\\t\\ta = b = _val;\\n\\t\\t}\\n\\n\\t\\treturn this.create().set(this[0] + a, this[1] + b);\\n\\t};\\n\\n\\t/**\\n  * Decerement each plane by a value or specify each plane.\\n  * @arg {number} _val - plane a of (a,b)\\n  * @arg {number} [_plane2] - plane b of (a,b)\\n  * @returns {Dimension}\\n  */\\n\\tthis.dec = function (_val, _plane2) {\\n\\t\\tvar a, b;\\n\\n\\t\\tif (_val.length === 2) {\\n\\t\\t\\ta = _val[0];\\n\\t\\t\\tb = _val[1];\\n\\t\\t} else if (_plane2 != null) {\\n\\t\\t\\ta = _val;\\n\\t\\t\\tb = _plane2;\\n\\t\\t} else {\\n\\t\\t\\ta = b = _val;\\n\\t\\t}\\n\\n\\t\\treturn this.create().set(this[0] - a, this[1] - b);\\n\\t};\\n\\n\\t/**\\n  * Multiply each plane by a value or specify each plane.\\n  * @arg {number} _scale - plane a of (a,b)\\n  * @arg {number} [_plane2] - plane b of (a,b)\\n  * @returns {Dimension}\\n  */\\n\\tthis.scale = function (_scale, _plane2) {\\n\\t\\treturn this.create().set(this[0] * _scale, this[1] * (_plane2 != null ? _plane2 : _scale));\\n\\t};\\n\\n\\t/**\\n  * Perfom a Math function on each plane\\n  * @arg {string} _fun - a string of the function name in the JS Math object,\\n  * followed by the whatever arguments the function takes after its first\\n  * since the first argument is the plane value.\\n  * @returns {Dimension}\\n  */\\n\\tthis.math = function (_fun) {\\n\\t\\tvar args = [].slice.call(arguments, 1);\\n\\n\\t\\treturn this.create().set(Math[_fun].apply(Math, [this[0]].concat(args)), Math[_fun].apply(Math, [this[1]].concat(args)));\\n\\t};\\n\\n\\t/**\\n  * Takes each plane value and passes it to parseInt().\\n  * @returns {Dimension}\\n  */\\n\\tthis.parseInt = function () {\\n\\t\\treturn this.create().set(parseInt(this[0]), parseInt(this[1]));\\n\\t};\\n\\n\\t/**\\n  * Takes each plane value and passes it to parseFloat().\\n  * @returns {Dimension}\\n  */\\n\\tthis.parseFloat = function () {\\n\\t\\treturn this.create().set(parseFloat(this[0]), parseFloat(this[1]));\\n\\t};\\n\\n\\t/**\\n  * Resolves the name of the plane at the given index.\\n  * @arg {number} _index - The index of the plane.\\n  * @returns {string}\\n  */\\n\\tthis.planeOf = function (_index) {\\n\\t\\tif (isNaN(parseInt(_index))) return null;\\n\\t\\treturn this.planeMap[_index];\\n\\t};\\n\\n\\t/**\\n  * Make a new array by iterating over each plane.<br>\\n  * See [`Array.prototype.map()`]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map}\\n  * @arg {function} _handler - handler for each index.\\n  * @override\\n  * @returns {Dimension}\\n  */\\n\\tthis.map = function (_handler) {\\n\\t\\treturn originalMap.call(this, _handler).to(Object.getPrototypeOf(this));\\n\\t};\\n\\n\\t/**\\n  * Multiplies the planes.\\n  * @returns {number}\\n  */\\n\\tthis.product = function () {\\n\\t\\treturn this[0] * this[1];\\n\\t};\\n\\n\\t/**\\n  * Divides the planes.\\n  * @returns {number}\\n  */\\n\\tthis.ratio = function () {\\n\\t\\treturn this[0] / this[1];\\n\\t};\\n\\n\\tthis.quotient = function () {\\n\\t\\treturn Math.floor(this[0] / this[1]);\\n\\t};\\n\\n\\tthis.remainder = function () {\\n\\t\\treturn this[0] % this[1];\\n\\t};\\n});\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. use `Size.create()` to get a new instance.\\n * @class\\n * @extends module:types/Dimensions~Dimension\\n * @classdesc 2 Dimensional object containing width and height.<br>\\n * <span class=\\\"important\\\">NOTE:</span> This is an immutable class. Methods return a new object with the original as its prototype.\\n * @prop {number} width - The width.\\n * @prop {number} height - The height.\\n */\\nSize = Dimension.extend(function () {\\n\\t/**\\n  * Maps the names of the indexes.<br>\\n  * See [Dimension#planeOf]{@link module:types/Dimensions~Dimension#planeOf} for resolving plane name.\\n  * @protected\\n  * @default ['width', 'height']\\n  */\\n\\tthis.planeMap = ['width', 'height'];\\n\\n\\t_Object$defineProperties(this, {\\n\\t\\twidth: {\\n\\t\\t\\tget: function get() {\\n\\t\\t\\t\\treturn this[0];\\n\\t\\t\\t},\\n\\n\\t\\t\\tset: function set(_val) {\\n\\t\\t\\t\\tthis[0] = Number(_val);\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\theight: {\\n\\t\\t\\tget: function get() {\\n\\t\\t\\t\\treturn this[1];\\n\\t\\t\\t},\\n\\n\\t\\t\\tset: function set(_val) {\\n\\t\\t\\t\\tthis[1] = Number(_val);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\n\\t/**\\n  * Define the size with an object. (overloaded)\\n  * @function module:types/Dimensions~Size#set\\n  * @arg {object} _size - A size object {width, height}.\\n  * @returns {Size}\\n  */\\n\\n\\t/**\\n  * Define the size with an array. (overloaded)\\n  * @function module:types/Dimensions~Size#set\\n  * @arg {array} _size - A size array [width, height].\\n  * @returns {Size}\\n  */\\n\\n\\t/**\\n  * Define the size.\\n  * @arg {number} _width - The width.\\n  * @arg {number} _height - The height.\\n  * @returns {Size}\\n  */\\n\\tthis.set = function (_width, _height) {\\n\\t\\tif (arguments.length === 1) {\\n\\t\\t\\tif (_width.width !== undefined && _width.height !== undefined) {\\n\\t\\t\\t\\tthis[0] = Number(_width.width);\\n\\t\\t\\t\\tthis[1] = Number(_width.height);\\n\\t\\t\\t} else if (_width.length === 2) {\\n\\t\\t\\t\\tthis[0] = Number(_width[0]);\\n\\t\\t\\t\\tthis[1] = Number(_width[1]);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tthis[0] = Number(_width);\\n\\t\\t\\tthis[1] = Number(_height);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * Calculates the hypotenuse.\\n  * @see {@link https://en.wikipedia.org/wiki/Hypotenuse}\\n  * @returns {number}\\n  */\\n\\tthis.hypotenuse = function () {\\n\\t\\treturn Math.sqrt(Math.pow(this.width, 2) + Math.pow(this.height, 2));\\n\\t};\\n\\n\\t/**\\n  * Sets width and height properties on the given object. If the object is an HTML node then it will be set on the nodes style object.\\n  * @arg {object|HTMLElement} - The object or DOM node.\\n  * @returns {this}\\n  */\\n\\tthis.applyTo = function (_object) {\\n\\t\\tif (_object.nodeType === document.ELEMENT_NODE) {\\n\\t\\t\\tif (!(_object.width !== undefined || _object.height !== undefined)) {\\n\\t\\t\\t\\t_object.style.width = this.width;\\n\\t\\t\\t\\t_object.style.height = this.height;\\n\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t_object.width = this.width;\\n\\t\\t_object.height = this.height;\\n\\n\\t\\treturn this;\\n\\t};\\n});\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. use `Point.create()` to get a new instance.\\n * @class\\n * @extends module:types/Dimensions~Dimension\\n * @classdesc Object containing coordinates on a 2-dimensional cartesian plane.<br>\\n * <span class=\\\"important\\\">NOTE:</span> This is an immutable class. Methods return a new object with the original as its prototype.\\n * @prop {number} x - The x coordinate.\\n * @prop {number} y - The y coordinate.\\n */\\nPoint = Dimension.extend(function () {\\n\\t/**\\n  * Maps the names of the indexes.<br>\\n  * See [Dimension#planeOf]{@link module:types/Dimensions~Dimension#planeOf} for resolving plane name.\\n  * @protected\\n  * @default ['x', 'y']\\n  */\\n\\tthis.planeMap = ['x', 'y'];\\n\\n\\t_Object$defineProperties(this, {\\n\\t\\tx: {\\n\\t\\t\\tget: function get() {\\n\\t\\t\\t\\treturn this[0];\\n\\t\\t\\t},\\n\\n\\t\\t\\tset: function set(_val) {\\n\\t\\t\\t\\tthis[0] = Number(_val);\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\ty: {\\n\\t\\t\\tget: function get() {\\n\\t\\t\\t\\treturn this[1];\\n\\t\\t\\t},\\n\\n\\t\\t\\tset: function set(_val) {\\n\\t\\t\\t\\tthis[1] = Number(_val);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\n\\t/**\\n  * Define the point with an object. (overloaded)\\n  * @function module:types/Dimensions~Point#set\\n  * @arg {object} _point - A point object {x, y}.\\n  * @returns {Point}\\n  */\\n\\n\\t/**\\n  * Define the point with an array. (overloaded)\\n  * @function module:types/Dimensions~Point#set\\n  * @arg {array} _point - A point array [x, y].\\n  * @returns {Point}\\n  */\\n\\n\\t/**\\n  * Define the point.\\n  * @arg {number} _x - The x.\\n  * @arg {number} _y - The y.\\n  * @returns {Point}\\n  */\\n\\tthis.set = function (_x, _y) {\\n\\t\\tif (arguments.length === 1) {\\n\\t\\t\\tif (_x.x !== undefined && _x.y !== undefined) {\\n\\t\\t\\t\\tthis[0] = Number(_x.x);\\n\\t\\t\\t\\tthis[1] = Number(_x.y);\\n\\t\\t\\t} else if (_x.length === 2) {\\n\\t\\t\\t\\tthis[0] = Number(_x[0]);\\n\\t\\t\\t\\tthis[1] = Number(_x[1]);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tthis[0] = Number(_x);\\n\\t\\t\\tthis[1] = Number(_y);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * Calculates the distance between the insatnce and a point object.\\n  * @arg {Point} _point - A point object {x,y}.\\n  * @returns {Size}\\n  */\\n\\tthis.distance = function (_point) {\\n\\t\\tif (_point.x !== undefined && _point.y !== undefined) {\\n\\t\\t\\treturn Size.create().set(_point.x - this.x, _point.y - this.y);\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t};\\n\\n\\t/**\\n  * Sets x and y properties on the given object. If the object is an HTML node then the left and top properties will be set on the nodes style object.\\n  * @arg {object|HTMLElement} - The object or DOM node.\\n  * @returns {this}\\n  */\\n\\tthis.applyTo = function (_object) {\\n\\t\\tif (_object.nodeType === document.ELEMENT_NODE) {\\n\\t\\t\\t_object.style.left = this.x;\\n\\t\\t\\t_object.style.top = this.y;\\n\\t\\t} else {\\n\\t\\t\\t_object.x = this.x;\\n\\t\\t\\t_object.y = this.y;\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * Rotate the point based on an origin point and an angle in degrees.\\n  * @arg {Point} _origin - A point object {x,y}.\\n  * @arg {number} _angle - The angle of rotation in degrees.\\n  * @returns {this}\\n  */\\n\\tthis.rotate = function (_origin, _angle) {\\n\\t\\tvar x, y, rad;\\n\\n\\t\\trad = _angle * (Math.PI / 180);\\n\\n\\t\\tx = this.x - _origin.x;\\n\\t\\ty = this.y - _origin.y;\\n\\n\\t\\treturn this.create().set(Math.sin(rad) * x - Math.cos(rad) * y + _origin.x, Math.cos(rad) * x + Math.sin(rad) * y + _origin.y);\\n\\t};\\n});\\n\\nexports['default'] = { Dimension: Dimension, Size: Size, Point: Point };\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"module.exports = { \\\"default\\\": __webpack_require__(7), __esModule: true };//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnRpZXMuanM/YTRjNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0IiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnRpZXNcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0aWVzLmpzXG4gKiogbW9kdWxlIGlkID0gNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var $ = __webpack_require__(8);\\nmodule.exports = function defineProperties(T, D){\\n  return $.setDescs(T, D);\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0aWVzLmpzPzI0NTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciAkID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy8kJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoVCwgRCl7XG4gIHJldHVybiAkLnNldERlc2NzKFQsIEQpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydGllcy5qc1xuICoqIG1vZHVsZSBpZCA9IDdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\teval(\"var $Object = Object;\\nmodule.exports = {\\n  create:     $Object.create,\\n  getProto:   $Object.getPrototypeOf,\\n  isEnum:     {}.propertyIsEnumerable,\\n  getDesc:    $Object.getOwnPropertyDescriptor,\\n  setDesc:    $Object.defineProperty,\\n  setDescs:   $Object.defineProperties,\\n  getKeys:    $Object.keys,\\n  getNames:   $Object.getOwnPropertyNames,\\n  getSymbols: $Object.getOwnPropertySymbols,\\n  each:       [].forEach\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmpzPzI4NjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyICRPYmplY3QgPSBPYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlOiAgICAgJE9iamVjdC5jcmVhdGUsXG4gIGdldFByb3RvOiAgICRPYmplY3QuZ2V0UHJvdG90eXBlT2YsXG4gIGlzRW51bTogICAgIHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICBnZXREZXNjOiAgICAkT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgc2V0RGVzYzogICAgJE9iamVjdC5kZWZpbmVQcm9wZXJ0eSxcbiAgc2V0RGVzY3M6ICAgJE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzLFxuICBnZXRLZXlzOiAgICAkT2JqZWN0LmtleXMsXG4gIGdldE5hbWVzOiAgICRPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgZ2V0U3ltYm9sczogJE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gIGVhY2g6ICAgICAgIFtdLmZvckVhY2hcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuanNcbiAqKiBtb2R1bGUgaWQgPSA4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Base object type for 'array like' objects.\\n * @module\\n * @requires module:util\\n * @requires module:types/Basic\\n */\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesBasic = __webpack_require__(11);\\n\\nvar _typesBasic2 = _interopRequireDefault(_typesBasic);\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. use `BasicArray.create()` to get a new instance.\\n * @classdesc A base object type for 'array like' object.\\n * @class\\n * @extends external:Array\\n * @extends module:types/Basic~Basic\\n * @mixes module:types/Basic~Basic\\n */\\nvar BasicArray = (function () {\\n  /**\\n   * Objects with this as an own property will be identified as the root object.\\n   * @memberof module:types/BasicArray~BasicArray\\n   * @readonly\\n   * @default\\n   */\\n  this.baseType = 'TYPE_BASIC_ARRAY';\\n\\n  _util2['default'].mixin(this, _typesBasic2['default']);\\n\\n  return this;\\n}).call([]);\\n\\nexports['default'] = BasicArray;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvQmFzaWNBcnJheS5qcz9lZjNmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Z0NBTWlCLEVBQU07Ozs7c0NBQ0wsRUFBYTs7Ozs7Ozs7Ozs7O0FBVS9CLElBQUksVUFBVSxHQUFHLENBQUMsWUFBWTs7Ozs7OztBQU83QixNQUFJLENBQUMsUUFBUSxHQUFHLGtCQUFrQixDQUFDOztBQUVuQyxvQkFBSyxLQUFLLENBQUMsSUFBSSwwQkFBUSxDQUFDOztBQUV4QixTQUFPLElBQUksQ0FBQztDQUVaLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDOztxQkFFRyxVQUFVIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEJhc2Ugb2JqZWN0IHR5cGUgZm9yICdhcnJheSBsaWtlJyBvYmplY3RzLlxuICogQG1vZHVsZVxuICogQHJlcXVpcmVzIG1vZHVsZTp1dGlsXG4gKiBAcmVxdWlyZXMgbW9kdWxlOnR5cGVzL0Jhc2ljXG4gKi9cbmltcG9ydCB1dGlsIGZyb20gJ3V0aWwnO1xuaW1wb3J0IEJhc2ljIGZyb20gJ3R5cGVzL0Jhc2ljJztcblxuLyoqXG4gKiA8c3BhbiBjbGFzcz1cImltcG9ydGFudFwiPk5PVEU6PC9zcGFuPiBUaGlzIGlzIE5PVCBhIGNvbnN0cnVjdG9yLiB1c2UgYEJhc2ljQXJyYXkuY3JlYXRlKClgIHRvIGdldCBhIG5ldyBpbnN0YW5jZS5cbiAqIEBjbGFzc2Rlc2MgQSBiYXNlIG9iamVjdCB0eXBlIGZvciAnYXJyYXkgbGlrZScgb2JqZWN0LlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBleHRlcm5hbDpBcnJheVxuICogQGV4dGVuZHMgbW9kdWxlOnR5cGVzL0Jhc2ljfkJhc2ljXG4gKiBAbWl4ZXMgbW9kdWxlOnR5cGVzL0Jhc2ljfkJhc2ljXG4gKi9cbnZhciBCYXNpY0FycmF5ID0gKGZ1bmN0aW9uICgpIHtcblx0LyoqXG5cdCAqIE9iamVjdHMgd2l0aCB0aGlzIGFzIGFuIG93biBwcm9wZXJ0eSB3aWxsIGJlIGlkZW50aWZpZWQgYXMgdGhlIHJvb3Qgb2JqZWN0LlxuXHQgKiBAbWVtYmVyb2YgbW9kdWxlOnR5cGVzL0Jhc2ljQXJyYXl+QmFzaWNBcnJheVxuXHQgKiBAcmVhZG9ubHlcblx0ICogQGRlZmF1bHRcblx0ICovXG5cdHRoaXMuYmFzZVR5cGUgPSAnVFlQRV9CQVNJQ19BUlJBWSc7XG5cdFxuXHR1dGlsLm1peGluKHRoaXMsIEJhc2ljKTtcblxuXHRyZXR1cm4gdGhpcztcblxufSkuY2FsbChbXSk7XG5cbmV4cG9ydCBkZWZhdWx0IEJhc2ljQXJyYXk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zb3VyY2UvdHlwZXMvQmFzaWNBcnJheS5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\teval(\"exports.__esModule = true;\\n/**\\n * Utility functions.\\n * @namespace\\n * @author Micah Rolon <micah@ginasink.com>\\n * @memberof module:play~pl\\n */\\nvar util = new function () {\\n\\n\\t/**\\n  * Accepts one or more objects to combine their own properties to single object.\\n  * @arg {object} _target - The object that will recieve all members.\\n  * @arg {object} _sources... - The object(s) to join with the '_target'.\\n  * @returns {object} _target\\n  */\\n\\tthis.mixin = function () {\\n\\t\\tvar member, i, target, objs;\\n\\n\\t\\ttarget = arguments[0];\\n\\t\\tobjs = [].slice.call(arguments, 1);\\n\\n\\t\\tfor (i = 0; i < objs.length; i += 1) {\\n\\t\\t\\tfor (member in objs[i]) {\\n\\t\\t\\t\\tif (!objs[i].hasOwnProperty(member)) continue;\\n\\t\\t\\t\\ttarget[member] = objs[i][member];\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn target;\\n\\t};\\n\\n\\t/**\\n  * Matches the name of the key which references the given pointer inside an object. Like indexOf() for objects.\\n  * @arg {object} _obj - Object to search in.\\n  * @arg {*} _member - The reference which is expected to be in the object as a property.\\n  * @returns {string} The name of the key in the object matching '_member'.\\n  */\\n\\tthis.keyOf = function (_obj, _member) {\\n\\t\\tvar member;\\n\\n\\t\\tfor (member in _obj) {\\n\\t\\t\\tif (!_obj.hasOwnProperty(member)) continue;\\n\\t\\t\\tif (_obj[member] === _member) return member;\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t};\\n\\n\\t/**\\n  * Matches the object, deep in the prototype chain, which is the owner of the property referencing the given pointer.\\n  * @arg {object} _obj - The object to search.\\n  * @arg {*} _member - The reference which is expected to be a property in the prototype chain.\\n  * @return {object} An object containing the name of the property and the owning object. {name, object}\\n  */\\n\\tthis.getOwner = function (_obj, _member) {\\n\\t\\tvar prototype, name;\\n\\n\\t\\tprototype = Object.getPrototypeOf(_obj);\\n\\n\\t\\t// keep searching until we go as deep as we can go.\\n\\t\\twhile (prototype) {\\n\\t\\t\\t// search for the key in the prototype\\n\\t\\t\\tname = util.keyOf(prototype, _member);\\n\\n\\t\\t\\t// If we found the key in the prototype then we found\\n\\t\\t\\t// our match and we can break out of the loop.\\n\\t\\t\\tif (name) break;\\n\\n\\t\\t\\t// Otherwise go deeper (thats what she said ;p)\\n\\t\\t\\tprototype = Object.getPrototypeOf(prototype);\\n\\t\\t}\\n\\n\\t\\treturn {\\n\\t\\t\\tname: name,\\n\\t\\t\\tobject: prototype\\n\\t\\t};\\n\\t};\\n\\n\\t/**\\n  * Given a range; provides a random number in that range.\\n  * @function play~pl.util.random\\n  * @arg {number} _rangeA - A number for the low end of the range.\\n  * @arg {number} _rangeB - The top end of the range.\\n  * @returns {number|*} The resulting number in range or the member found at random.\\n  */\\n\\n\\t/**\\n  * Given an iterable; provides a random item.\\n  * @arg {array} _collection - The iterable.\\n  * @returns {number|*} The member found at random.\\n  */\\n\\tthis.random = function (_collection_rangeA, _rangeB) {\\n\\t\\tvar index, val;\\n\\n\\t\\tindex = Math.floor(Math.random() * _collection_rangeA.length);\\n\\n\\t\\tif (arguments.length === 2) {\\n\\t\\t\\tval = Math.round(Math.random() * _rangeB);\\n\\n\\t\\t\\treturn val < _collection_rangeA ? _collection_rangeA : val;\\n\\t\\t}\\n\\n\\t\\tif (index === _collection_rangeA.length) index = _collection_rangeA.length - 1;\\n\\n\\t\\treturn _collection_rangeA && _collection_rangeA[index];\\n\\t};\\n\\n\\t/**\\n  * Take string and makes it dot notation friendly.\\n  * @arg {string} _id - The string to transform.\\n  * @arg {boolean} _camelCase - Transform with camel case.\\n  * @returns {string}\\n  */\\n\\tthis.transformId = function (_id, _camelCase) {\\n\\t\\tif (_id && _camelCase) {\\n\\t\\t\\treturn _id.replace(/[-\\\\s]+([\\\\w\\\\d]?)/g, function (_match) {\\n\\t\\t\\t\\treturn RegExp.$1.toUpperCase();\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn _id && _id.replace(/[-\\\\s]+/g, '_');\\n\\t};\\n\\n\\t/**\\n  * Test all arguments for != null\\n  * @return {boolean}\\n  */\\n\\tthis.isSet = function () {\\n\\t\\treturn [].every.call(arguments, function (_arg) {\\n\\t\\t\\treturn _arg != null;\\n\\t\\t});\\n\\t};\\n\\n\\t/**\\n  * Parses a formated string and calculates it in milliseconds.\\n  * @arg {string} _source - The formated string for calculation in the pattern '1d 1h 1m 1s'.\\n  * @return {number}\\n  */\\n\\tthis.toMillisec = function (_source) {\\n\\t\\tvar tokens, time, units;\\n\\n\\t\\tif (!_source) return;\\n\\t\\tif (typeof _source === 'number') return _source;\\n\\n\\t\\ttokens = _source.split(/\\\\s+/);\\n\\t\\ttime = 0;\\n\\t\\tunits = {\\n\\t\\t\\td: 24 * 60 * 60 * 1000,\\n\\t\\t\\th: 60 * 60 * 1000,\\n\\t\\t\\tm: 60 * 1000,\\n\\t\\t\\ts: 1000\\n\\t\\t};\\n\\n\\t\\ttokens.forEach(function (_token) {\\n\\t\\t\\tvar unit, value;\\n\\n\\t\\t\\tunit = (_token.match(/[dhms]/) || [])[0];\\n\\n\\t\\t\\tif (unit) {\\n\\t\\t\\t\\tvalue = Number(_token.slice(0, -1));\\n\\t\\t\\t\\ttime += value * units[unit];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttime += Number(_token);\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\treturn time;\\n\\t};\\n\\n\\t/**\\n  * Needs no introduction\\n  * @arg {iterable} _collection - iterable.\\n  * @return {array}\\n  */\\n\\tthis.toArray = function (_collection) {\\n\\t\\treturn Array.prototype.map.call(_collection, function (i) {\\n\\t\\t\\treturn i;\\n\\t\\t});\\n\\t};\\n\\n\\t/**\\n  * Resolves the value in the object at the given path.\\n  * @arg {object} _obj - The object to query.\\n  * @arg {string} _path - The path to the desired reference.\\n  * @returns {*} The resulting reference value.\\n  * @example\\n  * var user = {\\n  *   name: 'John',\\n  *   family: {\\n  *\\t   guardians: {David}, // property could be an array of multiple guardians.\\n  *     siblings: [{Jane}, {Thomas}] // collection of user objects.\\n  *   }\\n  * };\\n  *\\n  * pl.util.resolvePath(user, 'family.sliblings[2].name');\\n  * // Matches the `guardians` propery if `guardians[0]` is undefined when `?` is used.\\n  * pl.util.resolvePath(user, 'family.guardians[0]?.name'); \\n  */\\n\\tthis.resolvePath = function (_obj, _path) {\\n\\t\\tvar path, obj, i, name, index, testArray;\\n\\n\\t\\tpath = _path.split('.');\\n\\t\\tobj = _obj;\\n\\t\\ti = 0;\\n\\n\\t\\twhile (obj) {\\n\\t\\t\\ttestArray = /\\\\?$/.test(path[i]);\\n\\t\\t\\tindex = (path[i].match(/\\\\[(\\\\d+)\\\\]/) || [])[1] || -1;\\n\\t\\t\\tname = ~index ? path[i].slice(0, path[i].indexOf('[')) : path[i];\\n\\t\\t\\tobj = obj[name];\\n\\n\\t\\t\\tif (~index && obj) {\\n\\t\\t\\t\\tobj = testArray ? obj[index] || obj : obj[index];\\n\\t\\t\\t}\\n\\n\\t\\t\\ti += 1;\\n\\n\\t\\t\\tif (path.length === i) break;\\n\\t\\t}\\n\\n\\t\\treturn obj;\\n\\t};\\n\\n\\tthis.assignRef = function (_obj, _name, _ref) {\\n\\t\\tvar name;\\n\\n\\t\\tname = util.transformId(_name, true);\\n\\n\\t\\tif (_obj[name]) {\\n\\t\\t\\tif (!_obj[name].__refCollction__) {\\n\\t\\t\\t\\t_obj[name] = [_obj[name]];\\n\\n\\t\\t\\t\\tObject.defineProperty(_obj[name], '__refCollction__', {\\n\\t\\t\\t\\t\\tvalue: true,\\n\\t\\t\\t\\t\\tenumerable: false,\\n\\t\\t\\t\\t\\twriteable: false,\\n\\t\\t\\t\\t\\tconfigureable: false\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\t_obj[name].push(_ref);\\n\\t\\t} else {\\n\\t\\t\\t_obj[name] = _ref;\\n\\t\\t}\\n\\t};\\n}();\\n\\nexports['default'] = util;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _Object$create = __webpack_require__(12)['default'];\\n\\nvar _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Base object type for 'classes' implementing methods for extention and super callbacks.\\n * @module\\n * @requires module:play~pl.util\\n */\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. use `Basic.create()` to get a new instance.\\n * @classdesc The base type for all objects which will act as prototypes.\\n * @class\\n */\\nvar Basic = {\\n\\t/**\\n  * Objects with this as an own property will be identified as the root object.\\n  * @readonly\\n  * @default\\n  */\\n\\tbaseType: 'TYPE_BASIC',\\n\\n\\t/**\\n  * Creates a new object with the current object as its prototype.\\n  * @instance\\n  * @returns {Basic} The new instance.\\n  */\\n\\tcreate: function create() {\\n\\t\\treturn _Object$create(this);\\n\\t},\\n\\n\\t/**\\n  * Creates a new object using a constructor function or object with the current object as its prototype.\\n  * @instance\\n  * @arg {Function|Object} _implementation - The implementation of the new type as either a constructor function or object to mixin.\\n  * @returns {Basic} The new instance.\\n  *\\n  * @todo define constructor property\\n  */\\n\\textend: function extend(_implementation) {\\n\\t\\tvar instance;\\n\\n\\t\\tif (!_implementation) return null;\\n\\n\\t\\tswitch (typeof _implementation) {\\n\\t\\t\\tcase 'function':\\n\\t\\t\\t\\t_implementation.prototype = this;\\n\\t\\t\\t\\tinstance = new _implementation();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'object':\\n\\t\\t\\t\\tinstance = this.create();\\n\\t\\t\\t\\tinstance.mixin(_implementation);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tconsole.error('TypeError: Invalid type given for object extention.', typeof _implementation);\\n\\t\\t}\\n\\n\\t\\treturn instance;\\n\\t},\\n\\n\\t/**\\n  * Accepts one or more objects to combine their own properties to the instance.\\n  * @instance\\n  * @arg {object} _sources... - The object(s) to join with the instance.\\n  * @returns this\\n  */\\n\\tmixin: function mixin() {\\n\\t\\treturn _util2['default'].mixin.apply(null, [this].concat([].slice.call(arguments, 0)));\\n\\t},\\n\\n\\t/**\\n  * Matches the name of the key which references the given pointer inside the instance. Like indexOf() for objects.\\n  * @instance\\n  * @arg {*} _member - The reference which is expected to be in the object as a property.\\n  * @returns {string} The name of the key in the object matching '_member'.\\n  */\\n\\tkeyOf: function keyOf(_member) {\\n\\t\\treturn _util2['default'].keyOf(this, _member);\\n\\t},\\n\\n\\t/**\\n  * Performs a super callback of the function which called it. Allowing you to still invoke a method which was overridden.\\n  * @instance\\n  * @arg {*} _args... - Whatever amount of arguments the caller takes.\\n  * @returns {*} Whatever the caller returns.\\n  */\\n\\tproto: function proto() {\\n\\t\\tvar method, name, owner, prototype;\\n\\n\\t\\t// Get the function which invoked proto() in the call stack.\\n\\t\\t// If the caller is a behavior then we retrieve the method.\\n\\t\\tmethod = this.proto.caller.method || this.proto.caller;\\n\\n\\t\\t// Check to see if 'this' owns the method.\\n\\t\\t// NOTE: We may want to move this logic into getOwner().\\n\\t\\tif (name = this.keyOf(method)) {\\n\\t\\t\\tprototype = Object.getPrototypeOf(this);\\n\\t\\t}\\n\\n\\t\\t// Otherwise find the object which owns the caller function.\\n\\t\\telse {\\n\\t\\t\\t\\towner = _util2['default'].getOwner(this, method);\\n\\t\\t\\t\\tname = owner.name;\\n\\t\\t\\t\\tprototype = Object.getPrototypeOf(owner.object);\\n\\t\\t\\t}\\n\\n\\t\\tmethod = prototype[name];\\n\\n\\t\\tif (!method) {\\n\\t\\t\\tconsole.error('ReferenceError: Unable to locate prototype method.', this.proto.caller);\\n\\t\\t\\tdebugger;\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\treturn method.apply(this, arguments);\\n\\t},\\n\\n\\t/**\\n  * Performs a super callback of the function which called it. Unlike `proto()` which looks for the overidden method, sup looks for the base class' implementation.\\n  * @instance\\n  * @arg {*} _args... - Whatever amount of arguments the caller takes.\\n  * @returns {*} Whatever the caller returns.\\n  */\\n\\tsup: function sup() {\\n\\t\\tvar method, name, owner, prototype;\\n\\n\\t\\t// Get the function which invoked sup() in the call stack.\\n\\t\\tmethod = this.sup.caller;\\n\\t\\towner = _util2['default'].getOwner(this, this.baseType);\\n\\t\\tprototype = owner.object;\\n\\t\\tname = this.keyOf(method);\\n\\n\\t\\t// Check to see if 'this' owns the method.\\n\\t\\t// NOTE: We may want to move this logic into getOwner().\\n\\t\\t//\\n\\t\\tif (!name) {\\n\\t\\t\\towner = _util2['default'].getOwner(this, method);\\n\\t\\t\\tname = owner.name;\\n\\t\\t}\\n\\n\\t\\tmethod = prototype[name];\\n\\n\\t\\tif (!method) {\\n\\t\\t\\tconsole.error('ReferenceError: Unable to locate prototype method.', this.sup.caller);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\treturn method.apply(this, arguments);\\n\\t},\\n\\n\\t/**\\n  * Provides the object type.\\n  * @instance\\n  */\\n\\ttoString: function toString() {\\n\\t\\tvar type;\\n\\n\\t\\ttype = this.baseType.replace('TYPE_', '');\\n\\t\\ttype = type.slice(0, 1) + type.slice(1).toLowerCase();\\n\\n\\t\\treturn '[object ' + type + ']';\\n\\t}\\n\\n};\\n\\nexports['default'] = Basic;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvQmFzaWMuanM/ZGE1MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztnQ0FLaUIsRUFBTTs7Ozs7Ozs7O0FBT3ZCLElBQUksS0FBSyxHQUFHOzs7Ozs7QUFNWCxTQUFRLEVBQUUsWUFBWTs7Ozs7OztBQU90QixPQUFNLEVBQUUsa0JBQVk7QUFDbkIsU0FBTyxlQUFjLElBQUksQ0FBQyxDQUFDO0VBQzNCOzs7Ozs7Ozs7O0FBVUQsT0FBTSxFQUFFLGdCQUFVLGVBQWUsRUFBRTtBQUNsQyxNQUFJLFFBQVEsQ0FBQzs7QUFFYixNQUFJLENBQUMsZUFBZSxFQUFFLE9BQU8sSUFBSSxDQUFDOztBQUVsQyxVQUFRLE9BQU8sZUFBZTtBQUM3QixRQUFLLFVBQVU7QUFDZCxtQkFBZSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7QUFDakMsWUFBUSxHQUFHLElBQUksZUFBZSxFQUFFLENBQUM7QUFDakMsVUFBTTs7QUFFUCxRQUFLLFFBQVE7QUFDWixZQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ3pCLFlBQVEsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDaEMsVUFBTTs7QUFFUDtBQUNDLFdBQU8sQ0FBQyxLQUFLLENBQUMscURBQXFELEVBQUUsT0FBTyxlQUFlLENBQUMsQ0FBQztBQUFBLEdBQzlGOztBQUVELFNBQU8sUUFBUSxDQUFDO0VBQ2hCOzs7Ozs7OztBQVFELE1BQUssRUFBRSxpQkFBWTtBQUNsQixTQUFPLGtCQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDMUU7Ozs7Ozs7O0FBUUQsTUFBSyxFQUFFLGVBQVUsT0FBTyxFQUFFO0FBQ3pCLFNBQU8sa0JBQUssS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztFQUNqQzs7Ozs7Ozs7QUFRRCxNQUFLLEVBQUUsaUJBQVk7QUFDbEIsTUFBSSxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUM7Ozs7QUFJbkMsUUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQzs7OztBQUl2RCxNQUFJLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFO0FBQzlCLFlBQVMsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQ3hDOzs7T0FHSTtBQUNKLFNBQUssR0FBRyxrQkFBSyxRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3BDLFFBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ2xCLGFBQVMsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoRDs7QUFFRCxRQUFNLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDOztBQUV6QixNQUFJLENBQUMsTUFBTSxFQUFFO0FBQ1osVUFBTyxDQUFDLEtBQUssQ0FBQyxvREFBb0QsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZGLFlBQVM7QUFDVCxVQUFPLElBQUksQ0FBQztHQUNaOztBQUVELFNBQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7RUFDckM7Ozs7Ozs7O0FBUUQsSUFBRyxFQUFFLGVBQVk7QUFDaEIsTUFBSSxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUM7OztBQUduQyxRQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7QUFDekIsT0FBSyxHQUFHLGtCQUFLLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzNDLFdBQVMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0FBQ3pCLE1BQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDOzs7OztBQUsxQixNQUFJLENBQUMsSUFBSSxFQUFFO0FBQ1YsUUFBSyxHQUFHLGtCQUFLLFFBQVEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDcEMsT0FBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7R0FDbEI7O0FBRUQsUUFBTSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7QUFFekIsTUFBSSxDQUFDLE1BQU0sRUFBRTtBQUNaLFVBQU8sQ0FBQyxLQUFLLENBQUMsb0RBQW9ELEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNyRixVQUFPLElBQUksQ0FBQztHQUNaOztBQUVELFNBQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7RUFDckM7Ozs7OztBQU1ELFNBQVEsRUFBRSxvQkFBWTtBQUNyQixNQUFJLElBQUksQ0FBQzs7QUFFVCxNQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQzFDLE1BQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDOztBQUVuRCxTQUFPLFVBQVUsR0FBQyxJQUFJLEdBQUMsR0FBRyxDQUFDO0VBQzNCOztDQUVELENBQUM7O3FCQUVhLEtBQUsiLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEJhc2Ugb2JqZWN0IHR5cGUgZm9yICdjbGFzc2VzJyBpbXBsZW1lbnRpbmcgbWV0aG9kcyBmb3IgZXh0ZW50aW9uIGFuZCBzdXBlciBjYWxsYmFja3MuXG4gKiBAbW9kdWxlXG4gKiBAcmVxdWlyZXMgbW9kdWxlOnBsYXl+cGwudXRpbFxuICovXG5pbXBvcnQgdXRpbCBmcm9tICd1dGlsJztcblxuLyoqXG4gKiA8c3BhbiBjbGFzcz1cImltcG9ydGFudFwiPk5PVEU6PC9zcGFuPiBUaGlzIGlzIE5PVCBhIGNvbnN0cnVjdG9yLiB1c2UgYEJhc2ljLmNyZWF0ZSgpYCB0byBnZXQgYSBuZXcgaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIFRoZSBiYXNlIHR5cGUgZm9yIGFsbCBvYmplY3RzIHdoaWNoIHdpbGwgYWN0IGFzIHByb3RvdHlwZXMuXG4gKiBAY2xhc3NcbiAqL1xudmFyIEJhc2ljID0ge1xuXHQvKipcblx0ICogT2JqZWN0cyB3aXRoIHRoaXMgYXMgYW4gb3duIHByb3BlcnR5IHdpbGwgYmUgaWRlbnRpZmllZCBhcyB0aGUgcm9vdCBvYmplY3QuXG5cdCAqIEByZWFkb25seVxuXHQgKiBAZGVmYXVsdFxuXHQgKi9cblx0YmFzZVR5cGU6ICdUWVBFX0JBU0lDJyxcblx0XG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBjdXJyZW50IG9iamVjdCBhcyBpdHMgcHJvdG90eXBlLlxuXHQgKiBAaW5zdGFuY2Vcblx0ICogQHJldHVybnMge0Jhc2ljfSBUaGUgbmV3IGluc3RhbmNlLlxuXHQgKi9cblx0Y3JlYXRlOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIE9iamVjdC5jcmVhdGUodGhpcyk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBuZXcgb2JqZWN0IHVzaW5nIGEgY29uc3RydWN0b3IgZnVuY3Rpb24gb3Igb2JqZWN0IHdpdGggdGhlIGN1cnJlbnQgb2JqZWN0IGFzIGl0cyBwcm90b3R5cGUuXG5cdCAqIEBpbnN0YW5jZVxuXHQgKiBAYXJnIHtGdW5jdGlvbnxPYmplY3R9IF9pbXBsZW1lbnRhdGlvbiAtIFRoZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgbmV3IHR5cGUgYXMgZWl0aGVyIGEgY29uc3RydWN0b3IgZnVuY3Rpb24gb3Igb2JqZWN0IHRvIG1peGluLlxuXHQgKiBAcmV0dXJucyB7QmFzaWN9IFRoZSBuZXcgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEB0b2RvIGRlZmluZSBjb25zdHJ1Y3RvciBwcm9wZXJ0eVxuXHQgKi9cblx0ZXh0ZW5kOiBmdW5jdGlvbiAoX2ltcGxlbWVudGF0aW9uKSB7XG5cdFx0dmFyIGluc3RhbmNlO1xuXG5cdFx0aWYgKCFfaW1wbGVtZW50YXRpb24pIHJldHVybiBudWxsO1xuXG5cdFx0c3dpdGNoICh0eXBlb2YgX2ltcGxlbWVudGF0aW9uKSB7XG5cdFx0XHRjYXNlICdmdW5jdGlvbic6XG5cdFx0XHRcdF9pbXBsZW1lbnRhdGlvbi5wcm90b3R5cGUgPSB0aGlzO1xuXHRcdFx0XHRpbnN0YW5jZSA9IG5ldyBfaW1wbGVtZW50YXRpb24oKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ29iamVjdCc6XG5cdFx0XHRcdGluc3RhbmNlID0gdGhpcy5jcmVhdGUoKTtcblx0XHRcdFx0aW5zdGFuY2UubWl4aW4oX2ltcGxlbWVudGF0aW9uKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ1R5cGVFcnJvcjogSW52YWxpZCB0eXBlIGdpdmVuIGZvciBvYmplY3QgZXh0ZW50aW9uLicsIHR5cGVvZiBfaW1wbGVtZW50YXRpb24pO1xuXHRcdH1cblxuXHRcdHJldHVybiBpbnN0YW5jZTtcblx0fSxcblxuXHQvKipcblx0ICogQWNjZXB0cyBvbmUgb3IgbW9yZSBvYmplY3RzIHRvIGNvbWJpbmUgdGhlaXIgb3duIHByb3BlcnRpZXMgdG8gdGhlIGluc3RhbmNlLlxuXHQgKiBAaW5zdGFuY2Vcblx0ICogQGFyZyB7b2JqZWN0fSBfc291cmNlcy4uLiAtIFRoZSBvYmplY3QocykgdG8gam9pbiB3aXRoIHRoZSBpbnN0YW5jZS5cblx0ICogQHJldHVybnMgdGhpc1xuXHQgKi9cblx0bWl4aW46IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdXRpbC5taXhpbi5hcHBseShudWxsLCBbdGhpc10uY29uY2F0KFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKSkpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBNYXRjaGVzIHRoZSBuYW1lIG9mIHRoZSBrZXkgd2hpY2ggcmVmZXJlbmNlcyB0aGUgZ2l2ZW4gcG9pbnRlciBpbnNpZGUgdGhlIGluc3RhbmNlLiBMaWtlIGluZGV4T2YoKSBmb3Igb2JqZWN0cy5cblx0ICogQGluc3RhbmNlXG5cdCAqIEBhcmcgeyp9IF9tZW1iZXIgLSBUaGUgcmVmZXJlbmNlIHdoaWNoIGlzIGV4cGVjdGVkIHRvIGJlIGluIHRoZSBvYmplY3QgYXMgYSBwcm9wZXJ0eS5cblx0ICogQHJldHVybnMge3N0cmluZ30gVGhlIG5hbWUgb2YgdGhlIGtleSBpbiB0aGUgb2JqZWN0IG1hdGNoaW5nICdfbWVtYmVyJy5cblx0ICovXG5cdGtleU9mOiBmdW5jdGlvbiAoX21lbWJlcikge1xuXHRcdHJldHVybiB1dGlsLmtleU9mKHRoaXMsIF9tZW1iZXIpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBQZXJmb3JtcyBhIHN1cGVyIGNhbGxiYWNrIG9mIHRoZSBmdW5jdGlvbiB3aGljaCBjYWxsZWQgaXQuIEFsbG93aW5nIHlvdSB0byBzdGlsbCBpbnZva2UgYSBtZXRob2Qgd2hpY2ggd2FzIG92ZXJyaWRkZW4uXG5cdCAqIEBpbnN0YW5jZVxuXHQgKiBAYXJnIHsqfSBfYXJncy4uLiAtIFdoYXRldmVyIGFtb3VudCBvZiBhcmd1bWVudHMgdGhlIGNhbGxlciB0YWtlcy5cblx0ICogQHJldHVybnMgeyp9IFdoYXRldmVyIHRoZSBjYWxsZXIgcmV0dXJucy5cblx0ICovXG5cdHByb3RvOiBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIG1ldGhvZCwgbmFtZSwgb3duZXIsIHByb3RvdHlwZTtcblxuXHRcdC8vIEdldCB0aGUgZnVuY3Rpb24gd2hpY2ggaW52b2tlZCBwcm90bygpIGluIHRoZSBjYWxsIHN0YWNrLlxuXHRcdC8vIElmIHRoZSBjYWxsZXIgaXMgYSBiZWhhdmlvciB0aGVuIHdlIHJldHJpZXZlIHRoZSBtZXRob2QuXG5cdFx0bWV0aG9kID0gdGhpcy5wcm90by5jYWxsZXIubWV0aG9kIHx8IHRoaXMucHJvdG8uY2FsbGVyO1xuXG5cdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmICd0aGlzJyBvd25zIHRoZSBtZXRob2QuXG5cdFx0Ly8gTk9URTogV2UgbWF5IHdhbnQgdG8gbW92ZSB0aGlzIGxvZ2ljIGludG8gZ2V0T3duZXIoKS5cblx0XHRpZiAobmFtZSA9IHRoaXMua2V5T2YobWV0aG9kKSkge1xuXHRcdFx0cHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSBmaW5kIHRoZSBvYmplY3Qgd2hpY2ggb3ducyB0aGUgY2FsbGVyIGZ1bmN0aW9uLlxuXHRcdGVsc2Uge1xuXHRcdFx0b3duZXIgPSB1dGlsLmdldE93bmVyKHRoaXMsIG1ldGhvZCk7XG5cdFx0XHRuYW1lID0gb3duZXIubmFtZTtcblx0XHRcdHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvd25lci5vYmplY3QpO1x0XG5cdFx0fVxuXHRcdFxuXHRcdG1ldGhvZCA9IHByb3RvdHlwZVtuYW1lXTtcblxuXHRcdGlmICghbWV0aG9kKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKCdSZWZlcmVuY2VFcnJvcjogVW5hYmxlIHRvIGxvY2F0ZSBwcm90b3R5cGUgbWV0aG9kLicsIHRoaXMucHJvdG8uY2FsbGVyKTtcblx0XHRcdGRlYnVnZ2VyO1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBQZXJmb3JtcyBhIHN1cGVyIGNhbGxiYWNrIG9mIHRoZSBmdW5jdGlvbiB3aGljaCBjYWxsZWQgaXQuIFVubGlrZSBgcHJvdG8oKWAgd2hpY2ggbG9va3MgZm9yIHRoZSBvdmVyaWRkZW4gbWV0aG9kLCBzdXAgbG9va3MgZm9yIHRoZSBiYXNlIGNsYXNzJyBpbXBsZW1lbnRhdGlvbi5cblx0ICogQGluc3RhbmNlXG5cdCAqIEBhcmcgeyp9IF9hcmdzLi4uIC0gV2hhdGV2ZXIgYW1vdW50IG9mIGFyZ3VtZW50cyB0aGUgY2FsbGVyIHRha2VzLlxuXHQgKiBAcmV0dXJucyB7Kn0gV2hhdGV2ZXIgdGhlIGNhbGxlciByZXR1cm5zLlxuXHQgKi9cblx0c3VwOiBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIG1ldGhvZCwgbmFtZSwgb3duZXIsIHByb3RvdHlwZTtcblxuXHRcdC8vIEdldCB0aGUgZnVuY3Rpb24gd2hpY2ggaW52b2tlZCBzdXAoKSBpbiB0aGUgY2FsbCBzdGFjay5cblx0XHRtZXRob2QgPSB0aGlzLnN1cC5jYWxsZXI7XG5cdFx0b3duZXIgPSB1dGlsLmdldE93bmVyKHRoaXMsIHRoaXMuYmFzZVR5cGUpO1xuXHRcdHByb3RvdHlwZSA9IG93bmVyLm9iamVjdDtcblx0XHRuYW1lID0gdGhpcy5rZXlPZihtZXRob2QpO1xuXG5cdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmICd0aGlzJyBvd25zIHRoZSBtZXRob2QuXG5cdFx0Ly8gTk9URTogV2UgbWF5IHdhbnQgdG8gbW92ZSB0aGlzIGxvZ2ljIGludG8gZ2V0T3duZXIoKS5cblx0XHQvLyBcblx0XHRpZiAoIW5hbWUpIHtcblx0XHRcdG93bmVyID0gdXRpbC5nZXRPd25lcih0aGlzLCBtZXRob2QpO1xuXHRcdFx0bmFtZSA9IG93bmVyLm5hbWU7XG5cdFx0fVxuXG5cdFx0bWV0aG9kID0gcHJvdG90eXBlW25hbWVdO1xuXG5cdFx0aWYgKCFtZXRob2QpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ1JlZmVyZW5jZUVycm9yOiBVbmFibGUgdG8gbG9jYXRlIHByb3RvdHlwZSBtZXRob2QuJywgdGhpcy5zdXAuY2FsbGVyKTtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdHJldHVybiBtZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0fSxcblxuXHQvKipcblx0ICogUHJvdmlkZXMgdGhlIG9iamVjdCB0eXBlLlxuXHQgKiBAaW5zdGFuY2Vcblx0ICovXG5cdHRvU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHR5cGU7XG5cdFx0XG5cdFx0dHlwZSA9IHRoaXMuYmFzZVR5cGUucmVwbGFjZSgnVFlQRV8nLCAnJyk7XG5cdFx0dHlwZSA9IHR5cGUuc2xpY2UoMCwxKSt0eXBlLnNsaWNlKDEpLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRyZXR1cm4gJ1tvYmplY3QgJyt0eXBlKyddJztcblx0fVxuXG59O1xuXG5leHBvcnQgZGVmYXVsdCBCYXNpYztcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NvdXJjZS90eXBlcy9CYXNpYy5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"module.exports = { \\\"default\\\": __webpack_require__(13), __esModule: true };//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvY3JlYXRlLmpzP2FhNGIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCIiwiZmlsZSI6IjEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGVcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2NyZWF0ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDEyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var $ = __webpack_require__(8);\\nmodule.exports = function create(P, D){\\n  return $.create(P, D);\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZS5qcz84OTVhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyICQgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzLyQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlKFAsIEQpe1xuICByZXR1cm4gJC5jcmVhdGUoUCwgRCk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDEzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\teval(\"exports.__esModule = true;\\n/**\\r\\n *\\r\\n * Copy of the deleted repository epistemex/transformation-matrix-js.\\r\\n * All rights are reserved to Epistemex.\\r\\n *\\r\\n * 2D transformation matrix object initialized with identity matrix.\\r\\n *\\r\\n * The matrix can synchronize a canvas context by supplying the context\\r\\n * as an argument, or later apply current absolute transform to an\\r\\n * existing context.\\r\\n *\\r\\n * All values are handled as floating point values.\\r\\n *\\r\\n * @param {CanvasRenderingContext2D} [context] - Optional context to sync with Matrix\\r\\n * @prop {number} a - scale x\\r\\n * @prop {number} b - shear y\\r\\n * @prop {number} c - shear x\\r\\n * @prop {number} d - scale y\\r\\n * @prop {number} e - translate x\\r\\n * @prop {number} f - translate y\\r\\n * @prop {CanvasRenderingContext2D|null} [context=null] - set or get current canvas context\\r\\n * @constructor\\r\\n */\\nfunction Matrix(context) {\\n\\n    var me = this;\\n    me._t = me.transform;\\n\\n    me.a = me.d = 1;\\n    me.b = me.c = me.e = me.f = 0;\\n\\n    me.context = context;\\n\\n    // reset canvas transformations (if any) to enable 100% sync.\\n    if (context) context.setTransform(1, 0, 0, 1, 0, 0);\\n}\\n\\nMatrix.prototype = {\\n\\n    /**\\r\\n     * Concatenates transforms of this matrix onto the given child matrix and\\r\\n     * returns a new matrix. This instance is used on left side.\\r\\n     *\\r\\n     * @param {Matrix} cm - child matrix to apply concatenation to\\r\\n     * @returns {Matrix}\\r\\n     */\\n    concat: function concat(cm) {\\n        return this.clone()._t(cm.a, cm.b, cm.c, cm.d, cm.e, cm.f);\\n    },\\n\\n    /**\\r\\n     * Flips the horizontal values.\\r\\n     */\\n    flipX: function flipX() {\\n        return this._t(-1, 0, 0, 1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Flips the vertical values.\\r\\n     */\\n    flipY: function flipY() {\\n        return this._t(1, 0, 0, -1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Reflects incoming (velocity) vector on the normal which will be the\\r\\n     * current transformed x axis. Call when a trigger condition is met.\\r\\n     *\\r\\n     * NOTE: BETA, simple implementation\\r\\n     *\\r\\n     * @param {number} x - vector end point for x (start = 0)\\r\\n     * @param {number} y - vector end point for y (start = 0)\\r\\n     * @returns {{x: number, y: number}}\\r\\n     */\\n    reflectVector: function reflectVector(x, y) {\\n\\n        var v = this.applyToPoint(0, 1),\\n            d = 2 * (v.x * x + v.y * y);\\n\\n        x -= d * v.x;\\n        y -= d * v.y;\\n\\n        return { x: x, y: y };\\n    },\\n\\n    /**\\r\\n     * Short-hand to reset current matrix to an identity matrix.\\r\\n     */\\n    reset: function reset() {\\n        return this.setTransform(1, 0, 0, 1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Rotates current matrix accumulative by angle.\\r\\n     * @param {number} angle - angle in radians\\r\\n     */\\n    rotate: function rotate(angle) {\\n        var cos = Math.cos(angle),\\n            sin = Math.sin(angle);\\n        return this._t(cos, sin, -sin, cos, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Converts a vector given as x and y to angle, and\\r\\n     * rotates (accumulative).\\r\\n     * @param x\\r\\n     * @param y\\r\\n     * @returns {*}\\r\\n     */\\n    rotateFromVector: function rotateFromVector(x, y) {\\n        return this.rotate(Math.atan2(y, x));\\n    },\\n\\n    /**\\r\\n     * Helper method to make a rotation based on an angle in degrees.\\r\\n     * @param {number} angle - angle in degrees\\r\\n     */\\n    rotateDeg: function rotateDeg(angle) {\\n        return this.rotate(angle * Math.PI / 180);\\n    },\\n\\n    /**\\r\\n     * Scales current matrix uniformly and accumulative.\\r\\n     * @param {number} f - scale factor for both x and y (1 does nothing)\\r\\n     */\\n    scaleU: function scaleU(f) {\\n        return this._t(f, 0, 0, f, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Scales current matrix accumulative.\\r\\n     * @param {number} sx - scale factor x (1 does nothing)\\r\\n     * @param {number} sy - scale factor y (1 does nothing)\\r\\n     */\\n    scale: function scale(sx, sy) {\\n        return this._t(sx, 0, 0, sy, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Scales current matrix on x axis accumulative.\\r\\n     * @param {number} sx - scale factor x (1 does nothing)\\r\\n     */\\n    scaleX: function scaleX(sx) {\\n        return this._t(sx, 0, 0, 1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Scales current matrix on y axis accumulative.\\r\\n     * @param {number} sy - scale factor y (1 does nothing)\\r\\n     */\\n    scaleY: function scaleY(sy) {\\n        return this._t(1, 0, 0, sy, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Apply shear to the current matrix accumulative.\\r\\n     * @param {number} sx - amount of shear for x\\r\\n     * @param {number} sy - amount of shear for y\\r\\n     */\\n    shear: function shear(sx, sy) {\\n        return this._t(1, sy, sx, 1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Apply shear for x to the current matrix accumulative.\\r\\n     * @param {number} sx - amount of shear for x\\r\\n     */\\n    shearX: function shearX(sx) {\\n        return this._t(1, 0, sx, 1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Apply shear for y to the current matrix accumulative.\\r\\n     * @param {number} sy - amount of shear for y\\r\\n     */\\n    shearY: function shearY(sy) {\\n        return this._t(1, sy, 0, 1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Apply skew to the current matrix accumulative.\\r\\n     * @param {number} ax - angle of skew for x\\r\\n     * @param {number} ay - angle of skew for y\\r\\n     */\\n    skew: function skew(ax, ay) {\\n        return this.shear(Math.tan(ax), Math.tan(ay));\\n    },\\n\\n    /**\\r\\n     * Apply skew for x to the current matrix accumulative.\\r\\n     * @param {number} ax - angle of skew for x\\r\\n     */\\n    skewX: function skewX(ax) {\\n        return this.shearX(Math.tan(ax));\\n    },\\n\\n    /**\\r\\n     * Apply skew for y to the current matrix accumulative.\\r\\n     * @param {number} ay - angle of skew for y\\r\\n     */\\n    skewY: function skewY(ay) {\\n        return this.shearY(Math.tan(ay));\\n    },\\n\\n    /**\\r\\n     * Set current matrix to new absolute matrix.\\r\\n     * @param {number} a - scale x\\r\\n     * @param {number} b - shear y\\r\\n     * @param {number} c - shear x\\r\\n     * @param {number} d - scale y\\r\\n     * @param {number} e - translate x\\r\\n     * @param {number} f - translate y\\r\\n     */\\n    setTransform: function setTransform(a, b, c, d, e, f) {\\n        var me = this;\\n        me.a = a;\\n        me.b = b;\\n        me.c = c;\\n        me.d = d;\\n        me.e = e;\\n        me.f = f;\\n        return me._x();\\n    },\\n\\n    /**\\r\\n     * Translate current matrix accumulative.\\r\\n     * @param {number} tx - translation for x\\r\\n     * @param {number} ty - translation for y\\r\\n     */\\n    translate: function translate(tx, ty) {\\n        return this._t(1, 0, 0, 1, tx, ty);\\n    },\\n\\n    /**\\r\\n     * Translate current matrix on x axis accumulative.\\r\\n     * @param {number} tx - translation for x\\r\\n     */\\n    translateX: function translateX(tx) {\\n        return this._t(1, 0, 0, 1, tx, 0);\\n    },\\n\\n    /**\\r\\n     * Translate current matrix on y axis accumulative.\\r\\n     * @param {number} ty - translation for y\\r\\n     */\\n    translateY: function translateY(ty) {\\n        return this._t(1, 0, 0, 1, 0, ty);\\n    },\\n\\n    /**\\r\\n     * Multiplies current matrix with new matrix values.\\r\\n     * @param {number} a2 - scale x\\r\\n     * @param {number} b2 - shear y\\r\\n     * @param {number} c2 - shear x\\r\\n     * @param {number} d2 - scale y\\r\\n     * @param {number} e2 - translate x\\r\\n     * @param {number} f2 - translate y\\r\\n     */\\n    transform: function transform(a2, b2, c2, d2, e2, f2) {\\n\\n        var me = this,\\n            a1 = me.a,\\n            b1 = me.b,\\n            c1 = me.c,\\n            d1 = me.d,\\n            e1 = me.e,\\n            f1 = me.f;\\n\\n        /* matrix order (canvas compatible):\\r\\n         * ace\\r\\n         * bdf\\r\\n         * 001\\r\\n         */\\n        me.a = a1 * a2 + c1 * b2;\\n        me.b = b1 * a2 + d1 * b2;\\n        me.c = a1 * c2 + c1 * d2;\\n        me.d = b1 * c2 + d1 * d2;\\n        me.e = a1 * e2 + c1 * f2 + e1;\\n        me.f = b1 * e2 + d1 * f2 + f1;\\n\\n        return me._x();\\n    },\\n\\n    /**\\r\\n     * Divide this matrix on input matrix which must be invertible.\\r\\n     * @param {Matrix} m - matrix to divide on (divisor)\\r\\n     * @returns {Matrix}\\r\\n     */\\n    divide: function divide(m) {\\n\\n        if (!m.isInvertible()) throw \\\"Input matrix is not invertible\\\";\\n\\n        var im = m.inverse();\\n\\n        return this._t(im.a, im.b, im.c, im.d, im.e, im.f);\\n    },\\n\\n    /**\\r\\n     * Divide current matrix on scalar value != 0.\\r\\n     * @param {number} d - divisor (can not be 0)\\r\\n     * @returns {Matrix}\\r\\n     */\\n    divideScalar: function divideScalar(d) {\\n\\n        var me = this;\\n        me.a /= d;\\n        me.b /= d;\\n        me.c /= d;\\n        me.d /= d;\\n        me.e /= d;\\n        me.f /= d;\\n\\n        return me._x();\\n    },\\n\\n    /**\\r\\n     * Get an inverse matrix of current matrix. The method returns a new\\r\\n     * matrix with values you need to use to get to an identity matrix.\\r\\n     * Context from parent matrix is not applied to the returned matrix.\\r\\n     * @returns {Matrix}\\r\\n     */\\n    inverse: function inverse() {\\n\\n        if (this.isIdentity()) {\\n            return new Matrix();\\n        } else if (!this.isInvertible()) {\\n            throw \\\"Matrix is not invertible.\\\";\\n        } else {\\n            var me = this,\\n                a = me.a,\\n                b = me.b,\\n                c = me.c,\\n                d = me.d,\\n                e = me.e,\\n                f = me.f,\\n                m = new Matrix(),\\n                dt = a * d - b * c; // determinant(), skip DRY here...\\n\\n            m.a = d / dt;\\n            m.b = -b / dt;\\n            m.c = -c / dt;\\n            m.d = a / dt;\\n            m.e = (c * f - d * e) / dt;\\n            m.f = -(a * f - b * e) / dt;\\n\\n            return m;\\n        }\\n    },\\n\\n    /**\\r\\n     * Interpolate this matrix with another and produce a new matrix.\\r\\n     * t is a value in the range [0.0, 1.0] where 0 is this instance and\\r\\n     * 1 is equal to the second matrix. The t value is not constrained.\\r\\n     *\\r\\n     * Context from parent matrix is not applied to the returned matrix.\\r\\n     *\\r\\n     * Note: this interpolation is naive. For animation use the\\r\\n     * intrpolateAnim() method instead.\\r\\n     *\\r\\n     * @param {Matrix} m2 - the matrix to interpolate with.\\r\\n     * @param {number} t - interpolation [0.0, 1.0]\\r\\n     * @param {CanvasRenderingContext2D} [context] - optional context to affect\\r\\n     * @returns {Matrix} - new instance with the interpolated result\\r\\n     */\\n    interpolate: function interpolate(m2, t, context) {\\n\\n        var me = this,\\n            m = context ? new Matrix(context) : new Matrix();\\n\\n        m.a = me.a + (m2.a - me.a) * t;\\n        m.b = me.b + (m2.b - me.b) * t;\\n        m.c = me.c + (m2.c - me.c) * t;\\n        m.d = me.d + (m2.d - me.d) * t;\\n        m.e = me.e + (m2.e - me.e) * t;\\n        m.f = me.f + (m2.f - me.f) * t;\\n\\n        return m._x();\\n    },\\n\\n    /**\\r\\n     * Interpolate this matrix with another and produce a new matrix.\\r\\n     * t is a value in the range [0.0, 1.0] where 0 is this instance and\\r\\n     * 1 is equal to the second matrix. The t value is not constrained.\\r\\n     *\\r\\n     * Context from parent matrix is not applied to the returned matrix.\\r\\n     *\\r\\n     * Note: this interpolation method uses decomposition which makes\\r\\n     * it suitable for animations (in particular where rotation takes\\r\\n     * places).\\r\\n     *\\r\\n     * @param {Matrix} m2 - the matrix to interpolate with.\\r\\n     * @param {number} t - interpolation [0.0, 1.0]\\r\\n     * @param {CanvasRenderingContext2D} [context] - optional context to affect\\r\\n     * @returns {Matrix} - new instance with the interpolated result\\r\\n     */\\n    interpolateAnim: function interpolateAnim(m2, t, context) {\\n\\n        var me = this,\\n            m = context ? new Matrix(context) : new Matrix(),\\n            d1 = me.decompose(),\\n            d2 = m2.decompose(),\\n            rotation = d1.rotation + (d2.rotation - d1.rotation) * t,\\n            translateX = d1.translate.x + (d2.translate.x - d1.translate.x) * t,\\n            translateY = d1.translate.y + (d2.translate.y - d1.translate.y) * t,\\n            scaleX = d1.scale.x + (d2.scale.x - d1.scale.x) * t,\\n            scaleY = d1.scale.y + (d2.scale.y - d1.scale.y) * t;\\n\\n        m.translate(translateX, translateY);\\n        m.rotate(rotation);\\n        m.scale(scaleX, scaleY);\\n\\n        return m._x();\\n    },\\n\\n    /**\\r\\n     * Decompose the current matrix into simple transforms using either\\r\\n     * QR (default) or LU decomposition. Code adapted from\\r\\n     * http://www.maths-informatique-jeux.com/blog/frederic/?post/2013/12/01/Decomposition-of-2D-transform-matrices\\r\\n     *\\r\\n     * The result must be applied in the following order to reproduce the current matrix:\\r\\n     *\\r\\n     *     QR: translate -> rotate -> scale -> skewX\\r\\n     *     LU: translate -> skewY  -> scale -> skewX\\r\\n     *\\r\\n     * @param {boolean} [useLU=false] - set to true to use LU rather than QR algorithm\\r\\n     * @returns {*} - an object containing current decomposed values (rotate, skew, scale, translate)\\r\\n     */\\n    decompose: function decompose(useLU) {\\n\\n        var me = this,\\n            a = me.a,\\n            b = me.b,\\n            c = me.c,\\n            d = me.d,\\n            acos = Math.acos,\\n            atan = Math.atan,\\n            sqrt = Math.sqrt,\\n            pi = Math.PI,\\n            translate = { x: me.e, y: me.f },\\n            rotation = 0,\\n            scale = { x: 1, y: 1 },\\n            skew = { x: 0, y: 0 },\\n            determ = a * d - b * c; // determinant(), skip DRY here...\\n\\n        if (useLU) {\\n            if (a) {\\n                skew = { x: atan(c / a), y: atan(b / a) };\\n                scale = { x: a, y: determ / a };\\n            } else if (b) {\\n                rotation = pi * 0.5;\\n                scale = { x: b, y: determ / b };\\n                skew.x = atan(d / b);\\n            } else {\\n                // a = b = 0\\n                scale = { x: c, y: d };\\n                skew.x = pi * 0.25;\\n            }\\n        } else {\\n            // Apply the QR-like decomposition.\\n            if (a || b) {\\n                var r = sqrt(a * a + b * b);\\n                rotation = b > 0 ? acos(a / r) : -acos(a / r);\\n                scale = { x: r, y: determ / r };\\n                skew.x = atan((a * c + b * d) / (r * r));\\n            } else if (c || d) {\\n                var s = sqrt(c * c + d * d);\\n                rotation = pi * 0.5 - (d > 0 ? acos(-c / s) : -acos(c / s));\\n                scale = { x: determ / s, y: s };\\n                skew.y = atan((a * c + b * d) / (s * s));\\n            } else {\\n                // a = b = c = d = 0\\n                scale = { x: 0, y: 0 }; // = invalid matrix\\n            }\\n        }\\n\\n        return {\\n            scale: scale,\\n            translate: translate,\\n            rotation: rotation,\\n            skew: skew\\n        };\\n    },\\n\\n    /**\\r\\n     * Returns the determinant of the current matrix.\\r\\n     * @returns {number}\\r\\n     */\\n    determinant: function determinant() {\\n        return this.a * this.d - this.b * this.c;\\n    },\\n\\n    /**\\r\\n     * Apply current matrix to x and y point.\\r\\n     * Returns a point object.\\r\\n     *\\r\\n     * @param {number} x - value for x\\r\\n     * @param {number} y - value for y\\r\\n     * @returns {{x: number, y: number}} A new transformed point object\\r\\n     */\\n    applyToPoint: function applyToPoint(x, y) {\\n\\n        var me = this;\\n\\n        return {\\n            x: x * me.a + y * me.c + me.e,\\n            y: x * me.b + y * me.d + me.f\\n        };\\n    },\\n\\n    /**\\r\\n     * Apply current matrix to array with point objects or point pairs.\\r\\n     * Returns a new array with points in the same format as the input array.\\r\\n     *\\r\\n     * A point object is an object literal:\\r\\n     *\\r\\n     * {x: x, y: y}\\r\\n     *\\r\\n     * so an array would contain either:\\r\\n     *\\r\\n     * [{x: x1, y: y1}, {x: x2, y: y2}, ... {x: xn, y: yn}]\\r\\n     *\\r\\n     * or\\r\\n     * [x1, y1, x2, y2, ... xn, yn]\\r\\n     *\\r\\n     * @param {Array} points - array with point objects or pairs\\r\\n     * @returns {Array} A new array with transformed points\\r\\n     */\\n    applyToArray: function applyToArray(points) {\\n\\n        var i = 0,\\n            p,\\n            l,\\n            mxPoints = [];\\n\\n        if (typeof points[0] === 'number') {\\n\\n            l = points.length;\\n\\n            while (i < l) {\\n                p = this.applyToPoint(points[i++], points[i++]);\\n                mxPoints.push(p.x, p.y);\\n            }\\n        } else {\\n            for (; p = points[i]; i++) {\\n                mxPoints.push(this.applyToPoint(p.x, p.y));\\n            }\\n        }\\n\\n        return mxPoints;\\n    },\\n\\n    /**\\r\\n     * Apply current matrix to a typed array with point pairs. Although\\r\\n     * the input array may be an ordinary array, this method is intended\\r\\n     * for more performant use where typed arrays are used. The returned\\r\\n     * array is regardless always returned as a Float32Array.\\r\\n     *\\r\\n     * @param {*} points - (typed) array with point pairs\\r\\n     * @param {boolean} [use64=false] - use Float64Array instead of Float32Array\\r\\n     * @returns {*} A new typed array with transformed points\\r\\n     */\\n    applyToTypedArray: function applyToTypedArray(points, use64) {\\n\\n        var i = 0,\\n            p,\\n            l = points.length,\\n            mxPoints = use64 ? new Float64Array(l) : new Float32Array(l);\\n\\n        while (i < l) {\\n            p = this.applyToPoint(points[i], points[i + 1]);\\n            mxPoints[i++] = p.x;\\n            mxPoints[i++] = p.y;\\n        }\\n\\n        return mxPoints;\\n    },\\n\\n    /**\\r\\n     * Apply to any canvas 2D context object. This does not affect the\\r\\n     * context that optionally was referenced in constructor unless it is\\r\\n     * the same context.\\r\\n     * @param {CanvasRenderingContext2D} context\\r\\n     */\\n    applyToContext: function applyToContext(context) {\\n        var me = this;\\n        context.setTransform(me.a, me.b, me.c, me.d, me.e, me.f);\\n        return me;\\n    },\\n\\n    /**\\r\\n     * Returns true if matrix is an identity matrix (no transforms applied).\\r\\n     * @returns {boolean} True if identity (not transformed)\\r\\n     */\\n    isIdentity: function isIdentity() {\\n        var me = this;\\n        return me._q(me.a, 1) && me._q(me.b, 0) && me._q(me.c, 0) && me._q(me.d, 1) && me._q(me.e, 0) && me._q(me.f, 0);\\n    },\\n\\n    /**\\r\\n     * Returns true if matrix is invertible\\r\\n     * @returns {boolean}\\r\\n     */\\n    isInvertible: function isInvertible() {\\n        return !this._q(this.determinant(), 0);\\n    },\\n\\n    /**\\r\\n     * Test if matrix is valid.\\r\\n     */\\n    isValid: function isValid() {\\n        return !this._q(this.a * this.d, 0);\\n    },\\n\\n    /**\\r\\n     * Clones current instance and returning a new matrix.\\r\\n     * @param {boolean} [noContext=false] don't clone context reference if true\\r\\n     * @returns {Matrix}\\r\\n     */\\n    clone: function clone(noContext) {\\n        var me = this,\\n            m = new Matrix();\\n        m.a = me.a;\\n        m.b = me.b;\\n        m.c = me.c;\\n        m.d = me.d;\\n        m.e = me.e;\\n        m.f = me.f;\\n        if (!noContext) m.context = me.context;\\n\\n        return m;\\n    },\\n\\n    /**\\r\\n     * Compares current matrix with another matrix. Returns true if equal\\r\\n     * (within epsilon tolerance).\\r\\n     * @param {Matrix} m - matrix to compare this matrix with\\r\\n     * @returns {boolean}\\r\\n     */\\n    isEqual: function isEqual(m) {\\n\\n        var me = this,\\n            q = me._q;\\n\\n        return q(me.a, m.a) && q(me.b, m.b) && q(me.c, m.c) && q(me.d, m.d) && q(me.e, m.e) && q(me.f, m.f);\\n    },\\n\\n    /**\\r\\n     * Returns an array with current matrix values.\\r\\n     * @returns {Array}\\r\\n     */\\n    toArray: function toArray() {\\n        var me = this;\\n        return [me.a, me.b, me.c, me.d, me.e, me.f];\\n    },\\n\\n    /**\\r\\n     * Generates a matrix() string that can be used with CSS transform.\\r\\n     * @returns {string}\\r\\n     */\\n    toCSS: function toCSS() {\\n        return \\\"matrix(\\\" + this.toArray() + \\\")\\\";\\n    },\\n\\n    /**\\r\\n     * Generates a matrix3d() string that can be used with CSS transform.\\r\\n     * @returns {string}\\r\\n     */\\n    toCSS3D: function toCSS3D() {\\n        var me = this;\\n        return \\\"matrix3d(\\\" + me.a + \\\", \\\" + me.b + \\\", 0, 0, \\\" + me.c + \\\", \\\" + me.d + \\\", 0, 0, 0, 0, 1, 0, \\\" + me.e + \\\", \\\" + me.f + \\\", 0, 1)\\\";\\n    },\\n\\n    /**\\r\\n     * Returns a JSON compatible string of current matrix.\\r\\n     * @returns {string}\\r\\n     */\\n    toJSON: function toJSON() {\\n        return JSON.stringify(this.toArray());\\n    },\\n\\n    /**\\r\\n     * Returns a string with current matrix as comma-separated list.\\r\\n     * @returns {string}\\r\\n     */\\n    toString: function toString() {\\n        return \\\"\\\" + this.toArray();\\n    },\\n\\n    /**\\r\\n     * Compares floating point values with some tolerance (epsilon)\\r\\n     * @param {number} f1 - float 1\\r\\n     * @param {number} f2 - float 2\\r\\n     * @returns {boolean}\\r\\n     * @private\\r\\n     */\\n    _q: function _q(f1, f2) {\\n        return Math.abs(f1 - f2) < 1e-14;\\n    },\\n\\n    /**\\r\\n     * Apply current absolute matrix to context if defined, to sync it.\\r\\n     * @private\\r\\n     */\\n    _x: function _x() {\\n        var me = this;\\n        if (me.context) me.context.setTransform(me.a, me.b, me.c, me.d, me.e, me.f);\\n        return me;\\n    }\\n};\\n\\nexports[\\\"default\\\"] = Matrix;\\nmodule.exports = exports[\\\"default\\\"];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Defines the global root level namespace for the library.\\n *\\n * @module\\n * @author Micah Rolon <micah@ginasink.com>\\n *\\n * @requires game\\n * @requires module:play~pl.util\\n * @requires types/Basic\\n * @requires types/Dimensions\\n */\\n\\nvar _playGame = __webpack_require__(16);\\n\\nvar _playGame2 = _interopRequireDefault(_playGame);\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesBasic = __webpack_require__(11);\\n\\nvar _typesBasic2 = _interopRequireDefault(_typesBasic);\\n\\nvar _typesQueue = __webpack_require__(37);\\n\\nvar _typesQueue2 = _interopRequireDefault(_typesQueue);\\n\\nvar _typesDimensions = __webpack_require__(5);\\n\\n/**\\n * Globaly accesable, root level namespace for the library.\\n * @namespace\\n * @prop {object} EVENT - Namespace for noralized event name constants.\\n * @prop {Basic} Basic - Base object type.\\n * @prop {Point} Point - Object type which holds values on a 2D cartesian plane.\\n * @prop {Size} Size - Object type which holds 2-dimentional values for size.\\n * @prop {function} game - Registers a game view implementation. Also a namespace for other methods.\\n * @prop {object} util - Namespace for utility functions.\\n */\\nvar pl = {\\n  Basic: _typesBasic2['default'], Point: _typesDimensions.Point, Size: _typesDimensions.Size, Queue: _typesQueue2['default'],\\n  game: _playGame2['default'],\\n  util: _util2['default'],\\n\\n  /**\\n   * @namespace\\n   * @prop {string} CLICK - The device normalized click event name.\\n   */\\n  EVENT: {\\n    // TODO: Find a better way to test for touch enabled devices.\\n    CLICK: /ipad|iphone|android/i.test(navigator.userAgent) ? 'touchend' : 'click'\\n  }\\n};\\n\\nexports['default'] = pl;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvcGxheS5qcz82ZWUyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztvQ0FXaUIsRUFBVzs7OztnQ0FDWCxFQUFNOzs7O3NDQUNMLEVBQWE7Ozs7c0NBQ2IsRUFBYTs7OzsyQ0FDSCxDQUFrQjs7Ozs7Ozs7Ozs7O0FBWTlDLElBQUksRUFBRSxHQUFHO0FBQ1IsT0FBSywyQkFBRSxLQUFLLDBCQUFFLElBQUkseUJBQUUsS0FBSztBQUN6QixNQUFJO0FBQ0osTUFBSTs7Ozs7O0FBTUosT0FBSyxFQUFFOztBQUVOLFNBQUssRUFBRyxzQkFBc0IsQ0FBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLFVBQVUsR0FBRyxPQUFPO0dBQ2hGO0NBQ0QsQ0FBQzs7cUJBRWEsRUFBRSIsImZpbGUiOiIxNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRGVmaW5lcyB0aGUgZ2xvYmFsIHJvb3QgbGV2ZWwgbmFtZXNwYWNlIGZvciB0aGUgbGlicmFyeS5cbiAqXG4gKiBAbW9kdWxlXG4gKiBAYXV0aG9yIE1pY2FoIFJvbG9uIDxtaWNhaEBnaW5hc2luay5jb20+XG4gKlxuICogQHJlcXVpcmVzIGdhbWVcbiAqIEByZXF1aXJlcyBtb2R1bGU6cGxheX5wbC51dGlsXG4gKiBAcmVxdWlyZXMgdHlwZXMvQmFzaWNcbiAqIEByZXF1aXJlcyB0eXBlcy9EaW1lbnNpb25zXG4gKi9cbmltcG9ydCBnYW1lIGZyb20gJ3BsYXkuZ2FtZSc7XG5pbXBvcnQgdXRpbCBmcm9tICd1dGlsJztcbmltcG9ydCBCYXNpYyBmcm9tICd0eXBlcy9CYXNpYyc7XG5pbXBvcnQgUXVldWUgZnJvbSAndHlwZXMvUXVldWUnO1xuaW1wb3J0IHsgUG9pbnQsIFNpemUgfSBmcm9tICd0eXBlcy9EaW1lbnNpb25zJztcblxuLyoqXG4gKiBHbG9iYWx5IGFjY2VzYWJsZSwgcm9vdCBsZXZlbCBuYW1lc3BhY2UgZm9yIHRoZSBsaWJyYXJ5LlxuICogQG5hbWVzcGFjZVxuICogQHByb3Age29iamVjdH0gRVZFTlQgLSBOYW1lc3BhY2UgZm9yIG5vcmFsaXplZCBldmVudCBuYW1lIGNvbnN0YW50cy5cbiAqIEBwcm9wIHtCYXNpY30gQmFzaWMgLSBCYXNlIG9iamVjdCB0eXBlLlxuICogQHByb3Age1BvaW50fSBQb2ludCAtIE9iamVjdCB0eXBlIHdoaWNoIGhvbGRzIHZhbHVlcyBvbiBhIDJEIGNhcnRlc2lhbiBwbGFuZS5cbiAqIEBwcm9wIHtTaXplfSBTaXplIC0gT2JqZWN0IHR5cGUgd2hpY2ggaG9sZHMgMi1kaW1lbnRpb25hbCB2YWx1ZXMgZm9yIHNpemUuXG4gKiBAcHJvcCB7ZnVuY3Rpb259IGdhbWUgLSBSZWdpc3RlcnMgYSBnYW1lIHZpZXcgaW1wbGVtZW50YXRpb24uIEFsc28gYSBuYW1lc3BhY2UgZm9yIG90aGVyIG1ldGhvZHMuXG4gKiBAcHJvcCB7b2JqZWN0fSB1dGlsIC0gTmFtZXNwYWNlIGZvciB1dGlsaXR5IGZ1bmN0aW9ucy5cbiAqL1xudmFyIHBsID0ge1xuXHRCYXNpYywgUG9pbnQsIFNpemUsIFF1ZXVlLFxuXHRnYW1lLFxuXHR1dGlsLFxuXHRcblx0LyoqXG5cdCAqIEBuYW1lc3BhY2Vcblx0ICogQHByb3Age3N0cmluZ30gQ0xJQ0sgLSBUaGUgZGV2aWNlIG5vcm1hbGl6ZWQgY2xpY2sgZXZlbnQgbmFtZS5cblx0ICovXG5cdEVWRU5UOiB7XG5cdFx0Ly8gVE9ETzogRmluZCBhIGJldHRlciB3YXkgdG8gdGVzdCBmb3IgdG91Y2ggZW5hYmxlZCBkZXZpY2VzLlxuXHRcdENMSUNLOiAoL2lwYWR8aXBob25lfGFuZHJvaWQvaSkudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSA/ICd0b3VjaGVuZCcgOiAnY2xpY2snXG5cdH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHBsO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zb3VyY2UvcGxheS5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Defines the 'game' method for registration and initialization of game scopes. This method also acts as a namespace for game level functions (See: [pl.game]{@link module:play~pl.game}).\\n *\\n * @module game\\n * @author Micah Rolon <micah@ginasink.com>\\n *\\n * @requires play.game.component\\n * @requires play.game.manager\\n * @requires util\\n * @requires types/Events\\n * @requires types/GlobalScope\\n * @requires types/Entity\\n * @requires types/Screen\\n * @requires types/Game\\n */\\n\\nvar _playGameComponent = __webpack_require__(17);\\n\\nvar _playGameComponent2 = _interopRequireDefault(_playGameComponent);\\n\\nvar _playGameManager = __webpack_require__(19);\\n\\nvar _playGameManager2 = _interopRequireDefault(_playGameManager);\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesEvents = __webpack_require__(18);\\n\\nvar _typesEvents2 = _interopRequireDefault(_typesEvents);\\n\\nvar _typesGlobalScope = __webpack_require__(22);\\n\\nvar _typesGlobalScope2 = _interopRequireDefault(_typesGlobalScope);\\n\\nvar _typesEntity = __webpack_require__(39);\\n\\nvar _typesEntity2 = _interopRequireDefault(_typesEntity);\\n\\nvar _typesScreen = __webpack_require__(40);\\n\\nvar _typesScreen2 = _interopRequireDefault(_typesScreen);\\n\\nvar _typesGame = __webpack_require__(41);\\n\\nvar _typesGame2 = _interopRequireDefault(_typesGame);\\n\\nvar _platform = __webpack_require__(42);\\n\\nvar _platform2 = _interopRequireDefault(_platform);\\n\\nvar GAMES, CONFIG, READY_QUEUE;\\n\\n/**\\n * Define a game scope for registration and/or initialization.\\n * This method also acts as a namespace for game level functions (See: [pl.game]{@link module:play~pl.game}).\\n *\\n * @arg {string} _name - The name of the game matched with a DOM nodes 'id' attribute.\\n * @arg {function|object} _implementation - The constructor or object which implements the scope behavior.\\n */\\nfunction game(_name, _implementation) {\\n\\tif (game.isDOMReady) {\\n\\t\\tinitialize(_name, _implementation);\\n\\t} else {\\n\\t\\tregister(_name, _implementation);\\n\\t}\\n}\\n\\nfunction ready(_eventName) {\\n\\tif (READY_QUEUE.length) return false;\\n\\tgame.trigger(_eventName || 'ready');\\n}\\n\\n/**\\n * Registers an implementation of a game scope for initialization.\\n * @protected\\n * @arg {string} _name - The name of the game matched with a DOM nodes 'id' attribute.\\n * @arg {function|object} _implementation - The constructor or object which implements the scope behavior.\\n */\\nfunction register(_name, _implementation) {\\n\\tif (! ~GAMES.indexOf(_name)) {\\n\\t\\tGAMES.push({\\n\\t\\t\\tid: _name,\\n\\t\\t\\timplementation: _implementation\\n\\t\\t});\\n\\t}\\n}\\n\\n/**\\n * Initializes an implementation of a game scope. (overloaded)\\n * @function initialize\\n * @protected\\n * @arg {string} _name - The name of the game matched with a DOM nodes 'id' attribute.\\n * @arg {function|object} _implementation - The constructor or object which implements the scope behavior.\\n */\\n\\n/**\\n * Initializes an implementation of a game scope.\\n * @protected\\n * @arg {array} _collection - The collection of game scope records for initialization.\\n * @arg {function|object} _implementation - The constructor or object which implements the scope behavior.\\n */\\nfunction initialize(_name_collection, _implementation) {\\n\\tswitch (typeof _name_collection) {\\n\\t\\tcase 'string':\\n\\t\\t\\t_typesGlobalScope2['default'][_name_collection] = _typesGame2['default'].extend(_implementation).initialize('#' + _name_collection);\\n\\t\\t\\tbreak;\\n\\n\\t\\tcase 'object':\\n\\t\\t\\t_name_collection.forEach(function (_item, _index) {\\n\\t\\t\\t\\tinitialize(_item.id, _item.implementation);\\n\\t\\t\\t});\\n\\t\\t\\tbreak;\\n\\t}\\n}\\n\\n/** @protected */\\nGAMES = [];\\n/** @protected */\\nCONFIG = {};\\n/** @protected */\\nREADY_QUEUE = [];\\n\\n/**\\n * Interface for game level configuration.\\n * @namespace game\\n * @memberof module:play~pl\\n * @mixes Events\\n */\\n(function () {\\n\\n\\tthis.component = _playGameComponent2['default'];\\n\\tthis.manager = _playGameManager2['default'];\\n\\n\\t_util2['default'].mixin(game, _typesEvents2['default']);\\n\\n\\tthis.on('platform-event', function (_event) {\\n\\t\\tconsole.log('play.game -', _event.name, _event.gameData);\\n\\t});\\n\\n\\t/**\\n  * Starts the dominos falling\\n  * @function run\\n  * @memberof module:play~pl.game\\n  */\\n\\tthis.run = function () {\\n\\t\\tgame.isDOMReady = true;\\n\\t\\tgame.trigger('dom-ready');\\n\\n\\t\\tgame.component.loadAll(function () {\\n\\t\\t\\t// console.log('** All component sources loaded.');\\n\\t\\t\\tinitialize(GAMES);\\n\\n\\t\\t\\tGAMES = null;\\n\\t\\t});\\n\\n\\t\\t_platform2['default'].emit(_platform2['default'].EVENT_INIT);\\n\\t};\\n\\n\\tthis.report = function (_name) {\\n\\t\\t_platform2['default'].emit(_name);\\n\\n\\t\\treturn this.report;\\n\\t};\\n\\n\\tthis.report.exit = function (_gameScope) {\\n\\t\\t_platform2['default'].saveGameState(_gameScope.progress());\\n\\t\\t_platform2['default'].emit(_platform2['default'].EVENT_EXIT);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.report.flip = function (_gameScope) {\\n\\t\\t_platform2['default'].saveGameState(_gameScope.progress());\\n\\t\\t_platform2['default'].emit(_platform2['default'].EVENT_FLIPPED);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * Getter/Setter for game level configuration.\\n  * @function module:play~pl.game.config\\n  * @arg {string} _key - The key to retrieve\\n  * @returns {this}\\n  */\\n\\n\\t/**\\n  * Getter/Setter for game level configuration.\\n  * @function config\\n  * @memberof module:play~pl.game\\n  * @arg {object} _mixin - Object to set properties on configuration.\\n  * @returns {this}\\n  */\\n\\tthis.config = function (_key_mixin) {\\n\\t\\tswitch (typeof _key_mixin) {\\n\\t\\t\\tcase 'string':\\n\\t\\t\\t\\treturn CONFIG[_key_mixin];\\n\\t\\t\\tcase 'object':\\n\\t\\t\\t\\tif (_key_mixin) _util2['default'].mixin(CONFIG, _key_mixin);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * @function provideEntityType\\n  * @deprecated\\n  * @memberof module:play~pl.game\\n  */\\n\\tthis.provideEntityType = function () {\\n\\t\\treturn _typesEntity2['default'];\\n\\t};\\n\\n\\t/**\\n  * @function provideScreenType\\n  * @deprecated\\n  * @memberof module:play~pl.game\\n  */\\n\\tthis.provideScreenType = function () {\\n\\t\\treturn _typesScreen2['default'];\\n\\t};\\n\\n\\t/**\\n  * Augments the global scope.\\n  * @function scope\\n  * @arg {function|object} _mixin - Object or constructor to define members.\\n  * @returns {this}\\n  *\\n  * @memberof module:play~pl.game\\n  */\\n\\tthis.scope = function (_mixin) {\\n\\t\\tif (typeof _mixin === 'function') {\\n\\t\\t\\t_mixin.call(_typesGlobalScope2['default']);\\n\\t\\t} else if (_mixin) {\\n\\t\\t\\t_typesGlobalScope2['default'].mixin(_mixin);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * @function queue\\n  * @deprecated\\n  * @memberof module:play~pl.game\\n  */\\n\\tthis.queue = function (_item) {\\n\\t\\tif (! ~READY_QUEUE.indexOf(_item)) READY_QUEUE.push(_item);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.queue.complete = function (_item, _eventName) {\\n\\t\\tvar index;\\n\\n\\t\\tindex = READY_QUEUE.indexOf(_item);\\n\\t\\tREADY_QUEUE.splice(index, 1);\\n\\n\\t\\tready(_eventName);\\n\\n\\t\\treturn this;\\n\\t};\\n}).call(game);\\n\\nexports['default'] = game;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Defines the `component()` method for component behavior registration. This method is also a namesapce for methods to manage and load component behavior scripts.\\n *\\n * @module\\n * @author Micah Rolon <micah@ginasink.com>\\n *\\n * @requires play~pl.util\\n * @requires types/Events\\n */\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesEvents = __webpack_require__(18);\\n\\nvar _typesEvents2 = _interopRequireDefault(_typesEvents);\\n\\n/**\\n * Collection of component behavior records\\n * @const\\n */\\nvar COMPONENTS;\\n\\n/**\\n * Registers a component behavior.\\n * @arg {string} _name - The name for the component.\\n * @arg {function|object} _implementation - Constructor function or object with the behavior's implementation.\\n * @returns {@link module:play~pl.game}\\n */\\nfunction component(_name, _implementation) {\\n\\tif (!component.get(_name)) {\\n\\t\\tCOMPONENTS.push({\\n\\t\\t\\tname: _name,\\n\\t\\t\\timplementation: _implementation,\\n\\t\\t\\tconfig: {}\\n\\t\\t});\\n\\t}\\n\\n\\treturn this;\\n}\\n\\nCOMPONENTS = [];\\n\\n/**\\n * Methods to manage and load component behavior scripts.\\n * @namespace component\\n * @memberof module:play~pl.game\\n * @mixes Events\\n */\\n(function () {\\n\\n\\t_util2['default'].mixin(this, _typesEvents2['default']);\\n\\n\\t/**\\n  * Given a name; provides the component record. `{name, implementation}`\\n  * @memberof module:play~pl.game.component\\n  * @arg {string} _name - The name of the component.\\n  * @returns {object} The record.\\n  */\\n\\tthis.get = function (_name) {\\n\\t\\tvar i, record;\\n\\n\\t\\tfor (i = 0; record = COMPONENTS[i]; i += 1) {\\n\\t\\t\\tif (record.name === _name) return record;\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t};\\n\\n\\t/**\\n  * Loads the script for the component. The HTML and CSS will be loaded when the component scope initalizes.<br>\\n  * The path of the script file is resolved `{pl.game.config.componentDirectory}/{_name}/behavior.js`.\\n  * @memberof module:play~pl.game.component\\n  * @arg {string} _name - The name of the component.\\n  * @arg {function} _callback - Callback for load success.\\n  * @todo Implement Promises.\\n  * @returns `this`\\n  */\\n\\tthis.load = function (_name, _callback) {\\n\\t\\tvar path;\\n\\n\\t\\tif (component.get(_name)) {\\n\\t\\t\\tif (_callback) _callback.call(component, _name);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\tpath = pl.game.config('componentDirectory') + _name + '/behavior.js';\\n\\n\\t\\t$.getScript(path, function () {\\n\\t\\t\\tif (_callback) _callback.call(component, _name);\\n\\t\\t\\tcomponent.trigger('loaded', [_name]);\\n\\t\\t});\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * Loads all the component scripts for HTML elements with `pl-component` attributes.\\n  * @memberof module:play~pl.game.component\\n  * @arg {function} _callback - Callback for load success.\\n  * @todo Implement Promises.\\n  * @returns `this`\\n  */\\n\\tthis.loadAll = function (_callback) {\\n\\t\\tvar $components, queue;\\n\\n\\t\\t$components = $('[pl-component]');\\n\\t\\tqueue = [];\\n\\n\\t\\t$components.each(function (_index) {\\n\\t\\t\\tvar name;\\n\\n\\t\\t\\tname = $(this).attr('pl-component');\\n\\n\\t\\t\\tif (~queue.indexOf(name)) return;\\n\\n\\t\\t\\tqueue.push(name);\\n\\t\\t});\\n\\n\\t\\tqueue.slice(0).forEach(function (_name) {\\n\\t\\t\\tcomponent.load(_name, function () {\\n\\t\\t\\t\\tvar index;\\n\\n\\t\\t\\t\\tindex = queue.indexOf(_name);\\n\\t\\t\\t\\tqueue.splice(index, 1);\\n\\n\\t\\t\\t\\tif (!queue.length && _callback) _callback.apply(component, arguments);\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t// Maybe?\\n\\t// this.config = function () {};\\n}).call(component);\\n\\nexports['default'] = component;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvcGxheS5nYW1lLmNvbXBvbmVudC5qcz9lMTg2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Z0NBU2lCLEVBQU07Ozs7dUNBQ0osRUFBYzs7Ozs7Ozs7QUFNakMsSUFBSSxVQUFVLENBQUM7Ozs7Ozs7O0FBUWYsU0FBUyxTQUFTLENBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRTtBQUMzQyxLQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUMxQixZQUFVLENBQUMsSUFBSSxDQUFDO0FBQ2YsT0FBSSxFQUFFLEtBQUs7QUFDWCxpQkFBYyxFQUFFLGVBQWU7QUFDL0IsU0FBTSxFQUFFLEVBQUU7R0FDVixDQUFDLENBQUM7RUFDSDs7QUFFRCxRQUFPLElBQUksQ0FBQztDQUNaOztBQUVELFVBQVUsR0FBRyxFQUFFLENBQUM7Ozs7Ozs7O0FBUWhCLENBQUMsWUFBWTs7QUFFWixtQkFBSyxLQUFLLENBQUMsSUFBSSwyQkFBUyxDQUFDOzs7Ozs7OztBQVF6QixLQUFJLENBQUMsR0FBRyxHQUFHLFVBQVUsS0FBSyxFQUFFO0FBQzNCLE1BQUksQ0FBQyxFQUFFLE1BQU0sQ0FBQzs7QUFFZCxPQUFLLENBQUMsR0FBQyxDQUFDLEVBQUUsTUFBTSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUUsQ0FBQyxFQUFFO0FBQ3ZDLE9BQUksTUFBTSxDQUFDLElBQUksS0FBSyxLQUFLLEVBQUUsT0FBTyxNQUFNLENBQUM7R0FDekM7O0FBRUQsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDOzs7Ozs7Ozs7OztBQVdGLEtBQUksQ0FBQyxJQUFJLEdBQUcsVUFBVSxLQUFLLEVBQUUsU0FBUyxFQUFFO0FBQ3ZDLE1BQUksSUFBSTs7QUFFUixNQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDekIsT0FBSSxTQUFTLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDaEQsVUFBTyxJQUFJLENBQUM7R0FDWjs7QUFFRCxNQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsR0FBQyxLQUFLLEdBQUMsY0FBYyxDQUFDOztBQUVqRSxHQUFDLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxZQUFZO0FBQzdCLE9BQUksU0FBUyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ2hELFlBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztHQUNyQyxDQUFDLENBQUM7O0FBRUgsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDOzs7Ozs7Ozs7QUFTRixLQUFJLENBQUMsT0FBTyxHQUFHLFVBQVUsU0FBUyxFQUFFO0FBQ25DLE1BQUksV0FBVyxFQUFFLEtBQUssQ0FBQzs7QUFFdkIsYUFBVyxHQUFHLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ2xDLE9BQUssR0FBRyxFQUFFLENBQUM7O0FBRVgsYUFBVyxDQUFDLElBQUksQ0FBQyxVQUFVLE1BQU0sRUFBRTtBQUNsQyxPQUFJLElBQUksQ0FBQzs7QUFFVCxPQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQzs7QUFFcEMsT0FBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTzs7QUFFakMsUUFBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUNqQixDQUFDLENBQUM7O0FBRUgsT0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxLQUFLLEVBQUU7QUFDdkMsWUFBUyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsWUFBWTtBQUNqQyxRQUFJLEtBQUssQ0FBQzs7QUFFVixTQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM3QixTQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQzs7QUFFdkIsUUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksU0FBUyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQztJQUNyRSxDQUFDLENBQUM7R0FDSCxDQUFDLENBQUM7O0FBRUgsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDOzs7O0NBS0YsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7O3FCQUVKLFNBQVMiLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERlZmluZXMgdGhlIGBjb21wb25lbnQoKWAgbWV0aG9kIGZvciBjb21wb25lbnQgYmVoYXZpb3IgcmVnaXN0cmF0aW9uLiBUaGlzIG1ldGhvZCBpcyBhbHNvIGEgbmFtZXNhcGNlIGZvciBtZXRob2RzIHRvIG1hbmFnZSBhbmQgbG9hZCBjb21wb25lbnQgYmVoYXZpb3Igc2NyaXB0cy5cbiAqXG4gKiBAbW9kdWxlXG4gKiBAYXV0aG9yIE1pY2FoIFJvbG9uIDxtaWNhaEBnaW5hc2luay5jb20+XG4gKlxuICogQHJlcXVpcmVzIHBsYXl+cGwudXRpbFxuICogQHJlcXVpcmVzIHR5cGVzL0V2ZW50c1xuICovXG5pbXBvcnQgdXRpbCBmcm9tICd1dGlsJztcbmltcG9ydCBFdmVudHMgZnJvbSAndHlwZXMvRXZlbnRzJztcblxuLyoqXG4gKiBDb2xsZWN0aW9uIG9mIGNvbXBvbmVudCBiZWhhdmlvciByZWNvcmRzXG4gKiBAY29uc3RcbiAqL1xudmFyIENPTVBPTkVOVFM7XG5cbi8qKlxuICogUmVnaXN0ZXJzIGEgY29tcG9uZW50IGJlaGF2aW9yLlxuICogQGFyZyB7c3RyaW5nfSBfbmFtZSAtIFRoZSBuYW1lIGZvciB0aGUgY29tcG9uZW50LlxuICogQGFyZyB7ZnVuY3Rpb258b2JqZWN0fSBfaW1wbGVtZW50YXRpb24gLSBDb25zdHJ1Y3RvciBmdW5jdGlvbiBvciBvYmplY3Qgd2l0aCB0aGUgYmVoYXZpb3IncyBpbXBsZW1lbnRhdGlvbi5cbiAqIEByZXR1cm5zIHtAbGluayBtb2R1bGU6cGxheX5wbC5nYW1lfVxuICovXG5mdW5jdGlvbiBjb21wb25lbnQgKF9uYW1lLCBfaW1wbGVtZW50YXRpb24pIHtcblx0aWYgKCFjb21wb25lbnQuZ2V0KF9uYW1lKSkge1xuXHRcdENPTVBPTkVOVFMucHVzaCh7XG5cdFx0XHRuYW1lOiBfbmFtZSxcblx0XHRcdGltcGxlbWVudGF0aW9uOiBfaW1wbGVtZW50YXRpb24sXG5cdFx0XHRjb25maWc6IHt9XG5cdFx0fSk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn1cblxuQ09NUE9ORU5UUyA9IFtdO1xuXG4vKipcbiAqIE1ldGhvZHMgdG8gbWFuYWdlIGFuZCBsb2FkIGNvbXBvbmVudCBiZWhhdmlvciBzY3JpcHRzLlxuICogQG5hbWVzcGFjZSBjb21wb25lbnRcbiAqIEBtZW1iZXJvZiBtb2R1bGU6cGxheX5wbC5nYW1lXG4gKiBAbWl4ZXMgRXZlbnRzXG4gKi9cbihmdW5jdGlvbiAoKSB7XG5cdFxuXHR1dGlsLm1peGluKHRoaXMsIEV2ZW50cyk7XG5cblx0LyoqXG5cdCAqIEdpdmVuIGEgbmFtZTsgcHJvdmlkZXMgdGhlIGNvbXBvbmVudCByZWNvcmQuIGB7bmFtZSwgaW1wbGVtZW50YXRpb259YFxuXHQgKiBAbWVtYmVyb2YgbW9kdWxlOnBsYXl+cGwuZ2FtZS5jb21wb25lbnRcblx0ICogQGFyZyB7c3RyaW5nfSBfbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBjb21wb25lbnQuXG5cdCAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSByZWNvcmQuXG5cdCAqL1xuXHR0aGlzLmdldCA9IGZ1bmN0aW9uIChfbmFtZSkge1xuXHRcdHZhciBpLCByZWNvcmQ7XG5cblx0XHRmb3IgKGk9MDsgcmVjb3JkID0gQ09NUE9ORU5UU1tpXTsgaSs9MSkge1xuXHRcdFx0aWYgKHJlY29yZC5uYW1lID09PSBfbmFtZSkgcmV0dXJuIHJlY29yZDtcblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblx0fTtcblxuXHQvKipcblx0ICogTG9hZHMgdGhlIHNjcmlwdCBmb3IgdGhlIGNvbXBvbmVudC4gVGhlIEhUTUwgYW5kIENTUyB3aWxsIGJlIGxvYWRlZCB3aGVuIHRoZSBjb21wb25lbnQgc2NvcGUgaW5pdGFsaXplcy48YnI+XG5cdCAqIFRoZSBwYXRoIG9mIHRoZSBzY3JpcHQgZmlsZSBpcyByZXNvbHZlZCBge3BsLmdhbWUuY29uZmlnLmNvbXBvbmVudERpcmVjdG9yeX0ve19uYW1lfS9iZWhhdmlvci5qc2AuXG5cdCAqIEBtZW1iZXJvZiBtb2R1bGU6cGxheX5wbC5nYW1lLmNvbXBvbmVudFxuXHQgKiBAYXJnIHtzdHJpbmd9IF9uYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGNvbXBvbmVudC5cblx0ICogQGFyZyB7ZnVuY3Rpb259IF9jYWxsYmFjayAtIENhbGxiYWNrIGZvciBsb2FkIHN1Y2Nlc3MuXG5cdCAqIEB0b2RvIEltcGxlbWVudCBQcm9taXNlcy5cblx0ICogQHJldHVybnMgYHRoaXNgXG5cdCAqL1xuXHR0aGlzLmxvYWQgPSBmdW5jdGlvbiAoX25hbWUsIF9jYWxsYmFjaykge1xuXHRcdHZhciBwYXRoXG5cblx0XHRpZiAoY29tcG9uZW50LmdldChfbmFtZSkpIHtcblx0XHRcdGlmIChfY2FsbGJhY2spIF9jYWxsYmFjay5jYWxsKGNvbXBvbmVudCwgX25hbWUpO1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0cGF0aCA9IHBsLmdhbWUuY29uZmlnKCdjb21wb25lbnREaXJlY3RvcnknKStfbmFtZSsnL2JlaGF2aW9yLmpzJztcblxuXHRcdCQuZ2V0U2NyaXB0KHBhdGgsIGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmIChfY2FsbGJhY2spIF9jYWxsYmFjay5jYWxsKGNvbXBvbmVudCwgX25hbWUpO1xuXHRcdFx0Y29tcG9uZW50LnRyaWdnZXIoJ2xvYWRlZCcsIFtfbmFtZV0pO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0LyoqXG5cdCAqIExvYWRzIGFsbCB0aGUgY29tcG9uZW50IHNjcmlwdHMgZm9yIEhUTUwgZWxlbWVudHMgd2l0aCBgcGwtY29tcG9uZW50YCBhdHRyaWJ1dGVzLlxuXHQgKiBAbWVtYmVyb2YgbW9kdWxlOnBsYXl+cGwuZ2FtZS5jb21wb25lbnRcblx0ICogQGFyZyB7ZnVuY3Rpb259IF9jYWxsYmFjayAtIENhbGxiYWNrIGZvciBsb2FkIHN1Y2Nlc3MuXG5cdCAqIEB0b2RvIEltcGxlbWVudCBQcm9taXNlcy5cblx0ICogQHJldHVybnMgYHRoaXNgXG5cdCAqL1xuXHR0aGlzLmxvYWRBbGwgPSBmdW5jdGlvbiAoX2NhbGxiYWNrKSB7XG5cdFx0dmFyICRjb21wb25lbnRzLCBxdWV1ZTtcblxuXHRcdCRjb21wb25lbnRzID0gJCgnW3BsLWNvbXBvbmVudF0nKTtcblx0XHRxdWV1ZSA9IFtdO1xuXG5cdFx0JGNvbXBvbmVudHMuZWFjaChmdW5jdGlvbiAoX2luZGV4KSB7XG5cdFx0XHR2YXIgbmFtZTtcblxuXHRcdFx0bmFtZSA9ICQodGhpcykuYXR0cigncGwtY29tcG9uZW50Jyk7XG5cblx0XHRcdGlmICh+cXVldWUuaW5kZXhPZihuYW1lKSkgcmV0dXJuO1xuXG5cdFx0XHRxdWV1ZS5wdXNoKG5hbWUpO1xuXHRcdH0pO1xuXG5cdFx0cXVldWUuc2xpY2UoMCkuZm9yRWFjaChmdW5jdGlvbiAoX25hbWUpIHtcblx0XHRcdGNvbXBvbmVudC5sb2FkKF9uYW1lLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHZhciBpbmRleDtcblxuXHRcdFx0XHRpbmRleCA9IHF1ZXVlLmluZGV4T2YoX25hbWUpO1xuXHRcdFx0XHRxdWV1ZS5zcGxpY2UoaW5kZXgsIDEpO1xuXG5cdFx0XHRcdGlmICghcXVldWUubGVuZ3RoICYmIF9jYWxsYmFjaykgX2NhbGxiYWNrLmFwcGx5KGNvbXBvbmVudCwgYXJndW1lbnRzKVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvLyBNYXliZT9cblx0Ly8gdGhpcy5jb25maWcgPSBmdW5jdGlvbiAoKSB7fTtcblxufSkuY2FsbChjb21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQ7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NvdXJjZS9wbGF5LmdhbWUuY29tcG9uZW50LmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n*  Events\\n*  @desc Contains methods for managing and dispatching events from objects.\\n*  @proto Basic\\n*/\\n\\nvar _typesBasic = __webpack_require__(11);\\n\\nvar _typesBasic2 = _interopRequireDefault(_typesBasic);\\n\\nvar Events = _typesBasic2['default'].extend(function () {\\n\\tvar i, method, methods;\\n\\t/**\\n *  @desc Creates a function with a proxy to the jQuery method.\\n *  @param _name (String) The name of the method being proxied.\\n *  @return (jQuery|*) Either a jQuery object or whatever the original method returns.\\n *  @private\\n */\\n\\tfunction createProxyFunction(_name) {\\n\\t\\treturn function () {\\n\\t\\t\\tvar $jq = $();\\n\\t\\t\\t// We must wrap our object in jQuery. If 'typeof this' is a function then we need\\n\\t\\t\\t// to add it in this manner, otherwise jQuery treats it like a ready callback.\\n\\t\\t\\t$jq.push(this);\\n\\n\\t\\t\\treturn $.fn[_name].apply($jq, arguments);\\n\\t\\t};\\n\\t}\\n\\n\\tmethods = ['on', 'off', 'trigger'];\\n\\n\\tthis.baseType = 'TYPE_EVENTS';\\n\\n\\tfor (i = 0; method = methods[i]; i += 1) {\\n\\t\\tthis[method] = createProxyFunction(method);\\n\\t}\\n});\\n\\nexports['default'] = Events;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvRXZlbnRzLmpzP2VlZTMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O3NDQU1rQixFQUFhOzs7O0FBRS9CLElBQUksTUFBTSxHQUFHLHdCQUFNLE1BQU0sQ0FBQyxZQUFZO0FBQ3JDLEtBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUM7Ozs7Ozs7QUFPdkIsVUFBUyxtQkFBbUIsQ0FBRSxLQUFLLEVBQUU7QUFDcEMsU0FBTyxZQUFZO0FBQ2xCLE9BQUksR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDOzs7QUFHZCxNQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDOztBQUVmLFVBQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0dBQ3pDLENBQUM7RUFDRjs7QUFFRCxRQUFPLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDOztBQUVuQyxLQUFJLENBQUMsUUFBUSxHQUFHLGFBQWEsQ0FBQzs7QUFFOUIsTUFBSyxDQUFDLEdBQUMsQ0FBQyxFQUFFLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFFLENBQUMsRUFBRTtBQUNwQyxNQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7RUFDM0M7Q0FDRCxDQUFDLENBQUM7O3FCQUVZLE1BQU0iLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiogIEV2ZW50c1xuKiAgQGRlc2MgQ29udGFpbnMgbWV0aG9kcyBmb3IgbWFuYWdpbmcgYW5kIGRpc3BhdGNoaW5nIGV2ZW50cyBmcm9tIG9iamVjdHMuXG4qICBAcHJvdG8gQmFzaWNcbiovXG5cbmltcG9ydCBCYXNpYyBmcm9tICd0eXBlcy9CYXNpYyc7XG5cbnZhciBFdmVudHMgPSBCYXNpYy5leHRlbmQoZnVuY3Rpb24gKCkge1xuXHR2YXIgaSwgbWV0aG9kLCBtZXRob2RzO1xuXHQvKipcblx0KiAgQGRlc2MgQ3JlYXRlcyBhIGZ1bmN0aW9uIHdpdGggYSBwcm94eSB0byB0aGUgalF1ZXJ5IG1ldGhvZC5cblx0KiAgQHBhcmFtIF9uYW1lIChTdHJpbmcpIFRoZSBuYW1lIG9mIHRoZSBtZXRob2QgYmVpbmcgcHJveGllZC5cblx0KiAgQHJldHVybiAoalF1ZXJ5fCopIEVpdGhlciBhIGpRdWVyeSBvYmplY3Qgb3Igd2hhdGV2ZXIgdGhlIG9yaWdpbmFsIG1ldGhvZCByZXR1cm5zLlxuXHQqICBAcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBjcmVhdGVQcm94eUZ1bmN0aW9uIChfbmFtZSkge1xuXHRcdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgJGpxID0gJCgpO1xuXHRcdFx0Ly8gV2UgbXVzdCB3cmFwIG91ciBvYmplY3QgaW4galF1ZXJ5LiBJZiAndHlwZW9mIHRoaXMnIGlzIGEgZnVuY3Rpb24gdGhlbiB3ZSBuZWVkXG5cdFx0XHQvLyB0byBhZGQgaXQgaW4gdGhpcyBtYW5uZXIsIG90aGVyd2lzZSBqUXVlcnkgdHJlYXRzIGl0IGxpa2UgYSByZWFkeSBjYWxsYmFjay5cblx0XHRcdCRqcS5wdXNoKHRoaXMpO1xuXG5cdFx0XHRyZXR1cm4gJC5mbltfbmFtZV0uYXBwbHkoJGpxLCBhcmd1bWVudHMpO1xuXHRcdH07XG5cdH1cblxuXHRtZXRob2RzID0gWydvbicsICdvZmYnLCAndHJpZ2dlciddO1xuXG5cdHRoaXMuYmFzZVR5cGUgPSAnVFlQRV9FVkVOVFMnO1xuXG5cdGZvciAoaT0wOyBtZXRob2QgPSBtZXRob2RzW2ldOyBpKz0xKSB7XG5cdFx0dGhpc1ttZXRob2RdID0gY3JlYXRlUHJveHlGdW5jdGlvbihtZXRob2QpO1xuXHR9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgRXZlbnRzO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc291cmNlL3R5cGVzL0V2ZW50cy5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n\\nvar _playGameManagerDraggable = __webpack_require__(20);\\n\\nvar _playGameManagerDraggable2 = _interopRequireDefault(_playGameManagerDraggable);\\n\\nexports.draggable = _playGameManagerDraggable2['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvcGxheS5nYW1lLm1hbmFnZXIuanM/ODJiNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O29EQUFzQixFQUE2Qjs7OztRQUUxQyxTQUFTIiwiZmlsZSI6IjE5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRyYWdnYWJsZSBmcm9tICdwbGF5LmdhbWUubWFuYWdlci5kcmFnZ2FibGUnO1xuXG5leHBvcnQgeyBkcmFnZ2FibGUgfVxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc291cmNlL3BsYXkuZ2FtZS5tYW5hZ2VyLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesCollection = __webpack_require__(21);\\n\\nvar _typesCollection2 = _interopRequireDefault(_typesCollection);\\n\\nvar _typesDimensions = __webpack_require__(5);\\n\\nvar COLLECTION_DRAGABLES = _typesCollection2['default'].create();\\n\\nfunction boot() {\\n\\tattachEvents();\\n}\\n\\nfunction attachEvents() {\\n\\tvar state;\\n\\n\\t$(document).on('mousedown', function (_event) {\\n\\t\\tvar cursor, $draggable, transform, point, mode, style, dragStartEvent;\\n\\n\\t\\tcursor = resolveEventPoint(_event);\\n\\t\\t$draggable = $(_event.target).closest('[pl-draggable]');\\n\\n\\t\\tif ($draggable.length) {\\n\\t\\t\\tmode = $draggable.attr('pl-draggable');\\n\\t\\t\\tpoint = $draggable.absolutePosition();\\n\\t\\t\\ttransform = $draggable.transform();\\n\\t\\t\\t// TODO: Set these styles in a style node.\\n\\t\\t\\t// That way I dont have to override them important :/\\n\\t\\t\\tstyle = _util2['default'].mixin({}, window.getComputedStyle($draggable[0]));\\n\\n\\t\\t\\tdelete style.zIndex;\\n\\t\\t\\tdelete style.opacity;\\n\\t\\t\\tdelete style.cursor;\\n\\t\\t\\tdelete style.transition;\\n\\t\\t\\tdelete style.transitionDelay;\\n\\t\\t\\tdelete style.transitionDuration;\\n\\t\\t\\tdelete style.transitionProperty;\\n\\t\\t\\tdelete style.transitionTimingFunction;\\n\\n\\t\\t\\tstate = {\\n\\t\\t\\t\\tmode: mode,\\n\\t\\t\\t\\t$draggable: $draggable,\\n\\t\\t\\t\\tscope: $draggable.scope(),\\n\\t\\t\\t\\t$helper: null,\\n\\n\\t\\t\\t\\tstart: {\\n\\t\\t\\t\\t\\tcursor: cursor,\\n\\t\\t\\t\\t\\tpoint: point,\\n\\t\\t\\t\\t\\ttransform: transform\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\tprogress: {\\n\\t\\t\\t\\t\\tdistance: null,\\n\\t\\t\\t\\t\\tpoint: null,\\n\\t\\t\\t\\t\\ttransform: null\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\n\\t\\t\\tswitch (mode) {\\n\\t\\t\\t\\tcase 'clone':\\n\\t\\t\\t\\t\\tstate.$helper = $draggable.clone();\\n\\t\\t\\t\\t\\tstate.$helper.removeAttr('pl-draggable') // helpers are not to be captured as draggable\\n\\t\\t\\t\\t\\t.addClass('draggable-helper').css(style) // preserves the style of the draggable.\\n\\t\\t\\t\\t\\t.appendTo(document.body).absolutePosition(point);\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tcase 'pluck':\\n\\t\\t\\t\\t\\t$draggable.addClass('PLUCKED');\\n\\n\\t\\t\\t\\t\\tstate.$helper = $draggable.clone();\\n\\t\\t\\t\\t\\tstate.$helper.removeAttr('pl-draggable') // helpers are not to be captured as draggable\\n\\t\\t\\t\\t\\t.addClass('draggable-helper').css(style) // preserves the style of the draggable.\\n\\t\\t\\t\\t\\t.appendTo(document.body).absolutePosition(point);\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\tstate.$helper = $draggable;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\tstate.$helper.removeClass('DRAG-ENDED').addClass('DRAG-START');\\n\\n\\t\\t\\tdragStartEvent = $.Event('drag-start', {\\n\\t\\t\\t\\tstate: state,\\n\\t\\t\\t\\ttargetScope: state.scope\\n\\t\\t\\t});\\n\\n\\t\\t\\tstate.scope.trigger(dragStartEvent);\\n\\t\\t}\\n\\t}).on('mousemove', function (_event) {\\n\\t\\tvar cursor, $draggable, distance, point, transform, dragMoveEvent;\\n\\n\\t\\tif (state) {\\n\\t\\t\\tcursor = resolveEventPoint(_event);\\n\\t\\t\\tdistance = state.start.cursor.distance(cursor);\\n\\t\\t\\tpoint = _typesDimensions.Point.create();\\n\\t\\t\\ttransform = null;\\n\\n\\t\\t\\tif (state.start.transform !== 'none') {\\n\\t\\t\\t\\ttransform = state.start.transform.clone();\\n\\t\\t\\t\\ttransform.translate(distance.width, distance.height);\\n\\t\\t\\t\\tpoint.set(transform.applyToPoint(0, 0));\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tpoint = distance.to('point');\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (state.$helper.hasClass('DRAG-START')) {\\n\\t\\t\\t\\tstate.$helper.removeClass('DRAG-START').addClass('DRAGGING');\\n\\t\\t\\t}\\n\\n\\t\\t\\tdragMoveEvent = $.Event('drag-move', {\\n\\t\\t\\t\\tstate: state,\\n\\t\\t\\t\\ttargetScope: state.scope\\n\\t\\t\\t});\\n\\n\\t\\t\\tstate.progress.distance = distance;\\n\\t\\t\\tstate.progress.point = state.start.point.inc(point);\\n\\t\\t\\tstate.progress.transform = transform;\\n\\n\\t\\t\\tstate.scope.translate(state.$helper, point.scale(1 / state.scope.game.zoom));\\n\\t\\t\\tstate.scope.trigger(dragMoveEvent);\\n\\t\\t}\\n\\t}).on('mouseup mouseout', function (_event) {\\n\\t\\tvar $draggable, dragEndEvent;\\n\\n\\t\\tif (state) {\\n\\t\\t\\t// Do not end dragging if we dont mouse out of the document.\\n\\t\\t\\tif (_event.type === 'mouseout' && ! ~[null, document.documentElement].indexOf(_event.toElement)) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t$draggable = state.$draggable;\\n\\n\\t\\t\\tif (state.$helper.hasClass('draggable-helper')) {\\n\\t\\t\\t\\tstate.$helper.on('transitionend', function () {\\n\\t\\t\\t\\t\\t$draggable.removeClass('PLUCKED');\\n\\t\\t\\t\\t\\t$(this).remove();\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\tstate.$helper.removeClass('DRAG-START DRAGGING').addClass('DRAG-ENDED');\\n\\n\\t\\t\\tdragEndEvent = $.Event('drag-end', {\\n\\t\\t\\t\\tstate: state,\\n\\t\\t\\t\\ttargetScope: state.scope\\n\\t\\t\\t});\\n\\n\\t\\t\\tstate.scope.trigger(dragEndEvent);\\n\\n\\t\\t\\tstate = null;\\n\\t\\t}\\n\\t});\\n}\\n\\nfunction resolveEventPoint(_event) {\\n\\tvar x, y;\\n\\n\\tif (_event.touches) {\\n\\t\\tx = _event.touches[0].clientX;\\n\\t\\ty = _event.touches[0].clientY;\\n\\t} else {\\n\\t\\tx = _event.clientX;\\n\\t\\ty = _event.clientY;\\n\\t}\\n\\n\\treturn _typesDimensions.Point.create().set(x, y);\\n}\\n\\nvar draggableManager = {};\\n\\nboot();\\n\\nexports['default'] = draggableManager;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Collections are iterables which hold a consistent interface throughout its indexes.\\n *\\n * @module\\n * @requires module:types/BasicArray\\n */\\n\\nvar _typesBasicArray = __webpack_require__(9);\\n\\nvar _typesBasicArray2 = _interopRequireDefault(_typesBasicArray);\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. use `Collection.create()` to get a new instance.\\n * @classdesc Iterable holding record objects of the same interface.\\n * @class\\n * @extends module:types/BasicArray~BasicArray\\n */\\nvar Collection = _typesBasicArray2['default'].extend(function () {\\n\\t/**\\n  * Gets the record object which has `_member` as a member.\\n  * @instance\\n  * @protected\\n  * @memberof module:types/Collection~Collection\\n  * @arg {*} _member - object reference to search for.\\n  * @arg {string} _key - the target key to test the `_member` against.\\n  * @arg {boolean} _shouldCollect - <span style=\\\"color: blue; font-weight: bold;\\\">`true`</span>: collect all matching elements.<br>\\n  * <span style=\\\"color: blue; font-weight: bold;\\\">`false`</span>: return first result.\\n  */\\n\\tfunction getRecord(_member, _key, _shouldCollect) {\\n\\t\\tvar i, record, member, result;\\n\\n\\t\\tresult = [];\\n\\n\\t\\tfor (i = 0; record = this[i]; i += 1) {\\n\\t\\t\\tif (_key !== undefined) {\\n\\t\\t\\t\\tif (record[_key] === _member) {\\n\\t\\t\\t\\t\\tif (_shouldCollect) {\\n\\t\\t\\t\\t\\t\\tresult.push(record);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\treturn record;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (record instanceof Array) {\\n\\t\\t\\t\\tif (~record.indexOf(_member)) {\\n\\t\\t\\t\\t\\tif (_shouldCollect) {\\n\\t\\t\\t\\t\\t\\tresult.push(record);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\treturn record;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tfor (member in record) {\\n\\t\\t\\t\\t\\tif (!record.hasOwnProperty(member)) continue;\\n\\t\\t\\t\\t\\tif (record[member] === _member) {\\n\\t\\t\\t\\t\\t\\tif (_shouldCollect) {\\n\\t\\t\\t\\t\\t\\t\\tresult.push(record);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\treturn record;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn result.length ? result : null;\\n\\t}\\n\\n\\t/**\\n  * Objects with this as an own property will be identified as the root object.\\n  * @memberof module:types/Collection~Collection\\n  * @readonly\\n  * @default\\n  */\\n\\tthis.baseType = 'TYPE_COLLECTION';\\n\\n\\tthis.add = function (_record) {\\n\\t\\tif (~this.indexOf(_record)) return false;\\n\\t\\tthis.push(_record);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.remove = function (_record) {\\n\\t\\tvar index;\\n\\n\\t\\tindex = this.indexOf(_record);\\n\\t\\tif (~index) this.splice(index, 1);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.has = function (_record) {\\n\\t\\treturn !! ~this.indexOf(_record);\\n\\t};\\n\\n\\tthis.get = function (_member, _key) {\\n\\t\\treturn getRecord.call(this, _member, _key);\\n\\t};\\n\\n\\tthis.filter = function (_member, _key) {\\n\\t\\treturn getRecord.call(this, _member, _key, true);\\n\\t};\\n});\\n\\nexports['default'] = Collection;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvQ29sbGVjdGlvbi5qcz9lN2RjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7MkNBTXVCLENBQWtCOzs7Ozs7Ozs7O0FBUXpDLElBQUksVUFBVSxHQUFHLDZCQUFXLE1BQU0sQ0FBQyxZQUFZOzs7Ozs7Ozs7OztBQVc5QyxVQUFTLFNBQVMsQ0FBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRTtBQUNsRCxNQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQzs7QUFFOUIsUUFBTSxHQUFHLEVBQUUsQ0FBQzs7QUFFWixPQUFLLENBQUMsR0FBQyxDQUFDLEVBQUUsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUUsQ0FBQyxFQUFFO0FBQ2pDLE9BQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtBQUN2QixRQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxPQUFPLEVBQUU7QUFDN0IsU0FBSSxjQUFjLEVBQUU7QUFDbkIsWUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztNQUNwQixNQUVJO0FBQ0osYUFBTyxNQUFNLENBQUM7TUFDZDtLQUNEO0lBQ0QsTUFFSSxJQUFJLE1BQU0sWUFBWSxLQUFLLEVBQUU7QUFDakMsUUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDN0IsU0FBSSxjQUFjLEVBQUU7QUFDbkIsWUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztNQUNwQixNQUVJO0FBQ0osYUFBTyxNQUFNLENBQUM7TUFDZDtLQUNEO0lBQ0QsTUFFSTtBQUNKLFNBQUssTUFBTSxJQUFJLE1BQU0sRUFBRTtBQUN0QixTQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRSxTQUFTO0FBQzdDLFNBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLE9BQU8sRUFBRTtBQUMvQixVQUFJLGNBQWMsRUFBRTtBQUNuQixhQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO09BQ3BCLE1BRUk7QUFDSixjQUFPLE1BQU0sQ0FBQztPQUNkO01BQ0Q7S0FDRDtJQUNEO0dBQ0Q7O0FBRUQsU0FBTyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUM7RUFDckM7Ozs7Ozs7O0FBUUQsS0FBSSxDQUFDLFFBQVEsR0FBRyxpQkFBaUIsQ0FBQzs7QUFFbEMsS0FBSSxDQUFDLEdBQUcsR0FBRyxVQUFVLE9BQU8sRUFBRTtBQUM3QixNQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxPQUFPLEtBQUssQ0FBQztBQUN6QyxNQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDOztBQUVuQixTQUFPLElBQUksQ0FBQztFQUNaLENBQUM7O0FBRUYsS0FBSSxDQUFDLE1BQU0sR0FBRyxVQUFVLE9BQU8sRUFBRTtBQUNoQyxNQUFJLEtBQUssQ0FBQzs7QUFFVixPQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM5QixNQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDOztBQUVsQyxTQUFPLElBQUksQ0FBQztFQUNaLENBQUM7O0FBRUYsS0FBSSxDQUFDLEdBQUcsR0FBRyxVQUFVLE9BQU8sRUFBRTtBQUM3QixTQUFPLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7RUFDaEMsQ0FBQzs7QUFFRixLQUFJLENBQUMsR0FBRyxHQUFHLFVBQVUsT0FBTyxFQUFFLElBQUksRUFBRTtBQUNuQyxTQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztFQUMzQyxDQUFDOztBQUVGLEtBQUksQ0FBQyxNQUFNLEdBQUcsVUFBVSxPQUFPLEVBQUUsSUFBSSxFQUFFO0FBQ3RDLFNBQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztFQUNqRCxDQUFDO0NBRUYsQ0FBQyxDQUFDOztxQkFFWSxVQUFVIiwiZmlsZSI6IjIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb2xsZWN0aW9ucyBhcmUgaXRlcmFibGVzIHdoaWNoIGhvbGQgYSBjb25zaXN0ZW50IGludGVyZmFjZSB0aHJvdWdob3V0IGl0cyBpbmRleGVzLlxuICpcbiAqIEBtb2R1bGVcbiAqIEByZXF1aXJlcyBtb2R1bGU6dHlwZXMvQmFzaWNBcnJheVxuICovXG5pbXBvcnQgQmFzaWNBcnJheSBmcm9tICd0eXBlcy9CYXNpY0FycmF5JztcblxuLyoqXG4gKiA8c3BhbiBjbGFzcz1cImltcG9ydGFudFwiPk5PVEU6PC9zcGFuPiBUaGlzIGlzIE5PVCBhIGNvbnN0cnVjdG9yLiB1c2UgYENvbGxlY3Rpb24uY3JlYXRlKClgIHRvIGdldCBhIG5ldyBpbnN0YW5jZS5cbiAqIEBjbGFzc2Rlc2MgSXRlcmFibGUgaG9sZGluZyByZWNvcmQgb2JqZWN0cyBvZiB0aGUgc2FtZSBpbnRlcmZhY2UuXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIG1vZHVsZTp0eXBlcy9CYXNpY0FycmF5fkJhc2ljQXJyYXlcbiAqL1xudmFyIENvbGxlY3Rpb24gPSBCYXNpY0FycmF5LmV4dGVuZChmdW5jdGlvbiAoKSB7XG5cdC8qKlxuXHQgKiBHZXRzIHRoZSByZWNvcmQgb2JqZWN0IHdoaWNoIGhhcyBgX21lbWJlcmAgYXMgYSBtZW1iZXIuXG5cdCAqIEBpbnN0YW5jZVxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBtZW1iZXJvZiBtb2R1bGU6dHlwZXMvQ29sbGVjdGlvbn5Db2xsZWN0aW9uXG5cdCAqIEBhcmcgeyp9IF9tZW1iZXIgLSBvYmplY3QgcmVmZXJlbmNlIHRvIHNlYXJjaCBmb3IuXG5cdCAqIEBhcmcge3N0cmluZ30gX2tleSAtIHRoZSB0YXJnZXQga2V5IHRvIHRlc3QgdGhlIGBfbWVtYmVyYCBhZ2FpbnN0LlxuXHQgKiBAYXJnIHtib29sZWFufSBfc2hvdWxkQ29sbGVjdCAtIDxzcGFuIHN0eWxlPVwiY29sb3I6IGJsdWU7IGZvbnQtd2VpZ2h0OiBib2xkO1wiPmB0cnVlYDwvc3Bhbj46IGNvbGxlY3QgYWxsIG1hdGNoaW5nIGVsZW1lbnRzLjxicj5cblx0ICogPHNwYW4gc3R5bGU9XCJjb2xvcjogYmx1ZTsgZm9udC13ZWlnaHQ6IGJvbGQ7XCI+YGZhbHNlYDwvc3Bhbj46IHJldHVybiBmaXJzdCByZXN1bHQuXG5cdCAqL1xuXHRmdW5jdGlvbiBnZXRSZWNvcmQgKF9tZW1iZXIsIF9rZXksIF9zaG91bGRDb2xsZWN0KSB7XG5cdFx0dmFyIGksIHJlY29yZCwgbWVtYmVyLCByZXN1bHQ7XG5cblx0XHRyZXN1bHQgPSBbXTtcblxuXHRcdGZvciAoaT0wOyByZWNvcmQgPSB0aGlzW2ldOyBpKz0xKSB7XG5cdFx0XHRpZiAoX2tleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGlmIChyZWNvcmRbX2tleV0gPT09IF9tZW1iZXIpIHtcblx0XHRcdFx0XHRpZiAoX3Nob3VsZENvbGxlY3QpIHtcblx0XHRcdFx0XHRcdHJlc3VsdC5wdXNoKHJlY29yZCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVjb3JkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRlbHNlIGlmIChyZWNvcmQgaW5zdGFuY2VvZiBBcnJheSkge1xuXHRcdFx0XHRpZiAofnJlY29yZC5pbmRleE9mKF9tZW1iZXIpKSB7XG5cdFx0XHRcdFx0aWYgKF9zaG91bGRDb2xsZWN0KSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQucHVzaChyZWNvcmQpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlY29yZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdGZvciAobWVtYmVyIGluIHJlY29yZCkge1xuXHRcdFx0XHRcdGlmICghcmVjb3JkLmhhc093blByb3BlcnR5KG1lbWJlcikpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdGlmIChyZWNvcmRbbWVtYmVyXSA9PT0gX21lbWJlcikge1xuXHRcdFx0XHRcdFx0aWYgKF9zaG91bGRDb2xsZWN0KSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdC5wdXNoKHJlY29yZCk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVjb3JkO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQubGVuZ3RoID8gcmVzdWx0IDogbnVsbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBPYmplY3RzIHdpdGggdGhpcyBhcyBhbiBvd24gcHJvcGVydHkgd2lsbCBiZSBpZGVudGlmaWVkIGFzIHRoZSByb290IG9iamVjdC5cblx0ICogQG1lbWJlcm9mIG1vZHVsZTp0eXBlcy9Db2xsZWN0aW9ufkNvbGxlY3Rpb25cblx0ICogQHJlYWRvbmx5XG5cdCAqIEBkZWZhdWx0XG5cdCAqL1xuXHR0aGlzLmJhc2VUeXBlID0gJ1RZUEVfQ09MTEVDVElPTic7XG5cblx0dGhpcy5hZGQgPSBmdW5jdGlvbiAoX3JlY29yZCkge1xuXHRcdGlmICh+dGhpcy5pbmRleE9mKF9yZWNvcmQpKSByZXR1cm4gZmFsc2U7XG5cdFx0dGhpcy5wdXNoKF9yZWNvcmQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0dGhpcy5yZW1vdmUgPSBmdW5jdGlvbiAoX3JlY29yZCkge1xuXHRcdHZhciBpbmRleDtcblxuXHRcdGluZGV4ID0gdGhpcy5pbmRleE9mKF9yZWNvcmQpO1xuXHRcdGlmICh+aW5kZXgpIHRoaXMuc3BsaWNlKGluZGV4LCAxKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdHRoaXMuaGFzID0gZnVuY3Rpb24gKF9yZWNvcmQpIHtcblx0XHRyZXR1cm4gISF+dGhpcy5pbmRleE9mKF9yZWNvcmQpO1xuXHR9O1xuXG5cdHRoaXMuZ2V0ID0gZnVuY3Rpb24gKF9tZW1iZXIsIF9rZXkpIHtcblx0XHRyZXR1cm4gZ2V0UmVjb3JkLmNhbGwodGhpcywgX21lbWJlciwgX2tleSk7XG5cdH07XG5cblx0dGhpcy5maWx0ZXIgPSBmdW5jdGlvbiAoX21lbWJlciwgX2tleSkge1xuXHRcdHJldHVybiBnZXRSZWNvcmQuY2FsbCh0aGlzLCBfbWVtYmVyLCBfa2V5LCB0cnVlKTtcblx0fTtcblxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IENvbGxlY3Rpb247XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zb3VyY2UvdHlwZXMvQ29sbGVjdGlvbi5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"exports.__esModule = true;\\n/**\\n*  GlobalScope\\n*/\\n\\nvar _typesScope = __webpack_require__(23);\\n\\nvar GlobalScope = _typesScope.Scope.extend(function () {\\n\\n\\tthis.baseType = 'TYPE_GLOBAL_SCOPE';\\n});\\n\\nexports['default'] = GlobalScope;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvR2xvYmFsU2NvcGUuanM/ZmE3YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztzQ0FJc0IsRUFBYTs7QUFFbkMsSUFBSSxXQUFXLEdBQUcsa0JBQU0sTUFBTSxDQUFDLFlBQVk7O0FBRTFDLEtBQUksQ0FBQyxRQUFRLEdBQUcsbUJBQW1CLENBQUM7Q0FFcEMsQ0FBQyxDQUFDOztxQkFFWSxXQUFXIiwiZmlsZSI6IjIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4qICBHbG9iYWxTY29wZVxuKi9cblxuaW1wb3J0IHsgU2NvcGUgfSBmcm9tICd0eXBlcy9TY29wZSc7XG5cbnZhciBHbG9iYWxTY29wZSA9IFNjb3BlLmV4dGVuZChmdW5jdGlvbiAoKSB7XG5cdFxuXHR0aGlzLmJhc2VUeXBlID0gJ1RZUEVfR0xPQkFMX1NDT1BFJztcblxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEdsb2JhbFNjb3BlO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc291cmNlL3R5cGVzL0dsb2JhbFNjb3BlLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Scopes are packages which contain a reference to a DOM element wrapped in a jQuery object.\\n * This enables properties and methods to be in context of the DOM node and its descendants.\\n *\\n * @module\\n * @requires types/jQProxy\\n * @requires types/Basic\\n * @requires types/Queue\\n * @requires play.game\\n * @requires util\\n * @requires evalAction\\n *\\n * @exports createEntity\\n */\\n\\nvar _typesJQProxy = __webpack_require__(24);\\n\\nvar _typesJQProxy2 = _interopRequireDefault(_typesJQProxy);\\n\\nvar _typesBasic = __webpack_require__(11);\\n\\nvar _typesBasic2 = _interopRequireDefault(_typesBasic);\\n\\nvar _typesQueue = __webpack_require__(37);\\n\\nvar _typesQueue2 = _interopRequireDefault(_typesQueue);\\n\\nvar _typesDimensions = __webpack_require__(5);\\n\\nvar _playGame = __webpack_require__(16);\\n\\nvar _playGame2 = _interopRequireDefault(_playGame);\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _evalAction = __webpack_require__(38);\\n\\nvar _evalAction2 = _interopRequireDefault(_evalAction);\\n\\n/**\\n * Creates a new Enitiy instance with a context node and implementation.\\n * The instance is prototyped from the parent scope.\\n *\\n * @memberof module:types/Scope~Scope#createEntity\\n * @protected\\n * @arg {jQuery} _$node - jQuery object with a single node in the collection.\\n * @arg {function|object} _implementation - Constructor function or object with the entity behavior.\\n * @returns {module:types/Scope~Scope}\\n */\\nfunction createEntity(_$node, _implementation) {\\n\\tvar component, prototype, componentRecord, instance;\\n\\n\\tcomponent = _$node.attr('pl-component');\\n\\tprototype = this;\\n\\n\\tif (component) {\\n\\t\\tcomponentRecord = _playGame2['default'].component.get(component);\\n\\n\\t\\tif (componentRecord) {\\n\\t\\t\\tprototype = this.extend(componentRecord.implementation);\\n\\t\\t} else {\\n\\t\\t\\tthrow new Error('No implementation record for the ' + component + 'component.');\\n\\t\\t}\\n\\t}\\n\\n\\tinstance = typeof _implementation === 'function' ? prototype.extend(_implementation) : prototype.create();\\n\\n\\treturn instance.initialize(_$node, component);\\n}\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. Use `Scope.create()` to get a new instance.\\n * @classdesc A package which contains a reference to a DOM node wrapped in a jQuery object. For more information on scopes read [this]{@link module:types/Scope}.\\n * @class\\n * @extends module:types/jQProxy~jQProxy\\n */\\nvar Scope = _typesJQProxy2['default'].extend(function () {\\n\\n\\t/**\\n  * Collection of records pairing a node with its action.\\n  * @memberof module:types/Scope~Scope\\n  * @static\\n  * @protected\\n  * @todo Convert to types/Collection\\n  */\\n\\tvar Actionables;\\n\\n\\tfunction attachActionHandler() {\\n\\t\\tvar entity;\\n\\n\\t\\tentity = this;\\n\\n\\t\\tthis.on(pl.EVENT.CLICK, function (_event) {\\n\\t\\t\\tvar target, record;\\n\\n\\t\\t\\ttarget = $(_event.target).closest('[pl-action]')[0];\\n\\t\\t\\t// TODO: Resolve for touches\\n\\t\\t\\t_event.cursor = _typesDimensions.Point.create().set(_event.clientX, _event.clientY);\\n\\n\\t\\t\\tif (target) {\\n\\t\\t\\t\\trecord = entity.actionables.item(target);\\n\\n\\t\\t\\t\\tif (record) {\\n\\t\\t\\t\\t\\t_event.targetScope = entity;\\n\\t\\t\\t\\t\\tentity.event = _event;\\n\\t\\t\\t\\t\\t_evalAction2['default'](record.action, entity);\\n\\t\\t\\t\\t\\tentity.event = null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\n\\tfunction getRecordBy(_key, _member, _collection) {\\n\\t\\tvar i, record;\\n\\n\\t\\tif (_collection) {\\n\\t\\t\\tfor (i = 0; record = _collection[i]; i += 1) {\\n\\t\\t\\t\\tif (record[_key] === _member) return record;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t}\\n\\n\\tfunction removeRecord(_record, _collection) {\\n\\t\\tvar index;\\n\\n\\t\\tindex = _collection.indexOf(_record);\\n\\t\\tif (~index) _collection.splice(index, 1);\\n\\t}\\n\\n\\tfunction captureDropables(_scope) {\\n\\t\\tvar collection;\\n\\n\\t\\tcollection = [];\\n\\n\\t\\t_scope.find('> [pl-pluck]').each(function () {\\n\\t\\t\\tvar name;\\n\\n\\t\\t\\tname = $(this).attr('pl-pluck');\\n\\n\\t\\t\\tcollection.push(this);\\n\\t\\t\\tcollection[name] = this;\\n\\t\\t});\\n\\n\\t\\treturn collection;\\n\\t}\\n\\n\\tfunction pluckAndDrop(_dropables, _template) {\\n\\t\\t$(_template).find('[pl-drop]').each(function () {\\n\\t\\t\\tvar $node, name, dropable;\\n\\n\\t\\t\\t$node = $(this);\\n\\t\\t\\tname = $node.attr('pl-drop');\\n\\t\\t\\tdropable = _dropables[name];\\n\\n\\t\\t\\tif (dropable) {\\n\\t\\t\\t\\t$node.replaceWith(dropable.children);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\n\\t// Protected\\n\\tfunction loadComponentAssets(_name, _callback) {\\n\\t\\tvar scope, path, totalRequests, transcludeMode, dropables;\\n\\n\\t\\tfunction ready() {\\n\\t\\t\\tready.status += 1;\\n\\n\\t\\t\\tif (ready.status === totalRequests) {\\n\\t\\t\\t\\tif (_callback) {\\n\\t\\t\\t\\t\\t_callback.call(scope, _name);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\ttotalRequests = 0;\\n\\t\\tscope = this;\\n\\t\\tpath = _playGame2['default'].config('componentDirectory') + _name + '/';\\n\\t\\tdropables = captureDropables(this);\\n\\t\\ttranscludeMode = dropables.length ? this.TRANSCLUDE_PLUCK : this.properties.transclude;\\n\\t\\tready.status = 0;\\n\\n\\t\\tif (!this.children().length || transcludeMode) {\\n\\t\\t\\ttotalRequests += 1;\\n\\t\\t\\t$('<div>').load(path + 'template.html', function () {\\n\\t\\t\\t\\tvar memory;\\n\\n\\t\\t\\t\\tmemory = [];\\n\\n\\t\\t\\t\\tswitch (transcludeMode) {\\n\\t\\t\\t\\t\\tcase scope.TRANSCLUDE_APPEND:\\n\\t\\t\\t\\t\\t\\tscope.append(this.children);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase scope.TRANSCLUDE_PREPEND:\\n\\t\\t\\t\\t\\t\\tscope.prepend(this.children);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase scope.TRANSCLUDE_PLUCK:\\n\\t\\t\\t\\t\\t\\tpluckAndDrop(dropables, this);\\n\\t\\t\\t\\t\\t\\tscope.empty().append(this.children);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase scope.TRANSCLUDE_REPLACE:\\n\\t\\t\\t\\t\\t\\tscope.empty().append(this.children);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\tif (transcludeMode) {\\n\\t\\t\\t\\t\\t\\t\\tpluckAndDrop(new function () {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis[transcludeMode] = scope.node();\\n\\t\\t\\t\\t\\t\\t\\t}(), this);\\n\\t\\t\\t\\t\\t\\t\\tscope.empty().append(this.children);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\tscope.empty().append(this.children);\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tscope.findOwn('[pl-component]').each(function () {\\n\\t\\t\\t\\t\\tvar name;\\n\\n\\t\\t\\t\\t\\tname = $(this).attr('pl-component');\\n\\n\\t\\t\\t\\t\\tif (~memory.indexOf(name)) return;\\n\\n\\t\\t\\t\\t\\tmemory.push(name);\\n\\n\\t\\t\\t\\t\\ttotalRequests += 1;\\n\\n\\t\\t\\t\\t\\t_playGame2['default'].component.load(name, function () {\\n\\t\\t\\t\\t\\t\\tready();\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\tready();\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tif (!$('style[pl-for-component=\\\"' + _name + '\\\"]').length && _playGame2['default'].config('shouldLoadComponentStyles') !== false) {\\n\\t\\t\\ttotalRequests += 1;\\n\\t\\t\\t$('<style type=\\\"text/css\\\" pl-for-component=\\\"' + _name + '\\\">').load(path + 'style.css', ready).appendTo(document.body);\\n\\t\\t}\\n\\n\\t\\tif (!totalRequests) _callback && _callback.call(this, _name);\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\tfunction captureProperties() {\\n\\t\\tvar i, attr, name, collection;\\n\\n\\t\\tcollection = (function () {\\n\\n\\t\\t\\tthis.has = function (_name) {\\n\\t\\t\\t\\treturn !! ~this.indexOf(_name);\\n\\t\\t\\t};\\n\\n\\t\\t\\treturn this;\\n\\t\\t}).call([]);\\n\\n\\t\\tfor (i = 0; attr = this.$els[0].attributes[i]; i += 1) {\\n\\t\\t\\t// I explicitly want it to be at the beginning.\\n\\t\\t\\tif (attr.name.indexOf('pl-') === 0) {\\n\\t\\t\\t\\tname = attr.name.slice(3);\\n\\t\\t\\t\\tcollection[_util2['default'].transformId(name, true)] = attr.value;\\n\\n\\t\\t\\t\\tcollection.push(name);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (collection.length) this.properties = collection;\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\tfunction initializeEntities() {\\n\\t\\tif (!this.hasOwnProperty('entities')) return this;\\n\\n\\t\\tthis.entities.forEach(this.bind(function (_record, _index) {\\n\\t\\t\\tvar $node, instance, id, query, index;\\n\\n\\t\\t\\t$node = this.findOwn(_record.selector);\\n\\t\\t\\tquery = ['#' + _record.selector, '[pl-id=' + _record.selector + ']', '[pl-component=' + _record.selector + ']', '[pl-' + _record.selector + ']'];\\n\\t\\t\\tindex = 0;\\n\\n\\t\\t\\twhile (!$node.length) {\\n\\t\\t\\t\\tif (index === query.length) {\\n\\t\\t\\t\\t\\tthrow new Error(\\\"Unable to locate entity with selector\\\", _record.selector);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t$node = this.findOwn(query[index]);\\n\\t\\t\\t\\tindex += 1;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!Scope.isPrototypeOf(_record)) {\\n\\t\\t\\t\\tinstance = createEntity.call(this, $node, _record.implementation);\\n\\n\\t\\t\\t\\tif (!instance.isReady) {\\n\\t\\t\\t\\t\\tthis.assetQueue.add(instance);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tinstance = _record;\\n\\t\\t\\t}\\n\\n\\t\\t\\tid = _util2['default'].transformId(instance.id(), true);\\n\\t\\t\\tif (id) _util2['default'].assignRef(this, id, instance);\\n\\t\\t}));\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\tfunction handleProperties() {\\n\\t\\tvar scope, property, handler;\\n\\n\\t\\tscope = this;\\n\\n\\t\\tif (this.hasOwnProperty('properties')) {\\n\\t\\t\\tthis.properties.forEach(function (_name) {\\n\\t\\t\\t\\thandler = scope.propertyHandlers[_name];\\n\\t\\t\\t\\tif (handler) handler.call(scope, scope.$els[0], _name, scope.properties[_name]);\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tif (this.propertyHandlers) {\\n\\t\\t\\tfor (property in this.propertyHandlers) {\\n\\t\\t\\t\\t// only exclide members on the base type\\n\\t\\t\\t\\tif (_typesBasic2['default'].hasOwnProperty(property)) continue;\\n\\n\\t\\t\\t\\thandler = this.propertyHandlers[property];\\n\\n\\t\\t\\t\\tthis.find('[pl-' + property + ']').each(function () {\\n\\t\\t\\t\\t\\tvar attr;\\n\\n\\t\\t\\t\\t\\tif (scope === $(this).scope()) {\\n\\t\\t\\t\\t\\t\\tattr = this.attributes.getNamedItem('pl-' + property);\\n\\n\\t\\t\\t\\t\\t\\tif (handler) handler.call(scope, this, property, attr.value);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\tfunction invokeLocal(_name) {\\n\\t\\tvar args, owner;\\n\\n\\t\\targs = [].slice.call(arguments, 1);\\n\\n\\t\\tif (this.isMemberSafe(_name)) {\\n\\t\\t\\treturn this[_name].apply(this, arguments);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction init() {\\n\\t\\tinvokeLocal.call(this, 'willInit');\\n\\n\\t\\tthis.attachEvents();\\n\\n\\t\\tinitializeEntities.call(this);\\n\\t\\thandleProperties.call(this);\\n\\n\\t\\tthis.watchAssets();\\n\\t\\tthis.captureAudioAssets();\\n\\t\\tthis.captureReferences();\\n\\n\\t\\tthis.__init();\\n\\t\\tinvokeLocal.call(this, 'init');\\n\\n\\t\\tif (!this.isReady) this.assetQueue.ready();\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\tfunction ready() {\\n\\t\\tvar readyEvent, entities;\\n\\n\\t\\treadyEvent = $.Event('ready', { targetScope: this });\\n\\t\\tentities = this.findOwn('.pl-scope').scope();\\n\\n\\t\\tif (entities) {\\n\\t\\t\\tif (entities.length > 0) {\\n\\t\\t\\t\\tthis.entities = entities;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.entities = [entities];\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tthis.isReady = true;\\n\\t\\tthis.addClass('READY');\\n\\n\\t\\tthis.__ready();\\n\\t\\tinvokeLocal.call(this, 'ready');\\n\\n\\t\\tthis.trigger(readyEvent);\\n\\t}\\n\\n\\tActionables = (function () {\\n\\n\\t\\t_util2['default'].mixin(this, _typesBasic2['default']);\\n\\n\\t\\tthis.add = function (_node, _action) {\\n\\t\\t\\tif (!this.has(_node)) {\\n\\t\\t\\t\\tthis.push({\\n\\t\\t\\t\\t\\tnode: _node,\\n\\t\\t\\t\\t\\taction: _action\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this;\\n\\t\\t};\\n\\n\\t\\tthis.remove = function (_node) {\\n\\t\\t\\tvar item, index;\\n\\n\\t\\t\\titem = this.item(_node);\\n\\t\\t\\tindex = this.indexOf(item);\\n\\t\\t\\tif (~index) this.splice(index, 1);\\n\\n\\t\\t\\treturn this;\\n\\t\\t};\\n\\n\\t\\tthis.item = function (_node) {\\n\\t\\t\\tvar i, item;\\n\\n\\t\\t\\tfor (i = 0; item = this[i]; i += 1) {\\n\\t\\t\\t\\tif (item.node === _node) return item;\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\tthis.has = function (_node) {\\n\\t\\t\\treturn !!this.item(_node);\\n\\t\\t};\\n\\n\\t\\treturn this;\\n\\t}).call([]);\\n\\n\\tthis.TRANSCLUDE_REPLACE = 'replace';\\n\\tthis.TRANSCLUDE_PREPEND = 'prepend';\\n\\tthis.TRANSCLUDE_APPEND = 'append';\\n\\tthis.TRANSCLUDE_PLUCK = 'pluck';\\n\\n\\tthis.baseType = 'TYPE_SCOPE';\\n\\tthis.actionables = null;\\n\\tthis.isReady = null;\\n\\tthis.isComponent = false;\\n\\tthis.entities = null;\\n\\tthis.audio = null;\\n\\tthis.properties = null;\\n\\tthis.propertyHandlers = null;\\n\\tthis.assetQueue = null;\\n\\tthis.event = null;\\n\\n\\tthis.initialize = function (_node_selector, _componentName) {\\n\\t\\tvar scope;\\n\\n\\t\\tscope = this;\\n\\n\\t\\tthis.isReady = false;\\n\\t\\tthis.isComponent = !!_componentName;\\n\\t\\tthis.event = null;\\n\\t\\tthis.assetQueue = _typesQueue2['default'].create();\\n\\t\\tthis.$els = _node_selector.jquery ? _node_selector : $(_node_selector);\\n\\n\\t\\tif (!this.$els.length) {\\n\\t\\t\\tthrow new ReferenceError('Unable to locate the element with selector ' + this.$els.selector + '.');\\n\\t\\t}\\n\\n\\t\\tthis.addClass('pl-scope ' + (_componentName ? _componentName + '-component' : ''));\\n\\t\\tthis.data('pl-scope', this);\\n\\t\\tthis.data('pl-isComponent', !!_componentName);\\n\\n\\t\\tcaptureProperties.call(this);\\n\\n\\t\\tif (_componentName) {\\n\\t\\t\\tloadComponentAssets.call(this, _componentName, function () {\\n\\t\\t\\t\\tinit.call(this);\\n\\t\\t\\t});\\n\\t\\t} else {\\n\\t\\t\\tinit.call(this);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t// only for use in base types\\n\\tthis.__init = function () {\\n\\t\\treturn this;\\n\\t};\\n\\tthis.__ready = function () {\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.willInit = function () {\\n\\t\\treturn this;\\n\\t};\\n\\tthis.init = function () {\\n\\t\\treturn this;\\n\\t};\\n\\tthis.ready = function () {\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.watchAssets = function () {\\n\\t\\tvar scope, assetTypes;\\n\\n\\t\\tfunction watch() {\\n\\t\\t\\tvar eventMap, isNodeComplete;\\n\\n\\t\\t\\tfunction createHandler(_node) {\\n\\t\\t\\t\\treturn function () {\\n\\t\\t\\t\\t\\tvar loadedEvent;\\n\\n\\t\\t\\t\\t\\tloadedEvent = $.Event('loaded', { targetScope: scope });\\n\\t\\t\\t\\t\\tscope.assetQueue.ready(_node.src);\\n\\t\\t\\t\\t\\tscope.trigger(loadedEvent, [_node]);\\n\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\n\\t\\t\\teventMap = {\\n\\t\\t\\t\\tAUDIO: 'onloadeddata',\\n\\t\\t\\t\\tVIDEO: 'onloadeddata',\\n\\t\\t\\t\\tIMG: 'onload'\\n\\t\\t\\t};\\n\\n\\t\\t\\tisNodeComplete = {\\n\\t\\t\\t\\tAUDIO: this.readyState === this.HAVE_ENOUGH_DATA,\\n\\t\\t\\t\\tVIDEO: this.readyState === this.HAVE_ENOUGH_DATA,\\n\\t\\t\\t\\tIMG: this.complete\\n\\t\\t\\t};\\n\\n\\t\\t\\t// console.log('found asset', this.nodeName);\\n\\n\\t\\t\\tif (isNodeComplete[this.nodeName]) return;\\n\\t\\t\\tif (scope.assetQueue.add(this.src)) {\\n\\t\\t\\t\\t// console.log('watch', this.nodeName, this.src, scope.id());\\n\\t\\t\\t\\tthis[eventMap[this.nodeName]] = createHandler(this);\\n\\t\\t\\t\\tthis.onerror = function () {\\n\\t\\t\\t\\t\\tconsole.error('Image failed to load', this.src);\\n\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tscope = this;\\n\\t\\tassetTypes = ['IMG', 'AUDIO', 'VIDEO'];\\n\\n\\t\\tthis.each(function () {\\n\\t\\t\\tif (~assetTypes.indexOf(this.nodeName)) {\\n\\t\\t\\t\\twatch.call(this);\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tthis.findOwn(assetTypes.join(',')).each(function () {\\n\\t\\t\\twatch.call(this);\\n\\t\\t});\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.attachEvents = function () {\\n\\t\\tvar scope;\\n\\n\\t\\tthis.proto();\\n\\n\\t\\tscope = this;\\n\\n\\t\\t// if (this.is('#bears')) debugger;\\n\\n\\t\\tthis.assetQueue.on('complete', function () {\\n\\t\\t\\tscope.assetQueue.off();\\n\\t\\t\\tready.call(scope);\\n\\t\\t});\\n\\n\\t\\tthis.on('ready', function (_event) {\\n\\t\\t\\t// console.log('* ready:', this.address(), ', target:', _event.targetScope.address());\\n\\n\\t\\t\\tif (this.has(_event.targetScope) && this.assetQueue.has(_event.targetScope)) {\\n\\t\\t\\t\\t// console.log('** update queue', _event.targetScope.address(), this.assetQueue.length);\\n\\t\\t\\t\\tthis.assetQueue.ready(_event.targetScope);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!this.assetQueue.length && this.isReady) this.off('ready');\\n\\t\\t});\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.captureReferences = function () {\\n\\t\\tthis.findOwn('[id], [pl-id]').each(this.bind(function (_index, _node) {\\n\\t\\t\\tvar $node, id;\\n\\n\\t\\t\\tif (_node.nodeName === 'AUDIO') return;\\n\\n\\t\\t\\t$node = $(_node);\\n\\t\\t\\tid = $node.attr('id') || $node.attr('pl-id');\\n\\n\\t\\t\\tif (!this[id]) {\\n\\t\\t\\t\\t_util2['default'].assignRef(this, id, $node.data('pl-scope') || $node);\\n\\t\\t\\t}\\n\\t\\t}));\\n\\t};\\n\\n\\tthis.captureAudioAssets = function () {\\n\\t\\tvar scope, screen;\\n\\n\\t\\tscope = this;\\n\\t\\tscreen = typeof scope.screen === 'object' ? scope.screen : scope;\\n\\n\\t\\tscope.findOwn('audio').each(function () {\\n\\t\\t\\tvar $node, id, audioTypes;\\n\\n\\t\\t\\tif (!scope.hasOwnProperty('audio')) {\\n\\t\\t\\t\\tscope.audio = {\\n\\t\\t\\t\\t\\tbackground: null,\\n\\t\\t\\t\\t\\tvoiceOver: null,\\n\\t\\t\\t\\t\\tsfx: null\\n\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\n\\t\\t\\t$node = $(this);\\n\\t\\t\\tid = _util2['default'].transformId($node.id(), true);\\n\\t\\t\\taudioTypes = ['background', 'voice-over', 'sfx'];\\n\\n\\t\\t\\taudioTypes.forEach(function (_type) {\\n\\t\\t\\t\\tif ($node.hasClass(_type)) {\\n\\t\\t\\t\\t\\t$node.on('play pause ended', function (_event) {\\n\\t\\t\\t\\t\\t\\tvar screen;\\n\\n\\t\\t\\t\\t\\t\\tscreen = typeof scope.screen === 'object' ? scope.screen : scope;\\n\\n\\t\\t\\t\\t\\t\\tswitch (_event.type) {\\n\\t\\t\\t\\t\\t\\t\\tcase 'play':\\n\\t\\t\\t\\t\\t\\t\\t\\tscreen.addClass('PLAYING ' + _type.toUpperCase());\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\t\\tcase 'pause':\\n\\t\\t\\t\\t\\t\\t\\tcase 'ended':\\n\\t\\t\\t\\t\\t\\t\\t\\tscreen.removeClass('PLAYING ' + _type.toUpperCase());\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tscope.trigger($.Event('audio-' + _event.type, {\\n\\t\\t\\t\\t\\t\\t\\ttarget: $node[0],\\n\\t\\t\\t\\t\\t\\t\\ttargetScope: scope,\\n\\t\\t\\t\\t\\t\\t\\taudioType: _type\\n\\t\\t\\t\\t\\t\\t}));\\n\\t\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\t\\tif ($node.attr('pl-required') != null) {\\n\\t\\t\\t\\t\\t\\tscreen.require($node[0]);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// This property can be either an array of nodes or the node.\\n\\t\\t\\t\\t\\t_util2['default'].assignRef(scope.audio, _type, $node[0]);\\n\\n\\t\\t\\t\\t\\t// Makes sure the property is set on the final value of scope.audio[_type].\\n\\t\\t\\t\\t\\t// This should be safe to run out of the callstack.\\n\\t\\t\\t\\t\\tsetTimeout(function () {\\n\\t\\t\\t\\t\\t\\tif (id) _util2['default'].assignRef(scope.audio[_util2['default'].transformId(_type, true)], id, $node[0]);\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\treturn scope;\\n\\t};\\n\\n\\tthis.handleProperty = function (_implementation) {\\n\\t\\tif (this.propertyHandlers) {\\n\\t\\t\\tif (this.hasOwnProperty('propertyHandlers')) {\\n\\t\\t\\t\\tswitch (typeof _implementation) {\\n\\t\\t\\t\\t\\tcase 'function':\\n\\t\\t\\t\\t\\t\\t_implementation.call(this.propertyHandlers);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'object':\\n\\t\\t\\t\\t\\t\\tthis.propertyHandlers.mixin(_implementation);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.propertyHandlers = this.propertyHandlers.extend(_implementation);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tthis.propertyHandlers = _typesBasic2['default'].extend(_implementation);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.entity = function (_selector, _implementation) {\\n\\t\\tvar Entity, prototype, id;\\n\\n\\t\\tEntity = _playGame2['default'].provideEntityType();\\n\\n\\t\\tif (!this.hasOwnProperty('entities')) this.entities = [];\\n\\n\\t\\tif (this.hasOwnProperty('$els')) {\\n\\t\\t\\tthrow new Error('Wait this hasn\\\\'t been tested.');\\n\\t\\t\\tprototype = Entity.isPrototypeOf(this) ? this : Entity;\\n\\t\\t\\tinstance = prototype.extend(_implementation).initialize(this.find(_selector));\\n\\t\\t\\tid = _util2['default'].transformId(instance.id());\\n\\n\\t\\t\\t// this.entities.push(instance);\\n\\t\\t\\tif (id) this[id] = instance;\\n\\t\\t} else {\\n\\t\\t\\tthis.entities.push({\\n\\t\\t\\t\\tselector: _selector,\\n\\t\\t\\t\\timplementation: _implementation\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.has = function (_child) {\\n\\t\\tvar child;\\n\\n\\t\\tchild = Scope.isPrototypeOf(_child) ? _child.$els : _child;\\n\\n\\t\\treturn !!this.$els.has(child).length;\\n\\t};\\n\\n\\tthis.toString = function () {\\n\\t\\tvar type;\\n\\n\\t\\ttype = this.baseType.replace('TYPE_', '');\\n\\t\\ttype = type.slice(0, 1) + type.slice(1).toLowerCase();\\n\\n\\t\\treturn ['[', this.id() || this.address(), ' ', type, ']'].join('');\\n\\t};\\n\\n\\tthis.log = function () {\\n\\t\\tvar args;\\n\\n\\t\\targs = _util2['default'].toArray(arguments);\\n\\n\\t\\tconsole.log.apply(console, [this.id() || this.address(), '-'].concat(args));\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.handleProperty(function () {\\n\\n\\t\\tthis.component = function (_node, _name, _value, _property) {\\n\\t\\t\\tvar $node, record, scope, id;\\n\\n\\t\\t\\t$node = $(_node);\\n\\n\\t\\t\\tif (!$node.data('pl-isComponent')) {\\n\\t\\t\\t\\trecord = _playGame2['default'].component.get(_value);\\n\\n\\t\\t\\t\\tif (record) {\\n\\t\\t\\t\\t\\tscope = createEntity.call(this, $node, record.implementation);\\n\\t\\t\\t\\t\\tid = _util2['default'].transformId(scope.id() || _value, true);\\n\\t\\t\\t\\t\\t_util2['default'].assignRef(this, id, scope);\\n\\n\\t\\t\\t\\t\\tif (!scope.isReady) this.assetQueue.add(scope);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tthrow new Error('Ahh!');\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\tthis.action = function (_node, _name, _value) {\\n\\t\\t\\tif (!this.hasOwnProperty('actionables')) {\\n\\t\\t\\t\\tthis.actionables = Actionables.create();\\n\\t\\t\\t\\tattachActionHandler.call(this);\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.actionables.add(_node, _value);\\n\\t\\t};\\n\\n\\t\\tthis.required = function (_node, _name, _value) {\\n\\t\\t\\tif (this.is(_node)) {\\n\\t\\t\\t\\tthis.screen.require(this);\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\tthis.require = function (_node, _name, _value) {\\n\\t\\t\\tvar query, $node;\\n\\n\\t\\t\\t// if the node with the attribute is the node for this scope\\n\\t\\t\\tif (this.is(_node)) {\\n\\t\\t\\t\\tquery = '#_value, [pl-id=_value], [pl-component=_value]'.replace(/_value/g, _value);\\n\\t\\t\\t\\t$node = this.find(query);\\n\\n\\t\\t\\t\\tif ($node.is('audio, video')) {\\n\\t\\t\\t\\t\\t$node.each(this.bind(function (_index, _node) {\\n\\t\\t\\t\\t\\t\\tthis.require(_node);\\n\\t\\t\\t\\t\\t}));\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t$node.on('ready', this.bind(function (_event) {\\n\\t\\t\\t\\t\\t\\tif ($node.is(_event.target)) {\\n\\t\\t\\t\\t\\t\\t\\tthis.require(_event.targetScope);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n\\t});\\n});\\n\\nexports['default'] = { Scope: Scope, createEntity: createEntity };\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvU2NvcGUuanM/YWM2YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7d0NBY29CLEVBQWU7Ozs7c0NBQ2pCLEVBQWE7Ozs7c0NBQ2IsRUFBYTs7OzsyQ0FDVCxDQUFrQjs7b0NBQ3ZCLEVBQVc7Ozs7Z0NBQ1gsRUFBTTs7OztzQ0FDQSxFQUFZOzs7Ozs7Ozs7Ozs7OztBQVluQyxTQUFTLFlBQVksQ0FBRSxNQUFNLEVBQUUsZUFBZSxFQUFFO0FBQy9DLEtBQUksU0FBUyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsUUFBUSxDQUFDOztBQUVwRCxVQUFTLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUN4QyxVQUFTLEdBQUcsSUFBSSxDQUFDOztBQUVqQixLQUFJLFNBQVMsRUFBRTtBQUNkLGlCQUFlLEdBQUcsc0JBQUssU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQzs7QUFFaEQsTUFBSSxlQUFlLEVBQUU7QUFDcEIsWUFBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0dBQ3hELE1BRUk7QUFDSixTQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxHQUFDLFNBQVMsR0FBQyxZQUFZLENBQUMsQ0FBQztHQUM1RTtFQUNEOztBQUVELFNBQVEsR0FBRyxPQUFPLGVBQWUsS0FBSyxVQUFVLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUM7O0FBRTFHLFFBQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7Q0FDOUM7Ozs7Ozs7O0FBUUQsSUFBSSxLQUFLLEdBQUcsMEJBQVEsTUFBTSxDQUFDLFlBQVk7Ozs7Ozs7OztBQVN0QyxLQUFJLFdBQVcsQ0FBQzs7QUFFaEIsVUFBUyxtQkFBbUIsR0FBSTtB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QUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLEVBQUU7QUFDN0IsVUFBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsTUFBTSxFQUFFLEtBQUssRUFBRTtBQUM3QyxVQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO01BQ3BCLENBQUMsQ0FBQyxDQUFDO0tBQ0osTUFFSTtBQUNKLFVBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxNQUFNLEVBQUU7QUFDN0MsVUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUM1QixXQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztPQUNqQztNQUNELENBQUMsQ0FBQyxDQUFDO0tBQ0o7SUFDRDtHQUNELENBQUM7RUFFRixDQUFDLENBQUM7Q0FFSCxDQUFDLENBQUM7O3FCQUVZLEVBQUUsS0FBSyxFQUFMLEtBQUssRUFBRSxZQUFZLEVBQVosWUFBWSxFQUFFIiwiZmlsZSI6IjIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTY29wZXMgYXJlIHBhY2thZ2VzIHdoaWNoIGNvbnRhaW4gYSByZWZlcmVuY2UgdG8gYSBET00gZWxlbWVudCB3cmFwcGVkIGluIGEgalF1ZXJ5IG9iamVjdC5cbiAqIFRoaXMgZW5hYmxlcyBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzIHRvIGJlIGluIGNvbnRleHQgb2YgdGhlIERPTSBub2RlIGFuZCBpdHMgZGVzY2VuZGFudHMuXG4gKlxuICogQG1vZHVsZVxuICogQHJlcXVpcmVzIHR5cGVzL2pRUHJveHlcbiAqIEByZXF1aXJlcyB0eXBlcy9CYXNpY1xuICogQHJlcXVpcmVzIHR5cGVzL1F1ZXVlXG4gKiBAcmVxdWlyZXMgcGxheS5nYW1lXG4gKiBAcmVxdWlyZXMgdXRpbFxuICogQHJlcXVpcmVzIGV2YWxBY3Rpb25cbiAqXG4gKiBAZXhwb3J0cyBjcmVhdGVFbnRpdHlcbiAqL1xuaW1wb3J0IGpRUHJveHkgZnJvbSAndHlwZXMvalFQcm94eSc7XG5pbXBvcnQgQmFzaWMgZnJvbSAndHlwZXMvQmFzaWMnO1xuaW1wb3J0IFF1ZXVlIGZyb20gJ3R5cGVzL1F1ZXVlJztcbmltcG9ydCB7IFBvaW50IH0gZnJvbSAndHlwZXMvRGltZW5zaW9ucyc7XG5pbXBvcnQgZ2FtZSBmcm9tICdwbGF5LmdhbWUnO1xuaW1wb3J0IHV0aWwgZnJvbSAndXRpbCc7XG5pbXBvcnQgZXZhbEFjdGlvbiBmcm9tICdldmFsQWN0aW9uJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IEVuaXRpeSBpbnN0YW5jZSB3aXRoIGEgY29udGV4dCBub2RlIGFuZCBpbXBsZW1lbnRhdGlvbi5cbiAqIFRoZSBpbnN0YW5jZSBpcyBwcm90b3R5cGVkIGZyb20gdGhlIHBhcmVudCBzY29wZS5cbiAqXG4gKiBAbWVtYmVyb2YgbW9kdWxlOnR5cGVzL1Njb3BlflNjb3BlI2NyZWF0ZUVudGl0eVxuICogQHByb3RlY3RlZFxuICogQGFyZyB7alF1ZXJ5fSBfJG5vZGUgLSBqUXVlcnkgb2JqZWN0IHdpdGggYSBzaW5nbGUgbm9kZSBpbiB0aGUgY29sbGVjdGlvbi5cbiAqIEBhcmcge2Z1bmN0aW9ufG9iamVjdH0gX2ltcGxlbWVudGF0aW9uIC0gQ29uc3RydWN0b3IgZnVuY3Rpb24gb3Igb2JqZWN0IHdpdGggdGhlIGVudGl0eSBiZWhhdmlvci5cbiAqIEByZXR1cm5zIHttb2R1bGU6dHlwZXMvU2NvcGV+U2NvcGV9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUVudGl0eSAoXyRub2RlLCBfaW1wbGVtZW50YXRpb24pIHtcblx0dmFyIGNvbXBvbmVudCwgcHJvdG90eXBlLCBjb21wb25lbnRSZWNvcmQsIGluc3RhbmNlO1xuXG5cdGNvbXBvbmVudCA9IF8kbm9kZS5hdHRyKCdwbC1jb21wb25lbnQnKTtcblx0cHJvdG90eXBlID0gdGhpcztcblxuXHRpZiAoY29tcG9uZW50KSB7XG5cdFx0Y29tcG9uZW50UmVjb3JkID0gZ2FtZS5jb21wb25lbnQuZ2V0KGNvbXBvbmVudCk7XG5cblx0XHRpZiAoY29tcG9uZW50UmVjb3JkKSB7XG5cdFx0XHRwcm90b3R5cGUgPSB0aGlzLmV4dGVuZChjb21wb25lbnRSZWNvcmQuaW1wbGVtZW50YXRpb24pO1xuXHRcdH1cblxuXHRcdGVsc2Uge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdObyBpbXBsZW1lbnRhdGlvbiByZWNvcmQgZm9yIHRoZSAnK2NvbXBvbmVudCsnY29tcG9uZW50LicpO1xuXHRcdH1cblx0fVxuXG5cdGluc3RhbmNlID0gdHlwZW9mIF9pbXBsZW1lbnRhdGlvbiA9PT0gJ2Z1bmN0aW9uJyA/IHByb3RvdHlwZS5leHRlbmQoX2ltcGxlbWVudGF0aW9uKSA6IHByb3RvdHlwZS5jcmVhdGUoKTtcblxuXHRyZXR1cm4gaW5zdGFuY2UuaW5pdGlhbGl6ZShfJG5vZGUsIGNvbXBvbmVudCk7XG59XG5cbi8qKlxuICogPHNwYW4gY2xhc3M9XCJpbXBvcnRhbnRcIj5OT1RFOjwvc3Bhbj4gVGhpcyBpcyBOT1QgYSBjb25zdHJ1Y3Rvci4gVXNlIGBTY29wZS5jcmVhdGUoKWAgdG8gZ2V0IGEgbmV3IGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBBIHBhY2thZ2Ugd2hpY2ggY29udGFpbnMgYSByZWZlcmVuY2UgdG8gYSBET00gbm9kZSB3cmFwcGVkIGluIGEgalF1ZXJ5IG9iamVjdC4gRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gc2NvcGVzIHJlYWQgW3RoaXNde0BsaW5rIG1vZHVsZTp0eXBlcy9TY29wZX0uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIG1vZHVsZTp0eXBlcy9qUVByb3h5fmpRUHJveHlcbiAqL1xudmFyIFNjb3BlID0galFQcm94eS5leHRlbmQoZnVuY3Rpb24gKCkge1xuXG5cdC8qKlxuXHQgKiBDb2xsZWN0aW9uIG9mIHJlY29yZHMgcGFpcmluZyBhIG5vZGUgd2l0aCBpdHMgYWN0aW9uLlxuXHQgKiBAbWVtYmVyb2YgbW9kdWxlOnR5cGVzL1Njb3BlflNjb3BlXG5cdCAqIEBzdGF0aWNcblx0ICogQHByb3RlY3RlZFxuXHQgKiBAdG9kbyBDb252ZXJ0IHRvIHR5cGVzL0NvbGxlY3Rpb25cblx0ICovXG5cdHZhciBBY3Rpb25hYmxlcztcblxuXHRmdW5jdGlvbiBhdHRhY2hBY3Rpb25IYW5kbGVyICgpIHtcblx0XHR2YXIgZW50aXR5O1xuXG5cdFx0ZW50aXR5ID0gdGhpcztcblxuXHRcdHRoaXMub24ocGwuRVZFTlQuQ0xJQ0ssIGZ1bmN0aW9uIChfZXZlbnQpIHtcblx0XHRcdHZhciB0YXJnZXQsIHJlY29yZDtcblxuXHRcdFx0dGFyZ2V0ID0gJChfZXZlbnQudGFyZ2V0KS5jbG9zZXN0KCdbcGwtYWN0aW9uXScpWzBdO1xuXHRcdFx0Ly8gVE9ETzogUmVzb2x2ZSBmb3IgdG91Y2hlc1xuXHRcdFx0X2V2ZW50LmN1cnNvciA9IFBvaW50LmNyZWF0ZSgpLnNldChfZXZlbnQuY2xpZW50WCwgX2V2ZW50LmNsaWVudFkpO1xuXG5cdFx0XHRpZiAodGFyZ2V0KSB7XG5cdFx0XHRcdHJlY29yZCA9IGVudGl0eS5hY3Rpb25hYmxlcy5pdGVtKHRhcmdldCk7XG5cblx0XHRcdFx0aWYgKHJlY29yZCkge1xuXHRcdFx0XHRcdF9ldmVudC50YXJnZXRTY29wZSA9IGVudGl0eTtcblx0XHRcdFx0XHRlbnRpdHkuZXZlbnQgPSBfZXZlbnQ7XG5cdFx0XHRcdFx0ZXZhbEFjdGlvbihyZWNvcmQuYWN0aW9uLCBlbnRpdHkpO1xuXHRcdFx0XHRcdGVudGl0eS5ldmVudCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldFJlY29yZEJ5IChfa2V5LCBfbWVtYmVyLCBfY29sbGVjdGlvbikge1xuXHRcdHZhciBpLCByZWNvcmQ7XG5cblx0XHRpZiAoX2NvbGxlY3Rpb24pIHtcblx0XHRcdGZvciAoaT0wOyByZWNvcmQgPSBfY29sbGVjdGlvbltpXTsgaSs9MSkge1xuXHRcdFx0XHRpZiAocmVjb3JkW19rZXldID09PSBfbWVtYmVyKSByZXR1cm4gcmVjb3JkO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0ZnVuY3Rpb24gcmVtb3ZlUmVjb3JkIChfcmVjb3JkLCBfY29sbGVjdGlvbikge1xuXHRcdHZhciBpbmRleDtcblxuXHRcdGluZGV4ID0gX2NvbGxlY3Rpb24uaW5kZXhPZihfcmVjb3JkKTtcblx0XHRpZiAofmluZGV4KSBfY29sbGVjdGlvbi5zcGxpY2UoaW5kZXgsIDEpO1xuXHR9XG5cblx0ZnVuY3Rpb24gY2FwdHVyZURyb3BhYmxlcyAoX3Njb3BlKSB7XG5cdFx0dmFyIGNvbGxlY3Rpb247XG5cblx0XHRjb2xsZWN0aW9uID0gW107XG5cblx0XHRfc2NvcGUuZmluZCgnPiBbcGwtcGx1Y2tdJykuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgbmFtZTtcblxuXHRcdFx0bmFtZSA9ICQodGhpcykuYXR0cigncGwtcGx1Y2snKTtcblxuXHRcdFx0Y29sbGVjdGlvbi5wdXNoKHRoaXMpO1xuXHRcdFx0Y29sbGVjdGlvbltuYW1lXSA9IHRoaXM7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gY29sbGVjdGlvbjtcblx0fVxuXG5cdGZ1bmN0aW9uIHBsdWNrQW5kRHJvcCAoX2Ryb3BhYmxlcywgX3RlbXBsYXRlKSB7XG5cdFx0JChfdGVtcGxhdGUpLmZpbmQoJ1twbC1kcm9wXScpLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyICRub2RlLCBuYW1lLCBkcm9wYWJsZTtcblxuXHRcdFx0JG5vZGUgPSAkKHRoaXMpO1xuXHRcdFx0bmFtZSA9ICRub2RlLmF0dHIoJ3BsLWRyb3AnKTtcblx0XHRcdGRyb3BhYmxlID0gX2Ryb3BhYmxlc1tuYW1lXTtcblxuXHRcdFx0aWYgKGRyb3BhYmxlKSB7XG5cdFx0XHRcdCRub2RlLnJlcGxhY2VXaXRoKGRyb3BhYmxlLmNoaWxkcmVuKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdC8vIFByb3RlY3RlZFxuXHRmdW5jdGlvbiBsb2FkQ29tcG9uZW50QXNzZXRzIChfbmFtZSwgX2NhbGxiYWNrKSB7XG5cdFx0dmFyIHNjb3BlLCBwYXRoLCB0b3RhbFJlcXVlc3RzLCB0cmFuc2NsdWRlTW9kZSwgZHJvcGFibGVzO1xuXG5cdFx0ZnVuY3Rpb24gcmVhZHkgKCkge1xuXHRcdFx0cmVhZHkuc3RhdHVzICs9MTtcblxuXHRcdFx0aWYgKHJlYWR5LnN0YXR1cyA9PT0gdG90YWxSZXF1ZXN0cykge1xuXHRcdFx0XHRpZiAoX2NhbGxiYWNrKSB7XG5cdFx0XHRcdFx0X2NhbGxiYWNrLmNhbGwoc2NvcGUsIF9uYW1lKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRvdGFsUmVxdWVzdHMgPSAwO1xuXHRcdHNjb3BlID0gdGhpcztcblx0XHRwYXRoID0gZ2FtZS5jb25maWcoJ2NvbXBvbmVudERpcmVjdG9yeScpK19uYW1lKycvJztcblx0XHRkcm9wYWJsZXMgPSBjYXB0dXJlRHJvcGFibGVzKHRoaXMpO1xuXHRcdHRyYW5zY2x1ZGVNb2RlID0gZHJvcGFibGVzLmxlbmd0aCA/IHRoaXMuVFJBTlNDTFVERV9QTFVDSyA6IHRoaXMucHJvcGVydGllcy50cmFuc2NsdWRlO1xuXHRcdHJlYWR5LnN0YXR1cyA9IDA7XG5cblx0XHRpZiAoIXRoaXMuY2hpbGRyZW4oKS5sZW5ndGggfHwgdHJhbnNjbHVkZU1vZGUpIHtcblx0XHRcdHRvdGFsUmVxdWVzdHMrPTE7XG5cdFx0XHQkKCc8ZGl2PicpLmxvYWQocGF0aCsndGVtcGxhdGUuaHRtbCcsIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dmFyIG1lbW9yeTtcblxuXHRcdFx0XHRtZW1vcnkgPSBbXTtcblxuXHRcdFx0XHRzd2l0Y2ggKHRyYW5zY2x1ZGVNb2RlKSB7XG5cdFx0XHRcdFx0Y2FzZSBzY29wZS5UUkFOU0NMVURFX0FQUEVORDpcblx0XHRcdFx0XHRcdHNjb3BlLmFwcGVuZCh0aGlzLmNoaWxkcmVuKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBzY29wZS5UUkFOU0NMVURFX1BSRVBFTkQ6XG5cdFx0XHRcdFx0XHRzY29wZS5wcmVwZW5kKHRoaXMuY2hpbGRyZW4pO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRjYXNlIHNjb3BlLlRSQU5TQ0xVREVfUExVQ0s6XG5cdFx0XHRcdFx0XHRwbHVja0FuZERyb3AoZHJvcGFibGVzLCB0aGlzKTtcblx0XHRcdFx0XHRcdHNjb3BlLmVtcHR5KCkuYXBwZW5kKHRoaXMuY2hpbGRyZW4pO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIHNjb3BlLlRSQU5TQ0xVREVfUkVQTEFDRTpcblx0XHRcdFx0XHRcdHNjb3BlLmVtcHR5KCkuYXBwZW5kKHRoaXMuY2hpbGRyZW4pO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0aWYgKHRyYW5zY2x1ZGVNb2RlKSB7XG5cdFx0XHRcdFx0XHRcdHBsdWNrQW5kRHJvcChuZXcgKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzW3RyYW5zY2x1ZGVNb2RlXSA9IHNjb3BlLm5vZGUoKTtcblx0XHRcdFx0XHRcdFx0fSksIHRoaXMpO1xuXHRcdFx0XHRcdFx0XHRzY29wZS5lbXB0eSgpLmFwcGVuZCh0aGlzLmNoaWxkcmVuKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHNjb3BlLmVtcHR5KCkuYXBwZW5kKHRoaXMuY2hpbGRyZW4pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzY29wZS5maW5kT3duKCdbcGwtY29tcG9uZW50XScpLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdHZhciBuYW1lO1xuXG5cdFx0XHRcdFx0bmFtZSA9ICQodGhpcykuYXR0cigncGwtY29tcG9uZW50Jyk7XG5cblx0XHRcdFx0XHRpZiAofm1lbW9yeS5pbmRleE9mKG5hbWUpKSByZXR1cm47XG5cblx0XHRcdFx0XHRtZW1vcnkucHVzaChuYW1lKTtcblxuXHRcdFx0XHRcdHRvdGFsUmVxdWVzdHMrPTE7XG5cblx0XHRcdFx0XHRnYW1lLmNvbXBvbmVudC5sb2FkKG5hbWUsIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdHJlYWR5KCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyZWFkeSgpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKCEkKCdzdHlsZVtwbC1mb3ItY29tcG9uZW50PVwiJytfbmFtZSsnXCJdJykubGVuZ3RoICYmIGdhbWUuY29uZmlnKCdzaG91bGRMb2FkQ29tcG9uZW50U3R5bGVzJykgIT09IGZhbHNlKSB7XG5cdFx0XHR0b3RhbFJlcXVlc3RzKz0xO1xuXHRcdFx0JCgnPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiIHBsLWZvci1jb21wb25lbnQ9XCInK19uYW1lKydcIj4nKVxuXHRcdFx0XHQubG9hZChwYXRoKydzdHlsZS5jc3MnLCByZWFkeSlcblx0XHRcdFx0LmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpO1xuXHRcdH1cblxuXHRcdGlmICghdG90YWxSZXF1ZXN0cykgX2NhbGxiYWNrICYmIF9jYWxsYmFjay5jYWxsKHRoaXMsIF9uYW1lKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0ZnVuY3Rpb24gY2FwdHVyZVByb3BlcnRpZXMgKCkge1xuXHRcdHZhciBpLCBhdHRyLCBuYW1lLCBjb2xsZWN0aW9uO1xuXG5cdFx0Y29sbGVjdGlvbiA9IChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcblx0XHRcdHRoaXMuaGFzID0gZnVuY3Rpb24gKF9uYW1lKSB7XG5cdFx0XHRcdHJldHVybiAhIX50aGlzLmluZGV4T2YoX25hbWUpO1xuXHRcdFx0fTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9KS5jYWxsKFtdKTtcblxuXHRcdGZvciAoaT0wOyBhdHRyID0gdGhpcy4kZWxzWzBdLmF0dHJpYnV0ZXNbaV07IGkrPTEpIHtcblx0XHRcdC8vIEkgZXhwbGljaXRseSB3YW50IGl0IHRvIGJlIGF0IHRoZSBiZWdpbm5pbmcuXG5cdFx0XHRpZiAoYXR0ci5uYW1lLmluZGV4T2YoJ3BsLScpID09PSAwKSB7XG5cdFx0XHRcdG5hbWUgPSBhdHRyLm5hbWUuc2xpY2UoMyk7XG5cdFx0XHRcdGNvbGxlY3Rpb25bdXRpbC50cmFuc2Zvcm1JZChuYW1lLCB0cnVlKV0gPSBhdHRyLnZhbHVlO1xuXHRcdFx0XHRcblx0XHRcdFx0Y29sbGVjdGlvbi5wdXNoKG5hbWUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChjb2xsZWN0aW9uLmxlbmd0aCkgdGhpcy5wcm9wZXJ0aWVzID0gY29sbGVjdGlvbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0ZnVuY3Rpb24gaW5pdGlhbGl6ZUVudGl0aWVzICgpIHtcblx0XHRpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoJ2VudGl0aWVzJykpIHJldHVybiB0aGlzO1xuXG5cdFx0dGhpcy5lbnRpdGllcy5mb3JFYWNoKHRoaXMuYmluZChmdW5jdGlvbiAoX3JlY29yZCwgX2luZGV4KSB7XG5cdFx0XHR2YXIgJG5vZGUsIGluc3RhbmNlLCBpZCwgcXVlcnksIGluZGV4O1xuXG5cdFx0XHQkbm9kZSA9IHRoaXMuZmluZE93bihfcmVjb3JkLnNlbGVjdG9yKTtcblx0XHRcdHF1ZXJ5ID0gWycjJytfcmVjb3JkLnNlbGVjdG9yLCAnW3BsLWlkPScrX3JlY29yZC5zZWxlY3RvcisnXScsICdbcGwtY29tcG9uZW50PScrX3JlY29yZC5zZWxlY3RvcisnXScsICdbcGwtJytfcmVjb3JkLnNlbGVjdG9yKyddJ107XG5cdFx0XHRpbmRleCA9IDA7XG5cblx0XHRcdHdoaWxlICghJG5vZGUubGVuZ3RoKSB7XG5cdFx0XHRcdGlmIChpbmRleCA9PT0gcXVlcnkubGVuZ3RoKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGxvY2F0ZSBlbnRpdHkgd2l0aCBzZWxlY3RvclwiLCBfcmVjb3JkLnNlbGVjdG9yKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQkbm9kZSA9IHRoaXMuZmluZE93bihxdWVyeVtpbmRleF0pO1xuXHRcdFx0XHRpbmRleCs9MTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFTY29wZS5pc1Byb3RvdHlwZU9mKF9yZWNvcmQpKSB7XG5cdFx0XHRcdGluc3RhbmNlID0gY3JlYXRlRW50aXR5LmNhbGwodGhpcywgJG5vZGUsIF9yZWNvcmQuaW1wbGVtZW50YXRpb24pO1xuXG5cdFx0XHRcdGlmICghaW5zdGFuY2UuaXNSZWFkeSkge1xuXHRcdFx0XHRcdHRoaXMuYXNzZXRRdWV1ZS5hZGQoaW5zdGFuY2UpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0fVxuXG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0aW5zdGFuY2UgPSBfcmVjb3JkO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZCA9IHV0aWwudHJhbnNmb3JtSWQoaW5zdGFuY2UuaWQoKSwgdHJ1ZSk7XG5cdFx0XHRpZiAoaWQpIHV0aWwuYXNzaWduUmVmKHRoaXMsIGlkLCBpbnN0YW5jZSk7XG5cdFx0fSkpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRmdW5jdGlvbiBoYW5kbGVQcm9wZXJ0aWVzICgpIHtcblx0XHR2YXIgc2NvcGUsIHByb3BlcnR5LCBoYW5kbGVyO1xuXG5cdFx0c2NvcGUgPSB0aGlzO1xuXG5cdFx0aWYgKHRoaXMuaGFzT3duUHJvcGVydHkoJ3Byb3BlcnRpZXMnKSkge1xuXHRcdFx0dGhpcy5wcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24gKF9uYW1lKSB7XG5cdFx0XHRcdGhhbmRsZXIgPSBzY29wZS5wcm9wZXJ0eUhhbmRsZXJzW19uYW1lXTtcblx0XHRcdFx0aWYgKGhhbmRsZXIpIGhhbmRsZXIuY2FsbChzY29wZSwgc2NvcGUuJGVsc1swXSwgX25hbWUsIHNjb3BlLnByb3BlcnRpZXNbX25hbWVdKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLnByb3BlcnR5SGFuZGxlcnMpIHtcblx0XHRcdGZvciAocHJvcGVydHkgaW4gdGhpcy5wcm9wZXJ0eUhhbmRsZXJzKSB7XG5cdFx0XHRcdC8vIG9ubHkgZXhjbGlkZSBtZW1iZXJzIG9uIHRoZSBiYXNlIHR5cGVcblx0XHRcdFx0aWYgKEJhc2ljLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkgY29udGludWU7XG5cblx0XHRcdFx0aGFuZGxlciA9IHRoaXMucHJvcGVydHlIYW5kbGVyc1twcm9wZXJ0eV07XG5cblx0XHRcdFx0dGhpcy5maW5kKCdbcGwtJytwcm9wZXJ0eSsnXScpLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdHZhciBhdHRyO1xuXG5cdFx0XHRcdFx0aWYgKHNjb3BlID09PSAkKHRoaXMpLnNjb3BlKCkpIHtcblx0XHRcdFx0XHRcdGF0dHIgPSB0aGlzLmF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdwbC0nK3Byb3BlcnR5KTtcblxuXHRcdFx0XHRcdFx0aWYgKGhhbmRsZXIpIGhhbmRsZXIuY2FsbChzY29wZSwgdGhpcywgcHJvcGVydHksIGF0dHIudmFsdWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRmdW5jdGlvbiBpbnZva2VMb2NhbCAoX25hbWUpIHtcblx0XHR2YXIgYXJncywgb3duZXI7XG5cblx0XHRhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXG5cdFx0aWYgKHRoaXMuaXNNZW1iZXJTYWZlKF9uYW1lKSkge1xuXHRcdFx0cmV0dXJuIHRoaXNbX25hbWVdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gaW5pdCAoKSB7XG5cdFx0aW52b2tlTG9jYWwuY2FsbCh0aGlzLCAnd2lsbEluaXQnKTtcblxuXHRcdHRoaXMuYXR0YWNoRXZlbnRzKCk7XG5cblx0XHRpbml0aWFsaXplRW50aXRpZXMuY2FsbCh0aGlzKTtcblx0XHRoYW5kbGVQcm9wZXJ0aWVzLmNhbGwodGhpcyk7XG5cblx0XHR0aGlzLndhdGNoQXNzZXRzKCk7XG5cdFx0dGhpcy5jYXB0dXJlQXVkaW9Bc3NldHMoKTtcblx0XHR0aGlzLmNhcHR1cmVSZWZlcmVuY2VzKCk7XG5cblx0XHR0aGlzLl9faW5pdCgpO1xuXHRcdGludm9rZUxvY2FsLmNhbGwodGhpcywgJ2luaXQnKTtcblxuXHRcdGlmICghdGhpcy5pc1JlYWR5KSB0aGlzLmFzc2V0UXVldWUucmVhZHkoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0ZnVuY3Rpb24gcmVhZHkgKCkge1xuXHRcdHZhciByZWFkeUV2ZW50LCBlbnRpdGllcztcblxuXHRcdHJlYWR5RXZlbnQgPSAkLkV2ZW50KCdyZWFkeScsIHsgdGFyZ2V0U2NvcGU6IHRoaXMgfSk7XG5cdFx0ZW50aXRpZXMgPSB0aGlzLmZpbmRPd24oJy5wbC1zY29wZScpLnNjb3BlKCk7XG5cblx0XHRpZiAoZW50aXRpZXMpIHtcblx0XHRcdGlmIChlbnRpdGllcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHRoaXMuZW50aXRpZXMgPSBlbnRpdGllcztcblx0XHRcdH1cblxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHRoaXMuZW50aXRpZXMgPSBbZW50aXRpZXNdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuaXNSZWFkeSA9IHRydWU7XG5cdFx0dGhpcy5hZGRDbGFzcygnUkVBRFknKTtcblxuXHRcdHRoaXMuX19yZWFkeSgpO1xuXHRcdGludm9rZUxvY2FsLmNhbGwodGhpcywgJ3JlYWR5Jyk7XG5cblx0XHR0aGlzLnRyaWdnZXIocmVhZHlFdmVudCk7XG5cdH1cblxuXHRBY3Rpb25hYmxlcyA9IChmdW5jdGlvbiAoKSB7XG5cblx0XHR1dGlsLm1peGluKHRoaXMsIEJhc2ljKTtcblxuXHRcdHRoaXMuYWRkID0gZnVuY3Rpb24gKF9ub2RlLCBfYWN0aW9uKSB7XG5cdFx0XHRpZiAoIXRoaXMuaGFzKF9ub2RlKSkge1xuXHRcdFx0XHR0aGlzLnB1c2goe1xuXHRcdFx0XHRcdG5vZGU6IF9ub2RlLFxuXHRcdFx0XHRcdGFjdGlvbjogX2FjdGlvblxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fTtcblxuXHRcdHRoaXMucmVtb3ZlID0gZnVuY3Rpb24gKF9ub2RlKSB7XG5cdFx0XHR2YXIgaXRlbSwgaW5kZXg7XG5cblx0XHRcdGl0ZW0gPSB0aGlzLml0ZW0oX25vZGUpO1xuXHRcdFx0aW5kZXggPSB0aGlzLmluZGV4T2YoaXRlbSk7XG5cdFx0XHRpZiAofmluZGV4KSB0aGlzLnNwbGljZShpbmRleCwgMSk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHR0aGlzLml0ZW0gPSBmdW5jdGlvbiAoX25vZGUpIHtcblx0XHRcdHZhciBpLCBpdGVtO1xuXG5cdFx0XHRmb3IgKGk9MDsgaXRlbSA9IHRoaXNbaV07IGkrPTEpIHtcblx0XHRcdFx0aWYgKGl0ZW0ubm9kZSA9PT0gX25vZGUpIHJldHVybiBpdGVtO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR0aGlzLmhhcyA9IGZ1bmN0aW9uIChfbm9kZSkge1xuXHRcdFx0cmV0dXJuICEhdGhpcy5pdGVtKF9ub2RlKTtcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSkuY2FsbChbXSk7XG5cblx0dGhpcy5UUkFOU0NMVURFX1JFUExBQ0UgPSAncmVwbGFjZSc7XG5cdHRoaXMuVFJBTlNDTFVERV9QUkVQRU5EID0gJ3ByZXBlbmQnO1xuXHR0aGlzLlRSQU5TQ0xVREVfQVBQRU5EID0gJ2FwcGVuZCc7XG5cdHRoaXMuVFJBTlNDTFVERV9QTFVDSyA9ICdwbHVjayc7XG5cblx0dGhpcy5iYXNlVHlwZSA9ICdUWVBFX1NDT1BFJztcblx0dGhpcy5hY3Rpb25hYmxlcyA9IG51bGw7XG5cdHRoaXMuaXNSZWFkeSA9IG51bGw7XG5cdHRoaXMuaXNDb21wb25lbnQgPSBmYWxzZTtcblx0dGhpcy5lbnRpdGllcyA9IG51bGw7XG5cdHRoaXMuYXVkaW8gPSBudWxsO1xuXHR0aGlzLnByb3BlcnRpZXMgPSBudWxsO1xuXHR0aGlzLnByb3BlcnR5SGFuZGxlcnMgPSBudWxsO1xuXHR0aGlzLmFzc2V0UXVldWUgPSBudWxsO1xuXHR0aGlzLmV2ZW50ID0gbnVsbDtcblx0XG5cdHRoaXMuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChfbm9kZV9zZWxlY3RvciwgX2NvbXBvbmVudE5hbWUpIHtcblx0XHR2YXIgc2NvcGU7XG5cblx0XHRzY29wZSA9IHRoaXM7XG5cblx0XHR0aGlzLmlzUmVhZHkgPSBmYWxzZTtcblx0XHR0aGlzLmlzQ29tcG9uZW50ID0gISFfY29tcG9uZW50TmFtZTtcblx0XHR0aGlzLmV2ZW50ID0gbnVsbDtcblx0XHR0aGlzLmFzc2V0UXVldWUgPSBRdWV1ZS5jcmVhdGUoKTtcblx0XHR0aGlzLiRlbHMgPSAoX25vZGVfc2VsZWN0b3IuanF1ZXJ5KSA/IF9ub2RlX3NlbGVjdG9yIDogJChfbm9kZV9zZWxlY3Rvcik7XG5cblx0XHRpZiAoIXRoaXMuJGVscy5sZW5ndGgpIHtcblx0XHRcdHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcignVW5hYmxlIHRvIGxvY2F0ZSB0aGUgZWxlbWVudCB3aXRoIHNlbGVjdG9yICcrdGhpcy4kZWxzLnNlbGVjdG9yKycuJyk7XG5cdFx0fVxuXG5cdFx0dGhpcy5hZGRDbGFzcygncGwtc2NvcGUgJysoX2NvbXBvbmVudE5hbWUgPyBfY29tcG9uZW50TmFtZSsnLWNvbXBvbmVudCcgOiAnJykpO1xuXHRcdHRoaXMuZGF0YSgncGwtc2NvcGUnLCB0aGlzKTtcblx0XHR0aGlzLmRhdGEoJ3BsLWlzQ29tcG9uZW50JywgISFfY29tcG9uZW50TmFtZSk7XG5cblx0XHRjYXB0dXJlUHJvcGVydGllcy5jYWxsKHRoaXMpO1xuXHRcdFxuXHRcdGlmIChfY29tcG9uZW50TmFtZSkge1xuXHRcdFx0bG9hZENvbXBvbmVudEFzc2V0cy5jYWxsKHRoaXMsIF9jb21wb25lbnROYW1lLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGluaXQuY2FsbCh0aGlzKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRcblx0XHRlbHNlIHtcblx0XHRcdGluaXQuY2FsbCh0aGlzKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvLyBvbmx5IGZvciB1c2UgaW4gYmFzZSB0eXBlc1xuXHR0aGlzLl9faW5pdCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cdHRoaXMuX19yZWFkeSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cblx0dGhpcy53aWxsSW5pdCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cdHRoaXMuaW5pdCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cdHRoaXMucmVhZHkgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5cdHRoaXMud2F0Y2hBc3NldHMgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHNjb3BlLCBhc3NldFR5cGVzO1xuXG5cdFx0ZnVuY3Rpb24gd2F0Y2ggKCkge1xuXHRcdFx0dmFyIGV2ZW50TWFwLCBpc05vZGVDb21wbGV0ZTtcblxuXHRcdFx0ZnVuY3Rpb24gY3JlYXRlSGFuZGxlciAoX25vZGUpIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHR2YXIgbG9hZGVkRXZlbnQ7XG5cblx0XHRcdFx0XHRsb2FkZWRFdmVudCA9ICQuRXZlbnQoJ2xvYWRlZCcsIHsgdGFyZ2V0U2NvcGU6IHNjb3BlIH0pO1xuXHRcdFx0XHRcdHNjb3BlLmFzc2V0UXVldWUucmVhZHkoX25vZGUuc3JjKTtcblx0XHRcdFx0XHRzY29wZS50cmlnZ2VyKGxvYWRlZEV2ZW50LCBbX25vZGVdKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0ZXZlbnRNYXAgPSB7XG5cdFx0XHRcdEFVRElPOiAnb25sb2FkZWRkYXRhJyxcblx0XHRcdFx0VklERU86ICdvbmxvYWRlZGRhdGEnLFxuXHRcdFx0XHRJTUc6ICdvbmxvYWQnXG5cdFx0XHR9O1xuXG5cdFx0XHRpc05vZGVDb21wbGV0ZSA9IHtcblx0XHRcdFx0QVVESU86IHRoaXMucmVhZHlTdGF0ZSA9PT0gdGhpcy5IQVZFX0VOT1VHSF9EQVRBLFxuXHRcdFx0XHRWSURFTzogdGhpcy5yZWFkeVN0YXRlID09PSB0aGlzLkhBVkVfRU5PVUdIX0RBVEEsXG5cdFx0XHRcdElNRzogdGhpcy5jb21wbGV0ZVxuXHRcdFx0fTtcblxuXHRcdFx0Ly8gY29uc29sZS5sb2coJ2ZvdW5kIGFzc2V0JywgdGhpcy5ub2RlTmFtZSk7XG5cblx0XHRcdGlmIChpc05vZGVDb21wbGV0ZVt0aGlzLm5vZGVOYW1lXSkgcmV0dXJuO1xuXHRcdFx0aWYgKHNjb3BlLmFzc2V0UXVldWUuYWRkKHRoaXMuc3JjKSkge1xuXHRcdFx0XHQvLyBjb25zb2xlLmxvZygnd2F0Y2gnLCB0aGlzLm5vZGVOYW1lLCB0aGlzLnNyYywgc2NvcGUuaWQoKSk7XG5cdFx0XHRcdHRoaXNbZXZlbnRNYXBbdGhpcy5ub2RlTmFtZV1dID0gY3JlYXRlSGFuZGxlcih0aGlzKTtcblx0XHRcdFx0dGhpcy5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ0ltYWdlIGZhaWxlZCB0byBsb2FkJywgdGhpcy5zcmMpO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHNjb3BlID0gdGhpcztcblx0XHRhc3NldFR5cGVzID0gWydJTUcnLCAnQVVESU8nLCAnVklERU8nXTtcblxuXHRcdHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRpZiAofmFzc2V0VHlwZXMuaW5kZXhPZih0aGlzLm5vZGVOYW1lKSkge1xuXHRcdFx0XHR3YXRjaC5jYWxsKHRoaXMpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0dGhpcy5maW5kT3duKGFzc2V0VHlwZXMuam9pbignLCcpKS5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdHdhdGNoLmNhbGwodGhpcyk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHR0aGlzLmF0dGFjaEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgc2NvcGU7XG5cblx0XHR0aGlzLnByb3RvKCk7XG5cblx0XHRzY29wZSA9IHRoaXM7XG5cblx0XHQvLyBpZiAodGhpcy5pcygnI2JlYXJzJykpIGRlYnVnZ2VyO1xuXG5cdFx0dGhpcy5hc3NldFF1ZXVlLm9uKCdjb21wbGV0ZScsIGZ1bmN0aW9uICgpIHtcblx0XHRcdHNjb3BlLmFzc2V0UXVldWUub2ZmKCk7XG5cdFx0XHRyZWFkeS5jYWxsKHNjb3BlKTtcblx0XHR9KTtcblxuXHRcdHRoaXMub24oJ3JlYWR5JywgZnVuY3Rpb24gKF9ldmVudCkge1xuXHRcdFx0Ly8gY29uc29sZS5sb2coJyogcmVhZHk6JywgdGhpcy5hZGRyZXNzKCksICcsIHRhcmdldDonLCBfZXZlbnQudGFyZ2V0U2NvcGUuYWRkcmVzcygpKTtcblxuXHRcdFx0aWYgKHRoaXMuaGFzKF9ldmVudC50YXJnZXRTY29wZSkgJiYgdGhpcy5hc3NldFF1ZXVlLmhhcyhfZXZlbnQudGFyZ2V0U2NvcGUpKSB7XG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKCcqKiB1cGRhdGUgcXVldWUnLCBfZXZlbnQudGFyZ2V0U2NvcGUuYWRkcmVzcygpLCB0aGlzLmFzc2V0UXVldWUubGVuZ3RoKTtcblx0XHRcdFx0dGhpcy5hc3NldFF1ZXVlLnJlYWR5KF9ldmVudC50YXJnZXRTY29wZSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghdGhpcy5hc3NldFF1ZXVlLmxlbmd0aCAmJiB0aGlzLmlzUmVhZHkpIHRoaXMub2ZmKCdyZWFkeScpO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0dGhpcy5jYXB0dXJlUmVmZXJlbmNlcyA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLmZpbmRPd24oJ1tpZF0sIFtwbC1pZF0nKS5lYWNoKHRoaXMuYmluZChmdW5jdGlvbiAoX2luZGV4LCBfbm9kZSkge1xuXHRcdFx0dmFyICRub2RlLCBpZDtcblxuXHRcdFx0aWYgKF9ub2RlLm5vZGVOYW1lID09PSAnQVVESU8nKSByZXR1cm47XG5cblx0XHRcdCRub2RlID0gJChfbm9kZSk7XG5cdFx0XHRpZCA9ICRub2RlLmF0dHIoJ2lkJykgfHwgJG5vZGUuYXR0cigncGwtaWQnKTtcblxuXHRcdFx0aWYgKCF0aGlzW2lkXSkge1xuXHRcdFx0XHR1dGlsLmFzc2lnblJlZih0aGlzLCBpZCwgJG5vZGUuZGF0YSgncGwtc2NvcGUnKSB8fCAkbm9kZSk7XG5cdFx0XHR9XG5cdFx0fSkpO1xuXHR9O1xuXG5cdHRoaXMuY2FwdHVyZUF1ZGlvQXNzZXRzID0gZnVuY3Rpb24gKCkge1xuXHRcdHZhciBzY29wZSwgc2NyZWVuO1xuXG5cdFx0c2NvcGUgPSB0aGlzO1xuXHRcdHNjcmVlbiA9IHR5cGVvZiBzY29wZS5zY3JlZW4gPT09ICdvYmplY3QnID8gc2NvcGUuc2NyZWVuIDogc2NvcGU7XG5cblx0XHRzY29wZS5maW5kT3duKCdhdWRpbycpLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyICRub2RlLCBpZCwgYXVkaW9UeXBlcztcblxuXHRcdFx0aWYgKCFzY29wZS5oYXNPd25Qcm9wZXJ0eSgnYXVkaW8nKSkge1xuXHRcdFx0XHRzY29wZS5hdWRpbyA9IHtcblx0XHRcdFx0XHRiYWNrZ3JvdW5kOiBudWxsLFxuXHRcdFx0XHRcdHZvaWNlT3ZlcjogbnVsbCxcblx0XHRcdFx0XHRzZng6IG51bGxcblx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0JG5vZGUgPSAkKHRoaXMpO1xuXHRcdFx0aWQgPSB1dGlsLnRyYW5zZm9ybUlkKCRub2RlLmlkKCksIHRydWUpO1xuXHRcdFx0YXVkaW9UeXBlcyA9IFsnYmFja2dyb3VuZCcsICd2b2ljZS1vdmVyJywgJ3NmeCddO1xuXG5cdFx0XHRhdWRpb1R5cGVzLmZvckVhY2goZnVuY3Rpb24gKF90eXBlKSB7XG5cdFx0XHRcdGlmICgkbm9kZS5oYXNDbGFzcyhfdHlwZSkpIHtcblx0XHRcdFx0XHQkbm9kZS5vbigncGxheSBwYXVzZSBlbmRlZCcsIGZ1bmN0aW9uIChfZXZlbnQpIHtcblx0XHRcdFx0XHRcdHZhciBzY3JlZW47XG5cblx0XHRcdFx0XHRcdHNjcmVlbiA9IHR5cGVvZiBzY29wZS5zY3JlZW4gPT09ICdvYmplY3QnID8gc2NvcGUuc2NyZWVuIDogc2NvcGU7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdHN3aXRjaCAoX2V2ZW50LnR5cGUpIHtcblx0XHRcdFx0XHRcdFx0Y2FzZSAncGxheSc6XG5cdFx0XHRcdFx0XHRcdFx0c2NyZWVuLmFkZENsYXNzKCdQTEFZSU5HICcrX3R5cGUudG9VcHBlckNhc2UoKSk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSAncGF1c2UnOlxuXHRcdFx0XHRcdFx0XHRjYXNlICdlbmRlZCc6XG5cdFx0XHRcdFx0XHRcdFx0c2NyZWVuLnJlbW92ZUNsYXNzKCdQTEFZSU5HICcrX3R5cGUudG9VcHBlckNhc2UoKSk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRzY29wZS50cmlnZ2VyKCQuRXZlbnQoJ2F1ZGlvLScrX2V2ZW50LnR5cGUsIHtcblx0XHRcdFx0XHRcdFx0dGFyZ2V0OiAkbm9kZVswXSxcblx0XHRcdFx0XHRcdFx0dGFyZ2V0U2NvcGU6IHNjb3BlLFxuXHRcdFx0XHRcdFx0XHRhdWRpb1R5cGU6IF90eXBlXG5cdFx0XHRcdFx0XHR9KSk7XG5cdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHRpZiAoJG5vZGUuYXR0cigncGwtcmVxdWlyZWQnKSAhPSBudWxsKSB7XG5cdFx0XHRcdFx0XHRzY3JlZW4ucmVxdWlyZSgkbm9kZVswXSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gVGhpcyBwcm9wZXJ0eSBjYW4gYmUgZWl0aGVyIGFuIGFycmF5IG9mIG5vZGVzIG9yIHRoZSBub2RlLlxuXHRcdFx0XHRcdHV0aWwuYXNzaWduUmVmKHNjb3BlLmF1ZGlvLCBfdHlwZSwgJG5vZGVbMF0pO1xuXG5cdFx0XHRcdFx0Ly8gTWFrZXMgc3VyZSB0aGUgcHJvcGVydHkgaXMgc2V0IG9uIHRoZSBmaW5hbCB2YWx1ZSBvZiBzY29wZS5hdWRpb1tfdHlwZV0uXG5cdFx0XHRcdFx0Ly8gVGhpcyBzaG91bGQgYmUgc2FmZSB0byBydW4gb3V0IG9mIHRoZSBjYWxsc3RhY2suXG5cdFx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRpZiAoaWQpIHV0aWwuYXNzaWduUmVmKHNjb3BlLmF1ZGlvW3V0aWwudHJhbnNmb3JtSWQoX3R5cGUsIHRydWUpXSwgaWQsICRub2RlWzBdKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gc2NvcGU7XG5cdH07XG5cblx0dGhpcy5oYW5kbGVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChfaW1wbGVtZW50YXRpb24pIHtcblx0XHRpZiAodGhpcy5wcm9wZXJ0eUhhbmRsZXJzKSB7XG5cdFx0XHRpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eSgncHJvcGVydHlIYW5kbGVycycpKSB7XG5cdFx0XHRcdHN3aXRjaCAodHlwZW9mIF9pbXBsZW1lbnRhdGlvbikge1xuXHRcdFx0XHRcdGNhc2UgJ2Z1bmN0aW9uJzpcblx0XHRcdFx0XHRcdF9pbXBsZW1lbnRhdGlvbi5jYWxsKHRoaXMucHJvcGVydHlIYW5kbGVycyk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ29iamVjdCc6XG5cdFx0XHRcdFx0XHR0aGlzLnByb3BlcnR5SGFuZGxlcnMubWl4aW4oX2ltcGxlbWVudGF0aW9uKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHR0aGlzLnByb3BlcnR5SGFuZGxlcnMgPSB0aGlzLnByb3BlcnR5SGFuZGxlcnMuZXh0ZW5kKF9pbXBsZW1lbnRhdGlvbik7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZWxzZSB7XG5cdFx0XHR0aGlzLnByb3BlcnR5SGFuZGxlcnMgPSBCYXNpYy5leHRlbmQoX2ltcGxlbWVudGF0aW9uKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHR0aGlzLmVudGl0eSA9IGZ1bmN0aW9uIChfc2VsZWN0b3IsIF9pbXBsZW1lbnRhdGlvbikge1xuXHRcdHZhciBFbnRpdHksIHByb3RvdHlwZSwgaWQ7XG5cblx0XHRFbnRpdHkgPSBnYW1lLnByb3ZpZGVFbnRpdHlUeXBlKCk7XG5cblx0XHRpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoJ2VudGl0aWVzJykpIHRoaXMuZW50aXRpZXMgPSBbXTtcblxuXHRcdGlmICh0aGlzLmhhc093blByb3BlcnR5KCckZWxzJykpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignV2FpdCB0aGlzIGhhc25cXCd0IGJlZW4gdGVzdGVkLicpO1xuXHRcdFx0cHJvdG90eXBlID0gKEVudGl0eS5pc1Byb3RvdHlwZU9mKHRoaXMpKSA/IHRoaXMgOiBFbnRpdHk7XG5cdFx0XHRpbnN0YW5jZSA9IHByb3RvdHlwZS5leHRlbmQoX2ltcGxlbWVudGF0aW9uKS5pbml0aWFsaXplKHRoaXMuZmluZChfc2VsZWN0b3IpKTtcblx0XHRcdGlkID0gdXRpbC50cmFuc2Zvcm1JZChpbnN0YW5jZS5pZCgpKTtcblxuXHRcdFx0Ly8gdGhpcy5lbnRpdGllcy5wdXNoKGluc3RhbmNlKTtcblx0XHRcdGlmIChpZCkgdGhpc1tpZF0gPSBpbnN0YW5jZTtcblx0XHR9XG5cblx0XHRlbHNlIHtcblx0XHRcdHRoaXMuZW50aXRpZXMucHVzaCh7XG5cdFx0XHRcdHNlbGVjdG9yOiBfc2VsZWN0b3IsXG5cdFx0XHRcdGltcGxlbWVudGF0aW9uOiBfaW1wbGVtZW50YXRpb25cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdHRoaXMuaGFzID0gZnVuY3Rpb24gKF9jaGlsZCkge1xuXHRcdHZhciBjaGlsZDtcblxuXHRcdGNoaWxkID0gU2NvcGUuaXNQcm90b3R5cGVPZihfY2hpbGQpID8gX2NoaWxkLiRlbHMgOiBfY2hpbGQ7XG5cblx0XHRyZXR1cm4gISF0aGlzLiRlbHMuaGFzKGNoaWxkKS5sZW5ndGg7XG5cdH07XG5cblx0dGhpcy50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgdHlwZTtcblxuXHRcdHR5cGUgPSB0aGlzLmJhc2VUeXBlLnJlcGxhY2UoJ1RZUEVfJywgJycpO1xuXHRcdHR5cGUgPSB0eXBlLnNsaWNlKDAsMSkrdHlwZS5zbGljZSgxKS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0cmV0dXJuIFsnWycsIHRoaXMuaWQoKSB8fCB0aGlzLmFkZHJlc3MoKSwgJyAnLCB0eXBlLCAnXSddLmpvaW4oJycpO1xuXHR9O1xuXG5cdHRoaXMubG9nID0gZnVuY3Rpb24gKCkge1xuXHRcdHZhciBhcmdzO1xuXG5cdFx0YXJncyA9IHV0aWwudG9BcnJheShhcmd1bWVudHMpO1xuXG5cdFx0Y29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgW3RoaXMuaWQoKSB8fCB0aGlzLmFkZHJlc3MoKSwgJy0nXS5jb25jYXQoYXJncykpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdHRoaXMuaGFuZGxlUHJvcGVydHkoZnVuY3Rpb24gKCkge1xuXHRcdFxuXHRcdHRoaXMuY29tcG9uZW50ID0gZnVuY3Rpb24gKF9ub2RlLCBfbmFtZSwgX3ZhbHVlLCBfcHJvcGVydHkpIHtcblx0XHRcdHZhciAkbm9kZSwgcmVjb3JkLCBzY29wZSwgaWQ7XG5cblx0XHRcdCRub2RlID0gJChfbm9kZSk7XG5cdFx0XHRcblx0XHRcdGlmICghJG5vZGUuZGF0YSgncGwtaXNDb21wb25lbnQnKSkge1xuXHRcdFx0XHRyZWNvcmQgPSBnYW1lLmNvbXBvbmVudC5nZXQoX3ZhbHVlKTtcblxuXHRcdFx0XHRpZiAocmVjb3JkKSB7XG5cdFx0XHRcdFx0c2NvcGUgPSBjcmVhdGVFbnRpdHkuY2FsbCh0aGlzLCAkbm9kZSwgcmVjb3JkLmltcGxlbWVudGF0aW9uKTtcblx0XHRcdFx0XHRpZCA9IHV0aWwudHJhbnNmb3JtSWQoc2NvcGUuaWQoKSB8fCBfdmFsdWUsIHRydWUpO1xuXHRcdFx0XHRcdHV0aWwuYXNzaWduUmVmKHRoaXMsIGlkLCBzY29wZSk7XG5cblx0XHRcdFx0XHRpZiAoIXNjb3BlLmlzUmVhZHkpIHRoaXMuYXNzZXRRdWV1ZS5hZGQoc2NvcGUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0FoaCEnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR0aGlzLmFjdGlvbiA9IGZ1bmN0aW9uIChfbm9kZSwgX25hbWUsIF92YWx1ZSkge1xuXHRcdFx0aWYgKCF0aGlzLmhhc093blByb3BlcnR5KCdhY3Rpb25hYmxlcycpKSB7XG5cdFx0XHRcdHRoaXMuYWN0aW9uYWJsZXMgPSBBY3Rpb25hYmxlcy5jcmVhdGUoKTtcblx0XHRcdFx0YXR0YWNoQWN0aW9uSGFuZGxlci5jYWxsKHRoaXMpO1x0XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuYWN0aW9uYWJsZXMuYWRkKF9ub2RlLCBfdmFsdWUpO1xuXHRcdH07XG5cblx0XHR0aGlzLnJlcXVpcmVkID0gZnVuY3Rpb24gKF9ub2RlLCBfbmFtZSwgX3ZhbHVlKSB7XG5cdFx0XHRpZiAodGhpcy5pcyhfbm9kZSkpIHtcblx0XHRcdFx0dGhpcy5zY3JlZW4ucmVxdWlyZSh0aGlzKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dGhpcy5yZXF1aXJlID0gZnVuY3Rpb24gKF9ub2RlLCBfbmFtZSwgX3ZhbHVlKSB7XG5cdFx0XHR2YXIgcXVlcnksICRub2RlO1xuXG5cdFx0XHQvLyBpZiB0aGUgbm9kZSB3aXRoIHRoZSBhdHRyaWJ1dGUgaXMgdGhlIG5vZGUgZm9yIHRoaXMgc2NvcGVcblx0XHRcdGlmICh0aGlzLmlzKF9ub2RlKSkge1xuXHRcdFx0XHRxdWVyeSA9ICcjX3ZhbHVlLCBbcGwtaWQ9X3ZhbHVlXSwgW3BsLWNvbXBvbmVudD1fdmFsdWVdJy5yZXBsYWNlKC9fdmFsdWUvZywgX3ZhbHVlKTtcblx0XHRcdFx0JG5vZGUgPSB0aGlzLmZpbmQocXVlcnkpO1xuXG5cdFx0XHRcdGlmICgkbm9kZS5pcygnYXVkaW8sIHZpZGVvJykpIHtcblx0XHRcdFx0XHQkbm9kZS5lYWNoKHRoaXMuYmluZChmdW5jdGlvbiAoX2luZGV4LCBfbm9kZSkge1xuXHRcdFx0XHRcdFx0dGhpcy5yZXF1aXJlKF9ub2RlKTtcblx0XHRcdFx0XHR9KSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdCRub2RlLm9uKCdyZWFkeScsIHRoaXMuYmluZChmdW5jdGlvbiAoX2V2ZW50KSB7XG5cdFx0XHRcdFx0XHRpZiAoJG5vZGUuaXMoX2V2ZW50LnRhcmdldCkpIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5yZXF1aXJlKF9ldmVudC50YXJnZXRTY29wZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHR9KTtcblxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHsgU2NvcGUsIGNyZWF0ZUVudGl0eSB9O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zb3VyY2UvdHlwZXMvU2NvcGUuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _Object$keys = __webpack_require__(25)['default'];\\n\\nvar _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n*  jQProxy\\n*  @desc Contains all the jQuery methods targeted towards a property which references a jQuery object.\\n*  @proto Basic\\n*  \\n*  NOTE: Custom events may trigger on scopes\\n*  that also targets the same elments. Testing needed.\\n*/\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesBasic = __webpack_require__(11);\\n\\nvar _typesBasic2 = _interopRequireDefault(_typesBasic);\\n\\nvar jQProxy = _typesBasic2['default'].extend(function () {\\n\\tvar method, exclude;\\n\\n\\t/**\\n *  @desc Creates a function with a proxy to the jQuery method.\\n *  @param _name (String) The name of the method being proxied.\\n *  @return (jQuery|*) Either a jQuery object or whatever the original method returns.\\n *  @private\\n */\\n\\tfunction createProxyFunction(_name) {\\n\\t\\treturn function () {\\n\\t\\t\\tvar response;\\n\\n\\t\\t\\t// This makes sure your not calling any jQuery methods before initialization.\\n\\t\\t\\tif (!this.hasOwnProperty('$els')) {\\n\\t\\t\\t\\tif (_name === 'on') {\\n\\t\\t\\t\\t\\tthis.registerHandler(arguments);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tthrow new ReferenceError('Unable to invoke ' + _name + ' because the scope is not initialized.');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tresponse = $.fn[_name].apply(this.$els, resolveEventHandler(this, _name, arguments));\\n\\n\\t\\t\\tif (response === this.$els || response && response.jquery && response.is(this.$els)) {\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn response;\\n\\t\\t};\\n\\t}\\n\\n\\tfunction resolveEventHandler(_scope, _method, _args) {\\n\\t\\tvar i, arg, args;\\n\\n\\t\\targs = [];\\n\\n\\t\\tif (~['on', 'load'].indexOf(_method)) {\\n\\t\\t\\tfor (i = 0; arg = _args[i]; i += 1) {\\n\\t\\t\\t\\tif (typeof arg === 'function') {\\n\\t\\t\\t\\t\\targs.push((function (_handler) {\\n\\t\\t\\t\\t\\t\\treturn function () {\\n\\t\\t\\t\\t\\t\\t\\treturn _handler.apply(_scope, arguments);\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t})(arg));\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\targs.push(arg);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn args;\\n\\t\\t}\\n\\n\\t\\treturn _args;\\n\\t}\\n\\n\\t// We don't want jQuery methods overridding our base type's methods.\\n\\texclude = ['constructor'].concat(_Object$keys(_typesBasic2['default']));\\n\\n\\tthis.baseType = 'TYPE_JQPROXY';\\n\\tthis.$els = null;\\n\\tthis.eventRegistry = null;\\n\\n\\tfor (method in $.fn) {\\n\\t\\tif (!$.fn.hasOwnProperty(method) || ~exclude.indexOf(method)) continue;\\n\\t\\tthis[method] = createProxyFunction(method);\\n\\t}\\n\\n\\tthis.node = function () {\\n\\t\\treturn this.$els[0];\\n\\t};\\n\\n\\t// TODO: make this private\\n\\tthis.registerHandler = function (_definition) {\\n\\t\\tif (!this.hasOwnProperty('eventRegistry')) {\\n\\t\\t\\tif (this.eventRegistry && this.isMemberSafe('eventRegistry')) {\\n\\t\\t\\t\\tthis.eventRegistry = this.eventRegistry.slice(0);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.eventRegistry = [];\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tthis.eventRegistry.push(_definition);\\n\\t};\\n\\n\\tthis.attachEvents = function () {\\n\\t\\tvar self;\\n\\n\\t\\tself = this;\\n\\n\\t\\tif (this.eventRegistry && this.isMemberSafe('eventRegistry')) {\\n\\t\\t\\tthis.eventRegistry.forEach(function (_definition) {\\n\\t\\t\\t\\tself.on.apply(self, _definition);\\n\\t\\t\\t});\\n\\t\\t}\\n\\t};\\n\\n\\t// Wraps you function 'this' to the scope.\\n\\t//\\n\\tthis.bind = function (_handler) {\\n\\t\\tvar scope, dataArgs;\\n\\n\\t\\tscope = this;\\n\\t\\tdataArgs = [].slice.call(arguments, 1);\\n\\n\\t\\treturn function () {\\n\\t\\t\\tvar args;\\n\\n\\t\\t\\targs = [].slice.call(arguments, 0);\\n\\t\\t\\treturn _handler.apply(scope, args.concat(dataArgs));\\n\\t\\t};\\n\\t};\\n\\n\\tthis.findOwn = function (_selector) {\\n\\t\\treturn this.find(_selector).filter(this.bind(function (_index, _node) {\\n\\t\\t\\tvar $node;\\n\\n\\t\\t\\t$node = $(_node);\\n\\n\\t\\t\\tif ($node.hasClass('pl-scope')) {\\n\\t\\t\\t\\treturn $node.parent().scope() === this;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn $node.scope() === this;\\n\\t\\t}));\\n\\t};\\n\\n\\tthis.isMemberSafe = function (_name) {\\n\\t\\tvar owner, elOwner, prototype;\\n\\n\\t\\tif (this.hasOwnProperty(_name)) {\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\tprototype = Object.getPrototypeOf(this);\\n\\t\\t\\towner = _util2['default'].getOwner(this, this[_name]);\\n\\n\\t\\t\\tif (owner.object.hasOwnProperty('$els') || prototype.hasOwnProperty('$els')) return false;\\n\\n\\t\\t\\tif (prototype.$els) {\\n\\t\\t\\t\\telOwner = _util2['default'].getOwner(prototype, prototype.$els);\\n\\n\\t\\t\\t\\tif (owner.object.isPrototypeOf(elOwner.object)) {\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\treturn false;\\n\\t};\\n\\n\\tthis.is = function (_obj) {\\n\\t\\tif (!_obj) return false;\\n\\t\\tif (_obj.$els) return this.$els.is(_obj.$els);\\n\\n\\t\\treturn this.$els.is(_obj);\\n\\t};\\n});\\n\\nexports['default'] = jQProxy;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"module.exports = { \\\"default\\\": __webpack_require__(26), __esModule: true };//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5cy5qcz9mZTA2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQiIsImZpbGUiOiIyNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qva2V5c1wiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5cy5qc1xuICoqIG1vZHVsZSBpZCA9IDI1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"__webpack_require__(27);\\nmodule.exports = __webpack_require__(33).Object.keys;//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXMuanM/MGUyYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBIiwiZmlsZSI6IjI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy8kLmNvcmUnKS5PYmplY3Qua2V5cztcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzLmpzXG4gKiogbW9kdWxlIGlkID0gMjZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// 19.1.2.14 Object.keys(O)\\nvar toObject = __webpack_require__(28);\\n\\n__webpack_require__(30)('keys', function($keys){\\n  return function keys(it){\\n    return $keys(toObject(it));\\n  };\\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanM/ZGZhNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsImZpbGUiOiIyNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi8kLnRvLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuLyQub2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24oJGtleXMpe1xuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCl7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzXG4gKiogbW9kdWxlIGlkID0gMjdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// 7.1.13 ToObject(argument)\\nvar defined = __webpack_require__(29);\\nmodule.exports = function(it){\\n  return Object(defined(it));\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLnRvLW9iamVjdC5qcz8yZDlhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vJC5kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLnRvLW9iamVjdC5qc1xuICoqIG1vZHVsZSBpZCA9IDI4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 29 */\n/***/ function(module, exports) {\n\n\teval(\"// 7.2.1 RequireObjectCoercible(argument)\\nmodule.exports = function(it){\\n  if(it == undefined)throw TypeError(\\\"Can't call method on  \\\" + it);\\n  return it;\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmRlZmluZWQuanM/Y2MwYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZihpdCA9PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmRlZmluZWQuanNcbiAqKiBtb2R1bGUgaWQgPSAyOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// most Object methods by ES6 should accept primitives\\nvar $export = __webpack_require__(31)\\n  , core    = __webpack_require__(33)\\n  , fails   = __webpack_require__(36);\\nmodule.exports = function(KEY, exec){\\n  var fn  = (core.Object || {})[KEY] || Object[KEY]\\n    , exp = {};\\n  exp[KEY] = exec(fn);\\n  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLm9iamVjdC1zYXAuanM/MGRlMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQSxtREFBbUQsT0FBTyxFQUFFO0FBQzVEIiwiZmlsZSI6IjMwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vJC5leHBvcnQnKVxuICAsIGNvcmUgICAgPSByZXF1aXJlKCcuLyQuY29yZScpXG4gICwgZmFpbHMgICA9IHJlcXVpcmUoJy4vJC5mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVksIGV4ZWMpe1xuICB2YXIgZm4gID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldXG4gICAgLCBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbigpeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5vYmplY3Qtc2FwLmpzXG4gKiogbW9kdWxlIGlkID0gMzBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var global    = __webpack_require__(32)\\n  , core      = __webpack_require__(33)\\n  , ctx       = __webpack_require__(34)\\n  , PROTOTYPE = 'prototype';\\n\\nvar $export = function(type, name, source){\\n  var IS_FORCED = type & $export.F\\n    , IS_GLOBAL = type & $export.G\\n    , IS_STATIC = type & $export.S\\n    , IS_PROTO  = type & $export.P\\n    , IS_BIND   = type & $export.B\\n    , IS_WRAP   = type & $export.W\\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\\n    , key, own, out;\\n  if(IS_GLOBAL)source = name;\\n  for(key in source){\\n    // contains in native\\n    own = !IS_FORCED && target && key in target;\\n    if(own && key in exports)continue;\\n    // export native or passed\\n    out = own ? target[key] : source[key];\\n    // prevent global pollution for namespaces\\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\\n    // bind timers to global for call from export context\\n    : IS_BIND && own ? ctx(out, global)\\n    // wrap global constructors for prevent change them in library\\n    : IS_WRAP && target[key] == out ? (function(C){\\n      var F = function(param){\\n        return this instanceof C ? new C(param) : C(param);\\n      };\\n      F[PROTOTYPE] = C[PROTOTYPE];\\n      return F;\\n    // make static versions for prototype methods\\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\\n    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;\\n  }\\n};\\n// type bitmap\\n$export.F = 1;  // forced\\n$export.G = 2;  // global\\n$export.S = 4;  // static\\n$export.P = 8;  // proto\\n$export.B = 16; // bind\\n$export.W = 32; // wrap\\nmodule.exports = $export;//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmV4cG9ydC5qcz8zMmY4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FLHFGQUFxRjtBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLCtEQUErRDtBQUMvRDtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QsY0FBYztBQUNkLGNBQWM7QUFDZCxjQUFjO0FBQ2QsZUFBZTtBQUNmLGVBQWU7QUFDZiIsImZpbGUiOiIzMS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnbG9iYWwgICAgPSByZXF1aXJlKCcuLyQuZ2xvYmFsJylcbiAgLCBjb3JlICAgICAgPSByZXF1aXJlKCcuLyQuY29yZScpXG4gICwgY3R4ICAgICAgID0gcmVxdWlyZSgnLi8kLmN0eCcpXG4gICwgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24odHlwZSwgbmFtZSwgc291cmNlKXtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkZcbiAgICAsIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0LkdcbiAgICAsIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlNcbiAgICAsIElTX1BST1RPICA9IHR5cGUgJiAkZXhwb3J0LlBcbiAgICAsIElTX0JJTkQgICA9IHR5cGUgJiAkZXhwb3J0LkJcbiAgICAsIElTX1dSQVAgICA9IHR5cGUgJiAkZXhwb3J0LldcbiAgICAsIGV4cG9ydHMgICA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pXG4gICAgLCB0YXJnZXQgICAgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdXG4gICAgLCBrZXksIG93biwgb3V0O1xuICBpZihJU19HTE9CQUwpc291cmNlID0gbmFtZTtcbiAgZm9yKGtleSBpbiBzb3VyY2Upe1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIGtleSBpbiB0YXJnZXQ7XG4gICAgaWYob3duICYmIGtleSBpbiBleHBvcnRzKWNvbnRpbnVlO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcbiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24oQyl7XG4gICAgICB2YXIgRiA9IGZ1bmN0aW9uKHBhcmFtKXtcbiAgICAgICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBDID8gbmV3IEMocGFyYW0pIDogQyhwYXJhbSk7XG4gICAgICB9O1xuICAgICAgRltQUk9UT1RZUEVdID0gQ1tQUk9UT1RZUEVdO1xuICAgICAgcmV0dXJuIEY7XG4gICAgLy8gbWFrZSBzdGF0aWMgdmVyc2lvbnMgZm9yIHByb3RvdHlwZSBtZXRob2RzXG4gICAgfSkob3V0KSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIGlmKElTX1BST1RPKShleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KSlba2V5XSA9IG91dDtcbiAgfVxufTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgLy8gd3JhcFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmV4cG9ydC5qc1xuICoqIG1vZHVsZSBpZCA9IDMxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 32 */\n/***/ function(module, exports) {\n\n\teval(\"// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmdsb2JhbC5qcz8yNzBkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyIsImZpbGUiOiIzMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYodHlwZW9mIF9fZyA9PSAnbnVtYmVyJylfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5nbG9iYWwuanNcbiAqKiBtb2R1bGUgaWQgPSAzMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 33 */\n/***/ function(module, exports) {\n\n\teval(\"var core = module.exports = {version: '1.2.6'};\\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmNvcmUuanM/NjA5OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2QkFBNkI7QUFDN0IscUNBQXFDIiwiZmlsZSI6IjMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHt2ZXJzaW9uOiAnMS4yLjYnfTtcbmlmKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmNvcmUuanNcbiAqKiBtb2R1bGUgaWQgPSAzM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// optional / simple context binding\\nvar aFunction = __webpack_require__(35);\\nmodule.exports = function(fn, that, length){\\n  aFunction(fn);\\n  if(that === undefined)return fn;\\n  switch(length){\\n    case 1: return function(a){\\n      return fn.call(that, a);\\n    };\\n    case 2: return function(a, b){\\n      return fn.call(that, a, b);\\n    };\\n    case 3: return function(a, b, c){\\n      return fn.call(that, a, b, c);\\n    };\\n  }\\n  return function(/* ...args */){\\n    return fn.apply(that, arguments);\\n  };\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmN0eC5qcz8zNTYwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLyQuYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgdGhhdCwgbGVuZ3RoKXtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYodGhhdCA9PT0gdW5kZWZpbmVkKXJldHVybiBmbjtcbiAgc3dpdGNoKGxlbmd0aCl7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24oYSl7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uKGEsIGIpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbihhLCBiLCBjKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pe1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5jdHguanNcbiAqKiBtb2R1bGUgaWQgPSAzNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 35 */\n/***/ function(module, exports) {\n\n\teval(\"module.exports = function(it){\\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\\n  return it;\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmEtZnVuY3Rpb24uanM/ZDM0NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIzNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZih0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJyl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmEtZnVuY3Rpb24uanNcbiAqKiBtb2R1bGUgaWQgPSAzNVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 36 */\n/***/ function(module, exports) {\n\n\teval(\"module.exports = function(exec){\\n  try {\\n    return !!exec();\\n  } catch(e){\\n    return true;\\n  }\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmZhaWxzLmpzPzc1ZDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSIsImZpbGUiOiIzNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYyl7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmZhaWxzLmpzXG4gKiogbW9kdWxlIGlkID0gMzZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n*  Queue\\n*  @desc Contains...\\n*  @proto Array, Events, Basic\\n*/\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesCollection = __webpack_require__(21);\\n\\nvar _typesCollection2 = _interopRequireDefault(_typesCollection);\\n\\nvar _typesEvents = __webpack_require__(18);\\n\\nvar _typesEvents2 = _interopRequireDefault(_typesEvents);\\n\\nvar Queue = _typesCollection2['default'].extend(function () {\\n\\n\\tthis.baseType = 'TYPE_QUEUE';\\n\\n\\tthis.ready = function (_record) {\\n\\t\\tthis.remove(_record);\\n\\n\\t\\tif (!this.length) {\\n\\t\\t\\tthis.trigger('complete');\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t_util2['default'].mixin(this, _typesEvents2['default']);\\n\\n\\treturn this;\\n});\\n\\nexports['default'] = Queue;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvUXVldWUuanM/MDNjYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Z0NBTWlCLEVBQU07Ozs7MkNBQ0EsRUFBa0I7Ozs7dUNBQ3RCLEVBQWM7Ozs7QUFFakMsSUFBSSxLQUFLLEdBQUcsNkJBQVcsTUFBTSxDQUFDLFlBQVk7O0FBRXpDLEtBQUksQ0FBQyxRQUFRLEdBQUcsWUFBWSxDQUFDOztBQUU3QixLQUFJLENBQUMsS0FBSyxHQUFHLFVBQVUsT0FBTyxFQUFFO0FBQy9CLE1BQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7O0FBRXJCLE1BQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ2pCLE9BQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7R0FDekI7O0FBRUQsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDOztBQUVGLG1CQUFLLEtBQUssQ0FBQyxJQUFJLDJCQUFTLENBQUM7O0FBRXpCLFFBQU8sSUFBSSxDQUFDO0NBRVosQ0FBQyxDQUFDOztxQkFFWSxLQUFLIiwiZmlsZSI6IjM3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4qICBRdWV1ZVxuKiAgQGRlc2MgQ29udGFpbnMuLi5cbiogIEBwcm90byBBcnJheSwgRXZlbnRzLCBCYXNpY1xuKi9cblxuaW1wb3J0IHV0aWwgZnJvbSAndXRpbCc7XG5pbXBvcnQgQ29sbGVjdGlvbiBmcm9tICd0eXBlcy9Db2xsZWN0aW9uJztcbmltcG9ydCBFdmVudHMgZnJvbSAndHlwZXMvRXZlbnRzJztcblxudmFyIFF1ZXVlID0gQ29sbGVjdGlvbi5leHRlbmQoZnVuY3Rpb24gKCkge1xuXG5cdHRoaXMuYmFzZVR5cGUgPSAnVFlQRV9RVUVVRSc7XG5cblx0dGhpcy5yZWFkeSA9IGZ1bmN0aW9uIChfcmVjb3JkKSB7XG5cdFx0dGhpcy5yZW1vdmUoX3JlY29yZCk7XG5cblx0XHRpZiAoIXRoaXMubGVuZ3RoKSB7XG5cdFx0XHR0aGlzLnRyaWdnZXIoJ2NvbXBsZXRlJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cdFxuXHR1dGlsLm1peGluKHRoaXMsIEV2ZW50cyk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBRdWV1ZTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NvdXJjZS90eXBlcy9RdWV1ZS5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 38 */\n/***/ function(module, exports) {\n\n\teval(\"exports.__esModule = true;\\n/**\\n * @module evalAction\\n */\\n\\n/**\\n * Performs `eval()` on the value of an `action` attribute on an HTML element.\\n * @arg {string} _source - JavaScript source code.\\n * @arg {Scope} _scope - The context in which to run the source.\\n * @returns {*} The result of the evaluated source.\\n */\\nfunction evalAction(_source, _scope) {\\n\\tvar error;\\n\\n\\tfunction target(_selector) {\\n\\t\\tif (_scope.event) {\\n\\t\\t\\treturn _selector ? $(_scope.event.target).closest(_selector)[0] : $(_scope.event.target);\\n\\t\\t}\\n\\t}\\n\\n\\t// expose members of the object as if they were local variables.\\n\\t// NOTE: methods still retain their \\\"this\\\" binding to the object! :D\\n\\treturn eval(\\\"with (_scope) { try {\\\" + _source + \\\";} catch (error) { console.error('Error:', error.message, 'evaluating action', _source, 'in', _scope.id() || _scope.address()); } }\\\");\\n}\\n\\nexports[\\\"default\\\"] = evalAction;\\nmodule.exports = exports[\\\"default\\\"];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvZXZhbEFjdGlvbi5qcz8zY2ZiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBVUEsU0FBUyxVQUFVLENBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRTtBQUNyQyxLQUFJLEtBQUssQ0FBQzs7QUFFVixVQUFTLE1BQU0sQ0FBRSxTQUFTLEVBQUU7QUFDM0IsTUFBSSxNQUFNLENBQUMsS0FBSyxFQUFFO0FBQ2pCLFVBQU8sU0FBUyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUN6RjtFQUNEOzs7O0FBSUQsUUFBTyxJQUFJLENBQUMsdUJBQXVCLEdBQUMsT0FBTyxHQUFDLHFJQUFxSSxDQUFDLENBQUM7Q0FDbkw7O3FCQUVjLFVBQVUiLCJmaWxlIjoiMzguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb2R1bGUgZXZhbEFjdGlvblxuICovXG5cbi8qKlxuICogUGVyZm9ybXMgYGV2YWwoKWAgb24gdGhlIHZhbHVlIG9mIGFuIGBhY3Rpb25gIGF0dHJpYnV0ZSBvbiBhbiBIVE1MIGVsZW1lbnQuXG4gKiBAYXJnIHtzdHJpbmd9IF9zb3VyY2UgLSBKYXZhU2NyaXB0IHNvdXJjZSBjb2RlLlxuICogQGFyZyB7U2NvcGV9IF9zY29wZSAtIFRoZSBjb250ZXh0IGluIHdoaWNoIHRvIHJ1biB0aGUgc291cmNlLlxuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHQgb2YgdGhlIGV2YWx1YXRlZCBzb3VyY2UuXG4gKi9cbmZ1bmN0aW9uIGV2YWxBY3Rpb24gKF9zb3VyY2UsIF9zY29wZSkge1xuXHR2YXIgZXJyb3I7XG5cblx0ZnVuY3Rpb24gdGFyZ2V0IChfc2VsZWN0b3IpIHtcblx0XHRpZiAoX3Njb3BlLmV2ZW50KSB7XG5cdFx0XHRyZXR1cm4gX3NlbGVjdG9yID8gJChfc2NvcGUuZXZlbnQudGFyZ2V0KS5jbG9zZXN0KF9zZWxlY3RvcilbMF0gOiAkKF9zY29wZS5ldmVudC50YXJnZXQpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly8gZXhwb3NlIG1lbWJlcnMgb2YgdGhlIG9iamVjdCBhcyBpZiB0aGV5IHdlcmUgbG9jYWwgdmFyaWFibGVzLlxuXHQvLyBOT1RFOiBtZXRob2RzIHN0aWxsIHJldGFpbiB0aGVpciBcInRoaXNcIiBiaW5kaW5nIHRvIHRoZSBvYmplY3QhIDpEXG5cdHJldHVybiBldmFsKFwid2l0aCAoX3Njb3BlKSB7IHRyeSB7XCIrX3NvdXJjZStcIjt9IGNhdGNoIChlcnJvcikgeyBjb25zb2xlLmVycm9yKCdFcnJvcjonLCBlcnJvci5tZXNzYWdlLCAnZXZhbHVhdGluZyBhY3Rpb24nLCBfc291cmNlLCAnaW4nLCBfc2NvcGUuaWQoKSB8fCBfc2NvcGUuYWRkcmVzcygpKTsgfSB9XCIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBldmFsQWN0aW9uO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc291cmNlL2V2YWxBY3Rpb24uanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Base class for a scope acting as an \\\"entity\\\" with \\\"states\\\", \\\"behaviors\\\" and the ability to respond (responsibilities) to behaviors.\\n *\\n * @module\\n */\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesGlobalScope = __webpack_require__(22);\\n\\nvar _typesGlobalScope2 = _interopRequireDefault(_typesGlobalScope);\\n\\nvar _typesCollection = __webpack_require__(21);\\n\\nvar _typesCollection2 = _interopRequireDefault(_typesCollection);\\n\\nvar _typesDimensions = __webpack_require__(5);\\n\\nvar _typesQueue = __webpack_require__(37);\\n\\nvar _typesQueue2 = _interopRequireDefault(_typesQueue);\\n\\nfunction invokeResponsibilities(_scope, _event) {\\n\\tif (_scope && _scope.responsibilities && _scope.isMemberSafe('responsibilities')) {\\n\\t\\t_scope.responsibilities.forEach(function (_record) {\\n\\t\\t\\tif (_record.name === _event.name) {\\n\\n\\t\\t\\t\\t// console.log(_scope.id(), 'respond', _record.name, 'from', _event.targetScope.id());\\n\\t\\t\\t\\t_record.ability.call(_scope, _event);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n}\\n\\n/**\\n * <span class=\\\"note important\\\">NOTE: This is NOT a constructor. Use `Entity.create()` to get a new instance.</span>\\n * @classdesc Base class for a scope acting as an \\\"entity\\\" with \\\"states\\\", \\\"behaviors\\\" and the ability to respond (responsibilities) to behaviors. For more information on these terms read [this]{@link module:types/Entity}.\\n * <style>\\n * .tag {\\n *   padding: 1px 4px;\\n *   border-radius: 4px;\\n *\\n *   color: #fff;\\n *   background-color: #aaa;\\n * }\\n *\\n * .tag.behavior {\\n *\\t background-color: #0ba;\\n * }\\n *\\n * .tag.state {\\n *\\t background-color: #ba0;\\n * }\\n *\\n * .note {\\n *   border: solid 1px;\\n *   border-radius: 4px;\\n *   padding: 1px 4px;\\n *   color: #aaa;\\n *   background-color: #eee;\\n * }\\n * \\n * .note.important {\\n *   color: #b55;\\n *   background-color: #fee;\\n * }\\n * </style>\\n *\\n * @class\\n * @prop {module:types/Collection~Collection} responsibilities - A collection of ResponsibilityRecords for the scope.\\n * @prop {boolean} isComplete - Marks a scope as \\\"complete\\\" via the [`complete()`]{@link module:types/Entity~Entity#complete} behavior.\\n * @extends GlobalScope\\n */\\nvar Entity = _typesGlobalScope2['default'].extend(function () {\\n\\n\\tfunction resolveTarget(_target) {\\n\\n\\t\\tswitch (typeof _target) {\\n\\t\\t\\tcase 'string':\\n\\t\\t\\t\\treturn this.findOwn(_target);\\n\\t\\t\\tcase 'object':\\n\\t\\t\\t\\tif (_target.jquery) return _target;\\n\\t\\t\\t\\tif (Entity.isPrototypeOf(_target)) return _target;\\n\\t\\t\\t\\tif (_target.nodeType === document.ELEMENT_NODE) return $(_target);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\tfunction ResponsibilityRecord(_name, _ability) {\\n\\t\\tthis.name = _name;\\n\\t\\tthis.ability = _ability;\\n\\t}\\n\\n\\tfunction dragGreeter(_event) {\\n\\t\\tswitch (_event.type) {\\n\\t\\t\\tcase 'drag-start':\\n\\t\\t\\t\\tthis.grab(_event.state);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'drag-move':\\n\\t\\t\\t\\tthis.dragging(_event.state);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'drag-end':\\n\\t\\t\\t\\tthis.release(_event.state);\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction attachDragEvents() {\\n\\t\\tif (this.draggables && this.isMemberSafe('draggables') && this.draggables.length) {\\n\\t\\t\\tthis.on('drag-start drag-move drag-end', dragGreeter);\\n\\t\\t}\\n\\t}\\n\\n\\tthis.baseType = 'TYPE_ENTITY';\\n\\tthis.STATE = {\\n\\t\\tPLAYING: 'PLAYING',\\n\\t\\tBACKGROUND: 'BACKGROUND',\\n\\t\\tVOICE_OVER: 'VOICE-OVER',\\n\\t\\tSFX: 'SFX'\\n\\t};\\n\\n\\tthis.timeoutID = null;\\n\\tthis.intervalID = null;\\n\\tthis.responsibilities = null;\\n\\tthis.isComplete = false;\\n\\tthis.shouldInheritAbilities = true;\\n\\tthis.frameHandlers = null;\\n\\tthis.frameRate = 60; // 60fps\\n\\tthis.draggables = null;\\n\\tthis.requiredQueue = null;\\n\\n\\tthis.handleProperty(function () {\\n\\t\\tthis.size = function (_node, _name, _value, _property) {\\n\\t\\t\\tvar size;\\n\\n\\t\\t\\tif (this.is(_node)) {\\n\\t\\t\\t\\tsize = _value.split(/\\\\s*[x,]\\\\s*/);\\n\\t\\t\\t\\tthis.css({\\n\\t\\t\\t\\t\\twidth: size[0],\\n\\t\\t\\t\\t\\theight: size[1] || size[0]\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\tthis.position = function (_node, _name, _value, _property) {\\n\\t\\t\\tvar size;\\n\\n\\t\\t\\tif (this.is(_node)) {\\n\\t\\t\\t\\tsize = _value.split(/\\\\s*[x,]\\\\s*/);\\n\\t\\t\\t\\tthis.css({\\n\\t\\t\\t\\t\\ttop: size[1] || size[0],\\n\\t\\t\\t\\t\\tleft: size[0]\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\tthis.draggable = function (_node, _name, _value, _property) {\\n\\t\\t\\tif (!this.hasOwnProperty('draggables')) {\\n\\t\\t\\t\\tthis.draggables = $();\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.draggables.push(_node);\\n\\t\\t};\\n\\t});\\n\\n\\tthis.__init = function () {\\n\\t\\tthis.proto();\\n\\t\\tattachDragEvents.call(this);\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.size = function () {\\n\\t\\tvar size;\\n\\n\\t\\tif (arguments.length) {\\n\\t\\t\\tsize = _typesDimensions.Size.create(arguments);\\n\\t\\t\\tthis.css(size);\\n\\t\\t\\treturn size;\\n\\t\\t}\\n\\n\\t\\treturn _typesDimensions.Size.create().set(this.width(), this.height());\\n\\t};\\n\\n\\tthis.propagateBehavior = function (_event) {\\n\\t\\tvar ids;\\n\\n\\t\\tids = [];\\n\\n\\t\\tthis.findOwn('.pl-scope').each(function (_index, _node) {\\n\\t\\t\\tvar $node = $(_node);\\n\\t\\t\\tids.push($node.id() || $node.address());\\n\\t\\t});\\n\\n\\t\\tif (this.hasOwnProperty('entities') && this.entities.length) {\\n\\t\\t\\t// console.log(this.id(), 'propagate', _event.name, 'to', this.entities.length, 'nodes', ids);\\n\\n\\t\\t\\tthis.entities.forEach(function (_scope) {\\n\\t\\t\\t\\tinvokeResponsibilities(_scope, _event);\\n\\t\\t\\t\\t_scope.propagateBehavior(_event);\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.require = function (_entity) {\\n\\t\\tif (!this.hasOwnProperty('requiredQueue')) {\\n\\t\\t\\tthis.requiredQueue = _typesQueue2['default'].create();\\n\\t\\t\\tthis.requiredQueue.on('complete', this.bind(function () {\\n\\t\\t\\t\\tthis.log('entity complete');\\n\\t\\t\\t\\tthis.complete();\\n\\t\\t\\t}));\\n\\n\\t\\t\\tthis.respond('complete', function (_event) {\\n\\t\\t\\t\\tif (!this.has(_event.target)) return;\\n\\t\\t\\t\\tif (_event.targetScope === this) return;\\n\\n\\t\\t\\t\\tthis.requiredQueue.ready(_event.behaviorTarget);\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tthis.requiredQueue.add(_entity);\\n\\t\\tthis.gate();\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.behavior = function (_name, _behavior) {\\n\\t\\t_behavior.method = this[_name] = function () {\\n\\t\\t\\tvar behaviorEvent, result;\\n\\n\\t\\t\\tbehaviorEvent = {\\n\\t\\t\\t\\tname: _name,\\n\\t\\t\\t\\tmessage: '',\\n\\t\\t\\t\\ttargetScope: this,\\n\\t\\t\\t\\tbehaviorTarget: this\\n\\t\\t\\t};\\n\\n\\t\\t\\tresult = _behavior.apply(this, arguments);\\n\\n\\t\\t\\tif (typeof result === 'object') {\\n\\t\\t\\t\\tbehaviorEvent = _util2['default'].mixin(behaviorEvent, result);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (result !== false) {\\n\\t\\t\\t\\tthis.trigger($.Event('behavior', behaviorEvent));\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this;\\n\\t\\t};\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.respond = function () {\\n\\t\\tvar name, ability, parentScope, abilities, protoAbilities;\\n\\n\\t\\tif (!this.hasOwnProperty('responsibilities')) {\\n\\t\\t\\tabilities = _typesCollection2['default'].create();\\n\\t\\t\\tprotoAbilities = this.provideAblilityPototype();\\n\\n\\t\\t\\tif (this.shouldInheritAbilities && protoAbilities && protoAbilities.responsibilities) {\\n\\t\\t\\t\\tabilities.push.apply(abilities, protoAbilities.responsibilities);\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.responsibilities = abilities;\\n\\t\\t}\\n\\n\\t\\tif (arguments.length === 1) {\\n\\t\\t\\tswitch (typeof arguments[0]) {\\n\\t\\t\\t\\tcase 'string':\\n\\t\\t\\t\\t\\tname = arguments[0];break;\\n\\n\\t\\t\\t\\tcase 'function':\\n\\t\\t\\t\\tcase 'object':\\n\\t\\t\\t\\t\\tability = arguments[0];break;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tname = arguments[0];\\n\\t\\t\\tability = arguments[1];\\n\\t\\t}\\n\\n\\t\\tswitch (typeof ability) {\\n\\t\\t\\tcase 'object':\\n\\t\\t\\t\\tfor (name in ability) {\\n\\t\\t\\t\\t\\tif (!ability.hasOwnProperty(name)) continue;\\n\\n\\t\\t\\t\\t\\tthis.respond(name, ability[name]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'function':\\n\\t\\t\\t\\tthis.responsibilities.add(new ResponsibilityRecord(name, ability));\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.delay = function (_time, _cb) {\\n\\t\\tvar screen, time;\\n\\n\\t\\tscreen = this;\\n\\t\\ttime = _util2['default'].toMillisec(_time);\\n\\n\\t\\tthis.timeoutID = setTimeout(function () {\\n\\t\\t\\t_cb.call(screen);\\n\\t\\t}, time);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.repeat = function (_time, _cb) {\\n\\t\\tvar screen, time;\\n\\n\\t\\tscreen = this;\\n\\t\\ttime = _util2['default'].toMillisec(_time);\\n\\n\\t\\tthis.intervalID = setInterval(function () {\\n\\t\\t\\t_cb.call(screen);\\n\\t\\t}, time);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.eachFrame = function (_handler, _on) {\\n\\t\\tvar binder, frame, lastTime, rate, frames;\\n\\n\\t\\trate = this.frameRate || 1000;\\n\\t\\tframes = 0;\\n\\t\\tlastTime = 0;\\n\\n\\t\\tif (!this.hasOwnProperty('frameHandlers')) {\\n\\t\\t\\tframe = function (_time) {\\n\\t\\t\\t\\tvar i, handler;\\n\\n\\t\\t\\t\\tif (rate) {\\n\\t\\t\\t\\t\\tif (_time - lastTime >= 1000 / rate) {\\n\\t\\t\\t\\t\\t\\tfor (i = 0; handler = this.frameHandlers[i]; i += 1) {\\n\\t\\t\\t\\t\\t\\t\\thandler.call(this, _time, Math.round(1000 / (_time - lastTime)), rate);\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tif (frames === rate) frames = 0;\\n\\n\\t\\t\\t\\t\\t\\tframes += 1;\\n\\t\\t\\t\\t\\t\\tlastTime = _time;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (this.frameHandlers.length) {\\n\\t\\t\\t\\t\\twindow.requestAnimationFrame(binder);\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\n\\t\\t\\tbinder = this.bind(frame);\\n\\n\\t\\t\\t// allows methods passed as _handler's to\\n\\t\\t\\t// be able to trace back for proto() callbacks.\\n\\t\\t\\tframe.method = this.eachFrame;\\n\\n\\t\\t\\tthis.frameHandlers = _typesCollection2['default'].create();\\n\\t\\t\\twindow.requestAnimationFrame(binder);\\n\\t\\t}\\n\\n\\t\\tif (_on !== false) {\\n\\t\\t\\tthis.frameHandlers.add(_handler);\\n\\t\\t} else {\\n\\t\\t\\tthis.frameHandlers.remove(_handler);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.kill = function (_timer) {\\n\\t\\tif (_timer === 'repeat') {\\n\\t\\t\\tclearInterval(this.intervalID);\\n\\t\\t} else {\\n\\t\\t\\tclearTimeout(this.timeoutID);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.state = function (_flag, _definition, _imp) {\\n\\t\\tvar flag, tester, setter, getter, STATE, def, opperations, names;\\n\\n\\t\\tif (!_definition) {\\n\\t\\t\\treturn this.proto(_flag);\\n\\t\\t}\\n\\n\\t\\tdef = _definition.split(/\\\\s+/);\\n\\t\\tnames = _flag.split(/\\\\s+/);\\n\\t\\topperations = [];\\n\\n\\t\\tdef.forEach(this.bind(function (_opp) {\\n\\t\\t\\tvar method, flag;\\n\\n\\t\\t\\tmethod = _opp.slice(0, 1) === '+' ? 'addClass' : 'removeClass';\\n\\n\\t\\t\\topperations.push({\\n\\t\\t\\t\\tmethod: method,\\n\\t\\t\\t\\tflag: _opp.slice(1)\\n\\t\\t\\t});\\n\\n\\t\\t\\tif (method === 'addClass') {\\n\\t\\t\\t\\tflag = _opp.slice(1);\\n\\t\\t\\t\\tSTATE = _util2['default'].transformId(flag);\\n\\t\\t\\t\\tthis.STATE[STATE] = flag;\\n\\t\\t\\t}\\n\\t\\t}));\\n\\n\\t\\tsetter = names[0];\\n\\t\\ttester = names[1];\\n\\n\\t\\tthis[setter] = function (_target) {\\n\\t\\t\\tvar target, uiStateEvent, oppsPerformed;\\n\\n\\t\\t\\ttarget = resolveTarget.call(this, _target);\\n\\t\\t\\tuiStateEvent = $.Event('ui-' + setter, {\\n\\t\\t\\t\\ttarget: target.jquery ? target[0] : target,\\n\\t\\t\\t\\ttargetScope: this\\n\\t\\t\\t});\\n\\t\\t\\toppsPerformed = 0;\\n\\n\\t\\t\\tif (_imp && _imp.shouldSet && _imp.shouldSet.apply(this, arguments) === false) {\\n\\t\\t\\t\\treturn !!(_imp && _imp.notSet) && _imp.notSet.apply(this, arguments);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (_imp && _imp.willSet) _imp.willSet.apply(this, arguments);\\n\\n\\t\\t\\topperations.forEach(function (_record) {\\n\\t\\t\\t\\t// If we are adding or removing a class, test if the target already has/removed it.\\n\\t\\t\\t\\t// If so, then bump \\\"oppsPerformed\\\".\\n\\t\\t\\t\\toppsPerformed += Number(target.hasClass(_record.flag) === ! ~_record.method.indexOf('add'));\\n\\t\\t\\t\\ttarget[_record.method](_record.flag);\\n\\t\\t\\t});\\n\\n\\t\\t\\tif (_imp && _imp.didSet) _imp.didSet.apply(this, arguments);\\n\\n\\t\\t\\tif (oppsPerformed) {\\n\\t\\t\\t\\tthis.trigger(uiStateEvent);\\n\\t\\t\\t\\treturn target;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn false;\\n\\t\\t};\\n\\n\\t\\tif (tester) {\\n\\t\\t\\tgetter = 'get' + tester.slice(0, 1).toUpperCase() + tester.slice(1);\\n\\n\\t\\t\\tthis[tester] = function (_target) {\\n\\t\\t\\t\\tvar target;\\n\\n\\t\\t\\t\\ttarget = resolveTarget.call(this, _target);\\n\\n\\t\\t\\t\\treturn target.hasClass(this.STATE[STATE]);\\n\\t\\t\\t};\\n\\n\\t\\t\\tthis[getter] = function () {\\n\\t\\t\\t\\treturn this.findOwn('.' + this.STATE[STATE]);\\n\\t\\t\\t};\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.provideBehaviorEventScope = function () {\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.provideAblilityPototype = function () {\\n\\t\\tvar owner;\\n\\n\\t\\towner = _util2['default'].getOwner(this, this.baseType);\\n\\n\\t\\treturn !!owner && owner.object;\\n\\t};\\n\\n\\tthis.completed = function () {\\n\\t\\treturn this.game.demoMode || this.hasOwnProperty('isComplete') && this.isComplete || !this.requiredQueue || this.requiredQueue.length === 0;\\n\\t};\\n\\n\\t/**\\n  * <span class=\\\"tag behavior\\\">Behavior</span>\\n  * Marks a scope \\\"complete\\\" by seting `isComplete` to `true` and add the `COMPLETE` state flag.\\n  * @function module:types/Entity~Entity#complete\\n  * @returns {object} A messages object with `behaviorTarget` set to the scope performing the behavior.\\n  */\\n\\tthis.behavior('complete', function () {\\n\\t\\tif (this.hasOwnProperty('isComplete') && this.isComplete) return false;\\n\\n\\t\\tthis.isComplete = true;\\n\\t\\tthis.addClass('COMPLETE');\\n\\n\\t\\treturn {\\n\\t\\t\\tbehaviorTarget: this\\n\\t\\t};\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag behavior\\\">Behavior</span>\\n  * Reports a drggable has been grabbed for dragging.\\n  * @function module:types/Entity~Entity#grab\\n  * @arg {object} _state - An object containing the state of a draggable.\\n  * @returns {object} A messages object with `behaviorTarget` set to the scope performing the behavior.\\n  *\\n  * @see module:play~pl.game.manager.draggable for more info on draggable state.\\n  */\\n\\tthis.behavior('grab', function (_state) {\\n\\t\\treturn {\\n\\t\\t\\tstate: _state,\\n\\t\\t\\tbehaviorTarget: _state.$draggable\\n\\t\\t};\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag behavior\\\">Behavior</span>\\n  * Reports a draggable as being dragged.\\n  * @function module:types/Entity~Entity#dragging\\n  * @arg {object} _state - An object containing the state of a draggable.\\n  * @returns {object} A messages object with `behaviorTarget` set to the scope performing the behavior.\\n  *\\n  * @see module:play~pl.game.manager.draggable for more info on draggable state.\\n  */\\n\\tthis.behavior('dragging', function (_state) {\\n\\t\\treturn {\\n\\t\\t\\tstate: _state,\\n\\t\\t\\tbehaviorTarget: _state.$draggable\\n\\t\\t};\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag behavior\\\">Behavior</span>\\n  * Reports a drggable as released or droped.\\n  * @function module:types/Entity~Entity#release\\n  * @arg {object} _state - An object containing the state of a draggable.\\n  * @returns {object} A messages object with `behaviorTarget` set to the scope performing the behavior.\\n  *\\n  * @see module:play~pl.game.manager.draggable for more info on draggable state.\\n  */\\n\\tthis.behavior('release', function (_state) {\\n\\t\\treturn {\\n\\t\\t\\tstate: _state,\\n\\t\\t\\tbehaviorTarget: _state.$draggable\\n\\t\\t};\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds `OPEN` and removes the `LEAVE` CSS class names from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#open\\n  * @fires Entity#ui-open\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `OPEN` class name.\\n  * @function module:types/Entity~Entity#opened\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Open'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `OPEN` class name.\\n  * @function module:types/Entity~Entity#getOpened\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('open opened', '+OPEN -LEAVE');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Removes the `OPEN` CSS class name from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#close\\n  * @fires Entity#ui-close\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\tthis.state('close', '-OPEN');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds the `LEAVE` CSS class name to the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#leave\\n  * @fires Entity#ui-leave\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `LEAVE` class name.\\n  * @function module:types/Entity~Entity#left\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Leave'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `LEAVE` class name.\\n  * @function module:types/Entity~Entity#getLeft\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('leave left', '+LEAVE', {\\n\\t\\twillSet: function willSet(_target) {\\n\\t\\t\\tthis.close(_target);\\n\\t\\t}\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds `ENABLED` and removes the `DISABLED` CSS class names from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#enable\\n  * @fires Entity#ui-enable\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `ENABLED` class name.\\n  * @function module:types/Entity~Entity#enabled\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Enabled'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `ENABLED` class name.\\n  * @function module:types/Entity~Entity#getEnabled\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('enable enabled', '+ENABLED -DISABLED');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds `DISABLED` and removes the `ENABLED` CSS class names from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#disable\\n  * @fires Entity#ui-disable\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `DISABLED` class name.\\n  * @function module:types/Entity~Entity#disabled\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Disabled'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `DISABLED` class name.\\n  * @function module:types/Entity~Entity#getDisabled\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('disable disabled', '+DISABLED -ENABLED');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds the `SELECTED` CSS class name to the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#select\\n  * @fires Entity#ui-select\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `SELECTED` class name.\\n  * @function module:types/Entity~Entity#selected\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Selected'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `SELECTED` class name.\\n  * @function module:types/Entity~Entity#getDisabled\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('select selected', '+SELECTED', {\\n\\t\\twillSet: function willSet(_target) {\\n\\t\\t\\tvar target, $parent;\\n\\n\\t\\t\\ttarget = resolveTarget.call(this, _target);\\n\\t\\t\\t$parent = target.parent();\\n\\n\\t\\t\\t$parent.find('> .SELECTED').each(this.bind(function (_index, _node) {\\n\\t\\t\\t\\tthis.deselect(_node);\\n\\t\\t\\t}));\\n\\t\\t\\t$parent.find('> .HIGHLIGHTED').each(this.bind(function (_index, _node) {\\n\\t\\t\\t\\tthis.unhighlight(_node);\\n\\t\\t\\t}));\\n\\t\\t}\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Removes the `SELECTED` CSS class name from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#deselect\\n  * @fires Entity#ui-deselect\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\tthis.state('deselect', '-SELECTED');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds the `HIGHLIGHTED` CSS class name to the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#highlight\\n  * @fires Entity#ui-highlight\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `HIGHLIGHTED` class name.\\n  * @function module:types/Entity~Entity#highlighted\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Highlighted'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `HIGHLIGHTED` class name.\\n  * @function module:types/Entity~Entity#getHighlighted\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('highlight highlighted', '+HIGHLIGHTED');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Removes the `HIGHLIGHTED` CSS class name from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#unhighlight\\n  * @fires Entity#ui-unhighlight\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\tthis.state('unhighlight', '-HIGHLIGHTED');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds the `DRAGGABLE` CSS class name to the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#draggable\\n  * @fires Entity#ui-draggable\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `DRAGGABLE` class name.\\n  * @function module:types/Entity~Entity#dragEnabled\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Draggable'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `DRAGGABLE` class name.\\n  * @function module:types/Entity~Entity#getDragEnabled\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('draggable dragEnabled', '+DRAGGABLE', {\\n\\t\\tdidSet: function didSet(_target) {\\n\\t\\t\\tthis.translate(resolveTarget.call(this, _target));\\n\\t\\t}\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Removes the `DRAGGABLE` CSS class name from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#undraggable\\n  * @fires Entity#ui-undraggable\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\tthis.state('undraggable', '-DRAGGABLE');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds the `TRANSLATED` CSS class name to the scope or the given `_target`. The target also gets a 2d transform at the given `_point`.\\n  * @function module:types/Entity~Entity#translate\\n  * @fires Entity#ui-translate\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @arg {module:types/Dimensions~Point} _point - Point object with coordinates {x,y}.\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds the `TRANSLATED` CSS class name to the scope. The scope also gets a 2d transform at the given `_point`.\\n  * @function module:types/Entity~Entity#translate\\n  * @fires Entity#ui-translate\\n  * @arg {module:types/Dimensions~Point} _point - Point object with coordinates {x,y}.\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `TRANSLATED` class name.\\n  * @function module:types/Entity~Entity#translated\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Translate'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `TRANSLATED` class name.\\n  * @function module:types/Entity~Entity#getTranslated\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('translate translated', '+TRANSLATED', {\\n\\t\\twillSet: function willSet(_target_point, _point) {\\n\\t\\t\\tvar point, target;\\n\\n\\t\\t\\ttarget = resolveTarget.call(this, _target_point);\\n\\t\\t\\tpoint = ! ~[_target_point.x, _target_point.y].indexOf(undefined) ? _target_point : _point;\\n\\n\\t\\t\\tif (point) {\\n\\t\\t\\t\\ttarget.css('transform', 'translateX(' + point.x + 'px) translateY(' + point.y + 'px)');\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Removes the `TRANSLATED` CSS class name and CSS transform from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#untranslate\\n  * @fires Entity#ui-untranslate\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\tthis.state('untranslate', '-TRANSLATED', {\\n\\t\\twillSet: function willSet() {\\n\\t\\t\\tthis.css('transform', 'none');\\n\\t\\t}\\n\\t});\\n\\n\\tthis.state('gate gated', '+GATED');\\n});\\n\\nexports['default'] = { Entity: Entity, invokeResponsibilities: invokeResponsibilities };\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvRW50aXR5LmpzPzkxNmYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O2dDQUtpQixFQUFNOzs7OzRDQUNDLEVBQW1COzs7OzJDQUNwQixFQUFrQjs7OzsyQ0FDYixDQUFrQjs7c0NBQzVCLEVBQWE7Ozs7QUFFL0IsU0FBUyxzQkFBc0IsQ0FBRSxNQUFNLEVBQUUsTUFBTSxFQUFFO0FBQ2hELEtBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLGtCQUFrQixDQUFDLEVBQUU7QUFDakYsUUFBTSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxVQUFVLE9BQU8sRUFBRTtBQUNsRCxPQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLElBQUksRUFBRTs7O0FBR2pDLFdBQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNyQztHQUNELENBQUMsQ0FBQztFQUNIO0NBQ0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUNELElBQUksTUFBTSxHQUFHLDhCQUFZLE1BQU0sQ0FBQyxZQUFZOztBQUUzQyxVQUFTLGFBQWEsQ0FBRSxPQUFPLEVBQUU7O0FBRWhDLFVBQVEsT0FBTyxPQUFPO0FBQ3JCLFFBQUssUUFBUTtBQUFFLFdBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM1QyxRQUFLLFFBQVE7QUFDWixRQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxPQUFPLENBQUM7QUFDbkMsUUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxFQUFFLE9BQU8sT0FBTyxDQUFDO0FBQ2xELFFBQUksT0FBTyxDQUFDLFFBQVEsS0FBSyxRQUFRLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQUEs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Ii8qKlxuICogQmFzZSBjbGFzcyBmb3IgYSBzY29wZSBhY3RpbmcgYXMgYW4gXCJlbnRpdHlcIiB3aXRoIFwic3RhdGVzXCIsIFwiYmVoYXZpb3JzXCIgYW5kIHRoZSBhYmlsaXR5IHRvIHJlc3BvbmQgKHJlc3BvbnNpYmlsaXRpZXMpIHRvIGJlaGF2aW9ycy5cbiAqXG4gKiBAbW9kdWxlXG4gKi9cbmltcG9ydCB1dGlsIGZyb20gJ3V0aWwnO1xuaW1wb3J0IEdsb2JhbFNjb3BlIGZyb20gJ3R5cGVzL0dsb2JhbFNjb3BlJztcbmltcG9ydCBDb2xsZWN0aW9uIGZyb20gJ3R5cGVzL0NvbGxlY3Rpb24nO1xuaW1wb3J0IHsgUG9pbnQsIFNpemUgfSBmcm9tICd0eXBlcy9EaW1lbnNpb25zJztcbmltcG9ydCBRdWV1ZSBmcm9tICd0eXBlcy9RdWV1ZSc7XG5cdFxuZnVuY3Rpb24gaW52b2tlUmVzcG9uc2liaWxpdGllcyAoX3Njb3BlLCBfZXZlbnQpIHtcblx0aWYgKF9zY29wZSAmJiBfc2NvcGUucmVzcG9uc2liaWxpdGllcyAmJiBfc2NvcGUuaXNNZW1iZXJTYWZlKCdyZXNwb25zaWJpbGl0aWVzJykpIHtcblx0XHRfc2NvcGUucmVzcG9uc2liaWxpdGllcy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVjb3JkKSB7XG5cdFx0XHRpZiAoX3JlY29yZC5uYW1lID09PSBfZXZlbnQubmFtZSkge1xuXG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKF9zY29wZS5pZCgpLCAncmVzcG9uZCcsIF9yZWNvcmQubmFtZSwgJ2Zyb20nLCBfZXZlbnQudGFyZ2V0U2NvcGUuaWQoKSk7XG5cdFx0XHRcdF9yZWNvcmQuYWJpbGl0eS5jYWxsKF9zY29wZSwgX2V2ZW50KTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxufVxuXG4vKipcbiAqIDxzcGFuIGNsYXNzPVwibm90ZSBpbXBvcnRhbnRcIj5OT1RFOiBUaGlzIGlzIE5PVCBhIGNvbnN0cnVjdG9yLiBVc2UgYEVudGl0eS5jcmVhdGUoKWAgdG8gZ2V0IGEgbmV3IGluc3RhbmNlLjwvc3Bhbj5cbiAqIEBjbGFzc2Rlc2MgQmFzZSBjbGFzcyBmb3IgYSBzY29wZSBhY3RpbmcgYXMgYW4gXCJlbnRpdHlcIiB3aXRoIFwic3RhdGVzXCIsIFwiYmVoYXZpb3JzXCIgYW5kIHRoZSBhYmlsaXR5IHRvIHJlc3BvbmQgKHJlc3BvbnNpYmlsaXRpZXMpIHRvIGJlaGF2aW9ycy4gRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdGhlc2UgdGVybXMgcmVhZCBbdGhpc117QGxpbmsgbW9kdWxlOnR5cGVzL0VudGl0eX0uXG4gKiA8c3R5bGU+XG4gKiAudGFnIHtcbiAqICAgcGFkZGluZzogMXB4IDRweDtcbiAqICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICpcbiAqICAgY29sb3I6ICNmZmY7XG4gKiAgIGJhY2tncm91bmQtY29sb3I6ICNhYWE7XG4gKiB9XG4gKlxuICogLnRhZy5iZWhhdmlvciB7XG4gKlx0IGJhY2tncm91bmQtY29sb3I6ICMwYmE7XG4gKiB9XG4gKlxuICogLnRhZy5zdGF0ZSB7XG4gKlx0IGJhY2tncm91bmQtY29sb3I6ICNiYTA7XG4gKiB9XG4gKlxuICogLm5vdGUge1xuICogICBib3JkZXI6IHNvbGlkIDFweDtcbiAqICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICogICBwYWRkaW5nOiAxcHggNHB4O1xuICogICBjb2xvcjogI2FhYTtcbiAqICAgYmFja2dyb3VuZC1jb2xvcjogI2VlZTtcbiAqIH1cbiAqIFxuICogLm5vdGUuaW1wb3J0YW50IHtcbiAqICAgY29sb3I6ICNiNTU7XG4gKiAgIGJhY2tncm91bmQtY29sb3I6ICNmZWU7XG4gKiB9XG4gKiA8L3N0eWxlPlxuICpcbiAqIEBjbGFzc1xuICogQHByb3Age21vZHVsZTp0eXBlcy9Db2xsZWN0aW9ufkNvbGxlY3Rpb259IHJlc3BvbnNpYmlsaXRpZXMgLSBBIGNvbGxlY3Rpb24gb2YgUmVzcG9uc2liaWxpdHlSZWNvcmRzIGZvciB0aGUgc2NvcGUuXG4gKiBAcHJvcCB7Ym9vbGVhbn0gaXNDb21wbGV0ZSAtIE1hcmtzIGEgc2NvcGUgYXMgXCJjb21wbGV0ZVwiIHZpYSB0aGUgW2Bjb21wbGV0ZSgpYF17QGxpbmsgbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjY29tcGxldGV9IGJlaGF2aW9yLlxuICogQGV4dGVuZHMgR2xvYmFsU2NvcGVcbiAqL1xudmFyIEVudGl0eSA9IEdsb2JhbFNjb3BlLmV4dGVuZChmdW5jdGlvbiAoKSB7XG5cblx0ZnVuY3Rpb24gcmVzb2x2ZVRhcmdldCAoX3RhcmdldCkge1xuXHRcdFxuXHRcdHN3aXRjaCAodHlwZW9mIF90YXJnZXQpIHtcblx0XHRcdGNhc2UgJ3N0cmluZyc6IHJldHVybiB0aGlzLmZpbmRPd24oX3RhcmdldCk7XG5cdFx0XHRjYXNlICdvYmplY3QnOlxuXHRcdFx0XHRpZiAoX3RhcmdldC5qcXVlcnkpIHJldHVybiBfdGFyZ2V0O1xuXHRcdFx0XHRpZiAoRW50aXR5LmlzUHJvdG90eXBlT2YoX3RhcmdldCkpIHJldHVybiBfdGFyZ2V0O1xuXHRcdFx0XHRpZiAoX3RhcmdldC5ub2RlVHlwZSA9PT0gZG9jdW1lbnQuRUxFTUVOVF9OT0RFKSByZXR1cm4gJChfdGFyZ2V0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdGZ1bmN0aW9uIFJlc3BvbnNpYmlsaXR5UmVjb3JkIChfbmFtZSwgX2FiaWxpdHkpIHtcblx0XHR0aGlzLm5hbWUgPSBfbmFtZTtcblx0XHR0aGlzLmFiaWxpdHkgPSBfYWJpbGl0eTtcblx0fVxuXG5cdGZ1bmN0aW9uIGRyYWdHcmVldGVyIChfZXZlbnQpIHtcblx0XHRzd2l0Y2ggKF9ldmVudC50eXBlKSB7XG5cdFx0XHRjYXNlICdkcmFnLXN0YXJ0Jzpcblx0XHRcdFx0dGhpcy5ncmFiKF9ldmVudC5zdGF0ZSk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdkcmFnLW1vdmUnOlxuXHRcdFx0XHR0aGlzLmRyYWdnaW5nKF9ldmVudC5zdGF0ZSk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdkcmFnLWVuZCc6XG5cdFx0XHRcdHRoaXMucmVsZWFzZShfZXZlbnQuc3RhdGUpO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBhdHRhY2hEcmFnRXZlbnRzICgpIHtcblx0XHRpZiAodGhpcy5kcmFnZ2FibGVzICYmIHRoaXMuaXNNZW1iZXJTYWZlKCdkcmFnZ2FibGVzJykgJiYgdGhpcy5kcmFnZ2FibGVzLmxlbmd0aCkge1xuXHRcdFx0dGhpcy5vbignZHJhZy1zdGFydCBkcmFnLW1vdmUgZHJhZy1lbmQnLCBkcmFnR3JlZXRlcik7XG5cdFx0fVxuXHR9XG5cblx0dGhpcy5iYXNlVHlwZSA9ICdUWVBFX0VOVElUWSc7XG5cdHRoaXMuU1RBVEUgPSB7XG5cdFx0UExBWUlORzogJ1BMQVlJTkcnLFxuXHRcdEJBQ0tHUk9VTkQ6ICdCQUNLR1JPVU5EJyxcblx0XHRWT0lDRV9PVkVSOiAnVk9JQ0UtT1ZFUicsXG5cdFx0U0ZYOiAnU0ZYJ1xuXHR9O1xuXG5cdHRoaXMudGltZW91dElEID0gbnVsbDtcblx0dGhpcy5pbnRlcnZhbElEID0gbnVsbDtcblx0dGhpcy5yZXNwb25zaWJpbGl0aWVzID0gbnVsbDtcblx0dGhpcy5pc0NvbXBsZXRlID0gZmFsc2U7XG5cdHRoaXMuc2hvdWxkSW5oZXJpdEFiaWxpdGllcyA9IHRydWU7XG5cdHRoaXMuZnJhbWVIYW5kbGVycyA9IG51bGw7XG5cdHRoaXMuZnJhbWVSYXRlID0gNjA7IC8vIDYwZnBzXG5cdHRoaXMuZHJhZ2dhYmxlcyA9IG51bGw7XG5cdHRoaXMucmVxdWlyZWRRdWV1ZSA9IG51bGw7XG5cblx0dGhpcy5oYW5kbGVQcm9wZXJ0eShmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5zaXplID0gZnVuY3Rpb24gKF9ub2RlLCBfbmFtZSwgX3ZhbHVlLCBfcHJvcGVydHkpIHtcblx0XHRcdHZhciBzaXplO1xuXG5cdFx0XHRpZiAodGhpcy5pcyhfbm9kZSkpIHtcblx0XHRcdFx0c2l6ZSA9IF92YWx1ZS5zcGxpdCgvXFxzKlt4LF1cXHMqLyk7XG5cdFx0XHRcdHRoaXMuY3NzKHtcblx0XHRcdFx0XHR3aWR0aDogc2l6ZVswXSxcblx0XHRcdFx0XHRoZWlnaHQ6IHNpemVbMV0gfHwgc2l6ZVswXVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dGhpcy5wb3NpdGlvbiA9IGZ1bmN0aW9uIChfbm9kZSwgX25hbWUsIF92YWx1ZSwgX3Byb3BlcnR5KSB7XG5cdFx0XHR2YXIgc2l6ZTtcblxuXHRcdFx0aWYgKHRoaXMuaXMoX25vZGUpKSB7XG5cdFx0XHRcdHNpemUgPSBfdmFsdWUuc3BsaXQoL1xccypbeCxdXFxzKi8pO1xuXHRcdFx0XHR0aGlzLmNzcyh7XG5cdFx0XHRcdFx0dG9wOiBzaXplWzFdIHx8IHNpemVbMF0sXG5cdFx0XHRcdFx0bGVmdDogc2l6ZVswXVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dGhpcy5kcmFnZ2FibGUgPSBmdW5jdGlvbiAoX25vZGUsIF9uYW1lLCBfdmFsdWUsIF9wcm9wZXJ0eSkge1xuXHRcdFx0aWYgKCF0aGlzLmhhc093blByb3BlcnR5KCdkcmFnZ2FibGVzJykpIHtcblx0XHRcdFx0dGhpcy5kcmFnZ2FibGVzID0gJCgpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmRyYWdnYWJsZXMucHVzaChfbm9kZSk7XG5cdFx0fTtcblx0fSk7XG5cblx0dGhpcy5fX2luaXQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5wcm90bygpXG5cdFx0YXR0YWNoRHJhZ0V2ZW50cy5jYWxsKHRoaXMpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdHRoaXMuc2l6ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgc2l6ZTtcblxuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRzaXplID0gU2l6ZS5jcmVhdGUoYXJndW1lbnRzKTtcblx0XHRcdHRoaXMuY3NzKHNpemUpO1xuXHRcdFx0cmV0dXJuIHNpemU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFNpemUuY3JlYXRlKCkuc2V0KHRoaXMud2lkdGgoKSwgdGhpcy5oZWlnaHQoKSk7XG5cdH07XG5cblx0dGhpcy5wcm9wYWdhdGVCZWhhdmlvciA9IGZ1bmN0aW9uIChfZXZlbnQpIHtcblx0XHR2YXIgaWRzO1xuXG5cdFx0aWRzID0gW107XG5cblx0XHR0aGlzLmZpbmRPd24oJy5wbC1zY29wZScpLmVhY2goZnVuY3Rpb24gKF9pbmRleCwgX25vZGUpIHtcblx0XHRcdHZhciAkbm9kZSA9ICQoX25vZGUpOyBcblx0XHRcdGlkcy5wdXNoKCRub2RlLmlkKCkgfHwgJG5vZGUuYWRkcmVzcygpKTtcblx0XHR9KTtcblxuXHRcdGlmICh0aGlzLmhhc093blByb3BlcnR5KCdlbnRpdGllcycpICYmIHRoaXMuZW50aXRpZXMubGVuZ3RoKSB7XG5cdFx0XHQvLyBjb25zb2xlLmxvZyh0aGlzLmlkKCksICdwcm9wYWdhdGUnLCBfZXZlbnQubmFtZSwgJ3RvJywgdGhpcy5lbnRpdGllcy5sZW5ndGgsICdub2RlcycsIGlkcyk7XG5cblx0XHRcdHRoaXMuZW50aXRpZXMuZm9yRWFjaChmdW5jdGlvbiAoX3Njb3BlKSB7XG5cdFx0XHRcdGludm9rZVJlc3BvbnNpYmlsaXRpZXMoX3Njb3BlLCBfZXZlbnQpO1xuXHRcdFx0XHRfc2NvcGUucHJvcGFnYXRlQmVoYXZpb3IoX2V2ZW50KTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdHRoaXMucmVxdWlyZSA9IGZ1bmN0aW9uIChfZW50aXR5KSB7XG5cdFx0aWYgKCF0aGlzLmhhc093blByb3BlcnR5KCdyZXF1aXJlZFF1ZXVlJykpIHtcblx0XHRcdHRoaXMucmVxdWlyZWRRdWV1ZSA9IFF1ZXVlLmNyZWF0ZSgpO1xuXHRcdFx0dGhpcy5yZXF1aXJlZFF1ZXVlLm9uKCdjb21wbGV0ZScsIHRoaXMuYmluZChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHRoaXMubG9nKCdlbnRpdHkgY29tcGxldGUnKTtcblx0XHRcdFx0dGhpcy5jb21wbGV0ZSgpO1xuXHRcdFx0fSkpO1xuXG5cdFx0XHR0aGlzLnJlc3BvbmQoJ2NvbXBsZXRlJywgZnVuY3Rpb24gKF9ldmVudCkge1xuXHRcdFx0XHRpZiAoIXRoaXMuaGFzKF9ldmVudC50YXJnZXQpKSByZXR1cm47XG5cdFx0XHRcdGlmIChfZXZlbnQudGFyZ2V0U2NvcGUgPT09IHRoaXMpIHJldHVybjtcblxuXHRcdFx0XHR0aGlzLnJlcXVpcmVkUXVldWUucmVhZHkoX2V2ZW50LmJlaGF2aW9yVGFyZ2V0KTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHRoaXMucmVxdWlyZWRRdWV1ZS5hZGQoX2VudGl0eSk7XG5cdFx0dGhpcy5nYXRlKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHR0aGlzLmJlaGF2aW9yID0gZnVuY3Rpb24gKF9uYW1lLCBfYmVoYXZpb3IpIHtcblx0XHRfYmVoYXZpb3IubWV0aG9kID0gdGhpc1tfbmFtZV0gPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgYmVoYXZpb3JFdmVudCwgcmVzdWx0O1xuXG5cdFx0XHRiZWhhdmlvckV2ZW50ID0ge1xuXHRcdFx0XHRuYW1lOiBfbmFtZSxcblx0XHRcdFx0bWVzc2FnZTogJycsXG5cdFx0XHRcdHRhcmdldFNjb3BlOiB0aGlzLFxuXHRcdFx0XHRiZWhhdmlvclRhcmdldDogdGhpc1xuXHRcdFx0fTtcblxuXHRcdFx0cmVzdWx0ID0gX2JlaGF2aW9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cblx0XHRcdGlmICh0eXBlb2YgcmVzdWx0ID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRiZWhhdmlvckV2ZW50ID0gdXRpbC5taXhpbihiZWhhdmlvckV2ZW50LCByZXN1bHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAocmVzdWx0ICE9PSBmYWxzZSkge1xuXHRcdFx0XHR0aGlzLnRyaWdnZXIoJC5FdmVudCgnYmVoYXZpb3InLCBiZWhhdmlvckV2ZW50KSk7XHRcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdHRoaXMucmVzcG9uZCA9IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgbmFtZSwgYWJpbGl0eSwgcGFyZW50U2NvcGUsIGFiaWxpdGllcywgcHJvdG9BYmlsaXRpZXM7XG5cblx0XHRpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoJ3Jlc3BvbnNpYmlsaXRpZXMnKSkge1xuXHRcdFx0YWJpbGl0aWVzID0gQ29sbGVjdGlvbi5jcmVhdGUoKTtcblx0XHRcdHByb3RvQWJpbGl0aWVzID0gdGhpcy5wcm92aWRlQWJsaWxpdHlQb3RvdHlwZSgpO1xuXG5cdFx0XHRpZiAodGhpcy5zaG91bGRJbmhlcml0QWJpbGl0aWVzICYmIChwcm90b0FiaWxpdGllcyAmJiBwcm90b0FiaWxpdGllcy5yZXNwb25zaWJpbGl0aWVzKSkge1xuXHRcdFx0XHRhYmlsaXRpZXMucHVzaC5hcHBseShhYmlsaXRpZXMsIHByb3RvQWJpbGl0aWVzLnJlc3BvbnNpYmlsaXRpZXMpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnJlc3BvbnNpYmlsaXRpZXMgPSBhYmlsaXRpZXM7XG5cdFx0fVxuXG5cdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcblx0XHRcdHN3aXRjaCAodHlwZW9mIGFyZ3VtZW50c1swXSkge1xuXHRcdFx0XHRjYXNlICdzdHJpbmcnOiBuYW1lID0gYXJndW1lbnRzWzBdOyBicmVhaztcblxuXHRcdFx0XHRjYXNlICdmdW5jdGlvbic6XG5cdFx0XHRcdGNhc2UgJ29iamVjdCc6IGFiaWxpdHkgPSBhcmd1bWVudHNbMF07IGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGVsc2Uge1xuXHRcdFx0bmFtZSA9IGFyZ3VtZW50c1swXTtcblx0XHRcdGFiaWxpdHkgPSBhcmd1bWVudHNbMV07XG5cdFx0fVxuXG5cdFx0c3dpdGNoICh0eXBlb2YgYWJpbGl0eSkge1xuXHRcdFx0Y2FzZSAnb2JqZWN0Jzpcblx0XHRcdFx0Zm9yIChuYW1lIGluIGFiaWxpdHkpIHtcblx0XHRcdFx0XHRpZiAoIWFiaWxpdHkuaGFzT3duUHJvcGVydHkobmFtZSkpIGNvbnRpbnVlO1xuXG5cdFx0XHRcdFx0dGhpcy5yZXNwb25kKG5hbWUsIGFiaWxpdHlbbmFtZV0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdmdW5jdGlvbic6XG5cdFx0XHRcdHRoaXMucmVzcG9uc2liaWxpdGllcy5hZGQobmV3IFJlc3BvbnNpYmlsaXR5UmVjb3JkKG5hbWUsIGFiaWxpdHkpKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0dGhpcy5kZWxheSA9IGZ1bmN0aW9uIChfdGltZSwgX2NiKSB7XG5cdFx0dmFyIHNjcmVlbiwgdGltZTtcblxuXHRcdHNjcmVlbiA9IHRoaXM7XG5cdFx0dGltZSA9IHV0aWwudG9NaWxsaXNlYyhfdGltZSk7XG5cblx0XHR0aGlzLnRpbWVvdXRJRCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRfY2IuY2FsbChzY3JlZW4pO1xuXHRcdH0sIHRpbWUpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0dGhpcy5yZXBlYXQgPSBmdW5jdGlvbiAoX3RpbWUsIF9jYikge1xuXHRcdHZhciBzY3JlZW4sIHRpbWU7XG5cblx0XHRzY3JlZW4gPSB0aGlzO1xuXHRcdHRpbWUgPSB1dGlsLnRvTWlsbGlzZWMoX3RpbWUpO1xuXG5cdFx0dGhpcy5pbnRlcnZhbElEID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG5cdFx0XHRfY2IuY2FsbChzY3JlZW4pO1xuXHRcdH0sIHRpbWUpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0dGhpcy5lYWNoRnJhbWUgPSBmdW5jdGlvbiAoX2hhbmRsZXIsIF9vbikge1xuXHRcdHZhciBiaW5kZXIsIGZyYW1lLCBsYXN0VGltZSwgcmF0ZSwgZnJhbWVzO1xuXG5cdFx0cmF0ZSA9IHRoaXMuZnJhbWVSYXRlIHx8IDEwMDA7XG5cdFx0ZnJhbWVzID0gMDtcblx0XHRsYXN0VGltZSA9IDA7XG5cblx0XHRpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoJ2ZyYW1lSGFuZGxlcnMnKSkge1xuXHRcdFx0ZnJhbWUgPSBmdW5jdGlvbiAoX3RpbWUpIHtcblx0XHRcdFx0dmFyIGksIGhhbmRsZXI7XG5cblx0XHRcdFx0aWYgKHJhdGUpIHtcblx0XHRcdFx0XHRpZiAoX3RpbWUgLSBsYXN0VGltZSA+PSAoMTAwMC9yYXRlKSkge1xuXHRcdFx0XHRcdFx0Zm9yIChpPTA7IGhhbmRsZXIgPSB0aGlzLmZyYW1lSGFuZGxlcnNbaV07IGkrPTEpIHtcblx0XHRcdFx0XHRcdFx0aGFuZGxlci5jYWxsKHRoaXMsIF90aW1lLCBNYXRoLnJvdW5kKDEwMDAvKF90aW1lIC0gbGFzdFRpbWUpKSwgcmF0ZSk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmIChmcmFtZXMgPT09IHJhdGUpIGZyYW1lcyA9IDA7XG5cblx0XHRcdFx0XHRcdGZyYW1lcys9MTtcblx0XHRcdFx0XHRcdGxhc3RUaW1lID0gX3RpbWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHRoaXMuZnJhbWVIYW5kbGVycy5sZW5ndGgpIHtcblx0XHRcdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGJpbmRlcik7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRcdGJpbmRlciA9IHRoaXMuYmluZChmcmFtZSk7XG5cblx0XHRcdC8vIGFsbG93cyBtZXRob2RzIHBhc3NlZCBhcyBfaGFuZGxlcidzIHRvXG5cdFx0XHQvLyBiZSBhYmxlIHRvIHRyYWNlIGJhY2sgZm9yIHByb3RvKCkgY2FsbGJhY2tzLlxuXHRcdFx0ZnJhbWUubWV0aG9kID0gdGhpcy5lYWNoRnJhbWU7XG5cblx0XHRcdHRoaXMuZnJhbWVIYW5kbGVycyA9IENvbGxlY3Rpb24uY3JlYXRlKCk7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGJpbmRlcik7XG5cdFx0fVxuXG5cdFx0aWYgKF9vbiAhPT0gZmFsc2UpIHtcblx0XHRcdHRoaXMuZnJhbWVIYW5kbGVycy5hZGQoX2hhbmRsZXIpO1xuXHRcdH1cblxuXHRcdGVsc2Uge1xuXHRcdFx0dGhpcy5mcmFtZUhhbmRsZXJzLnJlbW92ZShfaGFuZGxlcik7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0dGhpcy5raWxsID0gZnVuY3Rpb24gKF90aW1lcikge1xuXHRcdGlmIChfdGltZXIgPT09ICdyZXBlYXQnKSB7XG5cdFx0XHRjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWxJRCk7XG5cdFx0fVxuXG5cdFx0ZWxzZSB7XG5cdFx0XHRjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0SUQpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdHRoaXMuc3RhdGUgPSBmdW5jdGlvbiAoX2ZsYWcsIF9kZWZpbml0aW9uLCBfaW1wKSB7XG5cdFx0dmFyIGZsYWcsIHRlc3Rlciwgc2V0dGVyLCBnZXR0ZXIsIFNUQVRFLCBkZWYsIG9wcGVyYXRpb25zLCBuYW1lcztcblxuXHRcdGlmICghX2RlZmluaXRpb24pIHtcblx0XHRcdHJldHVybiB0aGlzLnByb3RvKF9mbGFnKTtcblx0XHR9XG5cblx0XHRkZWYgPSBfZGVmaW5pdGlvbi5zcGxpdCgvXFxzKy8pO1xuXHRcdG5hbWVzID0gX2ZsYWcuc3BsaXQoL1xccysvKTtcblx0XHRvcHBlcmF0aW9ucyA9IFtdO1xuXG5cdFx0ZGVmLmZvckVhY2godGhpcy5iaW5kKGZ1bmN0aW9uIChfb3BwKSB7XG5cdFx0XHR2YXIgbWV0aG9kLCBmbGFnO1xuXG5cdFx0XHRtZXRob2QgPSAoX29wcC5zbGljZSgwLCAxKSA9PT0gJysnKSA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnO1xuXG5cdFx0XHRvcHBlcmF0aW9ucy5wdXNoKHtcblx0XHRcdFx0bWV0aG9kOiBtZXRob2QsXG5cdFx0XHRcdGZsYWc6IF9vcHAuc2xpY2UoMSlcblx0XHRcdH0pO1xuXG5cdFx0XHRpZiAobWV0aG9kID09PSAnYWRkQ2xhc3MnKSB7XG5cdFx0XHRcdGZsYWcgPSBfb3BwLnNsaWNlKDEpO1xuXHRcdFx0XHRTVEFURSA9IHV0aWwudHJhbnNmb3JtSWQoZmxhZyk7XG5cdFx0XHRcdHRoaXMuU1RBVEVbU1RBVEVdID0gZmxhZztcblx0XHRcdH1cblx0XHR9KSk7XG5cblx0XHRzZXR0ZXIgPSBuYW1lc1swXTtcblx0XHR0ZXN0ZXIgPSBuYW1lc1sxXTtcblxuXHRcdHRoaXNbc2V0dGVyXSA9IGZ1bmN0aW9uIChfdGFyZ2V0KSB7XG5cdFx0XHR2YXIgdGFyZ2V0LCB1aVN0YXRlRXZlbnQsIG9wcHNQZXJmb3JtZWQ7XG5cblx0XHRcdHRhcmdldCA9IHJlc29sdmVUYXJnZXQuY2FsbCh0aGlzLCBfdGFyZ2V0KTtcblx0XHRcdHVpU3RhdGVFdmVudCA9ICQuRXZlbnQoJ3VpLScrc2V0dGVyLCB7XG5cdFx0XHRcdHRhcmdldDogdGFyZ2V0LmpxdWVyeSA/IHRhcmdldFswXSA6IHRhcmdldCxcblx0XHRcdFx0dGFyZ2V0U2NvcGU6IHRoaXNcblx0XHRcdH0pO1xuXHRcdFx0b3Bwc1BlcmZvcm1lZCA9IDA7XG5cblx0XHRcdGlmIChfaW1wICYmIF9pbXAuc2hvdWxkU2V0ICYmIF9pbXAuc2hvdWxkU2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgPT09IGZhbHNlKSB7XG5cdFx0XHRcdHJldHVybiAhIShfaW1wICYmIF9pbXAubm90U2V0KSAmJiBfaW1wLm5vdFNldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoX2ltcCAmJiBfaW1wLndpbGxTZXQpIF9pbXAud2lsbFNldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG5cdFx0XHRvcHBlcmF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVjb3JkKSB7XG5cdFx0XHRcdC8vIElmIHdlIGFyZSBhZGRpbmcgb3IgcmVtb3ZpbmcgYSBjbGFzcywgdGVzdCBpZiB0aGUgdGFyZ2V0IGFscmVhZHkgaGFzL3JlbW92ZWQgaXQuXG5cdFx0XHRcdC8vIElmIHNvLCB0aGVuIGJ1bXAgXCJvcHBzUGVyZm9ybWVkXCIuXG5cdFx0XHRcdG9wcHNQZXJmb3JtZWQgKz0gTnVtYmVyKHRhcmdldC5oYXNDbGFzcyhfcmVjb3JkLmZsYWcpID09PSAhfl9yZWNvcmQubWV0aG9kLmluZGV4T2YoJ2FkZCcpKTtcblx0XHRcdFx0dGFyZ2V0W19yZWNvcmQubWV0aG9kXShfcmVjb3JkLmZsYWcpO1xuXHRcdFx0fSk7XG5cblx0XHRcdGlmIChfaW1wICYmIF9pbXAuZGlkU2V0KSBfaW1wLmRpZFNldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG5cblx0XHRcdGlmIChvcHBzUGVyZm9ybWVkKSB7XG5cdFx0XHRcdHRoaXMudHJpZ2dlcih1aVN0YXRlRXZlbnQpO1xuXHRcdFx0XHRyZXR1cm4gdGFyZ2V0O1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHRcdGlmICh0ZXN0ZXIpIHtcblx0XHRcdGdldHRlciA9ICdnZXQnICsgdGVzdGVyLnNsaWNlKDAsIDEpLnRvVXBwZXJDYXNlKCkgKyB0ZXN0ZXIuc2xpY2UoMSk7XG5cblx0XHRcdHRoaXNbdGVzdGVyXSA9IGZ1bmN0aW9uIChfdGFyZ2V0KSB7XG5cdFx0XHRcdHZhciB0YXJnZXQ7XG5cblx0XHRcdFx0dGFyZ2V0ID0gcmVzb2x2ZVRhcmdldC5jYWxsKHRoaXMsIF90YXJnZXQpO1xuXG5cdFx0XHRcdHJldHVybiB0YXJnZXQuaGFzQ2xhc3ModGhpcy5TVEFURVtTVEFURV0pO1xuXHRcdFx0fTtcblxuXHRcdFx0dGhpc1tnZXR0ZXJdID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5maW5kT3duKCcuJyt0aGlzLlNUQVRFW1NUQVRFXSk7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdHRoaXMucHJvdmlkZUJlaGF2aW9yRXZlbnRTY29wZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHR0aGlzLnByb3ZpZGVBYmxpbGl0eVBvdG90eXBlID0gZnVuY3Rpb24gKCkge1xuXHRcdHZhciBvd25lcjtcblxuXHRcdG93bmVyID0gdXRpbC5nZXRPd25lcih0aGlzLCB0aGlzLmJhc2VUeXBlKTtcblxuXHRcdHJldHVybiAhIW93bmVyICYmIG93bmVyLm9iamVjdDtcblx0fTtcblxuXHR0aGlzLmNvbXBsZXRlZCA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5nYW1lLmRlbW9Nb2RlIHx8ICh0aGlzLmhhc093blByb3BlcnR5KCdpc0NvbXBsZXRlJykgJiYgdGhpcy5pc0NvbXBsZXRlKSB8fCAhdGhpcy5yZXF1aXJlZFF1ZXVlIHx8IHRoaXMucmVxdWlyZWRRdWV1ZS5sZW5ndGggPT09IDA7XG5cdH07XG5cblx0LyoqXG5cdCAqIDxzcGFuIGNsYXNzPVwidGFnIGJlaGF2aW9yXCI+QmVoYXZpb3I8L3NwYW4+XG5cdCAqIE1hcmtzIGEgc2NvcGUgXCJjb21wbGV0ZVwiIGJ5IHNldGluZyBgaXNDb21wbGV0ZWAgdG8gYHRydWVgIGFuZCBhZGQgdGhlIGBDT01QTEVURWAgc3RhdGUgZmxhZy5cblx0ICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I2NvbXBsZXRlXG5cdCAqIEByZXR1cm5zIHtvYmplY3R9IEEgbWVzc2FnZXMgb2JqZWN0IHdpdGggYGJlaGF2aW9yVGFyZ2V0YCBzZXQgdG8gdGhlIHNjb3BlIHBlcmZvcm1pbmcgdGhlIGJlaGF2aW9yLlxuXHQgKi9cblx0dGhpcy5iZWhhdmlvcignY29tcGxldGUnLCBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHRoaXMuaGFzT3duUHJvcGVydHkoJ2lzQ29tcGxldGUnKSAmJiB0aGlzLmlzQ29tcGxldGUpIHJldHVybiBmYWxzZTtcblxuXHRcdHRoaXMuaXNDb21wbGV0ZSA9IHRydWU7XG5cdFx0dGhpcy5hZGRDbGFzcygnQ09NUExFVEUnKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRiZWhhdmlvclRhcmdldDogdGhpc1xuXHRcdH07XG5cdH0pO1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBiZWhhdmlvclwiPkJlaGF2aW9yPC9zcGFuPlxuXHQgKiBSZXBvcnRzIGEgZHJnZ2FibGUgaGFzIGJlZW4gZ3JhYmJlZCBmb3IgZHJhZ2dpbmcuXG5cdCAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSNncmFiXG5cdCAqIEBhcmcge29iamVjdH0gX3N0YXRlIC0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHN0YXRlIG9mIGEgZHJhZ2dhYmxlLlxuXHQgKiBAcmV0dXJucyB7b2JqZWN0fSBBIG1lc3NhZ2VzIG9iamVjdCB3aXRoIGBiZWhhdmlvclRhcmdldGAgc2V0IHRvIHRoZSBzY29wZSBwZXJmb3JtaW5nIHRoZSBiZWhhdmlvci5cblx0ICpcblx0ICogQHNlZSBtb2R1bGU6cGxheX5wbC5nYW1lLm1hbmFnZXIuZHJhZ2dhYmxlIGZvciBtb3JlIGluZm8gb24gZHJhZ2dhYmxlIHN0YXRlLlxuXHQgKi9cblx0dGhpcy5iZWhhdmlvcignZ3JhYicsIGZ1bmN0aW9uIChfc3RhdGUpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c3RhdGU6IF9zdGF0ZSxcblx0XHRcdGJlaGF2aW9yVGFyZ2V0OiBfc3RhdGUuJGRyYWdnYWJsZVxuXHRcdH07XG5cdH0pO1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBiZWhhdmlvclwiPkJlaGF2aW9yPC9zcGFuPlxuXHQgKiBSZXBvcnRzIGEgZHJhZ2dhYmxlIGFzIGJlaW5nIGRyYWdnZWQuXG5cdCAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSNkcmFnZ2luZ1xuXHQgKiBAYXJnIHtvYmplY3R9IF9zdGF0ZSAtIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBzdGF0ZSBvZiBhIGRyYWdnYWJsZS5cblx0ICogQHJldHVybnMge29iamVjdH0gQSBtZXNzYWdlcyBvYmplY3Qgd2l0aCBgYmVoYXZpb3JUYXJnZXRgIHNldCB0byB0aGUgc2NvcGUgcGVyZm9ybWluZyB0aGUgYmVoYXZpb3IuXG5cdCAqXG5cdCAqIEBzZWUgbW9kdWxlOnBsYXl+cGwuZ2FtZS5tYW5hZ2VyLmRyYWdnYWJsZSBmb3IgbW9yZSBpbmZvIG9uIGRyYWdnYWJsZSBzdGF0ZS5cblx0ICovXG5cdHRoaXMuYmVoYXZpb3IoJ2RyYWdnaW5nJywgZnVuY3Rpb24gKF9zdGF0ZSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzdGF0ZTogX3N0YXRlLFxuXHRcdFx0YmVoYXZpb3JUYXJnZXQ6IF9zdGF0ZS4kZHJhZ2dhYmxlXG5cdFx0fTtcblx0fSk7XG5cblx0LyoqXG5cdCAqIDxzcGFuIGNsYXNzPVwidGFnIGJlaGF2aW9yXCI+QmVoYXZpb3I8L3NwYW4+XG5cdCAqIFJlcG9ydHMgYSBkcmdnYWJsZSBhcyByZWxlYXNlZCBvciBkcm9wZWQuXG5cdCAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSNyZWxlYXNlXG5cdCAqIEBhcmcge29iamVjdH0gX3N0YXRlIC0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHN0YXRlIG9mIGEgZHJhZ2dhYmxlLlxuXHQgKiBAcmV0dXJucyB7b2JqZWN0fSBBIG1lc3NhZ2VzIG9iamVjdCB3aXRoIGBiZWhhdmlvclRhcmdldGAgc2V0IHRvIHRoZSBzY29wZSBwZXJmb3JtaW5nIHRoZSBiZWhhdmlvci5cblx0ICpcblx0ICogQHNlZSBtb2R1bGU6cGxheX5wbC5nYW1lLm1hbmFnZXIuZHJhZ2dhYmxlIGZvciBtb3JlIGluZm8gb24gZHJhZ2dhYmxlIHN0YXRlLlxuXHQgKi9cblx0dGhpcy5iZWhhdmlvcigncmVsZWFzZScsIGZ1bmN0aW9uIChfc3RhdGUpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c3RhdGU6IF9zdGF0ZSxcblx0XHRcdGJlaGF2aW9yVGFyZ2V0OiBfc3RhdGUuJGRyYWdnYWJsZVxuXHRcdH07XG5cdH0pO1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBBZGRzIGBPUEVOYCBhbmQgcmVtb3ZlcyB0aGUgYExFQVZFYCBDU1MgY2xhc3MgbmFtZXMgZnJvbSB0aGUgc2NvcGUgb3IgdGhlIGdpdmVuIGBfdGFyZ2V0YC5cblx0ICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I29wZW5cblx0ICogQGZpcmVzIEVudGl0eSN1aS1vcGVuXG5cdCAqIEBhcmcge3N0cmluZ3xTY29wZXxqUXVlcnl8SFRNTEVsZW1lbnR9IF90YXJnZXQgLSBBIENTUyBzZWxlY3RvciwgRE9NIG5vZGUgcmVmZXJlbmNlIG9yIGNvbnRleHQgb2JqZWN0IChpLmUuIFNjb3BlL2pRdWVyeSkuXG5cdCAqIEByZXR1cm5zIGB0aGlzYFxuXHQgKi9cblxuXHQvKipcblx0ICogPHNwYW4gY2xhc3M9XCJ0YWcgc3RhdGVcIj5TdGF0ZTwvc3Bhbj5cblx0ICogVGVzdHMgaWYgdGhlIHNjb3BlIG9yIGdpdmVuIGBfdGFyZ2V0YCBoYXMgdGhlIGBPUEVOYCBjbGFzcyBuYW1lLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjb3BlbmVkXG5cdCAqIEBhcmcge3N0cmluZ3xTY29wZXxqUXVlcnl8SFRNTEVsZW1lbnR9IF90YXJnZXQgLSBBIENTUyBzZWxlY3RvciwgRE9NIG5vZGUgcmVmZXJlbmNlIG9yIGNvbnRleHQgb2JqZWN0IChpLmUuIFNjb3BlL2pRdWVyeSkuXG5cdCAqIEByZXR1cm5zIHtCb29sZWFufSBPcGVuJ25lc3MuXG5cdCAqL1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBQcm92aWRlcyB0aGUgZWxlbWVudHMgd2l0aCB0aGUgYE9QRU5gIGNsYXNzIG5hbWUuXG5cdCAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSNnZXRPcGVuZWRcblx0ICogQHJldHVybnMge2pRdWVyeX0galF1ZXJ5IGNvbGxlY3Rpb24gb2YgbWF0Y2hlZCBub2Rlcy5cblx0ICogQHRvZG8gUmV0dXJuIHNjb3BlIGlmIGF2YWlsYWJsZS5cblx0ICovXG5cdHRoaXMuc3RhdGUoJ29wZW4gb3BlbmVkJywgJytPUEVOIC1MRUFWRScpO1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBSZW1vdmVzIHRoZSBgT1BFTmAgQ1NTIGNsYXNzIG5hbWUgZnJvbSB0aGUgc2NvcGUgb3IgdGhlIGdpdmVuIGBfdGFyZ2V0YC5cblx0ICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I2Nsb3NlXG5cdCAqIEBmaXJlcyBFbnRpdHkjdWktY2xvc2Vcblx0ICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cblx0ICogQHJldHVybnMgYHRoaXNgXG5cdCAqL1xuXHR0aGlzLnN0YXRlKCdjbG9zZScsICctT1BFTicpO1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBBZGRzIHRoZSBgTEVBVkVgIENTUyBjbGFzcyBuYW1lIHRvIHRoZSBzY29wZSBvciB0aGUgZ2l2ZW4gYF90YXJnZXRgLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjbGVhdmVcblx0ICogQGZpcmVzIEVudGl0eSN1aS1sZWF2ZVxuXHQgKiBAYXJnIHtzdHJpbmd8U2NvcGV8alF1ZXJ5fEhUTUxFbGVtZW50fSBfdGFyZ2V0IC0gQSBDU1Mgc2VsZWN0b3IsIERPTSBub2RlIHJlZmVyZW5jZSBvciBjb250ZXh0IG9iamVjdCAoaS5lLiBTY29wZS9qUXVlcnkpLlxuXHQgKiBAcmV0dXJucyBgdGhpc2Bcblx0ICovXG5cblx0LyoqXG5cdCAqIDxzcGFuIGNsYXNzPVwidGFnIHN0YXRlXCI+U3RhdGU8L3NwYW4+XG5cdCAqIFRlc3RzIGlmIHRoZSBzY29wZSBvciBnaXZlbiBgX3RhcmdldGAgaGFzIHRoZSBgTEVBVkVgIGNsYXNzIG5hbWUuXG5cdCAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSNsZWZ0XG5cdCAqIEBhcmcge3N0cmluZ3xTY29wZXxqUXVlcnl8SFRNTEVsZW1lbnR9IF90YXJnZXQgLSBBIENTUyBzZWxlY3RvciwgRE9NIG5vZGUgcmVmZXJlbmNlIG9yIGNvbnRleHQgb2JqZWN0IChpLmUuIFNjb3BlL2pRdWVyeSkuXG5cdCAqIEByZXR1cm5zIHtCb29sZWFufSBMZWF2ZSduZXNzLlxuXHQgKi9cblxuXHQvKipcblx0ICogPHNwYW4gY2xhc3M9XCJ0YWcgc3RhdGVcIj5TdGF0ZTwvc3Bhbj5cblx0ICogUHJvdmlkZXMgdGhlIGVsZW1lbnRzIHdpdGggdGhlIGBMRUFWRWAgY2xhc3MgbmFtZS5cblx0ICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I2dldExlZnRcblx0ICogQHJldHVybnMge2pRdWVyeX0galF1ZXJ5IGNvbGxlY3Rpb24gb2YgbWF0Y2hlZCBub2Rlcy5cblx0ICogQHRvZG8gUmV0dXJuIHNjb3BlIGlmIGF2YWlsYWJsZS5cblx0ICovXG5cdHRoaXMuc3RhdGUoJ2xlYXZlIGxlZnQnLCAnK0xFQVZFJywge1xuXHRcdHdpbGxTZXQ6IGZ1bmN0aW9uIChfdGFyZ2V0KSB7XG5cdFx0XHR0aGlzLmNsb3NlKF90YXJnZXQpO1xuXHRcdH1cblx0fSk7XG5cblx0LyoqXG5cdCAqIDxzcGFuIGNsYXNzPVwidGFnIHN0YXRlXCI+U3RhdGU8L3NwYW4+XG5cdCAqIEFkZHMgYEVOQUJMRURgIGFuZCByZW1vdmVzIHRoZSBgRElTQUJMRURgIENTUyBjbGFzcyBuYW1lcyBmcm9tIHRoZSBzY29wZSBvciB0aGUgZ2l2ZW4gYF90YXJnZXRgLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjZW5hYmxlXG5cdCAqIEBmaXJlcyBFbnRpdHkjdWktZW5hYmxlXG5cdCAqIEBhcmcge3N0cmluZ3xTY29wZXxqUXVlcnl8SFRNTEVsZW1lbnR9IF90YXJnZXQgLSBBIENTUyBzZWxlY3RvciwgRE9NIG5vZGUgcmVmZXJlbmNlIG9yIGNvbnRleHQgb2JqZWN0IChpLmUuIFNjb3BlL2pRdWVyeSkuXG5cdCAqIEByZXR1cm5zIGB0aGlzYFxuXHQgKi9cblxuXHQvKipcblx0ICogPHNwYW4gY2xhc3M9XCJ0YWcgc3RhdGVcIj5TdGF0ZTwvc3Bhbj5cblx0ICogVGVzdHMgaWYgdGhlIHNjb3BlIG9yIGdpdmVuIGBfdGFyZ2V0YCBoYXMgdGhlIGBFTkFCTEVEYCBjbGFzcyBuYW1lLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjZW5hYmxlZFxuXHQgKiBAYXJnIHtzdHJpbmd8U2NvcGV8alF1ZXJ5fEhUTUxFbGVtZW50fSBfdGFyZ2V0IC0gQSBDU1Mgc2VsZWN0b3IsIERPTSBub2RlIHJlZmVyZW5jZSBvciBjb250ZXh0IG9iamVjdCAoaS5lLiBTY29wZS9qUXVlcnkpLlxuXHQgKiBAcmV0dXJucyB7Qm9vbGVhbn0gRW5hYmxlZCduZXNzLlxuXHQgKi9cblxuXHQvKipcblx0ICogPHNwYW4gY2xhc3M9XCJ0YWcgc3RhdGVcIj5TdGF0ZTwvc3Bhbj5cblx0ICogUHJvdmlkZXMgdGhlIGVsZW1lbnRzIHdpdGggdGhlIGBFTkFCTEVEYCBjbGFzcyBuYW1lLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjZ2V0RW5hYmxlZFxuXHQgKiBAcmV0dXJucyB7alF1ZXJ5fSBqUXVlcnkgY29sbGVjdGlvbiBvZiBtYXRjaGVkIG5vZGVzLlxuXHQgKiBAdG9kbyBSZXR1cm4gc2NvcGUgaWYgYXZhaWxhYmxlLlxuXHQgKi9cblx0dGhpcy5zdGF0ZSgnZW5hYmxlIGVuYWJsZWQnLCAnK0VOQUJMRUQgLURJU0FCTEVEJyk7XG5cblx0LyoqXG5cdCAqIDxzcGFuIGNsYXNzPVwidGFnIHN0YXRlXCI+U3RhdGU8L3NwYW4+XG5cdCAqIEFkZHMgYERJU0FCTEVEYCBhbmQgcmVtb3ZlcyB0aGUgYEVOQUJMRURgIENTUyBjbGFzcyBuYW1lcyBmcm9tIHRoZSBzY29wZSBvciB0aGUgZ2l2ZW4gYF90YXJnZXRgLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjZGlzYWJsZVxuXHQgKiBAZmlyZXMgRW50aXR5I3VpLWRpc2FibGVcblx0ICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cblx0ICogQHJldHVybnMgYHRoaXNgXG5cdCAqL1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBUZXN0cyBpZiB0aGUgc2NvcGUgb3IgZ2l2ZW4gYF90YXJnZXRgIGhhcyB0aGUgYERJU0FCTEVEYCBjbGFzcyBuYW1lLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjZGlzYWJsZWRcblx0ICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cblx0ICogQHJldHVybnMge0Jvb2xlYW59IERpc2FibGVkJ25lc3MuXG5cdCAqL1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBQcm92aWRlcyB0aGUgZWxlbWVudHMgd2l0aCB0aGUgYERJU0FCTEVEYCBjbGFzcyBuYW1lLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjZ2V0RGlzYWJsZWRcblx0ICogQHJldHVybnMge2pRdWVyeX0galF1ZXJ5IGNvbGxlY3Rpb24gb2YgbWF0Y2hlZCBub2Rlcy5cblx0ICogQHRvZG8gUmV0dXJuIHNjb3BlIGlmIGF2YWlsYWJsZS5cblx0ICovXG5cdHRoaXMuc3RhdGUoJ2Rpc2FibGUgZGlzYWJsZWQnLCAnK0RJU0FCTEVEIC1FTkFCTEVEJyk7XG5cblx0LyoqXG5cdCAqIDxzcGFuIGNsYXNzPVwidGFnIHN0YXRlXCI+U3RhdGU8L3NwYW4+XG5cdCAqIEFkZHMgdGhlIGBTRUxFQ1RFRGAgQ1NTIGNsYXNzIG5hbWUgdG8gdGhlIHNjb3BlIG9yIHRoZSBnaXZlbiBgX3RhcmdldGAuXG5cdCAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSNzZWxlY3Rcblx0ICogQGZpcmVzIEVudGl0eSN1aS1zZWxlY3Rcblx0ICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cblx0ICogQHJldHVybnMgYHRoaXNgXG5cdCAqL1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBUZXN0cyBpZiB0aGUgc2NvcGUgb3IgZ2l2ZW4gYF90YXJnZXRgIGhhcyB0aGUgYFNFTEVDVEVEYCBjbGFzcyBuYW1lLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjc2VsZWN0ZWRcblx0ICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cblx0ICogQHJldHVybnMge0Jvb2xlYW59IFNlbGVjdGVkJ25lc3MuXG5cdCAqL1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBQcm92aWRlcyB0aGUgZWxlbWVudHMgd2l0aCB0aGUgYFNFTEVDVEVEYCBjbGFzcyBuYW1lLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjZ2V0RGlzYWJsZWRcblx0ICogQHJldHVybnMge2pRdWVyeX0galF1ZXJ5IGNvbGxlY3Rpb24gb2YgbWF0Y2hlZCBub2Rlcy5cblx0ICogQHRvZG8gUmV0dXJuIHNjb3BlIGlmIGF2YWlsYWJsZS5cblx0ICovXG5cdHRoaXMuc3RhdGUoJ3NlbGVjdCBzZWxlY3RlZCcsICcrU0VMRUNURUQnLCB7XG5cdFx0d2lsbFNldDogZnVuY3Rpb24gKF90YXJnZXQpIHtcblx0XHRcdHZhciB0YXJnZXQsICRwYXJlbnQ7XG5cdFx0XHRcblx0XHRcdHRhcmdldCA9IHJlc29sdmVUYXJnZXQuY2FsbCh0aGlzLCBfdGFyZ2V0KTtcblx0XHRcdCRwYXJlbnQgPSB0YXJnZXQucGFyZW50KCk7XG5cblx0XHRcdCRwYXJlbnQuZmluZCgnPiAuU0VMRUNURUQnKS5lYWNoKHRoaXMuYmluZChmdW5jdGlvbiAoX2luZGV4LCBfbm9kZSkge1xuXHRcdFx0XHR0aGlzLmRlc2VsZWN0KF9ub2RlKTtcblx0XHRcdH0pKTtcblx0XHRcdCRwYXJlbnQuZmluZCgnPiAuSElHSExJR0hURUQnKS5lYWNoKHRoaXMuYmluZChmdW5jdGlvbiAoX2luZGV4LCBfbm9kZSkge1xuXHRcdFx0XHR0aGlzLnVuaGlnaGxpZ2h0KF9ub2RlKTtcblx0XHRcdH0pKTtcblx0XHR9XG5cdH0pO1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBSZW1vdmVzIHRoZSBgU0VMRUNURURgIENTUyBjbGFzcyBuYW1lIGZyb20gdGhlIHNjb3BlIG9yIHRoZSBnaXZlbiBgX3RhcmdldGAuXG5cdCAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSNkZXNlbGVjdFxuXHQgKiBAZmlyZXMgRW50aXR5I3VpLWRlc2VsZWN0XG5cdCAqIEBhcmcge3N0cmluZ3xTY29wZXxqUXVlcnl8SFRNTEVsZW1lbnR9IF90YXJnZXQgLSBBIENTUyBzZWxlY3RvciwgRE9NIG5vZGUgcmVmZXJlbmNlIG9yIGNvbnRleHQgb2JqZWN0IChpLmUuIFNjb3BlL2pRdWVyeSkuXG5cdCAqIEByZXR1cm5zIGB0aGlzYFxuXHQgKi9cblx0dGhpcy5zdGF0ZSgnZGVzZWxlY3QnLCAnLVNFTEVDVEVEJyk7XG5cblx0LyoqXG5cdCAqIDxzcGFuIGNsYXNzPVwidGFnIHN0YXRlXCI+U3RhdGU8L3NwYW4+XG5cdCAqIEFkZHMgdGhlIGBISUdITElHSFRFRGAgQ1NTIGNsYXNzIG5hbWUgdG8gdGhlIHNjb3BlIG9yIHRoZSBnaXZlbiBgX3RhcmdldGAuXG5cdCAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSNoaWdobGlnaHRcblx0ICogQGZpcmVzIEVudGl0eSN1aS1oaWdobGlnaHRcblx0ICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cblx0ICogQHJldHVybnMgYHRoaXNgXG5cdCAqL1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBUZXN0cyBpZiB0aGUgc2NvcGUgb3IgZ2l2ZW4gYF90YXJnZXRgIGhhcyB0aGUgYEhJR0hMSUdIVEVEYCBjbGFzcyBuYW1lLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjaGlnaGxpZ2h0ZWRcblx0ICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cblx0ICogQHJldHVybnMge0Jvb2xlYW59IEhpZ2hsaWdodGVkJ25lc3MuXG5cdCAqL1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBQcm92aWRlcyB0aGUgZWxlbWVudHMgd2l0aCB0aGUgYEhJR0hMSUdIVEVEYCBjbGFzcyBuYW1lLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjZ2V0SGlnaGxpZ2h0ZWRcblx0ICogQHJldHVybnMge2pRdWVyeX0galF1ZXJ5IGNvbGxlY3Rpb24gb2YgbWF0Y2hlZCBub2Rlcy5cblx0ICogQHRvZG8gUmV0dXJuIHNjb3BlIGlmIGF2YWlsYWJsZS5cblx0ICovXG5cdHRoaXMuc3RhdGUoJ2hpZ2hsaWdodCBoaWdobGlnaHRlZCcsICcrSElHSExJR0hURUQnKTtcblxuXHQvKipcblx0ICogPHNwYW4gY2xhc3M9XCJ0YWcgc3RhdGVcIj5TdGF0ZTwvc3Bhbj5cblx0ICogUmVtb3ZlcyB0aGUgYEhJR0hMSUdIVEVEYCBDU1MgY2xhc3MgbmFtZSBmcm9tIHRoZSBzY29wZSBvciB0aGUgZ2l2ZW4gYF90YXJnZXRgLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjdW5oaWdobGlnaHRcblx0ICogQGZpcmVzIEVudGl0eSN1aS11bmhpZ2hsaWdodFxuXHQgKiBAYXJnIHtzdHJpbmd8U2NvcGV8alF1ZXJ5fEhUTUxFbGVtZW50fSBfdGFyZ2V0IC0gQSBDU1Mgc2VsZWN0b3IsIERPTSBub2RlIHJlZmVyZW5jZSBvciBjb250ZXh0IG9iamVjdCAoaS5lLiBTY29wZS9qUXVlcnkpLlxuXHQgKiBAcmV0dXJucyBgdGhpc2Bcblx0ICovXG5cdHRoaXMuc3RhdGUoJ3VuaGlnaGxpZ2h0JywgJy1ISUdITElHSFRFRCcpO1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBBZGRzIHRoZSBgRFJBR0dBQkxFYCBDU1MgY2xhc3MgbmFtZSB0byB0aGUgc2NvcGUgb3IgdGhlIGdpdmVuIGBfdGFyZ2V0YC5cblx0ICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I2RyYWdnYWJsZVxuXHQgKiBAZmlyZXMgRW50aXR5I3VpLWRyYWdnYWJsZVxuXHQgKiBAYXJnIHtzdHJpbmd8U2NvcGV8alF1ZXJ5fEhUTUxFbGVtZW50fSBfdGFyZ2V0IC0gQSBDU1Mgc2VsZWN0b3IsIERPTSBub2RlIHJlZmVyZW5jZSBvciBjb250ZXh0IG9iamVjdCAoaS5lLiBTY29wZS9qUXVlcnkpLlxuXHQgKiBAcmV0dXJucyBgdGhpc2Bcblx0ICovXG5cblx0LyoqXG5cdCAqIDxzcGFuIGNsYXNzPVwidGFnIHN0YXRlXCI+U3RhdGU8L3NwYW4+XG5cdCAqIFRlc3RzIGlmIHRoZSBzY29wZSBvciBnaXZlbiBgX3RhcmdldGAgaGFzIHRoZSBgRFJBR0dBQkxFYCBjbGFzcyBuYW1lLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjZHJhZ0VuYWJsZWRcblx0ICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cblx0ICogQHJldHVybnMge0Jvb2xlYW59IERyYWdnYWJsZSduZXNzLlxuXHQgKi9cblxuXHQvKipcblx0ICogPHNwYW4gY2xhc3M9XCJ0YWcgc3RhdGVcIj5TdGF0ZTwvc3Bhbj5cblx0ICogUHJvdmlkZXMgdGhlIGVsZW1lbnRzIHdpdGggdGhlIGBEUkFHR0FCTEVgIGNsYXNzIG5hbWUuXG5cdCAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSNnZXREcmFnRW5hYmxlZFxuXHQgKiBAcmV0dXJucyB7alF1ZXJ5fSBqUXVlcnkgY29sbGVjdGlvbiBvZiBtYXRjaGVkIG5vZGVzLlxuXHQgKiBAdG9kbyBSZXR1cm4gc2NvcGUgaWYgYXZhaWxhYmxlLlxuXHQgKi9cblx0dGhpcy5zdGF0ZSgnZHJhZ2dhYmxlIGRyYWdFbmFibGVkJywgJytEUkFHR0FCTEUnLCB7XG5cdFx0ZGlkU2V0OiBmdW5jdGlvbiAoX3RhcmdldCkge1xuXHRcdFx0dGhpcy50cmFuc2xhdGUoIHJlc29sdmVUYXJnZXQuY2FsbCh0aGlzLCBfdGFyZ2V0KSApO1xuXHRcdH1cblx0fSk7XG5cblx0LyoqXG5cdCAqIDxzcGFuIGNsYXNzPVwidGFnIHN0YXRlXCI+U3RhdGU8L3NwYW4+XG5cdCAqIFJlbW92ZXMgdGhlIGBEUkFHR0FCTEVgIENTUyBjbGFzcyBuYW1lIGZyb20gdGhlIHNjb3BlIG9yIHRoZSBnaXZlbiBgX3RhcmdldGAuXG5cdCAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSN1bmRyYWdnYWJsZVxuXHQgKiBAZmlyZXMgRW50aXR5I3VpLXVuZHJhZ2dhYmxlXG5cdCAqIEBhcmcge3N0cmluZ3xTY29wZXxqUXVlcnl8SFRNTEVsZW1lbnR9IF90YXJnZXQgLSBBIENTUyBzZWxlY3RvciwgRE9NIG5vZGUgcmVmZXJlbmNlIG9yIGNvbnRleHQgb2JqZWN0IChpLmUuIFNjb3BlL2pRdWVyeSkuXG5cdCAqIEByZXR1cm5zIGB0aGlzYFxuXHQgKi9cblx0dGhpcy5zdGF0ZSgndW5kcmFnZ2FibGUnLCAnLURSQUdHQUJMRScpO1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBBZGRzIHRoZSBgVFJBTlNMQVRFRGAgQ1NTIGNsYXNzIG5hbWUgdG8gdGhlIHNjb3BlIG9yIHRoZSBnaXZlbiBgX3RhcmdldGAuIFRoZSB0YXJnZXQgYWxzbyBnZXRzIGEgMmQgdHJhbnNmb3JtIGF0IHRoZSBnaXZlbiBgX3BvaW50YC5cblx0ICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I3RyYW5zbGF0ZVxuXHQgKiBAZmlyZXMgRW50aXR5I3VpLXRyYW5zbGF0ZVxuXHQgKiBAYXJnIHtzdHJpbmd8U2NvcGV8alF1ZXJ5fEhUTUxFbGVtZW50fSBfdGFyZ2V0IC0gQSBDU1Mgc2VsZWN0b3IsIERPTSBub2RlIHJlZmVyZW5jZSBvciBjb250ZXh0IG9iamVjdCAoaS5lLiBTY29wZS9qUXVlcnkpLlxuXHQgKiBAYXJnIHttb2R1bGU6dHlwZXMvRGltZW5zaW9uc35Qb2ludH0gX3BvaW50IC0gUG9pbnQgb2JqZWN0IHdpdGggY29vcmRpbmF0ZXMge3gseX0uXG5cdCAqIEByZXR1cm5zIGB0aGlzYFxuXHQgKi9cblxuXHQvKipcblx0ICogPHNwYW4gY2xhc3M9XCJ0YWcgc3RhdGVcIj5TdGF0ZTwvc3Bhbj5cblx0ICogQWRkcyB0aGUgYFRSQU5TTEFURURgIENTUyBjbGFzcyBuYW1lIHRvIHRoZSBzY29wZS4gVGhlIHNjb3BlIGFsc28gZ2V0cyBhIDJkIHRyYW5zZm9ybSBhdCB0aGUgZ2l2ZW4gYF9wb2ludGAuXG5cdCAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSN0cmFuc2xhdGVcblx0ICogQGZpcmVzIEVudGl0eSN1aS10cmFuc2xhdGVcblx0ICogQGFyZyB7bW9kdWxlOnR5cGVzL0RpbWVuc2lvbnN+UG9pbnR9IF9wb2ludCAtIFBvaW50IG9iamVjdCB3aXRoIGNvb3JkaW5hdGVzIHt4LHl9LlxuXHQgKiBAcmV0dXJucyBgdGhpc2Bcblx0ICovXG5cblx0LyoqXG5cdCAqIDxzcGFuIGNsYXNzPVwidGFnIHN0YXRlXCI+U3RhdGU8L3NwYW4+XG5cdCAqIFRlc3RzIGlmIHRoZSBzY29wZSBvciBnaXZlbiBgX3RhcmdldGAgaGFzIHRoZSBgVFJBTlNMQVRFRGAgY2xhc3MgbmFtZS5cblx0ICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I3RyYW5zbGF0ZWRcblx0ICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cblx0ICogQHJldHVybnMge0Jvb2xlYW59IFRyYW5zbGF0ZSduZXNzLlxuXHQgKi9cblxuXHQvKipcblx0ICogPHNwYW4gY2xhc3M9XCJ0YWcgc3RhdGVcIj5TdGF0ZTwvc3Bhbj5cblx0ICogUHJvdmlkZXMgdGhlIGVsZW1lbnRzIHdpdGggdGhlIGBUUkFOU0xBVEVEYCBjbGFzcyBuYW1lLlxuXHQgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjZ2V0VHJhbnNsYXRlZFxuXHQgKiBAcmV0dXJucyB7alF1ZXJ5fSBqUXVlcnkgY29sbGVjdGlvbiBvZiBtYXRjaGVkIG5vZGVzLlxuXHQgKiBAdG9kbyBSZXR1cm4gc2NvcGUgaWYgYXZhaWxhYmxlLlxuXHQgKi9cblx0dGhpcy5zdGF0ZSgndHJhbnNsYXRlIHRyYW5zbGF0ZWQnLCAnK1RSQU5TTEFURUQnLCB7XG5cdFx0d2lsbFNldDogZnVuY3Rpb24gKF90YXJnZXRfcG9pbnQsIF9wb2ludCkge1xuXHRcdFx0dmFyIHBvaW50LCB0YXJnZXQ7XG5cdFx0XHRcblx0XHRcdHRhcmdldCA9IHJlc29sdmVUYXJnZXQuY2FsbCh0aGlzLCBfdGFyZ2V0X3BvaW50KTtcblx0XHRcdHBvaW50ID0gKCF+W190YXJnZXRfcG9pbnQueCwgX3RhcmdldF9wb2ludC55XS5pbmRleE9mKHVuZGVmaW5lZCkpID8gX3RhcmdldF9wb2ludCA6IF9wb2ludDtcblxuXHRcdFx0aWYgKHBvaW50KSB7XG5cdFx0XHRcdHRhcmdldC5jc3MoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGVYKCcrcG9pbnQueCsncHgpIHRyYW5zbGF0ZVkoJytwb2ludC55KydweCknKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdC8qKlxuXHQgKiA8c3BhbiBjbGFzcz1cInRhZyBzdGF0ZVwiPlN0YXRlPC9zcGFuPlxuXHQgKiBSZW1vdmVzIHRoZSBgVFJBTlNMQVRFRGAgQ1NTIGNsYXNzIG5hbWUgYW5kIENTUyB0cmFuc2Zvcm0gZnJvbSB0aGUgc2NvcGUgb3IgdGhlIGdpdmVuIGBfdGFyZ2V0YC5cblx0ICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I3VudHJhbnNsYXRlXG5cdCAqIEBmaXJlcyBFbnRpdHkjdWktdW50cmFuc2xhdGVcblx0ICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cblx0ICogQHJldHVybnMgYHRoaXNgXG5cdCAqL1xuXHR0aGlzLnN0YXRlKCd1bnRyYW5zbGF0ZScsICctVFJBTlNMQVRFRCcsIHtcblx0XHR3aWxsU2V0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aGlzLmNzcygndHJhbnNmb3JtJywgJ25vbmUnKTtcblx0XHR9XG5cdH0pO1xuXG5cdHRoaXMuc3RhdGUoJ2dhdGUgZ2F0ZWQnLCAnK0dBVEVEJyk7XG5cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB7IEVudGl0eSwgaW52b2tlUmVzcG9uc2liaWxpdGllcyB9O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zb3VyY2UvdHlwZXMvRW50aXR5LmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"exports.__esModule = true;\\n/**\\n*  Screen\\n*  @desc Contains...\\n*  @proto Entity\\n*/\\n\\nvar _typesEntity = __webpack_require__(39);\\n\\nvar Screen = _typesEntity.Entity.extend(function () {\\n\\n\\tfunction attachBehaviorEvent() {\\n\\t\\tthis.on('behavior', function (_event) {\\n\\t\\t\\t// console.log('SCREEN GOT', _event.targetScope.id(), _event.name);\\n\\n\\t\\t\\tif (this !== _event.targetScope) {\\n\\t\\t\\t\\t_typesEntity.invokeResponsibilities(this, _event);\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.propagateBehavior(_event);\\n\\t\\t});\\n\\t}\\n\\n\\tthis.baseType = 'TYPE_SCREEN';\\n\\tthis.game = null;\\n\\tthis.screen = null;\\n\\n\\tthis.__init = function () {\\n\\t\\tthis.proto();\\n\\n\\t\\tif (this.hasClass('screen')) {\\n\\t\\t\\tattachBehaviorEvent.call(this);\\n\\t\\t}\\n\\t};\\n\\n\\tthis.start = function () {\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.stop = function () {\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.index = function () {\\n\\t\\tif (this === this.screen) return this.game.screens.indexOf(this);\\n\\t\\treturn this.$els.index();\\n\\t};\\n\\n\\tthis.next = function () {\\n\\t\\tif (!this.completed()) return false;\\n\\t\\treturn this.game.screens[this.screen.index() + 1];\\n\\t};\\n\\n\\tthis.prev = function () {\\n\\t\\treturn this.game.screens[this.screen.index() - 1];\\n\\t};\\n\\n\\tthis.quit = function () {\\n\\t\\tthis.game.quit.open();\\n\\t};\\n\\n\\tthis.nextSib = function () {\\n\\t\\treturn $.fn.next.apply(this.$els, arguments);\\n\\t};\\n\\n\\tthis.prevSib = function () {\\n\\t\\treturn $.fn.prev.apply(this.$els, arguments);\\n\\t};\\n\\n\\tthis.isLast = function () {\\n\\t\\treturn this.game.screens.indexOf(this.screen) === this.game.screens.length - 1;\\n\\t};\\n});\\n\\nexports['default'] = Screen;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvU2NyZWVuLmpzP2U0MTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozt1Q0FNK0MsRUFBYzs7QUFFN0QsSUFBSSxNQUFNLEdBQUcsb0JBQU8sTUFBTSxDQUFDLFlBQVk7O0FBRXRDLFVBQVMsbUJBQW1CLEdBQUk7QUFDL0IsTUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsVUFBVSxNQUFNLEVBQUU7OztBQUdyQyxPQUFJLElBQUksS0FBSyxNQUFNLENBQUMsV0FBVyxFQUFFO0FBQ2hDLHdDQUF1QixJQUFJLEVBQUcsTUFBTSxDQUFDLENBQUM7SUFDdEM7O0FBRUQsT0FBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0dBQy9CLENBQUMsQ0FBQztFQUNIOztBQUVELEtBQUksQ0FBQyxRQUFRLEdBQUcsYUFBYSxDQUFDO0FBQzlCLEtBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLEtBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDOztBQUVuQixLQUFJLENBQUMsTUFBTSxHQUFHLFlBQVk7QUFDekIsTUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDOztBQUViLE1BQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUM1QixzQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDL0I7RUFDRCxDQUFDOztBQUVGLEtBQUksQ0FBQyxLQUFLLEdBQUcsWUFBWTtBQUN4QixTQUFPLElBQUksQ0FBQztFQUNaLENBQUM7O0FBRUYsS0FBSSxDQUFDLElBQUksR0FBRyxZQUFZO0FBQ3ZCLFNBQU8sSUFBSSxDQUFDO0VBQ1osQ0FBQzs7QUFFRixLQUFJLENBQUMsS0FBSyxHQUFHLFlBQVk7QUFDeEIsTUFBSSxJQUFJLEtBQUssSUFBSSxDQUFDLE1BQU0sRUFBRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNqRSxTQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7RUFDekIsQ0FBQzs7QUFFRixLQUFJLENBQUMsSUFBSSxHQUFHLFlBQVk7QUFDdkIsTUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRSxPQUFPLEtBQUssQ0FBQztBQUNwQyxTQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUM7RUFDaEQsQ0FBQzs7QUFFRixLQUFJLENBQUMsSUFBSSxHQUFHLFlBQVk7QUFDdkIsU0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2hELENBQUM7O0FBRUYsS0FBSSxDQUFDLElBQUksR0FBRyxZQUFZO0FBQ3ZCLE1BQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0VBQ3RCLENBQUM7O0FBRUYsS0FBSSxDQUFDLE9BQU8sR0FBRyxZQUFZO0FBQzFCLFNBQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7RUFDN0MsQ0FBQzs7QUFFRixLQUFJLENBQUMsT0FBTyxHQUFHLFlBQVk7QUFDMUIsU0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztFQUM3QyxDQUFDOztBQUVGLEtBQUksQ0FBQyxNQUFNLEdBQUcsWUFBWTtBQUN6QixTQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQztFQUM3RSxDQUFDO0NBRUYsQ0FBQyxDQUFDOztxQkFFWSxNQUFNIiwiZmlsZSI6IjQwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4qICBTY3JlZW5cbiogIEBkZXNjIENvbnRhaW5zLi4uXG4qICBAcHJvdG8gRW50aXR5XG4qL1xuXG5pbXBvcnQgeyBFbnRpdHksIGludm9rZVJlc3BvbnNpYmlsaXRpZXMgfSBmcm9tICd0eXBlcy9FbnRpdHknO1xuXG52YXIgU2NyZWVuID0gRW50aXR5LmV4dGVuZChmdW5jdGlvbiAoKSB7XG5cblx0ZnVuY3Rpb24gYXR0YWNoQmVoYXZpb3JFdmVudCAoKSB7XG5cdFx0dGhpcy5vbignYmVoYXZpb3InLCBmdW5jdGlvbiAoX2V2ZW50KSB7XG5cdFx0XHQvLyBjb25zb2xlLmxvZygnU0NSRUVOIEdPVCcsIF9ldmVudC50YXJnZXRTY29wZS5pZCgpLCBfZXZlbnQubmFtZSk7XG5cblx0XHRcdGlmICh0aGlzICE9PSBfZXZlbnQudGFyZ2V0U2NvcGUpIHtcblx0XHRcdFx0aW52b2tlUmVzcG9uc2liaWxpdGllcyh0aGlzLCAgX2V2ZW50KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5wcm9wYWdhdGVCZWhhdmlvcihfZXZlbnQpO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHR0aGlzLmJhc2VUeXBlID0gJ1RZUEVfU0NSRUVOJztcblx0dGhpcy5nYW1lID0gbnVsbDtcblx0dGhpcy5zY3JlZW4gPSBudWxsO1xuXG5cdHRoaXMuX19pbml0ID0gZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMucHJvdG8oKTtcblxuXHRcdGlmICh0aGlzLmhhc0NsYXNzKCdzY3JlZW4nKSkge1xuXHRcdFx0YXR0YWNoQmVoYXZpb3JFdmVudC5jYWxsKHRoaXMpO1xuXHRcdH1cblx0fTtcblxuXHR0aGlzLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdHRoaXMuc3RvcCA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHR0aGlzLmluZGV4ID0gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0aGlzID09PSB0aGlzLnNjcmVlbikgcmV0dXJuIHRoaXMuZ2FtZS5zY3JlZW5zLmluZGV4T2YodGhpcyk7XG5cdFx0cmV0dXJuIHRoaXMuJGVscy5pbmRleCgpO1xuXHR9O1xuXG5cdHRoaXMubmV4dCA9IGZ1bmN0aW9uICgpIHtcblx0XHRpZiAoIXRoaXMuY29tcGxldGVkKCkpIHJldHVybiBmYWxzZTtcblx0XHRyZXR1cm4gdGhpcy5nYW1lLnNjcmVlbnNbdGhpcy5zY3JlZW4uaW5kZXgoKSsxXTtcblx0fTtcblxuXHR0aGlzLnByZXYgPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2FtZS5zY3JlZW5zW3RoaXMuc2NyZWVuLmluZGV4KCktMV07XG5cdH07XG5cblx0dGhpcy5xdWl0ID0gZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMuZ2FtZS5xdWl0Lm9wZW4oKTtcblx0fTtcblxuXHR0aGlzLm5leHRTaWIgPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuICQuZm4ubmV4dC5hcHBseSh0aGlzLiRlbHMsIGFyZ3VtZW50cyk7XG5cdH07XG5cblx0dGhpcy5wcmV2U2liID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiAkLmZuLnByZXYuYXBwbHkodGhpcy4kZWxzLCBhcmd1bWVudHMpO1xuXHR9O1xuXG5cdHRoaXMuaXNMYXN0ID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLmdhbWUuc2NyZWVucy5pbmRleE9mKHRoaXMuc2NyZWVuKSA9PT0gdGhpcy5nYW1lLnNjcmVlbnMubGVuZ3RoLTE7XG5cdH07XG5cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBTY3JlZW47XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NvdXJjZS90eXBlcy9TY3JlZW4uanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _Object$defineProperties = __webpack_require__(6)['default'];\\n\\nvar _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Node scope for the top level game node.\\n */\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _playGame = __webpack_require__(16);\\n\\nvar _playGame2 = _interopRequireDefault(_playGame);\\n\\nvar _typesGlobalScope = __webpack_require__(22);\\n\\nvar _typesGlobalScope2 = _interopRequireDefault(_typesGlobalScope);\\n\\nvar _typesScreen = __webpack_require__(40);\\n\\nvar _typesScreen2 = _interopRequireDefault(_typesScreen);\\n\\nvar _typesCollection = __webpack_require__(21);\\n\\nvar _typesCollection2 = _interopRequireDefault(_typesCollection);\\n\\nvar _typesScope = __webpack_require__(23);\\n\\nvar _typesDimensions = __webpack_require__(5);\\n\\nvar Game = _typesGlobalScope2['default'].extend(function () {\\n\\n\\tvar Viewport, screenPrototype;\\n\\n\\t/**\\n  * Scales the game view to fill the browser window.\\n  */\\n\\tfunction scaleGame() {\\n\\t\\tvar vpSize, gameDimensions, width, height, zoom;\\n\\n\\t\\tvpSize = this.viewport.size();\\n\\t\\tgameDimensions = _playGame2['default'].config('dimensions');\\n\\t\\twidth = gameDimensions.width || this.width();\\n\\t\\theight = Math.round(gameDimensions.width / gameDimensions.ratio);\\n\\t\\tzoom = this.viewport.width / width;\\n\\n\\t\\tif (Math.round(height * zoom) > this.viewport.height) {\\n\\t\\t\\tzoom = this.viewport.height / height;\\n\\t\\t}\\n\\n\\t\\tthis.css({\\n\\t\\t\\twidth: width,\\n\\t\\t\\tzoom: zoom\\n\\t\\t});\\n\\n\\t\\tthis.zoom = zoom;\\n\\t}\\n\\n\\tscreenPrototype = _typesScreen2['default'];\\n\\n\\tthis.baseType = 'TYPE_GAME';\\n\\tthis.screens = null;\\n\\tthis.zoom = 1;\\n\\tthis.keyCommands = null;\\n\\tthis.demoMode = false;\\n\\tthis.viewport = new function () {\\n\\t\\tvar vp, $html, RESIZE_HANDLERS;\\n\\n\\t\\tvp = this;\\n\\t\\tRESIZE_HANDLERS = [];\\n\\t\\t$html = $('html');\\n\\t\\t$html.addClass(this.orientation);\\n\\n\\t\\t$(window).on('resize', function (_event) {\\n\\t\\t\\tif (!$html.hasClass(vp.orientation)) {\\n\\t\\t\\t\\t$html.removeClass('squareish landscape protrait').addClass(vp.orientation);\\n\\t\\t\\t}\\n\\n\\t\\t\\tRESIZE_HANDLERS.forEach(function (_handler) {\\n\\t\\t\\t\\t_handler(_event);\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\tthis.LANDSCAPE = 'landscape';\\n\\t\\tthis.PROTRAIT = 'protrait';\\n\\t\\tthis.SQUAREISH = 'squareish';\\n\\n\\t\\tthis.size = function () {\\n\\t\\t\\treturn _typesDimensions.Size.create().set(window.innerWidth, window.innerHeight);\\n\\t\\t};\\n\\n\\t\\t_Object$defineProperties(this, {\\n\\t\\t\\twidth: {\\n\\t\\t\\t\\tget: function get() {\\n\\t\\t\\t\\t\\treturn window.innerWidth;\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\tconfigurable: false\\n\\t\\t\\t},\\n\\n\\t\\t\\theight: {\\n\\t\\t\\t\\tget: function get() {\\n\\t\\t\\t\\t\\treturn window.innerHeight;\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\tconfigurable: false\\n\\t\\t\\t},\\n\\n\\t\\t\\torientation: {\\n\\t\\t\\t\\tget: function get() {\\n\\t\\t\\t\\t\\tvar ratio = this.size().ratio();\\n\\n\\t\\t\\t\\t\\tswitch (true) {\\n\\t\\t\\t\\t\\t\\tcase ratio > 0.9 && ratio < 1.1:\\n\\t\\t\\t\\t\\t\\t\\treturn 'squareish';\\n\\t\\t\\t\\t\\t\\tcase ratio > 1.1:\\n\\t\\t\\t\\t\\t\\t\\treturn 'landscape';\\n\\t\\t\\t\\t\\t\\tcase ratio < 0.9:\\n\\t\\t\\t\\t\\t\\t\\treturn 'protrait';\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tthis.onResize = function (_handler) {\\n\\t\\t\\tRESIZE_HANDLERS.push(_handler);\\n\\t\\t};\\n\\t}();;\\n\\n\\tthis.willInit = function () {\\n\\t\\tthis.addClass('pl-game');\\n\\n\\t\\tscaleGame.call(this);\\n\\t\\tthis.captureScreens();\\n\\t\\tthis.watchAudio();\\n\\n\\t\\tthis.viewport.onResize(this.bind(scaleGame));\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * Watch for specific keys or combination of keys. NOTE: meta key commands DO NOT support chords (i.e. meta+K,B).\\n  * ### Key Names\\n  * - *meta*: Command (aka Apple ⌘ or win)\\n  * - *alt*: Alt (aka Option ⌥)\\n  * - *shift*: Shift ⇪\\n  * - *ctrl*: Control ^\\n  * - *enter*: Enter or Return\\n  * - *esc*: Escape\\n  * - *left*: Left arrow\\n  * - *up*: Up arrow\\n  * - *right*: Right arrow\\n  * - *down*: Down arrow\\n  *\\n  * ### Example\\n  * ```javascript\\n  * // Overriding print.\\n  * this.game.onKeys('cmd+P', printHandler);\\n  *\\n  * // Holding Control and pressing \\\"K\\\" then \\\"B\\\"\\n  * this.game.onKeys('ctrl+K,B', handler);\\n  * ```\\n  * @arg {string} _commands - The key or sequence of keys.\\n  * @arg {function} _handler - Your event handler for when you key pattern is matched.\\n  * @returns `this`\\n  */\\n\\tthis.onKeys = function (_commands, _handler) {\\n\\t\\tvar sequence, chords, modifiers, map;\\n\\n\\t\\tif (!this.keyCommands) {\\n\\t\\t\\tthis.keyCommands = {};\\n\\n\\t\\t\\tmap = {\\n\\t\\t\\t\\t13: 'enter',\\n\\t\\t\\t\\t16: 'shift',\\n\\t\\t\\t\\t17: 'ctrl',\\n\\t\\t\\t\\t18: 'alt',\\n\\t\\t\\t\\t27: 'esc',\\n\\t\\t\\t\\t37: 'left',\\n\\t\\t\\t\\t38: 'up',\\n\\t\\t\\t\\t39: 'right',\\n\\t\\t\\t\\t40: 'down',\\n\\t\\t\\t\\t91: 'meta',\\n\\t\\t\\t\\tenter: 13,\\n\\t\\t\\t\\tshift: 16,\\n\\t\\t\\t\\tctrl: 17,\\n\\t\\t\\t\\talt: 18,\\n\\t\\t\\t\\tesc: 27,\\n\\t\\t\\t\\tleft: 37,\\n\\t\\t\\t\\tup: 38,\\n\\t\\t\\t\\tright: 39,\\n\\t\\t\\t\\tdown: 40,\\n\\t\\t\\t\\tmeta: 91\\n\\t\\t\\t};\\n\\n\\t\\t\\tmodifiers = [16, 17, 18, 91];\\n\\t\\t\\tsequence = [];\\n\\t\\t\\tchords = [];\\n\\n\\t\\t\\tthis.on('keydown', function (_event) {\\n\\t\\t\\t\\tvar modifier, key, eventMods, currentMods, command, handler;\\n\\n\\t\\t\\t\\tmodifier = !! ~modifiers.indexOf(_event.keyCode) && map[_event.keyCode];\\n\\t\\t\\t\\tkey = modifier ? modifier : map[_event.keyCode] || String.fromCharCode(_event.keyCode);\\n\\t\\t\\t\\teventMods = [_event.shiftKey, _event.ctrlKey, _event.altKey, _event.metaKey];\\n\\t\\t\\t\\tcurrentMods = [];\\n\\n\\t\\t\\t\\t// Collect the modifiers the event says are still down.\\n\\t\\t\\t\\teventMods.forEach(function (_modifierDown, _index) {\\n\\t\\t\\t\\t\\t// use the modifier name\\n\\t\\t\\t\\t\\tif (_modifierDown) currentMods.push(map[modifiers[_index]]);\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\t// Don't add keys we already have during rapid-fire events\\n\\t\\t\\t\\tif (~chords.indexOf(key) || ~sequence.indexOf(key)) return;\\n\\n\\t\\t\\t\\t// Construct the command\\n\\t\\t\\t\\tcommand = chords.length ? (chords.push(key), chords.join(',')) : (sequence.push(key), sequence.join('+'));\\n\\n\\t\\t\\t\\thandler = this.keyCommands[command];\\n\\n\\t\\t\\t\\tif (handler) {\\n\\t\\t\\t\\t\\thandler.call(this, _event, command);\\n\\t\\t\\t\\t\\t// Keep current modifiers.\\n\\t\\t\\t\\t\\tsequence = currentMods.map(function (_key, _index) {\\n\\t\\t\\t\\t\\t\\tvar key = sequence[_index];\\n\\t\\t\\t\\t\\t\\treturn currentMods[currentMods.indexOf(key)];\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\tchords = [];\\n\\n\\t\\t\\t\\t\\t// Override original key command (i.e. meta+Q).\\n\\t\\t\\t\\t\\t_event.preventDefault();\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\n\\t\\t\\tthis.on('keyup', function (_event) {\\n\\t\\t\\t\\tvar key, index, modifier, eventMods, currentMods;\\n\\n\\t\\t\\t\\tkey = modifier ? modifier : map[_event.keyCode] || String.fromCharCode(_event.keyCode);\\n\\t\\t\\t\\tindex = sequence.indexOf(key);\\n\\t\\t\\t\\tmodifier = !! ~modifiers.indexOf(_event.keyCode) && map[_event.keyCode];\\n\\t\\t\\t\\t// Follows the same index order as \\\"modifiers\\\" [16, 17, 18, 91]\\n\\t\\t\\t\\teventMods = [_event.shiftKey, _event.ctrlKey, _event.altKey, _event.metaKey];\\n\\t\\t\\t\\tcurrentMods = [];\\n\\n\\t\\t\\t\\t// Collect the modifiers the event says are still down.\\n\\t\\t\\t\\teventMods.forEach(function (_modifierDown, _index) {\\n\\t\\t\\t\\t\\t// use the modifier name\\n\\t\\t\\t\\t\\tif (_modifierDown) currentMods.push(map[modifiers[_index]]);\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\t// If the key released is a modifier...\\n\\t\\t\\t\\tif (key === modifier) {\\n\\t\\t\\t\\t\\t// ...keep current modifiers...\\n\\t\\t\\t\\t\\tsequence = currentMods.map(function (_key, _index) {\\n\\t\\t\\t\\t\\t\\tvar key = sequence[_index];\\n\\t\\t\\t\\t\\t\\treturn currentMods[currentMods.indexOf(key)];\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t// ...clear registered chords.\\n\\t\\t\\t\\t\\tchords = [];\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// If we had pressed more than one key...\\n\\t\\t\\t\\t\\tif (sequence.length > 1) {\\n\\t\\t\\t\\t\\t\\t// Check if the first is a modifier then switch to chord capturing\\n\\t\\t\\t\\t\\t\\tif (~modifiers.indexOf(map[sequence[0]])) {\\n\\t\\t\\t\\t\\t\\t\\tchords.push(sequence.join('+'));\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tif (~index) sequence.splice(index, 1);\\n\\t\\t\\t\\t\\tif (!sequence.length) chords = [];\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tthis.keyCommands[_commands] = _handler;\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.screen = function (_id, _implementation) {\\n\\t\\tvar prototype, selector, screenSelector, instance;\\n\\n\\t\\tif (arguments.length === 1 && typeof _id === 'function') {\\n\\t\\t\\tscreenPrototype = _typesScreen2['default'].extend(_id);\\n\\t\\t\\treturn this;\\n\\t\\t}\\n\\n\\t\\tif (!this.hasOwnProperty('screens')) this.screens = _typesCollection2['default'].create();\\n\\n\\t\\tif (this.hasOwnProperty('$els')) {\\n\\t\\t\\tdebugger;\\n\\t\\t\\tscreenSelector = pl.game.config('screenSelector');\\n\\t\\t\\tprototype = screenPrototype.isPrototypeOf(this) ? this : screenPrototype;\\n\\t\\t\\tselector = typeof _id === 'number' ? screenSelector + ':nth-child(' + (_id + 1) + ')' : '#' + _id;\\n\\t\\t\\tinstance = prototype.extend(_implementation).initialize(this.find(selector));\\n\\n\\t\\t\\tinstance.screen = instance;\\n\\t\\t\\tif (!instance.game) {\\n\\t\\t\\t\\tinstance.game = instance.closest('.pl-game').scope();\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tthis.screens.push({\\n\\t\\t\\t\\tindex: typeof _id === 'number' ? _id : null,\\n\\t\\t\\t\\tname: typeof _id === 'string' ? _id : null,\\n\\t\\t\\t\\timplementation: _implementation\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.captureScreens = function () {\\n\\t\\tvar screenSelector, prototype, collection;\\n\\n\\t\\tif (!this.hasOwnProperty('screens')) return this;\\n\\n\\t\\tscreenSelector = pl.game.config('screenSelector');\\n\\t\\tprototype = screenPrototype.isPrototypeOf(this) ? this : screenPrototype;\\n\\t\\tcollection = [];\\n\\n\\t\\tthis.findOwn(screenSelector).each(this.bind(function (_index, _node) {\\n\\t\\t\\tvar $node, screen, record, key, id, index, component;\\n\\n\\t\\t\\t$node = $(_node);\\n\\t\\t\\tid = $node.id();\\n\\t\\t\\tkey = id ? 'name' : (id = _index, 'index');\\n\\t\\t\\trecord = this.screens.get(id, key);\\n\\t\\t\\tcomponent = $node.attr('pl-component');\\n\\t\\t\\tscreen = _typesScope.createEntity.call(prototype, $node, record && record.implementation);\\n\\t\\t\\tscreen.screen = screen;\\n\\t\\t\\tscreen.game = this;\\n\\n\\t\\t\\tif ($node.attr('pl-skip') == null) collection.push(screen);\\n\\n\\t\\t\\tif (key === 'name' || component) {\\n\\t\\t\\t\\t_util2['default'].assignRef(this, _util2['default'].transformId(key === 'name' && id || component, true), screen);\\n\\t\\t\\t}\\n\\t\\t}));\\n\\n\\t\\tif (collection.length) this.screens = collection;\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.watchAudio = function () {\\n\\t\\tvar playing;\\n\\n\\t\\tfunction deQueue(_scope, _item) {\\n\\t\\t\\t[_scope, _scope.screen].forEach(function (_scope) {\\n\\t\\t\\t\\tif (_scope.requiredQueue && _scope.isMemberSafe('requiredQueue') && _scope.requiredQueue.has(_item)) {\\n\\t\\t\\t\\t\\t_scope.requiredQueue.ready(_item);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tplaying = _typesCollection2['default'].create();\\n\\n\\t\\tthis.on('audio-play', function (_event) {\\n\\t\\t\\tvar current, bgMusic;\\n\\n\\t\\t\\tif (_event.audioType !== 'sfx') {\\n\\t\\t\\t\\tcurrent = playing.filter(_event.audioType, 'type');\\n\\t\\t\\t\\tbgMusic = playing.filter('background', 'type');\\n\\n\\t\\t\\t\\tif (current) {\\n\\t\\t\\t\\t\\tcurrent.forEach(function (_record) {\\n\\t\\t\\t\\t\\t\\t_record.audio.pause();\\n\\t\\t\\t\\t\\t\\t_record.audio.currentTime = 0;\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (_event.audioType === 'voice-over') {\\n\\t\\t\\t\\t\\tif (bgMusic) bgMusic.forEach(function (_record) {\\n\\t\\t\\t\\t\\t\\t_record.audio.volume = 0.2;\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tplaying.push({\\n\\t\\t\\t\\taudio: _event.target,\\n\\t\\t\\t\\ttype: _event.audioType\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\tthis.on('audio-ended audio-pause', function (_event) {\\n\\t\\t\\tvar current, scope, bgMusic;\\n\\n\\t\\t\\tcurrent = playing.get(_event.target, 'audio');\\n\\t\\t\\tscope = $(_event.target).scope();\\n\\t\\t\\tbgMusic = playing.filter('background', 'type');\\n\\n\\t\\t\\tplaying.remove(current);\\n\\t\\t\\tdeQueue(scope, _event.target);\\n\\n\\t\\t\\tif (_event.audioType === 'voice-over' && !playing.get('voice-over', 'type')) {\\n\\t\\t\\t\\tif (bgMusic) bgMusic.forEach(function (_record) {\\n\\t\\t\\t\\t\\t_record.audio.volume = 1;\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t};\\n\\n\\tthis.progress = function () {\\n\\t\\treturn {\\n\\t\\t\\tcurrentScreen: this.currentScreen().index()\\n\\t\\t};\\n\\t};\\n\\n\\tthis.currentScreen = function () {\\n\\t\\treturn this.findOwn('.screen.OPEN').not('#quit').scope();\\n\\t};\\n\\n\\tthis.flip = function () {\\n\\t\\tconsole.log('THATS A FLIP!');\\n\\t\\t_playGame2['default'].report.flip(this);\\n\\t};\\n\\n\\tthis.exit = function () {\\n\\t\\tconsole.log('GOODBYE!');\\n\\t\\t_playGame2['default'].report.exit(this);\\n\\t};\\n\\n\\t/**\\n  * Demo mode key command\\n  */\\n\\tthis.onKeys('ctrl+D,M', function () {\\n\\t\\t// toggle\\n\\t\\tthis.demoMode = !this.demoMode;\\n\\t\\tthis[this.demoMode ? 'addClass' : 'removeClass']('DEMO');\\n\\n\\t\\tconsole.info(this.id(), 'is now ' + (this.demoMode ? 'in' : 'out of') + ' Demo Mode.');\\n\\t});\\n\\n\\t/**\\n  * Keyboard screen navigation\\n  */\\n\\tthis.onKeys('left', function () {\\n\\t\\tvar current;\\n\\n\\t\\tcurrent = this.currentScreen();\\n\\n\\t\\tif (current) current.prev();\\n\\t});\\n\\n\\tthis.onKeys('right', function () {\\n\\t\\tvar current;\\n\\n\\t\\tcurrent = this.currentScreen();\\n\\n\\t\\tif (current) current.next();\\n\\t});\\n});\\n\\nexports['default'] = Game;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * API for communicaion between a game and the platform.\\n *\\n * @module\\n */\\n\\nvar _util = __webpack_require__(10);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar platform = new function () {\\n\\n\\tfunction createEvent(_name, _props) {\\n\\t\\tvar eventObject;\\n\\n\\t\\teventObject = _util2['default'].mixin(new Event('game-event', { bubbles: true, cancelable: false }), {\\n\\t\\t\\tname: _name,\\n\\t\\t\\trespond: function respond(_data) {\\n\\t\\t\\t\\tvar platformEvent;\\n\\n\\t\\t\\t\\tplatformEvent = $.Event('platform-event', {\\n\\t\\t\\t\\t\\tname: _name,\\n\\t\\t\\t\\t\\tgameData: _data\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\tpl.game.trigger(platformEvent);\\n\\t\\t\\t}\\n\\t\\t}, _props);\\n\\n\\t\\treturn eventObject;\\n\\t}\\n\\n\\tthis.EVENT_INIT = 'init';\\n\\tthis.EVENT_SAVE = 'save';\\n\\tthis.EVENT_EXIT = 'exit';\\n\\tthis.EVENT_FLIPPED = 'flipped';\\n\\n\\tthis.emit = function (_name) {\\n\\t\\twindow.frameElement.dispatchEvent(createEvent(_name));\\n\\t};\\n\\n\\tthis.saveGameState = function (_data) {\\n\\t\\twindow.frameElement.dispatchEvent(createEvent(this.EVENT_SAVE, {\\n\\t\\t\\tgameData: _data\\n\\t\\t}));\\n\\t};\\n}();\\n\\nexports['default'] = platform;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvcGxhdGZvcm0uanM/NWQxOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Z0NBS2lCLEVBQU07Ozs7QUFFdkIsSUFBSSxRQUFRLEdBQUcsSUFBSyxZQUFZOztBQUUvQixVQUFTLFdBQVcsQ0FBRSxLQUFLLEVBQUUsTUFBTSxFQUFFO0FBQ3BDLE1BQUksV0FBVyxDQUFDOztBQUVoQixhQUFXLEdBQUcsa0JBQUssS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLFlBQVksRUFBRSxFQUFDLE9BQU8sRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUU7QUFDbkYsT0FBSSxFQUFFLEtBQUs7QUFDWCxVQUFPLEVBQUUsaUJBQVUsS0FBSyxFQUFFO0FBQ3pCLFFBQUksYUFBYSxDQUFDOztBQUVsQixpQkFBYSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUU7QUFDekMsU0FBSSxFQUFFLEtBQUs7QUFDWCxhQUFRLEVBQUUsS0FBSztLQUNmLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMvQjtHQUNELEVBQUUsTUFBTSxDQUFDLENBQUM7O0FBRVgsU0FBTyxXQUFXLENBQUM7RUFDbkI7O0FBRUQsS0FBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7QUFDekIsS0FBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7QUFDekIsS0FBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7QUFDekIsS0FBSSxDQUFDLGFBQWEsR0FBRyxTQUFTLENBQUM7O0FBRS9CLEtBQUksQ0FBQyxJQUFJLEdBQUcsVUFBVSxLQUFLLEVBQUU7QUFDNUIsUUFBTSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDdEQsQ0FBQzs7QUFFRixLQUFJLENBQUMsYUFBYSxHQUFHLFVBQVUsS0FBSyxFQUFFO0FBQ3JDLFFBQU0sQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO0FBQzlELFdBQVEsRUFBRSxLQUFLO0dBQ2YsQ0FBQyxDQUFDLENBQUM7RUFDSixDQUFDO0NBRUYsRUFBQyxDQUFDOztxQkFFWSxRQUFRIiwiZmlsZSI6IjQyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBUEkgZm9yIGNvbW11bmljYWlvbiBiZXR3ZWVuIGEgZ2FtZSBhbmQgdGhlIHBsYXRmb3JtLlxuICpcbiAqIEBtb2R1bGVcbiAqL1xuaW1wb3J0IHV0aWwgZnJvbSAndXRpbCc7XG5cbnZhciBwbGF0Zm9ybSA9IG5ldyAoZnVuY3Rpb24gKCkge1xuXG5cdGZ1bmN0aW9uIGNyZWF0ZUV2ZW50IChfbmFtZSwgX3Byb3BzKSB7XG5cdFx0dmFyIGV2ZW50T2JqZWN0O1xuXG5cdFx0ZXZlbnRPYmplY3QgPSB1dGlsLm1peGluKG5ldyBFdmVudCgnZ2FtZS1ldmVudCcsIHtidWJibGVzOnRydWUsIGNhbmNlbGFibGU6ZmFsc2V9KSwge1xuXHRcdFx0bmFtZTogX25hbWUsXG5cdFx0XHRyZXNwb25kOiBmdW5jdGlvbiAoX2RhdGEpIHtcblx0XHRcdFx0dmFyIHBsYXRmb3JtRXZlbnQ7XG5cblx0XHRcdFx0cGxhdGZvcm1FdmVudCA9ICQuRXZlbnQoJ3BsYXRmb3JtLWV2ZW50Jywge1xuXHRcdFx0XHRcdG5hbWU6IF9uYW1lLFxuXHRcdFx0XHRcdGdhbWVEYXRhOiBfZGF0YVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0XG5cdFx0XHRcdHBsLmdhbWUudHJpZ2dlcihwbGF0Zm9ybUV2ZW50KTtcblx0XHRcdH1cblx0XHR9LCBfcHJvcHMpO1xuXG5cdFx0cmV0dXJuIGV2ZW50T2JqZWN0O1xuXHR9XG5cblx0dGhpcy5FVkVOVF9JTklUID0gJ2luaXQnO1xuXHR0aGlzLkVWRU5UX1NBVkUgPSAnc2F2ZSc7XG5cdHRoaXMuRVZFTlRfRVhJVCA9ICdleGl0Jztcblx0dGhpcy5FVkVOVF9GTElQUEVEID0gJ2ZsaXBwZWQnO1xuXG5cdHRoaXMuZW1pdCA9IGZ1bmN0aW9uIChfbmFtZSkge1xuXHRcdHdpbmRvdy5mcmFtZUVsZW1lbnQuZGlzcGF0Y2hFdmVudChjcmVhdGVFdmVudChfbmFtZSkpO1xuXHR9O1xuXG5cdHRoaXMuc2F2ZUdhbWVTdGF0ZSA9IGZ1bmN0aW9uIChfZGF0YSkge1xuXHRcdHdpbmRvdy5mcmFtZUVsZW1lbnQuZGlzcGF0Y2hFdmVudChjcmVhdGVFdmVudCh0aGlzLkVWRU5UX1NBVkUsIHtcblx0XHRcdGdhbWVEYXRhOiBfZGF0YVxuXHRcdH0pKTtcblx0fTtcblxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHBsYXRmb3JtO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zb3VyY2UvcGxhdGZvcm0uanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ }\n/******/ ]);//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vfi9qcy1pbnRlcmFjdGl2ZS1saWJyYXJ5L2J1aWxkL3BsYXkuanM/ODE0NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2QkFBNkI7QUFDN0I7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7QUFHQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQSxzRUFBc0UsOExBQThMLHdDQUF3QywrQ0FBK0MsNERBQTRELGlDQUFpQyxHQUFHLHVGQUF1Riw4R0FBOEcsMkNBQTJDOztBQUUzcUIsT0FBTztBQUNQO0FBQ0E7O0FBRUEsK0NBQStDLDJDQUEyQzs7QUFFMUYsT0FBTztBQUNQO0FBQ0E7O0FBRUEsc0JBQXNCLDhCQUE4QixzQ0FBc0MsMENBQTBDLHdCQUF3QixJQUFJLDJDQUEyQzs7QUFFM00sT0FBTztBQUNQO0FBQ0E7O0FBRUEsc0VBQXNFLGtPQUFrTyw2Q0FBNkMseURBQXlELDhEQUE4RCw2QkFBNkIsdUJBQXVCLDBIQUEwSCxZQUFZLGdGQUFnRixpQkFBaUIsb0JBQW9CLCtCQUErQix5QkFBeUIsMEJBQTBCLHVDQUF1Qyx1QkFBdUIsOERBQThELFNBQVMsd0NBQXdDLE9BQU8sRUFBRSxzREFBc0QsTUFBTSxnTUFBZ00sT0FBTyxxREFBcUQsT0FBTyxzREFBc0QsK0JBQStCLG9FQUFvRSxnQ0FBZ0Msc0JBQXNCLFNBQVMsaUhBQWlILG1DQUFtQyxTQUFTLE9BQU8sZ0NBQWdDLFNBQVMsT0FBTyxrRkFBa0YsTUFBTSxnSkFBZ0osT0FBTyxrS0FBa0ssMkJBQTJCLDZDQUE2QywyQkFBMkIsd0ZBQXdGLG9EQUFvRCxNQUFNLGdLQUFnSyxPQUFPLCtGQUErRixxQkFBcUIsNkdBQTZHLGtCQUFrQiw2REFBNkQsZ0ZBQWdGLHdFQUF3RSxNQUFNLDBJQUEwSSxvQkFBb0Isb0ZBQW9GLE1BQU0sK0NBQStDLGlCQUFpQixnQ0FBZ0MsK0JBQStCLDhFQUE4RSxPQUFPLE9BQU8sMERBQTBELG9CQUFvQix3RkFBd0YsRUFBRSx3QkFBd0IsT0FBTyxNQUFNLDRJQUE0SSxPQUFPLGdDQUFnQyxPQUFPLGdDQUFnQyxPQUFPLGdDQUFnQyxPQUFPLGdDQUFnQyxPQUFPLHdDQUF3QyxPQUFPLDRDQUE0QyxPQUFPLHFKQUFxSixPQUFPLHdDQUF3QywwQkFBMEIsOENBQThDLGdDQUFnQyxrQ0FBa0MseUNBQXlDLDZCQUE2Qix3RkFBd0YscUJBQXFCLHFDQUFxQyw0QkFBNEIsNEJBQTRCLDJCQUEyQixvQkFBb0IsVUFBVSxnRUFBZ0UsZUFBZSw0QkFBNEIsYUFBYSxLQUFLLFdBQVcsa0NBQWtDLGlEQUFpRCwwQkFBMEIsU0FBUyxtQkFBbUIsT0FBTyxxREFBcUQsOENBQThDLHNCQUFzQixNQUFNLHlJQUF5SSxNQUFNLDBCQUEwQixJQUFJLGdCQUFnQixNQUFNLGtJQUFrSSxPQUFPLDhCQUE4QixPQUFPLGtDQUFrQyxNQUFNLGdEQUFnRCx3QkFBd0Isa0NBQWtDLDhDQUE4QyxnQ0FBZ0MsZ0NBQWdDLHdDQUF3QyxTQUFTLE9BQU8sZ0RBQWdELDhDQUE4Qyw2Q0FBNkMsU0FBUyxPQUFPLHFCQUFxQixNQUFNLEdBQUcsYUFBYSwyQ0FBMkM7O0FBRWwrTCxPQUFPO0FBQ1A7QUFDQTs7QUFFQSx3RUFBd0UsbUVBQW1FLDhCQUE4QixvbUJBQW9tQixzSEFBc0gsOElBQThJLHlPQUF5TywwRkFBMEYsZ1NBQWdTLHFFQUFxRSwrQkFBK0IsMkRBQTJELDZGQUE2RixvTEFBb0wsa0JBQWtCLCtHQUErRyxzQ0FBc0MsK0NBQStDLFlBQVksYUFBYSx5Q0FBeUMsdUNBQXVDLDBEQUEwRCxLQUFLLHFGQUFxRix3Q0FBd0MsdURBQXVELE9BQU8sS0FBSyxrQkFBa0IsSUFBSSxpZEFBaWQsb0JBQW9CLDZCQUE2Qiw0QkFBNEIsMENBQTBDLG1EQUFtRCxNQUFNLGdGQUFnRixVQUFVLG9EQUFvRCxtQkFBbUIsZ0NBQWdDLDJFQUEyRSx3QkFBd0IsTUFBTSxrRkFBa0YsT0FBTyxvQ0FBb0MsT0FBTyw2Q0FBNkMsVUFBVSwrQ0FBK0MsZUFBZSxnQ0FBZ0Msb0JBQW9CLG9CQUFvQixPQUFPLDRCQUE0QixpQkFBaUIsb0JBQW9CLE9BQU8sT0FBTyxxQkFBcUIsT0FBTywyREFBMkQsTUFBTSxrRkFBa0YsT0FBTyxvQ0FBb0MsT0FBTyw2Q0FBNkMsVUFBVSwrQ0FBK0MsZUFBZSxnQ0FBZ0Msb0JBQW9CLG9CQUFvQixPQUFPLDRCQUE0QixpQkFBaUIsb0JBQW9CLE9BQU8sT0FBTyxxQkFBcUIsT0FBTywyREFBMkQsTUFBTSxnRkFBZ0YsT0FBTyxzQ0FBc0MsT0FBTyw2Q0FBNkMsVUFBVSxtREFBbUQsaUdBQWlHLE1BQU0sK0RBQStELE9BQU8seU1BQXlNLFVBQVUsdUNBQXVDLDZDQUE2QyxpSUFBaUksTUFBTSxrRkFBa0YsVUFBVSx1Q0FBdUMscUVBQXFFLE1BQU0sb0ZBQW9GLFVBQVUseUNBQXlDLHlFQUF5RSxNQUFNLDZFQUE2RSxPQUFPLGlEQUFpRCxPQUFPLDRDQUE0QywrQ0FBK0MsbUNBQW1DLE1BQU0scUdBQXFHLGlHQUFpRyxZQUFZLFNBQVMsa0VBQWtFLFVBQVUsMENBQTBDLDhFQUE4RSxNQUFNLHFEQUFxRCxPQUFPLHNDQUFzQywrQkFBK0IsTUFBTSxrREFBa0QsT0FBTyxvQ0FBb0MsK0JBQStCLE1BQU0sbUNBQW1DLDJDQUEyQyxNQUFNLG9DQUFvQywrQkFBK0IsTUFBTSxHQUFHLEVBQUUsMFlBQTBZLE9BQU8sK0JBQStCLE9BQU8saUVBQWlFLDZFQUE2RSxnREFBZ0QsMEhBQTBILHNDQUFzQyxjQUFjLDZCQUE2Qix5QkFBeUIsU0FBUyxvQ0FBb0MsaUNBQWlDLFNBQVMsT0FBTyxrQkFBa0IsNkJBQTZCLHlCQUF5QixTQUFTLG9DQUFvQyxpQ0FBaUMsU0FBUyxPQUFPLEtBQUssRUFBRSx1SEFBdUgsT0FBTyx3QkFBd0IsY0FBYyxpQkFBaUIsS0FBSyw0SEFBNEgsTUFBTSxzREFBc0QsS0FBSyxpREFBaUQsT0FBTyxnQ0FBZ0MsT0FBTyxzQ0FBc0MsS0FBSyxpREFBaUQsbUNBQW1DLHdFQUF3RSx5Q0FBeUMsMENBQTBDLFNBQVMsZ0NBQWdDLHNDQUFzQyxzQ0FBc0MsU0FBUyxPQUFPLE9BQU8saUNBQWlDLGtDQUFrQyxPQUFPLG9CQUFvQixNQUFNLHFEQUFxRCwrQ0FBK0MsZ0JBQWdCLE9BQU8seUNBQXlDLDJFQUEyRSxNQUFNLDZKQUE2SixtQkFBbUIsMENBQTBDLEtBQUssNkNBQTZDLHVEQUF1RCw2RUFBNkUsMkNBQTJDLDZDQUE2Qyx3QkFBd0IsU0FBUyxPQUFPLG1DQUFtQyxtQ0FBbUMsb0JBQW9CLE1BQU0sR0FBRyxFQUFFLDJaQUEyWixPQUFPLGtDQUFrQyxPQUFPLG1FQUFtRSw2RUFBNkUsZ0RBQWdELHdHQUF3RyxzQ0FBc0MsVUFBVSw2QkFBNkIseUJBQXlCLFNBQVMsb0NBQW9DLGlDQUFpQyxTQUFTLE9BQU8sYUFBYSw2QkFBNkIseUJBQXlCLFNBQVMsb0NBQW9DLGlDQUFpQyxTQUFTLE9BQU8sS0FBSyxFQUFFLHlIQUF5SCxPQUFPLDBCQUEwQixLQUFLLGlCQUFpQixNQUFNLDhIQUE4SCxNQUFNLCtDQUErQyxNQUFNLGtEQUFrRCxPQUFPLHdCQUF3QixPQUFPLDRCQUE0QixNQUFNLHdDQUF3QyxtQ0FBbUMsdURBQXVELGlDQUFpQyxpQ0FBaUMsU0FBUyw0QkFBNEIsa0NBQWtDLGtDQUFrQyxTQUFTLE9BQU8sT0FBTyw2QkFBNkIsNkJBQTZCLE9BQU8sb0JBQW9CLE1BQU0sMkZBQTJGLE1BQU0sMEJBQTBCLElBQUksaUJBQWlCLEtBQUssNkNBQTZDLDZEQUE2RCx1RUFBdUUsT0FBTyxvQkFBb0IsTUFBTSw2S0FBNkssbUJBQW1CLDBDQUEwQyxLQUFLLDZDQUE2Qyx1REFBdUQsb0NBQW9DLG1DQUFtQyxPQUFPLE9BQU8sMkJBQTJCLDJCQUEyQixPQUFPLG9CQUFvQixNQUFNLDZGQUE2RixNQUFNLDJCQUEyQixJQUFJLGFBQWEsT0FBTywyREFBMkQsS0FBSyxvREFBb0Qsb0JBQW9CLHVDQUF1QywrQkFBK0IsNkJBQTZCLHVJQUF1SSxNQUFNLEdBQUcsRUFBRSwwQkFBMEIsa0RBQWtELHNDQUFzQywyQ0FBMkM7O0FBRW53YSxPQUFPO0FBQ1A7QUFDQTs7QUFFQSx5QkFBeUIseURBQXlELDJDQUEyQzs7QUFFN0gsT0FBTztBQUNQO0FBQ0E7O0FBRUEsc0NBQXNDLG1EQUFtRCw0QkFBNEIsSUFBSSwyQ0FBMkM7O0FBRXBLLE9BQU87QUFDUDtBQUNBOztBQUVBLDRCQUE0QixvQkFBb0Isd0ZBQXdGLDRTQUE0UywyQ0FBMkM7O0FBRS9kLE9BQU87QUFDUDtBQUNBOztBQUVBLHNFQUFzRSw4QkFBOEIsd0tBQXdLLCtDQUErQyw4Q0FBOEMsMkRBQTJELGdWQUFnVix5TkFBeU4sNkRBQTZELGtCQUFrQixHQUFHLFdBQVcsb0NBQW9DLHNDQUFzQywyQ0FBMkM7O0FBRS9wQyxPQUFPO0FBQ1A7QUFDQTs7QUFFQSxpQ0FBaUMsd0pBQXdKLHdHQUF3RyxPQUFPLGdFQUFnRSxPQUFPLHdFQUF3RSxPQUFPLDRDQUE0QyxrQ0FBa0MsOEJBQThCLHlDQUF5QyxtQkFBbUIsaUJBQWlCLFVBQVUsaUNBQWlDLHdEQUF3RCwyQ0FBMkMsU0FBUyxPQUFPLHNCQUFzQixNQUFNLHVJQUF1SSxPQUFPLHdDQUF3QyxFQUFFLDZGQUE2RixPQUFPLHVHQUF1RyxpQkFBaUIsOEJBQThCLG1EQUFtRCxvREFBb0QsT0FBTyxvQkFBb0IsTUFBTSw2SUFBNkksT0FBTyx5Q0FBeUMsRUFBRSxrR0FBa0csT0FBTyx1RUFBdUUsYUFBYSxvREFBb0QsMEJBQTBCLGdEQUFnRCxvRkFBb0YsNEZBQTRGLDZJQUE2SSx1REFBdUQsdURBQXVELE9BQU8sZ0JBQWdCLG9EQUFvRCxNQUFNLDZCQUE2Qix1RkFBdUYsT0FBTyw2REFBNkQsT0FBTyxvREFBb0QsU0FBUyxvR0FBb0csb0NBQW9DLE1BQU0sNENBQTRDLFNBQVMsNEZBQTRGLHFCQUFxQixzRUFBc0UscUNBQXFDLGtEQUFrRCxxRUFBcUUsT0FBTyx1RkFBdUYsK0RBQStELE1BQU0sMEVBQTBFLE9BQU8sMkNBQTJDLFFBQVEsd0RBQXdELE9BQU8seURBQXlELDhCQUE4QixxRUFBcUUseUNBQXlDLFNBQVMsRUFBRSxPQUFPLG1EQUFtRCxNQUFNLDREQUE0RCxRQUFRLG9DQUFvQyx1REFBdUQsNEJBQTRCLE9BQU8sRUFBRSxNQUFNLHNGQUFzRixPQUFPLDJGQUEyRixPQUFPLGdEQUFnRCw4QkFBOEIsNkJBQTZCLHNEQUFzRCx1Q0FBdUMsZUFBZSxlQUFlLHFHQUFxRywwQ0FBMEMsd0JBQXdCLG1EQUFtRCxxQkFBcUIsOENBQThDLHNDQUFzQyxTQUFTLE9BQU8saUNBQWlDLFNBQVMsT0FBTyxFQUFFLG9CQUFvQixNQUFNLGdEQUFnRCxTQUFTLHVDQUF1QyxNQUFNLGlEQUFpRCxpRUFBaUUsaUJBQWlCLE9BQU8sRUFBRSxNQUFNLDhFQUE4RSxPQUFPLHdDQUF3QyxPQUFPLDJEQUEyRCxFQUFFLCtEQUErRCxzQ0FBc0Msc0JBQXNCLE1BQU0sNEVBQTRFLEtBQUssR0FBRyxPQUFPLHlDQUF5QyxRQUFRLGlFQUFpRSxzSkFBc0osc0RBQXNELCtDQUErQyxnQ0FBZ0MsaUJBQWlCLFlBQVkscUJBQXFCLHlDQUF5QywrREFBK0QseUVBQXlFLHdCQUF3Qiw4QkFBOEIsMkRBQTJELFNBQVMsaUJBQWlCLHVDQUF1QyxPQUFPLG1CQUFtQixNQUFNLHFEQUFxRCxlQUFlLDZDQUE2Qyx5QkFBeUIsMkNBQTJDLG9DQUFvQyxtRUFBbUUsOEhBQThILEVBQUUsU0FBUyxnQ0FBZ0MsT0FBTyxPQUFPLDBCQUEwQixPQUFPLE1BQU0sR0FBRyxHQUFHLDhCQUE4QixzQ0FBc0MsMkNBQTJDOztBQUU5ek4sT0FBTztBQUNQO0FBQ0E7O0FBRUEsK0RBQStELG1FQUFtRSw4QkFBOEIsMkxBQTJMLCtDQUErQyxtT0FBbU8sa1FBQWtRLE1BQU0sdURBQXVELGtDQUFrQyxLQUFLLGdKQUFnSixnQkFBZ0IsMEhBQTBILE1BQU0sa0hBQWtILG1CQUFtQiwwQ0FBMEMseUNBQXlDLG1FQUFtRSwyQ0FBMkMsZ0JBQWdCLDJEQUEyRCwwQ0FBMEMsZ0JBQWdCLHlIQUF5SCxPQUFPLHdCQUF3QixLQUFLLHVIQUF1SCxPQUFPLDZHQUE2Ryw2RkFBNkYsS0FBSywwSkFBMEosRUFBRSw2RkFBNkYsT0FBTyxnR0FBZ0csb0RBQW9ELEtBQUssaUtBQWlLLEVBQUUsMEVBQTBFLEVBQUUsZ0VBQWdFLHlDQUF5QyxrTUFBa00sc0pBQXNKLGdEQUFnRCxPQUFPLGdGQUFnRiwyREFBMkQsNEJBQTRCLDBEQUEwRCxTQUFTLGlDQUFpQyxzQkFBc0IsK0ZBQStGLGlCQUFpQixvQkFBb0IsT0FBTyw2Q0FBNkMsS0FBSywwTUFBME0sRUFBRSwwRUFBMEUsRUFBRSw0REFBNEQseUNBQXlDLGlHQUFpRyw4REFBOEQsK0JBQStCLGdDQUFnQywwSUFBMEkseURBQXlELDBCQUEwQixPQUFPLGlDQUFpQyxzQkFBc0IsNkZBQTZGLG9CQUFvQixPQUFPLDZDQUE2QyxLQUFLLGlHQUFpRyxlQUFlLGtEQUFrRCw0REFBNEQsdUNBQXVDLEtBQUssTUFBTSwrQkFBK0Isc0NBQXNDLDJDQUEyQzs7QUFFdHFLLE9BQU87QUFDUDtBQUNBOztBQUVBLHlCQUF5QiwwREFBMEQsMkNBQTJDOztBQUU5SCxPQUFPO0FBQ1A7QUFDQTs7QUFFQSxzQ0FBc0MseUNBQXlDLDBCQUEwQixJQUFJLDJDQUEyQzs7QUFFeEosT0FBTztBQUNQO0FBQ0E7O0FBRUEsaUNBQWlDLCtjQUErYyx5QkFBeUIsK0RBQStELE9BQU8sMEJBQTBCLE9BQU8sMEJBQTBCLE9BQU8sMEJBQTBCLE9BQU8sMEJBQTBCLE9BQU8sOEJBQThCLE9BQU8sOEJBQThCLDhCQUE4Qix5R0FBeUcsc0JBQXNCLDJCQUEyQix3QkFBd0Isb0NBQW9DLDZCQUE2QiwrSEFBK0gsR0FBRyx3QkFBd0IsNkxBQTZMLE9BQU8saUVBQWlFLE9BQU8sOENBQThDLHFFQUFxRSxPQUFPLDZGQUE2Riw0Q0FBNEMsT0FBTywyRkFBMkYsNENBQTRDLE9BQU8seVBBQXlQLE9BQU8sMERBQTBELE9BQU8sNkRBQTZELHNCQUFzQiw4REFBOEQsc0ZBQXNGLHlCQUF5Qix1QkFBdUIsb0JBQW9CLGNBQWMsT0FBTywwSEFBMEgscURBQXFELE9BQU8sdUZBQXVGLE9BQU8sMEVBQTBFLHdFQUF3RSxvREFBb0QsT0FBTyxvS0FBb0ssRUFBRSxvRUFBb0UsK0NBQStDLE9BQU8sd0dBQXdHLE9BQU8sZ0ZBQWdGLG9EQUFvRCxPQUFPLDJGQUEyRixPQUFPLGdHQUFnRywyQ0FBMkMsT0FBTyw2RUFBNkUsT0FBTyx3REFBd0QsT0FBTyxxRkFBcUYsNkNBQTZDLE9BQU8sdUZBQXVGLE9BQU8sbUZBQW1GLDRDQUE0QyxPQUFPLHVGQUF1RixPQUFPLG1GQUFtRiw0Q0FBNEMsT0FBTyx5RkFBeUYsT0FBTyw4Q0FBOEMsT0FBTywyRUFBMkUsNkNBQTZDLE9BQU8sK0ZBQStGLE9BQU8seUVBQXlFLDRDQUE0QyxPQUFPLCtGQUErRixPQUFPLHlFQUF5RSw0Q0FBNEMsT0FBTyx3RkFBd0YsT0FBTyw0Q0FBNEMsT0FBTyx1RUFBdUUsd0RBQXdELE9BQU8sOEZBQThGLE9BQU8scUVBQXFFLDJDQUEyQyxPQUFPLDhGQUE4RixPQUFPLHFFQUFxRSwyQ0FBMkMsT0FBTyxvRkFBb0YsT0FBTywrQkFBK0IsT0FBTywrQkFBK0IsT0FBTywrQkFBK0IsT0FBTywrQkFBK0IsT0FBTyxtQ0FBbUMsT0FBTyx3RkFBd0Ysd0JBQXdCLG1CQUFtQixtQkFBbUIsbUJBQW1CLG1CQUFtQixtQkFBbUIsbUJBQW1CLHlCQUF5QixPQUFPLGdGQUFnRixPQUFPLDBDQUEwQyxPQUFPLCtFQUErRSw2Q0FBNkMsT0FBTywwRkFBMEYsT0FBTyw2RUFBNkUsNENBQTRDLE9BQU8sMEZBQTBGLE9BQU8sNkVBQTZFLDRDQUE0QyxPQUFPLDJGQUEyRixPQUFPLGdDQUFnQyxPQUFPLGdDQUFnQyxPQUFPLGdDQUFnQyxPQUFPLGdDQUFnQyxPQUFPLG9DQUFvQyxPQUFPLHlGQUF5RiwwS0FBMEssd0pBQXdKLG1DQUFtQyxtQ0FBbUMsbUNBQW1DLHdDQUF3Qyx3Q0FBd0MsMkJBQTJCLE9BQU8sc0dBQXNHLE9BQU8sdURBQXVELE9BQU8sNkNBQTZDLDRFQUE0RSxpQ0FBaUMsK0RBQStELE9BQU8scUZBQXFGLE9BQU8sZ0RBQWdELE9BQU8seURBQXlELDBCQUEwQixvQkFBb0Isb0JBQW9CLG9CQUFvQixvQkFBb0Isb0JBQW9CLG9CQUFvQiwyQkFBMkIsT0FBTyxvUUFBb1EsT0FBTyw4Q0FBOEMsb0NBQW9DLGtDQUFrQyxXQUFXLGlDQUFpQyxrREFBa0QsV0FBVyxPQUFPLHNRQUFzUSxnRUFBZ0UsNEJBQTRCLDRCQUE0QiwyQkFBMkIseUNBQXlDLDBDQUEwQyx5QkFBeUIsV0FBVyxPQUFPLHVkQUF1ZCxPQUFPLHdEQUF3RCxPQUFPLGdEQUFnRCx5QkFBeUIsNERBQTRELE9BQU8sZ0hBQWdILHlGQUF5RiwyQ0FBMkMseUNBQXlDLHlDQUF5Qyx5Q0FBeUMseUNBQXlDLHlDQUF5QywwQkFBMEIsT0FBTyw4Z0JBQThnQixPQUFPLHdEQUF3RCxPQUFPLGdEQUFnRCx5QkFBeUIsNERBQTRELE9BQU8sd0hBQXdILDRnQkFBNGdCLGdEQUFnRCw2QkFBNkIsa0NBQWtDLDBCQUEwQixPQUFPLDBnQkFBMGdCLFFBQVEsb0ZBQW9GLEVBQUUseUlBQXlJLHlRQUF5USxtQkFBbUIsbURBQW1ELGFBQWEsdUJBQXVCLGFBQWEsc0NBQXNDLDJEQUEyRCxzQkFBc0IsMEJBQTBCLGtDQUFrQywyQkFBMkIsdUJBQXVCLGVBQWUsY0FBYyxzQ0FBc0MsMkJBQTJCLHVCQUF1Qix1Q0FBdUMsZUFBZSxPQUFPLHlEQUF5RCxjQUFjLHFDQUFxQyxlQUFlLFdBQVcsT0FBTyw0RUFBNEUsOENBQThDLGdFQUFnRSwyQkFBMkIsdUJBQXVCLDJEQUEyRCxlQUFlLG1CQUFtQiw4Q0FBOEMsOEVBQThFLDJCQUEyQix1QkFBdUIsMkRBQTJELGVBQWUsT0FBTyxpRUFBaUUsY0FBYyxtQ0FBbUMsV0FBVyxvQkFBb0IsbUlBQW1JLE9BQU8sMEZBQTBGLE9BQU8sc0RBQXNELG1EQUFtRCxPQUFPLDRIQUE0SCxPQUFPLG1DQUFtQyxPQUFPLHNDQUFzQyxzQkFBc0IsMkZBQTJGLDBCQUEwQixvQkFBb0IsbUdBQW1HLE9BQU8sdVBBQXVQLFdBQVcsNkVBQTZFLGFBQWEsR0FBRyxhQUFhLE9BQU8sYUFBYSw0RkFBNEYsTUFBTSxnRUFBZ0UsTUFBTSxrR0FBa0csa0ZBQWtGLGdEQUFnRCxrQ0FBa0MsK0JBQStCLGtFQUFrRSwwQ0FBMEMsZUFBZSxXQUFXLE9BQU8sb0JBQW9CLGVBQWUsT0FBTyw2REFBNkQsZUFBZSxXQUFXLDRCQUE0QixPQUFPLDZVQUE2VSxFQUFFLDJEQUEyRCxRQUFRLDhFQUE4RSxFQUFFLHlIQUF5SCxpSkFBaUosMkJBQTJCLDhEQUE4RCxrQ0FBa0Msa0NBQWtDLFdBQVcsNEJBQTRCLE9BQU8sa05BQWtOLHlCQUF5QiwyRUFBMkUsd0JBQXdCLG1FQUFtRSxvQkFBb0IsT0FBTyxpSEFBaUgsUUFBUSx1RkFBdUYsd0JBQXdCLDBIQUEwSCxPQUFPLGdGQUFnRixRQUFRLHdEQUF3RCxpREFBaUQsT0FBTyw2RkFBNkYsOENBQThDLE9BQU8sNkZBQTZGLFFBQVEsNkVBQTZFLE9BQU8sbURBQW1ELHVEQUF1RCxxQkFBcUIscUJBQXFCLHFCQUFxQixxQkFBcUIscUJBQXFCLHFCQUFxQixpREFBaUQscUJBQXFCLE9BQU8sa0pBQWtKLE9BQU8sNERBQTRELFFBQVEsK0NBQStDLGtEQUFrRCxnSEFBZ0gsT0FBTyx3RkFBd0YsTUFBTSw4Q0FBOEMsd0JBQXdCLHNEQUFzRCxPQUFPLDRHQUE0RyxPQUFPLDBDQUEwQyxzREFBc0QsT0FBTyw4R0FBOEcsT0FBTyw4Q0FBOEMsd0JBQXdCLDRKQUE0SixPQUFPLCtGQUErRixPQUFPLDRDQUE0QyxnREFBZ0QsT0FBTyx5R0FBeUcsT0FBTyxnREFBZ0QsdUNBQXVDLE9BQU8sc0dBQXNHLE9BQU8sZ0NBQWdDLE9BQU8sa0NBQWtDLFFBQVEsNkRBQTZELDJDQUEyQyxPQUFPLDhJQUE4SSx3QkFBd0Isc0ZBQXNGLG9CQUFvQixPQUFPLElBQUksa0NBQWtDLHdDQUF3QywyQ0FBMkM7O0FBRXI5cUIsT0FBTztBQUNQO0FBQ0E7O0FBRUEsc0VBQXNFLDhCQUE4QixrU0FBa1MsdURBQXVELHdDQUF3QywrQ0FBK0MsOENBQThDLDJEQUEyRCw4Q0FBOEMsMkRBQTJELGtEQUFrRCwrRkFBK0YsT0FBTyxrRUFBa0UsTUFBTSxzQ0FBc0MsTUFBTSw0RUFBNEUsS0FBSywwRUFBMEUsU0FBUyw2RkFBNkYsT0FBTyx5REFBeUQsbU9BQW1PLE9BQU8sbUVBQW1FLDRKQUE0SixJQUFJLDRCQUE0QixzQ0FBc0MsMkNBQTJDOztBQUU3MkQsT0FBTztBQUNQO0FBQ0E7O0FBRUEsc0VBQXNFLDhCQUE4QixzS0FBc0ssMEJBQTBCLGlXQUFpVyx5RUFBeUUsbURBQW1ELHFFQUFxRSx3Q0FBd0MsK0NBQStDLCtDQUErQyw2REFBNkQsb0RBQW9ELHVFQUF1RSwrQ0FBK0MsNkRBQTZELCtDQUErQyw2REFBNkQsNkNBQTZDLHlEQUF5RCw0Q0FBNEMsdURBQXVELG1DQUFtQywwSkFBMEosMEJBQTBCLGlCQUFpQixPQUFPLGlGQUFpRixnQkFBZ0IsK0hBQStILDBCQUEwQix5Q0FBeUMsS0FBSyxPQUFPLHVDQUF1QyxLQUFLLEdBQUcsZ0NBQWdDLHlDQUF5Qyx3Q0FBd0MsR0FBRyxxR0FBcUcsT0FBTyxpRkFBaUYsZ0JBQWdCLG1JQUFtSSxrQ0FBa0Msa0JBQWtCLGdFQUFnRSxFQUFFLEtBQUssR0FBRywwSEFBMEgsT0FBTyxpRkFBaUYsZ0JBQWdCLDBLQUEwSyxNQUFNLGtGQUFrRixnQkFBZ0IsZ0pBQWdKLHNDQUFzQyxnS0FBZ0ssY0FBYyxpRkFBaUYscURBQXFELFNBQVMsRUFBRSxjQUFjLEtBQUssR0FBRyxrQ0FBa0MsaUNBQWlDLHNDQUFzQywySUFBMkksc0RBQXNELGdEQUFnRCw4REFBOEQsbURBQW1ELCtEQUErRCxLQUFLLEVBQUUsaUlBQWlJLDZCQUE2QixnQ0FBZ0MsNENBQTRDLDJEQUEyRCwwQkFBMEIsdUJBQXVCLE9BQU8sRUFBRSxxRUFBcUUsTUFBTSxzQ0FBc0Msd0NBQXdDLDJCQUEyQixNQUFNLGdEQUFnRCxpRUFBaUUsbUVBQW1FLG9CQUFvQixNQUFNLGdEQUFnRCxpRUFBaUUsc0VBQXNFLG9CQUFvQixNQUFNLGdIQUFnSCxPQUFPLDJDQUEyQyxLQUFLLHFJQUFxSSxPQUFPLG9FQUFvRSxLQUFLLCtDQUErQyxrQ0FBa0MsMERBQTBELDRGQUE0RixPQUFPLG9CQUFvQixNQUFNLDhJQUE4SSxzQ0FBc0MsTUFBTSw4SUFBOEksc0NBQXNDLE1BQU0sMEVBQTBFLGdCQUFnQixrRUFBa0UsS0FBSyxrRkFBa0YseUNBQXlDLG1EQUFtRCxPQUFPLG1CQUFtQixvREFBb0QsT0FBTyxvQkFBb0IsTUFBTSwySEFBMkgsaUVBQWlFLG9CQUFvQixNQUFNLDBEQUEwRCxnQkFBZ0IsMkNBQTJDLG1DQUFtQywwQkFBMEIsb0JBQW9CLE1BQU0sR0FBRyxhQUFhLDhCQUE4QixzQ0FBc0MsMkNBQTJDOztBQUVubE8sT0FBTztBQUNQO0FBQ0E7O0FBRUEsc0VBQXNFLDhCQUE4Qiw4VUFBOFUsK0NBQStDLCtDQUErQyw2REFBNkQscUZBQXFGLHNEQUFzRCxPQUFPLCtDQUErQyxnQkFBZ0Isb0dBQW9HLDBCQUEwQixtREFBbUQsZ0NBQWdDLHVCQUF1Qiw4RUFBOEUsT0FBTyxFQUFFLEtBQUssa0JBQWtCLEdBQUcsb0JBQW9CLG9LQUFvSyw4REFBOEQsNEJBQTRCLGtDQUFrQyxxQkFBcUIsMERBQTBELE9BQU8sbURBQW1ELE9BQU8sbURBQW1ELG9CQUFvQixtQkFBbUIsd0JBQXdCLFVBQVUsaURBQWlELE9BQU8sb0JBQW9CLE1BQU0sMktBQTJLLGtDQUFrQyxFQUFFLE1BQU0sdUVBQXVFLE9BQU8sK0NBQStDLFNBQVMsOElBQThJLGVBQWUsbUNBQW1DLHdEQUF3RCxvQkFBb0IsT0FBTyw2RUFBNkUsdUNBQXVDLHdEQUF3RCw2Q0FBNkMsT0FBTyxFQUFFLG9CQUFvQixNQUFNLHlKQUF5SixTQUFTLDBJQUEwSSw2QkFBNkIsMENBQTBDLGlCQUFpQiw0Q0FBNEMsaUJBQWlCLDhDQUE4QywyQ0FBMkMsMkJBQTJCLE9BQU8sRUFBRSxpREFBaUQsMkNBQTJDLG9CQUFvQix5Q0FBeUMsaUNBQWlDLGtGQUFrRixTQUFTLEVBQUUsT0FBTyxFQUFFLG9CQUFvQixNQUFNLG1EQUFtRCxHQUFHLGtCQUFrQixtQ0FBbUMsc0NBQXNDLDJDQUEyQzs7QUFFdnFILE9BQU87QUFDUDtBQUNBOztBQUVBLHNFQUFzRSw4QkFBOEIsZ0tBQWdLLDJEQUEyRCw2REFBNkQsMkJBQTJCLDZSQUE2UiwwQkFBMEIsc0JBQXNCLHNNQUFzTSxtREFBbUQsUUFBUSxLQUFLLHlDQUF5QyxvQ0FBb0MsaUJBQWlCLHFCQUFxQixVQUFVLGlEQUFpRCxLQUFLLEdBQUcsRUFBRSxnQ0FBZ0Msc0NBQXNDLDJDQUEyQzs7QUFFbnhDLE9BQU87QUFDUDtBQUNBOztBQUVBLHNFQUFzRSw4QkFBOEIsNERBQTRELHVGQUF1Riw4REFBOEQsMkNBQTJDOztBQUVoVyxPQUFPO0FBQ1A7QUFDQTs7QUFFQSxzRUFBc0UsOEJBQThCLHdDQUF3QywrQ0FBK0MsbURBQW1ELHFFQUFxRSxrREFBa0QscUVBQXFFLHFCQUFxQixtQkFBbUIsR0FBRyw2QkFBNkIsY0FBYyxxREFBcUQsNEVBQTRFLDJDQUEyQyw4REFBOEQsZ0NBQWdDLCtDQUErQyw4Q0FBOEMsMkNBQTJDLHlKQUF5SiwwQ0FBMEMsOEJBQThCLDZCQUE2Qiw0QkFBNEIsZ0NBQWdDLHFDQUFxQyx3Q0FBd0Msd0NBQXdDLDhDQUE4QyxtQkFBbUIsc0lBQXNJLCtGQUErRix3QkFBd0IseUZBQXlGLFVBQVUseUJBQXlCLHNFQUFzRSw2UEFBNlAsa0JBQWtCLG9FQUFvRSxpREFBaUQsNlBBQTZQLGtCQUFrQiwyREFBMkQsa0JBQWtCLFNBQVMseUVBQXlFLGtEQUFrRCxrRUFBa0UsRUFBRSw4Q0FBOEMsT0FBTyxLQUFLLHFDQUFxQyx3RUFBd0Usb0JBQW9CLDJDQUEyQyx1REFBdUQsZ0RBQWdELHlCQUF5QixpREFBaUQsb0RBQW9ELCtEQUErRCxrREFBa0QsU0FBUyxPQUFPLHVDQUF1QyxTQUFTLHFEQUFxRCx1RUFBdUUsU0FBUyxnREFBZ0Qsa0VBQWtFLEVBQUUsNkNBQTZDLDREQUE0RCw2Q0FBNkMsdUZBQXVGLDJDQUEyQyxPQUFPLEtBQUssNENBQTRDLG1DQUFtQyxvQkFBb0IsOEtBQThLLGlCQUFpQixTQUFTLHdDQUF3QywyREFBMkQseURBQXlELDhDQUE4Qyw2QkFBNkIsV0FBVyxFQUFFLFNBQVMsa0ZBQWtGLDhDQUE4QyxrRUFBa0UsRUFBRSw0Q0FBNEMsdUJBQXVCLE9BQU8sS0FBSyxFQUFFLEdBQUcsd0NBQXdDLGFBQWEsMkJBQTJCLG9DQUFvQyxvQ0FBb0MsS0FBSyxPQUFPLHlCQUF5Qix5QkFBeUIsS0FBSyx1REFBdUQsR0FBRyw4QkFBOEIsV0FBVywwQ0FBMEMsc0NBQXNDLDJDQUEyQzs7QUFFM25LLE9BQU87QUFDUDtBQUNBOztBQUVBLHNFQUFzRSw4QkFBOEIsME1BQTBNLHFFQUFxRSx3VUFBd1UsaUtBQWlLLEVBQUUsc0RBQXNELE9BQU8saUVBQWlFLFFBQVEsNENBQTRDLG1CQUFtQixvRkFBb0YsbUJBQW1CLG9HQUFvRyxvQ0FBb0Msb0JBQW9CLG1CQUFtQixrQkFBa0IsVUFBVSxpQ0FBaUMseUNBQXlDLGlDQUFpQyxrQ0FBa0MsYUFBYSxPQUFPLDRCQUE0QixhQUFhLFdBQVcsU0FBUyxvQ0FBb0MseUNBQXlDLGlDQUFpQyxrQ0FBa0MsYUFBYSxPQUFPLDRCQUE0QixhQUFhLFdBQVcsU0FBUyxPQUFPLGtDQUFrQyx5REFBeUQsNkNBQTZDLG1DQUFtQyxvQ0FBb0MsZUFBZSxPQUFPLDhCQUE4QixlQUFlLGFBQWEsV0FBVyxTQUFTLE9BQU8sNkNBQTZDLEtBQUsscU5BQXFOLHFDQUFxQywrQ0FBK0MseUJBQXlCLG9CQUFvQixNQUFNLHdDQUF3QyxnQkFBZ0Isc0NBQXNDLHdDQUF3QyxvQkFBb0IsTUFBTSxxQ0FBcUMsdUNBQXVDLE1BQU0sMkNBQTJDLGlEQUFpRCxNQUFNLDhDQUE4Qyx1REFBdUQsTUFBTSxHQUFHLEVBQUUsb0NBQW9DLHNDQUFzQywyQ0FBMkM7O0FBRTVoRyxPQUFPO0FBQ1A7QUFDQTs7QUFFQSxpQ0FBaUMsdUVBQXVFLDREQUE0RCwwQ0FBMEMsR0FBRyxFQUFFLHFDQUFxQyxzQ0FBc0MsMkNBQTJDOztBQUV6VSxPQUFPO0FBQ1A7QUFDQTs7QUFFQSxzRUFBc0UsOEJBQThCLHliQUF5YiwrREFBK0QsOENBQThDLDJEQUEyRCw4Q0FBOEMsMkRBQTJELGtEQUFrRCw0Q0FBNEMsdURBQXVELHdDQUF3QywrQ0FBK0MsOENBQThDLDJEQUEyRCx5TkFBeU4sT0FBTyx3RUFBd0UsZ0JBQWdCLDBGQUEwRix5QkFBeUIsdURBQXVELHdEQUF3RCw4Q0FBOEMscUJBQXFCLHNCQUFzQix1RUFBdUUsOEJBQThCLGdFQUFnRSxPQUFPLE9BQU8sd0ZBQXdGLE9BQU8sS0FBSyxnSEFBZ0gsb0RBQW9ELEdBQUcsbVFBQW1RLHlCQUF5Qix1SEFBdUgsME1BQTBNLHNDQUFzQyxpQkFBaUIsc0JBQXNCLG1EQUFtRCwyQkFBMkIsOERBQThELGdJQUFnSSx1QkFBdUIsbURBQW1ELHlCQUF5Qix3Q0FBd0Msa0NBQWtDLDJEQUEyRCxnQ0FBZ0MsV0FBVyxTQUFTLE9BQU8sRUFBRSxLQUFLLHdEQUF3RCxvQkFBb0IsMEJBQTBCLG1CQUFtQix5QkFBeUIsVUFBVSxzREFBc0QsU0FBUyxPQUFPLG9CQUFvQixLQUFLLG1EQUFtRCxnQkFBZ0IsNkNBQTZDLCtDQUErQyxLQUFLLHlDQUF5QyxxQkFBcUIsd0JBQXdCLHNEQUFzRCxpQkFBaUIsMENBQTBDLGdDQUFnQyxnQ0FBZ0MsT0FBTyxFQUFFLDBCQUEwQixLQUFLLG9EQUFvRCx1REFBdUQsa0NBQWtDLDBCQUEwQixxQ0FBcUMsb0NBQW9DLHlCQUF5QiwrQ0FBK0MsU0FBUyxPQUFPLEVBQUUsS0FBSyxzRUFBc0UsZ0VBQWdFLDBCQUEwQiwwQkFBMEIsK0NBQStDLDBCQUEwQix5Q0FBeUMsV0FBVyxTQUFTLE9BQU8sMEJBQTBCLG1CQUFtQiw4RUFBOEUseUNBQXlDLDZGQUE2Rix1QkFBdUIsd0RBQXdELDJCQUEyQiw2REFBNkQscUJBQXFCLHdCQUF3QixxQ0FBcUMsbUZBQW1GLG9CQUFvQix1RkFBdUYsb0JBQW9CLHNGQUFzRixrREFBa0Qsb0JBQW9CLDhGQUE4RixvQkFBb0IseURBQXlELDhDQUE4QyxzREFBc0QsaUJBQWlCLFVBQVUsb0RBQW9ELGVBQWUsT0FBTyxvREFBb0QsZUFBZSxhQUFhLDhEQUE4RCxxQkFBcUIsa0RBQWtELGdEQUFnRCxnQ0FBZ0MsaUNBQWlDLHNFQUFzRSxzQkFBc0IsYUFBYSxFQUFFLFdBQVcsRUFBRSxrQkFBa0IsU0FBUyxFQUFFLE9BQU8sNElBQTRJLDJCQUEyQixrSUFBa0ksT0FBTyxxRUFBcUUsb0JBQW9CLEtBQUssb0NBQW9DLG9DQUFvQyxtQ0FBbUMsdUNBQXVDLHlDQUF5QyxVQUFVLHNCQUFzQixPQUFPLFdBQVcsbUJBQW1CLG1DQUFtQyxVQUFVLG9HQUFvRyxvQ0FBb0MsNkVBQTZFLGtDQUFrQyxTQUFTLE9BQU8sNERBQTRELG9CQUFvQixLQUFLLHFDQUFxQyx3REFBd0Qsb0VBQW9FLDhDQUE4QyxpREFBaUQseUpBQXlKLGtCQUFrQixpQ0FBaUMsdUNBQXVDLHlGQUF5RixXQUFXLDZDQUE2QyxxQkFBcUIsU0FBUyw4Q0FBOEMsNEVBQTRFLG9DQUFvQywwQ0FBMEMsV0FBVyxTQUFTLE9BQU8sNkJBQTZCLFNBQVMsa0VBQWtFLGdFQUFnRSxPQUFPLEdBQUcsb0JBQW9CLEtBQUssbUNBQW1DLG1DQUFtQyxxQkFBcUIsZ0RBQWdELGtEQUFrRCxrREFBa0QsMEZBQTBGLFNBQVMsRUFBRSxPQUFPLG9DQUFvQyxpREFBaUQsMkhBQTJILHNEQUFzRCxpRUFBaUUscUJBQXFCLDhDQUE4QyxvRUFBb0UsNkVBQTZFLGFBQWEsV0FBVyxFQUFFLFNBQVMsT0FBTyxvQkFBb0IsS0FBSyxtQ0FBbUMsc0JBQXNCLDJDQUEyQyx1Q0FBdUMsa0RBQWtELE9BQU8sS0FBSyx1QkFBdUIseUNBQXlDLDRCQUE0QixzQ0FBc0Msa0NBQWtDLDJCQUEyQixnQ0FBZ0MsK0JBQStCLHNCQUFzQixxQ0FBcUMsbURBQW1ELG9CQUFvQixLQUFLLHdCQUF3QiwrQkFBK0IsdUNBQXVDLG9CQUFvQixFQUFFLG1EQUFtRCx1QkFBdUIsa0NBQWtDLG1DQUFtQyxTQUFTLE9BQU8scUNBQXFDLFNBQVMsT0FBTyw0QkFBNEIsNkJBQTZCLHVCQUF1QixzQ0FBc0MsaUNBQWlDLEtBQUssa0NBQWtDLCtEQUErRCw4Q0FBOEMsK0JBQStCLHFCQUFxQiw4REFBOEQsRUFBRSxTQUFTLHNCQUFzQixRQUFRLHdDQUF3Qyx3QkFBd0Isa0NBQWtDLG1DQUFtQywwQ0FBMEMsc0JBQXNCLFFBQVEsc0NBQXNDLG9CQUFvQixxQkFBcUIsZ0JBQWdCLFVBQVUsK0NBQStDLFNBQVMsUUFBUSxxQ0FBcUMsa0NBQWtDLFFBQVEsb0JBQW9CLEtBQUssV0FBVywwQ0FBMEMsd0NBQXdDLHNDQUFzQyxvQ0FBb0MsbUNBQW1DLDRCQUE0Qix3QkFBd0IsNkJBQTZCLHlCQUF5QixzQkFBc0IsMkJBQTJCLGlDQUFpQywyQkFBMkIsc0JBQXNCLG1FQUFtRSxnQkFBZ0IscUJBQXFCLDZCQUE2QiwwQ0FBMEMsd0JBQXdCLHlEQUF5RCw2RUFBNkUsZ0NBQWdDLDJHQUEyRyxPQUFPLDJGQUEyRixrQ0FBa0Msb0RBQW9ELHFDQUFxQyw2QkFBNkIsb0VBQW9FLDBCQUEwQixTQUFTLEVBQUUsT0FBTyxPQUFPLHdCQUF3QixPQUFPLG9CQUFvQixNQUFNLGtFQUFrRSxrQkFBa0IsTUFBTSxnQ0FBZ0Msa0JBQWtCLE1BQU0sbUNBQW1DLGtCQUFrQixNQUFNLDZCQUE2QixrQkFBa0IsTUFBTSw4QkFBOEIsa0JBQWtCLE1BQU0sc0NBQXNDLDRCQUE0QiwwQkFBMEIscUNBQXFDLHlDQUF5Qyw4QkFBOEIsNEJBQTRCLCtDQUErQyxxQkFBcUIsRUFBRSw4Q0FBOEMsZ0RBQWdELFlBQVksU0FBUyxzQkFBc0IsaUdBQWlHLDRCQUE0Qiw0SkFBNEosdURBQXVELG9EQUFvRCw2Q0FBNkMsdUVBQXVFLDhEQUE4RCxzQ0FBc0MsNERBQTRELFlBQVksU0FBUyxPQUFPLHFCQUFxQiw2Q0FBNkMsK0JBQStCLGlEQUFpRCwyQkFBMkIsU0FBUyxPQUFPLEVBQUUsNkRBQTZELHlCQUF5QixPQUFPLEVBQUUsb0JBQW9CLE1BQU0sdUNBQXVDLGdCQUFnQixxQkFBcUIscUJBQXFCLDJDQUEyQyxvREFBb0QsK0JBQStCLDBCQUEwQixPQUFPLEVBQUUsNENBQTRDLDhGQUE4Rix3RkFBd0Ysa0dBQWtHLG9EQUFvRCxTQUFTLHlFQUF5RSxPQUFPLEVBQUUsb0JBQW9CLE1BQU0sNENBQTRDLDZFQUE2RSxzQkFBc0IsaURBQWlELDJCQUEyQixxREFBcUQsMEJBQTBCLGlGQUFpRixTQUFTLE9BQU8sR0FBRyxNQUFNLDZDQUE2Qyx3QkFBd0IscUJBQXFCLHVFQUF1RSxpREFBaUQsa0NBQWtDLCtDQUErQyx5QkFBeUIsMEZBQTBGLFNBQVMsMEJBQTBCLDZEQUE2RCx5REFBeUQsK0NBQStDLHNDQUFzQyw0REFBNEQseUJBQXlCLGlGQUFpRixzQ0FBc0MsZ0dBQWdHLHdCQUF3QixtSUFBbUksd0JBQXdCLGVBQWUsNkRBQTZELG1IQUFtSCxHQUFHLGFBQWEsRUFBRSxzREFBc0QsdUNBQXVDLGFBQWEsaUpBQWlKLDRMQUE0TCx5SEFBeUgsYUFBYSxFQUFFLFdBQVcsU0FBUyxFQUFFLE9BQU8sRUFBRSxxQkFBcUIsTUFBTSx3REFBd0Qsa0NBQWtDLHNEQUFzRCwyQ0FBMkMsc0ZBQXNGLG9CQUFvQix1RkFBdUYsb0JBQW9CLFdBQVcsU0FBUyxPQUFPLGdGQUFnRixTQUFTLE9BQU8sT0FBTyxnRkFBZ0YsT0FBTyxvQkFBb0IsTUFBTSwyREFBMkQsZ0NBQWdDLDJEQUEyRCxpRUFBaUUsMENBQTBDLDJEQUEyRCwrREFBK0Qsc0ZBQXNGLDBEQUEwRCwwQ0FBMEMsb0NBQW9DLE9BQU8sT0FBTyw0QkFBNEIsZ0ZBQWdGLEVBQUUsT0FBTyxvQkFBb0IsTUFBTSxvQ0FBb0MsZ0JBQWdCLG1FQUFtRSw2Q0FBNkMsTUFBTSxtQ0FBbUMsZUFBZSxrREFBa0QsNERBQTRELDJFQUEyRSxNQUFNLDhCQUE4QixlQUFlLG9EQUFvRCxvRkFBb0Ysa0JBQWtCLE1BQU0sdUNBQXVDLHFFQUFxRSxxQ0FBcUMsMkJBQTJCLDhDQUE4QywrREFBK0QseUJBQXlCLDBFQUEwRSwyRUFBMkUseURBQXlELDZEQUE2RCxXQUFXLE9BQU8sb0NBQW9DLFdBQVcsU0FBUyxRQUFRLHVEQUF1RCxrREFBa0Qsa0RBQWtELHlDQUF5QyxTQUFTLDhDQUE4QyxRQUFRLHlEQUF5RCw2QkFBNkIsb0NBQW9DLFNBQVMsUUFBUSx3REFBd0QseUJBQXlCLG1HQUFtRyw4RkFBOEYsbUNBQW1DLDJDQUEyQywyREFBMkQsa0NBQWtDLGFBQWEsR0FBRyxXQUFXLE9BQU8sMkRBQTJELDRDQUE0QyxpREFBaUQsZUFBZSxhQUFhLEdBQUcsV0FBVyxTQUFTLFFBQVEsS0FBSyxFQUFFLEdBQUcsRUFBRSwwQkFBMEIsNENBQTRDLHNDQUFzQywyQ0FBMkM7O0FBRW5xcUIsT0FBTztBQUNQO0FBQ0E7O0FBRUEsNkRBQTZELG1FQUFtRSw4QkFBOEIsaVNBQWlTLCtDQUErQyw4Q0FBOEMsMkRBQTJELDhEQUE4RCx3QkFBd0IsK1JBQStSLDBCQUEwQixxQkFBcUIsa0lBQWtJLCtCQUErQiw0Q0FBNEMsV0FBVyxPQUFPLDZHQUE2RyxXQUFXLGlCQUFpQixTQUFTLCtGQUErRixnR0FBZ0csc0JBQXNCLFNBQVMsMEJBQTBCLFFBQVEsS0FBSyw0REFBNEQsdUJBQXVCLGtCQUFrQiwrQ0FBK0MsbUJBQW1CLGdCQUFnQixVQUFVLDBDQUEwQyw0Q0FBNEMsa0NBQWtDLHlEQUF5RCxnQkFBZ0IsYUFBYSxRQUFRLFdBQVcsT0FBTywyQkFBMkIsV0FBVyxTQUFTLHNCQUFzQixPQUFPLHFCQUFxQixLQUFLLHNKQUFzSixxQ0FBcUMscUJBQXFCLDhCQUE4Qiw0QkFBNEIsNkVBQTZFLGlEQUFpRCxLQUFLLCtCQUErQiwwQkFBMEIsTUFBTSxtRkFBbUYsa0RBQWtELHVFQUF1RSwyREFBMkQsU0FBUyxPQUFPLGtDQUFrQyxTQUFTLE9BQU8sNkNBQTZDLE1BQU0sdUNBQXVDLGVBQWUsb0JBQW9CLHVFQUF1RSwyREFBMkQsMkNBQTJDLFNBQVMsRUFBRSxPQUFPLE1BQU0sMkZBQTJGLDBCQUEwQixxQkFBcUIsNkNBQTZDLDRCQUE0QixpQkFBaUIsNkNBQTZDLDREQUE0RCxRQUFRLE1BQU0sMkNBQTJDLDZFQUE2RSxrQkFBa0IsMkJBQTJCLDJDQUEyQyxpREFBaUQsU0FBUyx3Q0FBd0MsT0FBTyxHQUFHLE1BQU0sNENBQTRDLG9DQUFvQyx5Q0FBeUMsb0JBQW9CLE9BQU8sT0FBTyxnREFBZ0QsOERBQThELG9HQUFvRywrQkFBK0IsMEVBQTBFLDZEQUE2RCx5QkFBeUIsV0FBVyxTQUFTLHNCQUFzQixPQUFPLHFCQUFxQixNQUFNLGlDQUFpQyw4QkFBOEIsb0RBQW9ELGtDQUFrQyxNQUFNLEdBQUcsRUFBRSxpQ0FBaUMsc0NBQXNDLDJDQUEyQzs7QUFFOXZKLE9BQU87QUFDUDtBQUNBOztBQUVBLHlCQUF5QiwwREFBMEQsMkNBQTJDOztBQUU5SCxPQUFPO0FBQ1A7QUFDQTs7QUFFQSwrQkFBK0IsdURBQXVELDJDQUEyQzs7QUFFakksT0FBTztBQUNQO0FBQ0E7O0FBRUEsMkVBQTJFLG9EQUFvRCw2QkFBNkIsaUNBQWlDLE1BQU0sR0FBRyxFQUFFLDJDQUEyQzs7QUFFblAsT0FBTztBQUNQO0FBQ0E7O0FBRUEsMkVBQTJFLGdDQUFnQywrQkFBK0IsSUFBSSwyQ0FBMkM7O0FBRXpMLE9BQU87QUFDUDtBQUNBOztBQUVBLGdGQUFnRix3RUFBd0UsY0FBYyxJQUFJLDJDQUEyQzs7QUFFck4sT0FBTztBQUNQO0FBQ0E7O0FBRUEsbUxBQW1MLHVDQUF1QyxnQ0FBZ0Msc0NBQXNDLHdCQUF3QixxREFBcUQsT0FBTyxFQUFFLGtCQUFrQixJQUFJLDJDQUEyQzs7QUFFdmIsT0FBTztBQUNQO0FBQ0E7O0FBRUEsOEpBQThKLCtDQUErQyw2UkFBNlIsd0ZBQXdGLGtDQUFrQywrQkFBK0IsdUJBQXVCLDZFQUE2RSx3Q0FBd0MsNEVBQTRFLDZWQUE2VixnQ0FBZ0MsNkRBQTZELFVBQVUsb0NBQW9DLGlCQUFpQiwwREFBMEQsOEVBQThFLGlFQUFpRSxjQUFjLEtBQUssSUFBSSxnQ0FBZ0MsMkJBQTJCLDJCQUEyQiwyQkFBMkIsMkJBQTJCLHlCQUF5QixtQ0FBbUMsMkNBQTJDOztBQUV2eUQsT0FBTztBQUNQO0FBQ0E7O0FBRUEsbVFBQW1RLHlDQUF5QywyRUFBMkU7O0FBRXZYLE9BQU87QUFDUDtBQUNBOztBQUVBLG9DQUFvQyxrQkFBa0IsdUNBQXVDLDJFQUEyRTs7QUFFeEssT0FBTztBQUNQO0FBQ0E7O0FBRUEscUZBQXFGLDhDQUE4QyxrQkFBa0Isb0NBQW9DLG1CQUFtQixpQ0FBaUMsZ0NBQWdDLFFBQVEsb0NBQW9DLG1DQUFtQyxRQUFRLHVDQUF1QyxzQ0FBc0MsUUFBUSxLQUFLLG1DQUFtQyx1Q0FBdUMsTUFBTSxJQUFJLDJDQUEyQzs7QUFFN2pCLE9BQU87QUFDUDtBQUNBOztBQUVBLHFDQUFxQywyRUFBMkUsY0FBYyxJQUFJLDJDQUEyQzs7QUFFN0ssT0FBTztBQUNQO0FBQ0E7O0FBRUEsdUNBQXVDLFNBQVMsc0JBQXNCLEtBQUssVUFBVSxrQkFBa0IsS0FBSyxJQUFJLDJDQUEyQzs7QUFFM0osT0FBTztBQUNQO0FBQ0E7O0FBRUEsc0VBQXNFLDhCQUE4QixpSEFBaUgsK0NBQStDLG1EQUFtRCxxRUFBcUUsK0NBQStDLDZEQUE2RCxpRUFBaUUsbUNBQW1DLHVDQUF1QywyQkFBMkIsMkJBQTJCLGlDQUFpQyxPQUFPLG9CQUFvQixNQUFNLDhEQUE4RCxrQkFBa0IsR0FBRyxFQUFFLCtCQUErQixzQ0FBc0MsMkNBQTJDOztBQUVoN0IsT0FBTztBQUNQO0FBQ0E7O0FBRUEsaUNBQWlDLG1JQUFtSSxPQUFPLDZDQUE2QyxNQUFNLGdFQUFnRSxFQUFFLGlGQUFpRixjQUFjLGtDQUFrQyx5QkFBeUIsaUdBQWlHLE9BQU8sS0FBSyxpTEFBaUwsTUFBTSxtQkFBbUIsZ0JBQWdCLDZHQUE2RyxFQUFFLEVBQUUsSUFBSSxHQUFHLHNDQUFzQyx3Q0FBd0MsMkNBQTJDOztBQUVsL0IsT0FBTztBQUNQO0FBQ0E7O0FBRUEsc0VBQXNFLDhCQUE4QixnTkFBZ04sK0NBQStDLG9EQUFvRCx1RUFBdUUsbURBQW1ELHFFQUFxRSxrREFBa0QsOENBQThDLDJEQUEyRCxxREFBcUQsdUZBQXVGLDBEQUEwRCwyQ0FBMkMsa0dBQWtHLCtDQUErQyxTQUFTLE9BQU8sRUFBRSxLQUFLLEdBQUcseVVBQXlVLDBCQUEwQix3QkFBd0Isd0JBQXdCLDBCQUEwQix1QkFBdUIsOEJBQThCLE1BQU0sd0JBQXdCLDhCQUE4QixNQUFNLHFCQUFxQiw4QkFBOEIsTUFBTSxnQkFBZ0IseUJBQXlCLDBCQUEwQix3QkFBd0IsbUJBQW1CLDhCQUE4QixNQUFNLDJCQUEyQixtQkFBbUIsOEJBQThCLE1BQU0sd0NBQXdDLG1DQUFtQyxvRkFBb0YsUUFBUSxtRUFBbUUsMENBQTBDLHlHQUF5Ryx1Q0FBdUMsaUNBQWlDLDZEQUE2RCxtRUFBbUUsNERBQTRELDRFQUE0RSxPQUFPLG9CQUFvQixLQUFLLHNEQUFzRCx3QkFBd0IsOEJBQThCLEtBQUssb0NBQW9DLDRCQUE0Qiw0REFBNEQsZ0JBQWdCLGlFQUFpRSxnQkFBZ0IsK0RBQStELGdCQUFnQixPQUFPLEtBQUssbUNBQW1DLHlGQUF5Riw4REFBOEQsT0FBTyxLQUFLLG9DQUFvQyxrQkFBa0IsNkdBQTZHLDRCQUE0QiwyQkFBMkIsaUNBQWlDLDRCQUE0Qix1Q0FBdUMsOEJBQThCLHdCQUF3QixvQ0FBb0MsOEJBQThCLHVDQUF1Qyw4REFBOEQsaUJBQWlCLCtCQUErQiw4Q0FBOEMsb0JBQW9CLDRFQUE0RSxFQUFFLFNBQVMsUUFBUSxvRUFBb0UsaUJBQWlCLCtCQUErQiw4Q0FBOEMsb0JBQW9CLHdFQUF3RSxFQUFFLFNBQVMsUUFBUSxxRUFBcUUsaURBQWlELGdDQUFnQyxTQUFTLHNDQUFzQyxRQUFRLEtBQUssRUFBRSxpQ0FBaUMsbUJBQW1CLGtDQUFrQyxrQkFBa0IsTUFBTSwrQkFBK0IsZUFBZSwrQkFBK0IsdURBQXVELHVCQUF1QixvQkFBb0IsT0FBTywrRUFBK0UsTUFBTSxrREFBa0QsY0FBYyxpQkFBaUIsaUVBQWlFLDZCQUE2QixnREFBZ0QsT0FBTyxFQUFFLHNFQUFzRSxzR0FBc0csbURBQW1ELGlEQUFpRCwyQ0FBMkMsU0FBUyxFQUFFLE9BQU8sb0JBQW9CLE1BQU0seUNBQXlDLGtEQUFrRCw4REFBOEQsaUVBQWlFLHNDQUFzQywwQkFBMEIsU0FBUyxHQUFHLHNEQUFzRCwrQ0FBK0Msa0RBQWtELDREQUE0RCxTQUFTLEVBQUUsT0FBTyx3Q0FBd0Msa0JBQWtCLG9CQUFvQixNQUFNLG1EQUFtRCxvREFBb0Qsa0NBQWtDLDJCQUEyQixnSEFBZ0gsb0RBQW9ELDJDQUEyQyx5RUFBeUUsU0FBUyxpQ0FBaUMsMkRBQTJELFNBQVMsc0JBQXNCLFFBQVEsb0JBQW9CLE1BQU0sa0NBQWtDLGdFQUFnRSx1REFBdUQsMERBQTBELHdEQUF3RCxpR0FBaUcsMkVBQTJFLFNBQVMsNENBQTRDLE9BQU8scUNBQXFDLHNDQUFzQyx3REFBd0QsTUFBTSx1RkFBdUYsTUFBTSxTQUFTLE9BQU8sT0FBTyw0QkFBNEIsK0JBQStCLE9BQU8saUNBQWlDLHVEQUF1RCx3REFBd0QsZ0RBQWdELFdBQVcsZ0JBQWdCLHVHQUF1RyxnQkFBZ0IsT0FBTyxvQkFBb0IsTUFBTSwwQ0FBMEMsdUJBQXVCLHNCQUFzQixpREFBaUQsaURBQWlELHlCQUF5QixPQUFPLFFBQVEsb0JBQW9CLE1BQU0sMkNBQTJDLHVCQUF1QixzQkFBc0IsaURBQWlELG1EQUFtRCx5QkFBeUIsT0FBTyxRQUFRLG9CQUFvQixNQUFNLGlEQUFpRCxnREFBZ0Qsc0NBQXNDLGlCQUFpQixtQkFBbUIsb0RBQW9ELGtDQUFrQyx5QkFBeUIsdUJBQXVCLGtEQUFrRCx5QkFBeUIsaUNBQWlDLFVBQVUsdUZBQXVGLGVBQWUsZ0RBQWdELDRCQUE0QiwrQkFBK0IsYUFBYSxXQUFXLDRDQUE0QyxpREFBaUQsV0FBVyxVQUFVLG9DQUFvQyxnSkFBZ0oscUVBQXFFLDZDQUE2QyxPQUFPLDRCQUE0Qix5Q0FBeUMsT0FBTyxPQUFPLDRDQUE0QyxPQUFPLG9CQUFvQixNQUFNLHFDQUFxQyxnQ0FBZ0MsdUNBQXVDLE9BQU8sT0FBTyxxQ0FBcUMsT0FBTyxvQkFBb0IsTUFBTSx3REFBd0QsdUVBQXVFLDJCQUEyQixpQ0FBaUMsT0FBTyx3Q0FBd0Msa0NBQWtDLHVCQUF1QiwrQ0FBK0MseUJBQXlCLHlFQUF5RSw0QkFBNEIsK0RBQStELEVBQUUsc0NBQXNDLCtCQUErQixzREFBc0QsbUNBQW1DLFNBQVMsT0FBTyxHQUFHLDBCQUEwQix3QkFBd0IsMkNBQTJDLGdEQUFnRCxxREFBcUQsZ0RBQWdELHlGQUF5RixFQUFFLDBCQUEwQiwwRkFBMEYsK0VBQStFLFNBQVMsd0VBQXdFLGtEQUFrRCxtUEFBbVAsK0NBQStDLFNBQVMsRUFBRSxzRUFBc0UsOEJBQThCLHFDQUFxQyx3QkFBd0IsU0FBUyx1QkFBdUIsUUFBUSxxQkFBcUIsNEVBQTRFLDZDQUE2QyxxQkFBcUIsdURBQXVELHNEQUFzRCxVQUFVLHNDQUFzQyx1REFBdUQsVUFBVSxPQUFPLG9CQUFvQixNQUFNLG9EQUFvRCxrQkFBa0IsTUFBTSxrREFBa0QsZ0JBQWdCLGdFQUFnRSx1Q0FBdUMsTUFBTSxvQ0FBb0Msa0pBQWtKLE1BQU0sa09BQWtPLE9BQU8sbUlBQW1JLDZFQUE2RSwrQkFBK0IsZ0NBQWdDLGdCQUFnQixvQ0FBb0MsS0FBSyxFQUFFLDZLQUE2SyxPQUFPLHdFQUF3RSxPQUFPLDROQUE0TixjQUFjLHVFQUF1RSxLQUFLLEVBQUUscUtBQXFLLE9BQU8sd0VBQXdFLE9BQU8sZ09BQWdPLGNBQWMsdUVBQXVFLEtBQUssRUFBRSx3S0FBd0ssT0FBTyx3RUFBd0UsT0FBTywrTkFBK04sY0FBYyx1RUFBdUUsS0FBSyxFQUFFLDJPQUEyTyxnQ0FBZ0MsdVNBQXVTLGdDQUFnQyxvR0FBb0csUUFBUSxpTUFBaU0sT0FBTyw4SEFBOEgsMk5BQTJOLGdDQUFnQyxnSkFBZ0osdU5BQXVOLGdDQUFnQyxzU0FBc1MsZ0NBQWdDLG9HQUFvRyxRQUFRLGlNQUFpTSxPQUFPLHdIQUF3SCwwQ0FBMEMsNEJBQTRCLE9BQU8sS0FBSyxFQUFFLHFQQUFxUCxnQ0FBZ0MsMlNBQTJTLGdDQUFnQyxvR0FBb0csUUFBUSx3TUFBd00sT0FBTyx1SUFBdUksdVBBQXVQLGdDQUFnQyw2U0FBNlMsZ0NBQWdDLG9HQUFvRyxRQUFRLDJNQUEyTSxPQUFPLHlJQUF5SSw0TkFBNE4sZ0NBQWdDLDZTQUE2UyxnQ0FBZ0Msb0dBQW9HLFFBQVEsMk1BQTJNLE9BQU8sZ0lBQWdJLDBDQUEwQyw0QkFBNEIscURBQXFELGtDQUFrQywrRUFBK0UsK0JBQStCLFNBQVMsR0FBRyxnRkFBZ0Ysa0NBQWtDLFNBQVMsR0FBRyxPQUFPLEtBQUssRUFBRSxxT0FBcU8sZ0NBQWdDLHVKQUF1SixxT0FBcU8sZ0NBQWdDLG1UQUFtVCxnQ0FBZ0Msb0dBQW9HLFFBQVEsb05BQW9OLE9BQU8sd0lBQXdJLDhPQUE4TyxnQ0FBZ0MsNkpBQTZKLG1PQUFtTyxnQ0FBZ0MsaVRBQWlULGdDQUFnQyxvR0FBb0csUUFBUSxnTkFBZ04sT0FBTyx1SUFBdUksd0NBQXdDLDBEQUEwRCxPQUFPLEtBQUssRUFBRSw0T0FBNE8sZ0NBQWdDLDJKQUEySiwrUkFBK1IsZ0NBQWdDLGdHQUFnRyw4QkFBOEIseUNBQXlDLElBQUksbVNBQW1TLDhCQUE4Qix5Q0FBeUMsSUFBSSw4TkFBOE4sZ0NBQWdDLG9HQUFvRyxRQUFRLGdOQUFnTixPQUFPLHVJQUF1SSx3REFBd0QsMEJBQTBCLDJEQUEyRCxrR0FBa0csc0JBQXNCLGlHQUFpRyxTQUFTLE9BQU8sS0FBSyxFQUFFLCtQQUErUCxnQ0FBZ0MsNkpBQTZKLG1DQUFtQyxzQ0FBc0MsT0FBTyxLQUFLLEVBQUUseUNBQXlDLEdBQUcsRUFBRSwwQkFBMEIsa0VBQWtFLHNDQUFzQywyQ0FBMkM7O0FBRXBpMUIsT0FBTztBQUNQO0FBQ0E7O0FBRUEsaUNBQWlDLDJHQUEyRyx5REFBeUQsc0NBQXNDLDZDQUE2QywyRUFBMkUsNENBQTRDLDREQUE0RCxTQUFTLHlDQUF5QyxPQUFPLEVBQUUsS0FBSyxvQ0FBb0MscUJBQXFCLHVCQUF1QixpQ0FBaUMsbUJBQW1CLHNDQUFzQyx1Q0FBdUMsT0FBTyxNQUFNLGdDQUFnQyxrQkFBa0IsTUFBTSwrQkFBK0Isa0JBQWtCLE1BQU0sZ0NBQWdDLHVFQUF1RSwrQkFBK0IsTUFBTSwrQkFBK0IsMENBQTBDLHdEQUF3RCxNQUFNLCtCQUErQix3REFBd0QsTUFBTSwrQkFBK0IsNEJBQTRCLE1BQU0sa0NBQWtDLG1EQUFtRCxNQUFNLGtDQUFrQyxtREFBbUQsTUFBTSxpQ0FBaUMscUZBQXFGLE1BQU0sR0FBRyxFQUFFLGdDQUFnQyxzQ0FBc0MsMkNBQTJDOztBQUVqckQsT0FBTztBQUNQO0FBQ0E7O0FBRUEsd0VBQXdFLG1FQUFtRSw4QkFBOEIsOEZBQThGLCtDQUErQyw0Q0FBNEMsdURBQXVELG9EQUFvRCx1RUFBdUUsK0NBQStDLDZEQUE2RCxtREFBbUQscUVBQXFFLDhDQUE4QyxrREFBa0QsaUVBQWlFLG9DQUFvQywrRkFBK0Ysc0RBQXNELHNDQUFzQyxrRUFBa0UsbURBQW1ELHVFQUF1RSx5Q0FBeUMsK0RBQStELDZDQUE2QyxPQUFPLGtCQUFrQiw4Q0FBOEMsRUFBRSx5QkFBeUIsS0FBSyxpREFBaUQsa0NBQWtDLHdCQUF3QixrQkFBa0IsNEJBQTRCLDBCQUEwQixxQ0FBcUMscUNBQXFDLGtCQUFrQiwyQkFBMkIsd0JBQXdCLHVDQUF1QyxrREFBa0QsOENBQThDLHFGQUFxRixTQUFTLHVEQUF1RCwyQkFBMkIsU0FBUyxFQUFFLE9BQU8sRUFBRSxxQ0FBcUMsaUNBQWlDLG1DQUFtQyxpQ0FBaUMseUZBQXlGLFFBQVEsd0NBQXdDLGdCQUFnQiwrQkFBK0IscUNBQXFDLFdBQVcseUNBQXlDLG9CQUFvQiwrQkFBK0Isc0NBQXNDLFdBQVcseUNBQXlDLHlCQUF5QiwrQkFBK0IsNENBQTRDLDZCQUE2QixpRkFBaUYsa0VBQWtFLGlFQUFpRSxhQUFhLFdBQVcsU0FBUyxPQUFPLEVBQUUsNkNBQTZDLHVDQUF1QyxRQUFRLEtBQUssSUFBSSxtQ0FBbUMsK0JBQStCLDZCQUE2Qiw0QkFBNEIsd0JBQXdCLHFEQUFxRCxvQkFBb0IsTUFBTSwwaEJBQTBoQix1R0FBdUcscUJBQXFCLE9BQU8scURBQXFELFNBQVMsZ0pBQWdKLDJDQUEyQyxnQ0FBZ0MsOEJBQThCLGlCQUFpQix1WkFBdVosdUNBQXVDLHNCQUFzQixvQkFBb0IsZ0RBQWdELHNFQUFzRSxvRkFBb0YsaUdBQWlHLHVGQUF1RiwyQkFBMkIsaUlBQWlJLDRHQUE0RyxXQUFXLEVBQUUsMklBQTJJLHdKQUF3SixnREFBZ0QsMEJBQTBCLGdEQUFnRCxzR0FBc0cseUNBQXlDLDJEQUEyRCxhQUFhLEVBQUUsd0JBQXdCLGlHQUFpRyxXQUFXLFNBQVMsRUFBRSw4Q0FBOEMsMkRBQTJELG1HQUFtRyx3Q0FBd0Msa0ZBQWtGLGtLQUFrSywyQkFBMkIsaUlBQWlJLDRHQUE0RyxXQUFXLEVBQUUsb0ZBQW9GLDJHQUEyRyx5Q0FBeUMsMkRBQTJELGFBQWEsRUFBRSxrRUFBa0UsV0FBVyxPQUFPLDJGQUEyRix5SUFBeUksZ0RBQWdELGVBQWUsYUFBYSxvREFBb0QsOENBQThDLFdBQVcsU0FBUyxFQUFFLE9BQU8sK0NBQStDLG9CQUFvQixNQUFNLHFEQUFxRCx3REFBd0Qsa0VBQWtFLCtEQUErRCxvQkFBb0IsT0FBTyxrR0FBa0csMENBQTBDLGlCQUFpQiwwREFBMEQsaUZBQWlGLDBHQUEwRyxxRkFBcUYscUNBQXFDLDZCQUE2QiwrREFBK0QsU0FBUyxPQUFPLE9BQU8sMkJBQTJCLDZKQUE2SixFQUFFLE9BQU8sb0JBQW9CLE1BQU0seUNBQXlDLGdEQUFnRCx5REFBeUQsMERBQTBELCtFQUErRSxzQkFBc0IsOEVBQThFLDZEQUE2RCwyQkFBMkIsd0JBQXdCLG1EQUFtRCwyQ0FBMkMsK0NBQStDLGtHQUFrRywrQkFBK0IsMkJBQTJCLHFFQUFxRSw0Q0FBNEMsNEhBQTRILFNBQVMsT0FBTyxHQUFHLHlEQUF5RCxvQkFBb0IsTUFBTSxxQ0FBcUMsa0JBQWtCLHlDQUF5QywyREFBMkQsZ0hBQWdILDhDQUE4QyxXQUFXLFNBQVMsRUFBRSxPQUFPLHdEQUF3RCxpREFBaUQsNkJBQTZCLDJDQUEyQyw2REFBNkQseURBQXlELDBCQUEwQixnREFBZ0Qsb0NBQW9DLDRDQUE0QyxhQUFhLEVBQUUsV0FBVyxvREFBb0QsNkRBQTZELHlDQUF5QyxhQUFhLEVBQUUsV0FBVyxTQUFTLHdCQUF3Qix3RUFBd0UsRUFBRSxPQUFPLEVBQUUsOERBQThELG9DQUFvQyx3REFBd0QseUNBQXlDLHVEQUF1RCxrQ0FBa0Msc0NBQXNDLHdGQUF3RiwyREFBMkQscUNBQXFDLFdBQVcsRUFBRSxTQUFTLE9BQU8sRUFBRSxNQUFNLG1DQUFtQyxjQUFjLDJEQUEyRCxNQUFNLHdDQUF3QywrREFBK0QsTUFBTSwrQkFBK0IsbUNBQW1DLDhDQUE4QyxNQUFNLCtCQUErQiw4QkFBOEIsOENBQThDLE1BQU0sbUZBQW1GLG9EQUFvRCwrREFBK0QsK0ZBQStGLEtBQUssRUFBRSxvRkFBb0Ysa0JBQWtCLHVDQUF1QyxvQ0FBb0MsS0FBSyxFQUFFLHdDQUF3QyxrQkFBa0IsdUNBQXVDLG9DQUFvQyxLQUFLLEVBQUUsR0FBRyxFQUFFLDhCQUE4QixzQ0FBc0MsMkNBQTJDOztBQUUvM1osT0FBTztBQUNQO0FBQ0E7O0FBRUEsc0VBQXNFLDhCQUE4Qiw0SEFBNEgsK0NBQStDLG9DQUFvQywyQ0FBMkMsc0JBQXNCLHVFQUF1RSxtQ0FBbUMsSUFBSSw4REFBOEQsNEJBQTRCLHVEQUF1RCw4REFBOEQsRUFBRSwyQ0FBMkMsU0FBUyxPQUFPLFVBQVUsMkJBQTJCLEtBQUssK0JBQStCLDZCQUE2Qiw2QkFBNkIsbUNBQW1DLG9DQUFvQyw0REFBNEQsTUFBTSw2Q0FBNkMsc0VBQXNFLDhCQUE4QixHQUFHLE1BQU0sR0FBRyxHQUFHLGtDQUFrQyxzQ0FBc0MsMkNBQTJDOztBQUU3d0M7QUFDQSIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge30sXG4vKioqKioqLyBcdFx0XHRpZDogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4vKioqKioqLyBcdFx0fTtcblxuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cblxuXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9idWlsZC9cIjtcblxuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cblxuLyoqKi8gfSxcbi8qIDEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdGV2YWwoXCJ2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oMilbJ2RlZmF1bHQnXTtcXG5cXG4vKipcXG4gKiBCb290IGZpbGUgZm9yIHRoZSBQbGF5IGxpYnJhcnkuXFxuICpcXG4gKiBAbW9kdWxlXFxuICpcXG4gKiBAYXV0aG9yIE1pY2FoIFJvbG9uIDxtaWNhaEBnaW5hc2luay5jb20+XFxuICpcXG4gKiBAcmVxdWlyZXMgalFFeHRlbnRpb25zXFxuICogQHJlcXVpcmVzIHBsYXlcXG4gKi9cXG5cXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xcblxcbnZhciBfcGxheSA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xcblxcbnZhciBfcGxheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wbGF5KTtcXG5cXG4vKipcXG4gKiBCZWdpbiBydW5uaW5nIHRoZSBsaWJyYXJ5XFxuICovXFxuZnVuY3Rpb24gcnVuKCkge1xcbiAgX3BsYXkyWydkZWZhdWx0J10uZ2FtZS5ydW4oKTtcXG59XFxuXFxuLy8gZXhwb3J0IG5hbWVzcGFjZSB0byBnbG9iYWwgb2JqZWN0LlxcbndpbmRvdy5wbGF5ID0gd2luZG93LnBsID0gX3BsYXkyWydkZWZhdWx0J107XFxuXFxuLy8gSW52b2tlICdydW4nIHdoZW4gRE9NIGhhcyBmaW5pc2hlZCBsb2FkaW5nLlxcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBydW4sIGZhbHNlKTsvL0Agc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOXpiM1Z5WTJVdmJXRnBiaTVxY3o4Mk5EZ3dJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdPenM3YjBKQlZVOHNRMEZCWXpzN1owTkJRMG9zUlVGQlRUczdPenM3T3p0QlFVdDJRaXhUUVVGVExFZEJRVWNzUjBGQlNUdEJRVU5tTEc5Q1FVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF6dERRVU5vUWpzN08wRkJSMFFzVFVGQlRTeERRVUZETEVsQlFVa3NSMEZCUnl4TlFVRk5MRU5CUVVNc1JVRkJSU3h2UWtGQlR5eERRVUZET3pzN1FVRkhMMElzVVVGQlVTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExHdENRVUZyUWl4RlFVRkZMRWRCUVVjc1JVRkJSU3hMUVVGTExFTkJRVU1pTENKbWFXeGxJam9pTVM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dRbTl2ZENCbWFXeGxJR1p2Y2lCMGFHVWdVR3hoZVNCc2FXSnlZWEo1TGx4dUlDcGNiaUFxSUVCdGIyUjFiR1ZjYmlBcVhHNGdLaUJBWVhWMGFHOXlJRTFwWTJGb0lGSnZiRzl1SUR4dGFXTmhhRUJuYVc1aGMybHVheTVqYjIwK1hHNGdLbHh1SUNvZ1FISmxjWFZwY21WeklHcFJSWGgwWlc1MGFXOXVjMXh1SUNvZ1FISmxjWFZwY21WeklIQnNZWGxjYmlBcUwxeHVhVzF3YjNKMElDZHFVVVY0ZEdWdWRHbHZibk1uTzF4dWFXMXdiM0owSUhCc1lYa2dabkp2YlNBbmNHeGhlU2M3WEc1Y2JpOHFLbHh1SUNvZ1FtVm5hVzRnY25WdWJtbHVaeUIwYUdVZ2JHbGljbUZ5ZVZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJ5ZFc0Z0tDa2dlMXh1WEhSd2JHRjVMbWRoYldVdWNuVnVLQ2s3WEc1OVhHNWNiaTh2SUdWNGNHOXlkQ0J1WVcxbGMzQmhZMlVnZEc4Z1oyeHZZbUZzSUc5aWFtVmpkQzVjYm5kcGJtUnZkeTV3YkdGNUlEMGdkMmx1Wkc5M0xuQnNJRDBnY0d4aGVUdGNibHh1THk4Z1NXNTJiMnRsSUNkeWRXNG5JSGRvWlc0Z1JFOU5JR2hoY3lCbWFXNXBjMmhsWkNCc2IyRmthVzVuTGx4dVpHOWpkVzFsYm5RdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblJFOU5RMjl1ZEdWdWRFeHZZV1JsWkNjc0lISjFiaXdnWm1Gc2MyVXBPMXh1WEc1Y2JseHVMeW9xSUZkRlFsQkJRMHNnUms5UFZFVlNJQ29xWEc0Z0tpb2dMaTl6YjNWeVkyVXZiV0ZwYmk1cWMxeHVJQ29xTHlKZExDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVwiKTtcblxuLyoqKi8gfSxcbi8qIDIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdGV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7Ly9AIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTkrTDJKaFltVnNMWEoxYm5ScGJXVXZhR1ZzY0dWeWN5OXBiblJsY205d0xYSmxjWFZwY21VdFpHVm1ZWFZzZEM1cWN6OHpPRFZpSWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQklpd2labWxzWlNJNklqSXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKbGNYVnBjbVVvWENJdUwybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQzVxYzF3aUtUdGNibHh1WEc0dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQXFLaUJYUlVKUVFVTkxJRVpQVDFSRlVseHVJQ29xSUM0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12YVc1MFpYSnZjQzF5WlhGMWFYSmxMV1JsWm1GMWJIUXVhbk5jYmlBcUtpQnRiMlIxYkdVZ2FXUWdQU0F5WEc0Z0tpb2diVzlrZFd4bElHTm9kVzVyY3lBOUlEQmNiaUFxS2k4aVhTd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSxcbi8qIDMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdGV2YWwoXCJcXFwidXNlIHN0cmljdFxcXCI7XFxuXFxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcXG5cXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAob2JqKSB7XFxuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xcbiAgICBkZWZhdWx0OiBvYmpcXG4gIH07XFxufTsvL0Agc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMMkpoWW1Wc0xYSjFiblJwYldVdmFHVnNjR1Z5Y3k5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUXVhbk0vT1RBM1l5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2labWxzWlNJNklqTXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKY0luVnpaU0J6ZEhKcFkzUmNJanRjYmx4dVpYaHdiM0owY3k1ZlgyVnpUVzlrZFd4bElEMGdkSEoxWlR0Y2JseHVaWGh3YjNKMGN5NWtaV1poZFd4MElEMGdablZ1WTNScGIyNGdLRzlpYWlrZ2UxeHVJQ0J5WlhSMWNtNGdiMkpxSUNZbUlHOWlhaTVmWDJWelRXOWtkV3hsSUQ4Z2IySnFJRG9nZTF4dUlDQWdJR1JsWm1GMWJIUTZJRzlpYWx4dUlDQjlPMXh1ZlR0Y2JseHVYRzR2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmlBcUtpQlhSVUpRUVVOTElFWlBUMVJGVWx4dUlDb3FJQzR2Zmk5aVlXSmxiQzF5ZFc1MGFXMWxMMmhsYkhCbGNuTXZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwTG1welhHNGdLaW9nYlc5a2RXeGxJR2xrSUQwZ00xeHVJQ29xSUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3WEc0Z0tpb3ZJbDBzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XCIpO1xuXG4vKioqLyB9LFxuLyogNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0ZXZhbChcInZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKVsnZGVmYXVsdCddO1xcblxcbi8qKlxcbiAqIEV4dGVudGlvbnMgdG8galF1ZXJ5IHVzZWQgYnkgdGhlIGxpYnJhcnkuXFxuICogXFxuICogQG1vZHVsZVxcbiAqIEBhdXRob3IgTWljYWggUm9sb24gPG1pY2FoQGdpbmFzaW5rLmNvbT5cXG4gKlxcbiAqIEByZXF1aXJlcyB0eXBlcy9EaW1lbnNpb25zXFxuICogQHJlcXVpcmVzIE1hdHJpeFxcbiAqL1xcblxcbnZhciBfdHlwZXNEaW1lbnNpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcXG5cXG52YXIgX2xpYk1hdHJpeCA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xcblxcbnZhciBfbGliTWF0cml4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xpYk1hdHJpeCk7XFxuXFxuLyoqXFxuICogalF1ZXJ5J3MgcHJvdG90eXBlXFxuICogQGV4dGVybmFsIGpRdWVyeVxcbiAqIEBzZWUge0BsaW5rIGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS99XFxuICovXFxuXFxuKGZ1bmN0aW9uICgpIHtcXG5cXHQvKipcXG4gICogUmVzb2x2ZXMgdGhlIHNjb3BlIGZvciBlYWNoIG9mIHRoZSBzZXQgb2YgbWF0Y2hlZCBub2Rlcy5cXG4gICogQGZ1bmN0aW9uIGV4dGVybmFsOmpRdWVyeSNzY29wZVxcbiAgKiBAcmV0dXJucyB7U2NvcGV8YXJyYXl9IFNjb3BlIC0gZm9yIDEgcmVzdWx0LiBhcnJheSAtIGZvciBtdWx0aXBsZS5cXG4gICovXFxuXFx0dGhpcy5zY29wZSA9IGZ1bmN0aW9uICgpIHtcXG5cXHRcXHR2YXIgcmVzdWx0O1xcblxcblxcdFxcdHJlc3VsdCA9IFtdO1xcblxcblxcdFxcdHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XFxuXFx0XFx0XFx0dmFyICRub2RlLCBzY29wZTtcXG5cXG5cXHRcXHRcXHQkbm9kZSA9ICQodGhpcyk7XFxuXFx0XFx0XFx0c2NvcGUgPSAkbm9kZS5kYXRhKCdwbC1zY29wZScpO1xcblxcblxcdFxcdFxcdGlmICghc2NvcGUpIHtcXG5cXHRcXHRcXHRcXHRzY29wZSA9ICRub2RlLmNsb3Nlc3QoJy5wbC1zY29wZScpLmRhdGEoJ3BsLXNjb3BlJyk7XFxuXFx0XFx0XFx0fVxcblxcblxcdFxcdFxcdGlmIChzY29wZSkgcmVzdWx0LnB1c2goc2NvcGUpO1xcblxcdFxcdH0pO1xcblxcblxcdFxcdHJldHVybiByZXN1bHQubGVuZ3RoID4gMSA/IHJlc3VsdCA6IHJlc3VsdFswXTtcXG5cXHR9O1xcblxcblxcdC8qKlxcbiAgKiBSZXNvbHZlcyB0aGUgaWQgb24gdGhlIGZpcnN0IG5vZGUgaW4gdGhlIGNvbGxlY3Rpb24uIFRoZSBpZCBjYW4gYmUgc291cmNlZCBmcm9tIGEgbm9kZSdzICdpZCcsICdwbC1pZCcgb3IgJ3BsLWNvbXBvbmVudCcgYXJndW1lbnRzLlxcbiAgKiBAZnVuY3Rpb24gZXh0ZXJuYWw6alF1ZXJ5I2lkXFxuICAqIEBhcmcge3N0cmluZ30gW19zZXRdIE5hbWUgdG8gc2V0IGFzIHRoZSBub2RlJ3MgaWQuXFxuICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSByZXNvbHZlZCBpZC5cXG4gICovXFxuXFx0dGhpcy5pZCA9IGZ1bmN0aW9uIChfc2V0KSB7XFxuXFx0XFx0aWYgKF9zZXQgIT09IHVuZGVmaW5lZCkge1xcblxcdFxcdFxcdC8vIFJlbW92ZSBhdHRyaWJ1dGUuXFxuXFx0XFx0XFx0aWYgKH5bJycsIG51bGxdLmluZGV4T2YoX3NldCkpIHtcXG5cXHRcXHRcXHRcXHR0aGlzLmF0dHIoJ2lkJywgbnVsbCk7XFxuXFx0XFx0XFx0XFx0cmV0dXJuIHRoaXM7XFxuXFx0XFx0XFx0fVxcblxcblxcdFxcdFxcdC8vIElmIGRvY3VtZW50IGFscmVhZHkgaGFzIHRoZSBpZCBkZWZpbmVkIHRoZW4gc2V0IGFzIGEgdW5pcXVlIGxpYnJhcnkgaWQuXFxuXFx0XFx0XFx0aWYgKCQoX3NldCkubGVuZ3RoKSB7XFxuXFx0XFx0XFx0XFx0dGhpcy5hdHRyKCdwbC1pZCcsIF9zZXQpO1xcblxcdFxcdFxcdH0gZWxzZSB7XFxuXFx0XFx0XFx0XFx0dGhpcy5hdHRyKCdpZCcsIF9zZXQpO1xcblxcdFxcdFxcdH1cXG5cXHRcXHR9XFxuXFxuXFx0XFx0cmV0dXJuIHRoaXMuYXR0cignaWQnKSB8fCB0aGlzLmF0dHIoJ3BsLWlkJykgfHwgdGhpcy5hdHRyKCdwbC1jb21wb25lbnQnKTtcXG5cXHR9O1xcblxcblxcdC8qKlxcbiAgKiBQcm92aWRlcyB0aGUgJ3JlbGF0aXZlJyBDU1Mgc2VsZWN0b3IgZm9yIHRoZSBmaXJzdCBub2RlIGluIHRoZSBjb2xsZWN0aW9uLlxcbiAgKiBAZnVuY3Rpb24gZXh0ZXJuYWw6alF1ZXJ5I2FkZHJlc3NcXG4gICogQHJldHVybnMge3N0cmluZ31cXG4gICpcXG4gICogQGV4YW1wbGVcXG4gICogLy8gSFRNTDogPGRpdiBpZD1cXFwic3dlYXRlclxcXCIgY2xhc3M9XFxcIndpZGVcXFwiPjwvZGl2PlxcbiAgKiAkKCcjc3dlYXRlcicpLmFkZHJlc3MoKSAvLyBkaXYjc3dlYXRlci53aWRlXFxuICAqL1xcblxcdHRoaXMuYWRkcmVzcyA9IGZ1bmN0aW9uICgpIHtcXG5cXHRcXHR2YXIgdGFnLCBpZCwgY2xhc3NlcztcXG5cXG5cXHRcXHR0YWcgPSB0aGlzWzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XFxuXFx0XFx0aWQgPSB0aGlzLmF0dHIoJ2lkJyk7XFxuXFx0XFx0Y2xhc3NlcyA9IHRoaXMuYXR0cignY2xhc3MnKSA/ICcuJyArIHRoaXMuYXR0cignY2xhc3MnKS5zcGxpdCgnICcpLmpvaW4oJy4nKSA6ICcnO1xcblxcblxcdFxcdHJldHVybiB0YWcgKyAoaWQgPyAnIycgKyBpZCA6ICcnKSArIGNsYXNzZXM7XFxuXFx0fTtcXG5cXG5cXHQvKipcXG4gICogUHJvdmlkZXMgYSBub2RlJ3MgVVBQRVIgQ0FTRSBjbGFzcyBuYW1lcy4gR2l2ZW4gJ190ZXN0JyBpdCB3aWxsIGNoZWNrIGlmIHRoZSBub2RlIGhhcyB0aGUgY2xhc3MuXFxuICAqIEBmdW5jdGlvbiBleHRlcm5hbDpqUXVlcnkjc3RhdGVcXG4gICogQGFyZyB7c3RyaW5nfSBbX3Rlc3RdIFRoZSBVUFBFUiBDQVNFIGNsYXNzIG5hbWUgdG8gdGVzdCBvbiB0aGUgZmlyc3Qgbm9kZSBpbiB0aGUgY29sbGVjdGlvbi5cXG4gICogQHJldHVybnMge3N0cmluZ3xhcnJheXxib29sZWFufSBzdHJpbmcgLSBmb3Igb25lIHJlc3VsdC4gYXJyYXkgLSBmb3IgbXVsdGlwbGUuIGJvb2xlYW4gLSBmb3IgdGVzdHMuXFxuICAqL1xcblxcdHRoaXMuc3RhdGUgPSBmdW5jdGlvbiAoX3Rlc3QpIHtcXG5cXHRcXHR2YXIgY2xhc3NlcztcXG5cXG5cXHRcXHRpZiAoX3Rlc3QpIHJldHVybiB0aGlzLmhhc0NsYXNzKF90ZXN0LnRvVXBwZXJDYXNlKCkpO1xcblxcblxcdFxcdGNsYXNzZXMgPSAodGhpcy5hdHRyKCdjbGFzcycpIHx8ICcnKS5tYXRjaCgvWzAtOUEtWl0rKD86LVswLTlBLVpdKyk/L2cpO1xcblxcblxcdFxcdHJldHVybiBjbGFzc2VzICYmIChjbGFzc2VzLmxlbmd0aCA9PT0gMSA/IGNsYXNzZXNbMF0gOiBjbGFzc2VzKTtcXG5cXHR9O1xcblxcblxcdC8qKlxcbiAgKiBQcm92aWRlcyB0aGUgalF1ZXJ5IG9mZnNldCBmb3IgdGhlIGZpcnN0IG5vZGUgaW4gdGhlIGNvbGxlY3Rpb24uXFxuICAqIEdpdmVuIGEgcG9pbnQsIGFsbCBub2RlcyBpbiB0aGUgY29sbGVjdGlvbiB3aWxsIGdldCB7cG9zaXRpb246IGFic29sdXRlO30gdG8gdGhlIGNvcnJkaW5hdGVzLlxcbiAgKiBAZnVuY3Rpb24gZXh0ZXJuYWw6alF1ZXJ5I2Fic29sdXRlUG9zaXRpb25cXG4gICogQHJldHVybnMge1BvaW50fVxcbiAgKi9cXG5cXHR0aGlzLmFic29sdXRlUG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XFxuXFx0XFx0dmFyIG9mZnNldDtcXG5cXG5cXHRcXHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcXG5cXHRcXHRcXHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xcblxcblxcdFxcdFxcdHJldHVybiBfdHlwZXNEaW1lbnNpb25zLlBvaW50LmNyZWF0ZSgpLnNldChvZmZzZXQubGVmdCwgb2Zmc2V0LnRvcCk7XFxuXFx0XFx0fSBlbHNlIHtcXG5cXHRcXHRcXHRvZmZzZXQgPSBfdHlwZXNEaW1lbnNpb25zLlBvaW50LmNyZWF0ZShhcmd1bWVudHMpO1xcblxcblxcdFxcdFxcdHRoaXMuY3NzKHtcXG5cXHRcXHRcXHRcXHRwb3NpdGlvbjogJ2Fic29sdXRlJyxcXG5cXHRcXHRcXHRcXHR0b3A6IG9mZnNldC55LFxcblxcdFxcdFxcdFxcdGxlZnQ6IG9mZnNldC54XFxuXFx0XFx0XFx0fSk7XFxuXFxuXFx0XFx0XFx0cmV0dXJuIG9mZnNldDtcXG5cXHRcXHR9XFxuXFx0fTtcXG5cXG5cXHQvKipcXG4gICogU2V0cyBhIENTUyBtYXRyaXggdHJhbnNmb3JtIG9uIGFsbCBub2RlcyBpbiB0aGUgY29sbGVjdGlvbi4gKG92ZXJsb2FkZWQpXFxuICAqIEBmdW5jdGlvbiBleHRlcm5hbDpqUXVlcnkjdHJhbnNmb3JtXFxuICAqIEBhcmcge251bWJlcn0gW19zY2FsZVhdIC0gc2NhbGUgeFxcbiAgKiBAYXJnIHtudW1iZXJ9IFtfc2hlYXJZXSAtIHNoZWFyIHlcXG4gICogQGFyZyB7bnVtYmVyfSBbX3NoZWFyWF0gLSBzaGVhciB4XFxuICAqIEBhcmcge251bWJlcn0gW19zY2FsZVldIC0gc2NhbGUgeVxcbiAgKiBAYXJnIHtudW1iZXJ9IFtfdHJhbnNsYXRlWF0gLSB0cmFuc2xhdGUgeFxcbiAgKiBAYXJnIHtudW1iZXJ9IFtfdHJhbnNsYXRlWV0gLSB0cmFuc2xhdGUgeVxcbiAgKiBAcmV0dXJucyB7TWF0cml4fVxcbiAgKi9cXG5cXG5cXHQvKipcXG4gICogUHJvdmlkZXMgdGhlIENTUyBtYXRyaXggdHJhbnNmb3JtIGZvciB0aGUgZmlyc3Qgbm9kZSBpbiB0aGUgY29sbGVjdGlvbi5cXG4gICogQGZ1bmN0aW9uIGV4dGVybmFsOmpRdWVyeSN0cmFuc2Zvcm1cXG4gICogQHJldHVybnMge01hdHJpeH1cXG4gICovXFxuXFx0dGhpcy50cmFuc2Zvcm0gPSBmdW5jdGlvbiAoKSB7XFxuXFx0XFx0dmFyIHQsIG1hdHJpeCwgaXMzZDtcXG5cXG5cXHRcXHRtYXRyaXggPSBuZXcgX2xpYk1hdHJpeDJbJ2RlZmF1bHQnXSgpO1xcblxcblxcdFxcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xcblxcdFxcdFxcdHQgPSB0aGlzLmNzcygndHJhbnNmb3JtJyk7XFxuXFx0XFx0XFx0aXMzZCA9ICEhIH50LmluZGV4T2YoJ21hdHJpeDNkJyk7XFxuXFxuXFx0XFx0XFx0aWYgKHQgIT09ICdub25lJykge1xcblxcdFxcdFxcdFxcdHQgPSAoKHQubWF0Y2goL1xcXFwoKFssXFxcXGRcXFxcLlxcXFxzXFxcXC1dKylcXFxcKS8pIHx8IFtdKVsxXSB8fCAnJykuc3BsaXQoL1xcXFxzKixcXFxccyovKTtcXG5cXHRcXHRcXHRcXHRpZiAoaXMzZCkge1xcblxcdFxcdFxcdFxcdFxcdHQgPSAoZnVuY3Rpb24gKF9tYXRyaXgpIHtcXG5cXHRcXHRcXHRcXHRcXHRcXHR2YXIgaSwgcmVzdWx0O1xcblxcblxcdFxcdFxcdFxcdFxcdFxcdHJlc3VsdCA9IFtdO1xcblxcblxcdFxcdFxcdFxcdFxcdFxcdGZvciAoaSA9IDA7IGkgPCBfbWF0cml4Lmxlbmd0aDsgaSArPSA0KSB7XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0cmVzdWx0ID0gcmVzdWx0LmNvbmNhdChfbWF0cml4LnNsaWNlKGksIGkgKyAyKSk7XFxuXFx0XFx0XFx0XFx0XFx0XFx0fVxcblxcdFxcdFxcdFxcdFxcdFxcdHJldHVybiByZXN1bHQ7XFxuXFx0XFx0XFx0XFx0XFx0fSkodCk7XFxuXFx0XFx0XFx0XFx0fVxcblxcblxcdFxcdFxcdFxcdHQgPSB0Lm1hcChwYXJzZUZsb2F0KTtcXG5cXG5cXHRcXHRcXHRcXHRtYXRyaXguc2V0VHJhbnNmb3JtLmFwcGx5KG1hdHJpeCwgdCk7XFxuXFxuXFx0XFx0XFx0XFx0cmV0dXJuIG1hdHJpeDtcXG5cXHRcXHRcXHR9XFxuXFxuXFx0XFx0XFx0cmV0dXJuIHQ7XFxuXFx0XFx0fVxcblxcblxcdFxcdG1hdHJpeC5zZXRUcmFuc2Zvcm0uYXBwbHkobWF0cml4LCBhcmd1bWVudHMpO1xcblxcblxcdFxcdHRoaXMuY3NzKCd0cmFuc2Zvcm0nLCBtYXRyaXgudG9DU1MoKSk7XFxuXFxuXFx0XFx0cmV0dXJuIG1hdHJpeDtcXG5cXHR9O1xcblxcblxcdC8qKlxcbiAgKiBHZXR0ZXIvU2V0dGVyIGZvciB0aGUgQ1NTIHRyYW5zZm9ybSB0cmFuc2xhdGlvbi4gKG92ZXJsb2FkZWQpXFxuICAqIEBmdW5jdGlvbiBleHRlcm5hbDpqUXVlcnkjdHJhbnNmb3JtUG9zaXRpb25cXG4gICogQGFyZyB7UG9pbnR9IF9wb2ludCAtIEEgcG9pbnQgb2JqZWN0IHt4LHl9XFxuICAqIEByZXR1cm5zIHtQb2ludH1cXG4gICovXFxuXFxuXFx0LyoqXFxuICAqIEdldHRlci9TZXR0ZXIgZm9yIHRoZSBDU1MgdHJhbnNmb3JtIHRyYW5zbGF0aW9uLlxcbiAgKiBAZnVuY3Rpb24gZXh0ZXJuYWw6alF1ZXJ5I3RyYW5zZm9ybVBvc2l0aW9uXFxuICAqIEBhcmcge251bWJlcn0gX3ggLSB4IGNvb3JkaW5hdGVcXG4gICogQGFyZyB7bnVtYmVyfSBfeSAtIHkgY29vcmRpbmF0ZVxcbiAgKiBAcmV0dXJucyB7UG9pbnR9XFxuICAqL1xcblxcdHRoaXMudHJhbnNmb3JtUG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XFxuXFx0XFx0dmFyIG1hdHJpeCwgcG9pbnQ7XFxuXFxuXFx0XFx0bWF0cml4ID0gdGhpcy50cmFuc2Zvcm0oKTtcXG5cXHRcXHRwb2ludCA9IF90eXBlc0RpbWVuc2lvbnMuUG9pbnQuY3JlYXRlKCk7XFxuXFxuXFx0XFx0aWYgKG1hdHJpeCAhPT0gJ25vbmUnKSB7XFxuXFx0XFx0XFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XFxuXFx0XFx0XFx0XFx0cG9pbnQuc2V0KG1hdHJpeC5lLCBtYXRyaXguZik7XFxuXFx0XFx0XFx0fSBlbHNlIHtcXG5cXHRcXHRcXHRcXHRtYXRyaXggPSBuZXcgX2xpYk1hdHJpeDJbJ2RlZmF1bHQnXSgpO1xcblxcblxcdFxcdFxcdFxcdHBvaW50LnNldC5hcHBseShwb2ludCwgYXJndW1lbnRzKTtcXG5cXHRcXHRcXHRcXHRtYXRyaXgudHJhbnNsYXRlKHBvaW50LngsIHBvaW50LnkpO1xcblxcdFxcdFxcdH1cXG5cXHRcXHR9XFxuXFxuXFx0XFx0cmV0dXJuIHBvaW50O1xcblxcdH07XFxufSkuY2FsbCgkLmZuKTsvL0Agc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOXpiM1Z5WTJVdmFsRkZlSFJsYm5ScGIyNXpMbXB6UDJFeU1qY2lYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN096czdPekpEUVZNMFFpeERRVUZyUWpzN2NVTkJRek5DTEVWQlFWazdPenM3T3pzN096czdRVUZSTDBJc1EwRkJReXhaUVVGWk96czdPenM3UVVGTldpeExRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRmxCUVZrN1FVRkRlRUlzVFVGQlNTeE5RVUZOTEVOQlFVTTdPMEZCUlZnc1VVRkJUU3hIUVVGSExFVkJRVVVzUTBGQlF6czdRVUZGV2l4TlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGbEJRVms3UVVGRGNrSXNUMEZCU1N4TFFVRkxMRVZCUVVVc1MwRkJTeXhEUVVGRE96dEJRVVZxUWl4UlFVRkxMRWRCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF6dEJRVU5tTEZGQlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZET3p0QlFVVXZRaXhQUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZGTzBGQlExZ3NVMEZCU3l4SFFVRkhMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8wbEJRM0JFT3p0QlFVVkVMRTlCUVVrc1MwRkJTeXhGUVVGRkxFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1IwRkRPVUlzUTBGQlF5eERRVUZET3p0QlFVVklMRk5CUVZFc1RVRkJUU3hEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVkQlFVa3NUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEZRVU5vUkN4RFFVRkRPenM3T3pzN096dEJRVkZHTEV0QlFVa3NRMEZCUXl4RlFVRkZMRWRCUVVjc1ZVRkJWU3hKUVVGSkxFVkJRVVU3UVVGRGVrSXNUVUZCU1N4SlFVRkpMRXRCUVVzc1UwRkJVeXhGUVVGRk96dEJRVVYyUWl4UFFVRkpMRU5CUVVNc1EwRkJReXhGUVVGRkxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRk8wRkJRemxDTEZGQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEzUkNMRmRCUVU4c1NVRkJTU3hEUVVGRE8wbEJRMW83T3p0QlFVZEVMRTlCUVVrc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEUxQlFVMHNSVUZCUlR0QlFVTnVRaXhSUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRKUVVONlFpeE5RVVZKTzBGQlEwb3NVVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdTVUZEZEVJN1IwRkRSRHM3UVVGRlJDeFRRVUZQTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRPMFZCUXpGRkxFTkJRVU03T3pzN096czdPenM3TzBGQlYwWXNTMEZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhaUVVGWk8wRkJRekZDTEUxQlFVa3NSMEZCUnl4RlFVRkZMRVZCUVVVc1JVRkJSU3hQUVVGUExFTkJRVU03TzBGQlJYSkNMRXRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNVVUZCVVN4RFFVRkRMRmRCUVZjc1JVRkJSU3hEUVVGRE8wRkJRM0pETEVsQlFVVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEzSkNMRk5CUVU4c1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4SFFVRkhMRWRCUVVjc1IwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRE96dEJRVVZvUml4VFFVRlBMRWRCUVVjc1NVRkJSU3hGUVVGRkxFZEJRVWNzUjBGQlJ5eEhRVUZETEVWQlFVVXNSMEZCUnl4RlFVRkZMRU5CUVVNc1IwRkJReXhQUVVGUExFTkJRVU03UlVGRGRFTXNRMEZCUXpzN096czdPenM3UVVGUlJpeExRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRlZCUVZVc1MwRkJTeXhGUVVGRk8wRkJRemRDTEUxQlFVa3NUMEZCVHl4RFFVRkRPenRCUVVWYUxFMUJRVWtzUzBGQlN5eEZRVUZGTEU5QlFVOHNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVTXNRMEZCUXpzN1FVRkZja1FzVTBGQlR5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeEZRVUZGTEVWQlFVVXNTMEZCU3l4RFFVRkRMREpDUVVFeVFpeERRVUZETEVOQlFVTTdPMEZCUlhoRkxGTkJRVThzVDBGQlR5eExRVUZMTEU5QlFVOHNRMEZCUXl4TlFVRk5MRXRCUVVzc1EwRkJReXhIUVVGSExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4UFFVRlBMRU5CUVVNc1EwRkJRenRGUVVOb1JTeERRVUZET3pzN096czdPenRCUVZGR0xFdEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1IwRkJSeXhaUVVGWk8wRkJRMjVETEUxQlFVa3NUVUZCVFN4RFFVRkRPenRCUVVWWUxFMUJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNUVUZCVFN4RlFVRkZPMEZCUTNSQ0xGTkJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNN08wRkJSWFpDTEZWQlFVOHNkVUpCUVUwc1RVRkJUU3hGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRVZCUVVVc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBkQlEyNUVMRTFCUlVrN1FVRkRTaXhUUVVGTkxFZEJRVWNzZFVKQlFVMHNUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE96dEJRVVZxUXl4UFFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRE8wRkJRMUlzV1VGQlVTeEZRVUZGTEZWQlFWVTdRVUZEY0VJc1QwRkJSeXhGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzBGQlEySXNVVUZCU1N4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRE8wbEJRMlFzUTBGQlF5eERRVUZET3p0QlFVVklMRlZCUVU4c1RVRkJUU3hEUVVGRE8wZEJRMlE3UlVGRFJDeERRVUZET3pzN096czdPenM3T3pzN096czdPenM3TzBGQmJVSkdMRXRCUVVrc1EwRkJReXhUUVVGVExFZEJRVWNzV1VGQldUdEJRVU0xUWl4TlFVRkpMRU5CUVVNc1JVRkJSU3hOUVVGTkxFVkJRVVVzU1VGQlNTeERRVUZET3p0QlFVVndRaXhSUVVGTkxFZEJRVWNzTkVKQlFWa3NRMEZCUXpzN1FVRkZkRUlzVFVGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRVZCUVVVN1FVRkRkRUlzU1VGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03UVVGRE1VSXNUMEZCU1N4SFFVRkhMRU5CUVVNc1JVRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN08wRkJSV2hETEU5QlFVa3NRMEZCUXl4TFFVRkxMRTFCUVUwc1JVRkJSVHRCUVVOcVFpeExRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1NVRkJTU3hGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETEVsQlFVa3NSVUZCUlN4RlFVRkZMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dEJRVU4wUlN4UlFVRkpMRWxCUVVrc1JVRkJSVHRCUVVOVUxFMUJRVU1zUjBGQlNTeFhRVUZWTEU5QlFVOHNSVUZCUlR0QlFVTjJRaXhWUVVGSkxFTkJRVU1zUlVGQlJTeE5RVUZOTEVOQlFVTTdPMEZCUldRc1dVRkJUU3hIUVVGSExFVkJRVVVzUTBGQlF6czdRVUZGV2l4WFFVRkxMRU5CUVVNc1IwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEU5QlFVOHNRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhKUVVGRkxFTkJRVU1zUlVGQlJUdEJRVU51UXl4aFFVRk5MRWRCUVVjc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdUMEZETjBNN1FVRkRSQ3hoUVVGUExFMUJRVTBzUTBGQlF6dE5RVU5rTEVWQlFVTXNRMEZCUXl4RFFVRkZMRU5CUVVNN1MwRkRUanM3UVVGRlJDeExRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6czdRVUZGZEVJc1ZVRkJUU3hEUVVGRExGbEJRVmtzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE96dEJRVVZ5UXl4WFFVRlBMRTFCUVUwc1EwRkJRenRKUVVOa096dEJRVVZFTEZWQlFVOHNRMEZCUXl4RFFVRkRPMGRCUTFRN08wRkJSVVFzVVVGQlRTeERRVUZETEZsQlFWa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hGUVVGRkxGTkJRVk1zUTBGQlF5eERRVUZET3p0QlFVVTNReXhOUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEZkQlFWY3NSVUZCUlN4TlFVRk5MRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU1zUTBGQlF6czdRVUZGZEVNc1UwRkJUeXhOUVVGTkxFTkJRVU03UlVGRFpDeERRVUZET3pzN096czdPenM3T3pzN096czdPMEZCWjBKR0xFdEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1IwRkJSeXhaUVVGWk8wRkJRM0JETEUxQlFVa3NUVUZCVFN4RlFVRkZMRXRCUVVzc1EwRkJRenM3UVVGRmJFSXNVVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhUUVVGVExFVkJRVVVzUTBGQlF6dEJRVU14UWl4UFFVRkxMRWRCUVVjc2RVSkJRVTBzVFVGQlRTeEZRVUZGTEVOQlFVTTdPMEZCUlhaQ0xFMUJRVWtzVFVGQlRTeExRVUZMTEUxQlFVMHNSVUZCUlR0QlFVTjBRaXhQUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNSVUZCUlR0QlFVTjBRaXhUUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBsQlF6bENMRTFCUlVjN1FVRkRTQ3hWUVVGTkxFZEJRVWNzTkVKQlFWa3NRMEZCUXpzN1FVRkZkRUlzVTBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhGUVVGRkxGTkJRVk1zUTBGQlF5eERRVUZETzBGQlEyeERMRlZCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRmJrTTdSMEZEUkRzN1FVRkZSQ3hUUVVGUExFdEJRVXNzUTBGQlF6dEZRVU5pTEVOQlFVTTdRMEZGUml4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZESWl3aVptbHNaU0k2SWpRdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2JpQXFJRVY0ZEdWdWRHbHZibk1nZEc4Z2FsRjFaWEo1SUhWelpXUWdZbmtnZEdobElHeHBZbkpoY25rdVhHNGdLaUJjYmlBcUlFQnRiMlIxYkdWY2JpQXFJRUJoZFhSb2IzSWdUV2xqWVdnZ1VtOXNiMjRnUEcxcFkyRm9RR2RwYm1GemFXNXJMbU52YlQ1Y2JpQXFYRzRnS2lCQWNtVnhkV2x5WlhNZ2RIbHdaWE12UkdsdFpXNXphVzl1YzF4dUlDb2dRSEpsY1hWcGNtVnpJRTFoZEhKcGVGeHVJQ292WEc1cGJYQnZjblFnZXlCUWIybHVkQ3dnVTJsNlpTQjlJR1p5YjIwZ0ozUjVjR1Z6TDBScGJXVnVjMmx2Ym5Nbk8xeHVhVzF3YjNKMElFMWhkSEpwZUNCbWNtOXRJQ2RzYVdJdmJXRjBjbWw0Snp0Y2JseHVMeW9xWEc0Z0tpQnFVWFZsY25rbmN5QndjbTkwYjNSNWNHVmNiaUFxSUVCbGVIUmxjbTVoYkNCcVVYVmxjbmxjYmlBcUlFQnpaV1VnZTBCc2FXNXJJR2gwZEhBNkx5OWhjR2t1YW5GMVpYSjVMbU52YlM5OVhHNGdLaTljYmx4dUtHWjFibU4wYVc5dUlDZ3BJSHRjYmx4MEx5b3FYRzVjZENBcUlGSmxjMjlzZG1WeklIUm9aU0J6WTI5d1pTQm1iM0lnWldGamFDQnZaaUIwYUdVZ2MyVjBJRzltSUcxaGRHTm9aV1FnYm05a1pYTXVYRzVjZENBcUlFQm1kVzVqZEdsdmJpQmxlSFJsY201aGJEcHFVWFZsY25ramMyTnZjR1ZjYmx4MElDb2dRSEpsZEhWeWJuTWdlMU5qYjNCbGZHRnljbUY1ZlNCVFkyOXdaU0F0SUdadmNpQXhJSEpsYzNWc2RDNGdZWEp5WVhrZ0xTQm1iM0lnYlhWc2RHbHdiR1V1WEc1Y2RDQXFMMXh1WEhSMGFHbHpMbk5qYjNCbElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dVhIUmNkSFpoY2lCeVpYTjFiSFE3WEc1Y2JseDBYSFJ5WlhOMWJIUWdQU0JiWFR0Y2JseHVYSFJjZEhSb2FYTXVaV0ZqYUNobWRXNWpkR2x2YmlBb0tTQjdYRzVjZEZ4MFhIUjJZWElnSkc1dlpHVXNJSE5qYjNCbE8xeHVYRzVjZEZ4MFhIUWtibTlrWlNBOUlDUW9kR2hwY3lsY2JseDBYSFJjZEhOamIzQmxJRDBnSkc1dlpHVXVaR0YwWVNnbmNHd3RjMk52Y0dVbktUdGNibHgwWEhSY2RGeHVYSFJjZEZ4MGFXWWdLQ0Z6WTI5d1pTa2dlMXh1WEhSY2RGeDBYSFJ6WTI5d1pTQTlJQ1J1YjJSbExtTnNiM05sYzNRb0p5NXdiQzF6WTI5d1pTY3BMbVJoZEdFb0ozQnNMWE5qYjNCbEp5azdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkR2xtSUNoelkyOXdaU2tnY21WemRXeDBMbkIxYzJnb2MyTnZjR1VwTzF4dVhIUmNkSDBwTzF4dVhHNWNkRngwY21WMGRYSnVJQ2h5WlhOMWJIUXViR1Z1WjNSb0lENGdNU2tnUHlCeVpYTjFiSFFnT2lCeVpYTjFiSFJiTUYwN1hHNWNkSDA3WEc1Y2JseDBMeW9xWEc1Y2RDQXFJRkpsYzI5c2RtVnpJSFJvWlNCcFpDQnZiaUIwYUdVZ1ptbHljM1FnYm05a1pTQnBiaUIwYUdVZ1kyOXNiR1ZqZEdsdmJpNGdWR2hsSUdsa0lHTmhiaUJpWlNCemIzVnlZMlZrSUdaeWIyMGdZU0J1YjJSbEozTWdKMmxrSnl3Z0ozQnNMV2xrSnlCdmNpQW5jR3d0WTI5dGNHOXVaVzUwSnlCaGNtZDFiV1Z1ZEhNdVhHNWNkQ0FxSUVCbWRXNWpkR2x2YmlCbGVIUmxjbTVoYkRwcVVYVmxjbmtqYVdSY2JseDBJQ29nUUdGeVp5QjdjM1J5YVc1bmZTQmJYM05sZEYwZ1RtRnRaU0IwYnlCelpYUWdZWE1nZEdobElHNXZaR1VuY3lCcFpDNWNibHgwSUNvZ1FISmxkSFZ5Ym5NZ2UzTjBjbWx1WjMwZ1ZHaGxJSEpsYzI5c2RtVmtJR2xrTGx4dVhIUWdLaTljYmx4MGRHaHBjeTVwWkNBOUlHWjFibU4wYVc5dUlDaGZjMlYwS1NCN1hHNWNkRngwYVdZZ0tGOXpaWFFnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1WEhSY2RGeDBMeThnVW1WdGIzWmxJR0YwZEhKcFluVjBaUzVjYmx4MFhIUmNkR2xtSUNoK1d5Y25MQ0J1ZFd4c1hTNXBibVJsZUU5bUtGOXpaWFFwS1NCN1hHNWNkRngwWEhSY2RIUm9hWE11WVhSMGNpZ25hV1FuTENCdWRXeHNLVHRjYmx4MFhIUmNkRngwY21WMGRYSnVJSFJvYVhNN1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RDOHZJRWxtSUdSdlkzVnRaVzUwSUdGc2NtVmhaSGtnYUdGeklIUm9aU0JwWkNCa1pXWnBibVZrSUhSb1pXNGdjMlYwSUdGeklHRWdkVzVwY1hWbElHeHBZbkpoY25rZ2FXUXVYRzVjZEZ4MFhIUnBaaUFvSkNoZmMyVjBLUzVzWlc1bmRHZ3BJSHRjYmx4MFhIUmNkRngwZEdocGN5NWhkSFJ5S0Nkd2JDMXBaQ2NzSUY5elpYUXBPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJsYkhObElIdGNibHgwWEhSY2RGeDBkR2hwY3k1aGRIUnlLQ2RwWkNjc0lGOXpaWFFwTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TG1GMGRISW9KMmxrSnlrZ2ZId2dkR2hwY3k1aGRIUnlLQ2R3YkMxcFpDY3BJSHg4SUhSb2FYTXVZWFIwY2lnbmNHd3RZMjl0Y0c5dVpXNTBKeWs3WEc1Y2RIMDdYRzVjYmx4MEx5b3FYRzVjZENBcUlGQnliM1pwWkdWeklIUm9aU0FuY21Wc1lYUnBkbVVuSUVOVFV5QnpaV3hsWTNSdmNpQm1iM0lnZEdobElHWnBjbk4wSUc1dlpHVWdhVzRnZEdobElHTnZiR3hsWTNScGIyNHVYRzVjZENBcUlFQm1kVzVqZEdsdmJpQmxlSFJsY201aGJEcHFVWFZsY25rallXUmtjbVZ6YzF4dVhIUWdLaUJBY21WMGRYSnVjeUI3YzNSeWFXNW5mVnh1WEhRZ0tseHVYSFFnS2lCQVpYaGhiWEJzWlZ4dVhIUWdLaUF2THlCSVZFMU1PaUE4WkdsMklHbGtQVndpYzNkbFlYUmxjbHdpSUdOc1lYTnpQVndpZDJsa1pWd2lQand2WkdsMlBseHVYSFFnS2lBa0tDY2pjM2RsWVhSbGNpY3BMbUZrWkhKbGMzTW9LU0F2THlCa2FYWWpjM2RsWVhSbGNpNTNhV1JsWEc1Y2RDQXFMMXh1WEhSMGFHbHpMbUZrWkhKbGMzTWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNWNkRngwZG1GeUlIUmhaeXdnYVdRc0lHTnNZWE56WlhNN1hHNWNibHgwWEhSMFlXY2dQU0IwYUdseld6QmRMbTV2WkdWT1lXMWxMblJ2VEc5M1pYSkRZWE5sS0NrN1hHNWNkRngwYVdRZ1BTQjBhR2x6TG1GMGRISW9KMmxrSnlrN1hHNWNkRngwWTJ4aGMzTmxjeUE5SUhSb2FYTXVZWFIwY2lnblkyeGhjM01uS1NBL0lDY3VKeXQwYUdsekxtRjBkSElvSjJOc1lYTnpKeWt1YzNCc2FYUW9KeUFuS1M1cWIybHVLQ2N1SnlrZ09pQW5KenRjYmx4MFhIUmNibHgwWEhSeVpYUjFjbTRnZEdGbkt5aHBaQ0EvSUNjakp5dHBaQ0E2SUNjbktTdGpiR0Z6YzJWek8xeHVYSFI5TzF4dVhHNWNkQzhxS2x4dVhIUWdLaUJRY205MmFXUmxjeUJoSUc1dlpHVW5jeUJWVUZCRlVpQkRRVk5GSUdOc1lYTnpJRzVoYldWekxpQkhhWFpsYmlBblgzUmxjM1FuSUdsMElIZHBiR3dnWTJobFkyc2dhV1lnZEdobElHNXZaR1VnYUdGeklIUm9aU0JqYkdGemN5NWNibHgwSUNvZ1FHWjFibU4wYVc5dUlHVjRkR1Z5Ym1Gc09tcFJkV1Z5ZVNOemRHRjBaVnh1WEhRZ0tpQkFZWEpuSUh0emRISnBibWQ5SUZ0ZmRHVnpkRjBnVkdobElGVlFVRVZTSUVOQlUwVWdZMnhoYzNNZ2JtRnRaU0IwYnlCMFpYTjBJRzl1SUhSb1pTQm1hWEp6ZENCdWIyUmxJR2x1SUhSb1pTQmpiMnhzWldOMGFXOXVMbHh1WEhRZ0tpQkFjbVYwZFhKdWN5QjdjM1J5YVc1bmZHRnljbUY1ZkdKdmIyeGxZVzU5SUhOMGNtbHVaeUF0SUdadmNpQnZibVVnY21WemRXeDBMaUJoY25KaGVTQXRJR1p2Y2lCdGRXeDBhWEJzWlM0Z1ltOXZiR1ZoYmlBdElHWnZjaUIwWlhOMGN5NWNibHgwSUNvdlhHNWNkSFJvYVhNdWMzUmhkR1VnUFNCbWRXNWpkR2x2YmlBb1gzUmxjM1FwSUh0Y2JseDBYSFIyWVhJZ1kyeGhjM05sY3p0Y2JseHVYSFJjZEdsbUlDaGZkR1Z6ZENrZ2NtVjBkWEp1SUhSb2FYTXVhR0Z6UTJ4aGMzTW9YM1JsYzNRdWRHOVZjSEJsY2tOaGMyVW9LU2s3WEc1Y2JseDBYSFJqYkdGemMyVnpJRDBnS0hSb2FYTXVZWFIwY2lnblkyeGhjM01uS1NCOGZDQW5KeWt1YldGMFkyZ29MMXN3TFRsQkxWcGRLeWcvT2kxYk1DMDVRUzFhWFNzcFB5OW5LVHRjYmx4dVhIUmNkSEpsZEhWeWJpQmpiR0Z6YzJWeklDWW1JQ2hqYkdGemMyVnpMbXhsYm1kMGFDQTlQVDBnTVNBL0lHTnNZWE56WlhOYk1GMGdPaUJqYkdGemMyVnpLVHRjYmx4MGZUdGNibHh1WEhRdktpcGNibHgwSUNvZ1VISnZkbWxrWlhNZ2RHaGxJR3BSZFdWeWVTQnZabVp6WlhRZ1ptOXlJSFJvWlNCbWFYSnpkQ0J1YjJSbElHbHVJSFJvWlNCamIyeHNaV04wYVc5dUxseHVYSFFnS2lCSGFYWmxiaUJoSUhCdmFXNTBMQ0JoYkd3Z2JtOWtaWE1nYVc0Z2RHaGxJR052Ykd4bFkzUnBiMjRnZDJsc2JDQm5aWFFnZTNCdmMybDBhVzl1T2lCaFluTnZiSFYwWlR0OUlIUnZJSFJvWlNCamIzSnlaR2x1WVhSbGN5NWNibHgwSUNvZ1FHWjFibU4wYVc5dUlHVjRkR1Z5Ym1Gc09tcFJkV1Z5ZVNOaFluTnZiSFYwWlZCdmMybDBhVzl1WEc1Y2RDQXFJRUJ5WlhSMWNtNXpJSHRRYjJsdWRIMWNibHgwSUNvdlhHNWNkSFJvYVhNdVlXSnpiMngxZEdWUWIzTnBkR2x2YmlBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmx4MFhIUjJZWElnYjJabWMyVjBPMXh1WEc1Y2RGeDBhV1lnS0NGaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvS1NCN1hHNWNkRngwWEhSdlptWnpaWFFnUFNCMGFHbHpMbTltWm5ObGRDZ3BPMXh1WEc1Y2RGeDBYSFJ5WlhSMWNtNGdVRzlwYm5RdVkzSmxZWFJsS0NrdWMyVjBLRzltWm5ObGRDNXNaV1owTENCdlptWnpaWFF1ZEc5d0tUdGNibHgwWEhSOVhHNWNibHgwWEhSbGJITmxJSHRjYmx4MFhIUmNkRzltWm5ObGRDQTlJRkJ2YVc1MExtTnlaV0YwWlNoaGNtZDFiV1Z1ZEhNcE8xeHVYRzVjZEZ4MFhIUjBhR2x6TG1OemN5aDdYRzVjZEZ4MFhIUmNkSEJ2YzJsMGFXOXVPaUFuWVdKemIyeDFkR1VuTEZ4dVhIUmNkRngwWEhSMGIzQTZJRzltWm5ObGRDNTVMRnh1WEhSY2RGeDBYSFJzWldaME9pQnZabVp6WlhRdWVGeHVYSFJjZEZ4MGZTazdYRzVjYmx4MFhIUmNkSEpsZEhWeWJpQnZabVp6WlhRN1hHNWNkRngwZlZ4dVhIUjlPMXh1WEhSY2JseDBMeW9xWEc1Y2RDQXFJRk5sZEhNZ1lTQkRVMU1nYldGMGNtbDRJSFJ5WVc1elptOXliU0J2YmlCaGJHd2dibTlrWlhNZ2FXNGdkR2hsSUdOdmJHeGxZM1JwYjI0dUlDaHZkbVZ5Ykc5aFpHVmtLVnh1WEhRZ0tpQkFablZ1WTNScGIyNGdaWGgwWlhKdVlXdzZhbEYxWlhKNUkzUnlZVzV6Wm05eWJWeHVYSFFnS2lCQVlYSm5JSHR1ZFcxaVpYSjlJRnRmYzJOaGJHVllYU0F0SUhOallXeGxJSGhjYmx4MElDb2dRR0Z5WnlCN2JuVnRZbVZ5ZlNCYlgzTm9aV0Z5V1YwZ0xTQnphR1ZoY2lCNVhHNWNkQ0FxSUVCaGNtY2dlMjUxYldKbGNuMGdXMTl6YUdWaGNsaGRJQzBnYzJobFlYSWdlRnh1WEhRZ0tpQkFZWEpuSUh0dWRXMWlaWEo5SUZ0ZmMyTmhiR1ZaWFNBdElITmpZV3hsSUhsY2JseDBJQ29nUUdGeVp5QjdiblZ0WW1WeWZTQmJYM1J5WVc1emJHRjBaVmhkSUMwZ2RISmhibk5zWVhSbElIaGNibHgwSUNvZ1FHRnlaeUI3Ym5WdFltVnlmU0JiWDNSeVlXNXpiR0YwWlZsZElDMGdkSEpoYm5Oc1lYUmxJSGxjYmx4MElDb2dRSEpsZEhWeWJuTWdlMDFoZEhKcGVIMWNibHgwSUNvdlhHNWNibHgwTHlvcVhHNWNkQ0FxSUZCeWIzWnBaR1Z6SUhSb1pTQkRVMU1nYldGMGNtbDRJSFJ5WVc1elptOXliU0JtYjNJZ2RHaGxJR1pwY25OMElHNXZaR1VnYVc0Z2RHaGxJR052Ykd4bFkzUnBiMjR1WEc1Y2RDQXFJRUJtZFc1amRHbHZiaUJsZUhSbGNtNWhiRHBxVVhWbGNua2pkSEpoYm5ObWIzSnRYRzVjZENBcUlFQnlaWFIxY201eklIdE5ZWFJ5YVhoOVhHNWNkQ0FxTDF4dVhIUjBhR2x6TG5SeVlXNXpabTl5YlNBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmx4MFhIUjJZWElnZEN3Z2JXRjBjbWw0TENCcGN6TmtPMXh1WEhSY2RGeHVYSFJjZEcxaGRISnBlQ0E5SUc1bGR5Qk5ZWFJ5YVhnb0tUdGNibHgwWEhSY2JseDBYSFJwWmlBb0lXRnlaM1Z0Wlc1MGN5NXNaVzVuZEdncElIdGNibHgwWEhSY2RIUWdQU0IwYUdsekxtTnpjeWduZEhKaGJuTm1iM0p0SnlrN1hHNWNkRngwWEhScGN6TmtJRDBnSVNGK2RDNXBibVJsZUU5bUtDZHRZWFJ5YVhnelpDY3BPMXh1WEc1Y2RGeDBYSFJwWmlBb2RDQWhQVDBnSjI1dmJtVW5LU0I3WEc1Y2RGeDBYSFJjZEhRZ1BTQW9LSFF1YldGMFkyZ29MMXhjS0NoYkxGeGNaRnhjTGx4Y2MxeGNMVjByS1Z4Y0tTOHBJSHg4SUZ0ZEtWc3hYU0I4ZkNBbkp5a3VjM0JzYVhRb0wxeGNjeW9zWEZ4ektpOHBPMXh1WEhSY2RGeDBYSFJwWmlBb2FYTXpaQ2tnZTF4dVhIUmNkRngwWEhSY2RIUWdQU0FvWm5WdVkzUnBiMjRnS0Y5dFlYUnlhWGdwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkSFpoY2lCcExDQnlaWE4xYkhRN1hHNWNibHgwWEhSY2RGeDBYSFJjZEhKbGMzVnNkQ0E5SUZ0ZE8xeHVYRzVjZEZ4MFhIUmNkRngwWEhSbWIzSWdLR2s5TURzZ2FTQThJRjl0WVhSeWFYZ3ViR1Z1WjNSb095QnBLejAwS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEhKbGMzVnNkQ0E5SUhKbGMzVnNkQzVqYjI1allYUW9YMjFoZEhKcGVDNXpiR2xqWlNocExDQnBLeklwS1Z4dVhIUmNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUhKbGMzVnNkRHRjYmx4MFhIUmNkRngwWEhSOUtIUXBLVHRjYmx4MFhIUmNkRngwZlZ4dVhHNWNkRngwWEhSY2RIUWdQU0IwTG0xaGNDaHdZWEp6WlVac2IyRjBLVHRjYmx4dVhIUmNkRngwWEhSdFlYUnlhWGd1YzJWMFZISmhibk5tYjNKdExtRndjR3g1S0cxaGRISnBlQ3dnZENrN1hHNWNibHgwWEhSY2RGeDBjbVYwZFhKdUlHMWhkSEpwZUR0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MGNtVjBkWEp1SUhRN1hHNWNkRngwZlZ4dVhHNWNkRngwYldGMGNtbDRMbk5sZEZSeVlXNXpabTl5YlM1aGNIQnNlU2h0WVhSeWFYZ3NJR0Z5WjNWdFpXNTBjeWs3WEc1Y2JseDBYSFIwYUdsekxtTnpjeWduZEhKaGJuTm1iM0p0Snl3Z2JXRjBjbWw0TG5SdlExTlRLQ2twTzF4dVhHNWNkRngwY21WMGRYSnVJRzFoZEhKcGVEdGNibHgwZlR0Y2JseHVYSFF2S2lwY2JseDBJQ29nUjJWMGRHVnlMMU5sZEhSbGNpQm1iM0lnZEdobElFTlRVeUIwY21GdWMyWnZjbTBnZEhKaGJuTnNZWFJwYjI0dUlDaHZkbVZ5Ykc5aFpHVmtLVnh1WEhRZ0tpQkFablZ1WTNScGIyNGdaWGgwWlhKdVlXdzZhbEYxWlhKNUkzUnlZVzV6Wm05eWJWQnZjMmwwYVc5dVhHNWNkQ0FxSUVCaGNtY2dlMUJ2YVc1MGZTQmZjRzlwYm5RZ0xTQkJJSEJ2YVc1MElHOWlhbVZqZENCN2VDeDVmVnh1WEhRZ0tpQkFjbVYwZFhKdWN5QjdVRzlwYm5SOVhHNWNkQ0FxTDF4dVhHNWNkQzhxS2x4dVhIUWdLaUJIWlhSMFpYSXZVMlYwZEdWeUlHWnZjaUIwYUdVZ1ExTlRJSFJ5WVc1elptOXliU0IwY21GdWMyeGhkR2x2Ymk1Y2JseDBJQ29nUUdaMWJtTjBhVzl1SUdWNGRHVnlibUZzT21wUmRXVnllU04wY21GdWMyWnZjbTFRYjNOcGRHbHZibHh1WEhRZ0tpQkFZWEpuSUh0dWRXMWlaWEo5SUY5NElDMGdlQ0JqYjI5eVpHbHVZWFJsWEc1Y2RDQXFJRUJoY21jZ2UyNTFiV0psY24wZ1gza2dMU0I1SUdOdmIzSmthVzVoZEdWY2JseDBJQ29nUUhKbGRIVnlibk1nZTFCdmFXNTBmVnh1WEhRZ0tpOWNibHgwZEdocGN5NTBjbUZ1YzJadmNtMVFiM05wZEdsdmJpQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseDBYSFIyWVhJZ2JXRjBjbWw0TENCd2IybHVkRHRjYmx4MFhIUmNibHgwWEhSdFlYUnlhWGdnUFNCMGFHbHpMblJ5WVc1elptOXliU2dwTzF4dVhIUmNkSEJ2YVc1MElEMGdVRzlwYm5RdVkzSmxZWFJsS0NrN1hHNWNibHgwWEhScFppQW9iV0YwY21sNElDRTlQU0FuYm05dVpTY3BJSHRjYmx4MFhIUmNkR2xtSUNnaFlYSm5kVzFsYm5SekxteGxibWQwYUNrZ2UxeHVYSFJjZEZ4MFhIUndiMmx1ZEM1elpYUW9iV0YwY21sNExtVXNJRzFoZEhKcGVDNW1LVHRjYmx4MFhIUmNkSDFjYmx4MFhIUmNkRnh1WEhSY2RGeDBaV3h6Wlh0Y2JseDBYSFJjZEZ4MGJXRjBjbWw0SUQwZ2JtVjNJRTFoZEhKcGVDZ3BPMXh1WEc1Y2RGeDBYSFJjZEhCdmFXNTBMbk5sZEM1aGNIQnNlU2h3YjJsdWRDd2dZWEpuZFcxbGJuUnpLVHRjYmx4MFhIUmNkRngwYldGMGNtbDRMblJ5WVc1emJHRjBaU2h3YjJsdWRDNTRMQ0J3YjJsdWRDNTVLVHRjYmx4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4dVhIUmNkSEpsZEhWeWJpQndiMmx1ZER0Y2JseDBmVHRjYmx4dWZTa3VZMkZzYkNna0xtWnVLVHRjYmx4dVhHNHZLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSWdLaXBjYmlBcUtpQXVMM052ZFhKalpTOXFVVVY0ZEdWdWRHbHZibk11YW5OY2JpQXFLaThpWFN3aWMyOTFjbU5sVW05dmRDSTZJaUo5XCIpO1xuXG4vKioqLyB9LFxuLyogNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0ZXZhbChcInZhciBfT2JqZWN0JGRlZmluZVByb3BlcnRpZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpWydkZWZhdWx0J107XFxuXFxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpWydkZWZhdWx0J107XFxuXFxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcXG4vKipcXG4gKiBcXG4gKiBAbW9kdWxlXFxuICogQHZlcnNpb24gMS4xXFxuICogQGF1dGhvciBNaWNhaCBSb2xvbiA8ZnVuY3Rpb25taWNhaEBnbWFpbC5jb20+XFxuICogQHJlcXVpcmVzIG1vZHVsZTp0eXBlcy9CYXNpY0FycmF5fkJhc2ljQXJyYXlcXG4gKlxcbiAqIEBkZXNjICpDcmVhdGVkOiAxMS8xMi8xNCpcXG4gKlxcbiAqIFRoaXMgZmlsZSBjb250YWlucyBvYmplY3RzIGZvciBjb250YWluaW5nIHZhbHVlcyBhYm91dCBhIHBsYW5lLiBpLmUuIHggb3Igd2lkdGguXFxuICogQWRkcyB0aGUgY29udmVuaWVuY2Ugb2Yga2VlcGluZyB0aGVzZSB2YWx1ZXMgcGFpcmVkIHRvIHBhc3NlZCBhcm91bmQgeW91ciBhcHBsaWNhdGlvbi5cXG4gKiBJdCBhbHNvIGluY2x1ZGVzIG1ldGhvZHMgd2hpY2ggeW91IHBlcmZvcm0gb24gdGhlIHZhbHVlcyBhbmQgcmV0dXJucyBhIG5ldyBvYmplY3RcXG4gKiBzbyB0aGUgb3JpZ2luYWwgdmFsdWVzIGFyZSBtYWludGFpbmVkLlxcbiAqXFxuICogIyMjIyBVc2FnZVxcbiAqXFxuICogTmV3IGluc3RhbmNlcyBjYW4gYmUgY3JlYXRlZCBieSBjYWxsaW5nIHRoZSBjcmVhdGUgbWV0aG9kLlxcbiAqIGBgYFxcbiAqIGN1cnNvckxvY2F0aW9uID0gUG9pbnQuY3JlYXRlKCk7XFxuICogYGBgXFxuICpcXG4gKiBUaGVuIGNhbGwgYHNldCgpYCB0byBhcHBseSB5b3VyIHZhbHVlcy5cXG4gKiBgYGBcXG4gKiBjdXJzb3JMb2NhdGlvbi5zZXQoZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSk7XFxuICogYGBgXFxuICpcXG4gKiBUaGVuIHlvdSBjYW4gdXNlIHRoZSBjYWxjdWxhdGlvbiBtZXRob2RzIHRvIHBlcmZvcm0gdHJhbnNmb3JtYXRpb25zLlxcbiAqIGBgYFxcbiAqIHJlbGF0aXZlQ3Vyc29yID0gY3Vyc29yTG9jYXRpb24uc2NhbGUoem9vbSk7XFxuICogYGBgXFxuICpcXG4gKiAjIyMjIERldmVsb3BlciBOb3Rlc1xcbiAqXFxuICogV2hlbiBhZGRpbmcgbmV3IG1ldGhvZHMgbWFrZSBzdXJlIHlvdSBhcmUgcmV0dXJuaW5nIGEgbmV3IGluc3RhbmNlLlxcbiAqIERpbWVuc2lvbmFsIG9iamVjdHMgYXJlIG1lYW50IHRvIGJlIGltbXV0YWJsZS5cXG4gKlxcbiAqIEZvbGxvdyB0aGlzIHBhdHRlcm46XFxuICogYGBgXFxuICogdGhpcy5tZXRob2QgPSBmdW5jdGlvbiAoKSB7XFxuICogICAgIC8vIHNldCB3aXRoIHlvdXIgY2FsY3VsYXRlZCB2YWx1ZXMuXFxuICogICAgIHJldHVybiB0aGlzLmNyZWF0ZSgpLnNldCggLi4uIClcXG4gKiB9XFxuICogYGBgXFxuICpcXG4gKiAjIyMjIENoYW5nZSBMb2dcXG4gKiAqdjEuMSAtIDEyLzEzLzE1KlxcbiAqIC0gRGVmaW5lZCBzZXR0ZXIvZ2V0dGVyIHByb3BlcnRpZXMgZm9yIHVuaXF1ZSBwbGFuZXMga2V5cy4gWW91IGNhbiBub3cgZG8gYHBvaW50LndpZHRoID0gMTBgLlxcbiAqL1xcblxcbi8qanNsaW50IGJyb3dzZXI6IHRydWUsIGVxZXE6IHRydWUsIG5vbWVuOiB0cnVlLCBzbG9wcHk6IHRydWUsIHdoaXRlOiB0cnVlICovXFxuXFxudmFyIF90eXBlc0Jhc2ljQXJyYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xcblxcbnZhciBfdHlwZXNCYXNpY0FycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVzQmFzaWNBcnJheSk7XFxuXFxudmFyIERpbWVuc2lvbiwgU2l6ZSwgUG9pbnQ7XFxuXFxuLyoqXFxuICogVGhlIG5hdGl2ZSBBcnJheVxcbiAqIEBleHRlcm5hbCBBcnJheVxcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5fVxcbiAqL1xcblxcbi8qKlxcbiAqIEFycmF5IHByb3RvdHlwZSBleHRlbnNpb25cXG4gKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIGBfVGhpbmdgIGFuZCBwYXNzZXMgdGhlIGFycmF5IHRvIGl0cyBzZXQgZnVuY3Rpb24gYXMgaXRzIGFyZ3VtZW50cy5cXG4gKiBAZnVuY3Rpb24gZXh0ZXJuYWw6QXJyYXkjdG9cXG4gKiBAYXJnIHtQb2ludHxTaXplfHN0cmluZ30gX1RoaW5nIC0gQSBEaW1lbnNpb24gb2JqZWN0IG9yIG9uZSB0aGUgc3RyaW5ncyAncG9pbnQnLydzaXplJ1xcbiAqIEBleGFtcGxlXFxuICogc29tZVBvaW50ID0gWzEwLCAxMF0udG8oUG9pbnQpO1xcbiAqIHNvbWVQb2ludCA9IFsxMCwgMTBdLnRvKCdwb2ludCcpO1xcbiAqL1xcbkFycmF5LnByb3RvdHlwZS50byA9IGZ1bmN0aW9uIChfVGhpbmcpIHtcXG5cXHR2YXIgbWFwO1xcblxcblxcdG1hcCA9IHtcXG5cXHRcXHRwb2ludDogUG9pbnQsXFxuXFx0XFx0c2l6ZTogU2l6ZVxcblxcdH07XFxuXFxuXFx0aWYgKHR5cGVvZiBfVGhpbmcgPT09ICdzdHJpbmcnKSB7XFxuXFx0XFx0cmV0dXJuIG1hcFtfVGhpbmcudG9Mb3dlckNhc2UoKV0uY3JlYXRlKCkuc2V0KHRoaXMpO1xcblxcdH0gZWxzZSBpZiAodHlwZW9mIF9UaGluZyA9PT0gJ29iamVjdCcgJiYgfltQb2ludC5zZXQsIFNpemUuc2V0XS5pbmRleE9mKF9UaGluZy5zZXQpKSB7XFxuXFx0XFx0aWYgKCFfVGhpbmcuaXNQcm90b3R5cGVPZih0aGlzKSkge1xcblxcdFxcdFxcdHJldHVybiBfVGhpbmcuc2V0LmFwcGx5KF9UaGluZy5jcmVhdGUoKSwgdGhpcyk7XFxuXFx0XFx0fVxcblxcdH1cXG5cXG5cXHRyZXR1cm4gdGhpcztcXG59O1xcblxcbi8qKlxcbiAqIDxzcGFuIGNsYXNzPVxcXCJpbXBvcnRhbnRcXFwiPk5PVEU6PC9zcGFuPiBUaGlzIGlzIE5PVCBhIGNvbnN0cnVjdG9yLiB1c2UgYERpbWVuc2lvbi5jcmVhdGUoKWAgdG8gZ2V0IGEgbmV3IGluc3RhbmNlLlxcbiAqIEBjbGFzc1xcbiAqIEBjbGFzc2Rlc2MgQmFzZSBjbGFzcyBmb3IgZGltZW5zaW9uYWwgb2JqZWN0cyBjb25zaXN0aW5nIG9mIDIgcGxhbmVzLjxicj5cXG4gKiA8c3BhbiBjbGFzcz1cXFwiaW1wb3J0YW50XFxcIj5OT1RFOjwvc3Bhbj4gVGhpcyBpcyBhbiBpbW11dGFibGUgY2xhc3MuIE1ldGhvZHMgcmV0dXJuIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBvcmlnaW5hbCBhcyBpdHMgcHJvdG90eXBlLlxcbiAqIEBleHRlbmRzIG1vZHVsZTp0eXBlcy9CYXNpY0FycmF5fkJhc2ljQXJyYXlcXG4gKi9cXG5EaW1lbnNpb24gPSBfdHlwZXNCYXNpY0FycmF5MlsnZGVmYXVsdCddLmV4dGVuZChmdW5jdGlvbiAoKSB7XFxuXFx0dmFyIG9yaWdpbmFsTWFwO1xcblxcblxcdG9yaWdpbmFsTWFwID0gdGhpcy5tYXA7XFxuXFxuXFx0dGhpc1swXSA9IHRoaXNbMV0gPSAwO1xcblxcdHRoaXMucGxhbmVNYXAgPSBudWxsLCB0aGlzLmxlbmd0aCA9IDI7XFxuXFxuXFx0LyoqXFxuICAqIFByb3ZpZGVzIGEgbmV3IGluc3RhbmNlLlxcbiAgKiBAYXJnIHthcnJheX0gX2FyZ3VtZW50c0FycmF5IC0gQ3JlYXRlIGEgbmV3IGluc3RhY2Ugd2l0aCBhbiBhcmd1bWVudHMgYXJyYXkuXFxuICAqIEByZXR1cm5zIHtEaW1lbnNpb259XFxuICAqL1xcblxcdHRoaXMuY3JlYXRlID0gZnVuY3Rpb24gKF9hcmd1bWVudHNBcnJheSkge1xcblxcdFxcdHZhciBpbnN0YW5jZTtcXG5cXG5cXHRcXHRpbnN0YW5jZSA9IHRoaXMucHJvdG8oKTtcXG5cXG5cXHRcXHRpZiAoX2FyZ3VtZW50c0FycmF5KSBpbnN0YW5jZS5zZXQuYXBwbHkoaW5zdGFuY2UsIF9hcmd1bWVudHNBcnJheSk7XFxuXFxuXFx0XFx0cmV0dXJuIGluc3RhbmNlO1xcblxcdH07XFxuXFxuXFx0LyoqXFxuICAqIEluY2VyZW1lbnQgZWFjaCBwbGFuZSBieSBhIHZhbHVlIG9yIHNwZWNpZnkgZWFjaCBwbGFuZS5cXG4gICogQGFyZyB7bnVtYmVyfSBfdmFsIC0gcGxhbmUgYSBvZiAoYSxiKVxcbiAgKiBAYXJnIHtudW1iZXJ9IFtfcGxhbmUyXSAtIHBsYW5lIGIgb2YgKGEsYilcXG4gICogQHJldHVybnMge0RpbWVuc2lvbn1cXG4gICovXFxuXFx0dGhpcy5pbmMgPSBmdW5jdGlvbiAoX3ZhbCwgX3BsYW5lMikge1xcblxcdFxcdHZhciBhLCBiO1xcblxcblxcdFxcdGlmIChfdmFsLmxlbmd0aCA9PT0gMikge1xcblxcdFxcdFxcdGEgPSBfdmFsWzBdO1xcblxcdFxcdFxcdGIgPSBfdmFsWzFdO1xcblxcdFxcdH0gZWxzZSBpZiAoX3BsYW5lMiAhPSBudWxsKSB7XFxuXFx0XFx0XFx0YSA9IF92YWw7XFxuXFx0XFx0XFx0YiA9IF9wbGFuZTI7XFxuXFx0XFx0fSBlbHNlIHtcXG5cXHRcXHRcXHRhID0gYiA9IF92YWw7XFxuXFx0XFx0fVxcblxcblxcdFxcdHJldHVybiB0aGlzLmNyZWF0ZSgpLnNldCh0aGlzWzBdICsgYSwgdGhpc1sxXSArIGIpO1xcblxcdH07XFxuXFxuXFx0LyoqXFxuICAqIERlY2VyZW1lbnQgZWFjaCBwbGFuZSBieSBhIHZhbHVlIG9yIHNwZWNpZnkgZWFjaCBwbGFuZS5cXG4gICogQGFyZyB7bnVtYmVyfSBfdmFsIC0gcGxhbmUgYSBvZiAoYSxiKVxcbiAgKiBAYXJnIHtudW1iZXJ9IFtfcGxhbmUyXSAtIHBsYW5lIGIgb2YgKGEsYilcXG4gICogQHJldHVybnMge0RpbWVuc2lvbn1cXG4gICovXFxuXFx0dGhpcy5kZWMgPSBmdW5jdGlvbiAoX3ZhbCwgX3BsYW5lMikge1xcblxcdFxcdHZhciBhLCBiO1xcblxcblxcdFxcdGlmIChfdmFsLmxlbmd0aCA9PT0gMikge1xcblxcdFxcdFxcdGEgPSBfdmFsWzBdO1xcblxcdFxcdFxcdGIgPSBfdmFsWzFdO1xcblxcdFxcdH0gZWxzZSBpZiAoX3BsYW5lMiAhPSBudWxsKSB7XFxuXFx0XFx0XFx0YSA9IF92YWw7XFxuXFx0XFx0XFx0YiA9IF9wbGFuZTI7XFxuXFx0XFx0fSBlbHNlIHtcXG5cXHRcXHRcXHRhID0gYiA9IF92YWw7XFxuXFx0XFx0fVxcblxcblxcdFxcdHJldHVybiB0aGlzLmNyZWF0ZSgpLnNldCh0aGlzWzBdIC0gYSwgdGhpc1sxXSAtIGIpO1xcblxcdH07XFxuXFxuXFx0LyoqXFxuICAqIE11bHRpcGx5IGVhY2ggcGxhbmUgYnkgYSB2YWx1ZSBvciBzcGVjaWZ5IGVhY2ggcGxhbmUuXFxuICAqIEBhcmcge251bWJlcn0gX3NjYWxlIC0gcGxhbmUgYSBvZiAoYSxiKVxcbiAgKiBAYXJnIHtudW1iZXJ9IFtfcGxhbmUyXSAtIHBsYW5lIGIgb2YgKGEsYilcXG4gICogQHJldHVybnMge0RpbWVuc2lvbn1cXG4gICovXFxuXFx0dGhpcy5zY2FsZSA9IGZ1bmN0aW9uIChfc2NhbGUsIF9wbGFuZTIpIHtcXG5cXHRcXHRyZXR1cm4gdGhpcy5jcmVhdGUoKS5zZXQodGhpc1swXSAqIF9zY2FsZSwgdGhpc1sxXSAqIChfcGxhbmUyICE9IG51bGwgPyBfcGxhbmUyIDogX3NjYWxlKSk7XFxuXFx0fTtcXG5cXG5cXHQvKipcXG4gICogUGVyZm9tIGEgTWF0aCBmdW5jdGlvbiBvbiBlYWNoIHBsYW5lXFxuICAqIEBhcmcge3N0cmluZ30gX2Z1biAtIGEgc3RyaW5nIG9mIHRoZSBmdW5jdGlvbiBuYW1lIGluIHRoZSBKUyBNYXRoIG9iamVjdCxcXG4gICogZm9sbG93ZWQgYnkgdGhlIHdoYXRldmVyIGFyZ3VtZW50cyB0aGUgZnVuY3Rpb24gdGFrZXMgYWZ0ZXIgaXRzIGZpcnN0XFxuICAqIHNpbmNlIHRoZSBmaXJzdCBhcmd1bWVudCBpcyB0aGUgcGxhbmUgdmFsdWUuXFxuICAqIEByZXR1cm5zIHtEaW1lbnNpb259XFxuICAqL1xcblxcdHRoaXMubWF0aCA9IGZ1bmN0aW9uIChfZnVuKSB7XFxuXFx0XFx0dmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XFxuXFxuXFx0XFx0cmV0dXJuIHRoaXMuY3JlYXRlKCkuc2V0KE1hdGhbX2Z1bl0uYXBwbHkoTWF0aCwgW3RoaXNbMF1dLmNvbmNhdChhcmdzKSksIE1hdGhbX2Z1bl0uYXBwbHkoTWF0aCwgW3RoaXNbMV1dLmNvbmNhdChhcmdzKSkpO1xcblxcdH07XFxuXFxuXFx0LyoqXFxuICAqIFRha2VzIGVhY2ggcGxhbmUgdmFsdWUgYW5kIHBhc3NlcyBpdCB0byBwYXJzZUludCgpLlxcbiAgKiBAcmV0dXJucyB7RGltZW5zaW9ufVxcbiAgKi9cXG5cXHR0aGlzLnBhcnNlSW50ID0gZnVuY3Rpb24gKCkge1xcblxcdFxcdHJldHVybiB0aGlzLmNyZWF0ZSgpLnNldChwYXJzZUludCh0aGlzWzBdKSwgcGFyc2VJbnQodGhpc1sxXSkpO1xcblxcdH07XFxuXFxuXFx0LyoqXFxuICAqIFRha2VzIGVhY2ggcGxhbmUgdmFsdWUgYW5kIHBhc3NlcyBpdCB0byBwYXJzZUZsb2F0KCkuXFxuICAqIEByZXR1cm5zIHtEaW1lbnNpb259XFxuICAqL1xcblxcdHRoaXMucGFyc2VGbG9hdCA9IGZ1bmN0aW9uICgpIHtcXG5cXHRcXHRyZXR1cm4gdGhpcy5jcmVhdGUoKS5zZXQocGFyc2VGbG9hdCh0aGlzWzBdKSwgcGFyc2VGbG9hdCh0aGlzWzFdKSk7XFxuXFx0fTtcXG5cXG5cXHQvKipcXG4gICogUmVzb2x2ZXMgdGhlIG5hbWUgb2YgdGhlIHBsYW5lIGF0IHRoZSBnaXZlbiBpbmRleC5cXG4gICogQGFyZyB7bnVtYmVyfSBfaW5kZXggLSBUaGUgaW5kZXggb2YgdGhlIHBsYW5lLlxcbiAgKiBAcmV0dXJucyB7c3RyaW5nfVxcbiAgKi9cXG5cXHR0aGlzLnBsYW5lT2YgPSBmdW5jdGlvbiAoX2luZGV4KSB7XFxuXFx0XFx0aWYgKGlzTmFOKHBhcnNlSW50KF9pbmRleCkpKSByZXR1cm4gbnVsbDtcXG5cXHRcXHRyZXR1cm4gdGhpcy5wbGFuZU1hcFtfaW5kZXhdO1xcblxcdH07XFxuXFxuXFx0LyoqXFxuICAqIE1ha2UgYSBuZXcgYXJyYXkgYnkgaXRlcmF0aW5nIG92ZXIgZWFjaCBwbGFuZS48YnI+XFxuICAqIFNlZSBbYEFycmF5LnByb3RvdHlwZS5tYXAoKWBde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L21hcH1cXG4gICogQGFyZyB7ZnVuY3Rpb259IF9oYW5kbGVyIC0gaGFuZGxlciBmb3IgZWFjaCBpbmRleC5cXG4gICogQG92ZXJyaWRlXFxuICAqIEByZXR1cm5zIHtEaW1lbnNpb259XFxuICAqL1xcblxcdHRoaXMubWFwID0gZnVuY3Rpb24gKF9oYW5kbGVyKSB7XFxuXFx0XFx0cmV0dXJuIG9yaWdpbmFsTWFwLmNhbGwodGhpcywgX2hhbmRsZXIpLnRvKE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSk7XFxuXFx0fTtcXG5cXG5cXHQvKipcXG4gICogTXVsdGlwbGllcyB0aGUgcGxhbmVzLlxcbiAgKiBAcmV0dXJucyB7bnVtYmVyfVxcbiAgKi9cXG5cXHR0aGlzLnByb2R1Y3QgPSBmdW5jdGlvbiAoKSB7XFxuXFx0XFx0cmV0dXJuIHRoaXNbMF0gKiB0aGlzWzFdO1xcblxcdH07XFxuXFxuXFx0LyoqXFxuICAqIERpdmlkZXMgdGhlIHBsYW5lcy5cXG4gICogQHJldHVybnMge251bWJlcn1cXG4gICovXFxuXFx0dGhpcy5yYXRpbyA9IGZ1bmN0aW9uICgpIHtcXG5cXHRcXHRyZXR1cm4gdGhpc1swXSAvIHRoaXNbMV07XFxuXFx0fTtcXG5cXG5cXHR0aGlzLnF1b3RpZW50ID0gZnVuY3Rpb24gKCkge1xcblxcdFxcdHJldHVybiBNYXRoLmZsb29yKHRoaXNbMF0gLyB0aGlzWzFdKTtcXG5cXHR9O1xcblxcblxcdHRoaXMucmVtYWluZGVyID0gZnVuY3Rpb24gKCkge1xcblxcdFxcdHJldHVybiB0aGlzWzBdICUgdGhpc1sxXTtcXG5cXHR9O1xcbn0pO1xcblxcbi8qKlxcbiAqIDxzcGFuIGNsYXNzPVxcXCJpbXBvcnRhbnRcXFwiPk5PVEU6PC9zcGFuPiBUaGlzIGlzIE5PVCBhIGNvbnN0cnVjdG9yLiB1c2UgYFNpemUuY3JlYXRlKClgIHRvIGdldCBhIG5ldyBpbnN0YW5jZS5cXG4gKiBAY2xhc3NcXG4gKiBAZXh0ZW5kcyBtb2R1bGU6dHlwZXMvRGltZW5zaW9uc35EaW1lbnNpb25cXG4gKiBAY2xhc3NkZXNjIDIgRGltZW5zaW9uYWwgb2JqZWN0IGNvbnRhaW5pbmcgd2lkdGggYW5kIGhlaWdodC48YnI+XFxuICogPHNwYW4gY2xhc3M9XFxcImltcG9ydGFudFxcXCI+Tk9URTo8L3NwYW4+IFRoaXMgaXMgYW4gaW1tdXRhYmxlIGNsYXNzLiBNZXRob2RzIHJldHVybiBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgb3JpZ2luYWwgYXMgaXRzIHByb3RvdHlwZS5cXG4gKiBAcHJvcCB7bnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aC5cXG4gKiBAcHJvcCB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgaGVpZ2h0LlxcbiAqL1xcblNpemUgPSBEaW1lbnNpb24uZXh0ZW5kKGZ1bmN0aW9uICgpIHtcXG5cXHQvKipcXG4gICogTWFwcyB0aGUgbmFtZXMgb2YgdGhlIGluZGV4ZXMuPGJyPlxcbiAgKiBTZWUgW0RpbWVuc2lvbiNwbGFuZU9mXXtAbGluayBtb2R1bGU6dHlwZXMvRGltZW5zaW9uc35EaW1lbnNpb24jcGxhbmVPZn0gZm9yIHJlc29sdmluZyBwbGFuZSBuYW1lLlxcbiAgKiBAcHJvdGVjdGVkXFxuICAqIEBkZWZhdWx0IFsnd2lkdGgnLCAnaGVpZ2h0J11cXG4gICovXFxuXFx0dGhpcy5wbGFuZU1hcCA9IFsnd2lkdGgnLCAnaGVpZ2h0J107XFxuXFxuXFx0X09iamVjdCRkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcXG5cXHRcXHR3aWR0aDoge1xcblxcdFxcdFxcdGdldDogZnVuY3Rpb24gZ2V0KCkge1xcblxcdFxcdFxcdFxcdHJldHVybiB0aGlzWzBdO1xcblxcdFxcdFxcdH0sXFxuXFxuXFx0XFx0XFx0c2V0OiBmdW5jdGlvbiBzZXQoX3ZhbCkge1xcblxcdFxcdFxcdFxcdHRoaXNbMF0gPSBOdW1iZXIoX3ZhbCk7XFxuXFx0XFx0XFx0fVxcblxcdFxcdH0sXFxuXFxuXFx0XFx0aGVpZ2h0OiB7XFxuXFx0XFx0XFx0Z2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuXFx0XFx0XFx0XFx0cmV0dXJuIHRoaXNbMV07XFxuXFx0XFx0XFx0fSxcXG5cXG5cXHRcXHRcXHRzZXQ6IGZ1bmN0aW9uIHNldChfdmFsKSB7XFxuXFx0XFx0XFx0XFx0dGhpc1sxXSA9IE51bWJlcihfdmFsKTtcXG5cXHRcXHRcXHR9XFxuXFx0XFx0fVxcblxcdH0pO1xcblxcblxcdC8qKlxcbiAgKiBEZWZpbmUgdGhlIHNpemUgd2l0aCBhbiBvYmplY3QuIChvdmVybG9hZGVkKVxcbiAgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0RpbWVuc2lvbnN+U2l6ZSNzZXRcXG4gICogQGFyZyB7b2JqZWN0fSBfc2l6ZSAtIEEgc2l6ZSBvYmplY3Qge3dpZHRoLCBoZWlnaHR9LlxcbiAgKiBAcmV0dXJucyB7U2l6ZX1cXG4gICovXFxuXFxuXFx0LyoqXFxuICAqIERlZmluZSB0aGUgc2l6ZSB3aXRoIGFuIGFycmF5LiAob3ZlcmxvYWRlZClcXG4gICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9EaW1lbnNpb25zflNpemUjc2V0XFxuICAqIEBhcmcge2FycmF5fSBfc2l6ZSAtIEEgc2l6ZSBhcnJheSBbd2lkdGgsIGhlaWdodF0uXFxuICAqIEByZXR1cm5zIHtTaXplfVxcbiAgKi9cXG5cXG5cXHQvKipcXG4gICogRGVmaW5lIHRoZSBzaXplLlxcbiAgKiBAYXJnIHtudW1iZXJ9IF93aWR0aCAtIFRoZSB3aWR0aC5cXG4gICogQGFyZyB7bnVtYmVyfSBfaGVpZ2h0IC0gVGhlIGhlaWdodC5cXG4gICogQHJldHVybnMge1NpemV9XFxuICAqL1xcblxcdHRoaXMuc2V0ID0gZnVuY3Rpb24gKF93aWR0aCwgX2hlaWdodCkge1xcblxcdFxcdGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XFxuXFx0XFx0XFx0aWYgKF93aWR0aC53aWR0aCAhPT0gdW5kZWZpbmVkICYmIF93aWR0aC5oZWlnaHQgIT09IHVuZGVmaW5lZCkge1xcblxcdFxcdFxcdFxcdHRoaXNbMF0gPSBOdW1iZXIoX3dpZHRoLndpZHRoKTtcXG5cXHRcXHRcXHRcXHR0aGlzWzFdID0gTnVtYmVyKF93aWR0aC5oZWlnaHQpO1xcblxcdFxcdFxcdH0gZWxzZSBpZiAoX3dpZHRoLmxlbmd0aCA9PT0gMikge1xcblxcdFxcdFxcdFxcdHRoaXNbMF0gPSBOdW1iZXIoX3dpZHRoWzBdKTtcXG5cXHRcXHRcXHRcXHR0aGlzWzFdID0gTnVtYmVyKF93aWR0aFsxXSk7XFxuXFx0XFx0XFx0fVxcblxcdFxcdH0gZWxzZSB7XFxuXFx0XFx0XFx0dGhpc1swXSA9IE51bWJlcihfd2lkdGgpO1xcblxcdFxcdFxcdHRoaXNbMV0gPSBOdW1iZXIoX2hlaWdodCk7XFxuXFx0XFx0fVxcblxcblxcdFxcdHJldHVybiB0aGlzO1xcblxcdH07XFxuXFxuXFx0LyoqXFxuICAqIENhbGN1bGF0ZXMgdGhlIGh5cG90ZW51c2UuXFxuICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0h5cG90ZW51c2V9XFxuICAqIEByZXR1cm5zIHtudW1iZXJ9XFxuICAqL1xcblxcdHRoaXMuaHlwb3RlbnVzZSA9IGZ1bmN0aW9uICgpIHtcXG5cXHRcXHRyZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHRoaXMud2lkdGgsIDIpICsgTWF0aC5wb3codGhpcy5oZWlnaHQsIDIpKTtcXG5cXHR9O1xcblxcblxcdC8qKlxcbiAgKiBTZXRzIHdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllcyBvbiB0aGUgZ2l2ZW4gb2JqZWN0LiBJZiB0aGUgb2JqZWN0IGlzIGFuIEhUTUwgbm9kZSB0aGVuIGl0IHdpbGwgYmUgc2V0IG9uIHRoZSBub2RlcyBzdHlsZSBvYmplY3QuXFxuICAqIEBhcmcge29iamVjdHxIVE1MRWxlbWVudH0gLSBUaGUgb2JqZWN0IG9yIERPTSBub2RlLlxcbiAgKiBAcmV0dXJucyB7dGhpc31cXG4gICovXFxuXFx0dGhpcy5hcHBseVRvID0gZnVuY3Rpb24gKF9vYmplY3QpIHtcXG5cXHRcXHRpZiAoX29iamVjdC5ub2RlVHlwZSA9PT0gZG9jdW1lbnQuRUxFTUVOVF9OT0RFKSB7XFxuXFx0XFx0XFx0aWYgKCEoX29iamVjdC53aWR0aCAhPT0gdW5kZWZpbmVkIHx8IF9vYmplY3QuaGVpZ2h0ICE9PSB1bmRlZmluZWQpKSB7XFxuXFx0XFx0XFx0XFx0X29iamVjdC5zdHlsZS53aWR0aCA9IHRoaXMud2lkdGg7XFxuXFx0XFx0XFx0XFx0X29iamVjdC5zdHlsZS5oZWlnaHQgPSB0aGlzLmhlaWdodDtcXG5cXG5cXHRcXHRcXHRcXHRyZXR1cm4gdGhpcztcXG5cXHRcXHRcXHR9XFxuXFx0XFx0fVxcblxcblxcdFxcdF9vYmplY3Qud2lkdGggPSB0aGlzLndpZHRoO1xcblxcdFxcdF9vYmplY3QuaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XFxuXFxuXFx0XFx0cmV0dXJuIHRoaXM7XFxuXFx0fTtcXG59KTtcXG5cXG4vKipcXG4gKiA8c3BhbiBjbGFzcz1cXFwiaW1wb3J0YW50XFxcIj5OT1RFOjwvc3Bhbj4gVGhpcyBpcyBOT1QgYSBjb25zdHJ1Y3Rvci4gdXNlIGBQb2ludC5jcmVhdGUoKWAgdG8gZ2V0IGEgbmV3IGluc3RhbmNlLlxcbiAqIEBjbGFzc1xcbiAqIEBleHRlbmRzIG1vZHVsZTp0eXBlcy9EaW1lbnNpb25zfkRpbWVuc2lvblxcbiAqIEBjbGFzc2Rlc2MgT2JqZWN0IGNvbnRhaW5pbmcgY29vcmRpbmF0ZXMgb24gYSAyLWRpbWVuc2lvbmFsIGNhcnRlc2lhbiBwbGFuZS48YnI+XFxuICogPHNwYW4gY2xhc3M9XFxcImltcG9ydGFudFxcXCI+Tk9URTo8L3NwYW4+IFRoaXMgaXMgYW4gaW1tdXRhYmxlIGNsYXNzLiBNZXRob2RzIHJldHVybiBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgb3JpZ2luYWwgYXMgaXRzIHByb3RvdHlwZS5cXG4gKiBAcHJvcCB7bnVtYmVyfSB4IC0gVGhlIHggY29vcmRpbmF0ZS5cXG4gKiBAcHJvcCB7bnVtYmVyfSB5IC0gVGhlIHkgY29vcmRpbmF0ZS5cXG4gKi9cXG5Qb2ludCA9IERpbWVuc2lvbi5leHRlbmQoZnVuY3Rpb24gKCkge1xcblxcdC8qKlxcbiAgKiBNYXBzIHRoZSBuYW1lcyBvZiB0aGUgaW5kZXhlcy48YnI+XFxuICAqIFNlZSBbRGltZW5zaW9uI3BsYW5lT2Zde0BsaW5rIG1vZHVsZTp0eXBlcy9EaW1lbnNpb25zfkRpbWVuc2lvbiNwbGFuZU9mfSBmb3IgcmVzb2x2aW5nIHBsYW5lIG5hbWUuXFxuICAqIEBwcm90ZWN0ZWRcXG4gICogQGRlZmF1bHQgWyd4JywgJ3knXVxcbiAgKi9cXG5cXHR0aGlzLnBsYW5lTWFwID0gWyd4JywgJ3knXTtcXG5cXG5cXHRfT2JqZWN0JGRlZmluZVByb3BlcnRpZXModGhpcywge1xcblxcdFxcdHg6IHtcXG5cXHRcXHRcXHRnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG5cXHRcXHRcXHRcXHRyZXR1cm4gdGhpc1swXTtcXG5cXHRcXHRcXHR9LFxcblxcblxcdFxcdFxcdHNldDogZnVuY3Rpb24gc2V0KF92YWwpIHtcXG5cXHRcXHRcXHRcXHR0aGlzWzBdID0gTnVtYmVyKF92YWwpO1xcblxcdFxcdFxcdH1cXG5cXHRcXHR9LFxcblxcblxcdFxcdHk6IHtcXG5cXHRcXHRcXHRnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG5cXHRcXHRcXHRcXHRyZXR1cm4gdGhpc1sxXTtcXG5cXHRcXHRcXHR9LFxcblxcblxcdFxcdFxcdHNldDogZnVuY3Rpb24gc2V0KF92YWwpIHtcXG5cXHRcXHRcXHRcXHR0aGlzWzFdID0gTnVtYmVyKF92YWwpO1xcblxcdFxcdFxcdH1cXG5cXHRcXHR9XFxuXFx0fSk7XFxuXFxuXFx0LyoqXFxuICAqIERlZmluZSB0aGUgcG9pbnQgd2l0aCBhbiBvYmplY3QuIChvdmVybG9hZGVkKVxcbiAgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0RpbWVuc2lvbnN+UG9pbnQjc2V0XFxuICAqIEBhcmcge29iamVjdH0gX3BvaW50IC0gQSBwb2ludCBvYmplY3Qge3gsIHl9LlxcbiAgKiBAcmV0dXJucyB7UG9pbnR9XFxuICAqL1xcblxcblxcdC8qKlxcbiAgKiBEZWZpbmUgdGhlIHBvaW50IHdpdGggYW4gYXJyYXkuIChvdmVybG9hZGVkKVxcbiAgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0RpbWVuc2lvbnN+UG9pbnQjc2V0XFxuICAqIEBhcmcge2FycmF5fSBfcG9pbnQgLSBBIHBvaW50IGFycmF5IFt4LCB5XS5cXG4gICogQHJldHVybnMge1BvaW50fVxcbiAgKi9cXG5cXG5cXHQvKipcXG4gICogRGVmaW5lIHRoZSBwb2ludC5cXG4gICogQGFyZyB7bnVtYmVyfSBfeCAtIFRoZSB4LlxcbiAgKiBAYXJnIHtudW1iZXJ9IF95IC0gVGhlIHkuXFxuICAqIEByZXR1cm5zIHtQb2ludH1cXG4gICovXFxuXFx0dGhpcy5zZXQgPSBmdW5jdGlvbiAoX3gsIF95KSB7XFxuXFx0XFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcXG5cXHRcXHRcXHRpZiAoX3gueCAhPT0gdW5kZWZpbmVkICYmIF94LnkgIT09IHVuZGVmaW5lZCkge1xcblxcdFxcdFxcdFxcdHRoaXNbMF0gPSBOdW1iZXIoX3gueCk7XFxuXFx0XFx0XFx0XFx0dGhpc1sxXSA9IE51bWJlcihfeC55KTtcXG5cXHRcXHRcXHR9IGVsc2UgaWYgKF94Lmxlbmd0aCA9PT0gMikge1xcblxcdFxcdFxcdFxcdHRoaXNbMF0gPSBOdW1iZXIoX3hbMF0pO1xcblxcdFxcdFxcdFxcdHRoaXNbMV0gPSBOdW1iZXIoX3hbMV0pO1xcblxcdFxcdFxcdH1cXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdHRoaXNbMF0gPSBOdW1iZXIoX3gpO1xcblxcdFxcdFxcdHRoaXNbMV0gPSBOdW1iZXIoX3kpO1xcblxcdFxcdH1cXG5cXG5cXHRcXHRyZXR1cm4gdGhpcztcXG5cXHR9O1xcblxcblxcdC8qKlxcbiAgKiBDYWxjdWxhdGVzIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBpbnNhdG5jZSBhbmQgYSBwb2ludCBvYmplY3QuXFxuICAqIEBhcmcge1BvaW50fSBfcG9pbnQgLSBBIHBvaW50IG9iamVjdCB7eCx5fS5cXG4gICogQHJldHVybnMge1NpemV9XFxuICAqL1xcblxcdHRoaXMuZGlzdGFuY2UgPSBmdW5jdGlvbiAoX3BvaW50KSB7XFxuXFx0XFx0aWYgKF9wb2ludC54ICE9PSB1bmRlZmluZWQgJiYgX3BvaW50LnkgIT09IHVuZGVmaW5lZCkge1xcblxcdFxcdFxcdHJldHVybiBTaXplLmNyZWF0ZSgpLnNldChfcG9pbnQueCAtIHRoaXMueCwgX3BvaW50LnkgLSB0aGlzLnkpO1xcblxcdFxcdH1cXG5cXG5cXHRcXHRyZXR1cm4gbnVsbDtcXG5cXHR9O1xcblxcblxcdC8qKlxcbiAgKiBTZXRzIHggYW5kIHkgcHJvcGVydGllcyBvbiB0aGUgZ2l2ZW4gb2JqZWN0LiBJZiB0aGUgb2JqZWN0IGlzIGFuIEhUTUwgbm9kZSB0aGVuIHRoZSBsZWZ0IGFuZCB0b3AgcHJvcGVydGllcyB3aWxsIGJlIHNldCBvbiB0aGUgbm9kZXMgc3R5bGUgb2JqZWN0LlxcbiAgKiBAYXJnIHtvYmplY3R8SFRNTEVsZW1lbnR9IC0gVGhlIG9iamVjdCBvciBET00gbm9kZS5cXG4gICogQHJldHVybnMge3RoaXN9XFxuICAqL1xcblxcdHRoaXMuYXBwbHlUbyA9IGZ1bmN0aW9uIChfb2JqZWN0KSB7XFxuXFx0XFx0aWYgKF9vYmplY3Qubm9kZVR5cGUgPT09IGRvY3VtZW50LkVMRU1FTlRfTk9ERSkge1xcblxcdFxcdFxcdF9vYmplY3Quc3R5bGUubGVmdCA9IHRoaXMueDtcXG5cXHRcXHRcXHRfb2JqZWN0LnN0eWxlLnRvcCA9IHRoaXMueTtcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdF9vYmplY3QueCA9IHRoaXMueDtcXG5cXHRcXHRcXHRfb2JqZWN0LnkgPSB0aGlzLnk7XFxuXFx0XFx0fVxcblxcblxcdFxcdHJldHVybiB0aGlzO1xcblxcdH07XFxuXFxuXFx0LyoqXFxuICAqIFJvdGF0ZSB0aGUgcG9pbnQgYmFzZWQgb24gYW4gb3JpZ2luIHBvaW50IGFuZCBhbiBhbmdsZSBpbiBkZWdyZWVzLlxcbiAgKiBAYXJnIHtQb2ludH0gX29yaWdpbiAtIEEgcG9pbnQgb2JqZWN0IHt4LHl9LlxcbiAgKiBAYXJnIHtudW1iZXJ9IF9hbmdsZSAtIFRoZSBhbmdsZSBvZiByb3RhdGlvbiBpbiBkZWdyZWVzLlxcbiAgKiBAcmV0dXJucyB7dGhpc31cXG4gICovXFxuXFx0dGhpcy5yb3RhdGUgPSBmdW5jdGlvbiAoX29yaWdpbiwgX2FuZ2xlKSB7XFxuXFx0XFx0dmFyIHgsIHksIHJhZDtcXG5cXG5cXHRcXHRyYWQgPSBfYW5nbGUgKiAoTWF0aC5QSSAvIDE4MCk7XFxuXFxuXFx0XFx0eCA9IHRoaXMueCAtIF9vcmlnaW4ueDtcXG5cXHRcXHR5ID0gdGhpcy55IC0gX29yaWdpbi55O1xcblxcblxcdFxcdHJldHVybiB0aGlzLmNyZWF0ZSgpLnNldChNYXRoLnNpbihyYWQpICogeCAtIE1hdGguY29zKHJhZCkgKiB5ICsgX29yaWdpbi54LCBNYXRoLmNvcyhyYWQpICogeCArIE1hdGguc2luKHJhZCkgKiB5ICsgX29yaWdpbi55KTtcXG5cXHR9O1xcbn0pO1xcblxcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHsgRGltZW5zaW9uOiBEaW1lbnNpb24sIFNpemU6IFNpemUsIFBvaW50OiBQb2ludCB9O1xcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOy8vQCBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emIzVnlZMlV2ZEhsd1pYTXZSR2x0Wlc1emFXOXVjeTVxY3o4NVpHWXhJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPekpEUVcxRWRVSXNRMEZCYTBJN096czdRVUZGZWtNc1NVRkJTU3hUUVVGVExFVkJRVVVzU1VGQlNTeEZRVUZGTEV0QlFVc3NRMEZCUXpzN096czdPenM3T3pzN096czdPenM3UVVGcFFqTkNMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zUlVGQlJTeEhRVUZITEZWQlFWVXNUVUZCVFN4RlFVRkZPMEZCUTNSRExFdEJRVWtzUjBGQlJ5eERRVUZET3p0QlFVVlNMRWxCUVVjc1IwRkJSenRCUVVOTUxFOUJRVXNzUlVGQlJTeExRVUZMTzBGQlExb3NUVUZCU1N4RlFVRkZMRWxCUVVrN1JVRkRWaXhEUVVGRE96dEJRVVZHTEV0QlFVa3NUMEZCVHl4TlFVRk5MRXRCUVVzc1VVRkJVU3hGUVVGRk8wRkJReTlDTEZOQlFVOHNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhYUVVGWExFVkJRVVVzUTBGQlF5eERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEZRVU53UkN4TlFVVkpMRWxCUVVrc1QwRkJUeXhOUVVGTkxFdEJRVXNzVVVGQlVTeEpRVUZKTEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhGUVVGRkxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTzBGQlEyeEdMRTFCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zWVVGQllTeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZPMEZCUTJoRExGVkJRVThzVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFMUJRVTBzUlVGQlJTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMGRCUXk5RE8wVkJRMFE3TzBGQlJVUXNVVUZCVHl4SlFVRkpMRU5CUVVNN1EwRkRXanM3T3pzN096czdPMEZCVTBRc1UwRkJVeXhIUVVGSExEWkNRVUZYTEUxQlFVMHNRMEZCUXl4WlFVRlpPMEZCUTNwRExFdEJRVWtzVjBGQlZ5eERRVUZET3p0QlFVVm9RaXhaUVVGWExFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXpzN1FVRkZka0lzUzBGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEZEVJc1MwRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eEpRVUZKTEVWQlEzQkNMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZET3pzN096czdPMEZCVDJoQ0xFdEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NWVUZCVlN4bFFVRmxMRVZCUVVVN1FVRkRlRU1zVFVGQlNTeFJRVUZSTEVOQlFVTTdPMEZCUldJc1ZVRkJVU3hIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXpzN1FVRkZlRUlzVFVGQlNTeGxRVUZsTEVWQlFVVXNVVUZCVVN4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeEZRVUZGTEdWQlFXVXNRMEZCUXl4RFFVRkRPenRCUVVWdVJTeFRRVUZQTEZGQlFWRXNRMEZCUXp0RlFVTm9RaXhEUVVGRE96czdPenM3T3p0QlFWRkdMRXRCUVVrc1EwRkJReXhIUVVGSExFZEJRVWNzVlVGQlZTeEpRVUZKTEVWQlFVVXNUMEZCVHl4RlFVRkZPMEZCUTI1RExFMUJRVWtzUTBGQlF5eEZRVUZETEVOQlFVTXNRMEZCUXpzN1FVRkZVaXhOUVVGSkxFbEJRVWtzUTBGQlF5eE5RVUZOTEV0QlFVc3NRMEZCUXl4RlFVRkZPMEZCUTNSQ0xFbEJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRXaXhKUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMGRCUTFvc1RVRkZTU3hKUVVGSkxFOUJRVThzU1VGQlNTeEpRVUZKTEVWQlFVVTdRVUZEZWtJc1NVRkJReXhIUVVGSExFbEJRVWtzUTBGQlF6dEJRVU5VTEVsQlFVTXNSMEZCUnl4UFFVRlBMRU5CUVVNN1IwRkRXaXhOUVVWSk8wRkJRMG9zU1VGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNN1IwRkRZanM3UVVGRlJDeFRRVUZQTEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhIUVVGSExFTkJRM1pDTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRMWdzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkRXQ3hEUVVGRE8wVkJRMFlzUTBGQlF6czdPenM3T3pzN1FVRlJSaXhMUVVGSkxFTkJRVU1zUjBGQlJ5eEhRVUZITEZWQlFWVXNTVUZCU1N4RlFVRkZMRTlCUVU4c1JVRkJSVHRCUVVOdVF5eE5RVUZKTEVOQlFVTXNSVUZCUXl4RFFVRkRMRU5CUVVNN08wRkJSVklzVFVGQlNTeEpRVUZKTEVOQlFVTXNUVUZCVFN4TFFVRkxMRU5CUVVNc1JVRkJSVHRCUVVOMFFpeEpRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRMW9zU1VGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRIUVVOYUxFMUJSVWtzU1VGQlNTeFBRVUZQTEVsQlFVa3NTVUZCU1N4RlFVRkZPMEZCUTNwQ0xFbEJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTTdRVUZEVkN4SlFVRkRMRWRCUVVjc1QwRkJUeXhEUVVGRE8wZEJRMW9zVFVGRlNUdEJRVU5LTEVsQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRE8wZEJRMkk3TzBGQlJVUXNVMEZCVHl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVU4yUWl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eEZRVU5ZTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRMWdzUTBGQlF6dEZRVU5HTEVOQlFVTTdPenM3T3pzN08wRkJVVVlzUzBGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4VlFVRlZMRTFCUVUwc1JVRkJSU3hQUVVGUExFVkJRVVU3UVVGRGRrTXNVMEZCVHl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVU4yUWl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzVFVGQlRTeEZRVU5vUWl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzVDBGQlR5eEpRVUZKTEVsQlFVa3NSMEZCUnl4UFFVRlBMRWRCUVVjc1RVRkJUU3hEUVVGRExFTkJRemxETEVOQlFVTTdSVUZEUml4RFFVRkRPenM3T3pzN096czdRVUZUUml4TFFVRkpMRU5CUVVNc1NVRkJTU3hIUVVGSExGVkJRVlVzU1VGQlNTeEZRVUZGTzBGQlF6TkNMRTFCUVVrc1NVRkJTU3hIUVVGSExFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6czdRVUZGZGtNc1UwRkJUeXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTXNSMEZCUnl4RFFVTjJRaXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eEZRVU01UXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVNNVF5eERRVUZETzBWQlEwWXNRMEZCUXpzN096czdPMEZCVFVZc1MwRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eFpRVUZaTzBGQlF6TkNMRk5CUVU4c1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVkQlFVY3NRMEZEZGtJc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVTnFRaXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUTJwQ0xFTkJRVU03UlVGRFJpeERRVUZET3pzN096czdRVUZOUml4TFFVRkpMRU5CUVVNc1ZVRkJWU3hIUVVGSExGbEJRVms3UVVGRE4wSXNVMEZCVHl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVU4yUWl4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlEyNUNMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZEYmtJc1EwRkJRenRGUVVOR0xFTkJRVU03T3pzN096czdRVUZQUml4TFFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExGVkJRVlVzVFVGQlRTeEZRVUZGTzBGQlEyaERMRTFCUVVrc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RlFVRkZMRTlCUVU4c1NVRkJTU3hEUVVGRE8wRkJRM3BETEZOQlFVOHNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dEZRVU0zUWl4RFFVRkRPenM3T3pzN096czdRVUZUUml4TFFVRkpMRU5CUVVNc1IwRkJSeXhIUVVGSExGVkJRVlVzVVVGQlVTeEZRVUZGTzBGQlF6bENMRk5CUVU4c1YwRkJWeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFMUJRVTBzUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenRGUVVONFJTeERRVUZET3pzN096czdRVUZOUml4TFFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExGbEJRVms3UVVGRE1VSXNVMEZCVHl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMFZCUTNwQ0xFTkJRVU03T3pzN096dEJRVTFHTEV0QlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1dVRkJXVHRCUVVONFFpeFRRVUZQTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdSVUZEZWtJc1EwRkJRenM3UVVGRlJpeExRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRmxCUVZrN1FVRkRNMElzVTBGQlR5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRGUVVOeVF5eERRVUZET3p0QlFVVkdMRXRCUVVrc1EwRkJReXhUUVVGVExFZEJRVWNzV1VGQldUdEJRVU0xUWl4VFFVRlBMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1JVRkRla0lzUTBGQlF6dERRVVZHTEVOQlFVTXNRMEZCUXpzN096czdPenM3T3pzN1FVRlhTQ3hKUVVGSkxFZEJRVWNzVTBGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4WlFVRlpPenM3T3pzN08wRkJUMjVETEV0QlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1EwRkJReXhQUVVGUExFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTTdPMEZCUlhCRExEQkNRVUYzUWl4SlFVRkpMRVZCUVVVN1FVRkROMElzVDBGQlN5eEZRVUZGTzBGQlEwNHNUVUZCUnl4RlFVRkZMR1ZCUVZrN1FVRkRhRUlzVjBGQlR5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRaanM3UVVGRlJDeE5RVUZITEVWQlFVVXNZVUZCVlN4SlFVRkpMRVZCUVVVN1FVRkRjRUlzVVVGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEpRVU4yUWp0SFFVTkVPenRCUVVWRUxGRkJRVTBzUlVGQlJUdEJRVU5RTEUxQlFVY3NSVUZCUlN4bFFVRlpPMEZCUTJoQ0xGZEJRVThzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTJZN08wRkJSVVFzVFVGQlJ5eEZRVUZGTEdGQlFWVXNTVUZCU1N4RlFVRkZPMEZCUTNCQ0xGRkJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03U1VGRGRrSTdSMEZEUkR0RlFVTkVMRU5CUVVNc1EwRkJRenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFYTkNTQ3hMUVVGSkxFTkJRVU1zUjBGQlJ5eEhRVUZITEZWQlFWVXNUVUZCVFN4RlFVRkZMRTlCUVU4c1JVRkJSVHRCUVVOeVF5eE5RVUZKTEZOQlFWTXNRMEZCUXl4TlFVRk5MRXRCUVVzc1EwRkJReXhGUVVGRk8wRkJRek5DTEU5QlFVa3NUVUZCVFN4RFFVRkRMRXRCUVVzc1MwRkJTeXhUUVVGVExFbEJRVWtzVFVGQlRTeERRVUZETEUxQlFVMHNTMEZCU3l4VFFVRlRMRVZCUVVVN1FVRkRPVVFzVVVGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdRVUZETDBJc1VVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03U1VGRGFFTXNUVUZGU1N4SlFVRkpMRTFCUVUwc1EwRkJReXhOUVVGTkxFdEJRVXNzUTBGQlF5eEZRVUZGTzBGQlF6ZENMRkZCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRE5VSXNVVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVNMVFqdEhRVU5FTEUxQlJVazdRVUZEU2l4UFFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMEZCUTNwQ0xFOUJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03UjBGRE1VSTdPMEZCUlVRc1UwRkJUeXhKUVVGSkxFTkJRVU03UlVGRFdpeERRVUZET3pzN096czdPMEZCVDBZc1MwRkJTU3hEUVVGRExGVkJRVlVzUjBGQlJ5eFpRVUZaTzBGQlF6ZENMRk5CUVU4c1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1JVRkRja1VzUTBGQlF6czdPenM3T3p0QlFVOUdMRXRCUVVrc1EwRkJReXhQUVVGUExFZEJRVWNzVlVGQlZTeFBRVUZQTEVWQlFVVTdRVUZEYWtNc1RVRkJTU3hQUVVGUExFTkJRVU1zVVVGQlVTeExRVUZMTEZGQlFWRXNRMEZCUXl4WlFVRlpMRVZCUVVVN1FVRkRMME1zVDBGQlNTeEZRVUZGTEU5QlFVOHNRMEZCUXl4TFFVRkxMRXRCUVVzc1UwRkJVeXhKUVVGSkxFOUJRVThzUTBGQlF5eE5RVUZOTEV0QlFVc3NVMEZCVXl4RFFVRkRMRVZCUVVVN1FVRkRia1VzVjBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF6dEJRVU5xUXl4WFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRPenRCUVVWdVF5eFhRVUZQTEVsQlFVa3NRMEZCUXp0SlFVTmFPMGRCUTBRN08wRkJSVVFzVTBGQlR5eERRVUZETEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRE8wRkJRek5DTEZOQlFVOHNRMEZCUXl4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF6czdRVUZGTjBJc1UwRkJUeXhKUVVGSkxFTkJRVU03UlVGRFdpeERRVUZETzBOQlJVWXNRMEZCUXl4RFFVRkRPenM3T3pzN096czdPenRCUVZkSUxFdEJRVXNzUjBGQlJ5eFRRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRMRmxCUVZrN096czdPenM3UVVGUGNFTXNTMEZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhEUVVGRExFZEJRVWNzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXpzN1FVRkZNMElzTUVKQlFYZENMRWxCUVVrc1JVRkJSVHRCUVVNM1FpeEhRVUZETEVWQlFVVTdRVUZEUml4TlFVRkhMRVZCUVVVc1pVRkJXVHRCUVVOb1FpeFhRVUZQTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVObU96dEJRVVZFTEUxQlFVY3NSVUZCUlN4aFFVRlZMRWxCUVVrc1JVRkJSVHRCUVVOd1FpeFJRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBsQlEzWkNPMGRCUTBRN08wRkJSVVFzUjBGQlF5eEZRVUZGTzBGQlEwWXNUVUZCUnl4RlFVRkZMR1ZCUVZrN1FVRkRhRUlzVjBGQlR5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRaanM3UVVGRlJDeE5RVUZITEVWQlFVVXNZVUZCVlN4SlFVRkpMRVZCUVVVN1FVRkRjRUlzVVVGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEpRVU4yUWp0SFFVTkVPMFZCUTBRc1EwRkJReXhEUVVGRE96czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZCYzBKSUxFdEJRVWtzUTBGQlF5eEhRVUZITEVkQlFVY3NWVUZCVlN4RlFVRkZMRVZCUVVVc1JVRkJSU3hGUVVGRk8wRkJRelZDTEUxQlFVa3NVMEZCVXl4RFFVRkRMRTFCUVUwc1MwRkJTeXhEUVVGRExFVkJRVVU3UVVGRE0wSXNUMEZCU1N4RlFVRkZMRU5CUVVNc1EwRkJReXhMUVVGTExGTkJRVk1zU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXl4TFFVRkxMRk5CUVZNc1JVRkJSVHRCUVVNM1F5eFJRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1RVRkJUU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTjJRaXhSUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NUVUZCVFN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU4yUWl4TlFVVkpMRWxCUVVrc1JVRkJSU3hEUVVGRExFMUJRVTBzUzBGQlN5eERRVUZETEVWQlFVVTdRVUZEZWtJc1VVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEUxQlFVMHNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU40UWl4UlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzVFVGQlRTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRM2hDTzBkQlEwUXNUVUZGU1R0QlFVTktMRTlCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eE5RVUZOTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkRja0lzVDBGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRTFCUVUwc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dEhRVU55UWpzN1FVRkZSQ3hUUVVGUExFbEJRVWtzUTBGQlF6dEZRVU5hTEVOQlFVTTdPenM3T3pzN1FVRlBSaXhMUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEZWQlFWVXNUVUZCVFN4RlFVRkZPMEZCUTJwRExFMUJRVWtzVFVGQlRTeERRVUZETEVOQlFVTXNTMEZCU3l4VFFVRlRMRWxCUVVrc1RVRkJUU3hEUVVGRExFTkJRVU1zUzBGQlN5eFRRVUZUTEVWQlFVVTdRVUZEY2tRc1ZVRkJUeXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTXNSMEZCUnl4RFFVTjJRaXhOUVVGTkxFTkJRVU1zUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkRMRVZCUTJwQ0xFMUJRVTBzUTBGQlF5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkRha0lzUTBGQlF6dEhRVU5HT3p0QlFVVkVMRk5CUVU4c1NVRkJTU3hEUVVGRE8wVkJRMW9zUTBGQlF6czdPenM3T3p0QlFVOUdMRXRCUVVrc1EwRkJReXhQUVVGUExFZEJRVWNzVlVGQlZTeFBRVUZQTEVWQlFVVTdRVUZEYWtNc1RVRkJTU3hQUVVGUExFTkJRVU1zVVVGQlVTeExRVUZMTEZGQlFWRXNRMEZCUXl4WlFVRlpMRVZCUVVVN1FVRkRMME1zVlVGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU0xUWl4VlFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGRCUXpOQ0xFMUJSVWs3UVVGRFNpeFZRVUZQTEVOQlFVTXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRGJrSXNWVUZCVHl4RFFVRkRMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzBkQlEyNUNPenRCUVVWRUxGTkJRVThzU1VGQlNTeERRVUZETzBWQlExb3NRMEZCUXpzN096czdPenM3UVVGUlJpeExRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRlZCUVZVc1QwRkJUeXhGUVVGRkxFMUJRVTBzUlVGQlJUdEJRVU40UXl4TlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZET3p0QlFVVmtMRXRCUVVjc1IwRkJSeXhOUVVGTkxFbEJRVWtzU1VGQlNTeERRVUZETEVWQlFVVXNSMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenM3UVVGRk4wSXNSMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRExFZEJRVWNzVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTjJRaXhIUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVTXNSMEZCUnl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRE96dEJRVVYyUWl4VFFVRlBMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eEhRVUZITEVOQlEzUkNMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkpMRTlCUVU4c1EwRkJReXhEUVVGRExFVkJRMnhFTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZKTEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUTI1RUxFTkJRVU03UlVGRFJpeERRVUZETzBOQlJVWXNRMEZCUXl4RFFVRkRPenR4UWtGRldTeEZRVUZGTEZOQlFWTXNSVUZCVkN4VFFVRlRMRVZCUVVVc1NVRkJTU3hGUVVGS0xFbEJRVWtzUlVGQlJTeExRVUZMTEVWQlFVd3NTMEZCU3l4RlFVRkZJaXdpWm1sc1pTSTZJalV1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlGeHVJQ29nUUcxdlpIVnNaVnh1SUNvZ1FIWmxjbk5wYjI0Z01TNHhYRzRnS2lCQVlYVjBhRzl5SUUxcFkyRm9JRkp2Ykc5dUlEeG1kVzVqZEdsdmJtMXBZMkZvUUdkdFlXbHNMbU52YlQ1Y2JpQXFJRUJ5WlhGMWFYSmxjeUJ0YjJSMWJHVTZkSGx3WlhNdlFtRnphV05CY25KaGVYNUNZWE5wWTBGeWNtRjVYRzRnS2x4dUlDb2dRR1JsYzJNZ0trTnlaV0YwWldRNklERXhMekV5THpFMEtseHVJQ3BjYmlBcUlGUm9hWE1nWm1sc1pTQmpiMjUwWVdsdWN5QnZZbXBsWTNSeklHWnZjaUJqYjI1MFlXbHVhVzVuSUhaaGJIVmxjeUJoWW05MWRDQmhJSEJzWVc1bExpQnBMbVV1SUhnZ2IzSWdkMmxrZEdndVhHNGdLaUJCWkdSeklIUm9aU0JqYjI1MlpXNXBaVzVqWlNCdlppQnJaV1Z3YVc1bklIUm9aWE5sSUhaaGJIVmxjeUJ3WVdseVpXUWdkRzhnY0dGemMyVmtJR0Z5YjNWdVpDQjViM1Z5SUdGd2NHeHBZMkYwYVc5dUxseHVJQ29nU1hRZ1lXeHpieUJwYm1Oc2RXUmxjeUJ0WlhSb2IyUnpJSGRvYVdOb0lIbHZkU0J3WlhKbWIzSnRJRzl1SUhSb1pTQjJZV3gxWlhNZ1lXNWtJSEpsZEhWeWJuTWdZU0J1WlhjZ2IySnFaV04wWEc0Z0tpQnpieUIwYUdVZ2IzSnBaMmx1WVd3Z2RtRnNkV1Z6SUdGeVpTQnRZV2x1ZEdGcGJtVmtMbHh1SUNwY2JpQXFJQ01qSXlNZ1ZYTmhaMlZjYmlBcVhHNGdLaUJPWlhjZ2FXNXpkR0Z1WTJWeklHTmhiaUJpWlNCamNtVmhkR1ZrSUdKNUlHTmhiR3hwYm1jZ2RHaGxJR055WldGMFpTQnRaWFJvYjJRdVhHNGdLaUJnWUdCY2JpQXFJR04xY25OdmNreHZZMkYwYVc5dUlEMGdVRzlwYm5RdVkzSmxZWFJsS0NrN1hHNGdLaUJnWUdCY2JpQXFYRzRnS2lCVWFHVnVJR05oYkd3Z1lITmxkQ2dwWUNCMGJ5QmhjSEJzZVNCNWIzVnlJSFpoYkhWbGN5NWNiaUFxSUdCZ1lGeHVJQ29nWTNWeWMyOXlURzlqWVhScGIyNHVjMlYwS0dWMlpXNTBMbU5zYVdWdWRGZ3NJR1YyWlc1MExtTnNhV1Z1ZEZrcE8xeHVJQ29nWUdCZ1hHNGdLbHh1SUNvZ1ZHaGxiaUI1YjNVZ1kyRnVJSFZ6WlNCMGFHVWdZMkZzWTNWc1lYUnBiMjRnYldWMGFHOWtjeUIwYnlCd1pYSm1iM0p0SUhSeVlXNXpabTl5YldGMGFXOXVjeTVjYmlBcUlHQmdZRnh1SUNvZ2NtVnNZWFJwZG1WRGRYSnpiM0lnUFNCamRYSnpiM0pNYjJOaGRHbHZiaTV6WTJGc1pTaDZiMjl0S1R0Y2JpQXFJR0JnWUZ4dUlDcGNiaUFxSUNNakl5TWdSR1YyWld4dmNHVnlJRTV2ZEdWelhHNGdLbHh1SUNvZ1YyaGxiaUJoWkdScGJtY2dibVYzSUcxbGRHaHZaSE1nYldGclpTQnpkWEpsSUhsdmRTQmhjbVVnY21WMGRYSnVhVzVuSUdFZ2JtVjNJR2x1YzNSaGJtTmxMbHh1SUNvZ1JHbHRaVzV6YVc5dVlXd2diMkpxWldOMGN5QmhjbVVnYldWaGJuUWdkRzhnWW1VZ2FXMXRkWFJoWW14bExseHVJQ3BjYmlBcUlFWnZiR3h2ZHlCMGFHbHpJSEJoZEhSbGNtNDZYRzRnS2lCZ1lHQmNiaUFxSUhSb2FYTXViV1YwYUc5a0lEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDb2dJQ0FnSUM4dklITmxkQ0IzYVhSb0lIbHZkWElnWTJGc1kzVnNZWFJsWkNCMllXeDFaWE11WEc0Z0tpQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkzSmxZWFJsS0NrdWMyVjBLQ0F1TGk0Z0tWeHVJQ29nZlZ4dUlDb2dZR0JnWEc0Z0tseHVJQ29nSXlNakl5QkRhR0Z1WjJVZ1RHOW5YRzRnS2lBcWRqRXVNU0F0SURFeUx6RXpMekUxS2x4dUlDb2dMU0JFWldacGJtVmtJSE5sZEhSbGNpOW5aWFIwWlhJZ2NISnZjR1Z5ZEdsbGN5Qm1iM0lnZFc1cGNYVmxJSEJzWVc1bGN5QnJaWGx6TGlCWmIzVWdZMkZ1SUc1dmR5QmtieUJnY0c5cGJuUXVkMmxrZEdnZ1BTQXhNR0F1WEc0Z0tpOWNibHh1THlwcWMyeHBiblFnWW5KdmQzTmxjam9nZEhKMVpTd2daWEZsY1RvZ2RISjFaU3dnYm05dFpXNDZJSFJ5ZFdVc0lITnNiM0J3ZVRvZ2RISjFaU3dnZDJocGRHVTZJSFJ5ZFdVZ0tpOWNibHh1YVcxd2IzSjBJRUpoYzJsalFYSnlZWGtnWm5KdmJTQW5kSGx3WlhNdlFtRnphV05CY25KaGVTYzdYRzVjYm5aaGNpQkVhVzFsYm5OcGIyNHNJRk5wZW1Vc0lGQnZhVzUwTzF4dVhHNHZLaXBjYmlBcUlGUm9aU0J1WVhScGRtVWdRWEp5WVhsY2JpQXFJRUJsZUhSbGNtNWhiQ0JCY25KaGVWeHVJQ29nUUhObFpTQjdRR3hwYm1zZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdWJXOTZhV3hzWVM1dmNtY3ZaVzR0VlZNdlpHOWpjeTlYWldJdlNtRjJZVk5qY21sd2RDOVNaV1psY21WdVkyVXZSMnh2WW1Gc1gwOWlhbVZqZEhNdlFYSnlZWGw5WEc0Z0tpOWNibHh1THlvcVhHNGdLaUJCY25KaGVTQndjbTkwYjNSNWNHVWdaWGgwWlc1emFXOXVYRzRnS2lCRGNtVmhkR1Z6SUdGdUlHbHVjM1JoYm1ObElHOW1JR0JmVkdocGJtZGdJR0Z1WkNCd1lYTnpaWE1nZEdobElHRnljbUY1SUhSdklHbDBjeUJ6WlhRZ1puVnVZM1JwYjI0Z1lYTWdhWFJ6SUdGeVozVnRaVzUwY3k1Y2JpQXFJRUJtZFc1amRHbHZiaUJsZUhSbGNtNWhiRHBCY25KaGVTTjBiMXh1SUNvZ1FHRnlaeUI3VUc5cGJuUjhVMmw2Wlh4emRISnBibWQ5SUY5VWFHbHVaeUF0SUVFZ1JHbHRaVzV6YVc5dUlHOWlhbVZqZENCdmNpQnZibVVnZEdobElITjBjbWx1WjNNZ0ozQnZhVzUwSnk4bmMybDZaU2RjYmlBcUlFQmxlR0Z0Y0d4bFhHNGdLaUJ6YjIxbFVHOXBiblFnUFNCYk1UQXNJREV3WFM1MGJ5aFFiMmx1ZENrN1hHNGdLaUJ6YjIxbFVHOXBiblFnUFNCYk1UQXNJREV3WFM1MGJ5Z25jRzlwYm5RbktUdGNiaUFxTDF4dVFYSnlZWGt1Y0hKdmRHOTBlWEJsTG5SdklEMGdablZ1WTNScGIyNGdLRjlVYUdsdVp5a2dlMXh1WEhSMllYSWdiV0Z3TzF4dVhHNWNkRzFoY0NBOUlIdGNibHgwWEhSd2IybHVkRG9nVUc5cGJuUXNYRzVjZEZ4MGMybDZaVG9nVTJsNlpWeHVYSFI5TzF4dVhHNWNkR2xtSUNoMGVYQmxiMllnWDFSb2FXNW5JRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVYSFJjZEhKbGRIVnliaUJ0WVhCYlgxUm9hVzVuTG5SdlRHOTNaWEpEWVhObEtDbGRMbU55WldGMFpTZ3BMbk5sZENoMGFHbHpLVHRjYmx4MGZWeHVYRzVjZEdWc2MyVWdhV1lnS0hSNWNHVnZaaUJmVkdocGJtY2dQVDA5SUNkdlltcGxZM1FuSUNZbUlINWJVRzlwYm5RdWMyVjBMQ0JUYVhwbExuTmxkRjB1YVc1a1pYaFBaaWhmVkdocGJtY3VjMlYwS1NrZ2UxeHVYSFJjZEdsbUlDZ2hYMVJvYVc1bkxtbHpVSEp2ZEc5MGVYQmxUMllvZEdocGN5a3BJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQmZWR2hwYm1jdWMyVjBMbUZ3Y0d4NUtGOVVhR2x1Wnk1amNtVmhkR1VvS1N3Z2RHaHBjeWs3WEhSY2JseDBYSFI5WEc1Y2RIMWNibHgwWEhSY2JseDBjbVYwZFhKdUlIUm9hWE03WEc1OVhHNWNiaThxS2x4dUlDb2dQSE53WVc0Z1kyeGhjM005WENKcGJYQnZjblJoYm5SY0lqNU9UMVJGT2p3dmMzQmhiajRnVkdocGN5QnBjeUJPVDFRZ1lTQmpiMjV6ZEhKMVkzUnZjaTRnZFhObElHQkVhVzFsYm5OcGIyNHVZM0psWVhSbEtDbGdJSFJ2SUdkbGRDQmhJRzVsZHlCcGJuTjBZVzVqWlM1Y2JpQXFJRUJqYkdGemMxeHVJQ29nUUdOc1lYTnpaR1Z6WXlCQ1lYTmxJR05zWVhOeklHWnZjaUJrYVcxbGJuTnBiMjVoYkNCdlltcGxZM1J6SUdOdmJuTnBjM1JwYm1jZ2IyWWdNaUJ3YkdGdVpYTXVQR0p5UGx4dUlDb2dQSE53WVc0Z1kyeGhjM005WENKcGJYQnZjblJoYm5SY0lqNU9UMVJGT2p3dmMzQmhiajRnVkdocGN5QnBjeUJoYmlCcGJXMTFkR0ZpYkdVZ1kyeGhjM011SUUxbGRHaHZaSE1nY21WMGRYSnVJR0VnYm1WM0lHOWlhbVZqZENCM2FYUm9JSFJvWlNCdmNtbG5hVzVoYkNCaGN5QnBkSE1nY0hKdmRHOTBlWEJsTGx4dUlDb2dRR1Y0ZEdWdVpITWdiVzlrZFd4bE9uUjVjR1Z6TDBKaGMybGpRWEp5WVhsK1FtRnphV05CY25KaGVWeHVJQ292WEc1RWFXMWxibk5wYjI0Z1BTQkNZWE5wWTBGeWNtRjVMbVY0ZEdWdVpDaG1kVzVqZEdsdmJpQW9LU0I3WEc1Y2RIWmhjaUJ2Y21sbmFXNWhiRTFoY0R0Y2JseHVYSFJ2Y21sbmFXNWhiRTFoY0NBOUlIUm9hWE11YldGd08xeHVYRzVjZEhSb2FYTmJNRjBnUFNCMGFHbHpXekZkSUQwZ01EdGNibHgwZEdocGN5NXdiR0Z1WlUxaGNDQTlJRzUxYkd3c1hHNWNkSFJvYVhNdWJHVnVaM1JvSUQwZ01qdGNibHh1WEhRdktpcGNibHgwSUNvZ1VISnZkbWxrWlhNZ1lTQnVaWGNnYVc1emRHRnVZMlV1WEc1Y2RDQXFJRUJoY21jZ2UyRnljbUY1ZlNCZllYSm5kVzFsYm5SelFYSnlZWGtnTFNCRGNtVmhkR1VnWVNCdVpYY2dhVzV6ZEdGalpTQjNhWFJvSUdGdUlHRnlaM1Z0Wlc1MGN5QmhjbkpoZVM1Y2JseDBJQ29nUUhKbGRIVnlibk1nZTBScGJXVnVjMmx2Ym4xY2JseDBJQ292WEc1Y2RIUm9hWE11WTNKbFlYUmxJRDBnWm5WdVkzUnBiMjRnS0Y5aGNtZDFiV1Z1ZEhOQmNuSmhlU2tnZTF4dVhIUmNkSFpoY2lCcGJuTjBZVzVqWlR0Y2JseHVYSFJjZEdsdWMzUmhibU5sSUQwZ2RHaHBjeTV3Y205MGJ5Z3BPMXh1WEc1Y2RGeDBhV1lnS0Y5aGNtZDFiV1Z1ZEhOQmNuSmhlU2tnYVc1emRHRnVZMlV1YzJWMExtRndjR3g1S0dsdWMzUmhibU5sTENCZllYSm5kVzFsYm5SelFYSnlZWGtwTzF4dVhHNWNkRngwY21WMGRYSnVJR2x1YzNSaGJtTmxPMXh1WEhSOU8xeHVYRzVjZEM4cUtseHVYSFFnS2lCSmJtTmxjbVZ0Wlc1MElHVmhZMmdnY0d4aGJtVWdZbmtnWVNCMllXeDFaU0J2Y2lCemNHVmphV1o1SUdWaFkyZ2djR3hoYm1VdVhHNWNkQ0FxSUVCaGNtY2dlMjUxYldKbGNuMGdYM1poYkNBdElIQnNZVzVsSUdFZ2IyWWdLR0VzWWlsY2JseDBJQ29nUUdGeVp5QjdiblZ0WW1WeWZTQmJYM0JzWVc1bE1sMGdMU0J3YkdGdVpTQmlJRzltSUNoaExHSXBYRzVjZENBcUlFQnlaWFIxY201eklIdEVhVzFsYm5OcGIyNTlYRzVjZENBcUwxeHVYSFIwYUdsekxtbHVZeUE5SUdaMWJtTjBhVzl1SUNoZmRtRnNMQ0JmY0d4aGJtVXlLU0I3WEc1Y2RGeDBkbUZ5SUdFc1lqdGNibHh1WEhSY2RHbG1JQ2hmZG1Gc0xteGxibWQwYUNBOVBUMGdNaWtnZTF4dVhIUmNkRngwWVNBOUlGOTJZV3hiTUYwN1hHNWNkRngwWEhSaUlEMGdYM1poYkZzeFhUdGNibHgwWEhSOVhHNWNibHgwWEhSbGJITmxJR2xtSUNoZmNHeGhibVV5SUNFOUlHNTFiR3dwSUh0Y2JseDBYSFJjZEdFZ1BTQmZkbUZzTzF4dVhIUmNkRngwWWlBOUlGOXdiR0Z1WlRJN1hHNWNkRngwZlZ4dVhHNWNkRngwWld4elpTQjdYRzVjZEZ4MFhIUmhJRDBnWWlBOUlGOTJZV3c3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBjbVYwZFhKdUlIUm9hWE11WTNKbFlYUmxLQ2t1YzJWMEtGeHVYSFJjZEZ4MGRHaHBjMXN3WFNBcklHRXNYRzVjZEZ4MFhIUjBhR2x6V3pGZElDc2dZbHh1WEhSY2RDazdYRzVjZEgwN1hHNWNibHgwTHlvcVhHNWNkQ0FxSUVSbFkyVnlaVzFsYm5RZ1pXRmphQ0J3YkdGdVpTQmllU0JoSUhaaGJIVmxJRzl5SUhOd1pXTnBabmtnWldGamFDQndiR0Z1WlM1Y2JseDBJQ29nUUdGeVp5QjdiblZ0WW1WeWZTQmZkbUZzSUMwZ2NHeGhibVVnWVNCdlppQW9ZU3hpS1Z4dVhIUWdLaUJBWVhKbklIdHVkVzFpWlhKOUlGdGZjR3hoYm1VeVhTQXRJSEJzWVc1bElHSWdiMllnS0dFc1lpbGNibHgwSUNvZ1FISmxkSFZ5Ym5NZ2UwUnBiV1Z1YzJsdmJuMWNibHgwSUNvdlhHNWNkSFJvYVhNdVpHVmpJRDBnWm5WdVkzUnBiMjRnS0Y5MllXd3NJRjl3YkdGdVpUSXBJSHRjYmx4MFhIUjJZWElnWVN4aU8xeHVYRzVjZEZ4MGFXWWdLRjkyWVd3dWJHVnVaM1JvSUQwOVBTQXlLU0I3WEc1Y2RGeDBYSFJoSUQwZ1gzWmhiRnN3WFR0Y2JseDBYSFJjZEdJZ1BTQmZkbUZzV3pGZE8xeHVYSFJjZEgxY2JseHVYSFJjZEdWc2MyVWdhV1lnS0Y5d2JHRnVaVElnSVQwZ2JuVnNiQ2tnZTF4dVhIUmNkRngwWVNBOUlGOTJZV3c3WEc1Y2RGeDBYSFJpSUQwZ1gzQnNZVzVsTWp0Y2JseDBYSFI5WEc1Y2JseDBYSFJsYkhObElIdGNibHgwWEhSY2RHRWdQU0JpSUQwZ1gzWmhiRHRjYmx4MFhIUjlYRzVjYmx4MFhIUnlaWFIxY200Z2RHaHBjeTVqY21WaGRHVW9LUzV6WlhRb1hHNWNkRngwWEhSMGFHbHpXekJkSUMwZ1lTeGNibHgwWEhSY2RIUm9hWE5iTVYwZ0xTQmlYRzVjZEZ4MEtUdGNibHgwZlR0Y2JseHVYSFF2S2lwY2JseDBJQ29nVFhWc2RHbHdiSGtnWldGamFDQndiR0Z1WlNCaWVTQmhJSFpoYkhWbElHOXlJSE53WldOcFpua2daV0ZqYUNCd2JHRnVaUzVjYmx4MElDb2dRR0Z5WnlCN2JuVnRZbVZ5ZlNCZmMyTmhiR1VnTFNCd2JHRnVaU0JoSUc5bUlDaGhMR0lwWEc1Y2RDQXFJRUJoY21jZ2UyNTFiV0psY24wZ1cxOXdiR0Z1WlRKZElDMGdjR3hoYm1VZ1lpQnZaaUFvWVN4aUtWeHVYSFFnS2lCQWNtVjBkWEp1Y3lCN1JHbHRaVzV6YVc5dWZWeHVYSFFnS2k5Y2JseDBkR2hwY3k1elkyRnNaU0E5SUdaMWJtTjBhVzl1SUNoZmMyTmhiR1VzSUY5d2JHRnVaVElwSUh0Y2JseDBYSFJ5WlhSMWNtNGdkR2hwY3k1amNtVmhkR1VvS1M1elpYUW9YRzVjZEZ4MFhIUjBhR2x6V3pCZElDb2dYM05qWVd4bExGeHVYSFJjZEZ4MGRHaHBjMXN4WFNBcUlDaGZjR3hoYm1VeUlDRTlJRzUxYkd3Z1B5QmZjR3hoYm1VeUlEb2dYM05qWVd4bEtWeHVYSFJjZENrN1hHNWNkSDA3WEc1Y2JseDBMeW9xWEc1Y2RDQXFJRkJsY21admJTQmhJRTFoZEdnZ1puVnVZM1JwYjI0Z2IyNGdaV0ZqYUNCd2JHRnVaVnh1WEhRZ0tpQkFZWEpuSUh0emRISnBibWQ5SUY5bWRXNGdMU0JoSUhOMGNtbHVaeUJ2WmlCMGFHVWdablZ1WTNScGIyNGdibUZ0WlNCcGJpQjBhR1VnU2xNZ1RXRjBhQ0J2WW1wbFkzUXNYRzVjZENBcUlHWnZiR3h2ZDJWa0lHSjVJSFJvWlNCM2FHRjBaWFpsY2lCaGNtZDFiV1Z1ZEhNZ2RHaGxJR1oxYm1OMGFXOXVJSFJoYTJWeklHRm1kR1Z5SUdsMGN5Qm1hWEp6ZEZ4dVhIUWdLaUJ6YVc1alpTQjBhR1VnWm1seWMzUWdZWEpuZFcxbGJuUWdhWE1nZEdobElIQnNZVzVsSUhaaGJIVmxMbHh1WEhRZ0tpQkFjbVYwZFhKdWN5QjdSR2x0Wlc1emFXOXVmVnh1WEhRZ0tpOWNibHgwZEdocGN5NXRZWFJvSUQwZ1puVnVZM1JwYjI0Z0tGOW1kVzRwSUh0Y2JseDBYSFIyWVhJZ1lYSm5jeUE5SUZ0ZExuTnNhV05sTG1OaGJHd29ZWEpuZFcxbGJuUnpMQ0F4S1R0Y2JseHVYSFJjZEhKbGRIVnliaUIwYUdsekxtTnlaV0YwWlNncExuTmxkQ2hjYmx4MFhIUmNkRTFoZEdoYlgyWjFibDB1WVhCd2JIa29UV0YwYUN3Z1czUm9hWE5iTUYxZExtTnZibU5oZENoaGNtZHpLU2tzWEc1Y2RGeDBYSFJOWVhSb1cxOW1kVzVkTG1Gd2NHeDVLRTFoZEdnc0lGdDBhR2x6V3pGZFhTNWpiMjVqWVhRb1lYSm5jeWtwWEc1Y2RGeDBLVHRjYmx4MGZUdGNibHh1WEhRdktpcGNibHgwSUNvZ1ZHRnJaWE1nWldGamFDQndiR0Z1WlNCMllXeDFaU0JoYm1RZ2NHRnpjMlZ6SUdsMElIUnZJSEJoY25ObFNXNTBLQ2t1WEc1Y2RDQXFJRUJ5WlhSMWNtNXpJSHRFYVcxbGJuTnBiMjU5WEc1Y2RDQXFMMXh1WEhSMGFHbHpMbkJoY25ObFNXNTBJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVYSFJjZEhKbGRIVnliaUIwYUdsekxtTnlaV0YwWlNncExuTmxkQ2hjYmx4MFhIUmNkSEJoY25ObFNXNTBLSFJvYVhOYk1GMHBMRnh1WEhSY2RGeDBjR0Z5YzJWSmJuUW9kR2hwYzFzeFhTbGNibHgwWEhRcE8xeHVYSFI5TzF4dVhHNWNkQzhxS2x4dVhIUWdLaUJVWVd0bGN5QmxZV05vSUhCc1lXNWxJSFpoYkhWbElHRnVaQ0J3WVhOelpYTWdhWFFnZEc4Z2NHRnljMlZHYkc5aGRDZ3BMbHh1WEhRZ0tpQkFjbVYwZFhKdWN5QjdSR2x0Wlc1emFXOXVmVnh1WEhRZ0tpOWNibHgwZEdocGN5NXdZWEp6WlVac2IyRjBJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVYSFJjZEhKbGRIVnliaUIwYUdsekxtTnlaV0YwWlNncExuTmxkQ2hjYmx4MFhIUmNkSEJoY25ObFJteHZZWFFvZEdocGMxc3dYU2tzWEc1Y2RGeDBYSFJ3WVhKelpVWnNiMkYwS0hSb2FYTmJNVjBwWEc1Y2RGeDBLVHRjYmx4MGZUdGNibHh1WEhRdktpcGNibHgwSUNvZ1VtVnpiMngyWlhNZ2RHaGxJRzVoYldVZ2IyWWdkR2hsSUhCc1lXNWxJR0YwSUhSb1pTQm5hWFpsYmlCcGJtUmxlQzVjYmx4MElDb2dRR0Z5WnlCN2JuVnRZbVZ5ZlNCZmFXNWtaWGdnTFNCVWFHVWdhVzVrWlhnZ2IyWWdkR2hsSUhCc1lXNWxMbHh1WEhRZ0tpQkFjbVYwZFhKdWN5QjdjM1J5YVc1bmZWeHVYSFFnS2k5Y2JseDBkR2hwY3k1d2JHRnVaVTltSUQwZ1puVnVZM1JwYjI0Z0tGOXBibVJsZUNrZ2UxeHVYSFJjZEdsbUlDaHBjMDVoVGlod1lYSnpaVWx1ZENoZmFXNWtaWGdwS1NrZ2NtVjBkWEp1SUc1MWJHdzdYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTXVjR3hoYm1WTllYQmJYMmx1WkdWNFhUdGNibHgwZlR0Y2JseHVYSFF2S2lwY2JseDBJQ29nVFdGclpTQmhJRzVsZHlCaGNuSmhlU0JpZVNCcGRHVnlZWFJwYm1jZ2IzWmxjaUJsWVdOb0lIQnNZVzVsTGp4aWNqNWNibHgwSUNvZ1UyVmxJRnRnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbTFoY0NncFlGMTdRR3hwYm1zZ2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdWJXOTZhV3hzWVM1dmNtY3ZaVzR0VlZNdlpHOWpjeTlYWldJdlNtRjJZVk5qY21sd2RDOVNaV1psY21WdVkyVXZSMnh2WW1Gc1gwOWlhbVZqZEhNdlFYSnlZWGt2YldGd2ZWeHVYSFFnS2lCQVlYSm5JSHRtZFc1amRHbHZibjBnWDJoaGJtUnNaWElnTFNCb1lXNWtiR1Z5SUdadmNpQmxZV05vSUdsdVpHVjRMbHh1WEhRZ0tpQkFiM1psY25KcFpHVmNibHgwSUNvZ1FISmxkSFZ5Ym5NZ2UwUnBiV1Z1YzJsdmJuMWNibHgwSUNvdlhHNWNkSFJvYVhNdWJXRndJRDBnWm5WdVkzUnBiMjRnS0Y5b1lXNWtiR1Z5S1NCN1hHNWNkRngwY21WMGRYSnVJRzl5YVdkcGJtRnNUV0Z3TG1OaGJHd29kR2hwY3l3Z1gyaGhibVJzWlhJcExuUnZLRTlpYW1WamRDNW5aWFJRY205MGIzUjVjR1ZQWmloMGFHbHpLU2s3WEc1Y2RIMDdYRzVjYmx4MEx5b3FYRzVjZENBcUlFMTFiSFJwY0d4cFpYTWdkR2hsSUhCc1lXNWxjeTVjYmx4MElDb2dRSEpsZEhWeWJuTWdlMjUxYldKbGNuMWNibHgwSUNvdlhHNWNkSFJvYVhNdWNISnZaSFZqZENBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmx4MFhIUnlaWFIxY200Z2RHaHBjMXN3WFNBcUlIUm9hWE5iTVYwN1hHNWNkSDA3WEc1Y2JseDBMeW9xWEc1Y2RDQXFJRVJwZG1sa1pYTWdkR2hsSUhCc1lXNWxjeTVjYmx4MElDb2dRSEpsZEhWeWJuTWdlMjUxYldKbGNuMWNibHgwSUNvdlhHNWNkSFJvYVhNdWNtRjBhVzhnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTmJNRjBnTHlCMGFHbHpXekZkTzF4dVhIUjlPMXh1WEc1Y2RIUm9hWE11Y1hWdmRHbGxiblFnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUUxaGRHZ3VabXh2YjNJb2RHaHBjMXN3WFNBdklIUm9hWE5iTVYwcE8xeHVYSFI5TzF4dVhHNWNkSFJvYVhNdWNtVnRZV2x1WkdWeUlEMGdablZ1WTNScGIyNGdLQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQjBhR2x6V3pCZElDVWdkR2hwYzFzeFhUdGNibHgwZlR0Y2JseDBYRzU5S1R0Y2JseHVMeW9xWEc0Z0tpQThjM0JoYmlCamJHRnpjejFjSW1sdGNHOXlkR0Z1ZEZ3aVBrNVBWRVU2UEM5emNHRnVQaUJVYUdseklHbHpJRTVQVkNCaElHTnZibk4wY25WamRHOXlMaUIxYzJVZ1lGTnBlbVV1WTNKbFlYUmxLQ2xnSUhSdklHZGxkQ0JoSUc1bGR5QnBibk4wWVc1alpTNWNiaUFxSUVCamJHRnpjMXh1SUNvZ1FHVjRkR1Z1WkhNZ2JXOWtkV3hsT25SNWNHVnpMMFJwYldWdWMybHZibk4rUkdsdFpXNXphVzl1WEc0Z0tpQkFZMnhoYzNOa1pYTmpJRElnUkdsdFpXNXphVzl1WVd3Z2IySnFaV04wSUdOdmJuUmhhVzVwYm1jZ2QybGtkR2dnWVc1a0lHaGxhV2RvZEM0OFluSStYRzRnS2lBOGMzQmhiaUJqYkdGemN6MWNJbWx0Y0c5eWRHRnVkRndpUGs1UFZFVTZQQzl6Y0dGdVBpQlVhR2x6SUdseklHRnVJR2x0YlhWMFlXSnNaU0JqYkdGemN5NGdUV1YwYUc5a2N5QnlaWFIxY200Z1lTQnVaWGNnYjJKcVpXTjBJSGRwZEdnZ2RHaGxJRzl5YVdkcGJtRnNJR0Z6SUdsMGN5QndjbTkwYjNSNWNHVXVYRzRnS2lCQWNISnZjQ0I3Ym5WdFltVnlmU0IzYVdSMGFDQXRJRlJvWlNCM2FXUjBhQzVjYmlBcUlFQndjbTl3SUh0dWRXMWlaWEo5SUdobGFXZG9kQ0F0SUZSb1pTQm9aV2xuYUhRdVhHNGdLaTljYmxOcGVtVWdQU0JFYVcxbGJuTnBiMjR1WlhoMFpXNWtLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseDBMeW9xWEc1Y2RDQXFJRTFoY0hNZ2RHaGxJRzVoYldWeklHOW1JSFJvWlNCcGJtUmxlR1Z6TGp4aWNqNWNibHgwSUNvZ1UyVmxJRnRFYVcxbGJuTnBiMjRqY0d4aGJtVlBabDE3UUd4cGJtc2diVzlrZFd4bE9uUjVjR1Z6TDBScGJXVnVjMmx2Ym5OK1JHbHRaVzV6YVc5dUkzQnNZVzVsVDJaOUlHWnZjaUJ5WlhOdmJIWnBibWNnY0d4aGJtVWdibUZ0WlM1Y2JseDBJQ29nUUhCeWIzUmxZM1JsWkZ4dVhIUWdLaUJBWkdWbVlYVnNkQ0JiSjNkcFpIUm9KeXdnSjJobGFXZG9kQ2RkWEc1Y2RDQXFMMXh1WEhSMGFHbHpMbkJzWVc1bFRXRndJRDBnV3lkM2FXUjBhQ2NzSUNkb1pXbG5hSFFuWFR0Y2JseHVYSFJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aDBhR2x6TENCN1hHNWNkRngwZDJsa2RHZzZJSHRjYmx4MFhIUmNkR2RsZERvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdkR2hwYzFzd1hUdGNibHgwWEhSY2RIMHNYRzVjYmx4MFhIUmNkSE5sZERvZ1puVnVZM1JwYjI0Z0tGOTJZV3dwSUh0Y2JseDBYSFJjZEZ4MGRHaHBjMXN3WFNBOUlFNTFiV0psY2loZmRtRnNLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlMRnh1WEc1Y2RGeDBhR1ZwWjJoME9pQjdYRzVjZEZ4MFhIUm5aWFE2SUdaMWJtTjBhVzl1SUNncElIdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlIUm9hWE5iTVYwN1hHNWNkRngwWEhSOUxGeHVYRzVjZEZ4MFhIUnpaWFE2SUdaMWJtTjBhVzl1SUNoZmRtRnNLU0I3WEc1Y2RGeDBYSFJjZEhSb2FYTmJNVjBnUFNCT2RXMWlaWElvWDNaaGJDazdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZWeHVYSFI5S1R0Y2JseHVYSFF2S2lwY2JseDBJQ29nUkdWbWFXNWxJSFJvWlNCemFYcGxJSGRwZEdnZ1lXNGdiMkpxWldOMExpQW9iM1psY214dllXUmxaQ2xjYmx4MElDb2dRR1oxYm1OMGFXOXVJRzF2WkhWc1pUcDBlWEJsY3k5RWFXMWxibk5wYjI1emZsTnBlbVVqYzJWMFhHNWNkQ0FxSUVCaGNtY2dlMjlpYW1WamRIMGdYM05wZW1VZ0xTQkJJSE5wZW1VZ2IySnFaV04wSUh0M2FXUjBhQ3dnYUdWcFoyaDBmUzVjYmx4MElDb2dRSEpsZEhWeWJuTWdlMU5wZW1WOVhHNWNkQ0FxTDF4dVhHNWNkQzhxS2x4dVhIUWdLaUJFWldacGJtVWdkR2hsSUhOcGVtVWdkMmwwYUNCaGJpQmhjbkpoZVM0Z0tHOTJaWEpzYjJGa1pXUXBYRzVjZENBcUlFQm1kVzVqZEdsdmJpQnRiMlIxYkdVNmRIbHdaWE12UkdsdFpXNXphVzl1YzM1VGFYcGxJM05sZEZ4dVhIUWdLaUJBWVhKbklIdGhjbkpoZVgwZ1gzTnBlbVVnTFNCQklITnBlbVVnWVhKeVlYa2dXM2RwWkhSb0xDQm9aV2xuYUhSZExseHVYSFFnS2lCQWNtVjBkWEp1Y3lCN1UybDZaWDFjYmx4MElDb3ZYRzVjYmx4MEx5b3FYRzVjZENBcUlFUmxabWx1WlNCMGFHVWdjMmw2WlM1Y2JseDBJQ29nUUdGeVp5QjdiblZ0WW1WeWZTQmZkMmxrZEdnZ0xTQlVhR1VnZDJsa2RHZ3VYRzVjZENBcUlFQmhjbWNnZTI1MWJXSmxjbjBnWDJobGFXZG9kQ0F0SUZSb1pTQm9aV2xuYUhRdVhHNWNkQ0FxSUVCeVpYUjFjbTV6SUh0VGFYcGxmVnh1WEhRZ0tpOWNibHgwZEdocGN5NXpaWFFnUFNCbWRXNWpkR2x2YmlBb1gzZHBaSFJvTENCZmFHVnBaMmgwS1NCN1hHNWNkRngwYVdZZ0tHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BUMDlJREVwSUh0Y2JseDBYSFJjZEdsbUlDaGZkMmxrZEdndWQybGtkR2dnSVQwOUlIVnVaR1ZtYVc1bFpDQW1KaUJmZDJsa2RHZ3VhR1ZwWjJoMElDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JseDBYSFJjZEZ4MGRHaHBjMXN3WFNBOUlFNTFiV0psY2loZmQybGtkR2d1ZDJsa2RHZ3BPMXh1WEhSY2RGeDBYSFIwYUdseld6RmRJRDBnVG5WdFltVnlLRjkzYVdSMGFDNW9aV2xuYUhRcE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmxiSE5sSUdsbUlDaGZkMmxrZEdndWJHVnVaM1JvSUQwOVBTQXlLU0I3WEc1Y2RGeDBYSFJjZEhSb2FYTmJNRjBnUFNCT2RXMWlaWElvWDNkcFpIUm9XekJkS1R0Y2JseDBYSFJjZEZ4MGRHaHBjMXN4WFNBOUlFNTFiV0psY2loZmQybGtkR2hiTVYwcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseHVYSFJjZEdWc2MyVWdlMXh1WEhSY2RGeDBkR2hwYzFzd1hTQTlJRTUxYldKbGNpaGZkMmxrZEdncE8xeHVYSFJjZEZ4MGRHaHBjMXN4WFNBOUlFNTFiV0psY2loZmFHVnBaMmgwS1R0Y2JseDBYSFI5WEc1Y2RGeDBYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTTdYRzVjZEgwN1hHNWNibHgwTHlvcVhHNWNkQ0FxSUVOaGJHTjFiR0YwWlhNZ2RHaGxJR2g1Y0c5MFpXNTFjMlV1WEc1Y2RDQXFJRUJ6WldVZ2UwQnNhVzVySUdoMGRIQnpPaTh2Wlc0dWQybHJhWEJsWkdsaExtOXlaeTkzYVd0cEwwaDVjRzkwWlc1MWMyVjlYRzVjZENBcUlFQnlaWFIxY201eklIdHVkVzFpWlhKOVhHNWNkQ0FxTDF4dVhIUjBhR2x6TG1oNWNHOTBaVzUxYzJVZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc1Y2RGeDBjbVYwZFhKdUlFMWhkR2d1YzNGeWRDaE5ZWFJvTG5CdmR5aDBhR2x6TG5kcFpIUm9MQ0F5S1NBcklFMWhkR2d1Y0c5M0tIUm9hWE11YUdWcFoyaDBMQ0F5S1NrN1hHNWNkSDA3WEc1Y2JseDBMeW9xWEc1Y2RDQXFJRk5sZEhNZ2QybGtkR2dnWVc1a0lHaGxhV2RvZENCd2NtOXdaWEowYVdWeklHOXVJSFJvWlNCbmFYWmxiaUJ2WW1wbFkzUXVJRWxtSUhSb1pTQnZZbXBsWTNRZ2FYTWdZVzRnU0ZSTlRDQnViMlJsSUhSb1pXNGdhWFFnZDJsc2JDQmlaU0J6WlhRZ2IyNGdkR2hsSUc1dlpHVnpJSE4wZVd4bElHOWlhbVZqZEM1Y2JseDBJQ29nUUdGeVp5QjdiMkpxWldOMGZFaFVUVXhGYkdWdFpXNTBmU0F0SUZSb1pTQnZZbXBsWTNRZ2IzSWdSRTlOSUc1dlpHVXVYRzVjZENBcUlFQnlaWFIxY201eklIdDBhR2x6ZlZ4dVhIUWdLaTljYmx4MGRHaHBjeTVoY0hCc2VWUnZJRDBnWm5WdVkzUnBiMjRnS0Y5dlltcGxZM1FwSUh0Y2JseDBYSFJwWmlBb1gyOWlhbVZqZEM1dWIyUmxWSGx3WlNBOVBUMGdaRzlqZFcxbGJuUXVSVXhGVFVWT1ZGOU9UMFJGS1NCN1hHNWNkRngwWEhScFppQW9JU2hmYjJKcVpXTjBMbmRwWkhSb0lDRTlQU0IxYm1SbFptbHVaV1FnZkh3Z1gyOWlhbVZqZEM1b1pXbG5hSFFnSVQwOUlIVnVaR1ZtYVc1bFpDa3BJSHRjYmx4MFhIUmNkRngwWDI5aWFtVmpkQzV6ZEhsc1pTNTNhV1IwYUNBOUlIUm9hWE11ZDJsa2RHZzdYRzVjZEZ4MFhIUmNkRjl2WW1wbFkzUXVjM1I1YkdVdWFHVnBaMmgwSUQwZ2RHaHBjeTVvWldsbmFIUTdYRzVjYmx4MFhIUmNkRngwY21WMGRYSnVJSFJvYVhNN1hHNWNkRngwWEhSOVhHNWNkRngwZlZ4dVhHNWNkRngwWDI5aWFtVmpkQzUzYVdSMGFDQTlJSFJvYVhNdWQybGtkR2c3WEc1Y2RGeDBYMjlpYW1WamRDNW9aV2xuYUhRZ1BTQjBhR2x6TG1obGFXZG9kRHRjYmx4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TzF4dVhIUjlPMXh1WEc1OUtUdGNibHh1THlvcVhHNGdLaUE4YzNCaGJpQmpiR0Z6Y3oxY0ltbHRjRzl5ZEdGdWRGd2lQazVQVkVVNlBDOXpjR0Z1UGlCVWFHbHpJR2x6SUU1UFZDQmhJR052Ym5OMGNuVmpkRzl5TGlCMWMyVWdZRkJ2YVc1MExtTnlaV0YwWlNncFlDQjBieUJuWlhRZ1lTQnVaWGNnYVc1emRHRnVZMlV1WEc0Z0tpQkFZMnhoYzNOY2JpQXFJRUJsZUhSbGJtUnpJRzF2WkhWc1pUcDBlWEJsY3k5RWFXMWxibk5wYjI1emZrUnBiV1Z1YzJsdmJseHVJQ29nUUdOc1lYTnpaR1Z6WXlCUFltcGxZM1FnWTI5dWRHRnBibWx1WnlCamIyOXlaR2x1WVhSbGN5QnZiaUJoSURJdFpHbHRaVzV6YVc5dVlXd2dZMkZ5ZEdWemFXRnVJSEJzWVc1bExqeGljajVjYmlBcUlEeHpjR0Z1SUdOc1lYTnpQVndpYVcxd2IzSjBZVzUwWENJK1RrOVVSVG84TDNOd1lXNCtJRlJvYVhNZ2FYTWdZVzRnYVcxdGRYUmhZbXhsSUdOc1lYTnpMaUJOWlhSb2IyUnpJSEpsZEhWeWJpQmhJRzVsZHlCdlltcGxZM1FnZDJsMGFDQjBhR1VnYjNKcFoybHVZV3dnWVhNZ2FYUnpJSEJ5YjNSdmRIbHdaUzVjYmlBcUlFQndjbTl3SUh0dWRXMWlaWEo5SUhnZ0xTQlVhR1VnZUNCamIyOXlaR2x1WVhSbExseHVJQ29nUUhCeWIzQWdlMjUxYldKbGNuMGdlU0F0SUZSb1pTQjVJR052YjNKa2FXNWhkR1V1WEc0Z0tpOWNibEJ2YVc1MElEMGdSR2x0Wlc1emFXOXVMbVY0ZEdWdVpDaG1kVzVqZEdsdmJpQW9LU0I3WEc1Y2RDOHFLbHh1WEhRZ0tpQk5ZWEJ6SUhSb1pTQnVZVzFsY3lCdlppQjBhR1VnYVc1a1pYaGxjeTQ4WW5JK1hHNWNkQ0FxSUZObFpTQmJSR2x0Wlc1emFXOXVJM0JzWVc1bFQyWmRlMEJzYVc1cklHMXZaSFZzWlRwMGVYQmxjeTlFYVcxbGJuTnBiMjV6ZmtScGJXVnVjMmx2YmlOd2JHRnVaVTltZlNCbWIzSWdjbVZ6YjJ4MmFXNW5JSEJzWVc1bElHNWhiV1V1WEc1Y2RDQXFJRUJ3Y205MFpXTjBaV1JjYmx4MElDb2dRR1JsWm1GMWJIUWdXeWQ0Snl3Z0oza25YVnh1WEhRZ0tpOWNibHgwZEdocGN5NXdiR0Z1WlUxaGNDQTlJRnNuZUNjc0lDZDVKMTA3WEc1Y2JseDBUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblJwWlhNb2RHaHBjeXdnZTF4dVhIUmNkSGc2SUh0Y2JseDBYSFJjZEdkbGREb2dablZ1WTNScGIyNGdLQ2tnZTF4dVhIUmNkRngwWEhSeVpYUjFjbTRnZEdocGMxc3dYVHRjYmx4MFhIUmNkSDBzWEc1Y2JseDBYSFJjZEhObGREb2dablZ1WTNScGIyNGdLRjkyWVd3cElIdGNibHgwWEhSY2RGeDBkR2hwYzFzd1hTQTlJRTUxYldKbGNpaGZkbUZzS1R0Y2JseDBYSFJjZEgxY2JseDBYSFI5TEZ4dVhHNWNkRngwZVRvZ2UxeHVYSFJjZEZ4MFoyVjBPaUJtZFc1amRHbHZiaUFvS1NCN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlCMGFHbHpXekZkTzF4dVhIUmNkRngwZlN4Y2JseHVYSFJjZEZ4MGMyVjBPaUJtZFc1amRHbHZiaUFvWDNaaGJDa2dlMXh1WEhSY2RGeDBYSFIwYUdseld6RmRJRDBnVG5WdFltVnlLRjkyWVd3cE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseDBmU2s3WEc1Y2JseDBMeW9xWEc1Y2RDQXFJRVJsWm1sdVpTQjBhR1VnY0c5cGJuUWdkMmwwYUNCaGJpQnZZbXBsWTNRdUlDaHZkbVZ5Ykc5aFpHVmtLVnh1WEhRZ0tpQkFablZ1WTNScGIyNGdiVzlrZFd4bE9uUjVjR1Z6TDBScGJXVnVjMmx2Ym5OK1VHOXBiblFqYzJWMFhHNWNkQ0FxSUVCaGNtY2dlMjlpYW1WamRIMGdYM0J2YVc1MElDMGdRU0J3YjJsdWRDQnZZbXBsWTNRZ2UzZ3NJSGw5TGx4dVhIUWdLaUJBY21WMGRYSnVjeUI3VUc5cGJuUjlYRzVjZENBcUwxeHVYRzVjZEM4cUtseHVYSFFnS2lCRVpXWnBibVVnZEdobElIQnZhVzUwSUhkcGRHZ2dZVzRnWVhKeVlYa3VJQ2h2ZG1WeWJHOWhaR1ZrS1Z4dVhIUWdLaUJBWm5WdVkzUnBiMjRnYlc5a2RXeGxPblI1Y0dWekwwUnBiV1Z1YzJsdmJuTitVRzlwYm5RamMyVjBYRzVjZENBcUlFQmhjbWNnZTJGeWNtRjVmU0JmY0c5cGJuUWdMU0JCSUhCdmFXNTBJR0Z5Y21GNUlGdDRMQ0I1WFM1Y2JseDBJQ29nUUhKbGRIVnlibk1nZTFCdmFXNTBmVnh1WEhRZ0tpOWNibHh1WEhRdktpcGNibHgwSUNvZ1JHVm1hVzVsSUhSb1pTQndiMmx1ZEM1Y2JseDBJQ29nUUdGeVp5QjdiblZ0WW1WeWZTQmZlQ0F0SUZSb1pTQjRMbHh1WEhRZ0tpQkFZWEpuSUh0dWRXMWlaWEo5SUY5NUlDMGdWR2hsSUhrdVhHNWNkQ0FxSUVCeVpYUjFjbTV6SUh0UWIybHVkSDFjYmx4MElDb3ZYRzVjZEhSb2FYTXVjMlYwSUQwZ1puVnVZM1JwYjI0Z0tGOTRMQ0JmZVNrZ2UxeHVYSFJjZEdsbUlDaGhjbWQxYldWdWRITXViR1Z1WjNSb0lEMDlQU0F4S1NCN1hHNWNkRngwWEhScFppQW9YM2d1ZUNBaFBUMGdkVzVrWldacGJtVmtJQ1ltSUY5NExua2dJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVYSFJjZEZ4MFhIUjBhR2x6V3pCZElEMGdUblZ0WW1WeUtGOTRMbmdwTzF4dVhIUmNkRngwWEhSMGFHbHpXekZkSUQwZ1RuVnRZbVZ5S0Y5NExua3BPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJsYkhObElHbG1JQ2hmZUM1c1pXNW5kR2dnUFQwOUlESXBJSHRjYmx4MFhIUmNkRngwZEdocGMxc3dYU0E5SUU1MWJXSmxjaWhmZUZzd1hTazdYRzVjZEZ4MFhIUmNkSFJvYVhOYk1WMGdQU0JPZFcxaVpYSW9YM2hiTVYwcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseHVYSFJjZEdWc2MyVWdlMXh1WEhSY2RGeDBkR2hwYzFzd1hTQTlJRTUxYldKbGNpaGZlQ2s3WEc1Y2RGeDBYSFIwYUdseld6RmRJRDBnVG5WdFltVnlLRjk1S1R0Y2JseDBYSFI5WEc1Y2RGeDBYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTTdYRzVjZEgwN1hHNWNibHgwTHlvcVhHNWNkQ0FxSUVOaGJHTjFiR0YwWlhNZ2RHaGxJR1JwYzNSaGJtTmxJR0psZEhkbFpXNGdkR2hsSUdsdWMyRjBibU5sSUdGdVpDQmhJSEJ2YVc1MElHOWlhbVZqZEM1Y2JseDBJQ29nUUdGeVp5QjdVRzlwYm5SOUlGOXdiMmx1ZENBdElFRWdjRzlwYm5RZ2IySnFaV04wSUh0NExIbDlMbHh1WEhRZ0tpQkFjbVYwZFhKdWN5QjdVMmw2WlgxY2JseDBJQ292WEc1Y2RIUm9hWE11WkdsemRHRnVZMlVnUFNCbWRXNWpkR2x2YmlBb1gzQnZhVzUwS1NCN1hHNWNkRngwYVdZZ0tGOXdiMmx1ZEM1NElDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ1gzQnZhVzUwTG5rZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dVhIUmNkRngwY21WMGRYSnVJRk5wZW1VdVkzSmxZWFJsS0NrdWMyVjBLRnh1WEhSY2RGeDBYSFJmY0c5cGJuUXVlQ0F0SUhSb2FYTXVlQ3hjYmx4MFhIUmNkRngwWDNCdmFXNTBMbmtnTFNCMGFHbHpMbmxjYmx4MFhIUmNkQ2s3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBjbVYwZFhKdUlHNTFiR3c3WEc1Y2RIMDdYRzVjYmx4MEx5b3FYRzVjZENBcUlGTmxkSE1nZUNCaGJtUWdlU0J3Y205d1pYSjBhV1Z6SUc5dUlIUm9aU0JuYVhabGJpQnZZbXBsWTNRdUlFbG1JSFJvWlNCdlltcGxZM1FnYVhNZ1lXNGdTRlJOVENCdWIyUmxJSFJvWlc0Z2RHaGxJR3hsWm5RZ1lXNWtJSFJ2Y0NCd2NtOXdaWEowYVdWeklIZHBiR3dnWW1VZ2MyVjBJRzl1SUhSb1pTQnViMlJsY3lCemRIbHNaU0J2WW1wbFkzUXVYRzVjZENBcUlFQmhjbWNnZTI5aWFtVmpkSHhJVkUxTVJXeGxiV1Z1ZEgwZ0xTQlVhR1VnYjJKcVpXTjBJRzl5SUVSUFRTQnViMlJsTGx4dVhIUWdLaUJBY21WMGRYSnVjeUI3ZEdocGMzMWNibHgwSUNvdlhHNWNkSFJvYVhNdVlYQndiSGxVYnlBOUlHWjFibU4wYVc5dUlDaGZiMkpxWldOMEtTQjdYRzVjZEZ4MGFXWWdLRjl2WW1wbFkzUXVibTlrWlZSNWNHVWdQVDA5SUdSdlkzVnRaVzUwTGtWTVJVMUZUbFJmVGs5RVJTa2dlMXh1WEhSY2RGeDBYMjlpYW1WamRDNXpkSGxzWlM1c1pXWjBJRDBnZEdocGN5NTRPMXh1WEhSY2RGeDBYMjlpYW1WamRDNXpkSGxzWlM1MGIzQWdQU0IwYUdsekxuazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MFpXeHpaU0I3WEc1Y2RGeDBYSFJmYjJKcVpXTjBMbmdnUFNCMGFHbHpMbmc3WEc1Y2RGeDBYSFJmYjJKcVpXTjBMbmtnUFNCMGFHbHpMbms3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBjbVYwZFhKdUlIUm9hWE03WEc1Y2RIMDdYRzVjYmx4MEx5b3FYRzVjZENBcUlGSnZkR0YwWlNCMGFHVWdjRzlwYm5RZ1ltRnpaV1FnYjI0Z1lXNGdiM0pwWjJsdUlIQnZhVzUwSUdGdVpDQmhiaUJoYm1kc1pTQnBiaUJrWldkeVpXVnpMbHh1WEhRZ0tpQkFZWEpuSUh0UWIybHVkSDBnWDI5eWFXZHBiaUF0SUVFZ2NHOXBiblFnYjJKcVpXTjBJSHQ0TEhsOUxseHVYSFFnS2lCQVlYSm5JSHR1ZFcxaVpYSjlJRjloYm1kc1pTQXRJRlJvWlNCaGJtZHNaU0J2WmlCeWIzUmhkR2x2YmlCcGJpQmtaV2R5WldWekxseHVYSFFnS2lCQWNtVjBkWEp1Y3lCN2RHaHBjMzFjYmx4MElDb3ZYRzVjZEhSb2FYTXVjbTkwWVhSbElEMGdablZ1WTNScGIyNGdLRjl2Y21sbmFXNHNJRjloYm1kc1pTa2dlMXh1WEhSY2RIWmhjaUI0TENCNUxDQnlZV1E3WEc1Y2JseDBYSFJ5WVdRZ1BTQmZZVzVuYkdVZ0tpQW9UV0YwYUM1UVNTOHhPREFwTzF4dVhHNWNkRngwZUNBOUlIUm9hWE11ZUNBdElGOXZjbWxuYVc0dWVEdGNibHgwWEhSNUlEMGdkR2hwY3k1NUlDMGdYMjl5YVdkcGJpNTVPMXh1WEc1Y2RGeDBjbVYwZFhKdUlIUm9hWE11WTNKbFlYUmxLQ2t1YzJWMEtGeHVYSFJjZEZ4MEtFMWhkR2d1YzJsdUtISmhaQ2tnS2lCNElDMGdUV0YwYUM1amIzTW9jbUZrS1NBcUlIa3BJQ3NnWDI5eWFXZHBiaTU0TEZ4dVhIUmNkRngwS0UxaGRHZ3VZMjl6S0hKaFpDa2dLaUI0SUNzZ1RXRjBhQzV6YVc0b2NtRmtLU0FxSUhrcElDc2dYMjl5YVdkcGJpNTVYRzVjZEZ4MEtUdGNibHgwZlR0Y2JseHVmU2s3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUhzZ1JHbHRaVzV6YVc5dUxDQlRhWHBsTENCUWIybHVkQ0I5TzF4dVhHNWNibHh1THlvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTSUNvcVhHNGdLaW9nTGk5emIzVnlZMlV2ZEhsd1pYTXZSR2x0Wlc1emFXOXVjeTVxYzF4dUlDb3FMeUpkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIpO1xuXG4vKioqLyB9LFxuLyogNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0ZXZhbChcIm1vZHVsZS5leHBvcnRzID0geyBcXFwiZGVmYXVsdFxcXCI6IF9fd2VicGFja19yZXF1aXJlX18oNyksIF9fZXNNb2R1bGU6IHRydWUgfTsvL0Agc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMMkpoWW1Wc0xYSjFiblJwYldVdlkyOXlaUzFxY3k5dlltcGxZM1F2WkdWbWFXNWxMWEJ5YjNCbGNuUnBaWE11YW5NL1lUUmpOeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4clFrRkJhMElpTENKbWFXeGxJam9pTmk1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdleUJjSW1SbFptRjFiSFJjSWpvZ2NtVnhkV2x5WlNoY0ltTnZjbVV0YW5NdmJHbGljbUZ5ZVM5bWJpOXZZbXBsWTNRdlpHVm1hVzVsTFhCeWIzQmxjblJwWlhOY0lpa3NJRjlmWlhOTmIyUjFiR1U2SUhSeWRXVWdmVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwyTnZjbVV0YW5NdmIySnFaV04wTDJSbFptbHVaUzF3Y205d1pYSjBhV1Z6TG1welhHNGdLaW9nYlc5a2RXeGxJR2xrSUQwZ05seHVJQ29xSUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3WEc0Z0tpb3ZJbDBzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XCIpO1xuXG4vKioqLyB9LFxuLyogNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0ZXZhbChcInZhciAkID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoVCwgRCl7XFxuICByZXR1cm4gJC5zZXREZXNjcyhULCBEKTtcXG59Oy8vQCBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wySmhZbVZzTFhKMWJuUnBiV1V2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmIySnFaV04wTDJSbFptbHVaUzF3Y205d1pYSjBhV1Z6TG1welB6STBOVGdpWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pTnk1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lBa0lEMGdjbVZ4ZFdseVpTZ25MaTR2TGk0dmJXOWtkV3hsY3k4a0p5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVJR1JsWm1sdVpWQnliM0JsY25ScFpYTW9WQ3dnUkNsN1hHNGdJSEpsZEhWeWJpQWtMbk5sZEVSbGMyTnpLRlFzSUVRcE8xeHVmVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjlpYW1WamRDOWtaV1pwYm1VdGNISnZjR1Z5ZEdsbGN5NXFjMXh1SUNvcUlHMXZaSFZzWlNCcFpDQTlJRGRjYmlBcUtpQnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01GeHVJQ29xTHlKZExDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVwiKTtcblxuLyoqKi8gfSxcbi8qIDggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdGV2YWwoXCJ2YXIgJE9iamVjdCA9IE9iamVjdDtcXG5tb2R1bGUuZXhwb3J0cyA9IHtcXG4gIGNyZWF0ZTogICAgICRPYmplY3QuY3JlYXRlLFxcbiAgZ2V0UHJvdG86ICAgJE9iamVjdC5nZXRQcm90b3R5cGVPZixcXG4gIGlzRW51bTogICAgIHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlLFxcbiAgZ2V0RGVzYzogICAgJE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXFxuICBzZXREZXNjOiAgICAkT2JqZWN0LmRlZmluZVByb3BlcnR5LFxcbiAgc2V0RGVzY3M6ICAgJE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzLFxcbiAgZ2V0S2V5czogICAgJE9iamVjdC5rZXlzLFxcbiAgZ2V0TmFtZXM6ICAgJE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzLFxcbiAgZ2V0U3ltYm9sczogJE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXFxuICBlYWNoOiAgICAgICBbXS5mb3JFYWNoXFxufTsvL0Agc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMMkpoWW1Wc0xYSjFiblJwYldVdmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k4a0xtcHpQekk0TmpNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3huUWtGQlowSTdRVUZEYUVJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lJNExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlDUlBZbXBsWTNRZ1BTQlBZbXBsWTNRN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlIdGNiaUFnWTNKbFlYUmxPaUFnSUNBZ0pFOWlhbVZqZEM1amNtVmhkR1VzWEc0Z0lHZGxkRkJ5YjNSdk9pQWdJQ1JQWW1wbFkzUXVaMlYwVUhKdmRHOTBlWEJsVDJZc1hHNGdJR2x6Ulc1MWJUb2dJQ0FnSUh0OUxuQnliM0JsY25SNVNYTkZiblZ0WlhKaFlteGxMRnh1SUNCblpYUkVaWE5qT2lBZ0lDQWtUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2l4Y2JpQWdjMlYwUkdWell6b2dJQ0FnSkU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTeGNiaUFnYzJWMFJHVnpZM002SUNBZ0pFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBhV1Z6TEZ4dUlDQm5aWFJMWlhsek9pQWdJQ0FrVDJKcVpXTjBMbXRsZVhNc1hHNGdJR2RsZEU1aGJXVnpPaUFnSUNSUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbE9ZVzFsY3l4Y2JpQWdaMlYwVTNsdFltOXNjem9nSkU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVWTjViV0p2YkhNc1hHNGdJR1ZoWTJnNklDQWdJQ0FnSUZ0ZExtWnZja1ZoWTJoY2JuMDdYRzVjYmx4dUx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaUFxS2lBdUwzNHZZbUZpWld3dGNuVnVkR2x0WlM5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6THlRdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQTRYRzRnS2lvZ2JXOWtkV3hsSUdOb2RXNXJjeUE5SURCY2JpQXFLaThpWFN3aWMyOTFjbU5sVW05dmRDSTZJaUo5XCIpO1xuXG4vKioqLyB9LFxuLyogOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0ZXZhbChcInZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKVsnZGVmYXVsdCddO1xcblxcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XFxuLyoqXFxuICogQmFzZSBvYmplY3QgdHlwZSBmb3IgJ2FycmF5IGxpa2UnIG9iamVjdHMuXFxuICogQG1vZHVsZVxcbiAqIEByZXF1aXJlcyBtb2R1bGU6dXRpbFxcbiAqIEByZXF1aXJlcyBtb2R1bGU6dHlwZXMvQmFzaWNcXG4gKi9cXG5cXG52YXIgX3V0aWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcXG5cXG52YXIgX3V0aWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXRpbCk7XFxuXFxudmFyIF90eXBlc0Jhc2ljID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XFxuXFxudmFyIF90eXBlc0Jhc2ljMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVzQmFzaWMpO1xcblxcbi8qKlxcbiAqIDxzcGFuIGNsYXNzPVxcXCJpbXBvcnRhbnRcXFwiPk5PVEU6PC9zcGFuPiBUaGlzIGlzIE5PVCBhIGNvbnN0cnVjdG9yLiB1c2UgYEJhc2ljQXJyYXkuY3JlYXRlKClgIHRvIGdldCBhIG5ldyBpbnN0YW5jZS5cXG4gKiBAY2xhc3NkZXNjIEEgYmFzZSBvYmplY3QgdHlwZSBmb3IgJ2FycmF5IGxpa2UnIG9iamVjdC5cXG4gKiBAY2xhc3NcXG4gKiBAZXh0ZW5kcyBleHRlcm5hbDpBcnJheVxcbiAqIEBleHRlbmRzIG1vZHVsZTp0eXBlcy9CYXNpY35CYXNpY1xcbiAqIEBtaXhlcyBtb2R1bGU6dHlwZXMvQmFzaWN+QmFzaWNcXG4gKi9cXG52YXIgQmFzaWNBcnJheSA9IChmdW5jdGlvbiAoKSB7XFxuICAvKipcXG4gICAqIE9iamVjdHMgd2l0aCB0aGlzIGFzIGFuIG93biBwcm9wZXJ0eSB3aWxsIGJlIGlkZW50aWZpZWQgYXMgdGhlIHJvb3Qgb2JqZWN0LlxcbiAgICogQG1lbWJlcm9mIG1vZHVsZTp0eXBlcy9CYXNpY0FycmF5fkJhc2ljQXJyYXlcXG4gICAqIEByZWFkb25seVxcbiAgICogQGRlZmF1bHRcXG4gICAqL1xcbiAgdGhpcy5iYXNlVHlwZSA9ICdUWVBFX0JBU0lDX0FSUkFZJztcXG5cXG4gIF91dGlsMlsnZGVmYXVsdCddLm1peGluKHRoaXMsIF90eXBlc0Jhc2ljMlsnZGVmYXVsdCddKTtcXG5cXG4gIHJldHVybiB0aGlzO1xcbn0pLmNhbGwoW10pO1xcblxcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IEJhc2ljQXJyYXk7XFxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Ly9AIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTl6YjNWeVkyVXZkSGx3WlhNdlFtRnphV05CY25KaGVTNXFjejlsWmpObUlsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3T3pzN1owTkJUV2xDTEVWQlFVMDdPenM3YzBOQlEwd3NSVUZCWVRzN096czdPenM3T3pzN08wRkJWUzlDTEVsQlFVa3NWVUZCVlN4SFFVRkhMRU5CUVVNc1dVRkJXVHM3T3pzN096dEJRVTgzUWl4TlFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGSExHdENRVUZyUWl4RFFVRkRPenRCUVVWdVF5eHZRa0ZCU3l4TFFVRkxMRU5CUVVNc1NVRkJTU3d3UWtGQlVTeERRVUZET3p0QlFVVjRRaXhUUVVGUExFbEJRVWtzUTBGQlF6dERRVVZhTEVWQlFVVXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE96dHhRa0ZGUnl4VlFVRlZJaXdpWm1sc1pTSTZJamt1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlFSmhjMlVnYjJKcVpXTjBJSFI1Y0dVZ1ptOXlJQ2RoY25KaGVTQnNhV3RsSnlCdlltcGxZM1J6TGx4dUlDb2dRRzF2WkhWc1pWeHVJQ29nUUhKbGNYVnBjbVZ6SUcxdlpIVnNaVHAxZEdsc1hHNGdLaUJBY21WeGRXbHlaWE1nYlc5a2RXeGxPblI1Y0dWekwwSmhjMmxqWEc0Z0tpOWNibWx0Y0c5eWRDQjFkR2xzSUdaeWIyMGdKM1YwYVd3bk8xeHVhVzF3YjNKMElFSmhjMmxqSUdaeWIyMGdKM1I1Y0dWekwwSmhjMmxqSnp0Y2JseHVMeW9xWEc0Z0tpQThjM0JoYmlCamJHRnpjejFjSW1sdGNHOXlkR0Z1ZEZ3aVBrNVBWRVU2UEM5emNHRnVQaUJVYUdseklHbHpJRTVQVkNCaElHTnZibk4wY25WamRHOXlMaUIxYzJVZ1lFSmhjMmxqUVhKeVlYa3VZM0psWVhSbEtDbGdJSFJ2SUdkbGRDQmhJRzVsZHlCcGJuTjBZVzVqWlM1Y2JpQXFJRUJqYkdGemMyUmxjMk1nUVNCaVlYTmxJRzlpYW1WamRDQjBlWEJsSUdadmNpQW5ZWEp5WVhrZ2JHbHJaU2NnYjJKcVpXTjBMbHh1SUNvZ1FHTnNZWE56WEc0Z0tpQkFaWGgwWlc1a2N5QmxlSFJsY201aGJEcEJjbkpoZVZ4dUlDb2dRR1Y0ZEdWdVpITWdiVzlrZFd4bE9uUjVjR1Z6TDBKaGMybGpma0poYzJsalhHNGdLaUJBYldsNFpYTWdiVzlrZFd4bE9uUjVjR1Z6TDBKaGMybGpma0poYzJsalhHNGdLaTljYm5aaGNpQkNZWE5wWTBGeWNtRjVJRDBnS0daMWJtTjBhVzl1SUNncElIdGNibHgwTHlvcVhHNWNkQ0FxSUU5aWFtVmpkSE1nZDJsMGFDQjBhR2x6SUdGeklHRnVJRzkzYmlCd2NtOXdaWEowZVNCM2FXeHNJR0psSUdsa1pXNTBhV1pwWldRZ1lYTWdkR2hsSUhKdmIzUWdiMkpxWldOMExseHVYSFFnS2lCQWJXVnRZbVZ5YjJZZ2JXOWtkV3hsT25SNWNHVnpMMEpoYzJsalFYSnlZWGwrUW1GemFXTkJjbkpoZVZ4dVhIUWdLaUJBY21WaFpHOXViSGxjYmx4MElDb2dRR1JsWm1GMWJIUmNibHgwSUNvdlhHNWNkSFJvYVhNdVltRnpaVlI1Y0dVZ1BTQW5WRmxRUlY5Q1FWTkpRMTlCVWxKQldTYzdYRzVjZEZ4dVhIUjFkR2xzTG0xcGVHbHVLSFJvYVhNc0lFSmhjMmxqS1R0Y2JseHVYSFJ5WlhSMWNtNGdkR2hwY3p0Y2JseHVmU2t1WTJGc2JDaGJYU2s3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUVKaGMybGpRWEp5WVhrN1hHNWNibHh1THlvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTSUNvcVhHNGdLaW9nTGk5emIzVnlZMlV2ZEhsd1pYTXZRbUZ6YVdOQmNuSmhlUzVxYzF4dUlDb3FMeUpkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIpO1xuXG4vKioqLyB9LFxuLyogMTAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdGV2YWwoXCJleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xcbi8qKlxcbiAqIFV0aWxpdHkgZnVuY3Rpb25zLlxcbiAqIEBuYW1lc3BhY2VcXG4gKiBAYXV0aG9yIE1pY2FoIFJvbG9uIDxtaWNhaEBnaW5hc2luay5jb20+XFxuICogQG1lbWJlcm9mIG1vZHVsZTpwbGF5fnBsXFxuICovXFxudmFyIHV0aWwgPSBuZXcgZnVuY3Rpb24gKCkge1xcblxcblxcdC8qKlxcbiAgKiBBY2NlcHRzIG9uZSBvciBtb3JlIG9iamVjdHMgdG8gY29tYmluZSB0aGVpciBvd24gcHJvcGVydGllcyB0byBzaW5nbGUgb2JqZWN0LlxcbiAgKiBAYXJnIHtvYmplY3R9IF90YXJnZXQgLSBUaGUgb2JqZWN0IHRoYXQgd2lsbCByZWNpZXZlIGFsbCBtZW1iZXJzLlxcbiAgKiBAYXJnIHtvYmplY3R9IF9zb3VyY2VzLi4uIC0gVGhlIG9iamVjdChzKSB0byBqb2luIHdpdGggdGhlICdfdGFyZ2V0Jy5cXG4gICogQHJldHVybnMge29iamVjdH0gX3RhcmdldFxcbiAgKi9cXG5cXHR0aGlzLm1peGluID0gZnVuY3Rpb24gKCkge1xcblxcdFxcdHZhciBtZW1iZXIsIGksIHRhcmdldCwgb2JqcztcXG5cXG5cXHRcXHR0YXJnZXQgPSBhcmd1bWVudHNbMF07XFxuXFx0XFx0b2JqcyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcXG5cXG5cXHRcXHRmb3IgKGkgPSAwOyBpIDwgb2Jqcy5sZW5ndGg7IGkgKz0gMSkge1xcblxcdFxcdFxcdGZvciAobWVtYmVyIGluIG9ianNbaV0pIHtcXG5cXHRcXHRcXHRcXHRpZiAoIW9ianNbaV0uaGFzT3duUHJvcGVydHkobWVtYmVyKSkgY29udGludWU7XFxuXFx0XFx0XFx0XFx0dGFyZ2V0W21lbWJlcl0gPSBvYmpzW2ldW21lbWJlcl07XFxuXFx0XFx0XFx0fVxcblxcdFxcdH1cXG5cXG5cXHRcXHRyZXR1cm4gdGFyZ2V0O1xcblxcdH07XFxuXFxuXFx0LyoqXFxuICAqIE1hdGNoZXMgdGhlIG5hbWUgb2YgdGhlIGtleSB3aGljaCByZWZlcmVuY2VzIHRoZSBnaXZlbiBwb2ludGVyIGluc2lkZSBhbiBvYmplY3QuIExpa2UgaW5kZXhPZigpIGZvciBvYmplY3RzLlxcbiAgKiBAYXJnIHtvYmplY3R9IF9vYmogLSBPYmplY3QgdG8gc2VhcmNoIGluLlxcbiAgKiBAYXJnIHsqfSBfbWVtYmVyIC0gVGhlIHJlZmVyZW5jZSB3aGljaCBpcyBleHBlY3RlZCB0byBiZSBpbiB0aGUgb2JqZWN0IGFzIGEgcHJvcGVydHkuXFxuICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBuYW1lIG9mIHRoZSBrZXkgaW4gdGhlIG9iamVjdCBtYXRjaGluZyAnX21lbWJlcicuXFxuICAqL1xcblxcdHRoaXMua2V5T2YgPSBmdW5jdGlvbiAoX29iaiwgX21lbWJlcikge1xcblxcdFxcdHZhciBtZW1iZXI7XFxuXFxuXFx0XFx0Zm9yIChtZW1iZXIgaW4gX29iaikge1xcblxcdFxcdFxcdGlmICghX29iai5oYXNPd25Qcm9wZXJ0eShtZW1iZXIpKSBjb250aW51ZTtcXG5cXHRcXHRcXHRpZiAoX29ialttZW1iZXJdID09PSBfbWVtYmVyKSByZXR1cm4gbWVtYmVyO1xcblxcdFxcdH1cXG5cXG5cXHRcXHRyZXR1cm4gbnVsbDtcXG5cXHR9O1xcblxcblxcdC8qKlxcbiAgKiBNYXRjaGVzIHRoZSBvYmplY3QsIGRlZXAgaW4gdGhlIHByb3RvdHlwZSBjaGFpbiwgd2hpY2ggaXMgdGhlIG93bmVyIG9mIHRoZSBwcm9wZXJ0eSByZWZlcmVuY2luZyB0aGUgZ2l2ZW4gcG9pbnRlci5cXG4gICogQGFyZyB7b2JqZWN0fSBfb2JqIC0gVGhlIG9iamVjdCB0byBzZWFyY2guXFxuICAqIEBhcmcgeyp9IF9tZW1iZXIgLSBUaGUgcmVmZXJlbmNlIHdoaWNoIGlzIGV4cGVjdGVkIHRvIGJlIGEgcHJvcGVydHkgaW4gdGhlIHByb3RvdHlwZSBjaGFpbi5cXG4gICogQHJldHVybiB7b2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgYW5kIHRoZSBvd25pbmcgb2JqZWN0LiB7bmFtZSwgb2JqZWN0fVxcbiAgKi9cXG5cXHR0aGlzLmdldE93bmVyID0gZnVuY3Rpb24gKF9vYmosIF9tZW1iZXIpIHtcXG5cXHRcXHR2YXIgcHJvdG90eXBlLCBuYW1lO1xcblxcblxcdFxcdHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihfb2JqKTtcXG5cXG5cXHRcXHQvLyBrZWVwIHNlYXJjaGluZyB1bnRpbCB3ZSBnbyBhcyBkZWVwIGFzIHdlIGNhbiBnby5cXG5cXHRcXHR3aGlsZSAocHJvdG90eXBlKSB7XFxuXFx0XFx0XFx0Ly8gc2VhcmNoIGZvciB0aGUga2V5IGluIHRoZSBwcm90b3R5cGVcXG5cXHRcXHRcXHRuYW1lID0gdXRpbC5rZXlPZihwcm90b3R5cGUsIF9tZW1iZXIpO1xcblxcblxcdFxcdFxcdC8vIElmIHdlIGZvdW5kIHRoZSBrZXkgaW4gdGhlIHByb3RvdHlwZSB0aGVuIHdlIGZvdW5kXFxuXFx0XFx0XFx0Ly8gb3VyIG1hdGNoIGFuZCB3ZSBjYW4gYnJlYWsgb3V0IG9mIHRoZSBsb29wLlxcblxcdFxcdFxcdGlmIChuYW1lKSBicmVhaztcXG5cXG5cXHRcXHRcXHQvLyBPdGhlcndpc2UgZ28gZGVlcGVyICh0aGF0cyB3aGF0IHNoZSBzYWlkIDtwKVxcblxcdFxcdFxcdHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90b3R5cGUpO1xcblxcdFxcdH1cXG5cXG5cXHRcXHRyZXR1cm4ge1xcblxcdFxcdFxcdG5hbWU6IG5hbWUsXFxuXFx0XFx0XFx0b2JqZWN0OiBwcm90b3R5cGVcXG5cXHRcXHR9O1xcblxcdH07XFxuXFxuXFx0LyoqXFxuICAqIEdpdmVuIGEgcmFuZ2U7IHByb3ZpZGVzIGEgcmFuZG9tIG51bWJlciBpbiB0aGF0IHJhbmdlLlxcbiAgKiBAZnVuY3Rpb24gcGxheX5wbC51dGlsLnJhbmRvbVxcbiAgKiBAYXJnIHtudW1iZXJ9IF9yYW5nZUEgLSBBIG51bWJlciBmb3IgdGhlIGxvdyBlbmQgb2YgdGhlIHJhbmdlLlxcbiAgKiBAYXJnIHtudW1iZXJ9IF9yYW5nZUIgLSBUaGUgdG9wIGVuZCBvZiB0aGUgcmFuZ2UuXFxuICAqIEByZXR1cm5zIHtudW1iZXJ8Kn0gVGhlIHJlc3VsdGluZyBudW1iZXIgaW4gcmFuZ2Ugb3IgdGhlIG1lbWJlciBmb3VuZCBhdCByYW5kb20uXFxuICAqL1xcblxcblxcdC8qKlxcbiAgKiBHaXZlbiBhbiBpdGVyYWJsZTsgcHJvdmlkZXMgYSByYW5kb20gaXRlbS5cXG4gICogQGFyZyB7YXJyYXl9IF9jb2xsZWN0aW9uIC0gVGhlIGl0ZXJhYmxlLlxcbiAgKiBAcmV0dXJucyB7bnVtYmVyfCp9IFRoZSBtZW1iZXIgZm91bmQgYXQgcmFuZG9tLlxcbiAgKi9cXG5cXHR0aGlzLnJhbmRvbSA9IGZ1bmN0aW9uIChfY29sbGVjdGlvbl9yYW5nZUEsIF9yYW5nZUIpIHtcXG5cXHRcXHR2YXIgaW5kZXgsIHZhbDtcXG5cXG5cXHRcXHRpbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIF9jb2xsZWN0aW9uX3JhbmdlQS5sZW5ndGgpO1xcblxcblxcdFxcdGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XFxuXFx0XFx0XFx0dmFsID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogX3JhbmdlQik7XFxuXFxuXFx0XFx0XFx0cmV0dXJuIHZhbCA8IF9jb2xsZWN0aW9uX3JhbmdlQSA/IF9jb2xsZWN0aW9uX3JhbmdlQSA6IHZhbDtcXG5cXHRcXHR9XFxuXFxuXFx0XFx0aWYgKGluZGV4ID09PSBfY29sbGVjdGlvbl9yYW5nZUEubGVuZ3RoKSBpbmRleCA9IF9jb2xsZWN0aW9uX3JhbmdlQS5sZW5ndGggLSAxO1xcblxcblxcdFxcdHJldHVybiBfY29sbGVjdGlvbl9yYW5nZUEgJiYgX2NvbGxlY3Rpb25fcmFuZ2VBW2luZGV4XTtcXG5cXHR9O1xcblxcblxcdC8qKlxcbiAgKiBUYWtlIHN0cmluZyBhbmQgbWFrZXMgaXQgZG90IG5vdGF0aW9uIGZyaWVuZGx5LlxcbiAgKiBAYXJnIHtzdHJpbmd9IF9pZCAtIFRoZSBzdHJpbmcgdG8gdHJhbnNmb3JtLlxcbiAgKiBAYXJnIHtib29sZWFufSBfY2FtZWxDYXNlIC0gVHJhbnNmb3JtIHdpdGggY2FtZWwgY2FzZS5cXG4gICogQHJldHVybnMge3N0cmluZ31cXG4gICovXFxuXFx0dGhpcy50cmFuc2Zvcm1JZCA9IGZ1bmN0aW9uIChfaWQsIF9jYW1lbENhc2UpIHtcXG5cXHRcXHRpZiAoX2lkICYmIF9jYW1lbENhc2UpIHtcXG5cXHRcXHRcXHRyZXR1cm4gX2lkLnJlcGxhY2UoL1stXFxcXHNdKyhbXFxcXHdcXFxcZF0/KS9nLCBmdW5jdGlvbiAoX21hdGNoKSB7XFxuXFx0XFx0XFx0XFx0cmV0dXJuIFJlZ0V4cC4kMS50b1VwcGVyQ2FzZSgpO1xcblxcdFxcdFxcdH0pO1xcblxcdFxcdH1cXG5cXG5cXHRcXHRyZXR1cm4gX2lkICYmIF9pZC5yZXBsYWNlKC9bLVxcXFxzXSsvZywgJ18nKTtcXG5cXHR9O1xcblxcblxcdC8qKlxcbiAgKiBUZXN0IGFsbCBhcmd1bWVudHMgZm9yICE9IG51bGxcXG4gICogQHJldHVybiB7Ym9vbGVhbn1cXG4gICovXFxuXFx0dGhpcy5pc1NldCA9IGZ1bmN0aW9uICgpIHtcXG5cXHRcXHRyZXR1cm4gW10uZXZlcnkuY2FsbChhcmd1bWVudHMsIGZ1bmN0aW9uIChfYXJnKSB7XFxuXFx0XFx0XFx0cmV0dXJuIF9hcmcgIT0gbnVsbDtcXG5cXHRcXHR9KTtcXG5cXHR9O1xcblxcblxcdC8qKlxcbiAgKiBQYXJzZXMgYSBmb3JtYXRlZCBzdHJpbmcgYW5kIGNhbGN1bGF0ZXMgaXQgaW4gbWlsbGlzZWNvbmRzLlxcbiAgKiBAYXJnIHtzdHJpbmd9IF9zb3VyY2UgLSBUaGUgZm9ybWF0ZWQgc3RyaW5nIGZvciBjYWxjdWxhdGlvbiBpbiB0aGUgcGF0dGVybiAnMWQgMWggMW0gMXMnLlxcbiAgKiBAcmV0dXJuIHtudW1iZXJ9XFxuICAqL1xcblxcdHRoaXMudG9NaWxsaXNlYyA9IGZ1bmN0aW9uIChfc291cmNlKSB7XFxuXFx0XFx0dmFyIHRva2VucywgdGltZSwgdW5pdHM7XFxuXFxuXFx0XFx0aWYgKCFfc291cmNlKSByZXR1cm47XFxuXFx0XFx0aWYgKHR5cGVvZiBfc291cmNlID09PSAnbnVtYmVyJykgcmV0dXJuIF9zb3VyY2U7XFxuXFxuXFx0XFx0dG9rZW5zID0gX3NvdXJjZS5zcGxpdCgvXFxcXHMrLyk7XFxuXFx0XFx0dGltZSA9IDA7XFxuXFx0XFx0dW5pdHMgPSB7XFxuXFx0XFx0XFx0ZDogMjQgKiA2MCAqIDYwICogMTAwMCxcXG5cXHRcXHRcXHRoOiA2MCAqIDYwICogMTAwMCxcXG5cXHRcXHRcXHRtOiA2MCAqIDEwMDAsXFxuXFx0XFx0XFx0czogMTAwMFxcblxcdFxcdH07XFxuXFxuXFx0XFx0dG9rZW5zLmZvckVhY2goZnVuY3Rpb24gKF90b2tlbikge1xcblxcdFxcdFxcdHZhciB1bml0LCB2YWx1ZTtcXG5cXG5cXHRcXHRcXHR1bml0ID0gKF90b2tlbi5tYXRjaCgvW2RobXNdLykgfHwgW10pWzBdO1xcblxcblxcdFxcdFxcdGlmICh1bml0KSB7XFxuXFx0XFx0XFx0XFx0dmFsdWUgPSBOdW1iZXIoX3Rva2VuLnNsaWNlKDAsIC0xKSk7XFxuXFx0XFx0XFx0XFx0dGltZSArPSB2YWx1ZSAqIHVuaXRzW3VuaXRdO1xcblxcdFxcdFxcdH0gZWxzZSB7XFxuXFx0XFx0XFx0XFx0dGltZSArPSBOdW1iZXIoX3Rva2VuKTtcXG5cXHRcXHRcXHR9XFxuXFx0XFx0fSk7XFxuXFxuXFx0XFx0cmV0dXJuIHRpbWU7XFxuXFx0fTtcXG5cXG5cXHQvKipcXG4gICogTmVlZHMgbm8gaW50cm9kdWN0aW9uXFxuICAqIEBhcmcge2l0ZXJhYmxlfSBfY29sbGVjdGlvbiAtIGl0ZXJhYmxlLlxcbiAgKiBAcmV0dXJuIHthcnJheX1cXG4gICovXFxuXFx0dGhpcy50b0FycmF5ID0gZnVuY3Rpb24gKF9jb2xsZWN0aW9uKSB7XFxuXFx0XFx0cmV0dXJuIEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChfY29sbGVjdGlvbiwgZnVuY3Rpb24gKGkpIHtcXG5cXHRcXHRcXHRyZXR1cm4gaTtcXG5cXHRcXHR9KTtcXG5cXHR9O1xcblxcblxcdC8qKlxcbiAgKiBSZXNvbHZlcyB0aGUgdmFsdWUgaW4gdGhlIG9iamVjdCBhdCB0aGUgZ2l2ZW4gcGF0aC5cXG4gICogQGFyZyB7b2JqZWN0fSBfb2JqIC0gVGhlIG9iamVjdCB0byBxdWVyeS5cXG4gICogQGFyZyB7c3RyaW5nfSBfcGF0aCAtIFRoZSBwYXRoIHRvIHRoZSBkZXNpcmVkIHJlZmVyZW5jZS5cXG4gICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgcmVmZXJlbmNlIHZhbHVlLlxcbiAgKiBAZXhhbXBsZVxcbiAgKiB2YXIgdXNlciA9IHtcXG4gICogICBuYW1lOiAnSm9obicsXFxuICAqICAgZmFtaWx5OiB7XFxuICAqXFx0ICAgZ3VhcmRpYW5zOiB7RGF2aWR9LCAvLyBwcm9wZXJ0eSBjb3VsZCBiZSBhbiBhcnJheSBvZiBtdWx0aXBsZSBndWFyZGlhbnMuXFxuICAqICAgICBzaWJsaW5nczogW3tKYW5lfSwge1Rob21hc31dIC8vIGNvbGxlY3Rpb24gb2YgdXNlciBvYmplY3RzLlxcbiAgKiAgIH1cXG4gICogfTtcXG4gICpcXG4gICogcGwudXRpbC5yZXNvbHZlUGF0aCh1c2VyLCAnZmFtaWx5LnNsaWJsaW5nc1syXS5uYW1lJyk7XFxuICAqIC8vIE1hdGNoZXMgdGhlIGBndWFyZGlhbnNgIHByb3BlcnkgaWYgYGd1YXJkaWFuc1swXWAgaXMgdW5kZWZpbmVkIHdoZW4gYD9gIGlzIHVzZWQuXFxuICAqIHBsLnV0aWwucmVzb2x2ZVBhdGgodXNlciwgJ2ZhbWlseS5ndWFyZGlhbnNbMF0/Lm5hbWUnKTsgXFxuICAqL1xcblxcdHRoaXMucmVzb2x2ZVBhdGggPSBmdW5jdGlvbiAoX29iaiwgX3BhdGgpIHtcXG5cXHRcXHR2YXIgcGF0aCwgb2JqLCBpLCBuYW1lLCBpbmRleCwgdGVzdEFycmF5O1xcblxcblxcdFxcdHBhdGggPSBfcGF0aC5zcGxpdCgnLicpO1xcblxcdFxcdG9iaiA9IF9vYmo7XFxuXFx0XFx0aSA9IDA7XFxuXFxuXFx0XFx0d2hpbGUgKG9iaikge1xcblxcdFxcdFxcdHRlc3RBcnJheSA9IC9cXFxcPyQvLnRlc3QocGF0aFtpXSk7XFxuXFx0XFx0XFx0aW5kZXggPSAocGF0aFtpXS5tYXRjaCgvXFxcXFsoXFxcXGQrKVxcXFxdLykgfHwgW10pWzFdIHx8IC0xO1xcblxcdFxcdFxcdG5hbWUgPSB+aW5kZXggPyBwYXRoW2ldLnNsaWNlKDAsIHBhdGhbaV0uaW5kZXhPZignWycpKSA6IHBhdGhbaV07XFxuXFx0XFx0XFx0b2JqID0gb2JqW25hbWVdO1xcblxcblxcdFxcdFxcdGlmICh+aW5kZXggJiYgb2JqKSB7XFxuXFx0XFx0XFx0XFx0b2JqID0gdGVzdEFycmF5ID8gb2JqW2luZGV4XSB8fCBvYmogOiBvYmpbaW5kZXhdO1xcblxcdFxcdFxcdH1cXG5cXG5cXHRcXHRcXHRpICs9IDE7XFxuXFxuXFx0XFx0XFx0aWYgKHBhdGgubGVuZ3RoID09PSBpKSBicmVhaztcXG5cXHRcXHR9XFxuXFxuXFx0XFx0cmV0dXJuIG9iajtcXG5cXHR9O1xcblxcblxcdHRoaXMuYXNzaWduUmVmID0gZnVuY3Rpb24gKF9vYmosIF9uYW1lLCBfcmVmKSB7XFxuXFx0XFx0dmFyIG5hbWU7XFxuXFxuXFx0XFx0bmFtZSA9IHV0aWwudHJhbnNmb3JtSWQoX25hbWUsIHRydWUpO1xcblxcblxcdFxcdGlmIChfb2JqW25hbWVdKSB7XFxuXFx0XFx0XFx0aWYgKCFfb2JqW25hbWVdLl9fcmVmQ29sbGN0aW9uX18pIHtcXG5cXHRcXHRcXHRcXHRfb2JqW25hbWVdID0gW19vYmpbbmFtZV1dO1xcblxcblxcdFxcdFxcdFxcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfb2JqW25hbWVdLCAnX19yZWZDb2xsY3Rpb25fXycsIHtcXG5cXHRcXHRcXHRcXHRcXHR2YWx1ZTogdHJ1ZSxcXG5cXHRcXHRcXHRcXHRcXHRlbnVtZXJhYmxlOiBmYWxzZSxcXG5cXHRcXHRcXHRcXHRcXHR3cml0ZWFibGU6IGZhbHNlLFxcblxcdFxcdFxcdFxcdFxcdGNvbmZpZ3VyZWFibGU6IGZhbHNlXFxuXFx0XFx0XFx0XFx0fSk7XFxuXFx0XFx0XFx0fVxcblxcblxcdFxcdFxcdF9vYmpbbmFtZV0ucHVzaChfcmVmKTtcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdF9vYmpbbmFtZV0gPSBfcmVmO1xcblxcdFxcdH1cXG5cXHR9O1xcbn0oKTtcXG5cXG5leHBvcnRzWydkZWZhdWx0J10gPSB1dGlsO1xcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOy8vQCBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emIzVnlZMlV2ZFhScGJDNXFjejg0T0RJMUlsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3UVVGTlFTeEpRVUZKTEVsQlFVa3NSMEZCUnl4SlFVRkxMRmxCUVZrN096czdPenM3TzBGQlVUTkNMRXRCUVVrc1EwRkJReXhMUVVGTExFZEJRVWNzV1VGQldUdEJRVU40UWl4TlFVRkpMRTFCUVUwc1JVRkJSU3hEUVVGRExFVkJRVVVzVFVGQlRTeEZRVUZGTEVsQlFVa3NRMEZCUXpzN1FVRkZOVUlzVVVGQlRTeEhRVUZITEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOMFFpeE5RVUZKTEVkQlFVY3NSVUZCUlN4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPenRCUVVWdVF5eFBRVUZMTEVOQlFVTXNSMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4SlFVRkZMRU5CUVVNc1JVRkJSVHRCUVVOb1F5eFJRVUZMTEUxQlFVMHNTVUZCU1N4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVU3UVVGRGRrSXNVVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eGpRVUZqTEVOQlFVTXNUVUZCVFN4RFFVRkRMRVZCUVVVc1UwRkJVenRCUVVNNVF5eFZRVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMGxCUTJwRE8wZEJRMFE3TzBGQlJVUXNVMEZCVHl4TlFVRk5MRU5CUVVNN1JVRkRaQ3hEUVVGRE96czdPenM3T3p0QlFWRkdMRXRCUVVrc1EwRkJReXhMUVVGTExFZEJRVWNzVlVGQlZTeEpRVUZKTEVWQlFVVXNUMEZCVHl4RlFVRkZPMEZCUTNKRExFMUJRVWtzVFVGQlRTeERRVUZET3p0QlFVVllMRTlCUVVzc1RVRkJUU3hKUVVGSkxFbEJRVWtzUlVGQlJUdEJRVU53UWl4UFFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4VFFVRlRPMEZCUXpORExFOUJRVWtzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4TFFVRkxMRTlCUVU4c1JVRkJSU3hQUVVGUExFMUJRVTBzUTBGQlF6dEhRVU0xUXpzN1FVRkZSQ3hUUVVGUExFbEJRVWtzUTBGQlF6dEZRVU5hTEVOQlFVTTdPenM3T3pzN08wRkJVVVlzUzBGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4VlFVRlZMRWxCUVVrc1JVRkJSU3hQUVVGUExFVkJRVVU3UVVGRGVFTXNUVUZCU1N4VFFVRlRMRVZCUVVVc1NVRkJTU3hEUVVGRE96dEJRVVZ3UWl4WFFVRlRMRWRCUVVjc1RVRkJUU3hEUVVGRExHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXpzN08wRkJSM2hETEZOQlFVOHNVMEZCVXl4RlFVRkZPenRCUVVWcVFpeFBRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhUUVVGVExFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTTdPenM3UVVGSmRFTXNUMEZCU1N4SlFVRkpMRVZCUVVVc1RVRkJUVHM3TzBGQlIyaENMRmxCUVZNc1IwRkJSeXhOUVVGTkxFTkJRVU1zWTBGQll5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMGRCUXpkRE96dEJRVVZFTEZOQlFVODdRVUZEVGl4UFFVRkpMRVZCUVVVc1NVRkJTVHRCUVVOV0xGTkJRVTBzUlVGQlJTeFRRVUZUTzBkQlEycENMRU5CUVVNN1JVRkRSaXhEUVVGRE96czdPenM3T3pzN096czdPenM3UVVGbFJpeExRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRlZCUVZVc2EwSkJRV3RDTEVWQlFVVXNUMEZCVHl4RlFVRkZPMEZCUTNCRUxFMUJRVWtzUzBGQlN5eEZRVUZGTEVkQlFVY3NRMEZCUXpzN1FVRkZaaXhQUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFZEJRVU1zYTBKQlFXdENMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03TzBGQlJUVkVMRTFCUVVrc1UwRkJVeXhEUVVGRExFMUJRVTBzUzBGQlN5eERRVUZETEVWQlFVVTdRVUZETTBJc1RVRkJSeXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hIUVVGRExFOUJRVThzUTBGQlF5eERRVUZET3p0QlFVVjRReXhWUVVGUExFZEJRVWNzUjBGQlJ5eHJRa0ZCYTBJc1IwRkJSeXhyUWtGQmEwSXNSMEZCUnl4SFFVRkhMRU5CUVVNN1IwRkRNMFE3TzBGQlJVUXNUVUZCU1N4TFFVRkxMRXRCUVVzc2EwSkJRV3RDTEVOQlFVTXNUVUZCVFN4RlFVRkZMRXRCUVVzc1IwRkJSeXhyUWtGQmEwSXNRMEZCUXl4TlFVRk5MRWRCUVVNc1EwRkJReXhEUVVGRE96dEJRVVUzUlN4VFFVRlBMR3RDUVVGclFpeEpRVUZKTEd0Q1FVRnJRaXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBWQlEzWkVMRU5CUVVNN096czdPenM3TzBGQlVVWXNTMEZCU1N4RFFVRkRMRmRCUVZjc1IwRkJSeXhWUVVGVkxFZEJRVWNzUlVGQlJTeFZRVUZWTEVWQlFVVTdRVUZETjBNc1RVRkJTU3hIUVVGSExFbEJRVWtzVlVGQlZTeEZRVUZGTzBGQlEzUkNMRlZCUVU4c1IwRkJSeXhEUVVGRExFOUJRVThzUTBGQlF5eHJRa0ZCYTBJc1JVRkJSU3hWUVVGVkxFMUJRVTBzUlVGQlJUdEJRVU40UkN4WFFVRlBMRTFCUVUwc1EwRkJReXhGUVVGRkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVTTdTVUZETDBJc1EwRkJReXhEUVVGRE8wZEJRMGc3TzBGQlJVUXNVMEZCVHl4SFFVRkhMRWxCUVVrc1IwRkJSeXhEUVVGRExFOUJRVThzUTBGQlF5eFRRVUZUTEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1JVRkRNVU1zUTBGQlF6czdPenM3TzBGQlRVWXNTMEZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhaUVVGWk8wRkJRM2hDTEZOQlFVOHNSVUZCUlN4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTEZWQlFWVXNTVUZCU1N4RlFVRkZPMEZCUVVVc1ZVRkJUeXhKUVVGSkxFbEJRVWtzU1VGQlNUdEhRVUZGTEVOQlFVTXNRMEZCUXp0RlFVTjZSU3hEUVVGRE96czdPenM3TzBGQlQwWXNTMEZCU1N4RFFVRkRMRlZCUVZVc1IwRkJSeXhWUVVGVkxFOUJRVThzUlVGQlJUdEJRVU53UXl4TlFVRkpMRTFCUVUwc1JVRkJSU3hKUVVGSkxFVkJRVVVzUzBGQlN5eERRVUZET3p0QlFVVjRRaXhOUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTEU5QlFVODdRVUZEY2tJc1RVRkJTU3hQUVVGUExFOUJRVThzUzBGQlN5eFJRVUZSTEVWQlFVVXNUMEZCVHl4UFFVRlBMRU5CUVVNN08wRkJSV2hFTEZGQlFVMHNSMEZCUnl4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBGQlF6bENMRTFCUVVrc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRFZDeFBRVUZMTEVkQlFVYzdRVUZEVUN4SlFVRkRMRVZCUVVVc1JVRkJSU3hIUVVGRExFVkJRVVVzUjBGQlF5eEZRVUZGTEVkQlFVTXNTVUZCU1R0QlFVTm9RaXhKUVVGRExFVkJRVVVzUlVGQlJTeEhRVUZETEVWQlFVVXNSMEZCUXl4SlFVRkpPMEZCUTJJc1NVRkJReXhGUVVGRkxFVkJRVVVzUjBGQlF5eEpRVUZKTzBGQlExWXNTVUZCUXl4RlFVRkZMRWxCUVVrN1IwRkRVQ3hEUVVGRE96dEJRVVZHTEZGQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJWU3hOUVVGTkxFVkJRVVU3UVVGRGFFTXNUMEZCU1N4SlFVRkpMRVZCUVVVc1MwRkJTeXhEUVVGRE96dEJRVVZvUWl4UFFVRkpMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6czdRVUZGZWtNc1QwRkJTU3hKUVVGSkxFVkJRVVU3UVVGRFZDeFRRVUZMTEVkQlFVY3NUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOd1F5eFJRVUZKTEVsQlFVa3NTMEZCU3l4SFFVRkhMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEpRVU0xUWl4TlFVVkpPMEZCUTBvc1VVRkJTU3hKUVVGSkxFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0SlFVTjJRanRIUVVORUxFTkJRVU1zUTBGQlF6czdRVUZGU0N4VFFVRlBMRWxCUVVrc1EwRkJRenRGUVVOYUxFTkJRVU03T3pzN096czdRVUZQUml4TFFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExGVkJRVlVzVjBGQlZ5eEZRVUZGTzBGQlEzSkRMRk5CUVU4c1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1JVRkJSU3hWUVVGVkxFTkJRVU1zUlVGQlJUdEJRVUZGTEZWQlFVOHNRMEZCUXl4RFFVRkRPMGRCUVVVc1EwRkJReXhEUVVGRE8wVkJRM3BGTEVOQlFVTTdPenM3T3pzN096czdPenM3T3pzN096czdPMEZCYjBKR0xFdEJRVWtzUTBGQlF5eFhRVUZYTEVkQlFVY3NWVUZCVlN4SlFVRkpMRVZCUVVVc1MwRkJTeXhGUVVGRk8wRkJRM3BETEUxQlFVa3NTVUZCU1N4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRExFVkJRVVVzU1VGQlNTeEZRVUZGTEV0QlFVc3NSVUZCUlN4VFFVRlRMRU5CUVVNN08wRkJSWHBETEUxQlFVa3NSMEZCUnl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEzaENMRXRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRFdDeEhRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPenRCUVVWT0xGTkJRVThzUjBGQlJ5eEZRVUZGTzBGQlExZ3NXVUZCVXl4SFFVRkpMRXRCUVVzc1EwRkJSU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRiRU1zVVVGQlN5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eFhRVUZYTEVOQlFVTXNTVUZCU1N4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEY0VRc1QwRkJTU3hIUVVGSExFTkJRVU1zUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRGFrVXNUVUZCUnl4SFFVRkhMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6czdRVUZGYUVJc1QwRkJTU3hEUVVGRExFdEJRVXNzU1VGQlNTeEhRVUZITEVWQlFVVTdRVUZEYkVJc1QwRkJSeXhIUVVGSExGTkJRVk1zUjBGQlNTeEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1IwRkJSeXhIUVVGSkxFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0SlFVTnVSRHM3UVVGRlJDeEpRVUZETEVsQlFVVXNRMEZCUXl4RFFVRkRPenRCUVVWTUxFOUJRVWtzU1VGQlNTeERRVUZETEUxQlFVMHNTMEZCU3l4RFFVRkRMRVZCUVVVc1RVRkJUVHRIUVVNM1FqczdRVUZGUkN4VFFVRlBMRWRCUVVjc1EwRkJRenRGUVVOWUxFTkJRVU03TzBGQlJVWXNTMEZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhWUVVGVkxFbEJRVWtzUlVGQlJTeExRVUZMTEVWQlFVVXNTVUZCU1N4RlFVRkZPMEZCUXpkRExFMUJRVWtzU1VGQlNTeERRVUZET3p0QlFVVlVMRTFCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEV0QlFVc3NSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenM3UVVGRmNrTXNUVUZCU1N4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVU3UVVGRFppeFBRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExHZENRVUZuUWl4RlFVRkZPMEZCUTJwRExGRkJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZET3p0QlFVVXhRaXhWUVVGTkxFTkJRVU1zWTBGQll5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hyUWtGQmEwSXNSVUZCUlR0QlFVTnlSQ3hWUVVGTExFVkJRVVVzU1VGQlNUdEJRVU5ZTEdWQlFWVXNSVUZCUlN4TFFVRkxPMEZCUTJwQ0xHTkJRVk1zUlVGQlJTeExRVUZMTzBGQlEyaENMR3RDUVVGaExFVkJRVVVzUzBGQlN6dExRVU53UWl4RFFVRkRMRU5CUVVNN1NVRkRTRHM3UVVGRlJDeFBRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBkQlEzUkNMRTFCUlVrN1FVRkRTaXhQUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRPMGRCUTJ4Q08wVkJRMFFzUTBGQlF6dERRVVZHTEVWQlFVTXNRMEZCUXpzN2NVSkJSVmtzU1VGQlNTSXNJbVpwYkdVaU9pSXhNQzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1ZYUnBiR2wwZVNCbWRXNWpkR2x2Ym5NdVhHNGdLaUJBYm1GdFpYTndZV05sWEc0Z0tpQkFZWFYwYUc5eUlFMXBZMkZvSUZKdmJHOXVJRHh0YVdOaGFFQm5hVzVoYzJsdWF5NWpiMjArWEc0Z0tpQkFiV1Z0WW1WeWIyWWdiVzlrZFd4bE9uQnNZWGwrY0d4Y2JpQXFMMXh1ZG1GeUlIVjBhV3dnUFNCdVpYY2dLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseHVYSFF2S2lwY2JseDBJQ29nUVdOalpYQjBjeUJ2Ym1VZ2IzSWdiVzl5WlNCdlltcGxZM1J6SUhSdklHTnZiV0pwYm1VZ2RHaGxhWElnYjNkdUlIQnliM0JsY25ScFpYTWdkRzhnYzJsdVoyeGxJRzlpYW1WamRDNWNibHgwSUNvZ1FHRnlaeUI3YjJKcVpXTjBmU0JmZEdGeVoyVjBJQzBnVkdobElHOWlhbVZqZENCMGFHRjBJSGRwYkd3Z2NtVmphV1YyWlNCaGJHd2diV1Z0WW1WeWN5NWNibHgwSUNvZ1FHRnlaeUI3YjJKcVpXTjBmU0JmYzI5MWNtTmxjeTR1TGlBdElGUm9aU0J2WW1wbFkzUW9jeWtnZEc4Z2FtOXBiaUIzYVhSb0lIUm9aU0FuWDNSaGNtZGxkQ2N1WEc1Y2RDQXFJRUJ5WlhSMWNtNXpJSHR2WW1wbFkzUjlJRjkwWVhKblpYUmNibHgwSUNvdlhHNWNkSFJvYVhNdWJXbDRhVzRnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzVjZEZ4MGRtRnlJRzFsYldKbGNpd2dhU3dnZEdGeVoyVjBMQ0J2WW1wek8xeHVYRzVjZEZ4MGRHRnlaMlYwSUQwZ1lYSm5kVzFsYm5Seld6QmRPMXh1WEhSY2RHOWlhbk1nUFNCYlhTNXpiR2xqWlM1allXeHNLR0Z5WjNWdFpXNTBjeXdnTVNrN1hHNWNibHgwWEhSbWIzSWdLR2s5TURzZ2FTQThJRzlpYW5NdWJHVnVaM1JvT3lCcEt6MHhLU0I3WEc1Y2RGeDBYSFJtYjNJZ0tHMWxiV0psY2lCcGJpQnZZbXB6VzJsZEtTQjdYRzVjZEZ4MFhIUmNkR2xtSUNnaGIySnFjMXRwWFM1b1lYTlBkMjVRY205d1pYSjBlU2h0WlcxaVpYSXBLU0JqYjI1MGFXNTFaVHRjYmx4MFhIUmNkRngwZEdGeVoyVjBXMjFsYldKbGNsMGdQU0J2WW1welcybGRXMjFsYldKbGNsMDdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZWeHVYRzVjZEZ4MGNtVjBkWEp1SUhSaGNtZGxkRHRjYmx4MGZUdGNibHh1WEhRdktpcGNibHgwSUNvZ1RXRjBZMmhsY3lCMGFHVWdibUZ0WlNCdlppQjBhR1VnYTJWNUlIZG9hV05vSUhKbFptVnlaVzVqWlhNZ2RHaGxJR2RwZG1WdUlIQnZhVzUwWlhJZ2FXNXphV1JsSUdGdUlHOWlhbVZqZEM0Z1RHbHJaU0JwYm1SbGVFOW1LQ2tnWm05eUlHOWlhbVZqZEhNdVhHNWNkQ0FxSUVCaGNtY2dlMjlpYW1WamRIMGdYMjlpYWlBdElFOWlhbVZqZENCMGJ5QnpaV0Z5WTJnZ2FXNHVYRzVjZENBcUlFQmhjbWNnZXlwOUlGOXRaVzFpWlhJZ0xTQlVhR1VnY21WbVpYSmxibU5sSUhkb2FXTm9JR2x6SUdWNGNHVmpkR1ZrSUhSdklHSmxJR2x1SUhSb1pTQnZZbXBsWTNRZ1lYTWdZU0J3Y205d1pYSjBlUzVjYmx4MElDb2dRSEpsZEhWeWJuTWdlM04wY21sdVozMGdWR2hsSUc1aGJXVWdiMllnZEdobElHdGxlU0JwYmlCMGFHVWdiMkpxWldOMElHMWhkR05vYVc1bklDZGZiV1Z0WW1WeUp5NWNibHgwSUNvdlhHNWNkSFJvYVhNdWEyVjVUMllnUFNCbWRXNWpkR2x2YmlBb1gyOWlhaXdnWDIxbGJXSmxjaWtnZTF4dVhIUmNkSFpoY2lCdFpXMWlaWEk3WEc1Y2JseDBYSFJtYjNJZ0tHMWxiV0psY2lCcGJpQmZiMkpxS1NCN1hHNWNkRngwWEhScFppQW9JVjl2WW1vdWFHRnpUM2R1VUhKdmNHVnlkSGtvYldWdFltVnlLU2tnWTI5dWRHbHVkV1U3WEc1Y2RGeDBYSFJwWmlBb1gyOWlhbHR0WlcxaVpYSmRJRDA5UFNCZmJXVnRZbVZ5S1NCeVpYUjFjbTRnYldWdFltVnlPMXh1WEhSY2RIMWNibHh1WEhSY2RISmxkSFZ5YmlCdWRXeHNPMXh1WEhSOU8xeHVYRzVjZEM4cUtseHVYSFFnS2lCTllYUmphR1Z6SUhSb1pTQnZZbXBsWTNRc0lHUmxaWEFnYVc0Z2RHaGxJSEJ5YjNSdmRIbHdaU0JqYUdGcGJpd2dkMmhwWTJnZ2FYTWdkR2hsSUc5M2JtVnlJRzltSUhSb1pTQndjbTl3WlhKMGVTQnlaV1psY21WdVkybHVaeUIwYUdVZ1oybDJaVzRnY0c5cGJuUmxjaTVjYmx4MElDb2dRR0Z5WnlCN2IySnFaV04wZlNCZmIySnFJQzBnVkdobElHOWlhbVZqZENCMGJ5QnpaV0Z5WTJndVhHNWNkQ0FxSUVCaGNtY2dleXA5SUY5dFpXMWlaWElnTFNCVWFHVWdjbVZtWlhKbGJtTmxJSGRvYVdOb0lHbHpJR1Y0Y0dWamRHVmtJSFJ2SUdKbElHRWdjSEp2Y0dWeWRIa2dhVzRnZEdobElIQnliM1J2ZEhsd1pTQmphR0ZwYmk1Y2JseDBJQ29nUUhKbGRIVnliaUI3YjJKcVpXTjBmU0JCYmlCdlltcGxZM1FnWTI5dWRHRnBibWx1WnlCMGFHVWdibUZ0WlNCdlppQjBhR1VnY0hKdmNHVnlkSGtnWVc1a0lIUm9aU0J2ZDI1cGJtY2diMkpxWldOMExpQjdibUZ0WlN3Z2IySnFaV04wZlZ4dVhIUWdLaTljYmx4MGRHaHBjeTVuWlhSUGQyNWxjaUE5SUdaMWJtTjBhVzl1SUNoZmIySnFMQ0JmYldWdFltVnlLU0I3WEc1Y2RGeDBkbUZ5SUhCeWIzUnZkSGx3WlN3Z2JtRnRaVHRjYmx4dVhIUmNkSEJ5YjNSdmRIbHdaU0E5SUU5aWFtVmpkQzVuWlhSUWNtOTBiM1I1Y0dWUFppaGZiMkpxS1R0Y2JseHVYSFJjZEM4dklHdGxaWEFnYzJWaGNtTm9hVzVuSUhWdWRHbHNJSGRsSUdkdklHRnpJR1JsWlhBZ1lYTWdkMlVnWTJGdUlHZHZMbHh1WEhSY2RIZG9hV3hsSUNod2NtOTBiM1I1Y0dVcElIdGNibHgwWEhSY2RDOHZJSE5sWVhKamFDQm1iM0lnZEdobElHdGxlU0JwYmlCMGFHVWdjSEp2ZEc5MGVYQmxYRzVjZEZ4MFhIUnVZVzFsSUQwZ2RYUnBiQzVyWlhsUFppaHdjbTkwYjNSNWNHVXNJRjl0WlcxaVpYSXBPMXh1WEc1Y2RGeDBYSFF2THlCSlppQjNaU0JtYjNWdVpDQjBhR1VnYTJWNUlHbHVJSFJvWlNCd2NtOTBiM1I1Y0dVZ2RHaGxiaUIzWlNCbWIzVnVaRnh1WEhSY2RGeDBMeThnYjNWeUlHMWhkR05vSUdGdVpDQjNaU0JqWVc0Z1luSmxZV3NnYjNWMElHOW1JSFJvWlNCc2IyOXdMbHh1WEhSY2RGeDBhV1lnS0c1aGJXVXBJR0p5WldGck8xeHVYRzVjZEZ4MFhIUXZMeUJQZEdobGNuZHBjMlVnWjI4Z1pHVmxjR1Z5SUNoMGFHRjBjeUIzYUdGMElITm9aU0J6WVdsa0lEdHdLVnh1WEhSY2RGeDBjSEp2ZEc5MGVYQmxJRDBnVDJKcVpXTjBMbWRsZEZCeWIzUnZkSGx3WlU5bUtIQnliM1J2ZEhsd1pTazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGNtVjBkWEp1SUh0Y2JseDBYSFJjZEc1aGJXVTZJRzVoYldVc1hHNWNkRngwWEhSdlltcGxZM1E2SUhCeWIzUnZkSGx3WlZ4dVhIUmNkSDA3WEc1Y2RIMDdYRzVjYmx4MEx5b3FYRzVjZENBcUlFZHBkbVZ1SUdFZ2NtRnVaMlU3SUhCeWIzWnBaR1Z6SUdFZ2NtRnVaRzl0SUc1MWJXSmxjaUJwYmlCMGFHRjBJSEpoYm1kbExseHVYSFFnS2lCQVpuVnVZM1JwYjI0Z2NHeGhlWDV3YkM1MWRHbHNMbkpoYm1SdmJWeHVYSFFnS2lCQVlYSm5JSHR1ZFcxaVpYSjlJRjl5WVc1blpVRWdMU0JCSUc1MWJXSmxjaUJtYjNJZ2RHaGxJR3h2ZHlCbGJtUWdiMllnZEdobElISmhibWRsTGx4dVhIUWdLaUJBWVhKbklIdHVkVzFpWlhKOUlGOXlZVzVuWlVJZ0xTQlVhR1VnZEc5d0lHVnVaQ0J2WmlCMGFHVWdjbUZ1WjJVdVhHNWNkQ0FxSUVCeVpYUjFjbTV6SUh0dWRXMWlaWEo4S24wZ1ZHaGxJSEpsYzNWc2RHbHVaeUJ1ZFcxaVpYSWdhVzRnY21GdVoyVWdiM0lnZEdobElHMWxiV0psY2lCbWIzVnVaQ0JoZENCeVlXNWtiMjB1WEc1Y2RDQXFMMXh1WEc1Y2RDOHFLbHh1WEhRZ0tpQkhhWFpsYmlCaGJpQnBkR1Z5WVdKc1pUc2djSEp2ZG1sa1pYTWdZU0J5WVc1a2IyMGdhWFJsYlM1Y2JseDBJQ29nUUdGeVp5QjdZWEp5WVhsOUlGOWpiMnhzWldOMGFXOXVJQzBnVkdobElHbDBaWEpoWW14bExseHVYSFFnS2lCQWNtVjBkWEp1Y3lCN2JuVnRZbVZ5ZkNwOUlGUm9aU0J0WlcxaVpYSWdabTkxYm1RZ1lYUWdjbUZ1Wkc5dExseHVYSFFnS2k5Y2JseDBkR2hwY3k1eVlXNWtiMjBnUFNCbWRXNWpkR2x2YmlBb1gyTnZiR3hsWTNScGIyNWZjbUZ1WjJWQkxDQmZjbUZ1WjJWQ0tTQjdYRzVjZEZ4MGRtRnlJR2x1WkdWNExDQjJZV3c3WEc1Y2JseDBYSFJwYm1SbGVDQTlJRTFoZEdndVpteHZiM0lvVFdGMGFDNXlZVzVrYjIwb0tTcGZZMjlzYkdWamRHbHZibDl5WVc1blpVRXViR1Z1WjNSb0tUdGNibHh1WEhSY2RHbG1JQ2hoY21kMWJXVnVkSE11YkdWdVozUm9JRDA5UFNBeUtTQjdYRzVjZEZ4MFhIUjJZV3dnUFNCTllYUm9Mbkp2ZFc1a0tFMWhkR2d1Y21GdVpHOXRLQ2txWDNKaGJtZGxRaWs3WEc1Y2JseDBYSFJjZEhKbGRIVnliaUIyWVd3Z1BDQmZZMjlzYkdWamRHbHZibDl5WVc1blpVRWdQeUJmWTI5c2JHVmpkR2x2Ymw5eVlXNW5aVUVnT2lCMllXdzdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGFXWWdLR2x1WkdWNElEMDlQU0JmWTI5c2JHVmpkR2x2Ymw5eVlXNW5aVUV1YkdWdVozUm9LU0JwYm1SbGVDQTlJRjlqYjJ4c1pXTjBhVzl1WDNKaGJtZGxRUzVzWlc1bmRHZ3RNVHRjYmx4dVhIUmNkSEpsZEhWeWJpQmZZMjlzYkdWamRHbHZibDl5WVc1blpVRWdKaVlnWDJOdmJHeGxZM1JwYjI1ZmNtRnVaMlZCVzJsdVpHVjRYVHRjYmx4MGZUdGNibHh1WEhRdktpcGNibHgwSUNvZ1ZHRnJaU0J6ZEhKcGJtY2dZVzVrSUcxaGEyVnpJR2wwSUdSdmRDQnViM1JoZEdsdmJpQm1jbWxsYm1Sc2VTNWNibHgwSUNvZ1FHRnlaeUI3YzNSeWFXNW5mU0JmYVdRZ0xTQlVhR1VnYzNSeWFXNW5JSFJ2SUhSeVlXNXpabTl5YlM1Y2JseDBJQ29nUUdGeVp5QjdZbTl2YkdWaGJuMGdYMk5oYldWc1EyRnpaU0F0SUZSeVlXNXpabTl5YlNCM2FYUm9JR05oYldWc0lHTmhjMlV1WEc1Y2RDQXFJRUJ5WlhSMWNtNXpJSHR6ZEhKcGJtZDlYRzVjZENBcUwxeHVYSFIwYUdsekxuUnlZVzV6Wm05eWJVbGtJRDBnWm5WdVkzUnBiMjRnS0Y5cFpDd2dYMk5oYldWc1EyRnpaU2tnZTF4dVhIUmNkR2xtSUNoZmFXUWdKaVlnWDJOaGJXVnNRMkZ6WlNrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUY5cFpDNXlaWEJzWVdObEtDOWJMVnhjYzEwcktGdGNYSGRjWEdSZFB5a3ZaeXdnWm5WdVkzUnBiMjRnS0Y5dFlYUmphQ2tnZTF4dVhIUmNkRngwWEhSeVpYUjFjbTRnVW1WblJYaHdMaVF4TG5SdlZYQndaWEpEWVhObEtDazdYRzVjZEZ4MFhIUjlLVHRjYmx4MFhIUjlYRzVjYmx4MFhIUnlaWFIxY200Z1gybGtJQ1ltSUY5cFpDNXlaWEJzWVdObEtDOWJMVnhjYzEwckwyY3NJQ2RmSnlrN1hHNWNkSDA3WEc1Y2JseDBMeW9xWEc1Y2RDQXFJRlJsYzNRZ1lXeHNJR0Z5WjNWdFpXNTBjeUJtYjNJZ0lUMGdiblZzYkZ4dVhIUWdLaUJBY21WMGRYSnVJSHRpYjI5c1pXRnVmVnh1WEhRZ0tpOWNibHgwZEdocGN5NXBjMU5sZENBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmx4MFhIUnlaWFIxY200Z1cxMHVaWFpsY25rdVkyRnNiQ2hoY21kMWJXVnVkSE1zSUdaMWJtTjBhVzl1SUNoZllYSm5LU0I3SUhKbGRIVnliaUJmWVhKbklDRTlJRzUxYkd3Z2ZTazdYRzVjZEgwN1hHNWNibHgwTHlvcVhHNWNkQ0FxSUZCaGNuTmxjeUJoSUdadmNtMWhkR1ZrSUhOMGNtbHVaeUJoYm1RZ1kyRnNZM1ZzWVhSbGN5QnBkQ0JwYmlCdGFXeHNhWE5sWTI5dVpITXVYRzVjZENBcUlFQmhjbWNnZTNOMGNtbHVaMzBnWDNOdmRYSmpaU0F0SUZSb1pTQm1iM0p0WVhSbFpDQnpkSEpwYm1jZ1ptOXlJR05oYkdOMWJHRjBhVzl1SUdsdUlIUm9aU0J3WVhSMFpYSnVJQ2N4WkNBeGFDQXhiU0F4Y3ljdVhHNWNkQ0FxSUVCeVpYUjFjbTRnZTI1MWJXSmxjbjFjYmx4MElDb3ZYRzVjZEhSb2FYTXVkRzlOYVd4c2FYTmxZeUE5SUdaMWJtTjBhVzl1SUNoZmMyOTFjbU5sS1NCN1hHNWNkRngwZG1GeUlIUnZhMlZ1Y3l3Z2RHbHRaU3dnZFc1cGRITTdYRzVjYmx4MFhIUnBaaUFvSVY5emIzVnlZMlVwSUhKbGRIVnlianRjYmx4MFhIUnBaaUFvZEhsd1pXOW1JRjl6YjNWeVkyVWdQVDA5SUNkdWRXMWlaWEluS1NCeVpYUjFjbTRnWDNOdmRYSmpaVHRjYmx4dVhIUmNkSFJ2YTJWdWN5QTlJRjl6YjNWeVkyVXVjM0JzYVhRb0wxeGNjeXN2S1R0Y2JseDBYSFIwYVcxbElEMGdNRHRjYmx4MFhIUjFibWwwY3lBOUlIdGNibHgwWEhSY2RHUTZJREkwS2pZd0tqWXdLakV3TURBc1hHNWNkRngwWEhSb09pQTJNQ28yTUNveE1EQXdMRnh1WEhSY2RGeDBiVG9nTmpBcU1UQXdNQ3hjYmx4MFhIUmNkSE02SURFd01EQmNibHgwWEhSOU8xeHVYRzVjZEZ4MGRHOXJaVzV6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0Y5MGIydGxiaWtnZTF4dVhIUmNkRngwZG1GeUlIVnVhWFFzSUhaaGJIVmxPMXh1WEc1Y2RGeDBYSFIxYm1sMElEMGdLRjkwYjJ0bGJpNXRZWFJqYUNndlcyUm9iWE5kTHlrZ2ZId2dXMTBwV3pCZE8xeHVYRzVjZEZ4MFhIUnBaaUFvZFc1cGRDa2dlMXh1WEhSY2RGeDBYSFIyWVd4MVpTQTlJRTUxYldKbGNpaGZkRzlyWlc0dWMyeHBZMlVvTUN3Z0xURXBLVHRjYmx4MFhIUmNkRngwZEdsdFpTQXJQU0IyWVd4MVpTQXFJSFZ1YVhSelczVnVhWFJkTzF4dVhIUmNkRngwZlZ4dVhIUmNkRngwWEc1Y2RGeDBYSFJsYkhObElIdGNibHgwWEhSY2RGeDBkR2x0WlNBclBTQk9kVzFpWlhJb1gzUnZhMlZ1S1R0Y2JseDBYSFJjZEgxY2JseDBYSFI5S1R0Y2JseHVYSFJjZEhKbGRIVnliaUIwYVcxbE8xeHVYSFI5TzF4dVhHNWNkQzhxS2x4dVhIUWdLaUJPWldWa2N5QnVieUJwYm5SeWIyUjFZM1JwYjI1Y2JseDBJQ29nUUdGeVp5QjdhWFJsY21GaWJHVjlJRjlqYjJ4c1pXTjBhVzl1SUMwZ2FYUmxjbUZpYkdVdVhHNWNkQ0FxSUVCeVpYUjFjbTRnZTJGeWNtRjVmVnh1WEhRZ0tpOWNibHgwZEdocGN5NTBiMEZ5Y21GNUlEMGdablZ1WTNScGIyNGdLRjlqYjJ4c1pXTjBhVzl1S1NCN1hHNWNkRngwY21WMGRYSnVJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNXRZWEF1WTJGc2JDaGZZMjlzYkdWamRHbHZiaXdnWm5WdVkzUnBiMjRnS0drcElIc2djbVYwZFhKdUlHazdJSDBwTzF4dVhIUjlPMXh1WEc1Y2RDOHFLbHh1WEhRZ0tpQlNaWE52YkhabGN5QjBhR1VnZG1Gc2RXVWdhVzRnZEdobElHOWlhbVZqZENCaGRDQjBhR1VnWjJsMlpXNGdjR0YwYUM1Y2JseDBJQ29nUUdGeVp5QjdiMkpxWldOMGZTQmZiMkpxSUMwZ1ZHaGxJRzlpYW1WamRDQjBieUJ4ZFdWeWVTNWNibHgwSUNvZ1FHRnlaeUI3YzNSeWFXNW5mU0JmY0dGMGFDQXRJRlJvWlNCd1lYUm9JSFJ2SUhSb1pTQmtaWE5wY21Wa0lISmxabVZ5Wlc1alpTNWNibHgwSUNvZ1FISmxkSFZ5Ym5NZ2V5cDlJRlJvWlNCeVpYTjFiSFJwYm1jZ2NtVm1aWEpsYm1ObElIWmhiSFZsTGx4dVhIUWdLaUJBWlhoaGJYQnNaVnh1WEhRZ0tpQjJZWElnZFhObGNpQTlJSHRjYmx4MElDb2dJQ0J1WVcxbE9pQW5TbTlvYmljc1hHNWNkQ0FxSUNBZ1ptRnRhV3g1T2lCN1hHNWNkQ0FxWEhRZ0lDQm5kV0Z5WkdsaGJuTTZJSHRFWVhacFpIMHNJQzh2SUhCeWIzQmxjblI1SUdOdmRXeGtJR0psSUdGdUlHRnljbUY1SUc5bUlHMTFiSFJwY0d4bElHZDFZWEprYVdGdWN5NWNibHgwSUNvZ0lDQWdJSE5wWW14cGJtZHpPaUJiZTBwaGJtVjlMQ0I3VkdodmJXRnpmVjBnTHk4Z1kyOXNiR1ZqZEdsdmJpQnZaaUIxYzJWeUlHOWlhbVZqZEhNdVhHNWNkQ0FxSUNBZ2ZWeHVYSFFnS2lCOU8xeHVYSFFnS2x4dVhIUWdLaUJ3YkM1MWRHbHNMbkpsYzI5c2RtVlFZWFJvS0hWelpYSXNJQ2RtWVcxcGJIa3VjMnhwWW14cGJtZHpXekpkTG01aGJXVW5LVHRjYmx4MElDb2dMeThnVFdGMFkyaGxjeUIwYUdVZ1lHZDFZWEprYVdGdWMyQWdjSEp2Y0dWeWVTQnBaaUJnWjNWaGNtUnBZVzV6V3pCZFlDQnBjeUIxYm1SbFptbHVaV1FnZDJobGJpQmdQMkFnYVhNZ2RYTmxaQzVjYmx4MElDb2djR3d1ZFhScGJDNXlaWE52YkhabFVHRjBhQ2gxYzJWeUxDQW5abUZ0YVd4NUxtZDFZWEprYVdGdWMxc3dYVDh1Ym1GdFpTY3BPeUJjYmx4MElDb3ZYRzVjZEhSb2FYTXVjbVZ6YjJ4MlpWQmhkR2dnUFNCbWRXNWpkR2x2YmlBb1gyOWlhaXdnWDNCaGRHZ3BJSHRjYmx4MFhIUjJZWElnY0dGMGFDd2diMkpxTENCcExDQnVZVzFsTENCcGJtUmxlQ3dnZEdWemRFRnljbUY1TzF4dVhHNWNkRngwY0dGMGFDQTlJRjl3WVhSb0xuTndiR2wwS0NjdUp5azdYRzVjZEZ4MGIySnFJRDBnWDI5aWFqdGNibHgwWEhScElEMGdNRHRjYmx4dVhIUmNkSGRvYVd4bElDaHZZbW9wSUh0Y2JseDBYSFJjZEhSbGMzUkJjbkpoZVNBOUlDZ3ZYRncvSkM4cExuUmxjM1FvY0dGMGFGdHBYU2s3WEc1Y2RGeDBYSFJwYm1SbGVDQTlJQ2h3WVhSb1cybGRMbTFoZEdOb0tDOWNYRnNvWEZ4a0t5bGNYRjB2S1NCOGZDQmJYU2xiTVYwZ2ZId2dMVEU3WEc1Y2RGeDBYSFJ1WVcxbElEMGdmbWx1WkdWNElEOGdjR0YwYUZ0cFhTNXpiR2xqWlNnd0xDQndZWFJvVzJsZExtbHVaR1Y0VDJZb0oxc25LU2tnT2lCd1lYUm9XMmxkTzF4dVhIUmNkRngwYjJKcUlEMGdiMkpxVzI1aGJXVmRPMXh1WEc1Y2RGeDBYSFJwWmlBb2ZtbHVaR1Y0SUNZbUlHOWlhaWtnZTF4dVhIUmNkRngwWEhSdlltb2dQU0IwWlhOMFFYSnlZWGtnUHlBb2IySnFXMmx1WkdWNFhTQjhmQ0J2WW1vcElEb2diMkpxVzJsdVpHVjRYVHRjYmx4MFhIUmNkSDFjYmx4MFhIUmNkRnh1WEhSY2RGeDBhU3M5TVR0Y2JseHVYSFJjZEZ4MGFXWWdLSEJoZEdndWJHVnVaM1JvSUQwOVBTQnBLU0JpY21WaGF6dGNibHgwWEhSOVhHNWNibHgwWEhSeVpYUjFjbTRnYjJKcU8xeHVYSFI5TzF4dVhHNWNkSFJvYVhNdVlYTnphV2R1VW1WbUlEMGdablZ1WTNScGIyNGdLRjl2WW1vc0lGOXVZVzFsTENCZmNtVm1LU0I3WEc1Y2RGeDBkbUZ5SUc1aGJXVTdYRzVjYmx4MFhIUnVZVzFsSUQwZ2RYUnBiQzUwY21GdWMyWnZjbTFKWkNoZmJtRnRaU3dnZEhKMVpTazdYRzVjYmx4MFhIUnBaaUFvWDI5aWFsdHVZVzFsWFNrZ2UxeHVYSFJjZEZ4MGFXWWdLQ0ZmYjJKcVcyNWhiV1ZkTGw5ZmNtVm1RMjlzYkdOMGFXOXVYMThwSUh0Y2JseDBYSFJjZEZ4MFgyOWlhbHR1WVcxbFhTQTlJRnRmYjJKcVcyNWhiV1ZkWFR0Y2JseHVYSFJjZEZ4MFhIUlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWDI5aWFsdHVZVzFsWFN3Z0oxOWZjbVZtUTI5c2JHTjBhVzl1WDE4bkxDQjdYRzVjZEZ4MFhIUmNkRngwZG1Gc2RXVTZJSFJ5ZFdVc1hHNWNkRngwWEhSY2RGeDBaVzUxYldWeVlXSnNaVG9nWm1Gc2MyVXNYRzVjZEZ4MFhIUmNkRngwZDNKcGRHVmhZbXhsT2lCbVlXeHpaU3hjYmx4MFhIUmNkRngwWEhSamIyNW1hV2QxY21WaFlteGxPaUJtWVd4elpWeHVYSFJjZEZ4MFhIUjlLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUmNkRnh1WEhSY2RGeDBYMjlpYWx0dVlXMWxYUzV3ZFhOb0tGOXlaV1lwTzF4dVhIUmNkSDFjYmx4dVhIUmNkR1ZzYzJVZ2UxeHVYSFJjZEZ4MFgyOWlhbHR1WVcxbFhTQTlJRjl5WldZN1hHNWNkRngwZlZ4dVhIUjlPMXh1WEc1OUtUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdkWFJwYkR0Y2JseHVYRzVjYmk4cUtpQlhSVUpRUVVOTElFWlBUMVJGVWlBcUtseHVJQ29xSUM0dmMyOTFjbU5sTDNWMGFXd3Vhbk5jYmlBcUtpOGlYU3dpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0sXG4vKiAxMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0ZXZhbChcInZhciBfT2JqZWN0JGNyZWF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpWydkZWZhdWx0J107XFxuXFxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpWydkZWZhdWx0J107XFxuXFxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcXG4vKipcXG4gKiBCYXNlIG9iamVjdCB0eXBlIGZvciAnY2xhc3NlcycgaW1wbGVtZW50aW5nIG1ldGhvZHMgZm9yIGV4dGVudGlvbiBhbmQgc3VwZXIgY2FsbGJhY2tzLlxcbiAqIEBtb2R1bGVcXG4gKiBAcmVxdWlyZXMgbW9kdWxlOnBsYXl+cGwudXRpbFxcbiAqL1xcblxcbnZhciBfdXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xcblxcbnZhciBfdXRpbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91dGlsKTtcXG5cXG4vKipcXG4gKiA8c3BhbiBjbGFzcz1cXFwiaW1wb3J0YW50XFxcIj5OT1RFOjwvc3Bhbj4gVGhpcyBpcyBOT1QgYSBjb25zdHJ1Y3Rvci4gdXNlIGBCYXNpYy5jcmVhdGUoKWAgdG8gZ2V0IGEgbmV3IGluc3RhbmNlLlxcbiAqIEBjbGFzc2Rlc2MgVGhlIGJhc2UgdHlwZSBmb3IgYWxsIG9iamVjdHMgd2hpY2ggd2lsbCBhY3QgYXMgcHJvdG90eXBlcy5cXG4gKiBAY2xhc3NcXG4gKi9cXG52YXIgQmFzaWMgPSB7XFxuXFx0LyoqXFxuICAqIE9iamVjdHMgd2l0aCB0aGlzIGFzIGFuIG93biBwcm9wZXJ0eSB3aWxsIGJlIGlkZW50aWZpZWQgYXMgdGhlIHJvb3Qgb2JqZWN0LlxcbiAgKiBAcmVhZG9ubHlcXG4gICogQGRlZmF1bHRcXG4gICovXFxuXFx0YmFzZVR5cGU6ICdUWVBFX0JBU0lDJyxcXG5cXG5cXHQvKipcXG4gICogQ3JlYXRlcyBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgY3VycmVudCBvYmplY3QgYXMgaXRzIHByb3RvdHlwZS5cXG4gICogQGluc3RhbmNlXFxuICAqIEByZXR1cm5zIHtCYXNpY30gVGhlIG5ldyBpbnN0YW5jZS5cXG4gICovXFxuXFx0Y3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XFxuXFx0XFx0cmV0dXJuIF9PYmplY3QkY3JlYXRlKHRoaXMpO1xcblxcdH0sXFxuXFxuXFx0LyoqXFxuICAqIENyZWF0ZXMgYSBuZXcgb2JqZWN0IHVzaW5nIGEgY29uc3RydWN0b3IgZnVuY3Rpb24gb3Igb2JqZWN0IHdpdGggdGhlIGN1cnJlbnQgb2JqZWN0IGFzIGl0cyBwcm90b3R5cGUuXFxuICAqIEBpbnN0YW5jZVxcbiAgKiBAYXJnIHtGdW5jdGlvbnxPYmplY3R9IF9pbXBsZW1lbnRhdGlvbiAtIFRoZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgbmV3IHR5cGUgYXMgZWl0aGVyIGEgY29uc3RydWN0b3IgZnVuY3Rpb24gb3Igb2JqZWN0IHRvIG1peGluLlxcbiAgKiBAcmV0dXJucyB7QmFzaWN9IFRoZSBuZXcgaW5zdGFuY2UuXFxuICAqXFxuICAqIEB0b2RvIGRlZmluZSBjb25zdHJ1Y3RvciBwcm9wZXJ0eVxcbiAgKi9cXG5cXHRleHRlbmQ6IGZ1bmN0aW9uIGV4dGVuZChfaW1wbGVtZW50YXRpb24pIHtcXG5cXHRcXHR2YXIgaW5zdGFuY2U7XFxuXFxuXFx0XFx0aWYgKCFfaW1wbGVtZW50YXRpb24pIHJldHVybiBudWxsO1xcblxcblxcdFxcdHN3aXRjaCAodHlwZW9mIF9pbXBsZW1lbnRhdGlvbikge1xcblxcdFxcdFxcdGNhc2UgJ2Z1bmN0aW9uJzpcXG5cXHRcXHRcXHRcXHRfaW1wbGVtZW50YXRpb24ucHJvdG90eXBlID0gdGhpcztcXG5cXHRcXHRcXHRcXHRpbnN0YW5jZSA9IG5ldyBfaW1wbGVtZW50YXRpb24oKTtcXG5cXHRcXHRcXHRcXHRicmVhaztcXG5cXG5cXHRcXHRcXHRjYXNlICdvYmplY3QnOlxcblxcdFxcdFxcdFxcdGluc3RhbmNlID0gdGhpcy5jcmVhdGUoKTtcXG5cXHRcXHRcXHRcXHRpbnN0YW5jZS5taXhpbihfaW1wbGVtZW50YXRpb24pO1xcblxcdFxcdFxcdFxcdGJyZWFrO1xcblxcblxcdFxcdFxcdGRlZmF1bHQ6XFxuXFx0XFx0XFx0XFx0Y29uc29sZS5lcnJvcignVHlwZUVycm9yOiBJbnZhbGlkIHR5cGUgZ2l2ZW4gZm9yIG9iamVjdCBleHRlbnRpb24uJywgdHlwZW9mIF9pbXBsZW1lbnRhdGlvbik7XFxuXFx0XFx0fVxcblxcblxcdFxcdHJldHVybiBpbnN0YW5jZTtcXG5cXHR9LFxcblxcblxcdC8qKlxcbiAgKiBBY2NlcHRzIG9uZSBvciBtb3JlIG9iamVjdHMgdG8gY29tYmluZSB0aGVpciBvd24gcHJvcGVydGllcyB0byB0aGUgaW5zdGFuY2UuXFxuICAqIEBpbnN0YW5jZVxcbiAgKiBAYXJnIHtvYmplY3R9IF9zb3VyY2VzLi4uIC0gVGhlIG9iamVjdChzKSB0byBqb2luIHdpdGggdGhlIGluc3RhbmNlLlxcbiAgKiBAcmV0dXJucyB0aGlzXFxuICAqL1xcblxcdG1peGluOiBmdW5jdGlvbiBtaXhpbigpIHtcXG5cXHRcXHRyZXR1cm4gX3V0aWwyWydkZWZhdWx0J10ubWl4aW4uYXBwbHkobnVsbCwgW3RoaXNdLmNvbmNhdChbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCkpKTtcXG5cXHR9LFxcblxcblxcdC8qKlxcbiAgKiBNYXRjaGVzIHRoZSBuYW1lIG9mIHRoZSBrZXkgd2hpY2ggcmVmZXJlbmNlcyB0aGUgZ2l2ZW4gcG9pbnRlciBpbnNpZGUgdGhlIGluc3RhbmNlLiBMaWtlIGluZGV4T2YoKSBmb3Igb2JqZWN0cy5cXG4gICogQGluc3RhbmNlXFxuICAqIEBhcmcgeyp9IF9tZW1iZXIgLSBUaGUgcmVmZXJlbmNlIHdoaWNoIGlzIGV4cGVjdGVkIHRvIGJlIGluIHRoZSBvYmplY3QgYXMgYSBwcm9wZXJ0eS5cXG4gICogQHJldHVybnMge3N0cmluZ30gVGhlIG5hbWUgb2YgdGhlIGtleSBpbiB0aGUgb2JqZWN0IG1hdGNoaW5nICdfbWVtYmVyJy5cXG4gICovXFxuXFx0a2V5T2Y6IGZ1bmN0aW9uIGtleU9mKF9tZW1iZXIpIHtcXG5cXHRcXHRyZXR1cm4gX3V0aWwyWydkZWZhdWx0J10ua2V5T2YodGhpcywgX21lbWJlcik7XFxuXFx0fSxcXG5cXG5cXHQvKipcXG4gICogUGVyZm9ybXMgYSBzdXBlciBjYWxsYmFjayBvZiB0aGUgZnVuY3Rpb24gd2hpY2ggY2FsbGVkIGl0LiBBbGxvd2luZyB5b3UgdG8gc3RpbGwgaW52b2tlIGEgbWV0aG9kIHdoaWNoIHdhcyBvdmVycmlkZGVuLlxcbiAgKiBAaW5zdGFuY2VcXG4gICogQGFyZyB7Kn0gX2FyZ3MuLi4gLSBXaGF0ZXZlciBhbW91bnQgb2YgYXJndW1lbnRzIHRoZSBjYWxsZXIgdGFrZXMuXFxuICAqIEByZXR1cm5zIHsqfSBXaGF0ZXZlciB0aGUgY2FsbGVyIHJldHVybnMuXFxuICAqL1xcblxcdHByb3RvOiBmdW5jdGlvbiBwcm90bygpIHtcXG5cXHRcXHR2YXIgbWV0aG9kLCBuYW1lLCBvd25lciwgcHJvdG90eXBlO1xcblxcblxcdFxcdC8vIEdldCB0aGUgZnVuY3Rpb24gd2hpY2ggaW52b2tlZCBwcm90bygpIGluIHRoZSBjYWxsIHN0YWNrLlxcblxcdFxcdC8vIElmIHRoZSBjYWxsZXIgaXMgYSBiZWhhdmlvciB0aGVuIHdlIHJldHJpZXZlIHRoZSBtZXRob2QuXFxuXFx0XFx0bWV0aG9kID0gdGhpcy5wcm90by5jYWxsZXIubWV0aG9kIHx8IHRoaXMucHJvdG8uY2FsbGVyO1xcblxcblxcdFxcdC8vIENoZWNrIHRvIHNlZSBpZiAndGhpcycgb3ducyB0aGUgbWV0aG9kLlxcblxcdFxcdC8vIE5PVEU6IFdlIG1heSB3YW50IHRvIG1vdmUgdGhpcyBsb2dpYyBpbnRvIGdldE93bmVyKCkuXFxuXFx0XFx0aWYgKG5hbWUgPSB0aGlzLmtleU9mKG1ldGhvZCkpIHtcXG5cXHRcXHRcXHRwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcyk7XFxuXFx0XFx0fVxcblxcblxcdFxcdC8vIE90aGVyd2lzZSBmaW5kIHRoZSBvYmplY3Qgd2hpY2ggb3ducyB0aGUgY2FsbGVyIGZ1bmN0aW9uLlxcblxcdFxcdGVsc2Uge1xcblxcdFxcdFxcdFxcdG93bmVyID0gX3V0aWwyWydkZWZhdWx0J10uZ2V0T3duZXIodGhpcywgbWV0aG9kKTtcXG5cXHRcXHRcXHRcXHRuYW1lID0gb3duZXIubmFtZTtcXG5cXHRcXHRcXHRcXHRwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob3duZXIub2JqZWN0KTtcXG5cXHRcXHRcXHR9XFxuXFxuXFx0XFx0bWV0aG9kID0gcHJvdG90eXBlW25hbWVdO1xcblxcblxcdFxcdGlmICghbWV0aG9kKSB7XFxuXFx0XFx0XFx0Y29uc29sZS5lcnJvcignUmVmZXJlbmNlRXJyb3I6IFVuYWJsZSB0byBsb2NhdGUgcHJvdG90eXBlIG1ldGhvZC4nLCB0aGlzLnByb3RvLmNhbGxlcik7XFxuXFx0XFx0XFx0ZGVidWdnZXI7XFxuXFx0XFx0XFx0cmV0dXJuIG51bGw7XFxuXFx0XFx0fVxcblxcblxcdFxcdHJldHVybiBtZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG5cXHR9LFxcblxcblxcdC8qKlxcbiAgKiBQZXJmb3JtcyBhIHN1cGVyIGNhbGxiYWNrIG9mIHRoZSBmdW5jdGlvbiB3aGljaCBjYWxsZWQgaXQuIFVubGlrZSBgcHJvdG8oKWAgd2hpY2ggbG9va3MgZm9yIHRoZSBvdmVyaWRkZW4gbWV0aG9kLCBzdXAgbG9va3MgZm9yIHRoZSBiYXNlIGNsYXNzJyBpbXBsZW1lbnRhdGlvbi5cXG4gICogQGluc3RhbmNlXFxuICAqIEBhcmcgeyp9IF9hcmdzLi4uIC0gV2hhdGV2ZXIgYW1vdW50IG9mIGFyZ3VtZW50cyB0aGUgY2FsbGVyIHRha2VzLlxcbiAgKiBAcmV0dXJucyB7Kn0gV2hhdGV2ZXIgdGhlIGNhbGxlciByZXR1cm5zLlxcbiAgKi9cXG5cXHRzdXA6IGZ1bmN0aW9uIHN1cCgpIHtcXG5cXHRcXHR2YXIgbWV0aG9kLCBuYW1lLCBvd25lciwgcHJvdG90eXBlO1xcblxcblxcdFxcdC8vIEdldCB0aGUgZnVuY3Rpb24gd2hpY2ggaW52b2tlZCBzdXAoKSBpbiB0aGUgY2FsbCBzdGFjay5cXG5cXHRcXHRtZXRob2QgPSB0aGlzLnN1cC5jYWxsZXI7XFxuXFx0XFx0b3duZXIgPSBfdXRpbDJbJ2RlZmF1bHQnXS5nZXRPd25lcih0aGlzLCB0aGlzLmJhc2VUeXBlKTtcXG5cXHRcXHRwcm90b3R5cGUgPSBvd25lci5vYmplY3Q7XFxuXFx0XFx0bmFtZSA9IHRoaXMua2V5T2YobWV0aG9kKTtcXG5cXG5cXHRcXHQvLyBDaGVjayB0byBzZWUgaWYgJ3RoaXMnIG93bnMgdGhlIG1ldGhvZC5cXG5cXHRcXHQvLyBOT1RFOiBXZSBtYXkgd2FudCB0byBtb3ZlIHRoaXMgbG9naWMgaW50byBnZXRPd25lcigpLlxcblxcdFxcdC8vXFxuXFx0XFx0aWYgKCFuYW1lKSB7XFxuXFx0XFx0XFx0b3duZXIgPSBfdXRpbDJbJ2RlZmF1bHQnXS5nZXRPd25lcih0aGlzLCBtZXRob2QpO1xcblxcdFxcdFxcdG5hbWUgPSBvd25lci5uYW1lO1xcblxcdFxcdH1cXG5cXG5cXHRcXHRtZXRob2QgPSBwcm90b3R5cGVbbmFtZV07XFxuXFxuXFx0XFx0aWYgKCFtZXRob2QpIHtcXG5cXHRcXHRcXHRjb25zb2xlLmVycm9yKCdSZWZlcmVuY2VFcnJvcjogVW5hYmxlIHRvIGxvY2F0ZSBwcm90b3R5cGUgbWV0aG9kLicsIHRoaXMuc3VwLmNhbGxlcik7XFxuXFx0XFx0XFx0cmV0dXJuIG51bGw7XFxuXFx0XFx0fVxcblxcblxcdFxcdHJldHVybiBtZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG5cXHR9LFxcblxcblxcdC8qKlxcbiAgKiBQcm92aWRlcyB0aGUgb2JqZWN0IHR5cGUuXFxuICAqIEBpbnN0YW5jZVxcbiAgKi9cXG5cXHR0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XFxuXFx0XFx0dmFyIHR5cGU7XFxuXFxuXFx0XFx0dHlwZSA9IHRoaXMuYmFzZVR5cGUucmVwbGFjZSgnVFlQRV8nLCAnJyk7XFxuXFx0XFx0dHlwZSA9IHR5cGUuc2xpY2UoMCwgMSkgKyB0eXBlLnNsaWNlKDEpLnRvTG93ZXJDYXNlKCk7XFxuXFxuXFx0XFx0cmV0dXJuICdbb2JqZWN0ICcgKyB0eXBlICsgJ10nO1xcblxcdH1cXG5cXG59O1xcblxcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IEJhc2ljO1xcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOy8vQCBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emIzVnlZMlV2ZEhsd1pYTXZRbUZ6YVdNdWFuTS9aR0UxTUNKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenM3T3p0blEwRkxhVUlzUlVGQlRUczdPenM3T3pzN08wRkJUM1pDTEVsQlFVa3NTMEZCU3l4SFFVRkhPenM3T3pzN1FVRk5XQ3hUUVVGUkxFVkJRVVVzV1VGQldUczdPenM3T3p0QlFVOTBRaXhQUVVGTkxFVkJRVVVzYTBKQlFWazdRVUZEYmtJc1UwRkJUeXhsUVVGakxFbEJRVWtzUTBGQlF5eERRVUZETzBWQlF6TkNPenM3T3pzN096czdPMEZCVlVRc1QwRkJUU3hGUVVGRkxHZENRVUZWTEdWQlFXVXNSVUZCUlR0QlFVTnNReXhOUVVGSkxGRkJRVkVzUTBGQlF6czdRVUZGWWl4TlFVRkpMRU5CUVVNc1pVRkJaU3hGUVVGRkxFOUJRVThzU1VGQlNTeERRVUZET3p0QlFVVnNReXhWUVVGUkxFOUJRVThzWlVGQlpUdEJRVU0zUWl4UlFVRkxMRlZCUVZVN1FVRkRaQ3h0UWtGQlpTeERRVUZETEZOQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNN1FVRkRha01zV1VGQlVTeEhRVUZITEVsQlFVa3NaVUZCWlN4RlFVRkZMRU5CUVVNN1FVRkRha01zVlVGQlRUczdRVUZGVUN4UlFVRkxMRkZCUVZFN1FVRkRXaXhaUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRPMEZCUTNwQ0xGbEJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNN1FVRkRhRU1zVlVGQlRUczdRVUZGVUR0QlFVTkRMRmRCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zY1VSQlFYRkVMRVZCUVVVc1QwRkJUeXhsUVVGbExFTkJRVU1zUTBGQlF6dEJRVUZCTEVkQlF6bEdPenRCUVVWRUxGTkJRVThzVVVGQlVTeERRVUZETzBWQlEyaENPenM3T3pzN096dEJRVkZFTEUxQlFVc3NSVUZCUlN4cFFrRkJXVHRCUVVOc1FpeFRRVUZQTEd0Q1FVRkxMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdSVUZETVVVN096czdPenM3TzBGQlVVUXNUVUZCU3l4RlFVRkZMR1ZCUVZVc1QwRkJUeXhGUVVGRk8wRkJRM3BDTEZOQlFVOHNhMEpCUVVzc1MwRkJTeXhEUVVGRExFbEJRVWtzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXp0RlFVTnFRenM3T3pzN096czdRVUZSUkN4TlFVRkxMRVZCUVVVc2FVSkJRVms3UVVGRGJFSXNUVUZCU1N4TlFVRk5MRVZCUVVVc1NVRkJTU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFRRVUZUTEVOQlFVTTdPenM3UVVGSmJrTXNVVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNTVUZCU1N4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF6czdPenRCUVVsMlJDeE5RVUZKTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eEZRVUZGTzBGQlF6bENMRmxCUVZNc1IwRkJSeXhOUVVGTkxFTkJRVU1zWTBGQll5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMGRCUTNoRE96czdUMEZIU1R0QlFVTktMRk5CUVVzc1IwRkJSeXhyUWtGQlN5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRE8wRkJRM0JETEZGQlFVa3NSMEZCUnl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRE8wRkJRMnhDTEdGQlFWTXNSMEZCUnl4TlFVRk5MRU5CUVVNc1kwRkJZeXhEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0SlFVTm9SRHM3UVVGRlJDeFJRVUZOTEVkQlFVY3NVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE96dEJRVVY2UWl4TlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRk8wRkJRMW9zVlVGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4dlJFRkJiMFFzUlVGQlJTeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8wRkJRM1pHTEZsQlFWTTdRVUZEVkN4VlFVRlBMRWxCUVVrc1EwRkJRenRIUVVOYU96dEJRVVZFTEZOQlFVOHNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFVkJRVVVzVTBGQlV5eERRVUZETEVOQlFVTTdSVUZEY2tNN096czdPenM3TzBGQlVVUXNTVUZCUnl4RlFVRkZMR1ZCUVZrN1FVRkRhRUlzVFVGQlNTeE5RVUZOTEVWQlFVVXNTVUZCU1N4RlFVRkZMRXRCUVVzc1JVRkJSU3hUUVVGVExFTkJRVU03T3p0QlFVZHVReXhSUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4TlFVRk5MRU5CUVVNN1FVRkRla0lzVDBGQlN5eEhRVUZITEd0Q1FVRkxMRkZCUVZFc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMEZCUXpORExGZEJRVk1zUjBGQlJ5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRPMEZCUTNwQ0xFMUJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE96czdPenRCUVVzeFFpeE5RVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZPMEZCUTFZc1VVRkJTeXhIUVVGSExHdENRVUZMTEZGQlFWRXNRMEZCUXl4SlFVRkpMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03UVVGRGNFTXNUMEZCU1N4SFFVRkhMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU03UjBGRGJFSTdPMEZCUlVRc1VVRkJUU3hIUVVGSExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXpzN1FVRkZla0lzVFVGQlNTeERRVUZETEUxQlFVMHNSVUZCUlR0QlFVTmFMRlZCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zYjBSQlFXOUVMRVZCUVVVc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0QlFVTnlSaXhWUVVGUExFbEJRVWtzUTBGQlF6dEhRVU5hT3p0QlFVVkVMRk5CUVU4c1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN1JVRkRja003T3pzN096dEJRVTFFTEZOQlFWRXNSVUZCUlN4dlFrRkJXVHRCUVVOeVFpeE5RVUZKTEVsQlFVa3NRMEZCUXpzN1FVRkZWQ3hOUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1QwRkJUeXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETzBGQlF6RkRMRTFCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNSVUZCUXl4RFFVRkRMRU5CUVVNc1IwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRmRCUVZjc1JVRkJSU3hEUVVGRE96dEJRVVZ1UkN4VFFVRlBMRlZCUVZVc1IwRkJReXhKUVVGSkxFZEJRVU1zUjBGQlJ5eERRVUZETzBWQlF6TkNPenREUVVWRUxFTkJRVU03TzNGQ1FVVmhMRXRCUVVzaUxDSm1hV3hsSWpvaU1URXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpcGNiaUFxSUVKaGMyVWdiMkpxWldOMElIUjVjR1VnWm05eUlDZGpiR0Z6YzJWekp5QnBiWEJzWlcxbGJuUnBibWNnYldWMGFHOWtjeUJtYjNJZ1pYaDBaVzUwYVc5dUlHRnVaQ0J6ZFhCbGNpQmpZV3hzWW1GamEzTXVYRzRnS2lCQWJXOWtkV3hsWEc0Z0tpQkFjbVZ4ZFdseVpYTWdiVzlrZFd4bE9uQnNZWGwrY0d3dWRYUnBiRnh1SUNvdlhHNXBiWEJ2Y25RZ2RYUnBiQ0JtY205dElDZDFkR2xzSnp0Y2JseHVMeW9xWEc0Z0tpQThjM0JoYmlCamJHRnpjejFjSW1sdGNHOXlkR0Z1ZEZ3aVBrNVBWRVU2UEM5emNHRnVQaUJVYUdseklHbHpJRTVQVkNCaElHTnZibk4wY25WamRHOXlMaUIxYzJVZ1lFSmhjMmxqTG1OeVpXRjBaU2dwWUNCMGJ5Qm5aWFFnWVNCdVpYY2dhVzV6ZEdGdVkyVXVYRzRnS2lCQVkyeGhjM05rWlhOaklGUm9aU0JpWVhObElIUjVjR1VnWm05eUlHRnNiQ0J2WW1wbFkzUnpJSGRvYVdOb0lIZHBiR3dnWVdOMElHRnpJSEJ5YjNSdmRIbHdaWE11WEc0Z0tpQkFZMnhoYzNOY2JpQXFMMXh1ZG1GeUlFSmhjMmxqSUQwZ2UxeHVYSFF2S2lwY2JseDBJQ29nVDJKcVpXTjBjeUIzYVhSb0lIUm9hWE1nWVhNZ1lXNGdiM2R1SUhCeWIzQmxjblI1SUhkcGJHd2dZbVVnYVdSbGJuUnBabWxsWkNCaGN5QjBhR1VnY205dmRDQnZZbXBsWTNRdVhHNWNkQ0FxSUVCeVpXRmtiMjVzZVZ4dVhIUWdLaUJBWkdWbVlYVnNkRnh1WEhRZ0tpOWNibHgwWW1GelpWUjVjR1U2SUNkVVdWQkZYMEpCVTBsREp5eGNibHgwWEc1Y2RDOHFLbHh1WEhRZ0tpQkRjbVZoZEdWeklHRWdibVYzSUc5aWFtVmpkQ0IzYVhSb0lIUm9aU0JqZFhKeVpXNTBJRzlpYW1WamRDQmhjeUJwZEhNZ2NISnZkRzkwZVhCbExseHVYSFFnS2lCQWFXNXpkR0Z1WTJWY2JseDBJQ29nUUhKbGRIVnlibk1nZTBKaGMybGpmU0JVYUdVZ2JtVjNJR2x1YzNSaGJtTmxMbHh1WEhRZ0tpOWNibHgwWTNKbFlYUmxPaUJtZFc1amRHbHZiaUFvS1NCN1hHNWNkRngwY21WMGRYSnVJRTlpYW1WamRDNWpjbVZoZEdVb2RHaHBjeWs3WEc1Y2RIMHNYRzVjYmx4MEx5b3FYRzVjZENBcUlFTnlaV0YwWlhNZ1lTQnVaWGNnYjJKcVpXTjBJSFZ6YVc1bklHRWdZMjl1YzNSeWRXTjBiM0lnWm5WdVkzUnBiMjRnYjNJZ2IySnFaV04wSUhkcGRHZ2dkR2hsSUdOMWNuSmxiblFnYjJKcVpXTjBJR0Z6SUdsMGN5QndjbTkwYjNSNWNHVXVYRzVjZENBcUlFQnBibk4wWVc1alpWeHVYSFFnS2lCQVlYSm5JSHRHZFc1amRHbHZibnhQWW1wbFkzUjlJRjlwYlhCc1pXMWxiblJoZEdsdmJpQXRJRlJvWlNCcGJYQnNaVzFsYm5SaGRHbHZiaUJ2WmlCMGFHVWdibVYzSUhSNWNHVWdZWE1nWldsMGFHVnlJR0VnWTI5dWMzUnlkV04wYjNJZ1puVnVZM1JwYjI0Z2IzSWdiMkpxWldOMElIUnZJRzFwZUdsdUxseHVYSFFnS2lCQWNtVjBkWEp1Y3lCN1FtRnphV045SUZSb1pTQnVaWGNnYVc1emRHRnVZMlV1WEc1Y2RDQXFYRzVjZENBcUlFQjBiMlJ2SUdSbFptbHVaU0JqYjI1emRISjFZM1J2Y2lCd2NtOXdaWEowZVZ4dVhIUWdLaTljYmx4MFpYaDBaVzVrT2lCbWRXNWpkR2x2YmlBb1gybHRjR3hsYldWdWRHRjBhVzl1S1NCN1hHNWNkRngwZG1GeUlHbHVjM1JoYm1ObE8xeHVYRzVjZEZ4MGFXWWdLQ0ZmYVcxd2JHVnRaVzUwWVhScGIyNHBJSEpsZEhWeWJpQnVkV3hzTzF4dVhHNWNkRngwYzNkcGRHTm9JQ2gwZVhCbGIyWWdYMmx0Y0d4bGJXVnVkR0YwYVc5dUtTQjdYRzVjZEZ4MFhIUmpZWE5sSUNkbWRXNWpkR2x2YmljNlhHNWNkRngwWEhSY2RGOXBiWEJzWlcxbGJuUmhkR2x2Ymk1d2NtOTBiM1I1Y0dVZ1BTQjBhR2x6TzF4dVhIUmNkRngwWEhScGJuTjBZVzVqWlNBOUlHNWxkeUJmYVcxd2JHVnRaVzUwWVhScGIyNG9LVHRjYmx4MFhIUmNkRngwWW5KbFlXczdYRzVjYmx4MFhIUmNkR05oYzJVZ0oyOWlhbVZqZENjNlhHNWNkRngwWEhSY2RHbHVjM1JoYm1ObElEMGdkR2hwY3k1amNtVmhkR1VvS1R0Y2JseDBYSFJjZEZ4MGFXNXpkR0Z1WTJVdWJXbDRhVzRvWDJsdGNHeGxiV1Z1ZEdGMGFXOXVLVHRjYmx4MFhIUmNkRngwWW5KbFlXczdYRzVjYmx4MFhIUmNkR1JsWm1GMWJIUTZYRzVjZEZ4MFhIUmNkR052Ym5OdmJHVXVaWEp5YjNJb0oxUjVjR1ZGY25KdmNqb2dTVzUyWVd4cFpDQjBlWEJsSUdkcGRtVnVJR1p2Y2lCdlltcGxZM1FnWlhoMFpXNTBhVzl1TGljc0lIUjVjR1Z2WmlCZmFXMXdiR1Z0Wlc1MFlYUnBiMjRwTzF4dVhIUmNkSDFjYmx4dVhIUmNkSEpsZEhWeWJpQnBibk4wWVc1alpUdGNibHgwZlN4Y2JseHVYSFF2S2lwY2JseDBJQ29nUVdOalpYQjBjeUJ2Ym1VZ2IzSWdiVzl5WlNCdlltcGxZM1J6SUhSdklHTnZiV0pwYm1VZ2RHaGxhWElnYjNkdUlIQnliM0JsY25ScFpYTWdkRzhnZEdobElHbHVjM1JoYm1ObExseHVYSFFnS2lCQWFXNXpkR0Z1WTJWY2JseDBJQ29nUUdGeVp5QjdiMkpxWldOMGZTQmZjMjkxY21ObGN5NHVMaUF0SUZSb1pTQnZZbXBsWTNRb2N5a2dkRzhnYW05cGJpQjNhWFJvSUhSb1pTQnBibk4wWVc1alpTNWNibHgwSUNvZ1FISmxkSFZ5Ym5NZ2RHaHBjMXh1WEhRZ0tpOWNibHgwYldsNGFXNDZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseDBYSFJ5WlhSMWNtNGdkWFJwYkM1dGFYaHBiaTVoY0hCc2VTaHVkV3hzTENCYmRHaHBjMTB1WTI5dVkyRjBLRnRkTG5Oc2FXTmxMbU5oYkd3b1lYSm5kVzFsYm5SekxDQXdLU2twTzF4dVhIUjlMRnh1WEc1Y2RDOHFLbHh1WEhRZ0tpQk5ZWFJqYUdWeklIUm9aU0J1WVcxbElHOW1JSFJvWlNCclpYa2dkMmhwWTJnZ2NtVm1aWEpsYm1ObGN5QjBhR1VnWjJsMlpXNGdjRzlwYm5SbGNpQnBibk5wWkdVZ2RHaGxJR2x1YzNSaGJtTmxMaUJNYVd0bElHbHVaR1Y0VDJZb0tTQm1iM0lnYjJKcVpXTjBjeTVjYmx4MElDb2dRR2x1YzNSaGJtTmxYRzVjZENBcUlFQmhjbWNnZXlwOUlGOXRaVzFpWlhJZ0xTQlVhR1VnY21WbVpYSmxibU5sSUhkb2FXTm9JR2x6SUdWNGNHVmpkR1ZrSUhSdklHSmxJR2x1SUhSb1pTQnZZbXBsWTNRZ1lYTWdZU0J3Y205d1pYSjBlUzVjYmx4MElDb2dRSEpsZEhWeWJuTWdlM04wY21sdVozMGdWR2hsSUc1aGJXVWdiMllnZEdobElHdGxlU0JwYmlCMGFHVWdiMkpxWldOMElHMWhkR05vYVc1bklDZGZiV1Z0WW1WeUp5NWNibHgwSUNvdlhHNWNkR3RsZVU5bU9pQm1kVzVqZEdsdmJpQW9YMjFsYldKbGNpa2dlMXh1WEhSY2RISmxkSFZ5YmlCMWRHbHNMbXRsZVU5bUtIUm9hWE1zSUY5dFpXMWlaWElwTzF4dVhIUjlMRnh1WEc1Y2RDOHFLbHh1WEhRZ0tpQlFaWEptYjNKdGN5QmhJSE4xY0dWeUlHTmhiR3hpWVdOcklHOW1JSFJvWlNCbWRXNWpkR2x2YmlCM2FHbGphQ0JqWVd4c1pXUWdhWFF1SUVGc2JHOTNhVzVuSUhsdmRTQjBieUJ6ZEdsc2JDQnBiblp2YTJVZ1lTQnRaWFJvYjJRZ2QyaHBZMmdnZDJGeklHOTJaWEp5YVdSa1pXNHVYRzVjZENBcUlFQnBibk4wWVc1alpWeHVYSFFnS2lCQVlYSm5JSHNxZlNCZllYSm5jeTR1TGlBdElGZG9ZWFJsZG1WeUlHRnRiM1Z1ZENCdlppQmhjbWQxYldWdWRITWdkR2hsSUdOaGJHeGxjaUIwWVd0bGN5NWNibHgwSUNvZ1FISmxkSFZ5Ym5NZ2V5cDlJRmRvWVhSbGRtVnlJSFJvWlNCallXeHNaWElnY21WMGRYSnVjeTVjYmx4MElDb3ZYRzVjZEhCeWIzUnZPaUJtZFc1amRHbHZiaUFvS1NCN1hHNWNkRngwZG1GeUlHMWxkR2h2WkN3Z2JtRnRaU3dnYjNkdVpYSXNJSEJ5YjNSdmRIbHdaVHRjYmx4dVhIUmNkQzh2SUVkbGRDQjBhR1VnWm5WdVkzUnBiMjRnZDJocFkyZ2dhVzUyYjJ0bFpDQndjbTkwYnlncElHbHVJSFJvWlNCallXeHNJSE4wWVdOckxseHVYSFJjZEM4dklFbG1JSFJvWlNCallXeHNaWElnYVhNZ1lTQmlaV2hoZG1sdmNpQjBhR1Z1SUhkbElISmxkSEpwWlhabElIUm9aU0J0WlhSb2IyUXVYRzVjZEZ4MGJXVjBhRzlrSUQwZ2RHaHBjeTV3Y205MGJ5NWpZV3hzWlhJdWJXVjBhRzlrSUh4OElIUm9hWE11Y0hKdmRHOHVZMkZzYkdWeU8xeHVYRzVjZEZ4MEx5OGdRMmhsWTJzZ2RHOGdjMlZsSUdsbUlDZDBhR2x6SnlCdmQyNXpJSFJvWlNCdFpYUm9iMlF1WEc1Y2RGeDBMeThnVGs5VVJUb2dWMlVnYldGNUlIZGhiblFnZEc4Z2JXOTJaU0IwYUdseklHeHZaMmxqSUdsdWRHOGdaMlYwVDNkdVpYSW9LUzVjYmx4MFhIUnBaaUFvYm1GdFpTQTlJSFJvYVhNdWEyVjVUMllvYldWMGFHOWtLU2tnZTF4dVhIUmNkRngwY0hKdmRHOTBlWEJsSUQwZ1QySnFaV04wTG1kbGRGQnliM1J2ZEhsd1pVOW1LSFJvYVhNcE8xeHVYSFJjZEgxY2JseHVYSFJjZEM4dklFOTBhR1Z5ZDJselpTQm1hVzVrSUhSb1pTQnZZbXBsWTNRZ2QyaHBZMmdnYjNkdWN5QjBhR1VnWTJGc2JHVnlJR1oxYm1OMGFXOXVMbHh1WEhSY2RHVnNjMlVnZTF4dVhIUmNkRngwYjNkdVpYSWdQU0IxZEdsc0xtZGxkRTkzYm1WeUtIUm9hWE1zSUcxbGRHaHZaQ2s3WEc1Y2RGeDBYSFJ1WVcxbElEMGdiM2R1WlhJdWJtRnRaVHRjYmx4MFhIUmNkSEJ5YjNSdmRIbHdaU0E5SUU5aWFtVmpkQzVuWlhSUWNtOTBiM1I1Y0dWUFppaHZkMjVsY2k1dlltcGxZM1FwTzF4MFhHNWNkRngwZlZ4dVhIUmNkRnh1WEhSY2RHMWxkR2h2WkNBOUlIQnliM1J2ZEhsd1pWdHVZVzFsWFR0Y2JseHVYSFJjZEdsbUlDZ2hiV1YwYUc5a0tTQjdYRzVjZEZ4MFhIUmpiMjV6YjJ4bExtVnljbTl5S0NkU1pXWmxjbVZ1WTJWRmNuSnZjam9nVlc1aFlteGxJSFJ2SUd4dlkyRjBaU0J3Y205MGIzUjVjR1VnYldWMGFHOWtMaWNzSUhSb2FYTXVjSEp2ZEc4dVkyRnNiR1Z5S1R0Y2JseDBYSFJjZEdSbFluVm5aMlZ5TzF4dVhIUmNkRngwY21WMGRYSnVJRzUxYkd3N1hHNWNkRngwZlZ4dVhHNWNkRngwY21WMGRYSnVJRzFsZEdodlpDNWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wTzF4dVhIUjlMRnh1WEc1Y2RDOHFLbHh1WEhRZ0tpQlFaWEptYjNKdGN5QmhJSE4xY0dWeUlHTmhiR3hpWVdOcklHOW1JSFJvWlNCbWRXNWpkR2x2YmlCM2FHbGphQ0JqWVd4c1pXUWdhWFF1SUZWdWJHbHJaU0JnY0hKdmRHOG9LV0FnZDJocFkyZ2diRzl2YTNNZ1ptOXlJSFJvWlNCdmRtVnlhV1JrWlc0Z2JXVjBhRzlrTENCemRYQWdiRzl2YTNNZ1ptOXlJSFJvWlNCaVlYTmxJR05zWVhOekp5QnBiWEJzWlcxbGJuUmhkR2x2Ymk1Y2JseDBJQ29nUUdsdWMzUmhibU5sWEc1Y2RDQXFJRUJoY21jZ2V5cDlJRjloY21kekxpNHVJQzBnVjJoaGRHVjJaWElnWVcxdmRXNTBJRzltSUdGeVozVnRaVzUwY3lCMGFHVWdZMkZzYkdWeUlIUmhhMlZ6TGx4dVhIUWdLaUJBY21WMGRYSnVjeUI3S24wZ1YyaGhkR1YyWlhJZ2RHaGxJR05oYkd4bGNpQnlaWFIxY201ekxseHVYSFFnS2k5Y2JseDBjM1Z3T2lCbWRXNWpkR2x2YmlBb0tTQjdYRzVjZEZ4MGRtRnlJRzFsZEdodlpDd2dibUZ0WlN3Z2IzZHVaWElzSUhCeWIzUnZkSGx3WlR0Y2JseHVYSFJjZEM4dklFZGxkQ0IwYUdVZ1puVnVZM1JwYjI0Z2QyaHBZMmdnYVc1MmIydGxaQ0J6ZFhBb0tTQnBiaUIwYUdVZ1kyRnNiQ0J6ZEdGamF5NWNibHgwWEhSdFpYUm9iMlFnUFNCMGFHbHpMbk4xY0M1allXeHNaWEk3WEc1Y2RGeDBiM2R1WlhJZ1BTQjFkR2xzTG1kbGRFOTNibVZ5S0hSb2FYTXNJSFJvYVhNdVltRnpaVlI1Y0dVcE8xeHVYSFJjZEhCeWIzUnZkSGx3WlNBOUlHOTNibVZ5TG05aWFtVmpkRHRjYmx4MFhIUnVZVzFsSUQwZ2RHaHBjeTVyWlhsUFppaHRaWFJvYjJRcE8xeHVYRzVjZEZ4MEx5OGdRMmhsWTJzZ2RHOGdjMlZsSUdsbUlDZDBhR2x6SnlCdmQyNXpJSFJvWlNCdFpYUm9iMlF1WEc1Y2RGeDBMeThnVGs5VVJUb2dWMlVnYldGNUlIZGhiblFnZEc4Z2JXOTJaU0IwYUdseklHeHZaMmxqSUdsdWRHOGdaMlYwVDNkdVpYSW9LUzVjYmx4MFhIUXZMeUJjYmx4MFhIUnBaaUFvSVc1aGJXVXBJSHRjYmx4MFhIUmNkRzkzYm1WeUlEMGdkWFJwYkM1blpYUlBkMjVsY2loMGFHbHpMQ0J0WlhSb2IyUXBPMXh1WEhSY2RGeDBibUZ0WlNBOUlHOTNibVZ5TG01aGJXVTdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGJXVjBhRzlrSUQwZ2NISnZkRzkwZVhCbFcyNWhiV1ZkTzF4dVhHNWNkRngwYVdZZ0tDRnRaWFJvYjJRcElIdGNibHgwWEhSY2RHTnZibk52YkdVdVpYSnliM0lvSjFKbFptVnlaVzVqWlVWeWNtOXlPaUJWYm1GaWJHVWdkRzhnYkc5allYUmxJSEJ5YjNSdmRIbHdaU0J0WlhSb2IyUXVKeXdnZEdocGN5NXpkWEF1WTJGc2JHVnlLVHRjYmx4MFhIUmNkSEpsZEhWeWJpQnVkV3hzTzF4dVhIUmNkSDFjYmx4dVhIUmNkSEpsZEhWeWJpQnRaWFJvYjJRdVlYQndiSGtvZEdocGN5d2dZWEpuZFcxbGJuUnpLVHRjYmx4MGZTeGNibHh1WEhRdktpcGNibHgwSUNvZ1VISnZkbWxrWlhNZ2RHaGxJRzlpYW1WamRDQjBlWEJsTGx4dVhIUWdLaUJBYVc1emRHRnVZMlZjYmx4MElDb3ZYRzVjZEhSdlUzUnlhVzVuT2lCbWRXNWpkR2x2YmlBb0tTQjdYRzVjZEZ4MGRtRnlJSFI1Y0dVN1hHNWNkRngwWEc1Y2RGeDBkSGx3WlNBOUlIUm9hWE11WW1GelpWUjVjR1V1Y21Wd2JHRmpaU2duVkZsUVJWOG5MQ0FuSnlrN1hHNWNkRngwZEhsd1pTQTlJSFI1Y0dVdWMyeHBZMlVvTUN3eEtTdDBlWEJsTG5Oc2FXTmxLREVwTG5SdlRHOTNaWEpEWVhObEtDazdYRzVjYmx4MFhIUnlaWFIxY200Z0oxdHZZbXBsWTNRZ0p5dDBlWEJsS3lkZEp6dGNibHgwZlZ4dVhHNTlPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JDWVhOcFl6dGNibHh1WEc0dktpb2dWMFZDVUVGRFN5QkdUMDlVUlZJZ0tpcGNiaUFxS2lBdUwzTnZkWEpqWlM5MGVYQmxjeTlDWVhOcFl5NXFjMXh1SUNvcUx5SmRMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0sXG4vKiAxMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0ZXZhbChcIm1vZHVsZS5leHBvcnRzID0geyBcXFwiZGVmYXVsdFxcXCI6IF9fd2VicGFja19yZXF1aXJlX18oMTMpLCBfX2VzTW9kdWxlOiB0cnVlIH07Ly9AIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTkrTDJKaFltVnNMWEoxYm5ScGJXVXZZMjl5WlMxcWN5OXZZbXBsWTNRdlkzSmxZWFJsTG1welAyRmhOR0lpWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc2EwSkJRV3RDSWl3aVptbHNaU0k2SWpFeUxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3SUZ3aVpHVm1ZWFZzZEZ3aU9pQnlaWEYxYVhKbEtGd2lZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjlpYW1WamRDOWpjbVZoZEdWY0lpa3NJRjlmWlhOTmIyUjFiR1U2SUhSeWRXVWdmVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwyTnZjbVV0YW5NdmIySnFaV04wTDJOeVpXRjBaUzVxYzF4dUlDb3FJRzF2WkhWc1pTQnBaQ0E5SURFeVhHNGdLaW9nYlc5a2RXeGxJR05vZFc1cmN5QTlJREJjYmlBcUtpOGlYU3dpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0sXG4vKiAxMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0ZXZhbChcInZhciAkID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZShQLCBEKXtcXG4gIHJldHVybiAkLmNyZWF0ZShQLCBEKTtcXG59Oy8vQCBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wySmhZbVZzTFhKMWJuUnBiV1V2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmIySnFaV04wTDJOeVpXRjBaUzVxY3o4NE9UVmhJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJakV6TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUNRZ1BTQnlaWEYxYVhKbEtDY3VMaTh1TGk5dGIyUjFiR1Z6THlRbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdZM0psWVhSbEtGQXNJRVFwZTF4dUlDQnlaWFIxY200Z0pDNWpjbVZoZEdVb1VDd2dSQ2s3WEc1OU8xeHVYRzVjYmk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dUlDb3FJRmRGUWxCQlEwc2dSazlQVkVWU1hHNGdLaW9nTGk5K0wySmhZbVZzTFhKMWJuUnBiV1V2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmIySnFaV04wTDJOeVpXRjBaUzVxYzF4dUlDb3FJRzF2WkhWc1pTQnBaQ0E5SURFelhHNGdLaW9nYlc5a2RXeGxJR05vZFc1cmN5QTlJREJjYmlBcUtpOGlYU3dpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0sXG4vKiAxNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0ZXZhbChcImV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XFxuLyoqXFxyXFxuICpcXHJcXG4gKiBDb3B5IG9mIHRoZSBkZWxldGVkIHJlcG9zaXRvcnkgZXBpc3RlbWV4L3RyYW5zZm9ybWF0aW9uLW1hdHJpeC1qcy5cXHJcXG4gKiBBbGwgcmlnaHRzIGFyZSByZXNlcnZlZCB0byBFcGlzdGVtZXguXFxyXFxuICpcXHJcXG4gKiAyRCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggb2JqZWN0IGluaXRpYWxpemVkIHdpdGggaWRlbnRpdHkgbWF0cml4LlxcclxcbiAqXFxyXFxuICogVGhlIG1hdHJpeCBjYW4gc3luY2hyb25pemUgYSBjYW52YXMgY29udGV4dCBieSBzdXBwbHlpbmcgdGhlIGNvbnRleHRcXHJcXG4gKiBhcyBhbiBhcmd1bWVudCwgb3IgbGF0ZXIgYXBwbHkgY3VycmVudCBhYnNvbHV0ZSB0cmFuc2Zvcm0gdG8gYW5cXHJcXG4gKiBleGlzdGluZyBjb250ZXh0LlxcclxcbiAqXFxyXFxuICogQWxsIHZhbHVlcyBhcmUgaGFuZGxlZCBhcyBmbG9hdGluZyBwb2ludCB2YWx1ZXMuXFxyXFxuICpcXHJcXG4gKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gW2NvbnRleHRdIC0gT3B0aW9uYWwgY29udGV4dCB0byBzeW5jIHdpdGggTWF0cml4XFxyXFxuICogQHByb3Age251bWJlcn0gYSAtIHNjYWxlIHhcXHJcXG4gKiBAcHJvcCB7bnVtYmVyfSBiIC0gc2hlYXIgeVxcclxcbiAqIEBwcm9wIHtudW1iZXJ9IGMgLSBzaGVhciB4XFxyXFxuICogQHByb3Age251bWJlcn0gZCAtIHNjYWxlIHlcXHJcXG4gKiBAcHJvcCB7bnVtYmVyfSBlIC0gdHJhbnNsYXRlIHhcXHJcXG4gKiBAcHJvcCB7bnVtYmVyfSBmIC0gdHJhbnNsYXRlIHlcXHJcXG4gKiBAcHJvcCB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfG51bGx9IFtjb250ZXh0PW51bGxdIC0gc2V0IG9yIGdldCBjdXJyZW50IGNhbnZhcyBjb250ZXh0XFxyXFxuICogQGNvbnN0cnVjdG9yXFxyXFxuICovXFxuZnVuY3Rpb24gTWF0cml4KGNvbnRleHQpIHtcXG5cXG4gICAgdmFyIG1lID0gdGhpcztcXG4gICAgbWUuX3QgPSBtZS50cmFuc2Zvcm07XFxuXFxuICAgIG1lLmEgPSBtZS5kID0gMTtcXG4gICAgbWUuYiA9IG1lLmMgPSBtZS5lID0gbWUuZiA9IDA7XFxuXFxuICAgIG1lLmNvbnRleHQgPSBjb250ZXh0O1xcblxcbiAgICAvLyByZXNldCBjYW52YXMgdHJhbnNmb3JtYXRpb25zIChpZiBhbnkpIHRvIGVuYWJsZSAxMDAlIHN5bmMuXFxuICAgIGlmIChjb250ZXh0KSBjb250ZXh0LnNldFRyYW5zZm9ybSgxLCAwLCAwLCAxLCAwLCAwKTtcXG59XFxuXFxuTWF0cml4LnByb3RvdHlwZSA9IHtcXG5cXG4gICAgLyoqXFxyXFxuICAgICAqIENvbmNhdGVuYXRlcyB0cmFuc2Zvcm1zIG9mIHRoaXMgbWF0cml4IG9udG8gdGhlIGdpdmVuIGNoaWxkIG1hdHJpeCBhbmRcXHJcXG4gICAgICogcmV0dXJucyBhIG5ldyBtYXRyaXguIFRoaXMgaW5zdGFuY2UgaXMgdXNlZCBvbiBsZWZ0IHNpZGUuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7TWF0cml4fSBjbSAtIGNoaWxkIG1hdHJpeCB0byBhcHBseSBjb25jYXRlbmF0aW9uIHRvXFxyXFxuICAgICAqIEByZXR1cm5zIHtNYXRyaXh9XFxyXFxuICAgICAqL1xcbiAgICBjb25jYXQ6IGZ1bmN0aW9uIGNvbmNhdChjbSkge1xcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5fdChjbS5hLCBjbS5iLCBjbS5jLCBjbS5kLCBjbS5lLCBjbS5mKTtcXG4gICAgfSxcXG5cXG4gICAgLyoqXFxyXFxuICAgICAqIEZsaXBzIHRoZSBob3Jpem9udGFsIHZhbHVlcy5cXHJcXG4gICAgICovXFxuICAgIGZsaXBYOiBmdW5jdGlvbiBmbGlwWCgpIHtcXG4gICAgICAgIHJldHVybiB0aGlzLl90KC0xLCAwLCAwLCAxLCAwLCAwKTtcXG4gICAgfSxcXG5cXG4gICAgLyoqXFxyXFxuICAgICAqIEZsaXBzIHRoZSB2ZXJ0aWNhbCB2YWx1ZXMuXFxyXFxuICAgICAqL1xcbiAgICBmbGlwWTogZnVuY3Rpb24gZmxpcFkoKSB7XFxuICAgICAgICByZXR1cm4gdGhpcy5fdCgxLCAwLCAwLCAtMSwgMCwgMCk7XFxuICAgIH0sXFxuXFxuICAgIC8qKlxcclxcbiAgICAgKiBSZWZsZWN0cyBpbmNvbWluZyAodmVsb2NpdHkpIHZlY3RvciBvbiB0aGUgbm9ybWFsIHdoaWNoIHdpbGwgYmUgdGhlXFxyXFxuICAgICAqIGN1cnJlbnQgdHJhbnNmb3JtZWQgeCBheGlzLiBDYWxsIHdoZW4gYSB0cmlnZ2VyIGNvbmRpdGlvbiBpcyBtZXQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIE5PVEU6IEJFVEEsIHNpbXBsZSBpbXBsZW1lbnRhdGlvblxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geCAtIHZlY3RvciBlbmQgcG9pbnQgZm9yIHggKHN0YXJ0ID0gMClcXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHkgLSB2ZWN0b3IgZW5kIHBvaW50IGZvciB5IChzdGFydCA9IDApXFxyXFxuICAgICAqIEByZXR1cm5zIHt7eDogbnVtYmVyLCB5OiBudW1iZXJ9fVxcclxcbiAgICAgKi9cXG4gICAgcmVmbGVjdFZlY3RvcjogZnVuY3Rpb24gcmVmbGVjdFZlY3Rvcih4LCB5KSB7XFxuXFxuICAgICAgICB2YXIgdiA9IHRoaXMuYXBwbHlUb1BvaW50KDAsIDEpLFxcbiAgICAgICAgICAgIGQgPSAyICogKHYueCAqIHggKyB2LnkgKiB5KTtcXG5cXG4gICAgICAgIHggLT0gZCAqIHYueDtcXG4gICAgICAgIHkgLT0gZCAqIHYueTtcXG5cXG4gICAgICAgIHJldHVybiB7IHg6IHgsIHk6IHkgfTtcXG4gICAgfSxcXG5cXG4gICAgLyoqXFxyXFxuICAgICAqIFNob3J0LWhhbmQgdG8gcmVzZXQgY3VycmVudCBtYXRyaXggdG8gYW4gaWRlbnRpdHkgbWF0cml4LlxcclxcbiAgICAgKi9cXG4gICAgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KCkge1xcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xcbiAgICB9LFxcblxcbiAgICAvKipcXHJcXG4gICAgICogUm90YXRlcyBjdXJyZW50IG1hdHJpeCBhY2N1bXVsYXRpdmUgYnkgYW5nbGUuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZSAtIGFuZ2xlIGluIHJhZGlhbnNcXHJcXG4gICAgICovXFxuICAgIHJvdGF0ZTogZnVuY3Rpb24gcm90YXRlKGFuZ2xlKSB7XFxuICAgICAgICB2YXIgY29zID0gTWF0aC5jb3MoYW5nbGUpLFxcbiAgICAgICAgICAgIHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcXG4gICAgICAgIHJldHVybiB0aGlzLl90KGNvcywgc2luLCAtc2luLCBjb3MsIDAsIDApO1xcbiAgICB9LFxcblxcbiAgICAvKipcXHJcXG4gICAgICogQ29udmVydHMgYSB2ZWN0b3IgZ2l2ZW4gYXMgeCBhbmQgeSB0byBhbmdsZSwgYW5kXFxyXFxuICAgICAqIHJvdGF0ZXMgKGFjY3VtdWxhdGl2ZSkuXFxyXFxuICAgICAqIEBwYXJhbSB4XFxyXFxuICAgICAqIEBwYXJhbSB5XFxyXFxuICAgICAqIEByZXR1cm5zIHsqfVxcclxcbiAgICAgKi9cXG4gICAgcm90YXRlRnJvbVZlY3RvcjogZnVuY3Rpb24gcm90YXRlRnJvbVZlY3Rvcih4LCB5KSB7XFxuICAgICAgICByZXR1cm4gdGhpcy5yb3RhdGUoTWF0aC5hdGFuMih5LCB4KSk7XFxuICAgIH0sXFxuXFxuICAgIC8qKlxcclxcbiAgICAgKiBIZWxwZXIgbWV0aG9kIHRvIG1ha2UgYSByb3RhdGlvbiBiYXNlZCBvbiBhbiBhbmdsZSBpbiBkZWdyZWVzLlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYW5nbGUgLSBhbmdsZSBpbiBkZWdyZWVzXFxyXFxuICAgICAqL1xcbiAgICByb3RhdGVEZWc6IGZ1bmN0aW9uIHJvdGF0ZURlZyhhbmdsZSkge1xcbiAgICAgICAgcmV0dXJuIHRoaXMucm90YXRlKGFuZ2xlICogTWF0aC5QSSAvIDE4MCk7XFxuICAgIH0sXFxuXFxuICAgIC8qKlxcclxcbiAgICAgKiBTY2FsZXMgY3VycmVudCBtYXRyaXggdW5pZm9ybWx5IGFuZCBhY2N1bXVsYXRpdmUuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmIC0gc2NhbGUgZmFjdG9yIGZvciBib3RoIHggYW5kIHkgKDEgZG9lcyBub3RoaW5nKVxcclxcbiAgICAgKi9cXG4gICAgc2NhbGVVOiBmdW5jdGlvbiBzY2FsZVUoZikge1xcbiAgICAgICAgcmV0dXJuIHRoaXMuX3QoZiwgMCwgMCwgZiwgMCwgMCk7XFxuICAgIH0sXFxuXFxuICAgIC8qKlxcclxcbiAgICAgKiBTY2FsZXMgY3VycmVudCBtYXRyaXggYWNjdW11bGF0aXZlLlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3ggLSBzY2FsZSBmYWN0b3IgeCAoMSBkb2VzIG5vdGhpbmcpXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzeSAtIHNjYWxlIGZhY3RvciB5ICgxIGRvZXMgbm90aGluZylcXHJcXG4gICAgICovXFxuICAgIHNjYWxlOiBmdW5jdGlvbiBzY2FsZShzeCwgc3kpIHtcXG4gICAgICAgIHJldHVybiB0aGlzLl90KHN4LCAwLCAwLCBzeSwgMCwgMCk7XFxuICAgIH0sXFxuXFxuICAgIC8qKlxcclxcbiAgICAgKiBTY2FsZXMgY3VycmVudCBtYXRyaXggb24geCBheGlzIGFjY3VtdWxhdGl2ZS5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN4IC0gc2NhbGUgZmFjdG9yIHggKDEgZG9lcyBub3RoaW5nKVxcclxcbiAgICAgKi9cXG4gICAgc2NhbGVYOiBmdW5jdGlvbiBzY2FsZVgoc3gpIHtcXG4gICAgICAgIHJldHVybiB0aGlzLl90KHN4LCAwLCAwLCAxLCAwLCAwKTtcXG4gICAgfSxcXG5cXG4gICAgLyoqXFxyXFxuICAgICAqIFNjYWxlcyBjdXJyZW50IG1hdHJpeCBvbiB5IGF4aXMgYWNjdW11bGF0aXZlLlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3kgLSBzY2FsZSBmYWN0b3IgeSAoMSBkb2VzIG5vdGhpbmcpXFxyXFxuICAgICAqL1xcbiAgICBzY2FsZVk6IGZ1bmN0aW9uIHNjYWxlWShzeSkge1xcbiAgICAgICAgcmV0dXJuIHRoaXMuX3QoMSwgMCwgMCwgc3ksIDAsIDApO1xcbiAgICB9LFxcblxcbiAgICAvKipcXHJcXG4gICAgICogQXBwbHkgc2hlYXIgdG8gdGhlIGN1cnJlbnQgbWF0cml4IGFjY3VtdWxhdGl2ZS5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN4IC0gYW1vdW50IG9mIHNoZWFyIGZvciB4XFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzeSAtIGFtb3VudCBvZiBzaGVhciBmb3IgeVxcclxcbiAgICAgKi9cXG4gICAgc2hlYXI6IGZ1bmN0aW9uIHNoZWFyKHN4LCBzeSkge1xcbiAgICAgICAgcmV0dXJuIHRoaXMuX3QoMSwgc3ksIHN4LCAxLCAwLCAwKTtcXG4gICAgfSxcXG5cXG4gICAgLyoqXFxyXFxuICAgICAqIEFwcGx5IHNoZWFyIGZvciB4IHRvIHRoZSBjdXJyZW50IG1hdHJpeCBhY2N1bXVsYXRpdmUuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzeCAtIGFtb3VudCBvZiBzaGVhciBmb3IgeFxcclxcbiAgICAgKi9cXG4gICAgc2hlYXJYOiBmdW5jdGlvbiBzaGVhclgoc3gpIHtcXG4gICAgICAgIHJldHVybiB0aGlzLl90KDEsIDAsIHN4LCAxLCAwLCAwKTtcXG4gICAgfSxcXG5cXG4gICAgLyoqXFxyXFxuICAgICAqIEFwcGx5IHNoZWFyIGZvciB5IHRvIHRoZSBjdXJyZW50IG1hdHJpeCBhY2N1bXVsYXRpdmUuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzeSAtIGFtb3VudCBvZiBzaGVhciBmb3IgeVxcclxcbiAgICAgKi9cXG4gICAgc2hlYXJZOiBmdW5jdGlvbiBzaGVhclkoc3kpIHtcXG4gICAgICAgIHJldHVybiB0aGlzLl90KDEsIHN5LCAwLCAxLCAwLCAwKTtcXG4gICAgfSxcXG5cXG4gICAgLyoqXFxyXFxuICAgICAqIEFwcGx5IHNrZXcgdG8gdGhlIGN1cnJlbnQgbWF0cml4IGFjY3VtdWxhdGl2ZS5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGF4IC0gYW5nbGUgb2Ygc2tldyBmb3IgeFxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXkgLSBhbmdsZSBvZiBza2V3IGZvciB5XFxyXFxuICAgICAqL1xcbiAgICBza2V3OiBmdW5jdGlvbiBza2V3KGF4LCBheSkge1xcbiAgICAgICAgcmV0dXJuIHRoaXMuc2hlYXIoTWF0aC50YW4oYXgpLCBNYXRoLnRhbihheSkpO1xcbiAgICB9LFxcblxcbiAgICAvKipcXHJcXG4gICAgICogQXBwbHkgc2tldyBmb3IgeCB0byB0aGUgY3VycmVudCBtYXRyaXggYWNjdW11bGF0aXZlLlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXggLSBhbmdsZSBvZiBza2V3IGZvciB4XFxyXFxuICAgICAqL1xcbiAgICBza2V3WDogZnVuY3Rpb24gc2tld1goYXgpIHtcXG4gICAgICAgIHJldHVybiB0aGlzLnNoZWFyWChNYXRoLnRhbihheCkpO1xcbiAgICB9LFxcblxcbiAgICAvKipcXHJcXG4gICAgICogQXBwbHkgc2tldyBmb3IgeSB0byB0aGUgY3VycmVudCBtYXRyaXggYWNjdW11bGF0aXZlLlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXkgLSBhbmdsZSBvZiBza2V3IGZvciB5XFxyXFxuICAgICAqL1xcbiAgICBza2V3WTogZnVuY3Rpb24gc2tld1koYXkpIHtcXG4gICAgICAgIHJldHVybiB0aGlzLnNoZWFyWShNYXRoLnRhbihheSkpO1xcbiAgICB9LFxcblxcbiAgICAvKipcXHJcXG4gICAgICogU2V0IGN1cnJlbnQgbWF0cml4IHRvIG5ldyBhYnNvbHV0ZSBtYXRyaXguXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhIC0gc2NhbGUgeFxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYiAtIHNoZWFyIHlcXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGMgLSBzaGVhciB4XFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkIC0gc2NhbGUgeVxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZSAtIHRyYW5zbGF0ZSB4XFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmIC0gdHJhbnNsYXRlIHlcXHJcXG4gICAgICovXFxuICAgIHNldFRyYW5zZm9ybTogZnVuY3Rpb24gc2V0VHJhbnNmb3JtKGEsIGIsIGMsIGQsIGUsIGYpIHtcXG4gICAgICAgIHZhciBtZSA9IHRoaXM7XFxuICAgICAgICBtZS5hID0gYTtcXG4gICAgICAgIG1lLmIgPSBiO1xcbiAgICAgICAgbWUuYyA9IGM7XFxuICAgICAgICBtZS5kID0gZDtcXG4gICAgICAgIG1lLmUgPSBlO1xcbiAgICAgICAgbWUuZiA9IGY7XFxuICAgICAgICByZXR1cm4gbWUuX3goKTtcXG4gICAgfSxcXG5cXG4gICAgLyoqXFxyXFxuICAgICAqIFRyYW5zbGF0ZSBjdXJyZW50IG1hdHJpeCBhY2N1bXVsYXRpdmUuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0eCAtIHRyYW5zbGF0aW9uIGZvciB4XFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0eSAtIHRyYW5zbGF0aW9uIGZvciB5XFxyXFxuICAgICAqL1xcbiAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uIHRyYW5zbGF0ZSh0eCwgdHkpIHtcXG4gICAgICAgIHJldHVybiB0aGlzLl90KDEsIDAsIDAsIDEsIHR4LCB0eSk7XFxuICAgIH0sXFxuXFxuICAgIC8qKlxcclxcbiAgICAgKiBUcmFuc2xhdGUgY3VycmVudCBtYXRyaXggb24geCBheGlzIGFjY3VtdWxhdGl2ZS5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHR4IC0gdHJhbnNsYXRpb24gZm9yIHhcXHJcXG4gICAgICovXFxuICAgIHRyYW5zbGF0ZVg6IGZ1bmN0aW9uIHRyYW5zbGF0ZVgodHgpIHtcXG4gICAgICAgIHJldHVybiB0aGlzLl90KDEsIDAsIDAsIDEsIHR4LCAwKTtcXG4gICAgfSxcXG5cXG4gICAgLyoqXFxyXFxuICAgICAqIFRyYW5zbGF0ZSBjdXJyZW50IG1hdHJpeCBvbiB5IGF4aXMgYWNjdW11bGF0aXZlLlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdHkgLSB0cmFuc2xhdGlvbiBmb3IgeVxcclxcbiAgICAgKi9cXG4gICAgdHJhbnNsYXRlWTogZnVuY3Rpb24gdHJhbnNsYXRlWSh0eSkge1xcbiAgICAgICAgcmV0dXJuIHRoaXMuX3QoMSwgMCwgMCwgMSwgMCwgdHkpO1xcbiAgICB9LFxcblxcbiAgICAvKipcXHJcXG4gICAgICogTXVsdGlwbGllcyBjdXJyZW50IG1hdHJpeCB3aXRoIG5ldyBtYXRyaXggdmFsdWVzLlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYTIgLSBzY2FsZSB4XFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiMiAtIHNoZWFyIHlcXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGMyIC0gc2hlYXIgeFxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZDIgLSBzY2FsZSB5XFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlMiAtIHRyYW5zbGF0ZSB4XFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmMiAtIHRyYW5zbGF0ZSB5XFxyXFxuICAgICAqL1xcbiAgICB0cmFuc2Zvcm06IGZ1bmN0aW9uIHRyYW5zZm9ybShhMiwgYjIsIGMyLCBkMiwgZTIsIGYyKSB7XFxuXFxuICAgICAgICB2YXIgbWUgPSB0aGlzLFxcbiAgICAgICAgICAgIGExID0gbWUuYSxcXG4gICAgICAgICAgICBiMSA9IG1lLmIsXFxuICAgICAgICAgICAgYzEgPSBtZS5jLFxcbiAgICAgICAgICAgIGQxID0gbWUuZCxcXG4gICAgICAgICAgICBlMSA9IG1lLmUsXFxuICAgICAgICAgICAgZjEgPSBtZS5mO1xcblxcbiAgICAgICAgLyogbWF0cml4IG9yZGVyIChjYW52YXMgY29tcGF0aWJsZSk6XFxyXFxuICAgICAgICAgKiBhY2VcXHJcXG4gICAgICAgICAqIGJkZlxcclxcbiAgICAgICAgICogMDAxXFxyXFxuICAgICAgICAgKi9cXG4gICAgICAgIG1lLmEgPSBhMSAqIGEyICsgYzEgKiBiMjtcXG4gICAgICAgIG1lLmIgPSBiMSAqIGEyICsgZDEgKiBiMjtcXG4gICAgICAgIG1lLmMgPSBhMSAqIGMyICsgYzEgKiBkMjtcXG4gICAgICAgIG1lLmQgPSBiMSAqIGMyICsgZDEgKiBkMjtcXG4gICAgICAgIG1lLmUgPSBhMSAqIGUyICsgYzEgKiBmMiArIGUxO1xcbiAgICAgICAgbWUuZiA9IGIxICogZTIgKyBkMSAqIGYyICsgZjE7XFxuXFxuICAgICAgICByZXR1cm4gbWUuX3goKTtcXG4gICAgfSxcXG5cXG4gICAgLyoqXFxyXFxuICAgICAqIERpdmlkZSB0aGlzIG1hdHJpeCBvbiBpbnB1dCBtYXRyaXggd2hpY2ggbXVzdCBiZSBpbnZlcnRpYmxlLlxcclxcbiAgICAgKiBAcGFyYW0ge01hdHJpeH0gbSAtIG1hdHJpeCB0byBkaXZpZGUgb24gKGRpdmlzb3IpXFxyXFxuICAgICAqIEByZXR1cm5zIHtNYXRyaXh9XFxyXFxuICAgICAqL1xcbiAgICBkaXZpZGU6IGZ1bmN0aW9uIGRpdmlkZShtKSB7XFxuXFxuICAgICAgICBpZiAoIW0uaXNJbnZlcnRpYmxlKCkpIHRocm93IFxcXCJJbnB1dCBtYXRyaXggaXMgbm90IGludmVydGlibGVcXFwiO1xcblxcbiAgICAgICAgdmFyIGltID0gbS5pbnZlcnNlKCk7XFxuXFxuICAgICAgICByZXR1cm4gdGhpcy5fdChpbS5hLCBpbS5iLCBpbS5jLCBpbS5kLCBpbS5lLCBpbS5mKTtcXG4gICAgfSxcXG5cXG4gICAgLyoqXFxyXFxuICAgICAqIERpdmlkZSBjdXJyZW50IG1hdHJpeCBvbiBzY2FsYXIgdmFsdWUgIT0gMC5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGQgLSBkaXZpc29yIChjYW4gbm90IGJlIDApXFxyXFxuICAgICAqIEByZXR1cm5zIHtNYXRyaXh9XFxyXFxuICAgICAqL1xcbiAgICBkaXZpZGVTY2FsYXI6IGZ1bmN0aW9uIGRpdmlkZVNjYWxhcihkKSB7XFxuXFxuICAgICAgICB2YXIgbWUgPSB0aGlzO1xcbiAgICAgICAgbWUuYSAvPSBkO1xcbiAgICAgICAgbWUuYiAvPSBkO1xcbiAgICAgICAgbWUuYyAvPSBkO1xcbiAgICAgICAgbWUuZCAvPSBkO1xcbiAgICAgICAgbWUuZSAvPSBkO1xcbiAgICAgICAgbWUuZiAvPSBkO1xcblxcbiAgICAgICAgcmV0dXJuIG1lLl94KCk7XFxuICAgIH0sXFxuXFxuICAgIC8qKlxcclxcbiAgICAgKiBHZXQgYW4gaW52ZXJzZSBtYXRyaXggb2YgY3VycmVudCBtYXRyaXguIFRoZSBtZXRob2QgcmV0dXJucyBhIG5ld1xcclxcbiAgICAgKiBtYXRyaXggd2l0aCB2YWx1ZXMgeW91IG5lZWQgdG8gdXNlIHRvIGdldCB0byBhbiBpZGVudGl0eSBtYXRyaXguXFxyXFxuICAgICAqIENvbnRleHQgZnJvbSBwYXJlbnQgbWF0cml4IGlzIG5vdCBhcHBsaWVkIHRvIHRoZSByZXR1cm5lZCBtYXRyaXguXFxyXFxuICAgICAqIEByZXR1cm5zIHtNYXRyaXh9XFxyXFxuICAgICAqL1xcbiAgICBpbnZlcnNlOiBmdW5jdGlvbiBpbnZlcnNlKCkge1xcblxcbiAgICAgICAgaWYgKHRoaXMuaXNJZGVudGl0eSgpKSB7XFxuICAgICAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXgoKTtcXG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNJbnZlcnRpYmxlKCkpIHtcXG4gICAgICAgICAgICB0aHJvdyBcXFwiTWF0cml4IGlzIG5vdCBpbnZlcnRpYmxlLlxcXCI7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHZhciBtZSA9IHRoaXMsXFxuICAgICAgICAgICAgICAgIGEgPSBtZS5hLFxcbiAgICAgICAgICAgICAgICBiID0gbWUuYixcXG4gICAgICAgICAgICAgICAgYyA9IG1lLmMsXFxuICAgICAgICAgICAgICAgIGQgPSBtZS5kLFxcbiAgICAgICAgICAgICAgICBlID0gbWUuZSxcXG4gICAgICAgICAgICAgICAgZiA9IG1lLmYsXFxuICAgICAgICAgICAgICAgIG0gPSBuZXcgTWF0cml4KCksXFxuICAgICAgICAgICAgICAgIGR0ID0gYSAqIGQgLSBiICogYzsgLy8gZGV0ZXJtaW5hbnQoKSwgc2tpcCBEUlkgaGVyZS4uLlxcblxcbiAgICAgICAgICAgIG0uYSA9IGQgLyBkdDtcXG4gICAgICAgICAgICBtLmIgPSAtYiAvIGR0O1xcbiAgICAgICAgICAgIG0uYyA9IC1jIC8gZHQ7XFxuICAgICAgICAgICAgbS5kID0gYSAvIGR0O1xcbiAgICAgICAgICAgIG0uZSA9IChjICogZiAtIGQgKiBlKSAvIGR0O1xcbiAgICAgICAgICAgIG0uZiA9IC0oYSAqIGYgLSBiICogZSkgLyBkdDtcXG5cXG4gICAgICAgICAgICByZXR1cm4gbTtcXG4gICAgICAgIH1cXG4gICAgfSxcXG5cXG4gICAgLyoqXFxyXFxuICAgICAqIEludGVycG9sYXRlIHRoaXMgbWF0cml4IHdpdGggYW5vdGhlciBhbmQgcHJvZHVjZSBhIG5ldyBtYXRyaXguXFxyXFxuICAgICAqIHQgaXMgYSB2YWx1ZSBpbiB0aGUgcmFuZ2UgWzAuMCwgMS4wXSB3aGVyZSAwIGlzIHRoaXMgaW5zdGFuY2UgYW5kXFxyXFxuICAgICAqIDEgaXMgZXF1YWwgdG8gdGhlIHNlY29uZCBtYXRyaXguIFRoZSB0IHZhbHVlIGlzIG5vdCBjb25zdHJhaW5lZC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQ29udGV4dCBmcm9tIHBhcmVudCBtYXRyaXggaXMgbm90IGFwcGxpZWQgdG8gdGhlIHJldHVybmVkIG1hdHJpeC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogTm90ZTogdGhpcyBpbnRlcnBvbGF0aW9uIGlzIG5haXZlLiBGb3IgYW5pbWF0aW9uIHVzZSB0aGVcXHJcXG4gICAgICogaW50cnBvbGF0ZUFuaW0oKSBtZXRob2QgaW5zdGVhZC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtNYXRyaXh9IG0yIC0gdGhlIG1hdHJpeCB0byBpbnRlcnBvbGF0ZSB3aXRoLlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdCAtIGludGVycG9sYXRpb24gWzAuMCwgMS4wXVxcclxcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gW2NvbnRleHRdIC0gb3B0aW9uYWwgY29udGV4dCB0byBhZmZlY3RcXHJcXG4gICAgICogQHJldHVybnMge01hdHJpeH0gLSBuZXcgaW5zdGFuY2Ugd2l0aCB0aGUgaW50ZXJwb2xhdGVkIHJlc3VsdFxcclxcbiAgICAgKi9cXG4gICAgaW50ZXJwb2xhdGU6IGZ1bmN0aW9uIGludGVycG9sYXRlKG0yLCB0LCBjb250ZXh0KSB7XFxuXFxuICAgICAgICB2YXIgbWUgPSB0aGlzLFxcbiAgICAgICAgICAgIG0gPSBjb250ZXh0ID8gbmV3IE1hdHJpeChjb250ZXh0KSA6IG5ldyBNYXRyaXgoKTtcXG5cXG4gICAgICAgIG0uYSA9IG1lLmEgKyAobTIuYSAtIG1lLmEpICogdDtcXG4gICAgICAgIG0uYiA9IG1lLmIgKyAobTIuYiAtIG1lLmIpICogdDtcXG4gICAgICAgIG0uYyA9IG1lLmMgKyAobTIuYyAtIG1lLmMpICogdDtcXG4gICAgICAgIG0uZCA9IG1lLmQgKyAobTIuZCAtIG1lLmQpICogdDtcXG4gICAgICAgIG0uZSA9IG1lLmUgKyAobTIuZSAtIG1lLmUpICogdDtcXG4gICAgICAgIG0uZiA9IG1lLmYgKyAobTIuZiAtIG1lLmYpICogdDtcXG5cXG4gICAgICAgIHJldHVybiBtLl94KCk7XFxuICAgIH0sXFxuXFxuICAgIC8qKlxcclxcbiAgICAgKiBJbnRlcnBvbGF0ZSB0aGlzIG1hdHJpeCB3aXRoIGFub3RoZXIgYW5kIHByb2R1Y2UgYSBuZXcgbWF0cml4LlxcclxcbiAgICAgKiB0IGlzIGEgdmFsdWUgaW4gdGhlIHJhbmdlIFswLjAsIDEuMF0gd2hlcmUgMCBpcyB0aGlzIGluc3RhbmNlIGFuZFxcclxcbiAgICAgKiAxIGlzIGVxdWFsIHRvIHRoZSBzZWNvbmQgbWF0cml4LiBUaGUgdCB2YWx1ZSBpcyBub3QgY29uc3RyYWluZWQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIENvbnRleHQgZnJvbSBwYXJlbnQgbWF0cml4IGlzIG5vdCBhcHBsaWVkIHRvIHRoZSByZXR1cm5lZCBtYXRyaXguXFxyXFxuICAgICAqXFxyXFxuICAgICAqIE5vdGU6IHRoaXMgaW50ZXJwb2xhdGlvbiBtZXRob2QgdXNlcyBkZWNvbXBvc2l0aW9uIHdoaWNoIG1ha2VzXFxyXFxuICAgICAqIGl0IHN1aXRhYmxlIGZvciBhbmltYXRpb25zIChpbiBwYXJ0aWN1bGFyIHdoZXJlIHJvdGF0aW9uIHRha2VzXFxyXFxuICAgICAqIHBsYWNlcykuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7TWF0cml4fSBtMiAtIHRoZSBtYXRyaXggdG8gaW50ZXJwb2xhdGUgd2l0aC5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHQgLSBpbnRlcnBvbGF0aW9uIFswLjAsIDEuMF1cXHJcXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IFtjb250ZXh0XSAtIG9wdGlvbmFsIGNvbnRleHQgdG8gYWZmZWN0XFxyXFxuICAgICAqIEByZXR1cm5zIHtNYXRyaXh9IC0gbmV3IGluc3RhbmNlIHdpdGggdGhlIGludGVycG9sYXRlZCByZXN1bHRcXHJcXG4gICAgICovXFxuICAgIGludGVycG9sYXRlQW5pbTogZnVuY3Rpb24gaW50ZXJwb2xhdGVBbmltKG0yLCB0LCBjb250ZXh0KSB7XFxuXFxuICAgICAgICB2YXIgbWUgPSB0aGlzLFxcbiAgICAgICAgICAgIG0gPSBjb250ZXh0ID8gbmV3IE1hdHJpeChjb250ZXh0KSA6IG5ldyBNYXRyaXgoKSxcXG4gICAgICAgICAgICBkMSA9IG1lLmRlY29tcG9zZSgpLFxcbiAgICAgICAgICAgIGQyID0gbTIuZGVjb21wb3NlKCksXFxuICAgICAgICAgICAgcm90YXRpb24gPSBkMS5yb3RhdGlvbiArIChkMi5yb3RhdGlvbiAtIGQxLnJvdGF0aW9uKSAqIHQsXFxuICAgICAgICAgICAgdHJhbnNsYXRlWCA9IGQxLnRyYW5zbGF0ZS54ICsgKGQyLnRyYW5zbGF0ZS54IC0gZDEudHJhbnNsYXRlLngpICogdCxcXG4gICAgICAgICAgICB0cmFuc2xhdGVZID0gZDEudHJhbnNsYXRlLnkgKyAoZDIudHJhbnNsYXRlLnkgLSBkMS50cmFuc2xhdGUueSkgKiB0LFxcbiAgICAgICAgICAgIHNjYWxlWCA9IGQxLnNjYWxlLnggKyAoZDIuc2NhbGUueCAtIGQxLnNjYWxlLngpICogdCxcXG4gICAgICAgICAgICBzY2FsZVkgPSBkMS5zY2FsZS55ICsgKGQyLnNjYWxlLnkgLSBkMS5zY2FsZS55KSAqIHQ7XFxuXFxuICAgICAgICBtLnRyYW5zbGF0ZSh0cmFuc2xhdGVYLCB0cmFuc2xhdGVZKTtcXG4gICAgICAgIG0ucm90YXRlKHJvdGF0aW9uKTtcXG4gICAgICAgIG0uc2NhbGUoc2NhbGVYLCBzY2FsZVkpO1xcblxcbiAgICAgICAgcmV0dXJuIG0uX3goKTtcXG4gICAgfSxcXG5cXG4gICAgLyoqXFxyXFxuICAgICAqIERlY29tcG9zZSB0aGUgY3VycmVudCBtYXRyaXggaW50byBzaW1wbGUgdHJhbnNmb3JtcyB1c2luZyBlaXRoZXJcXHJcXG4gICAgICogUVIgKGRlZmF1bHQpIG9yIExVIGRlY29tcG9zaXRpb24uIENvZGUgYWRhcHRlZCBmcm9tXFxyXFxuICAgICAqIGh0dHA6Ly93d3cubWF0aHMtaW5mb3JtYXRpcXVlLWpldXguY29tL2Jsb2cvZnJlZGVyaWMvP3Bvc3QvMjAxMy8xMi8wMS9EZWNvbXBvc2l0aW9uLW9mLTJELXRyYW5zZm9ybS1tYXRyaWNlc1xcclxcbiAgICAgKlxcclxcbiAgICAgKiBUaGUgcmVzdWx0IG11c3QgYmUgYXBwbGllZCBpbiB0aGUgZm9sbG93aW5nIG9yZGVyIHRvIHJlcHJvZHVjZSB0aGUgY3VycmVudCBtYXRyaXg6XFxyXFxuICAgICAqXFxyXFxuICAgICAqICAgICBRUjogdHJhbnNsYXRlIC0+IHJvdGF0ZSAtPiBzY2FsZSAtPiBza2V3WFxcclxcbiAgICAgKiAgICAgTFU6IHRyYW5zbGF0ZSAtPiBza2V3WSAgLT4gc2NhbGUgLT4gc2tld1hcXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbdXNlTFU9ZmFsc2VdIC0gc2V0IHRvIHRydWUgdG8gdXNlIExVIHJhdGhlciB0aGFuIFFSIGFsZ29yaXRobVxcclxcbiAgICAgKiBAcmV0dXJucyB7Kn0gLSBhbiBvYmplY3QgY29udGFpbmluZyBjdXJyZW50IGRlY29tcG9zZWQgdmFsdWVzIChyb3RhdGUsIHNrZXcsIHNjYWxlLCB0cmFuc2xhdGUpXFxyXFxuICAgICAqL1xcbiAgICBkZWNvbXBvc2U6IGZ1bmN0aW9uIGRlY29tcG9zZSh1c2VMVSkge1xcblxcbiAgICAgICAgdmFyIG1lID0gdGhpcyxcXG4gICAgICAgICAgICBhID0gbWUuYSxcXG4gICAgICAgICAgICBiID0gbWUuYixcXG4gICAgICAgICAgICBjID0gbWUuYyxcXG4gICAgICAgICAgICBkID0gbWUuZCxcXG4gICAgICAgICAgICBhY29zID0gTWF0aC5hY29zLFxcbiAgICAgICAgICAgIGF0YW4gPSBNYXRoLmF0YW4sXFxuICAgICAgICAgICAgc3FydCA9IE1hdGguc3FydCxcXG4gICAgICAgICAgICBwaSA9IE1hdGguUEksXFxuICAgICAgICAgICAgdHJhbnNsYXRlID0geyB4OiBtZS5lLCB5OiBtZS5mIH0sXFxuICAgICAgICAgICAgcm90YXRpb24gPSAwLFxcbiAgICAgICAgICAgIHNjYWxlID0geyB4OiAxLCB5OiAxIH0sXFxuICAgICAgICAgICAgc2tldyA9IHsgeDogMCwgeTogMCB9LFxcbiAgICAgICAgICAgIGRldGVybSA9IGEgKiBkIC0gYiAqIGM7IC8vIGRldGVybWluYW50KCksIHNraXAgRFJZIGhlcmUuLi5cXG5cXG4gICAgICAgIGlmICh1c2VMVSkge1xcbiAgICAgICAgICAgIGlmIChhKSB7XFxuICAgICAgICAgICAgICAgIHNrZXcgPSB7IHg6IGF0YW4oYyAvIGEpLCB5OiBhdGFuKGIgLyBhKSB9O1xcbiAgICAgICAgICAgICAgICBzY2FsZSA9IHsgeDogYSwgeTogZGV0ZXJtIC8gYSB9O1xcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYikge1xcbiAgICAgICAgICAgICAgICByb3RhdGlvbiA9IHBpICogMC41O1xcbiAgICAgICAgICAgICAgICBzY2FsZSA9IHsgeDogYiwgeTogZGV0ZXJtIC8gYiB9O1xcbiAgICAgICAgICAgICAgICBza2V3LnggPSBhdGFuKGQgLyBiKTtcXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAvLyBhID0gYiA9IDBcXG4gICAgICAgICAgICAgICAgc2NhbGUgPSB7IHg6IGMsIHk6IGQgfTtcXG4gICAgICAgICAgICAgICAgc2tldy54ID0gcGkgKiAwLjI1O1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgLy8gQXBwbHkgdGhlIFFSLWxpa2UgZGVjb21wb3NpdGlvbi5cXG4gICAgICAgICAgICBpZiAoYSB8fCBiKSB7XFxuICAgICAgICAgICAgICAgIHZhciByID0gc3FydChhICogYSArIGIgKiBiKTtcXG4gICAgICAgICAgICAgICAgcm90YXRpb24gPSBiID4gMCA/IGFjb3MoYSAvIHIpIDogLWFjb3MoYSAvIHIpO1xcbiAgICAgICAgICAgICAgICBzY2FsZSA9IHsgeDogciwgeTogZGV0ZXJtIC8gciB9O1xcbiAgICAgICAgICAgICAgICBza2V3LnggPSBhdGFuKChhICogYyArIGIgKiBkKSAvIChyICogcikpO1xcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYyB8fCBkKSB7XFxuICAgICAgICAgICAgICAgIHZhciBzID0gc3FydChjICogYyArIGQgKiBkKTtcXG4gICAgICAgICAgICAgICAgcm90YXRpb24gPSBwaSAqIDAuNSAtIChkID4gMCA/IGFjb3MoLWMgLyBzKSA6IC1hY29zKGMgLyBzKSk7XFxuICAgICAgICAgICAgICAgIHNjYWxlID0geyB4OiBkZXRlcm0gLyBzLCB5OiBzIH07XFxuICAgICAgICAgICAgICAgIHNrZXcueSA9IGF0YW4oKGEgKiBjICsgYiAqIGQpIC8gKHMgKiBzKSk7XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgLy8gYSA9IGIgPSBjID0gZCA9IDBcXG4gICAgICAgICAgICAgICAgc2NhbGUgPSB7IHg6IDAsIHk6IDAgfTsgLy8gPSBpbnZhbGlkIG1hdHJpeFxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgc2NhbGU6IHNjYWxlLFxcbiAgICAgICAgICAgIHRyYW5zbGF0ZTogdHJhbnNsYXRlLFxcbiAgICAgICAgICAgIHJvdGF0aW9uOiByb3RhdGlvbixcXG4gICAgICAgICAgICBza2V3OiBza2V3XFxuICAgICAgICB9O1xcbiAgICB9LFxcblxcbiAgICAvKipcXHJcXG4gICAgICogUmV0dXJucyB0aGUgZGV0ZXJtaW5hbnQgb2YgdGhlIGN1cnJlbnQgbWF0cml4LlxcclxcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxcclxcbiAgICAgKi9cXG4gICAgZGV0ZXJtaW5hbnQ6IGZ1bmN0aW9uIGRldGVybWluYW50KCkge1xcbiAgICAgICAgcmV0dXJuIHRoaXMuYSAqIHRoaXMuZCAtIHRoaXMuYiAqIHRoaXMuYztcXG4gICAgfSxcXG5cXG4gICAgLyoqXFxyXFxuICAgICAqIEFwcGx5IGN1cnJlbnQgbWF0cml4IHRvIHggYW5kIHkgcG9pbnQuXFxyXFxuICAgICAqIFJldHVybnMgYSBwb2ludCBvYmplY3QuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gdmFsdWUgZm9yIHhcXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHkgLSB2YWx1ZSBmb3IgeVxcclxcbiAgICAgKiBAcmV0dXJucyB7e3g6IG51bWJlciwgeTogbnVtYmVyfX0gQSBuZXcgdHJhbnNmb3JtZWQgcG9pbnQgb2JqZWN0XFxyXFxuICAgICAqL1xcbiAgICBhcHBseVRvUG9pbnQ6IGZ1bmN0aW9uIGFwcGx5VG9Qb2ludCh4LCB5KSB7XFxuXFxuICAgICAgICB2YXIgbWUgPSB0aGlzO1xcblxcbiAgICAgICAgcmV0dXJuIHtcXG4gICAgICAgICAgICB4OiB4ICogbWUuYSArIHkgKiBtZS5jICsgbWUuZSxcXG4gICAgICAgICAgICB5OiB4ICogbWUuYiArIHkgKiBtZS5kICsgbWUuZlxcbiAgICAgICAgfTtcXG4gICAgfSxcXG5cXG4gICAgLyoqXFxyXFxuICAgICAqIEFwcGx5IGN1cnJlbnQgbWF0cml4IHRvIGFycmF5IHdpdGggcG9pbnQgb2JqZWN0cyBvciBwb2ludCBwYWlycy5cXHJcXG4gICAgICogUmV0dXJucyBhIG5ldyBhcnJheSB3aXRoIHBvaW50cyBpbiB0aGUgc2FtZSBmb3JtYXQgYXMgdGhlIGlucHV0IGFycmF5LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBBIHBvaW50IG9iamVjdCBpcyBhbiBvYmplY3QgbGl0ZXJhbDpcXHJcXG4gICAgICpcXHJcXG4gICAgICoge3g6IHgsIHk6IHl9XFxyXFxuICAgICAqXFxyXFxuICAgICAqIHNvIGFuIGFycmF5IHdvdWxkIGNvbnRhaW4gZWl0aGVyOlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBbe3g6IHgxLCB5OiB5MX0sIHt4OiB4MiwgeTogeTJ9LCAuLi4ge3g6IHhuLCB5OiB5bn1dXFxyXFxuICAgICAqXFxyXFxuICAgICAqIG9yXFxyXFxuICAgICAqIFt4MSwgeTEsIHgyLCB5MiwgLi4uIHhuLCB5bl1cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtBcnJheX0gcG9pbnRzIC0gYXJyYXkgd2l0aCBwb2ludCBvYmplY3RzIG9yIHBhaXJzXFxyXFxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gQSBuZXcgYXJyYXkgd2l0aCB0cmFuc2Zvcm1lZCBwb2ludHNcXHJcXG4gICAgICovXFxuICAgIGFwcGx5VG9BcnJheTogZnVuY3Rpb24gYXBwbHlUb0FycmF5KHBvaW50cykge1xcblxcbiAgICAgICAgdmFyIGkgPSAwLFxcbiAgICAgICAgICAgIHAsXFxuICAgICAgICAgICAgbCxcXG4gICAgICAgICAgICBteFBvaW50cyA9IFtdO1xcblxcbiAgICAgICAgaWYgKHR5cGVvZiBwb2ludHNbMF0gPT09ICdudW1iZXInKSB7XFxuXFxuICAgICAgICAgICAgbCA9IHBvaW50cy5sZW5ndGg7XFxuXFxuICAgICAgICAgICAgd2hpbGUgKGkgPCBsKSB7XFxuICAgICAgICAgICAgICAgIHAgPSB0aGlzLmFwcGx5VG9Qb2ludChwb2ludHNbaSsrXSwgcG9pbnRzW2krK10pO1xcbiAgICAgICAgICAgICAgICBteFBvaW50cy5wdXNoKHAueCwgcC55KTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIGZvciAoOyBwID0gcG9pbnRzW2ldOyBpKyspIHtcXG4gICAgICAgICAgICAgICAgbXhQb2ludHMucHVzaCh0aGlzLmFwcGx5VG9Qb2ludChwLngsIHAueSkpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHJldHVybiBteFBvaW50cztcXG4gICAgfSxcXG5cXG4gICAgLyoqXFxyXFxuICAgICAqIEFwcGx5IGN1cnJlbnQgbWF0cml4IHRvIGEgdHlwZWQgYXJyYXkgd2l0aCBwb2ludCBwYWlycy4gQWx0aG91Z2hcXHJcXG4gICAgICogdGhlIGlucHV0IGFycmF5IG1heSBiZSBhbiBvcmRpbmFyeSBhcnJheSwgdGhpcyBtZXRob2QgaXMgaW50ZW5kZWRcXHJcXG4gICAgICogZm9yIG1vcmUgcGVyZm9ybWFudCB1c2Ugd2hlcmUgdHlwZWQgYXJyYXlzIGFyZSB1c2VkLiBUaGUgcmV0dXJuZWRcXHJcXG4gICAgICogYXJyYXkgaXMgcmVnYXJkbGVzcyBhbHdheXMgcmV0dXJuZWQgYXMgYSBGbG9hdDMyQXJyYXkuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7Kn0gcG9pbnRzIC0gKHR5cGVkKSBhcnJheSB3aXRoIHBvaW50IHBhaXJzXFxyXFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3VzZTY0PWZhbHNlXSAtIHVzZSBGbG9hdDY0QXJyYXkgaW5zdGVhZCBvZiBGbG9hdDMyQXJyYXlcXHJcXG4gICAgICogQHJldHVybnMgeyp9IEEgbmV3IHR5cGVkIGFycmF5IHdpdGggdHJhbnNmb3JtZWQgcG9pbnRzXFxyXFxuICAgICAqL1xcbiAgICBhcHBseVRvVHlwZWRBcnJheTogZnVuY3Rpb24gYXBwbHlUb1R5cGVkQXJyYXkocG9pbnRzLCB1c2U2NCkge1xcblxcbiAgICAgICAgdmFyIGkgPSAwLFxcbiAgICAgICAgICAgIHAsXFxuICAgICAgICAgICAgbCA9IHBvaW50cy5sZW5ndGgsXFxuICAgICAgICAgICAgbXhQb2ludHMgPSB1c2U2NCA/IG5ldyBGbG9hdDY0QXJyYXkobCkgOiBuZXcgRmxvYXQzMkFycmF5KGwpO1xcblxcbiAgICAgICAgd2hpbGUgKGkgPCBsKSB7XFxuICAgICAgICAgICAgcCA9IHRoaXMuYXBwbHlUb1BvaW50KHBvaW50c1tpXSwgcG9pbnRzW2kgKyAxXSk7XFxuICAgICAgICAgICAgbXhQb2ludHNbaSsrXSA9IHAueDtcXG4gICAgICAgICAgICBteFBvaW50c1tpKytdID0gcC55O1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgcmV0dXJuIG14UG9pbnRzO1xcbiAgICB9LFxcblxcbiAgICAvKipcXHJcXG4gICAgICogQXBwbHkgdG8gYW55IGNhbnZhcyAyRCBjb250ZXh0IG9iamVjdC4gVGhpcyBkb2VzIG5vdCBhZmZlY3QgdGhlXFxyXFxuICAgICAqIGNvbnRleHQgdGhhdCBvcHRpb25hbGx5IHdhcyByZWZlcmVuY2VkIGluIGNvbnN0cnVjdG9yIHVubGVzcyBpdCBpc1xcclxcbiAgICAgKiB0aGUgc2FtZSBjb250ZXh0LlxcclxcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY29udGV4dFxcclxcbiAgICAgKi9cXG4gICAgYXBwbHlUb0NvbnRleHQ6IGZ1bmN0aW9uIGFwcGx5VG9Db250ZXh0KGNvbnRleHQpIHtcXG4gICAgICAgIHZhciBtZSA9IHRoaXM7XFxuICAgICAgICBjb250ZXh0LnNldFRyYW5zZm9ybShtZS5hLCBtZS5iLCBtZS5jLCBtZS5kLCBtZS5lLCBtZS5mKTtcXG4gICAgICAgIHJldHVybiBtZTtcXG4gICAgfSxcXG5cXG4gICAgLyoqXFxyXFxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiBtYXRyaXggaXMgYW4gaWRlbnRpdHkgbWF0cml4IChubyB0cmFuc2Zvcm1zIGFwcGxpZWQpLlxcclxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBpZGVudGl0eSAobm90IHRyYW5zZm9ybWVkKVxcclxcbiAgICAgKi9cXG4gICAgaXNJZGVudGl0eTogZnVuY3Rpb24gaXNJZGVudGl0eSgpIHtcXG4gICAgICAgIHZhciBtZSA9IHRoaXM7XFxuICAgICAgICByZXR1cm4gbWUuX3EobWUuYSwgMSkgJiYgbWUuX3EobWUuYiwgMCkgJiYgbWUuX3EobWUuYywgMCkgJiYgbWUuX3EobWUuZCwgMSkgJiYgbWUuX3EobWUuZSwgMCkgJiYgbWUuX3EobWUuZiwgMCk7XFxuICAgIH0sXFxuXFxuICAgIC8qKlxcclxcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgbWF0cml4IGlzIGludmVydGlibGVcXHJcXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XFxyXFxuICAgICAqL1xcbiAgICBpc0ludmVydGlibGU6IGZ1bmN0aW9uIGlzSW52ZXJ0aWJsZSgpIHtcXG4gICAgICAgIHJldHVybiAhdGhpcy5fcSh0aGlzLmRldGVybWluYW50KCksIDApO1xcbiAgICB9LFxcblxcbiAgICAvKipcXHJcXG4gICAgICogVGVzdCBpZiBtYXRyaXggaXMgdmFsaWQuXFxyXFxuICAgICAqL1xcbiAgICBpc1ZhbGlkOiBmdW5jdGlvbiBpc1ZhbGlkKCkge1xcbiAgICAgICAgcmV0dXJuICF0aGlzLl9xKHRoaXMuYSAqIHRoaXMuZCwgMCk7XFxuICAgIH0sXFxuXFxuICAgIC8qKlxcclxcbiAgICAgKiBDbG9uZXMgY3VycmVudCBpbnN0YW5jZSBhbmQgcmV0dXJuaW5nIGEgbmV3IG1hdHJpeC5cXHJcXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbbm9Db250ZXh0PWZhbHNlXSBkb24ndCBjbG9uZSBjb250ZXh0IHJlZmVyZW5jZSBpZiB0cnVlXFxyXFxuICAgICAqIEByZXR1cm5zIHtNYXRyaXh9XFxyXFxuICAgICAqL1xcbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUobm9Db250ZXh0KSB7XFxuICAgICAgICB2YXIgbWUgPSB0aGlzLFxcbiAgICAgICAgICAgIG0gPSBuZXcgTWF0cml4KCk7XFxuICAgICAgICBtLmEgPSBtZS5hO1xcbiAgICAgICAgbS5iID0gbWUuYjtcXG4gICAgICAgIG0uYyA9IG1lLmM7XFxuICAgICAgICBtLmQgPSBtZS5kO1xcbiAgICAgICAgbS5lID0gbWUuZTtcXG4gICAgICAgIG0uZiA9IG1lLmY7XFxuICAgICAgICBpZiAoIW5vQ29udGV4dCkgbS5jb250ZXh0ID0gbWUuY29udGV4dDtcXG5cXG4gICAgICAgIHJldHVybiBtO1xcbiAgICB9LFxcblxcbiAgICAvKipcXHJcXG4gICAgICogQ29tcGFyZXMgY3VycmVudCBtYXRyaXggd2l0aCBhbm90aGVyIG1hdHJpeC4gUmV0dXJucyB0cnVlIGlmIGVxdWFsXFxyXFxuICAgICAqICh3aXRoaW4gZXBzaWxvbiB0b2xlcmFuY2UpLlxcclxcbiAgICAgKiBAcGFyYW0ge01hdHJpeH0gbSAtIG1hdHJpeCB0byBjb21wYXJlIHRoaXMgbWF0cml4IHdpdGhcXHJcXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XFxyXFxuICAgICAqL1xcbiAgICBpc0VxdWFsOiBmdW5jdGlvbiBpc0VxdWFsKG0pIHtcXG5cXG4gICAgICAgIHZhciBtZSA9IHRoaXMsXFxuICAgICAgICAgICAgcSA9IG1lLl9xO1xcblxcbiAgICAgICAgcmV0dXJuIHEobWUuYSwgbS5hKSAmJiBxKG1lLmIsIG0uYikgJiYgcShtZS5jLCBtLmMpICYmIHEobWUuZCwgbS5kKSAmJiBxKG1lLmUsIG0uZSkgJiYgcShtZS5mLCBtLmYpO1xcbiAgICB9LFxcblxcbiAgICAvKipcXHJcXG4gICAgICogUmV0dXJucyBhbiBhcnJheSB3aXRoIGN1cnJlbnQgbWF0cml4IHZhbHVlcy5cXHJcXG4gICAgICogQHJldHVybnMge0FycmF5fVxcclxcbiAgICAgKi9cXG4gICAgdG9BcnJheTogZnVuY3Rpb24gdG9BcnJheSgpIHtcXG4gICAgICAgIHZhciBtZSA9IHRoaXM7XFxuICAgICAgICByZXR1cm4gW21lLmEsIG1lLmIsIG1lLmMsIG1lLmQsIG1lLmUsIG1lLmZdO1xcbiAgICB9LFxcblxcbiAgICAvKipcXHJcXG4gICAgICogR2VuZXJhdGVzIGEgbWF0cml4KCkgc3RyaW5nIHRoYXQgY2FuIGJlIHVzZWQgd2l0aCBDU1MgdHJhbnNmb3JtLlxcclxcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxcclxcbiAgICAgKi9cXG4gICAgdG9DU1M6IGZ1bmN0aW9uIHRvQ1NTKCkge1xcbiAgICAgICAgcmV0dXJuIFxcXCJtYXRyaXgoXFxcIiArIHRoaXMudG9BcnJheSgpICsgXFxcIilcXFwiO1xcbiAgICB9LFxcblxcbiAgICAvKipcXHJcXG4gICAgICogR2VuZXJhdGVzIGEgbWF0cml4M2QoKSBzdHJpbmcgdGhhdCBjYW4gYmUgdXNlZCB3aXRoIENTUyB0cmFuc2Zvcm0uXFxyXFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XFxyXFxuICAgICAqL1xcbiAgICB0b0NTUzNEOiBmdW5jdGlvbiB0b0NTUzNEKCkge1xcbiAgICAgICAgdmFyIG1lID0gdGhpcztcXG4gICAgICAgIHJldHVybiBcXFwibWF0cml4M2QoXFxcIiArIG1lLmEgKyBcXFwiLCBcXFwiICsgbWUuYiArIFxcXCIsIDAsIDAsIFxcXCIgKyBtZS5jICsgXFxcIiwgXFxcIiArIG1lLmQgKyBcXFwiLCAwLCAwLCAwLCAwLCAxLCAwLCBcXFwiICsgbWUuZSArIFxcXCIsIFxcXCIgKyBtZS5mICsgXFxcIiwgMCwgMSlcXFwiO1xcbiAgICB9LFxcblxcbiAgICAvKipcXHJcXG4gICAgICogUmV0dXJucyBhIEpTT04gY29tcGF0aWJsZSBzdHJpbmcgb2YgY3VycmVudCBtYXRyaXguXFxyXFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XFxyXFxuICAgICAqL1xcbiAgICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTigpIHtcXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnRvQXJyYXkoKSk7XFxuICAgIH0sXFxuXFxuICAgIC8qKlxcclxcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHdpdGggY3VycmVudCBtYXRyaXggYXMgY29tbWEtc2VwYXJhdGVkIGxpc3QuXFxyXFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XFxyXFxuICAgICAqL1xcbiAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XFxuICAgICAgICByZXR1cm4gXFxcIlxcXCIgKyB0aGlzLnRvQXJyYXkoKTtcXG4gICAgfSxcXG5cXG4gICAgLyoqXFxyXFxuICAgICAqIENvbXBhcmVzIGZsb2F0aW5nIHBvaW50IHZhbHVlcyB3aXRoIHNvbWUgdG9sZXJhbmNlIChlcHNpbG9uKVxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZjEgLSBmbG9hdCAxXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmMiAtIGZsb2F0IDJcXHJcXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqL1xcbiAgICBfcTogZnVuY3Rpb24gX3EoZjEsIGYyKSB7XFxuICAgICAgICByZXR1cm4gTWF0aC5hYnMoZjEgLSBmMikgPCAxZS0xNDtcXG4gICAgfSxcXG5cXG4gICAgLyoqXFxyXFxuICAgICAqIEFwcGx5IGN1cnJlbnQgYWJzb2x1dGUgbWF0cml4IHRvIGNvbnRleHQgaWYgZGVmaW5lZCwgdG8gc3luYyBpdC5cXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICovXFxuICAgIF94OiBmdW5jdGlvbiBfeCgpIHtcXG4gICAgICAgIHZhciBtZSA9IHRoaXM7XFxuICAgICAgICBpZiAobWUuY29udGV4dCkgbWUuY29udGV4dC5zZXRUcmFuc2Zvcm0obWUuYSwgbWUuYiwgbWUuYywgbWUuZCwgbWUuZSwgbWUuZik7XFxuICAgICAgICByZXR1cm4gbWU7XFxuICAgIH1cXG59O1xcblxcbmV4cG9ydHNbXFxcImRlZmF1bHRcXFwiXSA9IE1hdHJpeDtcXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXFxcImRlZmF1bHRcXFwiXTsvL0Agc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOXpiM1Z5WTJVdmJHbGlMMjFoZEhKcGVDNXFjejg1WW1JeElsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUVhWQ1FTeFRRVUZUTEUxQlFVMHNRMEZCUXl4UFFVRlBMRVZCUVVVN08wRkJSWEpDTEZGQlFVa3NSVUZCUlN4SFFVRkhMRWxCUVVrc1EwRkJRenRCUVVOa0xFMUJRVVVzUTBGQlF5eEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRMRk5CUVZNc1EwRkJRenM3UVVGRmNrSXNUVUZCUlN4RFFVRkRMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTm9RaXhOUVVGRkxFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenM3UVVGRk9VSXNUVUZCUlN4RFFVRkRMRTlCUVU4c1IwRkJSeXhQUVVGUExFTkJRVU03T3p0QlFVZHlRaXhSUVVGSkxFOUJRVThzUlVGQlJTeFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03UTBGRGRrUTdPMEZCUlVRc1RVRkJUU3hEUVVGRExGTkJRVk1zUjBGQlJ6czdPenM3T3pzN08wRkJVMllzVlVGQlRTeEZRVUZGTEdkQ1FVRlZMRVZCUVVVc1JVRkJSVHRCUVVOc1FpeGxRVUZQTEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRMUVVNNVJEczdPenM3UVVGTFJDeFRRVUZMTEVWQlFVVXNhVUpCUVZrN1FVRkRaaXhsUVVGUExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8wdEJRM0pET3pzN096dEJRVXRFTEZOQlFVc3NSVUZCUlN4cFFrRkJXVHRCUVVObUxHVkJRVThzU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03UzBGRGNrTTdPenM3T3pzN096czdPenRCUVZsRUxHbENRVUZoTEVWQlFVVXNkVUpCUVZVc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJUczdRVUZGTTBJc1dVRkJTU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8xbEJRek5DTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6czdRVUZGYUVNc1UwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTJJc1UwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPenRCUVVWaUxHVkJRVThzUlVGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUTBGQlF6dExRVU4yUWpzN096czdRVUZMUkN4VFFVRkxMRVZCUVVVc2FVSkJRVms3UVVGRFppeGxRVUZQTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dExRVU01UXpzN096czdPMEZCVFVRc1ZVRkJUU3hGUVVGRkxHZENRVUZWTEV0QlFVc3NSVUZCUlR0QlFVTnlRaXhaUVVGSkxFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJRenRaUVVOeVFpeEhRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU14UWl4bFFVRlBMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRMRWRCUVVjc1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMHRCUXpkRE96czdPenM3T3pzN1FVRlRSQ3h2UWtGQlowSXNSVUZCUlN3d1FrRkJWU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTzBGQlF6bENMR1ZCUVU4c1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzB0QlEzaERPenM3T3pzN1FVRk5SQ3hoUVVGVExFVkJRVVVzYlVKQlFWVXNTMEZCU3l4RlFVRkZPMEZCUTNoQ0xHVkJRVThzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExFVkJRVVVzUjBGQlJ5eEhRVUZITEVOQlFVTXNRMEZCUXp0TFFVTTNRenM3T3pzN08wRkJUVVFzVlVGQlRTeEZRVUZGTEdkQ1FVRlZMRU5CUVVNc1JVRkJSVHRCUVVOcVFpeGxRVUZQTEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dExRVU53UXpzN096czdPenRCUVU5RUxGTkJRVXNzUlVGQlJTeGxRVUZWTEVWQlFVVXNSVUZCUlN4RlFVRkZMRVZCUVVVN1FVRkRja0lzWlVGQlR5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03UzBGRGRFTTdPenM3T3p0QlFVMUVMRlZCUVUwc1JVRkJSU3huUWtGQlZTeEZRVUZGTEVWQlFVVTdRVUZEYkVJc1pVRkJUeXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1MwRkRja003T3pzN096dEJRVTFFTEZWQlFVMHNSVUZCUlN4blFrRkJWU3hGUVVGRkxFVkJRVVU3UVVGRGJFSXNaVUZCVHl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdTMEZEY2tNN096czdPenM3UVVGUFJDeFRRVUZMTEVWQlFVVXNaVUZCVlN4RlFVRkZMRVZCUVVVc1JVRkJSU3hGUVVGRk8wRkJRM0pDTEdWQlFVOHNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzB0QlEzUkRPenM3T3pzN1FVRk5SQ3hWUVVGTkxFVkJRVVVzWjBKQlFWVXNSVUZCUlN4RlFVRkZPMEZCUTJ4Q0xHVkJRVThzU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVVzUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8wdEJRM0pET3pzN096czdRVUZOUkN4VlFVRk5MRVZCUVVVc1owSkJRVlVzUlVGQlJTeEZRVUZGTzBGQlEyeENMR1ZCUVU4c1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlN4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMHRCUTNKRE96czdPenM3TzBGQlQwUXNVVUZCU1N4RlFVRkZMR05CUVZVc1JVRkJSU3hGUVVGRkxFVkJRVVVzUlVGQlJUdEJRVU53UWl4bFFVRlBMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1MwRkRha1E3T3pzN096dEJRVTFFTEZOQlFVc3NSVUZCUlN4bFFVRlZMRVZCUVVVc1JVRkJSVHRCUVVOcVFpeGxRVUZQTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMHRCUTNCRE96czdPenM3UVVGTlJDeFRRVUZMTEVWQlFVVXNaVUZCVlN4RlFVRkZMRVZCUVVVN1FVRkRha0lzWlVGQlR5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0TFFVTndRenM3T3pzN096czdPenM3UVVGWFJDeG5Ra0ZCV1N4RlFVRkZMSE5DUVVGVkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTzBGQlEzUkRMRmxCUVVrc1JVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF6dEJRVU5rTEZWQlFVVXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRMVFzVlVGQlJTeERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRWQ3hWUVVGRkxFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTlVMRlZCUVVVc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBGQlExUXNWVUZCUlN4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRFZDeFZRVUZGTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVOVUxHVkJRVThzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRPMHRCUTJ4Q096czdPenM3TzBGQlQwUXNZVUZCVXl4RlFVRkZMRzFDUVVGVkxFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVTdRVUZEZWtJc1pVRkJUeXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNN1MwRkRkRU03T3pzN096dEJRVTFFTEdOQlFWVXNSVUZCUlN4dlFrRkJWU3hGUVVGRkxFVkJRVVU3UVVGRGRFSXNaVUZCVHl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdTMEZEY2tNN096czdPenRCUVUxRUxHTkJRVlVzUlVGQlJTeHZRa0ZCVlN4RlFVRkZMRVZCUVVVN1FVRkRkRUlzWlVGQlR5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU03UzBGRGNrTTdPenM3T3pzN096czdPMEZCVjBRc1lVRkJVeXhGUVVGRkxHMUNRVUZWTEVWQlFVVXNSVUZCUlN4RlFVRkZMRVZCUVVVc1JVRkJSU3hGUVVGRkxFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCUlN4RlFVRkZPenRCUVVWNlF5eFpRVUZKTEVWQlFVVXNSMEZCUnl4SlFVRkpPMWxCUTFRc1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlF5eERRVUZETzFsQlExUXNSVUZCUlN4SFFVRkhMRVZCUVVVc1EwRkJReXhEUVVGRE8xbEJRMVFzUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRPMWxCUTFRc1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlF5eERRVUZETzFsQlExUXNSVUZCUlN4SFFVRkhMRVZCUVVVc1EwRkJReXhEUVVGRE8xbEJRMVFzUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN096czdPenM3UVVGUFpDeFZRVUZGTEVOQlFVTXNRMEZCUXl4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTjZRaXhWUVVGRkxFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNSMEZCUnl4RlFVRkZMRWRCUVVjc1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlF6dEJRVU42UWl4VlFVRkZMRU5CUVVNc1EwRkJReXhIUVVGSExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVkQlFVY3NSVUZCUlN4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVONlFpeFZRVUZGTEVOQlFVTXNRMEZCUXl4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTjZRaXhWUVVGRkxFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNSMEZCUnl4RlFVRkZMRWRCUVVjc1JVRkJSU3hIUVVGSExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVOQlFVTTdRVUZET1VJc1ZVRkJSU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVkQlFVY3NSVUZCUlN4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUlVGQlJTeERRVUZET3p0QlFVVTVRaXhsUVVGUExFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXp0TFFVTnNRanM3T3pzN096dEJRVTlFTEZWQlFVMHNSVUZCUlN4blFrRkJWU3hEUVVGRExFVkJRVVU3TzBGQlJXcENMRmxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zV1VGQldTeEZRVUZGTEVWQlEycENMRTFCUVUwc1owTkJRV2RETEVOQlFVTTdPMEZCUlRORExGbEJRVWtzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJRenM3UVVGRmNrSXNaVUZCVHl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1MwRkRkRVE3T3pzN096czdRVUZQUkN4blFrRkJXU3hGUVVGRkxITkNRVUZWTEVOQlFVTXNSVUZCUlRzN1FVRkZka0lzV1VGQlNTeEZRVUZGTEVkQlFVY3NTVUZCU1N4RFFVRkRPMEZCUTJRc1ZVRkJSU3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdRVUZEVml4VlFVRkZMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU5XTEZWQlFVVXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRMVlzVlVGQlJTeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRWaXhWUVVGRkxFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0QlFVTldMRlZCUVVVc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZET3p0QlFVVldMR1ZCUVU4c1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETzB0QlEyeENPenM3T3pzN096dEJRVkZFTEZkQlFVOHNSVUZCUlN4dFFrRkJXVHM3UVVGRmFrSXNXVUZCU1N4SlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFVkJRVVU3UVVGRGJrSXNiVUpCUVU4c1NVRkJTU3hOUVVGTkxFVkJRVVVzUTBGQlF6dFRRVU4yUWl4TlFVTkpMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zV1VGQldTeEZRVUZGTEVWQlFVVTdRVUZETTBJc2EwSkJRVTBzTWtKQlFUSkNMRU5CUVVNN1UwRkRja01zVFVGRFNUdEJRVU5FTEdkQ1FVRkpMRVZCUVVVc1IwRkJSeXhKUVVGSk8yZENRVU5VTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJRenRuUWtGRFVpeERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNN1owSkJRMUlzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRPMmRDUVVOU0xFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTXNRMEZCUXp0blFrRkRVaXhEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVTTdaMEpCUTFJc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF5eERRVUZETzJkQ1FVVlNMRU5CUVVNc1IwRkJSeXhKUVVGSkxFMUJRVTBzUlVGQlJUdG5Ra0ZEYUVJc1JVRkJSU3hIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenM3UVVGRmRrSXNZVUZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETzBGQlEySXNZVUZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTTdRVUZEWkN4aFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTmtMR0ZCUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTmlMR0ZCUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETzBGQlF6TkNMR0ZCUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTTdPMEZCUlRWQ0xHMUNRVUZQTEVOQlFVTXNRMEZCUXp0VFFVTmFPMHRCUTBvN096czdPenM3T3pzN096czdPenM3TzBGQmFVSkVMR1ZCUVZjc1JVRkJSU3h4UWtGQlZTeEZRVUZGTEVWQlFVVXNRMEZCUXl4RlFVRkZMRTlCUVU4c1JVRkJSVHM3UVVGRmJrTXNXVUZCU1N4RlFVRkZMRWRCUVVjc1NVRkJTVHRaUVVOVUxFTkJRVU1zUjBGQlJ5eFBRVUZQTEVkQlFVY3NTVUZCU1N4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzU1VGQlNTeE5RVUZOTEVWQlFVVXNRMEZCUXpzN1FVRkZja1FzVTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU12UWl4VFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMEZCUXk5Q0xGTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGREwwSXNVMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0QlFVTXZRaXhUUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJReTlDTEZOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdPMEZCUlM5Q0xHVkJRVThzUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRPMHRCUTJwQ096czdPenM3T3pzN096czdPenM3T3pzN1FVRnJRa1FzYlVKQlFXVXNSVUZCUlN4NVFrRkJWU3hGUVVGRkxFVkJRVVVzUTBGQlF5eEZRVUZGTEU5QlFVOHNSVUZCUlRzN1FVRkZka01zV1VGQlNTeEZRVUZGTEVkQlFVY3NTVUZCU1R0WlFVTlVMRU5CUVVNc1IwRkJSeXhQUVVGUExFZEJRVWNzU1VGQlNTeE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1NVRkJTU3hOUVVGTkxFVkJRVVU3V1VGRGFFUXNSVUZCUlN4SFFVRkhMRVZCUVVVc1EwRkJReXhUUVVGVExFVkJRVVU3V1VGRGJrSXNSVUZCUlN4SFFVRkhMRVZCUVVVc1EwRkJReXhUUVVGVExFVkJRVVU3V1VGRGJrSXNVVUZCVVN4SFFVRkhMRVZCUVVVc1EwRkJReXhSUVVGUkxFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNVVUZCVVN4SFFVRkhMRVZCUVVVc1EwRkJReXhSUVVGUkxFbEJRVWtzUTBGQlF6dFpRVU40UkN4VlFVRlZMRWRCUVVjc1JVRkJSU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRE8xbEJRMjVGTEZWQlFWVXNSMEZCUnl4RlFVRkZMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNN1dVRkRia1VzVFVGQlRTeEhRVUZITEVWQlFVVXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXp0WlFVTnVSQ3hOUVVGTkxFZEJRVWNzUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlEyeEVPenRCUVVWTUxGTkJRVU1zUTBGQlF5eFRRVUZUTEVOQlFVTXNWVUZCVlN4RlFVRkZMRlZCUVZVc1EwRkJReXhEUVVGRE8wRkJRM0JETEZOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03UVVGRGJrSXNVMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTTdPMEZCUlhoQ0xHVkJRVThzUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRPMHRCUTJwQ096czdPenM3T3pzN096czdPenM3UVVGbFJDeGhRVUZUTEVWQlFVVXNiVUpCUVZVc1MwRkJTeXhGUVVGRk96dEJRVVY0UWl4WlFVRkpMRVZCUVVVc1IwRkJSeXhKUVVGSk8xbEJRMVFzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRPMWxCUTFJc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF5eERRVUZETzFsQlExSXNRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJReXhEUVVGRE8xbEJRMUlzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRPMWxCUTFJc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTzFsQlEyaENMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNUdFpRVU5vUWl4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExFbEJRVWs3V1VGRGFFSXNSVUZCUlN4SFFVRkhMRWxCUVVrc1EwRkJReXhGUVVGRk8xbEJSVm9zVTBGQlV5eEhRVUZITEVWQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRVZCUVVNN1dVRkRPVUlzVVVGQlVTeEhRVUZITEVOQlFVTTdXVUZEV2l4TFFVRkxMRWRCUVVjc1JVRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNN1dVRkRjRUlzU1VGQlNTeEhRVUZITEVWQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETzFsQlJXNUNMRTFCUVUwc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN08wRkJSVE5DTEZsQlFVa3NTMEZCU3l4RlFVRkZPMEZCUTFBc1owSkJRVWtzUTBGQlF5eEZRVUZGTzBGQlEwZ3NiMEpCUVVrc1IwRkJSeXhGUVVGRExFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU03UVVGRGVFTXNjVUpCUVVzc1IwRkJSeXhGUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRTFCUVUwc1IwRkJSeXhEUVVGRExFVkJRVU1zUTBGQlF6dGhRVU5xUXl4TlFVTkpMRWxCUVVrc1EwRkJReXhGUVVGRk8wRkJRMUlzZDBKQlFWRXNSMEZCUnl4RlFVRkZMRWRCUVVjc1IwRkJSeXhEUVVGRE8wRkJRM0JDTEhGQ1FVRkxMRWRCUVVjc1JVRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4TlFVRk5MRWRCUVVjc1EwRkJReXhGUVVGRExFTkJRVU03UVVGRE9VSXNiMEpCUVVrc1EwRkJReXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenRoUVVONFFpeE5RVU5KT3p0QlFVTkVMSEZDUVVGTExFZEJRVWNzUlVGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUTBGQlF6dEJRVU55UWl4dlFrRkJTU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVkQlFVY3NTVUZCU1N4RFFVRkRPMkZCUTNSQ08xTkJRMG9zVFVGRFNUczdRVUZGUkN4blFrRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTzBGQlExSXNiMEpCUVVrc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU0xUWl4M1FrRkJVU3hIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRE9VTXNjVUpCUVVzc1IwRkJSeXhGUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRTFCUVUwc1IwRkJSeXhEUVVGRExFVkJRVU1zUTBGQlF6dEJRVU01UWl4dlFrRkJTU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03WVVGRE5VTXNUVUZEU1N4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVU3UVVGRFlpeHZRa0ZCU1N4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRelZDTEhkQ1FVRlJMRWRCUVVjc1JVRkJSU3hIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTTFSQ3h4UWtGQlN5eEhRVUZITEVWQlFVTXNRMEZCUXl4RlFVRkZMRTFCUVUwc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RFFVRkRPMEZCUXpsQ0xHOUNRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0aFFVTTFReXhOUVVOSk96dEJRVU5FTEhGQ1FVRkxMRWRCUVVjc1JVRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1EwRkJRenRoUVVONFFqdFRRVU5LT3p0QlFVVkVMR1ZCUVU4N1FVRkRTQ3hwUWtGQlN5eEZRVUZGTEV0QlFVczdRVUZEV2l4eFFrRkJVeXhGUVVGRkxGTkJRVk03UVVGRGNFSXNiMEpCUVZFc1JVRkJSU3hSUVVGUk8wRkJRMnhDTEdkQ1FVRkpMRVZCUVVVc1NVRkJTVHRUUVVOaUxFTkJRVU03UzBGRFREczdPenM3TzBGQlRVUXNaVUZCVnl4RlFVRkZMSFZDUVVGWk8wRkJRM0pDTEdWQlFVOHNTVUZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dExRVU0xUXpzN096czdPenM3T3p0QlFWVkVMR2RDUVVGWkxFVkJRVVVzYzBKQlFWVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSVHM3UVVGRk1VSXNXVUZCU1N4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRE96dEJRVVZrTEdWQlFVODdRVUZEU0N4aFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVTTdRVUZETjBJc1lVRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRPMU5CUTJoRExFTkJRVU03UzBGRFREczdPenM3T3pzN096czdPenM3T3pzN096czdRVUZ2UWtRc1owSkJRVmtzUlVGQlJTeHpRa0ZCVlN4TlFVRk5MRVZCUVVVN08wRkJSVFZDTEZsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNN1dVRkJSU3hEUVVGRE8xbEJRVVVzUTBGQlF6dFpRVU5ZTEZGQlFWRXNSMEZCUnl4RlFVRkZMRU5CUVVNN08wRkJSV3hDTEZsQlFVa3NUMEZCVHl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzVVVGQlVTeEZRVUZGT3p0QlFVVXZRaXhoUVVGRExFZEJRVWNzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXpzN1FVRkZiRUlzYlVKQlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSVHRCUVVOV0xHbENRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEyaEVMSGRDUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzJGQlF6TkNPMU5CUTBvc1RVRkRTVHRCUVVORUxHMUNRVUZQTEVOQlFVTXNSMEZCUnl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVTdRVUZEZGtJc2QwSkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yRkJRemxETzFOQlEwbzdPMEZCUlVRc1pVRkJUeXhSUVVGUkxFTkJRVU03UzBGRGJrSTdPenM3T3pzN096czdPenRCUVZsRUxIRkNRVUZwUWl4RlFVRkZMREpDUVVGVkxFMUJRVTBzUlVGQlJTeExRVUZMTEVWQlFVVTdPMEZCUlhoRExGbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTTdXVUZCUlN4RFFVRkRPMWxCUTFJc1EwRkJReXhIUVVGSExFMUJRVTBzUTBGQlF5eE5RVUZOTzFsQlEycENMRkZCUVZFc1IwRkJSeXhMUVVGTExFZEJRVWNzU1VGQlNTeFpRVUZaTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1NVRkJTU3haUVVGWkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdPMEZCUldwRkxHVkJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlR0QlFVTldMR0ZCUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRhRVFzYjBKQlFWRXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEY0VJc2IwSkJRVkVzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VTBGRGRrSTdPMEZCUlVRc1pVRkJUeXhSUVVGUkxFTkJRVU03UzBGRGJrSTdPenM3T3pzN08wRkJVVVFzYTBKQlFXTXNSVUZCUlN4M1FrRkJWU3hQUVVGUExFVkJRVVU3UVVGREwwSXNXVUZCU1N4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRE8wRkJRMlFzWlVGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEzcEVMR1ZCUVU4c1JVRkJSU3hEUVVGRE8wdEJRMkk3T3pzN096dEJRVTFFTEdOQlFWVXNSVUZCUlN4elFrRkJXVHRCUVVOd1FpeFpRVUZKTEVWQlFVVXNSMEZCUnl4SlFVRkpMRU5CUVVNN1FVRkRaQ3hsUVVGUkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zU1VGRGRFSXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4SlFVTmtMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1NVRkRaQ3hGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFbEJRMlFzUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eEpRVU5rTEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUlR0TFFVTnVRanM3T3pzN08wRkJUVVFzWjBKQlFWa3NSVUZCUlN4M1FrRkJXVHRCUVVOMFFpeGxRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRPMHRCUTNwRE96czdPenRCUVV0RUxGZEJRVThzUlVGQlJTeHRRa0ZCV1R0QlFVTnFRaXhsUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1MwRkRka003T3pzN096czdRVUZQUkN4VFFVRkxMRVZCUVVVc1pVRkJWU3hUUVVGVExFVkJRVVU3UVVGRGVFSXNXVUZCU1N4RlFVRkZMRWRCUVVjc1NVRkJTVHRaUVVOVUxFTkJRVU1zUjBGQlJ5eEpRVUZKTEUxQlFVMHNSVUZCUlN4RFFVRkRPMEZCUTNKQ0xGTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOWUxGTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOWUxGTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOWUxGTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOWUxGTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOWUxGTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOWUxGbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlFVVXNRMEZCUXl4RFFVRkRMRTlCUVU4c1IwRkJSeXhGUVVGRkxFTkJRVU1zVDBGQlR5eERRVUZET3p0QlFVVjJReXhsUVVGUExFTkJRVU1zUTBGQlF6dExRVU5hT3pzN096czdPenRCUVZGRUxGZEJRVThzUlVGQlJTeHBRa0ZCVlN4RFFVRkRMRVZCUVVVN08wRkJSV3hDTEZsQlFVa3NSVUZCUlN4SFFVRkhMRWxCUVVrN1dVRkRWQ3hEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXpzN1FVRkZaQ3hsUVVGUkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGRGNFSXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVTmFMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkRXaXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRMW9zUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEpRVU5hTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUlR0TFFVTnFRanM3T3pzN08wRkJUVVFzVjBGQlR5eEZRVUZGTEcxQ1FVRlpPMEZCUTJwQ0xGbEJRVWtzUlVGQlJTeEhRVUZITEVsQlFVa3NRMEZCUXp0QlFVTmtMR1ZCUVU4c1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMHRCUXk5RE96czdPenM3UVVGTlJDeFRRVUZMTEVWQlFVVXNhVUpCUVZrN1FVRkRaaXhsUVVGUExGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZMRWRCUVVjc1IwRkJSeXhEUVVGRE8wdEJRek5ET3pzN096czdRVUZOUkN4WFFVRlBMRVZCUVVVc2JVSkJRVms3UVVGRGFrSXNXVUZCU1N4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRE8wRkJRMlFzWlVGQlR5eFhRVUZYTEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1IwRkJSeXhKUVVGSkxFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVTXNSMEZCUnl4VlFVRlZMRWRCUVVjc1JVRkJSU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1IwRkJSeXh6UWtGQmMwSXNSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJReXhIUVVGSExFbEJRVWtzUjBGQlJ5eEZRVUZGTEVOQlFVTXNRMEZCUXl4SFFVRkhMRk5CUVZNc1EwRkJRenRMUVVOMlNUczdPenM3TzBGQlRVUXNWVUZCVFN4RlFVRkZMR3RDUVVGWk8wRkJRMmhDTEdWQlFVOHNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTXNRMEZCUXp0TFFVTjZRenM3T3pzN08wRkJUVVFzV1VGQlVTeEZRVUZGTEc5Q1FVRlpPMEZCUTJ4Q0xHVkJRVThzUlVGQlJTeEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJRenRMUVVNNVFqczdPenM3T3pzN08wRkJVMFFzVFVGQlJTeEZRVUZGTEZsQlFWVXNSVUZCUlN4RlFVRkZMRVZCUVVVc1JVRkJSVHRCUVVOc1FpeGxRVUZQTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXp0TFFVTndRenM3T3pzN08wRkJUVVFzVFVGQlJTeEZRVUZGTEdOQlFWazdRVUZEV2l4WlFVRkpMRVZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRFpDeFpRVUZKTEVWQlFVVXNRMEZCUXl4UFFVRlBMRVZCUTFZc1JVRkJSU3hEUVVGRExFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU5vUlN4bFFVRlBMRVZCUVVVc1EwRkJRenRMUVVOaU8wTkJRMG9zUTBGQlF6czdjVUpCUldFc1RVRkJUU0lzSW1acGJHVWlPaUl4TkM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4eVhHNGdLbHh5WEc0Z0tpQkRiM0I1SUc5bUlIUm9aU0JrWld4bGRHVmtJSEpsY0c5emFYUnZjbmtnWlhCcGMzUmxiV1Y0TDNSeVlXNXpabTl5YldGMGFXOXVMVzFoZEhKcGVDMXFjeTVjY2x4dUlDb2dRV3hzSUhKcFoyaDBjeUJoY21VZ2NtVnpaWEoyWldRZ2RHOGdSWEJwYzNSbGJXVjRMbHh5WEc0Z0tseHlYRzRnS2lBeVJDQjBjbUZ1YzJadmNtMWhkR2x2YmlCdFlYUnlhWGdnYjJKcVpXTjBJR2x1YVhScFlXeHBlbVZrSUhkcGRHZ2dhV1JsYm5ScGRIa2diV0YwY21sNExseHlYRzRnS2x4eVhHNGdLaUJVYUdVZ2JXRjBjbWw0SUdOaGJpQnplVzVqYUhKdmJtbDZaU0JoSUdOaGJuWmhjeUJqYjI1MFpYaDBJR0o1SUhOMWNIQnNlV2x1WnlCMGFHVWdZMjl1ZEdWNGRGeHlYRzRnS2lCaGN5QmhiaUJoY21kMWJXVnVkQ3dnYjNJZ2JHRjBaWElnWVhCd2JIa2dZM1Z5Y21WdWRDQmhZbk52YkhWMFpTQjBjbUZ1YzJadmNtMGdkRzhnWVc1Y2NseHVJQ29nWlhocGMzUnBibWNnWTI5dWRHVjRkQzVjY2x4dUlDcGNjbHh1SUNvZ1FXeHNJSFpoYkhWbGN5QmhjbVVnYUdGdVpHeGxaQ0JoY3lCbWJHOWhkR2x1WnlCd2IybHVkQ0IyWVd4MVpYTXVYSEpjYmlBcVhISmNiaUFxSUVCd1lYSmhiU0I3UTJGdWRtRnpVbVZ1WkdWeWFXNW5RMjl1ZEdWNGRESkVmU0JiWTI5dWRHVjRkRjBnTFNCUGNIUnBiMjVoYkNCamIyNTBaWGgwSUhSdklITjVibU1nZDJsMGFDQk5ZWFJ5YVhoY2NseHVJQ29nUUhCeWIzQWdlMjUxYldKbGNuMGdZU0F0SUhOallXeGxJSGhjY2x4dUlDb2dRSEJ5YjNBZ2UyNTFiV0psY24wZ1lpQXRJSE5vWldGeUlIbGNjbHh1SUNvZ1FIQnliM0FnZTI1MWJXSmxjbjBnWXlBdElITm9aV0Z5SUhoY2NseHVJQ29nUUhCeWIzQWdlMjUxYldKbGNuMGdaQ0F0SUhOallXeGxJSGxjY2x4dUlDb2dRSEJ5YjNBZ2UyNTFiV0psY24wZ1pTQXRJSFJ5WVc1emJHRjBaU0I0WEhKY2JpQXFJRUJ3Y205d0lIdHVkVzFpWlhKOUlHWWdMU0IwY21GdWMyeGhkR1VnZVZ4eVhHNGdLaUJBY0hKdmNDQjdRMkZ1ZG1GelVtVnVaR1Z5YVc1blEyOXVkR1Y0ZERKRWZHNTFiR3g5SUZ0amIyNTBaWGgwUFc1MWJHeGRJQzBnYzJWMElHOXlJR2RsZENCamRYSnlaVzUwSUdOaGJuWmhjeUJqYjI1MFpYaDBYSEpjYmlBcUlFQmpiMjV6ZEhKMVkzUnZjbHh5WEc0Z0tpOWNjbHh1Wm5WdVkzUnBiMjRnVFdGMGNtbDRLR052Ym5SbGVIUXBJSHRjY2x4dVhISmNiaUFnSUNCMllYSWdiV1VnUFNCMGFHbHpPMXh5WEc0Z0lDQWdiV1V1WDNRZ1BTQnRaUzUwY21GdWMyWnZjbTA3WEhKY2JseHlYRzRnSUNBZ2JXVXVZU0E5SUcxbExtUWdQU0F4TzF4eVhHNGdJQ0FnYldVdVlpQTlJRzFsTG1NZ1BTQnRaUzVsSUQwZ2JXVXVaaUE5SURBN1hISmNibHh5WEc0Z0lDQWdiV1V1WTI5dWRHVjRkQ0E5SUdOdmJuUmxlSFE3WEhKY2JseHlYRzRnSUNBZ0x5OGdjbVZ6WlhRZ1kyRnVkbUZ6SUhSeVlXNXpabTl5YldGMGFXOXVjeUFvYVdZZ1lXNTVLU0IwYnlCbGJtRmliR1VnTVRBd0pTQnplVzVqTGx4eVhHNGdJQ0FnYVdZZ0tHTnZiblJsZUhRcElHTnZiblJsZUhRdWMyVjBWSEpoYm5ObWIzSnRLREVzSURBc0lEQXNJREVzSURBc0lEQXBPMXh5WEc1OVhISmNibHh5WEc1TllYUnlhWGd1Y0hKdmRHOTBlWEJsSUQwZ2UxeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ1EyOXVZMkYwWlc1aGRHVnpJSFJ5WVc1elptOXliWE1nYjJZZ2RHaHBjeUJ0WVhSeWFYZ2diMjUwYnlCMGFHVWdaMmwyWlc0Z1kyaHBiR1FnYldGMGNtbDRJR0Z1WkZ4eVhHNGdJQ0FnSUNvZ2NtVjBkWEp1Y3lCaElHNWxkeUJ0WVhSeWFYZ3VJRlJvYVhNZ2FXNXpkR0Z1WTJVZ2FYTWdkWE5sWkNCdmJpQnNaV1owSUhOcFpHVXVYSEpjYmlBZ0lDQWdLbHh5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHROWVhSeWFYaDlJR050SUMwZ1kyaHBiR1FnYldGMGNtbDRJSFJ2SUdGd2NHeDVJR052Ym1OaGRHVnVZWFJwYjI0Z2RHOWNjbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJSHROWVhSeWFYaDlYSEpjYmlBZ0lDQWdLaTljY2x4dUlDQWdJR052Ym1OaGREb2dablZ1WTNScGIyNGdLR050S1NCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTJ4dmJtVW9LUzVmZENoamJTNWhMQ0JqYlM1aUxDQmpiUzVqTENCamJTNWtMQ0JqYlM1bExDQmpiUzVtS1R0Y2NseHVJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lCR2JHbHdjeUIwYUdVZ2FHOXlhWHB2Ym5SaGJDQjJZV3gxWlhNdVhISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lHWnNhWEJZT2lCbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzUW9MVEVzSURBc0lEQXNJREVzSURBc0lEQXBPMXh5WEc0Z0lDQWdmU3hjY2x4dVhISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDQXFJRVpzYVhCeklIUm9aU0IyWlhKMGFXTmhiQ0IyWVd4MVpYTXVYSEpjYmlBZ0lDQWdLaTljY2x4dUlDQWdJR1pzYVhCWk9pQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM1FvTVN3Z01Dd2dNQ3dnTFRFc0lEQXNJREFwTzF4eVhHNGdJQ0FnZlN4Y2NseHVYSEpjYmlBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FxSUZKbFpteGxZM1J6SUdsdVkyOXRhVzVuSUNoMlpXeHZZMmwwZVNrZ2RtVmpkRzl5SUc5dUlIUm9aU0J1YjNKdFlXd2dkMmhwWTJnZ2QybHNiQ0JpWlNCMGFHVmNjbHh1SUNBZ0lDQXFJR04xY25KbGJuUWdkSEpoYm5ObWIzSnRaV1FnZUNCaGVHbHpMaUJEWVd4c0lIZG9aVzRnWVNCMGNtbG5aMlZ5SUdOdmJtUnBkR2x2YmlCcGN5QnRaWFF1WEhKY2JpQWdJQ0FnS2x4eVhHNGdJQ0FnSUNvZ1RrOVVSVG9nUWtWVVFTd2djMmx0Y0d4bElHbHRjR3hsYldWdWRHRjBhVzl1WEhKY2JpQWdJQ0FnS2x4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUhnZ0xTQjJaV04wYjNJZ1pXNWtJSEJ2YVc1MElHWnZjaUI0SUNoemRHRnlkQ0E5SURBcFhISmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ2VTQXRJSFpsWTNSdmNpQmxibVFnY0c5cGJuUWdabTl5SUhrZ0tITjBZWEowSUQwZ01DbGNjbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJSHQ3ZURvZ2JuVnRZbVZ5TENCNU9pQnVkVzFpWlhKOWZWeHlYRzRnSUNBZ0lDb3ZYSEpjYmlBZ0lDQnlaV1pzWldOMFZtVmpkRzl5T2lCbWRXNWpkR2x2YmlBb2VDd2dlU2tnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2RpQTlJSFJvYVhNdVlYQndiSGxVYjFCdmFXNTBLREFzSURFcExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCa0lEMGdNaUFxSUNoMkxuZ2dLaUI0SUNzZ2RpNTVJQ29nZVNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhnZ0xUMGdaQ0FxSUhZdWVEdGNjbHh1SUNBZ0lDQWdJQ0I1SUMwOUlHUWdLaUIyTG5rN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUI3ZURvZ2VDd2dlVG9nZVgwN1hISmNiaUFnSUNCOUxGeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ1UyaHZjblF0YUdGdVpDQjBieUJ5WlhObGRDQmpkWEp5Wlc1MElHMWhkSEpwZUNCMGJ5QmhiaUJwWkdWdWRHbDBlU0J0WVhSeWFYZ3VYSEpjYmlBZ0lDQWdLaTljY2x4dUlDQWdJSEpsYzJWME9pQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjMlYwVkhKaGJuTm1iM0p0S0RFc0lEQXNJREFzSURFc0lEQXNJREFwTzF4eVhHNGdJQ0FnZlN4Y2NseHVYSEpjYmlBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FxSUZKdmRHRjBaWE1nWTNWeWNtVnVkQ0J0WVhSeWFYZ2dZV05qZFcxMWJHRjBhWFpsSUdKNUlHRnVaMnhsTGx4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUdGdVoyeGxJQzBnWVc1bmJHVWdhVzRnY21Ga2FXRnVjMXh5WEc0Z0lDQWdJQ292WEhKY2JpQWdJQ0J5YjNSaGRHVTZJR1oxYm1OMGFXOXVJQ2hoYm1kc1pTa2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQmpiM01nUFNCTllYUm9MbU52Y3loaGJtZHNaU2tzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSE5wYmlBOUlFMWhkR2d1YzJsdUtHRnVaMnhsS1R0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmZENoamIzTXNJSE5wYml3Z0xYTnBiaXdnWTI5ekxDQXdMQ0F3S1R0Y2NseHVJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lCRGIyNTJaWEowY3lCaElIWmxZM1J2Y2lCbmFYWmxiaUJoY3lCNElHRnVaQ0I1SUhSdklHRnVaMnhsTENCaGJtUmNjbHh1SUNBZ0lDQXFJSEp2ZEdGMFpYTWdLR0ZqWTNWdGRXeGhkR2wyWlNrdVhISmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2VGeHlYRzRnSUNBZ0lDb2dRSEJoY21GdElIbGNjbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJSHNxZlZ4eVhHNGdJQ0FnSUNvdlhISmNiaUFnSUNCeWIzUmhkR1ZHY205dFZtVmpkRzl5T2lCbWRXNWpkR2x2YmlBb2VDd2dlU2tnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkp2ZEdGMFpTaE5ZWFJvTG1GMFlXNHlLSGtzSUhncEtUdGNjbHh1SUNBZ0lIMHNYSEpjYmx4eVhHNGdJQ0FnTHlvcVhISmNiaUFnSUNBZ0tpQklaV3h3WlhJZ2JXVjBhRzlrSUhSdklHMWhhMlVnWVNCeWIzUmhkR2x2YmlCaVlYTmxaQ0J2YmlCaGJpQmhibWRzWlNCcGJpQmtaV2R5WldWekxseHlYRzRnSUNBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlHRnVaMnhsSUMwZ1lXNW5iR1VnYVc0Z1pHVm5jbVZsYzF4eVhHNGdJQ0FnSUNvdlhISmNiaUFnSUNCeWIzUmhkR1ZFWldjNklHWjFibU4wYVc5dUlDaGhibWRzWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KdmRHRjBaU2hoYm1kc1pTQXFJRTFoZEdndVVFa2dMeUF4T0RBcE8xeHlYRzRnSUNBZ2ZTeGNjbHh1WEhKY2JpQWdJQ0F2S2lwY2NseHVJQ0FnSUNBcUlGTmpZV3hsY3lCamRYSnlaVzUwSUcxaGRISnBlQ0IxYm1sbWIzSnRiSGtnWVc1a0lHRmpZM1Z0ZFd4aGRHbDJaUzVjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0JtSUMwZ2MyTmhiR1VnWm1GamRHOXlJR1p2Y2lCaWIzUm9JSGdnWVc1a0lIa2dLREVnWkc5bGN5QnViM1JvYVc1bktWeHlYRzRnSUNBZ0lDb3ZYSEpjYmlBZ0lDQnpZMkZzWlZVNklHWjFibU4wYVc5dUlDaG1LU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM1FvWml3Z01Dd2dNQ3dnWml3Z01Dd2dNQ2s3WEhKY2JpQWdJQ0I5TEZ4eVhHNWNjbHh1SUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ29nVTJOaGJHVnpJR04xY25KbGJuUWdiV0YwY21sNElHRmpZM1Z0ZFd4aGRHbDJaUzVjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0J6ZUNBdElITmpZV3hsSUdaaFkzUnZjaUI0SUNneElHUnZaWE1nYm05MGFHbHVaeWxjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0J6ZVNBdElITmpZV3hsSUdaaFkzUnZjaUI1SUNneElHUnZaWE1nYm05MGFHbHVaeWxjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnYzJOaGJHVTZJR1oxYm1OMGFXOXVJQ2h6ZUN3Z2Mza3BJSHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZkQ2h6ZUN3Z01Dd2dNQ3dnYzNrc0lEQXNJREFwTzF4eVhHNGdJQ0FnZlN4Y2NseHVYSEpjYmlBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FxSUZOallXeGxjeUJqZFhKeVpXNTBJRzFoZEhKcGVDQnZiaUI0SUdGNGFYTWdZV05qZFcxMWJHRjBhWFpsTGx4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUhONElDMGdjMk5oYkdVZ1ptRmpkRzl5SUhnZ0tERWdaRzlsY3lCdWIzUm9hVzVuS1Z4eVhHNGdJQ0FnSUNvdlhISmNiaUFnSUNCelkyRnNaVmc2SUdaMWJtTjBhVzl1SUNoemVDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOTBLSE40TENBd0xDQXdMQ0F4TENBd0xDQXdLVHRjY2x4dUlDQWdJSDBzWEhKY2JseHlYRzRnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdLaUJUWTJGc1pYTWdZM1Z5Y21WdWRDQnRZWFJ5YVhnZ2IyNGdlU0JoZUdseklHRmpZM1Z0ZFd4aGRHbDJaUzVjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0J6ZVNBdElITmpZV3hsSUdaaFkzUnZjaUI1SUNneElHUnZaWE1nYm05MGFHbHVaeWxjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnYzJOaGJHVlpPaUJtZFc1amRHbHZiaUFvYzNrcElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmRDZ3hMQ0F3TENBd0xDQnplU3dnTUN3Z01DazdYSEpjYmlBZ0lDQjlMRnh5WEc1Y2NseHVJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDb2dRWEJ3YkhrZ2MyaGxZWElnZEc4Z2RHaGxJR04xY25KbGJuUWdiV0YwY21sNElHRmpZM1Z0ZFd4aGRHbDJaUzVjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0J6ZUNBdElHRnRiM1Z1ZENCdlppQnphR1ZoY2lCbWIzSWdlRnh5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJSE41SUMwZ1lXMXZkVzUwSUc5bUlITm9aV0Z5SUdadmNpQjVYSEpjYmlBZ0lDQWdLaTljY2x4dUlDQWdJSE5vWldGeU9pQm1kVzVqZEdsdmJpQW9jM2dzSUhONUtTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzUW9NU3dnYzNrc0lITjRMQ0F4TENBd0xDQXdLVHRjY2x4dUlDQWdJSDBzWEhKY2JseHlYRzRnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdLaUJCY0hCc2VTQnphR1ZoY2lCbWIzSWdlQ0IwYnlCMGFHVWdZM1Z5Y21WdWRDQnRZWFJ5YVhnZ1lXTmpkVzExYkdGMGFYWmxMbHh5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJSE40SUMwZ1lXMXZkVzUwSUc5bUlITm9aV0Z5SUdadmNpQjRYSEpjYmlBZ0lDQWdLaTljY2x4dUlDQWdJSE5vWldGeVdEb2dablZ1WTNScGIyNGdLSE40S1NCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNRb01Td2dNQ3dnYzNnc0lERXNJREFzSURBcE8xeHlYRzRnSUNBZ2ZTeGNjbHh1WEhKY2JpQWdJQ0F2S2lwY2NseHVJQ0FnSUNBcUlFRndjR3g1SUhOb1pXRnlJR1p2Y2lCNUlIUnZJSFJvWlNCamRYSnlaVzUwSUcxaGRISnBlQ0JoWTJOMWJYVnNZWFJwZG1VdVhISmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ2Mza2dMU0JoYlc5MWJuUWdiMllnYzJobFlYSWdabTl5SUhsY2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ2MyaGxZWEpaT2lCbWRXNWpkR2x2YmlBb2Mza3BJSHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZkQ2d4TENCemVTd2dNQ3dnTVN3Z01Dd2dNQ2s3WEhKY2JpQWdJQ0I5TEZ4eVhHNWNjbHh1SUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ29nUVhCd2JIa2djMnRsZHlCMGJ5QjBhR1VnWTNWeWNtVnVkQ0J0WVhSeWFYZ2dZV05qZFcxMWJHRjBhWFpsTGx4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUdGNElDMGdZVzVuYkdVZ2IyWWdjMnRsZHlCbWIzSWdlRnh5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJR0Y1SUMwZ1lXNW5iR1VnYjJZZ2MydGxkeUJtYjNJZ2VWeHlYRzRnSUNBZ0lDb3ZYSEpjYmlBZ0lDQnphMlYzT2lCbWRXNWpkR2x2YmlBb1lYZ3NJR0Y1S1NCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzJobFlYSW9UV0YwYUM1MFlXNG9ZWGdwTENCTllYUm9MblJoYmloaGVTa3BPMXh5WEc0Z0lDQWdmU3hjY2x4dVhISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDQXFJRUZ3Y0d4NUlITnJaWGNnWm05eUlIZ2dkRzhnZEdobElHTjFjbkpsYm5RZ2JXRjBjbWw0SUdGalkzVnRkV3hoZEdsMlpTNWNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQmhlQ0F0SUdGdVoyeGxJRzltSUhOclpYY2dabTl5SUhoY2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ2MydGxkMWc2SUdaMWJtTjBhVzl1SUNoaGVDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuTm9aV0Z5V0NoTllYUm9MblJoYmloaGVDa3BPMXh5WEc0Z0lDQWdmU3hjY2x4dVhISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDQXFJRUZ3Y0d4NUlITnJaWGNnWm05eUlIa2dkRzhnZEdobElHTjFjbkpsYm5RZ2JXRjBjbWw0SUdGalkzVnRkV3hoZEdsMlpTNWNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQmhlU0F0SUdGdVoyeGxJRzltSUhOclpYY2dabTl5SUhsY2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ2MydGxkMWs2SUdaMWJtTjBhVzl1SUNoaGVTa2dlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuTm9aV0Z5V1NoTllYUm9MblJoYmloaGVTa3BPMXh5WEc0Z0lDQWdmU3hjY2x4dVhISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDQXFJRk5sZENCamRYSnlaVzUwSUcxaGRISnBlQ0IwYnlCdVpYY2dZV0p6YjJ4MWRHVWdiV0YwY21sNExseHlYRzRnSUNBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlHRWdMU0J6WTJGc1pTQjRYSEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdZaUF0SUhOb1pXRnlJSGxjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0JqSUMwZ2MyaGxZWElnZUZ4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUdRZ0xTQnpZMkZzWlNCNVhISmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ1pTQXRJSFJ5WVc1emJHRjBaU0I0WEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnWmlBdElIUnlZVzV6YkdGMFpTQjVYSEpjYmlBZ0lDQWdLaTljY2x4dUlDQWdJSE5sZEZSeVlXNXpabTl5YlRvZ1puVnVZM1JwYjI0Z0tHRXNJR0lzSUdNc0lHUXNJR1VzSUdZcElIdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2JXVWdQU0IwYUdsek8xeHlYRzRnSUNBZ0lDQWdJRzFsTG1FZ1BTQmhPMXh5WEc0Z0lDQWdJQ0FnSUcxbExtSWdQU0JpTzF4eVhHNGdJQ0FnSUNBZ0lHMWxMbU1nUFNCak8xeHlYRzRnSUNBZ0lDQWdJRzFsTG1RZ1BTQmtPMXh5WEc0Z0lDQWdJQ0FnSUcxbExtVWdQU0JsTzF4eVhHNGdJQ0FnSUNBZ0lHMWxMbVlnUFNCbU8xeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnRaUzVmZUNncE8xeHlYRzRnSUNBZ2ZTeGNjbHh1WEhKY2JpQWdJQ0F2S2lwY2NseHVJQ0FnSUNBcUlGUnlZVzV6YkdGMFpTQmpkWEp5Wlc1MElHMWhkSEpwZUNCaFkyTjFiWFZzWVhScGRtVXVYSEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdkSGdnTFNCMGNtRnVjMnhoZEdsdmJpQm1iM0lnZUZ4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUhSNUlDMGdkSEpoYm5Oc1lYUnBiMjRnWm05eUlIbGNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdkSEpoYm5Oc1lYUmxPaUJtZFc1amRHbHZiaUFvZEhnc0lIUjVLU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM1FvTVN3Z01Dd2dNQ3dnTVN3Z2RIZ3NJSFI1S1R0Y2NseHVJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lCVWNtRnVjMnhoZEdVZ1kzVnljbVZ1ZENCdFlYUnlhWGdnYjI0Z2VDQmhlR2x6SUdGalkzVnRkV3hoZEdsMlpTNWNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQjBlQ0F0SUhSeVlXNXpiR0YwYVc5dUlHWnZjaUI0WEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUhSeVlXNXpiR0YwWlZnNklHWjFibU4wYVc5dUlDaDBlQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDkwS0RFc0lEQXNJREFzSURFc0lIUjRMQ0F3S1R0Y2NseHVJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lCVWNtRnVjMnhoZEdVZ1kzVnljbVZ1ZENCdFlYUnlhWGdnYjI0Z2VTQmhlR2x6SUdGalkzVnRkV3hoZEdsMlpTNWNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQjBlU0F0SUhSeVlXNXpiR0YwYVc5dUlHWnZjaUI1WEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUhSeVlXNXpiR0YwWlZrNklHWjFibU4wYVc5dUlDaDBlU2tnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDkwS0RFc0lEQXNJREFzSURFc0lEQXNJSFI1S1R0Y2NseHVJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lCTmRXeDBhWEJzYVdWeklHTjFjbkpsYm5RZ2JXRjBjbWw0SUhkcGRHZ2dibVYzSUcxaGRISnBlQ0IyWVd4MVpYTXVYSEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdZVElnTFNCelkyRnNaU0I0WEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnWWpJZ0xTQnphR1ZoY2lCNVhISmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ1l6SWdMU0J6YUdWaGNpQjRYSEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdaRElnTFNCelkyRnNaU0I1WEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnWlRJZ0xTQjBjbUZ1YzJ4aGRHVWdlRnh5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJR1l5SUMwZ2RISmhibk5zWVhSbElIbGNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdkSEpoYm5ObWIzSnRPaUJtZFc1amRHbHZiaUFvWVRJc0lHSXlMQ0JqTWl3Z1pESXNJR1V5TENCbU1pa2dlMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjJZWElnYldVZ1BTQjBhR2x6TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JoTVNBOUlHMWxMbUVzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR0l4SUQwZ2JXVXVZaXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZekVnUFNCdFpTNWpMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtNU0E5SUcxbExtUXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHVXhJRDBnYldVdVpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pqRWdQU0J0WlM1bU8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdktpQnRZWFJ5YVhnZ2IzSmtaWElnS0dOaGJuWmhjeUJqYjIxd1lYUnBZbXhsS1RwY2NseHVJQ0FnSUNBZ0lDQWdLaUJoWTJWY2NseHVJQ0FnSUNBZ0lDQWdLaUJpWkdaY2NseHVJQ0FnSUNBZ0lDQWdLaUF3TURGY2NseHVJQ0FnSUNBZ0lDQWdLaTljY2x4dUlDQWdJQ0FnSUNCdFpTNWhJRDBnWVRFZ0tpQmhNaUFySUdNeElDb2dZakk3WEhKY2JpQWdJQ0FnSUNBZ2JXVXVZaUE5SUdJeElDb2dZVElnS3lCa01TQXFJR0l5TzF4eVhHNGdJQ0FnSUNBZ0lHMWxMbU1nUFNCaE1TQXFJR015SUNzZ1l6RWdLaUJrTWp0Y2NseHVJQ0FnSUNBZ0lDQnRaUzVrSUQwZ1lqRWdLaUJqTWlBcklHUXhJQ29nWkRJN1hISmNiaUFnSUNBZ0lDQWdiV1V1WlNBOUlHRXhJQ29nWlRJZ0t5QmpNU0FxSUdZeUlDc2daVEU3WEhKY2JpQWdJQ0FnSUNBZ2JXVXVaaUE5SUdJeElDb2daVElnS3lCa01TQXFJR1l5SUNzZ1pqRTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdFpTNWZlQ2dwTzF4eVhHNGdJQ0FnZlN4Y2NseHVYSEpjYmlBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FxSUVScGRtbGtaU0IwYUdseklHMWhkSEpwZUNCdmJpQnBibkIxZENCdFlYUnlhWGdnZDJocFkyZ2diWFZ6ZENCaVpTQnBiblpsY25ScFlteGxMbHh5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHROWVhSeWFYaDlJRzBnTFNCdFlYUnlhWGdnZEc4Z1pHbDJhV1JsSUc5dUlDaGthWFpwYzI5eUtWeHlYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdlMDFoZEhKcGVIMWNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdaR2wyYVdSbE9pQm1kVzVqZEdsdmJpQW9iU2tnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb0lXMHVhWE5KYm5abGNuUnBZbXhsS0NrcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRndpU1c1d2RYUWdiV0YwY21sNElHbHpJRzV2ZENCcGJuWmxjblJwWW14bFhDSTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJwYlNBOUlHMHVhVzUyWlhKelpTZ3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmZENocGJTNWhMQ0JwYlM1aUxDQnBiUzVqTENCcGJTNWtMQ0JwYlM1bExDQnBiUzVtS1R0Y2NseHVJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lCRWFYWnBaR1VnWTNWeWNtVnVkQ0J0WVhSeWFYZ2diMjRnYzJOaGJHRnlJSFpoYkhWbElDRTlJREF1WEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnWkNBdElHUnBkbWx6YjNJZ0tHTmhiaUJ1YjNRZ1ltVWdNQ2xjY2x4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUh0TllYUnlhWGg5WEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUdScGRtbGtaVk5qWVd4aGNqb2dablZ1WTNScGIyNGdLR1FwSUh0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHMWxJRDBnZEdocGN6dGNjbHh1SUNBZ0lDQWdJQ0J0WlM1aElDODlJR1E3WEhKY2JpQWdJQ0FnSUNBZ2JXVXVZaUF2UFNCa08xeHlYRzRnSUNBZ0lDQWdJRzFsTG1NZ0x6MGdaRHRjY2x4dUlDQWdJQ0FnSUNCdFpTNWtJQzg5SUdRN1hISmNiaUFnSUNBZ0lDQWdiV1V1WlNBdlBTQmtPMXh5WEc0Z0lDQWdJQ0FnSUcxbExtWWdMejBnWkR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzFsTGw5NEtDazdYSEpjYmlBZ0lDQjlMRnh5WEc1Y2NseHVJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDb2dSMlYwSUdGdUlHbHVkbVZ5YzJVZ2JXRjBjbWw0SUc5bUlHTjFjbkpsYm5RZ2JXRjBjbWw0TGlCVWFHVWdiV1YwYUc5a0lISmxkSFZ5Ym5NZ1lTQnVaWGRjY2x4dUlDQWdJQ0FxSUcxaGRISnBlQ0IzYVhSb0lIWmhiSFZsY3lCNWIzVWdibVZsWkNCMGJ5QjFjMlVnZEc4Z1oyVjBJSFJ2SUdGdUlHbGtaVzUwYVhSNUlHMWhkSEpwZUM1Y2NseHVJQ0FnSUNBcUlFTnZiblJsZUhRZ1puSnZiU0J3WVhKbGJuUWdiV0YwY21sNElHbHpJRzV2ZENCaGNIQnNhV1ZrSUhSdklIUm9aU0J5WlhSMWNtNWxaQ0J0WVhSeWFYZ3VYSEpjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUI3VFdGMGNtbDRmVnh5WEc0Z0lDQWdJQ292WEhKY2JpQWdJQ0JwYm5abGNuTmxPaUJtZFc1amRHbHZiaUFvS1NCN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1selNXUmxiblJwZEhrb0tTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRTFoZEhKcGVDZ3BPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDZ2hkR2hwY3k1cGMwbHVkbVZ5ZEdsaWJHVW9LU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QmNJazFoZEhKcGVDQnBjeUJ1YjNRZ2FXNTJaWEowYVdKc1pTNWNJanRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnRaU0E5SUhSb2FYTXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoSUQwZ2JXVXVZU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdJZ1BTQnRaUzVpTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1l5QTlJRzFsTG1Nc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtJRDBnYldVdVpDeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1VnUFNCdFpTNWxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWmlBOUlHMWxMbVlzWEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiU0E5SUc1bGR5Qk5ZWFJ5YVhnb0tTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1IwSUQwZ1lTQXFJR1FnTFNCaUlDb2dZenRjZEM4dklHUmxkR1Z5YldsdVlXNTBLQ2tzSUhOcmFYQWdSRkpaSUdobGNtVXVMaTVjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUcwdVlTQTlJR1FnTHlCa2REdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JTNWlJRDBnTFdJZ0x5QmtkRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiUzVqSUQwZ0xXTWdMeUJrZER0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYlM1a0lEMGdZU0F2SUdSME8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCdExtVWdQU0FvWXlBcUlHWWdMU0JrSUNvZ1pTa2dMeUJrZER0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYlM1bUlEMGdMU2hoSUNvZ1ppQXRJR0lnS2lCbEtTQXZJR1IwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUcwN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmU3hjY2x4dVhISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDQXFJRWx1ZEdWeWNHOXNZWFJsSUhSb2FYTWdiV0YwY21sNElIZHBkR2dnWVc1dmRHaGxjaUJoYm1RZ2NISnZaSFZqWlNCaElHNWxkeUJ0WVhSeWFYZ3VYSEpjYmlBZ0lDQWdLaUIwSUdseklHRWdkbUZzZFdVZ2FXNGdkR2hsSUhKaGJtZGxJRnN3TGpBc0lERXVNRjBnZDJobGNtVWdNQ0JwY3lCMGFHbHpJR2x1YzNSaGJtTmxJR0Z1WkZ4eVhHNGdJQ0FnSUNvZ01TQnBjeUJsY1hWaGJDQjBieUIwYUdVZ2MyVmpiMjVrSUcxaGRISnBlQzRnVkdobElIUWdkbUZzZFdVZ2FYTWdibTkwSUdOdmJuTjBjbUZwYm1Wa0xseHlYRzRnSUNBZ0lDcGNjbHh1SUNBZ0lDQXFJRU52Ym5SbGVIUWdabkp2YlNCd1lYSmxiblFnYldGMGNtbDRJR2x6SUc1dmRDQmhjSEJzYVdWa0lIUnZJSFJvWlNCeVpYUjFjbTVsWkNCdFlYUnlhWGd1WEhKY2JpQWdJQ0FnS2x4eVhHNGdJQ0FnSUNvZ1RtOTBaVG9nZEdocGN5QnBiblJsY25CdmJHRjBhVzl1SUdseklHNWhhWFpsTGlCR2IzSWdZVzVwYldGMGFXOXVJSFZ6WlNCMGFHVmNjbHh1SUNBZ0lDQXFJR2x1ZEhKd2IyeGhkR1ZCYm1sdEtDa2diV1YwYUc5a0lHbHVjM1JsWVdRdVhISmNiaUFnSUNBZ0tseHlYRzRnSUNBZ0lDb2dRSEJoY21GdElIdE5ZWFJ5YVhoOUlHMHlJQzBnZEdobElHMWhkSEpwZUNCMGJ5QnBiblJsY25CdmJHRjBaU0IzYVhSb0xseHlYRzRnSUNBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlIUWdMU0JwYm5SbGNuQnZiR0YwYVc5dUlGc3dMakFzSURFdU1GMWNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdRMkZ1ZG1GelVtVnVaR1Z5YVc1blEyOXVkR1Y0ZERKRWZTQmJZMjl1ZEdWNGRGMGdMU0J2Y0hScGIyNWhiQ0JqYjI1MFpYaDBJSFJ2SUdGbVptVmpkRnh5WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nZTAxaGRISnBlSDBnTFNCdVpYY2dhVzV6ZEdGdVkyVWdkMmwwYUNCMGFHVWdhVzUwWlhKd2IyeGhkR1ZrSUhKbGMzVnNkRnh5WEc0Z0lDQWdJQ292WEhKY2JpQWdJQ0JwYm5SbGNuQnZiR0YwWlRvZ1puVnVZM1JwYjI0Z0tHMHlMQ0IwTENCamIyNTBaWGgwS1NCN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnRaU0E5SUhSb2FYTXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHMGdQU0JqYjI1MFpYaDBJRDhnYm1WM0lFMWhkSEpwZUNoamIyNTBaWGgwS1NBNklHNWxkeUJOWVhSeWFYZ29LVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdiUzVoSUQwZ2JXVXVZU0FySUNodE1pNWhJQzBnYldVdVlTa2dLaUIwTzF4eVhHNGdJQ0FnSUNBZ0lHMHVZaUE5SUcxbExtSWdLeUFvYlRJdVlpQXRJRzFsTG1JcElDb2dkRHRjY2x4dUlDQWdJQ0FnSUNCdExtTWdQU0J0WlM1aklDc2dLRzB5TG1NZ0xTQnRaUzVqS1NBcUlIUTdYSEpjYmlBZ0lDQWdJQ0FnYlM1a0lEMGdiV1V1WkNBcklDaHRNaTVrSUMwZ2JXVXVaQ2tnS2lCME8xeHlYRzRnSUNBZ0lDQWdJRzB1WlNBOUlHMWxMbVVnS3lBb2JUSXVaU0F0SUcxbExtVXBJQ29nZER0Y2NseHVJQ0FnSUNBZ0lDQnRMbVlnUFNCdFpTNW1JQ3NnS0cweUxtWWdMU0J0WlM1bUtTQXFJSFE3WEhKY2JseHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnRMbDk0S0NrN1hISmNiaUFnSUNCOUxGeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ1NXNTBaWEp3YjJ4aGRHVWdkR2hwY3lCdFlYUnlhWGdnZDJsMGFDQmhibTkwYUdWeUlHRnVaQ0J3Y205a2RXTmxJR0VnYm1WM0lHMWhkSEpwZUM1Y2NseHVJQ0FnSUNBcUlIUWdhWE1nWVNCMllXeDFaU0JwYmlCMGFHVWdjbUZ1WjJVZ1d6QXVNQ3dnTVM0d1hTQjNhR1Z5WlNBd0lHbHpJSFJvYVhNZ2FXNXpkR0Z1WTJVZ1lXNWtYSEpjYmlBZ0lDQWdLaUF4SUdseklHVnhkV0ZzSUhSdklIUm9aU0J6WldOdmJtUWdiV0YwY21sNExpQlVhR1VnZENCMllXeDFaU0JwY3lCdWIzUWdZMjl1YzNSeVlXbHVaV1F1WEhKY2JpQWdJQ0FnS2x4eVhHNGdJQ0FnSUNvZ1EyOXVkR1Y0ZENCbWNtOXRJSEJoY21WdWRDQnRZWFJ5YVhnZ2FYTWdibTkwSUdGd2NHeHBaV1FnZEc4Z2RHaGxJSEpsZEhWeWJtVmtJRzFoZEhKcGVDNWNjbHh1SUNBZ0lDQXFYSEpjYmlBZ0lDQWdLaUJPYjNSbE9pQjBhR2x6SUdsdWRHVnljRzlzWVhScGIyNGdiV1YwYUc5a0lIVnpaWE1nWkdWamIyMXdiM05wZEdsdmJpQjNhR2xqYUNCdFlXdGxjMXh5WEc0Z0lDQWdJQ29nYVhRZ2MzVnBkR0ZpYkdVZ1ptOXlJR0Z1YVcxaGRHbHZibk1nS0dsdUlIQmhjblJwWTNWc1lYSWdkMmhsY21VZ2NtOTBZWFJwYjI0Z2RHRnJaWE5jY2x4dUlDQWdJQ0FxSUhCc1lXTmxjeWt1WEhKY2JpQWdJQ0FnS2x4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0TllYUnlhWGg5SUcweUlDMGdkR2hsSUcxaGRISnBlQ0IwYnlCcGJuUmxjbkJ2YkdGMFpTQjNhWFJvTGx4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUhRZ0xTQnBiblJsY25CdmJHRjBhVzl1SUZzd0xqQXNJREV1TUYxY2NseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1EyRnVkbUZ6VW1WdVpHVnlhVzVuUTI5dWRHVjRkREpFZlNCYlkyOXVkR1Y0ZEYwZ0xTQnZjSFJwYjI1aGJDQmpiMjUwWlhoMElIUnZJR0ZtWm1WamRGeHlYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdlMDFoZEhKcGVIMGdMU0J1WlhjZ2FXNXpkR0Z1WTJVZ2QybDBhQ0IwYUdVZ2FXNTBaWEp3YjJ4aGRHVmtJSEpsYzNWc2RGeHlYRzRnSUNBZ0lDb3ZYSEpjYmlBZ0lDQnBiblJsY25CdmJHRjBaVUZ1YVcwNklHWjFibU4wYVc5dUlDaHRNaXdnZEN3Z1kyOXVkR1Y0ZENrZ2UxeHlYRzVjY2x4dUlDQWdJQ0FnSUNCMllYSWdiV1VnUFNCMGFHbHpMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRJRDBnWTI5dWRHVjRkQ0EvSUc1bGR5Qk5ZWFJ5YVhnb1kyOXVkR1Y0ZENrZ09pQnVaWGNnVFdGMGNtbDRLQ2tzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1F4SUQwZ2JXVXVaR1ZqYjIxd2IzTmxLQ2tzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1F5SUQwZ2JUSXVaR1ZqYjIxd2IzTmxLQ2tzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEp2ZEdGMGFXOXVJRDBnWkRFdWNtOTBZWFJwYjI0Z0t5QW9aREl1Y205MFlYUnBiMjRnTFNCa01TNXliM1JoZEdsdmJpa2dLaUIwTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwY21GdWMyeGhkR1ZZSUQwZ1pERXVkSEpoYm5Oc1lYUmxMbmdnS3lBb1pESXVkSEpoYm5Oc1lYUmxMbmdnTFNCa01TNTBjbUZ1YzJ4aGRHVXVlQ2tnS2lCMExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGNtRnVjMnhoZEdWWklEMGdaREV1ZEhKaGJuTnNZWFJsTG5rZ0t5QW9aREl1ZEhKaGJuTnNZWFJsTG5rZ0xTQmtNUzUwY21GdWMyeGhkR1V1ZVNrZ0tpQjBMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpZMkZzWlZnZ1BTQmtNUzV6WTJGc1pTNTRJQ3NnS0dReUxuTmpZV3hsTG5nZ0xTQmtNUzV6WTJGc1pTNTRLU0FxSUhRc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhOallXeGxXU0E5SUdReExuTmpZV3hsTG5rZ0t5QW9aREl1YzJOaGJHVXVlU0F0SUdReExuTmpZV3hsTG5rcElDb2dkRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHMHVkSEpoYm5Oc1lYUmxLSFJ5WVc1emJHRjBaVmdzSUhSeVlXNXpiR0YwWlZrcE8xeHlYRzRnSUNBZ0lDQWdJRzB1Y205MFlYUmxLSEp2ZEdGMGFXOXVLVHRjY2x4dUlDQWdJQ0FnSUNCdExuTmpZV3hsS0hOallXeGxXQ3dnYzJOaGJHVlpLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHMHVYM2dvS1R0Y2NseHVJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lCRVpXTnZiWEJ2YzJVZ2RHaGxJR04xY25KbGJuUWdiV0YwY21sNElHbHVkRzhnYzJsdGNHeGxJSFJ5WVc1elptOXliWE1nZFhOcGJtY2daV2wwYUdWeVhISmNiaUFnSUNBZ0tpQlJVaUFvWkdWbVlYVnNkQ2tnYjNJZ1RGVWdaR1ZqYjIxd2IzTnBkR2x2Ymk0Z1EyOWtaU0JoWkdGd2RHVmtJR1p5YjIxY2NseHVJQ0FnSUNBcUlHaDBkSEE2THk5M2QzY3ViV0YwYUhNdGFXNW1iM0p0WVhScGNYVmxMV3BsZFhndVkyOXRMMkpzYjJjdlpuSmxaR1Z5YVdNdlAzQnZjM1F2TWpBeE15OHhNaTh3TVM5RVpXTnZiWEJ2YzJsMGFXOXVMVzltTFRKRUxYUnlZVzV6Wm05eWJTMXRZWFJ5YVdObGMxeHlYRzRnSUNBZ0lDcGNjbHh1SUNBZ0lDQXFJRlJvWlNCeVpYTjFiSFFnYlhWemRDQmlaU0JoY0hCc2FXVmtJR2x1SUhSb1pTQm1iMnhzYjNkcGJtY2diM0prWlhJZ2RHOGdjbVZ3Y205a2RXTmxJSFJvWlNCamRYSnlaVzUwSUcxaGRISnBlRHBjY2x4dUlDQWdJQ0FxWEhKY2JpQWdJQ0FnS2lBZ0lDQWdVVkk2SUhSeVlXNXpiR0YwWlNBdFBpQnliM1JoZEdVZ0xUNGdjMk5oYkdVZ0xUNGdjMnRsZDFoY2NseHVJQ0FnSUNBcUlDQWdJQ0JNVlRvZ2RISmhibk5zWVhSbElDMCtJSE5yWlhkWklDQXRQaUJ6WTJGc1pTQXRQaUJ6YTJWM1dGeHlYRzRnSUNBZ0lDcGNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdZbTl2YkdWaGJuMGdXM1Z6WlV4VlBXWmhiSE5sWFNBdElITmxkQ0IwYnlCMGNuVmxJSFJ2SUhWelpTQk1WU0J5WVhSb1pYSWdkR2hoYmlCUlVpQmhiR2R2Y21sMGFHMWNjbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJSHNxZlNBdElHRnVJRzlpYW1WamRDQmpiMjUwWVdsdWFXNW5JR04xY25KbGJuUWdaR1ZqYjIxd2IzTmxaQ0IyWVd4MVpYTWdLSEp2ZEdGMFpTd2djMnRsZHl3Z2MyTmhiR1VzSUhSeVlXNXpiR0YwWlNsY2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ1pHVmpiMjF3YjNObE9pQm1kVzVqZEdsdmJpQW9kWE5sVEZVcElIdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJRzFsSUQwZ2RHaHBjeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZU0E5SUcxbExtRXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHSWdQU0J0WlM1aUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaklEMGdiV1V1WXl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWkNBOUlHMWxMbVFzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR0ZqYjNNZ1BTQk5ZWFJvTG1GamIzTXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHRjBZVzRnUFNCTllYUm9MbUYwWVc0c1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhOeGNuUWdQU0JOWVhSb0xuTnhjblFzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEJwSUQwZ1RXRjBhQzVRU1N4Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnlZVzV6YkdGMFpTQTlJSHQ0T2lCdFpTNWxMQ0I1T2lCdFpTNW1mU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbTkwWVhScGIyNGdQU0F3TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6WTJGc1pTQTlJSHQ0T2lBeExDQjVPaUF4ZlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYzJ0bGR5QTlJSHQ0T2lBd0xDQjVPaUF3ZlN4Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxkR1Z5YlNBOUlHRWdLaUJrSUMwZ1lpQXFJR003WEhRdkx5QmtaWFJsY20xcGJtRnVkQ2dwTENCemEybHdJRVJTV1NCb1pYSmxMaTR1WEhKY2JseHlYRzRnSUNBZ0lDQWdJR2xtSUNoMWMyVk1WU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1lTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJ0bGR5QTlJSHQ0T2lCaGRHRnVLR01nTHlCaEtTd2dlVG9nWVhSaGJpaGlJQzhnWVNsOU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMk5oYkdVZ1BTQjdlRG9nWVN3Z2VUb2daR1YwWlhKdElDOGdZWDA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCcFppQW9ZaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtOTBZWFJwYjI0Z1BTQndhU0FxSURBdU5UdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5qWVd4bElEMGdlM2c2SUdJc0lIazZJR1JsZEdWeWJTQXZJR0o5TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MydGxkeTU0SUQwZ1lYUmhiaWhrSUM4Z1lpazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0I3SUM4dklHRWdQU0JpSUQwZ01GeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMk5oYkdVZ1BTQjdlRG9nWXl3Z2VUb2daSDA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemEyVjNMbmdnUFNCd2FTQXFJREF1TWpVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRUZ3Y0d4NUlIUm9aU0JSVWkxc2FXdGxJR1JsWTI5dGNHOXphWFJwYjI0dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGhJSHg4SUdJcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCeUlEMGdjM0Z5ZENoaElDb2dZU0FySUdJZ0tpQmlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKdmRHRjBhVzl1SUQwZ1lpQStJREFnUHlCaFkyOXpLR0VnTHlCeUtTQTZJQzFoWTI5ektHRWdMeUJ5S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmpZV3hsSUQwZ2UzZzZJSElzSUhrNklHUmxkR1Z5YlNBdklISjlPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJ0bGR5NTRJRDBnWVhSaGJpZ29ZU0FxSUdNZ0t5QmlJQ29nWkNrZ0x5QW9jaUFxSUhJcEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNoaklIeDhJR1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ6SUQwZ2MzRnlkQ2hqSUNvZ1l5QXJJR1FnS2lCa0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEp2ZEdGMGFXOXVJRDBnY0drZ0tpQXdMalVnTFNBb1pDQStJREFnUHlCaFkyOXpLQzFqSUM4Z2N5a2dPaUF0WVdOdmN5aGpJQzhnY3lrcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMk5oYkdVZ1BTQjdlRG9nWkdWMFpYSnRJQzhnY3l3Z2VUb2djMzA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemEyVjNMbmtnUFNCaGRHRnVLQ2hoSUNvZ1l5QXJJR0lnS2lCa0tTQXZJQ2h6SUNvZ2N5a3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZXlBdkx5QmhJRDBnWWlBOUlHTWdQU0JrSUQwZ01GeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMk5oYkdVZ1BTQjdlRG9nTUN3Z2VUb2dNSDA3WEhSY2RDOHZJRDBnYVc1MllXeHBaQ0J0WVhSeWFYaGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2MyTmhiR1U2SUhOallXeGxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBjbUZ1YzJ4aGRHVTZJSFJ5WVc1emJHRjBaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbTkwWVhScGIyNDZJSEp2ZEdGMGFXOXVMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnphMlYzT2lCemEyVjNYSEpjYmlBZ0lDQWdJQ0FnZlR0Y2NseHVJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lCU1pYUjFjbTV6SUhSb1pTQmtaWFJsY20xcGJtRnVkQ0J2WmlCMGFHVWdZM1Z5Y21WdWRDQnRZWFJ5YVhndVhISmNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QjdiblZ0WW1WeWZWeHlYRzRnSUNBZ0lDb3ZYSEpjYmlBZ0lDQmtaWFJsY20xcGJtRnVkRG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1FZ0tpQjBhR2x6TG1RZ0xTQjBhR2x6TG1JZ0tpQjBhR2x6TG1NN1hISmNiaUFnSUNCOUxGeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ1FYQndiSGtnWTNWeWNtVnVkQ0J0WVhSeWFYZ2dkRzhnZUNCaGJtUWdlU0J3YjJsdWRDNWNjbHh1SUNBZ0lDQXFJRkpsZEhWeWJuTWdZU0J3YjJsdWRDQnZZbXBsWTNRdVhISmNiaUFnSUNBZ0tseHlYRzRnSUNBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlIZ2dMU0IyWVd4MVpTQm1iM0lnZUZ4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUhrZ0xTQjJZV3gxWlNCbWIzSWdlVnh5WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nZTN0NE9pQnVkVzFpWlhJc0lIazZJRzUxYldKbGNuMTlJRUVnYm1WM0lIUnlZVzV6Wm05eWJXVmtJSEJ2YVc1MElHOWlhbVZqZEZ4eVhHNGdJQ0FnSUNvdlhISmNiaUFnSUNCaGNIQnNlVlJ2VUc5cGJuUTZJR1oxYm1OMGFXOXVJQ2g0TENCNUtTQjdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ0WlNBOUlIUm9hWE03WEhKY2JseHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIZzZJSGdnS2lCdFpTNWhJQ3NnZVNBcUlHMWxMbU1nS3lCdFpTNWxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjVPaUI0SUNvZ2JXVXVZaUFySUhrZ0tpQnRaUzVrSUNzZ2JXVXVabHh5WEc0Z0lDQWdJQ0FnSUgwN1hISmNiaUFnSUNCOUxGeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ1FYQndiSGtnWTNWeWNtVnVkQ0J0WVhSeWFYZ2dkRzhnWVhKeVlYa2dkMmwwYUNCd2IybHVkQ0J2WW1wbFkzUnpJRzl5SUhCdmFXNTBJSEJoYVhKekxseHlYRzRnSUNBZ0lDb2dVbVYwZFhKdWN5QmhJRzVsZHlCaGNuSmhlU0IzYVhSb0lIQnZhVzUwY3lCcGJpQjBhR1VnYzJGdFpTQm1iM0p0WVhRZ1lYTWdkR2hsSUdsdWNIVjBJR0Z5Y21GNUxseHlYRzRnSUNBZ0lDcGNjbHh1SUNBZ0lDQXFJRUVnY0c5cGJuUWdiMkpxWldOMElHbHpJR0Z1SUc5aWFtVmpkQ0JzYVhSbGNtRnNPbHh5WEc0Z0lDQWdJQ3BjY2x4dUlDQWdJQ0FxSUh0NE9pQjRMQ0I1T2lCNWZWeHlYRzRnSUNBZ0lDcGNjbHh1SUNBZ0lDQXFJSE52SUdGdUlHRnljbUY1SUhkdmRXeGtJR052Ym5SaGFXNGdaV2wwYUdWeU9seHlYRzRnSUNBZ0lDcGNjbHh1SUNBZ0lDQXFJRnQ3ZURvZ2VERXNJSGs2SUhreGZTd2dlM2c2SUhneUxDQjVPaUI1TW4wc0lDNHVMaUI3ZURvZ2VHNHNJSGs2SUhsdWZWMWNjbHh1SUNBZ0lDQXFYSEpjYmlBZ0lDQWdLaUJ2Y2x4eVhHNGdJQ0FnSUNvZ1czZ3hMQ0I1TVN3Z2VESXNJSGt5TENBdUxpNGdlRzRzSUhsdVhWeHlYRzRnSUNBZ0lDcGNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdRWEp5WVhsOUlIQnZhVzUwY3lBdElHRnljbUY1SUhkcGRHZ2djRzlwYm5RZ2IySnFaV04wY3lCdmNpQndZV2x5YzF4eVhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ2UwRnljbUY1ZlNCQklHNWxkeUJoY25KaGVTQjNhWFJvSUhSeVlXNXpabTl5YldWa0lIQnZhVzUwYzF4eVhHNGdJQ0FnSUNvdlhISmNiaUFnSUNCaGNIQnNlVlJ2UVhKeVlYazZJR1oxYm1OMGFXOXVJQ2h3YjJsdWRITXBJSHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdkbUZ5SUdrZ1BTQXdMQ0J3TENCc0xGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCdGVGQnZhVzUwY3lBOUlGdGRPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSEJ2YVc1MGMxc3dYU0E5UFQwZ0oyNTFiV0psY2ljcElIdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR3dnUFNCd2IybHVkSE11YkdWdVozUm9PMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZDJocGJHVWdLR2tnUENCc0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3SUQwZ2RHaHBjeTVoY0hCc2VWUnZVRzlwYm5Rb2NHOXBiblJ6VzJrcksxMHNJSEJ2YVc1MGMxdHBLeXRkS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMTRVRzlwYm5SekxuQjFjMmdvY0M1NExDQndMbmtwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLRHNnY0NBOUlIQnZhVzUwYzF0cFhUc2dhU3NyS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRlRkJ2YVc1MGN5NXdkWE5vS0hSb2FYTXVZWEJ3YkhsVWIxQnZhVzUwS0hBdWVDd2djQzU1S1NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdGVGQnZhVzUwY3p0Y2NseHVJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lCQmNIQnNlU0JqZFhKeVpXNTBJRzFoZEhKcGVDQjBieUJoSUhSNWNHVmtJR0Z5Y21GNUlIZHBkR2dnY0c5cGJuUWdjR0ZwY25NdUlFRnNkR2h2ZFdkb1hISmNiaUFnSUNBZ0tpQjBhR1VnYVc1d2RYUWdZWEp5WVhrZ2JXRjVJR0psSUdGdUlHOXlaR2x1WVhKNUlHRnljbUY1TENCMGFHbHpJRzFsZEdodlpDQnBjeUJwYm5SbGJtUmxaRnh5WEc0Z0lDQWdJQ29nWm05eUlHMXZjbVVnY0dWeVptOXliV0Z1ZENCMWMyVWdkMmhsY21VZ2RIbHdaV1FnWVhKeVlYbHpJR0Z5WlNCMWMyVmtMaUJVYUdVZ2NtVjBkWEp1WldSY2NseHVJQ0FnSUNBcUlHRnljbUY1SUdseklISmxaMkZ5Wkd4bGMzTWdZV3gzWVhseklISmxkSFZ5Ym1Wa0lHRnpJR0VnUm14dllYUXpNa0Z5Y21GNUxseHlYRzRnSUNBZ0lDcGNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdLbjBnY0c5cGJuUnpJQzBnS0hSNWNHVmtLU0JoY25KaGVTQjNhWFJvSUhCdmFXNTBJSEJoYVhKelhISmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UySnZiMnhsWVc1OUlGdDFjMlUyTkQxbVlXeHpaVjBnTFNCMWMyVWdSbXh2WVhRMk5FRnljbUY1SUdsdWMzUmxZV1FnYjJZZ1JteHZZWFF6TWtGeWNtRjVYSEpjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUI3S24wZ1FTQnVaWGNnZEhsd1pXUWdZWEp5WVhrZ2QybDBhQ0IwY21GdWMyWnZjbTFsWkNCd2IybHVkSE5jY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnWVhCd2JIbFViMVI1Y0dWa1FYSnlZWGs2SUdaMWJtTjBhVzl1SUNod2IybHVkSE1zSUhWelpUWTBLU0I3WEhKY2JseHlYRzRnSUNBZ0lDQWdJSFpoY2lCcElEMGdNQ3dnY0N4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYkNBOUlIQnZhVzUwY3k1c1pXNW5kR2dzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzE0VUc5cGJuUnpJRDBnZFhObE5qUWdQeUJ1WlhjZ1JteHZZWFEyTkVGeWNtRjVLR3dwSURvZ2JtVjNJRVpzYjJGME16SkJjbkpoZVNoc0tUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2QyaHBiR1VnS0drZ1BDQnNLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEFnUFNCMGFHbHpMbUZ3Y0d4NVZHOVFiMmx1ZENod2IybHVkSE5iYVYwc0lIQnZhVzUwYzF0cElDc2dNVjBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J0ZUZCdmFXNTBjMXRwS3l0ZElEMGdjQzU0TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J0ZUZCdmFXNTBjMXRwS3l0ZElEMGdjQzU1TzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUcxNFVHOXBiblJ6TzF4eVhHNGdJQ0FnZlN4Y2NseHVYSEpjYmlBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FxSUVGd2NHeDVJSFJ2SUdGdWVTQmpZVzUyWVhNZ01rUWdZMjl1ZEdWNGRDQnZZbXBsWTNRdUlGUm9hWE1nWkc5bGN5QnViM1FnWVdabVpXTjBJSFJvWlZ4eVhHNGdJQ0FnSUNvZ1kyOXVkR1Y0ZENCMGFHRjBJRzl3ZEdsdmJtRnNiSGtnZDJGeklISmxabVZ5Wlc1alpXUWdhVzRnWTI5dWMzUnlkV04wYjNJZ2RXNXNaWE56SUdsMElHbHpYSEpjYmlBZ0lDQWdLaUIwYUdVZ2MyRnRaU0JqYjI1MFpYaDBMbHh5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHREWVc1MllYTlNaVzVrWlhKcGJtZERiMjUwWlhoME1rUjlJR052Ym5SbGVIUmNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdZWEJ3YkhsVWIwTnZiblJsZUhRNklHWjFibU4wYVc5dUlDaGpiMjUwWlhoMEtTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHMWxJRDBnZEdocGN6dGNjbHh1SUNBZ0lDQWdJQ0JqYjI1MFpYaDBMbk5sZEZSeVlXNXpabTl5YlNodFpTNWhMQ0J0WlM1aUxDQnRaUzVqTENCdFpTNWtMQ0J0WlM1bExDQnRaUzVtS1R0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JXVTdYSEpjYmlBZ0lDQjlMRnh5WEc1Y2NseHVJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDb2dVbVYwZFhKdWN5QjBjblZsSUdsbUlHMWhkSEpwZUNCcGN5QmhiaUJwWkdWdWRHbDBlU0J0WVhSeWFYZ2dLRzV2SUhSeVlXNXpabTl5YlhNZ1lYQndiR2xsWkNrdVhISmNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QjdZbTl2YkdWaGJuMGdWSEoxWlNCcFppQnBaR1Z1ZEdsMGVTQW9ibTkwSUhSeVlXNXpabTl5YldWa0tWeHlYRzRnSUNBZ0lDb3ZYSEpjYmlBZ0lDQnBjMGxrWlc1MGFYUjVPaUJtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUcxbElEMGdkR2hwY3p0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0tHMWxMbDl4S0cxbExtRXNJREVwSUNZbVhISmNiaUFnSUNBZ0lDQWdiV1V1WDNFb2JXVXVZaXdnTUNrZ0ppWmNjbHh1SUNBZ0lDQWdJQ0J0WlM1ZmNTaHRaUzVqTENBd0tTQW1KbHh5WEc0Z0lDQWdJQ0FnSUcxbExsOXhLRzFsTG1Rc0lERXBJQ1ltWEhKY2JpQWdJQ0FnSUNBZ2JXVXVYM0VvYldVdVpTd2dNQ2tnSmlaY2NseHVJQ0FnSUNBZ0lDQnRaUzVmY1NodFpTNW1MQ0F3S1NrN1hISmNiaUFnSUNCOUxGeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ1VtVjBkWEp1Y3lCMGNuVmxJR2xtSUcxaGRISnBlQ0JwY3lCcGJuWmxjblJwWW14bFhISmNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QjdZbTl2YkdWaGJuMWNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdhWE5KYm5abGNuUnBZbXhsT2lCbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJQ0YwYUdsekxsOXhLSFJvYVhNdVpHVjBaWEp0YVc1aGJuUW9LU3dnTUNsY2NseHVJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lCVVpYTjBJR2xtSUcxaGRISnBlQ0JwY3lCMllXeHBaQzVjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnYVhOV1lXeHBaRG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQWhkR2hwY3k1ZmNTaDBhR2x6TG1FZ0tpQjBhR2x6TG1Rc0lEQXBPMXh5WEc0Z0lDQWdmU3hjY2x4dVhISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDQXFJRU5zYjI1bGN5QmpkWEp5Wlc1MElHbHVjM1JoYm1ObElHRnVaQ0J5WlhSMWNtNXBibWNnWVNCdVpYY2diV0YwY21sNExseHlYRzRnSUNBZ0lDb2dRSEJoY21GdElIdGliMjlzWldGdWZTQmJibTlEYjI1MFpYaDBQV1poYkhObFhTQmtiMjRuZENCamJHOXVaU0JqYjI1MFpYaDBJSEpsWm1WeVpXNWpaU0JwWmlCMGNuVmxYSEpjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUI3VFdGMGNtbDRmVnh5WEc0Z0lDQWdJQ292WEhKY2JpQWdJQ0JqYkc5dVpUb2dablZ1WTNScGIyNGdLRzV2UTI5dWRHVjRkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ0WlNBOUlIUm9hWE1zWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzBnUFNCdVpYY2dUV0YwY21sNEtDazdYSEpjYmlBZ0lDQWdJQ0FnYlM1aElEMGdiV1V1WVR0Y2NseHVJQ0FnSUNBZ0lDQnRMbUlnUFNCdFpTNWlPMXh5WEc0Z0lDQWdJQ0FnSUcwdVl5QTlJRzFsTG1NN1hISmNiaUFnSUNBZ0lDQWdiUzVrSUQwZ2JXVXVaRHRjY2x4dUlDQWdJQ0FnSUNCdExtVWdQU0J0WlM1bE8xeHlYRzRnSUNBZ0lDQWdJRzB1WmlBOUlHMWxMbVk3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLQ0Z1YjBOdmJuUmxlSFFwSUcwdVkyOXVkR1Y0ZENBOUlHMWxMbU52Ym5SbGVIUTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdE8xeHlYRzRnSUNBZ2ZTeGNjbHh1WEhKY2JpQWdJQ0F2S2lwY2NseHVJQ0FnSUNBcUlFTnZiWEJoY21WeklHTjFjbkpsYm5RZ2JXRjBjbWw0SUhkcGRHZ2dZVzV2ZEdobGNpQnRZWFJ5YVhndUlGSmxkSFZ5Ym5NZ2RISjFaU0JwWmlCbGNYVmhiRnh5WEc0Z0lDQWdJQ29nS0hkcGRHaHBiaUJsY0hOcGJHOXVJSFJ2YkdWeVlXNWpaU2t1WEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTAxaGRISnBlSDBnYlNBdElHMWhkSEpwZUNCMGJ5QmpiMjF3WVhKbElIUm9hWE1nYldGMGNtbDRJSGRwZEdoY2NseHVJQ0FnSUNBcUlFQnlaWFIxY201eklIdGliMjlzWldGdWZWeHlYRzRnSUNBZ0lDb3ZYSEpjYmlBZ0lDQnBjMFZ4ZFdGc09pQm1kVzVqZEdsdmJpQW9iU2tnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2JXVWdQU0IwYUdsekxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeElEMGdiV1V1WDNFN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFvY1NodFpTNWhMQ0J0TG1FcElDWW1YSEpjYmlBZ0lDQWdJQ0FnY1NodFpTNWlMQ0J0TG1JcElDWW1YSEpjYmlBZ0lDQWdJQ0FnY1NodFpTNWpMQ0J0TG1NcElDWW1YSEpjYmlBZ0lDQWdJQ0FnY1NodFpTNWtMQ0J0TG1RcElDWW1YSEpjYmlBZ0lDQWdJQ0FnY1NodFpTNWxMQ0J0TG1VcElDWW1YSEpjYmlBZ0lDQWdJQ0FnY1NodFpTNW1MQ0J0TG1ZcEtUdGNjbHh1SUNBZ0lIMHNYSEpjYmx4eVhHNGdJQ0FnTHlvcVhISmNiaUFnSUNBZ0tpQlNaWFIxY201eklHRnVJR0Z5Y21GNUlIZHBkR2dnWTNWeWNtVnVkQ0J0WVhSeWFYZ2dkbUZzZFdWekxseHlYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdlMEZ5Y21GNWZWeHlYRzRnSUNBZ0lDb3ZYSEpjYmlBZ0lDQjBiMEZ5Y21GNU9pQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJRzFsSUQwZ2RHaHBjenRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVzIxbExtRXNJRzFsTG1Jc0lHMWxMbU1zSUcxbExtUXNJRzFsTG1Vc0lHMWxMbVpkTzF4eVhHNGdJQ0FnZlN4Y2NseHVYSEpjYmlBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FxSUVkbGJtVnlZWFJsY3lCaElHMWhkSEpwZUNncElITjBjbWx1WnlCMGFHRjBJR05oYmlCaVpTQjFjMlZrSUhkcGRHZ2dRMU5USUhSeVlXNXpabTl5YlM1Y2NseHVJQ0FnSUNBcUlFQnlaWFIxY201eklIdHpkSEpwYm1kOVhISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lIUnZRMU5UT2lCbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRndpYldGMGNtbDRLRndpSUNzZ2RHaHBjeTUwYjBGeWNtRjVLQ2tnS3lCY0lpbGNJanRjY2x4dUlDQWdJSDBzWEhKY2JseHlYRzRnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdLaUJIWlc1bGNtRjBaWE1nWVNCdFlYUnlhWGd6WkNncElITjBjbWx1WnlCMGFHRjBJR05oYmlCaVpTQjFjMlZrSUhkcGRHZ2dRMU5USUhSeVlXNXpabTl5YlM1Y2NseHVJQ0FnSUNBcUlFQnlaWFIxY201eklIdHpkSEpwYm1kOVhISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lIUnZRMU5UTTBRNklHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdiV1VnUFNCMGFHbHpPMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJjSW0xaGRISnBlRE5rS0Z3aUlDc2diV1V1WVNBcklGd2lMQ0JjSWlBcklHMWxMbUlnS3lCY0lpd2dNQ3dnTUN3Z1hDSWdLeUJ0WlM1aklDc2dYQ0lzSUZ3aUlDc2diV1V1WkNBcklGd2lMQ0F3TENBd0xDQXdMQ0F3TENBeExDQXdMQ0JjSWlBcklHMWxMbVVnS3lCY0lpd2dYQ0lnS3lCdFpTNW1JQ3NnWENJc0lEQXNJREVwWENJN1hISmNiaUFnSUNCOUxGeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ1VtVjBkWEp1Y3lCaElFcFRUMDRnWTI5dGNHRjBhV0pzWlNCemRISnBibWNnYjJZZ1kzVnljbVZ1ZENCdFlYUnlhWGd1WEhKY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCN2MzUnlhVzVuZlZ4eVhHNGdJQ0FnSUNvdlhISmNiaUFnSUNCMGIwcFRUMDQ2SUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdTbE5QVGk1emRISnBibWRwWm5rb2RHaHBjeTUwYjBGeWNtRjVLQ2twTzF4eVhHNGdJQ0FnZlN4Y2NseHVYSEpjYmlBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FxSUZKbGRIVnlibk1nWVNCemRISnBibWNnZDJsMGFDQmpkWEp5Wlc1MElHMWhkSEpwZUNCaGN5QmpiMjF0WVMxelpYQmhjbUYwWldRZ2JHbHpkQzVjY2x4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUh0emRISnBibWQ5WEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUhSdlUzUnlhVzVuT2lCbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRndpWENJZ0t5QjBhR2x6TG5SdlFYSnlZWGtvS1R0Y2NseHVJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lCRGIyMXdZWEpsY3lCbWJHOWhkR2x1WnlCd2IybHVkQ0IyWVd4MVpYTWdkMmwwYUNCemIyMWxJSFJ2YkdWeVlXNWpaU0FvWlhCemFXeHZiaWxjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0JtTVNBdElHWnNiMkYwSURGY2NseHVJQ0FnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCbU1pQXRJR1pzYjJGMElESmNjbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJSHRpYjI5c1pXRnVmVnh5WEc0Z0lDQWdJQ29nUUhCeWFYWmhkR1ZjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnWDNFNklHWjFibU4wYVc5dUlDaG1NU3dnWmpJcElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdUV0YwYUM1aFluTW9aakVnTFNCbU1pa2dQQ0F4WlMweE5EdGNjbHh1SUNBZ0lIMHNYSEpjYmx4eVhHNGdJQ0FnTHlvcVhISmNiaUFnSUNBZ0tpQkJjSEJzZVNCamRYSnlaVzUwSUdGaWMyOXNkWFJsSUcxaGRISnBlQ0IwYnlCamIyNTBaWGgwSUdsbUlHUmxabWx1WldRc0lIUnZJSE41Ym1NZ2FYUXVYSEpjYmlBZ0lDQWdLaUJBY0hKcGRtRjBaVnh5WEc0Z0lDQWdJQ292WEhKY2JpQWdJQ0JmZURvZ1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnRaU0E5SUhSb2FYTTdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHMWxMbU52Ym5SbGVIUXBYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHMWxMbU52Ym5SbGVIUXVjMlYwVkhKaGJuTm1iM0p0S0cxbExtRXNJRzFsTG1Jc0lHMWxMbU1zSUcxbExtUXNJRzFsTG1Vc0lHMWxMbVlwTzF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdFpUdGNjbHh1SUNBZ0lIMWNjbHh1ZlR0Y2NseHVYSEpjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRTFoZEhKcGVEdGNibHh1WEc0dktpb2dWMFZDVUVGRFN5QkdUMDlVUlZJZ0tpcGNiaUFxS2lBdUwzTnZkWEpqWlM5c2FXSXZiV0YwY21sNExtcHpYRzRnS2lvdklsMHNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cIik7XG5cbi8qKiovIH0sXG4vKiAxNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0ZXZhbChcInZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKVsnZGVmYXVsdCddO1xcblxcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XFxuLyoqXFxuICogRGVmaW5lcyB0aGUgZ2xvYmFsIHJvb3QgbGV2ZWwgbmFtZXNwYWNlIGZvciB0aGUgbGlicmFyeS5cXG4gKlxcbiAqIEBtb2R1bGVcXG4gKiBAYXV0aG9yIE1pY2FoIFJvbG9uIDxtaWNhaEBnaW5hc2luay5jb20+XFxuICpcXG4gKiBAcmVxdWlyZXMgZ2FtZVxcbiAqIEByZXF1aXJlcyBtb2R1bGU6cGxheX5wbC51dGlsXFxuICogQHJlcXVpcmVzIHR5cGVzL0Jhc2ljXFxuICogQHJlcXVpcmVzIHR5cGVzL0RpbWVuc2lvbnNcXG4gKi9cXG5cXG52YXIgX3BsYXlHYW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XFxuXFxudmFyIF9wbGF5R2FtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wbGF5R2FtZSk7XFxuXFxudmFyIF91dGlsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XFxuXFxudmFyIF91dGlsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3V0aWwpO1xcblxcbnZhciBfdHlwZXNCYXNpYyA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xcblxcbnZhciBfdHlwZXNCYXNpYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlc0Jhc2ljKTtcXG5cXG52YXIgX3R5cGVzUXVldWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3KTtcXG5cXG52YXIgX3R5cGVzUXVldWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZXNRdWV1ZSk7XFxuXFxudmFyIF90eXBlc0RpbWVuc2lvbnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xcblxcbi8qKlxcbiAqIEdsb2JhbHkgYWNjZXNhYmxlLCByb290IGxldmVsIG5hbWVzcGFjZSBmb3IgdGhlIGxpYnJhcnkuXFxuICogQG5hbWVzcGFjZVxcbiAqIEBwcm9wIHtvYmplY3R9IEVWRU5UIC0gTmFtZXNwYWNlIGZvciBub3JhbGl6ZWQgZXZlbnQgbmFtZSBjb25zdGFudHMuXFxuICogQHByb3Age0Jhc2ljfSBCYXNpYyAtIEJhc2Ugb2JqZWN0IHR5cGUuXFxuICogQHByb3Age1BvaW50fSBQb2ludCAtIE9iamVjdCB0eXBlIHdoaWNoIGhvbGRzIHZhbHVlcyBvbiBhIDJEIGNhcnRlc2lhbiBwbGFuZS5cXG4gKiBAcHJvcCB7U2l6ZX0gU2l6ZSAtIE9iamVjdCB0eXBlIHdoaWNoIGhvbGRzIDItZGltZW50aW9uYWwgdmFsdWVzIGZvciBzaXplLlxcbiAqIEBwcm9wIHtmdW5jdGlvbn0gZ2FtZSAtIFJlZ2lzdGVycyBhIGdhbWUgdmlldyBpbXBsZW1lbnRhdGlvbi4gQWxzbyBhIG5hbWVzcGFjZSBmb3Igb3RoZXIgbWV0aG9kcy5cXG4gKiBAcHJvcCB7b2JqZWN0fSB1dGlsIC0gTmFtZXNwYWNlIGZvciB1dGlsaXR5IGZ1bmN0aW9ucy5cXG4gKi9cXG52YXIgcGwgPSB7XFxuICBCYXNpYzogX3R5cGVzQmFzaWMyWydkZWZhdWx0J10sIFBvaW50OiBfdHlwZXNEaW1lbnNpb25zLlBvaW50LCBTaXplOiBfdHlwZXNEaW1lbnNpb25zLlNpemUsIFF1ZXVlOiBfdHlwZXNRdWV1ZTJbJ2RlZmF1bHQnXSxcXG4gIGdhbWU6IF9wbGF5R2FtZTJbJ2RlZmF1bHQnXSxcXG4gIHV0aWw6IF91dGlsMlsnZGVmYXVsdCddLFxcblxcbiAgLyoqXFxuICAgKiBAbmFtZXNwYWNlXFxuICAgKiBAcHJvcCB7c3RyaW5nfSBDTElDSyAtIFRoZSBkZXZpY2Ugbm9ybWFsaXplZCBjbGljayBldmVudCBuYW1lLlxcbiAgICovXFxuICBFVkVOVDoge1xcbiAgICAvLyBUT0RPOiBGaW5kIGEgYmV0dGVyIHdheSB0byB0ZXN0IGZvciB0b3VjaCBlbmFibGVkIGRldmljZXMuXFxuICAgIENMSUNLOiAvaXBhZHxpcGhvbmV8YW5kcm9pZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgPyAndG91Y2hlbmQnIDogJ2NsaWNrJ1xcbiAgfVxcbn07XFxuXFxuZXhwb3J0c1snZGVmYXVsdCddID0gcGw7XFxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Ly9AIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTl6YjNWeVkyVXZjR3hoZVM1cWN6ODJaV1V5SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPenM3T3pzN096dHZRMEZYYVVJc1JVRkJWenM3T3p0blEwRkRXQ3hGUVVGTk96czdPM05EUVVOTUxFVkJRV0U3T3pzN2MwTkJRMklzUlVGQllUczdPenN5UTBGRFNDeERRVUZyUWpzN096czdPenM3T3pzN08wRkJXVGxETEVsQlFVa3NSVUZCUlN4SFFVRkhPMEZCUTFJc1QwRkJTeXd5UWtGQlJTeExRVUZMTERCQ1FVRkZMRWxCUVVrc2VVSkJRVVVzUzBGQlN6dEJRVU42UWl4TlFVRkpPMEZCUTBvc1RVRkJTVHM3T3pzN08wRkJUVW9zVDBGQlN5eEZRVUZGT3p0QlFVVk9MRk5CUVVzc1JVRkJSeXh6UWtGQmMwSXNRMEZCUlN4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEZWQlFWVXNSMEZCUnl4UFFVRlBPMGRCUTJoR08wTkJRMFFzUTBGQlF6czdjVUpCUldFc1JVRkJSU0lzSW1acGJHVWlPaUl4TlM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dSR1ZtYVc1bGN5QjBhR1VnWjJ4dlltRnNJSEp2YjNRZ2JHVjJaV3dnYm1GdFpYTndZV05sSUdadmNpQjBhR1VnYkdsaWNtRnllUzVjYmlBcVhHNGdLaUJBYlc5a2RXeGxYRzRnS2lCQVlYVjBhRzl5SUUxcFkyRm9JRkp2Ykc5dUlEeHRhV05oYUVCbmFXNWhjMmx1YXk1amIyMCtYRzRnS2x4dUlDb2dRSEpsY1hWcGNtVnpJR2RoYldWY2JpQXFJRUJ5WlhGMWFYSmxjeUJ0YjJSMWJHVTZjR3hoZVg1d2JDNTFkR2xzWEc0Z0tpQkFjbVZ4ZFdseVpYTWdkSGx3WlhNdlFtRnphV05jYmlBcUlFQnlaWEYxYVhKbGN5QjBlWEJsY3k5RWFXMWxibk5wYjI1elhHNGdLaTljYm1sdGNHOXlkQ0JuWVcxbElHWnliMjBnSjNCc1lYa3VaMkZ0WlNjN1hHNXBiWEJ2Y25RZ2RYUnBiQ0JtY205dElDZDFkR2xzSnp0Y2JtbHRjRzl5ZENCQ1lYTnBZeUJtY205dElDZDBlWEJsY3k5Q1lYTnBZeWM3WEc1cGJYQnZjblFnVVhWbGRXVWdabkp2YlNBbmRIbHdaWE12VVhWbGRXVW5PMXh1YVcxd2IzSjBJSHNnVUc5cGJuUXNJRk5wZW1VZ2ZTQm1jbTl0SUNkMGVYQmxjeTlFYVcxbGJuTnBiMjV6Snp0Y2JseHVMeW9xWEc0Z0tpQkhiRzlpWVd4NUlHRmpZMlZ6WVdKc1pTd2djbTl2ZENCc1pYWmxiQ0J1WVcxbGMzQmhZMlVnWm05eUlIUm9aU0JzYVdKeVlYSjVMbHh1SUNvZ1FHNWhiV1Z6Y0dGalpWeHVJQ29nUUhCeWIzQWdlMjlpYW1WamRIMGdSVlpGVGxRZ0xTQk9ZVzFsYzNCaFkyVWdabTl5SUc1dmNtRnNhWHBsWkNCbGRtVnVkQ0J1WVcxbElHTnZibk4wWVc1MGN5NWNiaUFxSUVCd2NtOXdJSHRDWVhOcFkzMGdRbUZ6YVdNZ0xTQkNZWE5sSUc5aWFtVmpkQ0IwZVhCbExseHVJQ29nUUhCeWIzQWdlMUJ2YVc1MGZTQlFiMmx1ZENBdElFOWlhbVZqZENCMGVYQmxJSGRvYVdOb0lHaHZiR1J6SUhaaGJIVmxjeUJ2YmlCaElESkVJR05oY25SbGMybGhiaUJ3YkdGdVpTNWNiaUFxSUVCd2NtOXdJSHRUYVhwbGZTQlRhWHBsSUMwZ1QySnFaV04wSUhSNWNHVWdkMmhwWTJnZ2FHOXNaSE1nTWkxa2FXMWxiblJwYjI1aGJDQjJZV3gxWlhNZ1ptOXlJSE5wZW1VdVhHNGdLaUJBY0hKdmNDQjdablZ1WTNScGIyNTlJR2RoYldVZ0xTQlNaV2RwYzNSbGNuTWdZU0JuWVcxbElIWnBaWGNnYVcxd2JHVnRaVzUwWVhScGIyNHVJRUZzYzI4Z1lTQnVZVzFsYzNCaFkyVWdabTl5SUc5MGFHVnlJRzFsZEdodlpITXVYRzRnS2lCQWNISnZjQ0I3YjJKcVpXTjBmU0IxZEdsc0lDMGdUbUZ0WlhOd1lXTmxJR1p2Y2lCMWRHbHNhWFI1SUdaMWJtTjBhVzl1Y3k1Y2JpQXFMMXh1ZG1GeUlIQnNJRDBnZTF4dVhIUkNZWE5wWXl3Z1VHOXBiblFzSUZOcGVtVXNJRkYxWlhWbExGeHVYSFJuWVcxbExGeHVYSFIxZEdsc0xGeHVYSFJjYmx4MEx5b3FYRzVjZENBcUlFQnVZVzFsYzNCaFkyVmNibHgwSUNvZ1FIQnliM0FnZTNOMGNtbHVaMzBnUTB4SlEwc2dMU0JVYUdVZ1pHVjJhV05sSUc1dmNtMWhiR2w2WldRZ1kyeHBZMnNnWlhabGJuUWdibUZ0WlM1Y2JseDBJQ292WEc1Y2RFVldSVTVVT2lCN1hHNWNkRngwTHk4Z1ZFOUVUem9nUm1sdVpDQmhJR0psZEhSbGNpQjNZWGtnZEc4Z2RHVnpkQ0JtYjNJZ2RHOTFZMmdnWlc1aFlteGxaQ0JrWlhacFkyVnpMbHh1WEhSY2RFTk1TVU5MT2lBb0wybHdZV1I4YVhCb2IyNWxmR0Z1WkhKdmFXUXZhU2t1ZEdWemRDaHVZWFpwWjJGMGIzSXVkWE5sY2tGblpXNTBLU0EvSUNkMGIzVmphR1Z1WkNjZ09pQW5ZMnhwWTJzblhHNWNkSDFjYm4wN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElIQnNPMXh1WEc1Y2JseHVMeW9xSUZkRlFsQkJRMHNnUms5UFZFVlNJQ29xWEc0Z0tpb2dMaTl6YjNWeVkyVXZjR3hoZVM1cWMxeHVJQ29xTHlKZExDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVwiKTtcblxuLyoqKi8gfSxcbi8qIDE2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRldmFsKFwidmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpWydkZWZhdWx0J107XFxuXFxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcXG4vKipcXG4gKiBEZWZpbmVzIHRoZSAnZ2FtZScgbWV0aG9kIGZvciByZWdpc3RyYXRpb24gYW5kIGluaXRpYWxpemF0aW9uIG9mIGdhbWUgc2NvcGVzLiBUaGlzIG1ldGhvZCBhbHNvIGFjdHMgYXMgYSBuYW1lc3BhY2UgZm9yIGdhbWUgbGV2ZWwgZnVuY3Rpb25zIChTZWU6IFtwbC5nYW1lXXtAbGluayBtb2R1bGU6cGxheX5wbC5nYW1lfSkuXFxuICpcXG4gKiBAbW9kdWxlIGdhbWVcXG4gKiBAYXV0aG9yIE1pY2FoIFJvbG9uIDxtaWNhaEBnaW5hc2luay5jb20+XFxuICpcXG4gKiBAcmVxdWlyZXMgcGxheS5nYW1lLmNvbXBvbmVudFxcbiAqIEByZXF1aXJlcyBwbGF5LmdhbWUubWFuYWdlclxcbiAqIEByZXF1aXJlcyB1dGlsXFxuICogQHJlcXVpcmVzIHR5cGVzL0V2ZW50c1xcbiAqIEByZXF1aXJlcyB0eXBlcy9HbG9iYWxTY29wZVxcbiAqIEByZXF1aXJlcyB0eXBlcy9FbnRpdHlcXG4gKiBAcmVxdWlyZXMgdHlwZXMvU2NyZWVuXFxuICogQHJlcXVpcmVzIHR5cGVzL0dhbWVcXG4gKi9cXG5cXG52YXIgX3BsYXlHYW1lQ29tcG9uZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XFxuXFxudmFyIF9wbGF5R2FtZUNvbXBvbmVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wbGF5R2FtZUNvbXBvbmVudCk7XFxuXFxudmFyIF9wbGF5R2FtZU1hbmFnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcXG5cXG52YXIgX3BsYXlHYW1lTWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wbGF5R2FtZU1hbmFnZXIpO1xcblxcbnZhciBfdXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xcblxcbnZhciBfdXRpbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91dGlsKTtcXG5cXG52YXIgX3R5cGVzRXZlbnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XFxuXFxudmFyIF90eXBlc0V2ZW50czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlc0V2ZW50cyk7XFxuXFxudmFyIF90eXBlc0dsb2JhbFNjb3BlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XFxuXFxudmFyIF90eXBlc0dsb2JhbFNjb3BlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVzR2xvYmFsU2NvcGUpO1xcblxcbnZhciBfdHlwZXNFbnRpdHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM5KTtcXG5cXG52YXIgX3R5cGVzRW50aXR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVzRW50aXR5KTtcXG5cXG52YXIgX3R5cGVzU2NyZWVuID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MCk7XFxuXFxudmFyIF90eXBlc1NjcmVlbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlc1NjcmVlbik7XFxuXFxudmFyIF90eXBlc0dhbWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKTtcXG5cXG52YXIgX3R5cGVzR2FtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlc0dhbWUpO1xcblxcbnZhciBfcGxhdGZvcm0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQyKTtcXG5cXG52YXIgX3BsYXRmb3JtMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BsYXRmb3JtKTtcXG5cXG52YXIgR0FNRVMsIENPTkZJRywgUkVBRFlfUVVFVUU7XFxuXFxuLyoqXFxuICogRGVmaW5lIGEgZ2FtZSBzY29wZSBmb3IgcmVnaXN0cmF0aW9uIGFuZC9vciBpbml0aWFsaXphdGlvbi5cXG4gKiBUaGlzIG1ldGhvZCBhbHNvIGFjdHMgYXMgYSBuYW1lc3BhY2UgZm9yIGdhbWUgbGV2ZWwgZnVuY3Rpb25zIChTZWU6IFtwbC5nYW1lXXtAbGluayBtb2R1bGU6cGxheX5wbC5nYW1lfSkuXFxuICpcXG4gKiBAYXJnIHtzdHJpbmd9IF9uYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGdhbWUgbWF0Y2hlZCB3aXRoIGEgRE9NIG5vZGVzICdpZCcgYXR0cmlidXRlLlxcbiAqIEBhcmcge2Z1bmN0aW9ufG9iamVjdH0gX2ltcGxlbWVudGF0aW9uIC0gVGhlIGNvbnN0cnVjdG9yIG9yIG9iamVjdCB3aGljaCBpbXBsZW1lbnRzIHRoZSBzY29wZSBiZWhhdmlvci5cXG4gKi9cXG5mdW5jdGlvbiBnYW1lKF9uYW1lLCBfaW1wbGVtZW50YXRpb24pIHtcXG5cXHRpZiAoZ2FtZS5pc0RPTVJlYWR5KSB7XFxuXFx0XFx0aW5pdGlhbGl6ZShfbmFtZSwgX2ltcGxlbWVudGF0aW9uKTtcXG5cXHR9IGVsc2Uge1xcblxcdFxcdHJlZ2lzdGVyKF9uYW1lLCBfaW1wbGVtZW50YXRpb24pO1xcblxcdH1cXG59XFxuXFxuZnVuY3Rpb24gcmVhZHkoX2V2ZW50TmFtZSkge1xcblxcdGlmIChSRUFEWV9RVUVVRS5sZW5ndGgpIHJldHVybiBmYWxzZTtcXG5cXHRnYW1lLnRyaWdnZXIoX2V2ZW50TmFtZSB8fCAncmVhZHknKTtcXG59XFxuXFxuLyoqXFxuICogUmVnaXN0ZXJzIGFuIGltcGxlbWVudGF0aW9uIG9mIGEgZ2FtZSBzY29wZSBmb3IgaW5pdGlhbGl6YXRpb24uXFxuICogQHByb3RlY3RlZFxcbiAqIEBhcmcge3N0cmluZ30gX25hbWUgLSBUaGUgbmFtZSBvZiB0aGUgZ2FtZSBtYXRjaGVkIHdpdGggYSBET00gbm9kZXMgJ2lkJyBhdHRyaWJ1dGUuXFxuICogQGFyZyB7ZnVuY3Rpb258b2JqZWN0fSBfaW1wbGVtZW50YXRpb24gLSBUaGUgY29uc3RydWN0b3Igb3Igb2JqZWN0IHdoaWNoIGltcGxlbWVudHMgdGhlIHNjb3BlIGJlaGF2aW9yLlxcbiAqL1xcbmZ1bmN0aW9uIHJlZ2lzdGVyKF9uYW1lLCBfaW1wbGVtZW50YXRpb24pIHtcXG5cXHRpZiAoISB+R0FNRVMuaW5kZXhPZihfbmFtZSkpIHtcXG5cXHRcXHRHQU1FUy5wdXNoKHtcXG5cXHRcXHRcXHRpZDogX25hbWUsXFxuXFx0XFx0XFx0aW1wbGVtZW50YXRpb246IF9pbXBsZW1lbnRhdGlvblxcblxcdFxcdH0pO1xcblxcdH1cXG59XFxuXFxuLyoqXFxuICogSW5pdGlhbGl6ZXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYSBnYW1lIHNjb3BlLiAob3ZlcmxvYWRlZClcXG4gKiBAZnVuY3Rpb24gaW5pdGlhbGl6ZVxcbiAqIEBwcm90ZWN0ZWRcXG4gKiBAYXJnIHtzdHJpbmd9IF9uYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGdhbWUgbWF0Y2hlZCB3aXRoIGEgRE9NIG5vZGVzICdpZCcgYXR0cmlidXRlLlxcbiAqIEBhcmcge2Z1bmN0aW9ufG9iamVjdH0gX2ltcGxlbWVudGF0aW9uIC0gVGhlIGNvbnN0cnVjdG9yIG9yIG9iamVjdCB3aGljaCBpbXBsZW1lbnRzIHRoZSBzY29wZSBiZWhhdmlvci5cXG4gKi9cXG5cXG4vKipcXG4gKiBJbml0aWFsaXplcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhIGdhbWUgc2NvcGUuXFxuICogQHByb3RlY3RlZFxcbiAqIEBhcmcge2FycmF5fSBfY29sbGVjdGlvbiAtIFRoZSBjb2xsZWN0aW9uIG9mIGdhbWUgc2NvcGUgcmVjb3JkcyBmb3IgaW5pdGlhbGl6YXRpb24uXFxuICogQGFyZyB7ZnVuY3Rpb258b2JqZWN0fSBfaW1wbGVtZW50YXRpb24gLSBUaGUgY29uc3RydWN0b3Igb3Igb2JqZWN0IHdoaWNoIGltcGxlbWVudHMgdGhlIHNjb3BlIGJlaGF2aW9yLlxcbiAqL1xcbmZ1bmN0aW9uIGluaXRpYWxpemUoX25hbWVfY29sbGVjdGlvbiwgX2ltcGxlbWVudGF0aW9uKSB7XFxuXFx0c3dpdGNoICh0eXBlb2YgX25hbWVfY29sbGVjdGlvbikge1xcblxcdFxcdGNhc2UgJ3N0cmluZyc6XFxuXFx0XFx0XFx0X3R5cGVzR2xvYmFsU2NvcGUyWydkZWZhdWx0J11bX25hbWVfY29sbGVjdGlvbl0gPSBfdHlwZXNHYW1lMlsnZGVmYXVsdCddLmV4dGVuZChfaW1wbGVtZW50YXRpb24pLmluaXRpYWxpemUoJyMnICsgX25hbWVfY29sbGVjdGlvbik7XFxuXFx0XFx0XFx0YnJlYWs7XFxuXFxuXFx0XFx0Y2FzZSAnb2JqZWN0JzpcXG5cXHRcXHRcXHRfbmFtZV9jb2xsZWN0aW9uLmZvckVhY2goZnVuY3Rpb24gKF9pdGVtLCBfaW5kZXgpIHtcXG5cXHRcXHRcXHRcXHRpbml0aWFsaXplKF9pdGVtLmlkLCBfaXRlbS5pbXBsZW1lbnRhdGlvbik7XFxuXFx0XFx0XFx0fSk7XFxuXFx0XFx0XFx0YnJlYWs7XFxuXFx0fVxcbn1cXG5cXG4vKiogQHByb3RlY3RlZCAqL1xcbkdBTUVTID0gW107XFxuLyoqIEBwcm90ZWN0ZWQgKi9cXG5DT05GSUcgPSB7fTtcXG4vKiogQHByb3RlY3RlZCAqL1xcblJFQURZX1FVRVVFID0gW107XFxuXFxuLyoqXFxuICogSW50ZXJmYWNlIGZvciBnYW1lIGxldmVsIGNvbmZpZ3VyYXRpb24uXFxuICogQG5hbWVzcGFjZSBnYW1lXFxuICogQG1lbWJlcm9mIG1vZHVsZTpwbGF5fnBsXFxuICogQG1peGVzIEV2ZW50c1xcbiAqL1xcbihmdW5jdGlvbiAoKSB7XFxuXFxuXFx0dGhpcy5jb21wb25lbnQgPSBfcGxheUdhbWVDb21wb25lbnQyWydkZWZhdWx0J107XFxuXFx0dGhpcy5tYW5hZ2VyID0gX3BsYXlHYW1lTWFuYWdlcjJbJ2RlZmF1bHQnXTtcXG5cXG5cXHRfdXRpbDJbJ2RlZmF1bHQnXS5taXhpbihnYW1lLCBfdHlwZXNFdmVudHMyWydkZWZhdWx0J10pO1xcblxcblxcdHRoaXMub24oJ3BsYXRmb3JtLWV2ZW50JywgZnVuY3Rpb24gKF9ldmVudCkge1xcblxcdFxcdGNvbnNvbGUubG9nKCdwbGF5LmdhbWUgLScsIF9ldmVudC5uYW1lLCBfZXZlbnQuZ2FtZURhdGEpO1xcblxcdH0pO1xcblxcblxcdC8qKlxcbiAgKiBTdGFydHMgdGhlIGRvbWlub3MgZmFsbGluZ1xcbiAgKiBAZnVuY3Rpb24gcnVuXFxuICAqIEBtZW1iZXJvZiBtb2R1bGU6cGxheX5wbC5nYW1lXFxuICAqL1xcblxcdHRoaXMucnVuID0gZnVuY3Rpb24gKCkge1xcblxcdFxcdGdhbWUuaXNET01SZWFkeSA9IHRydWU7XFxuXFx0XFx0Z2FtZS50cmlnZ2VyKCdkb20tcmVhZHknKTtcXG5cXG5cXHRcXHRnYW1lLmNvbXBvbmVudC5sb2FkQWxsKGZ1bmN0aW9uICgpIHtcXG5cXHRcXHRcXHQvLyBjb25zb2xlLmxvZygnKiogQWxsIGNvbXBvbmVudCBzb3VyY2VzIGxvYWRlZC4nKTtcXG5cXHRcXHRcXHRpbml0aWFsaXplKEdBTUVTKTtcXG5cXG5cXHRcXHRcXHRHQU1FUyA9IG51bGw7XFxuXFx0XFx0fSk7XFxuXFxuXFx0XFx0X3BsYXRmb3JtMlsnZGVmYXVsdCddLmVtaXQoX3BsYXRmb3JtMlsnZGVmYXVsdCddLkVWRU5UX0lOSVQpO1xcblxcdH07XFxuXFxuXFx0dGhpcy5yZXBvcnQgPSBmdW5jdGlvbiAoX25hbWUpIHtcXG5cXHRcXHRfcGxhdGZvcm0yWydkZWZhdWx0J10uZW1pdChfbmFtZSk7XFxuXFxuXFx0XFx0cmV0dXJuIHRoaXMucmVwb3J0O1xcblxcdH07XFxuXFxuXFx0dGhpcy5yZXBvcnQuZXhpdCA9IGZ1bmN0aW9uIChfZ2FtZVNjb3BlKSB7XFxuXFx0XFx0X3BsYXRmb3JtMlsnZGVmYXVsdCddLnNhdmVHYW1lU3RhdGUoX2dhbWVTY29wZS5wcm9ncmVzcygpKTtcXG5cXHRcXHRfcGxhdGZvcm0yWydkZWZhdWx0J10uZW1pdChfcGxhdGZvcm0yWydkZWZhdWx0J10uRVZFTlRfRVhJVCk7XFxuXFxuXFx0XFx0cmV0dXJuIHRoaXM7XFxuXFx0fTtcXG5cXG5cXHR0aGlzLnJlcG9ydC5mbGlwID0gZnVuY3Rpb24gKF9nYW1lU2NvcGUpIHtcXG5cXHRcXHRfcGxhdGZvcm0yWydkZWZhdWx0J10uc2F2ZUdhbWVTdGF0ZShfZ2FtZVNjb3BlLnByb2dyZXNzKCkpO1xcblxcdFxcdF9wbGF0Zm9ybTJbJ2RlZmF1bHQnXS5lbWl0KF9wbGF0Zm9ybTJbJ2RlZmF1bHQnXS5FVkVOVF9GTElQUEVEKTtcXG5cXG5cXHRcXHRyZXR1cm4gdGhpcztcXG5cXHR9O1xcblxcblxcdC8qKlxcbiAgKiBHZXR0ZXIvU2V0dGVyIGZvciBnYW1lIGxldmVsIGNvbmZpZ3VyYXRpb24uXFxuICAqIEBmdW5jdGlvbiBtb2R1bGU6cGxheX5wbC5nYW1lLmNvbmZpZ1xcbiAgKiBAYXJnIHtzdHJpbmd9IF9rZXkgLSBUaGUga2V5IHRvIHJldHJpZXZlXFxuICAqIEByZXR1cm5zIHt0aGlzfVxcbiAgKi9cXG5cXG5cXHQvKipcXG4gICogR2V0dGVyL1NldHRlciBmb3IgZ2FtZSBsZXZlbCBjb25maWd1cmF0aW9uLlxcbiAgKiBAZnVuY3Rpb24gY29uZmlnXFxuICAqIEBtZW1iZXJvZiBtb2R1bGU6cGxheX5wbC5nYW1lXFxuICAqIEBhcmcge29iamVjdH0gX21peGluIC0gT2JqZWN0IHRvIHNldCBwcm9wZXJ0aWVzIG9uIGNvbmZpZ3VyYXRpb24uXFxuICAqIEByZXR1cm5zIHt0aGlzfVxcbiAgKi9cXG5cXHR0aGlzLmNvbmZpZyA9IGZ1bmN0aW9uIChfa2V5X21peGluKSB7XFxuXFx0XFx0c3dpdGNoICh0eXBlb2YgX2tleV9taXhpbikge1xcblxcdFxcdFxcdGNhc2UgJ3N0cmluZyc6XFxuXFx0XFx0XFx0XFx0cmV0dXJuIENPTkZJR1tfa2V5X21peGluXTtcXG5cXHRcXHRcXHRjYXNlICdvYmplY3QnOlxcblxcdFxcdFxcdFxcdGlmIChfa2V5X21peGluKSBfdXRpbDJbJ2RlZmF1bHQnXS5taXhpbihDT05GSUcsIF9rZXlfbWl4aW4pO1xcblxcdFxcdH1cXG5cXG5cXHRcXHRyZXR1cm4gdGhpcztcXG5cXHR9O1xcblxcblxcdC8qKlxcbiAgKiBAZnVuY3Rpb24gcHJvdmlkZUVudGl0eVR5cGVcXG4gICogQGRlcHJlY2F0ZWRcXG4gICogQG1lbWJlcm9mIG1vZHVsZTpwbGF5fnBsLmdhbWVcXG4gICovXFxuXFx0dGhpcy5wcm92aWRlRW50aXR5VHlwZSA9IGZ1bmN0aW9uICgpIHtcXG5cXHRcXHRyZXR1cm4gX3R5cGVzRW50aXR5MlsnZGVmYXVsdCddO1xcblxcdH07XFxuXFxuXFx0LyoqXFxuICAqIEBmdW5jdGlvbiBwcm92aWRlU2NyZWVuVHlwZVxcbiAgKiBAZGVwcmVjYXRlZFxcbiAgKiBAbWVtYmVyb2YgbW9kdWxlOnBsYXl+cGwuZ2FtZVxcbiAgKi9cXG5cXHR0aGlzLnByb3ZpZGVTY3JlZW5UeXBlID0gZnVuY3Rpb24gKCkge1xcblxcdFxcdHJldHVybiBfdHlwZXNTY3JlZW4yWydkZWZhdWx0J107XFxuXFx0fTtcXG5cXG5cXHQvKipcXG4gICogQXVnbWVudHMgdGhlIGdsb2JhbCBzY29wZS5cXG4gICogQGZ1bmN0aW9uIHNjb3BlXFxuICAqIEBhcmcge2Z1bmN0aW9ufG9iamVjdH0gX21peGluIC0gT2JqZWN0IG9yIGNvbnN0cnVjdG9yIHRvIGRlZmluZSBtZW1iZXJzLlxcbiAgKiBAcmV0dXJucyB7dGhpc31cXG4gICpcXG4gICogQG1lbWJlcm9mIG1vZHVsZTpwbGF5fnBsLmdhbWVcXG4gICovXFxuXFx0dGhpcy5zY29wZSA9IGZ1bmN0aW9uIChfbWl4aW4pIHtcXG5cXHRcXHRpZiAodHlwZW9mIF9taXhpbiA9PT0gJ2Z1bmN0aW9uJykge1xcblxcdFxcdFxcdF9taXhpbi5jYWxsKF90eXBlc0dsb2JhbFNjb3BlMlsnZGVmYXVsdCddKTtcXG5cXHRcXHR9IGVsc2UgaWYgKF9taXhpbikge1xcblxcdFxcdFxcdF90eXBlc0dsb2JhbFNjb3BlMlsnZGVmYXVsdCddLm1peGluKF9taXhpbik7XFxuXFx0XFx0fVxcblxcblxcdFxcdHJldHVybiB0aGlzO1xcblxcdH07XFxuXFxuXFx0LyoqXFxuICAqIEBmdW5jdGlvbiBxdWV1ZVxcbiAgKiBAZGVwcmVjYXRlZFxcbiAgKiBAbWVtYmVyb2YgbW9kdWxlOnBsYXl+cGwuZ2FtZVxcbiAgKi9cXG5cXHR0aGlzLnF1ZXVlID0gZnVuY3Rpb24gKF9pdGVtKSB7XFxuXFx0XFx0aWYgKCEgflJFQURZX1FVRVVFLmluZGV4T2YoX2l0ZW0pKSBSRUFEWV9RVUVVRS5wdXNoKF9pdGVtKTtcXG5cXG5cXHRcXHRyZXR1cm4gdGhpcztcXG5cXHR9O1xcblxcblxcdHRoaXMucXVldWUuY29tcGxldGUgPSBmdW5jdGlvbiAoX2l0ZW0sIF9ldmVudE5hbWUpIHtcXG5cXHRcXHR2YXIgaW5kZXg7XFxuXFxuXFx0XFx0aW5kZXggPSBSRUFEWV9RVUVVRS5pbmRleE9mKF9pdGVtKTtcXG5cXHRcXHRSRUFEWV9RVUVVRS5zcGxpY2UoaW5kZXgsIDEpO1xcblxcblxcdFxcdHJlYWR5KF9ldmVudE5hbWUpO1xcblxcblxcdFxcdHJldHVybiB0aGlzO1xcblxcdH07XFxufSkuY2FsbChnYW1lKTtcXG5cXG5leHBvcnRzWydkZWZhdWx0J10gPSBnYW1lO1xcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOy8vQCBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emIzVnlZMlV2Y0d4aGVTNW5ZVzFsTG1welAyUTVaR01pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3T3pzN096czdPenMyUTBGbGMwSXNSVUZCY1VJN096czdNa05CUTNaQ0xFVkJRVzFDT3pzN08yZERRVU4wUWl4RlFVRk5PenM3TzNWRFFVTktMRVZCUVdNN096czdORU5CUTBFc1JVRkJiVUk3T3pzN2RVTkJRMnBETEVWQlFXTTdPenM3ZFVOQlEyUXNSVUZCWXpzN096dHhRMEZEYUVJc1JVRkJXVHM3T3p0dlEwRkRVaXhGUVVGVk96czdPMEZCUlM5Q0xFbEJRVWtzUzBGQlN5eEZRVUZGTEUxQlFVMHNSVUZCUlN4WFFVRlhMRU5CUVVNN096czdPenM3T3p0QlFWTXZRaXhUUVVGVExFbEJRVWtzUTBGQlJTeExRVUZMTEVWQlFVVXNaVUZCWlN4RlFVRkZPMEZCUTNSRExFdEJRVWtzU1VGQlNTeERRVUZETEZWQlFWVXNSVUZCUlR0QlFVTndRaXhaUVVGVkxFTkJRVU1zUzBGQlN5eEZRVUZGTEdWQlFXVXNRMEZCUXl4RFFVRkRPMFZCUTI1RExFMUJSVWs3UVVGRFNpeFZRVUZSTEVOQlFVTXNTMEZCU3l4RlFVRkZMR1ZCUVdVc1EwRkJReXhEUVVGRE8wVkJRMnBETzBOQlEwUTdPMEZCUlVRc1UwRkJVeXhMUVVGTExFTkJRVVVzVlVGQlZTeEZRVUZGTzBGQlF6TkNMRXRCUVVrc1YwRkJWeXhEUVVGRExFMUJRVTBzUlVGQlJTeFBRVUZQTEV0QlFVc3NRMEZCUXp0QlFVTnlReXhMUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFWVXNTVUZCU1N4UFFVRlBMRU5CUVVNc1EwRkJRenREUVVOd1F6czdPenM3T3pzN1FVRlJSQ3hUUVVGVExGRkJRVkVzUTBGQlJTeExRVUZMTEVWQlFVVXNaVUZCWlN4RlFVRkZPMEZCUXpGRExFdEJRVWtzUlVGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRVVU3UVVGRE0wSXNUMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJRenRCUVVOV0xFdEJRVVVzUlVGQlJTeExRVUZMTzBGQlExUXNhVUpCUVdNc1JVRkJSU3hsUVVGbE8wZEJReTlDTEVOQlFVTXNRMEZCUXp0RlFVTklPME5CUTBRN096czdPenM3T3pzN096czdPenM3UVVGblFrUXNVMEZCVXl4VlFVRlZMRU5CUVVVc1owSkJRV2RDTEVWQlFVVXNaVUZCWlN4RlFVRkZPMEZCUTNaRUxGTkJRVkVzVDBGQlR5eG5Ra0ZCWjBJN1FVRkRPVUlzVDBGQlN5eFJRVUZSTzBGQlExb3NhVU5CUVUwc1owSkJRV2RDTEVOQlFVTXNSMEZCUnl4MVFrRkRlRUlzVFVGQlRTeERRVUZETEdWQlFXVXNRMEZCUXl4RFFVTjJRaXhWUVVGVkxFTkJRVU1zUjBGQlJ5eEhRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVU03UVVGRGJrTXNVMEZCVFRzN1FVRkZVQ3hQUVVGTExGRkJRVkU3UVVGRFdpeHRRa0ZCWjBJc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlZTeExRVUZMTEVWQlFVVXNUVUZCVFN4RlFVRkZPMEZCUTJwRUxHTkJRVlVzUTBGQlF5eExRVUZMTEVOQlFVTXNSVUZCUlN4RlFVRkZMRXRCUVVzc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF6dEpRVU16UXl4RFFVRkRMRU5CUVVNN1FVRkRTQ3hUUVVGTk8wRkJRVUVzUlVGRFVEdERRVU5FT3pzN1FVRkpSQ3hMUVVGTExFZEJRVWNzUlVGQlJTeERRVUZET3p0QlFVVllMRTFCUVUwc1IwRkJSeXhGUVVGRkxFTkJRVU03TzBGQlJWb3NWMEZCVnl4SFFVRkhMRVZCUVVVc1EwRkJRenM3T3pzN096czdRVUZSYWtJc1EwRkJReXhaUVVGWk96dEJRVVZhTEV0QlFVa3NRMEZCUXl4VFFVRlRMR2xEUVVGWkxFTkJRVU03UVVGRE0wSXNTMEZCU1N4RFFVRkRMRTlCUVU4c0swSkJRVlVzUTBGQlF6czdRVUZGZGtJc2JVSkJRVXNzUzBGQlN5eERRVUZETEVsQlFVa3NNa0pCUVZNc1EwRkJRenM3UVVGRmVrSXNTMEZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhuUWtGQlowSXNSVUZCUlN4VlFVRlZMRTFCUVUwc1JVRkJSVHRCUVVNelF5eFRRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMR0ZCUVdFc1JVRkJSU3hOUVVGTkxFTkJRVU1zU1VGQlNTeEZRVUZGTEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRGUVVONlJDeERRVUZETEVOQlFVTTdPenM3T3pzN1FVRlBTQ3hMUVVGSkxFTkJRVU1zUjBGQlJ5eEhRVUZITEZsQlFWazdRVUZEZEVJc1RVRkJTU3hEUVVGRExGVkJRVlVzUjBGQlJ5eEpRVUZKTEVOQlFVTTdRVUZEZGtJc1RVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXpzN1FVRkZNVUlzVFVGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1dVRkJXVHM3UVVGRmJFTXNZVUZCVlN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE96dEJRVVZzUWl4UlFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRE8wZEJRMklzUTBGQlF5eERRVUZET3p0QlFVVklMSGRDUVVGVExFbEJRVWtzUTBGQlF5eHpRa0ZCVXl4VlFVRlZMRU5CUVVNc1EwRkJRenRGUVVOdVF5eERRVUZET3p0QlFVVkdMRXRCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzVlVGQlZTeExRVUZMTEVWQlFVVTdRVUZET1VJc2QwSkJRVk1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPenRCUVVWeVFpeFRRVUZQTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNN1JVRkRia0lzUTBGQlF6czdRVUZGUml4TFFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUjBGQlJ5eFZRVUZWTEZWQlFWVXNSVUZCUlR0QlFVTjRReXgzUWtGQlV5eGhRVUZoTEVOQlFVTXNWVUZCVlN4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRE9VTXNkMEpCUVZNc1NVRkJTU3hEUVVGRExITkNRVUZUTEZWQlFWVXNRMEZCUXl4RFFVRkRPenRCUVVWdVF5eFRRVUZQTEVsQlFVa3NRMEZCUXp0RlFVTmFMRU5CUVVNN08wRkJSVVlzUzBGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRWRCUVVjc1ZVRkJWU3hWUVVGVkxFVkJRVVU3UVVGRGVFTXNkMEpCUVZNc1lVRkJZU3hEUVVGRExGVkJRVlVzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUXpsRExIZENRVUZUTEVsQlFVa3NRMEZCUXl4elFrRkJVeXhoUVVGaExFTkJRVU1zUTBGQlF6czdRVUZGZEVNc1UwRkJUeXhKUVVGSkxFTkJRVU03UlVGRFdpeERRVUZET3pzN096czdPenM3T3pzN096czdPMEZCYVVKR0xFdEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NWVUZCVlN4VlFVRlZMRVZCUVVVN1FVRkRia01zVlVGQlVTeFBRVUZQTEZWQlFWVTdRVUZEZUVJc1VVRkJTeXhSUVVGUk8wRkJRVVVzVjBGQlR5eE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1FVRkRla01zVVVGQlN5eFJRVUZSTzBGQlExb3NVVUZCU1N4VlFVRlZMRVZCUVVVc2EwSkJRVXNzUzBGQlN5eERRVUZETEUxQlFVMHNSVUZCUlN4VlFVRlZMRU5CUVVNc1EwRkJRenRCUVVGQkxFZEJRMmhFT3p0QlFVVkVMRk5CUVU4c1NVRkJTU3hEUVVGRE8wVkJRMW9zUTBGQlF6czdPenM3T3p0QlFVOUdMRXRCUVVrc1EwRkJReXhwUWtGQmFVSXNSMEZCUnl4WlFVRlpPMEZCUTNCRExHdERRVUZqTzBWQlEyUXNRMEZCUXpzN096czdPenRCUVU5R0xFdEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1IwRkJSeXhaUVVGWk8wRkJRM0JETEd0RFFVRmpPMFZCUTJRc1EwRkJRenM3T3pzN096czdPenRCUVZWR0xFdEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NWVUZCVlN4TlFVRk5MRVZCUVVVN1FVRkRPVUlzVFVGQlNTeFBRVUZQTEUxQlFVMHNTMEZCU3l4VlFVRlZMRVZCUVVVN1FVRkRha01zVTBGQlRTeERRVUZETEVsQlFVa3NLMEpCUVU4c1EwRkJRenRIUVVOdVFpeE5RVVZKTEVsQlFVa3NUVUZCVFN4RlFVRkZPMEZCUTJoQ0xHbERRVUZOTEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRIUVVOd1FqczdRVUZGUkN4VFFVRlBMRWxCUVVrc1EwRkJRenRGUVVOYUxFTkJRVU03T3pzN096czdRVUZQUml4TFFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExGVkJRVlVzUzBGQlN5eEZRVUZGTzBGQlF6ZENMRTFCUVVrc1JVRkJReXhEUVVGRExGZEJRVmNzUTBGQlF5eFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVc1YwRkJWeXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXpzN1FVRkZNVVFzVTBGQlR5eEpRVUZKTEVOQlFVTTdSVUZEV2l4RFFVRkRPenRCUVVWR0xFdEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4SFFVRkhMRlZCUVZVc1MwRkJTeXhGUVVGRkxGVkJRVlVzUlVGQlJUdEJRVU5zUkN4TlFVRkpMRXRCUVVzc1EwRkJRenM3UVVGRlZpeFBRVUZMTEVkQlFVY3NWMEZCVnl4RFFVRkRMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU51UXl4aFFVRlhMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXpzN1FVRkZOMElzVDBGQlN5eERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPenRCUVVWc1FpeFRRVUZQTEVsQlFVa3NRMEZCUXp0RlFVTmFMRU5CUVVNN1EwRkZSaXhGUVVGRkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXpzN2NVSkJSVU1zU1VGQlNTSXNJbVpwYkdVaU9pSXhOaTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1JHVm1hVzVsY3lCMGFHVWdKMmRoYldVbklHMWxkR2h2WkNCbWIzSWdjbVZuYVhOMGNtRjBhVzl1SUdGdVpDQnBibWwwYVdGc2FYcGhkR2x2YmlCdlppQm5ZVzFsSUhOamIzQmxjeTRnVkdocGN5QnRaWFJvYjJRZ1lXeHpieUJoWTNSeklHRnpJR0VnYm1GdFpYTndZV05sSUdadmNpQm5ZVzFsSUd4bGRtVnNJR1oxYm1OMGFXOXVjeUFvVTJWbE9pQmJjR3d1WjJGdFpWMTdRR3hwYm1zZ2JXOWtkV3hsT25Cc1lYbCtjR3d1WjJGdFpYMHBMbHh1SUNwY2JpQXFJRUJ0YjJSMWJHVWdaMkZ0WlZ4dUlDb2dRR0YxZEdodmNpQk5hV05oYUNCU2IyeHZiaUE4YldsallXaEFaMmx1WVhOcGJtc3VZMjl0UGx4dUlDcGNiaUFxSUVCeVpYRjFhWEpsY3lCd2JHRjVMbWRoYldVdVkyOXRjRzl1Wlc1MFhHNGdLaUJBY21WeGRXbHlaWE1nY0d4aGVTNW5ZVzFsTG0xaGJtRm5aWEpjYmlBcUlFQnlaWEYxYVhKbGN5QjFkR2xzWEc0Z0tpQkFjbVZ4ZFdseVpYTWdkSGx3WlhNdlJYWmxiblJ6WEc0Z0tpQkFjbVZ4ZFdseVpYTWdkSGx3WlhNdlIyeHZZbUZzVTJOdmNHVmNiaUFxSUVCeVpYRjFhWEpsY3lCMGVYQmxjeTlGYm5ScGRIbGNiaUFxSUVCeVpYRjFhWEpsY3lCMGVYQmxjeTlUWTNKbFpXNWNiaUFxSUVCeVpYRjFhWEpsY3lCMGVYQmxjeTlIWVcxbFhHNGdLaTljYm1sdGNHOXlkQ0JqYjIxd2IyNWxiblFnWm5KdmJTQW5jR3hoZVM1bllXMWxMbU52YlhCdmJtVnVkQ2M3WEc1cGJYQnZjblFnYldGdVlXZGxjaUJtY205dElDZHdiR0Y1TG1kaGJXVXViV0Z1WVdkbGNpYzdYRzVwYlhCdmNuUWdkWFJwYkNCbWNtOXRJQ2QxZEdsc0p6dGNibWx0Y0c5eWRDQkZkbVZ1ZEhNZ1puSnZiU0FuZEhsd1pYTXZSWFpsYm5Sekp6dGNibWx0Y0c5eWRDQjdJR1JsWm1GMWJIUWdZWE1nVTBOUFVFVWdmU0JtY205dElDZDBlWEJsY3k5SGJHOWlZV3hUWTI5d1pTYzdYRzVwYlhCdmNuUWdSVzUwYVhSNUlHWnliMjBnSjNSNWNHVnpMMFZ1ZEdsMGVTYzdYRzVwYlhCdmNuUWdVMk55WldWdUlHWnliMjBnSjNSNWNHVnpMMU5qY21WbGJpYzdYRzVwYlhCdmNuUWdSMkZ0WlNCbWNtOXRJQ2QwZVhCbGN5OUhZVzFsSnp0Y2JtbHRjRzl5ZENCd2JHRjBabTl5YlNCbWNtOXRJQ2R3YkdGMFptOXliU2M3WEc1Y2JuWmhjaUJIUVUxRlV5d2dRMDlPUmtsSExDQlNSVUZFV1Y5UlZVVlZSVHRjYmx4dUx5b3FYRzRnS2lCRVpXWnBibVVnWVNCbllXMWxJSE5qYjNCbElHWnZjaUJ5WldkcGMzUnlZWFJwYjI0Z1lXNWtMMjl5SUdsdWFYUnBZV3hwZW1GMGFXOXVMbHh1SUNvZ1ZHaHBjeUJ0WlhSb2IyUWdZV3h6YnlCaFkzUnpJR0Z6SUdFZ2JtRnRaWE53WVdObElHWnZjaUJuWVcxbElHeGxkbVZzSUdaMWJtTjBhVzl1Y3lBb1UyVmxPaUJiY0d3dVoyRnRaVjE3UUd4cGJtc2diVzlrZFd4bE9uQnNZWGwrY0d3dVoyRnRaWDBwTGx4dUlDcGNiaUFxSUVCaGNtY2dlM04wY21sdVozMGdYMjVoYldVZ0xTQlVhR1VnYm1GdFpTQnZaaUIwYUdVZ1oyRnRaU0J0WVhSamFHVmtJSGRwZEdnZ1lTQkVUMDBnYm05a1pYTWdKMmxrSnlCaGRIUnlhV0oxZEdVdVhHNGdLaUJBWVhKbklIdG1kVzVqZEdsdmJueHZZbXBsWTNSOUlGOXBiWEJzWlcxbGJuUmhkR2x2YmlBdElGUm9aU0JqYjI1emRISjFZM1J2Y2lCdmNpQnZZbXBsWTNRZ2QyaHBZMmdnYVcxd2JHVnRaVzUwY3lCMGFHVWdjMk52Y0dVZ1ltVm9ZWFpwYjNJdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdkaGJXVWdLRjl1WVcxbExDQmZhVzF3YkdWdFpXNTBZWFJwYjI0cElIdGNibHgwYVdZZ0tHZGhiV1V1YVhORVQwMVNaV0ZrZVNrZ2UxeHVYSFJjZEdsdWFYUnBZV3hwZW1Vb1gyNWhiV1VzSUY5cGJYQnNaVzFsYm5SaGRHbHZiaWs3WEc1Y2RIMWNibHh1WEhSbGJITmxJSHRjYmx4MFhIUnlaV2RwYzNSbGNpaGZibUZ0WlN3Z1gybHRjR3hsYldWdWRHRjBhVzl1S1R0Y2JseDBmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnlaV0ZrZVNBb1gyVjJaVzUwVG1GdFpTa2dlMXh1WEhScFppQW9Va1ZCUkZsZlVWVkZWVVV1YkdWdVozUm9LU0J5WlhSMWNtNGdabUZzYzJVN1hHNWNkR2RoYldVdWRISnBaMmRsY2loZlpYWmxiblJPWVcxbElIeDhJQ2R5WldGa2VTY3BPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlGSmxaMmx6ZEdWeWN5QmhiaUJwYlhCc1pXMWxiblJoZEdsdmJpQnZaaUJoSUdkaGJXVWdjMk52Y0dVZ1ptOXlJR2x1YVhScFlXeHBlbUYwYVc5dUxseHVJQ29nUUhCeWIzUmxZM1JsWkZ4dUlDb2dRR0Z5WnlCN2MzUnlhVzVuZlNCZmJtRnRaU0F0SUZSb1pTQnVZVzFsSUc5bUlIUm9aU0JuWVcxbElHMWhkR05vWldRZ2QybDBhQ0JoSUVSUFRTQnViMlJsY3lBbmFXUW5JR0YwZEhKcFluVjBaUzVjYmlBcUlFQmhjbWNnZTJaMWJtTjBhVzl1Zkc5aWFtVmpkSDBnWDJsdGNHeGxiV1Z1ZEdGMGFXOXVJQzBnVkdobElHTnZibk4wY25WamRHOXlJRzl5SUc5aWFtVmpkQ0IzYUdsamFDQnBiWEJzWlcxbGJuUnpJSFJvWlNCelkyOXdaU0JpWldoaGRtbHZjaTVjYmlBcUwxeHVablZ1WTNScGIyNGdjbVZuYVhOMFpYSWdLRjl1WVcxbExDQmZhVzF3YkdWdFpXNTBZWFJwYjI0cElIdGNibHgwYVdZZ0tDRitSMEZOUlZNdWFXNWtaWGhQWmloZmJtRnRaU2twSUh0Y2JseDBYSFJIUVUxRlV5NXdkWE5vS0h0Y2JseDBYSFJjZEdsa09pQmZibUZ0WlN4Y2JseDBYSFJjZEdsdGNHeGxiV1Z1ZEdGMGFXOXVPaUJmYVcxd2JHVnRaVzUwWVhScGIyNWNibHgwWEhSOUtUdGNibHgwZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRWx1YVhScFlXeHBlbVZ6SUdGdUlHbHRjR3hsYldWdWRHRjBhVzl1SUc5bUlHRWdaMkZ0WlNCelkyOXdaUzRnS0c5MlpYSnNiMkZrWldRcFhHNGdLaUJBWm5WdVkzUnBiMjRnYVc1cGRHbGhiR2w2WlZ4dUlDb2dRSEJ5YjNSbFkzUmxaRnh1SUNvZ1FHRnlaeUI3YzNSeWFXNW5mU0JmYm1GdFpTQXRJRlJvWlNCdVlXMWxJRzltSUhSb1pTQm5ZVzFsSUcxaGRHTm9aV1FnZDJsMGFDQmhJRVJQVFNCdWIyUmxjeUFuYVdRbklHRjBkSEpwWW5WMFpTNWNiaUFxSUVCaGNtY2dlMloxYm1OMGFXOXVmRzlpYW1WamRIMGdYMmx0Y0d4bGJXVnVkR0YwYVc5dUlDMGdWR2hsSUdOdmJuTjBjblZqZEc5eUlHOXlJRzlpYW1WamRDQjNhR2xqYUNCcGJYQnNaVzFsYm5SeklIUm9aU0J6WTI5d1pTQmlaV2hoZG1sdmNpNWNiaUFxTDF4dVhHNHZLaXBjYmlBcUlFbHVhWFJwWVd4cGVtVnpJR0Z1SUdsdGNHeGxiV1Z1ZEdGMGFXOXVJRzltSUdFZ1oyRnRaU0J6WTI5d1pTNWNiaUFxSUVCd2NtOTBaV04wWldSY2JpQXFJRUJoY21jZ2UyRnljbUY1ZlNCZlkyOXNiR1ZqZEdsdmJpQXRJRlJvWlNCamIyeHNaV04wYVc5dUlHOW1JR2RoYldVZ2MyTnZjR1VnY21WamIzSmtjeUJtYjNJZ2FXNXBkR2xoYkdsNllYUnBiMjR1WEc0Z0tpQkFZWEpuSUh0bWRXNWpkR2x2Ym54dlltcGxZM1I5SUY5cGJYQnNaVzFsYm5SaGRHbHZiaUF0SUZSb1pTQmpiMjV6ZEhKMVkzUnZjaUJ2Y2lCdlltcGxZM1FnZDJocFkyZ2dhVzF3YkdWdFpXNTBjeUIwYUdVZ2MyTnZjR1VnWW1Wb1lYWnBiM0l1WEc0Z0tpOWNibVoxYm1OMGFXOXVJR2x1YVhScFlXeHBlbVVnS0Y5dVlXMWxYMk52Ykd4bFkzUnBiMjRzSUY5cGJYQnNaVzFsYm5SaGRHbHZiaWtnZTF4dVhIUnpkMmwwWTJnZ0tIUjVjR1Z2WmlCZmJtRnRaVjlqYjJ4c1pXTjBhVzl1S1NCN1hHNWNkRngwWTJGelpTQW5jM1J5YVc1bkp6cGNibHgwWEhSY2RGTkRUMUJGVzE5dVlXMWxYMk52Ykd4bFkzUnBiMjVkSUQwZ1IyRnRaVnh1WEhSY2RGeDBYSFF1WlhoMFpXNWtLRjlwYlhCc1pXMWxiblJoZEdsdmJpbGNibHgwWEhSY2RGeDBMbWx1YVhScFlXeHBlbVVvSnlNbksxOXVZVzFsWDJOdmJHeGxZM1JwYjI0cE8xeHVYSFJjZEZ4MFluSmxZV3M3WEc1Y2JseDBYSFJqWVhObElDZHZZbXBsWTNRbk9seHVYSFJjZEZ4MFgyNWhiV1ZmWTI5c2JHVmpkR2x2Ymk1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNoZmFYUmxiU3dnWDJsdVpHVjRLU0I3WEc1Y2RGeDBYSFJjZEdsdWFYUnBZV3hwZW1Vb1gybDBaVzB1YVdRc0lGOXBkR1Z0TG1sdGNHeGxiV1Z1ZEdGMGFXOXVLVHRjYmx4MFhIUmNkSDBwTzF4dVhIUmNkRngwWW5KbFlXczdYRzVjZEgxY2JuMWNibHh1WEc0dktpb2dRSEJ5YjNSbFkzUmxaQ0FxTDF4dVIwRk5SVk1nUFNCYlhUdGNiaThxS2lCQWNISnZkR1ZqZEdWa0lDb3ZYRzVEVDA1R1NVY2dQU0I3ZlR0Y2JpOHFLaUJBY0hKdmRHVmpkR1ZrSUNvdlhHNVNSVUZFV1Y5UlZVVlZSU0E5SUZ0ZE8xeHVYRzR2S2lwY2JpQXFJRWx1ZEdWeVptRmpaU0JtYjNJZ1oyRnRaU0JzWlhabGJDQmpiMjVtYVdkMWNtRjBhVzl1TGx4dUlDb2dRRzVoYldWemNHRmpaU0JuWVcxbFhHNGdLaUJBYldWdFltVnliMllnYlc5a2RXeGxPbkJzWVhsK2NHeGNiaUFxSUVCdGFYaGxjeUJGZG1WdWRITmNiaUFxTDF4dUtHWjFibU4wYVc5dUlDZ3BJSHRjYmx4dVhIUjBhR2x6TG1OdmJYQnZibVZ1ZENBOUlHTnZiWEJ2Ym1WdWREdGNibHgwZEdocGN5NXRZVzVoWjJWeUlEMGdiV0Z1WVdkbGNqdGNibHgwWEc1Y2RIVjBhV3d1YldsNGFXNG9aMkZ0WlN3Z1JYWmxiblJ6S1R0Y2JseHVYSFIwYUdsekxtOXVLQ2R3YkdGMFptOXliUzFsZG1WdWRDY3NJR1oxYm1OMGFXOXVJQ2hmWlhabGJuUXBJSHRjYmx4MFhIUmpiMjV6YjJ4bExteHZaeWduY0d4aGVTNW5ZVzFsSUMwbkxDQmZaWFpsYm5RdWJtRnRaU3dnWDJWMlpXNTBMbWRoYldWRVlYUmhLVHRjYmx4MGZTazdYRzVjYmx4MEx5b3FYRzVjZENBcUlGTjBZWEowY3lCMGFHVWdaRzl0YVc1dmN5Qm1ZV3hzYVc1blhHNWNkQ0FxSUVCbWRXNWpkR2x2YmlCeWRXNWNibHgwSUNvZ1FHMWxiV0psY205bUlHMXZaSFZzWlRwd2JHRjVmbkJzTG1kaGJXVmNibHgwSUNvdlhHNWNkSFJvYVhNdWNuVnVJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVYSFJjZEdkaGJXVXVhWE5FVDAxU1pXRmtlU0E5SUhSeWRXVTdYRzVjZEZ4MFoyRnRaUzUwY21sbloyVnlLQ2RrYjIwdGNtVmhaSGtuS1R0Y2JseHVYSFJjZEdkaGJXVXVZMjl0Y0c5dVpXNTBMbXh2WVdSQmJHd29ablZ1WTNScGIyNGdLQ2tnZTF4dVhIUmNkRngwTHk4Z1kyOXVjMjlzWlM1c2IyY29KeW9xSUVGc2JDQmpiMjF3YjI1bGJuUWdjMjkxY21ObGN5QnNiMkZrWldRdUp5azdYRzVjZEZ4MFhIUnBibWwwYVdGc2FYcGxLRWRCVFVWVEtUdGNibHh1WEhSY2RGeDBSMEZOUlZNZ1BTQnVkV3hzTzF4dVhIUmNkSDBwTzF4dVhHNWNkRngwY0d4aGRHWnZjbTB1WlcxcGRDaHdiR0YwWm05eWJTNUZWa1ZPVkY5SlRrbFVLVHRjYmx4MGZUdGNibHh1WEhSMGFHbHpMbkpsY0c5eWRDQTlJR1oxYm1OMGFXOXVJQ2hmYm1GdFpTa2dlMXh1WEhSY2RIQnNZWFJtYjNKdExtVnRhWFFvWDI1aGJXVXBPMXh1WEc1Y2RGeDBjbVYwZFhKdUlIUm9hWE11Y21Wd2IzSjBPMXh1WEhSOU8xeHVYRzVjZEhSb2FYTXVjbVZ3YjNKMExtVjRhWFFnUFNCbWRXNWpkR2x2YmlBb1gyZGhiV1ZUWTI5d1pTa2dlMXh1WEhSY2RIQnNZWFJtYjNKdExuTmhkbVZIWVcxbFUzUmhkR1VvWDJkaGJXVlRZMjl3WlM1d2NtOW5jbVZ6Y3lncEtUdGNibHgwWEhSd2JHRjBabTl5YlM1bGJXbDBLSEJzWVhSbWIzSnRMa1ZXUlU1VVgwVllTVlFwTzF4dVhHNWNkRngwY21WMGRYSnVJSFJvYVhNN1hHNWNkSDA3WEc1Y2JseDBkR2hwY3k1eVpYQnZjblF1Wm14cGNDQTlJR1oxYm1OMGFXOXVJQ2hmWjJGdFpWTmpiM0JsS1NCN1hHNWNkRngwY0d4aGRHWnZjbTB1YzJGMlpVZGhiV1ZUZEdGMFpTaGZaMkZ0WlZOamIzQmxMbkJ5YjJkeVpYTnpLQ2twTzF4dVhIUmNkSEJzWVhSbWIzSnRMbVZ0YVhRb2NHeGhkR1p2Y20wdVJWWkZUbFJmUmt4SlVGQkZSQ2s3WEc1Y2JseDBYSFJ5WlhSMWNtNGdkR2hwY3p0Y2JseDBmVHRjYmx4dVhIUmNibHgwTHlvcVhHNWNkQ0FxSUVkbGRIUmxjaTlUWlhSMFpYSWdabTl5SUdkaGJXVWdiR1YyWld3Z1kyOXVabWxuZFhKaGRHbHZiaTVjYmx4MElDb2dRR1oxYm1OMGFXOXVJRzF2WkhWc1pUcHdiR0Y1Zm5Cc0xtZGhiV1V1WTI5dVptbG5YRzVjZENBcUlFQmhjbWNnZTNOMGNtbHVaMzBnWDJ0bGVTQXRJRlJvWlNCclpYa2dkRzhnY21WMGNtbGxkbVZjYmx4MElDb2dRSEpsZEhWeWJuTWdlM1JvYVhOOVhHNWNkQ0FxTDF4dVhHNWNkQzhxS2x4dVhIUWdLaUJIWlhSMFpYSXZVMlYwZEdWeUlHWnZjaUJuWVcxbElHeGxkbVZzSUdOdmJtWnBaM1Z5WVhScGIyNHVYRzVjZENBcUlFQm1kVzVqZEdsdmJpQmpiMjVtYVdkY2JseDBJQ29nUUcxbGJXSmxjbTltSUcxdlpIVnNaVHB3YkdGNWZuQnNMbWRoYldWY2JseDBJQ29nUUdGeVp5QjdiMkpxWldOMGZTQmZiV2w0YVc0Z0xTQlBZbXBsWTNRZ2RHOGdjMlYwSUhCeWIzQmxjblJwWlhNZ2IyNGdZMjl1Wm1sbmRYSmhkR2x2Ymk1Y2JseDBJQ29nUUhKbGRIVnlibk1nZTNSb2FYTjlYRzVjZENBcUwxeHVYSFIwYUdsekxtTnZibVpwWnlBOUlHWjFibU4wYVc5dUlDaGZhMlY1WDIxcGVHbHVLU0I3WEc1Y2RGeDBjM2RwZEdOb0lDaDBlWEJsYjJZZ1gydGxlVjl0YVhocGJpa2dlMXh1WEhSY2RGeDBZMkZ6WlNBbmMzUnlhVzVuSnpvZ2NtVjBkWEp1SUVOUFRrWkpSMXRmYTJWNVgyMXBlR2x1WFR0Y2JseDBYSFJjZEdOaGMyVWdKMjlpYW1WamRDYzZYRzVjZEZ4MFhIUmNkR2xtSUNoZmEyVjVYMjFwZUdsdUtTQjFkR2xzTG0xcGVHbHVLRU5QVGtaSlJ5d2dYMnRsZVY5dGFYaHBiaWs3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBjbVYwZFhKdUlIUm9hWE03WEc1Y2RIMDdYRzVjYmx4MEx5b3FYRzVjZENBcUlFQm1kVzVqZEdsdmJpQndjbTkyYVdSbFJXNTBhWFI1Vkhsd1pWeHVYSFFnS2lCQVpHVndjbVZqWVhSbFpGeHVYSFFnS2lCQWJXVnRZbVZ5YjJZZ2JXOWtkV3hsT25Cc1lYbCtjR3d1WjJGdFpWeHVYSFFnS2k5Y2JseDBkR2hwY3k1d2NtOTJhV1JsUlc1MGFYUjVWSGx3WlNBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmx4MFhIUnlaWFIxY200Z1JXNTBhWFI1TzF4dVhIUjlPMXh1WEc1Y2RDOHFLbHh1WEhRZ0tpQkFablZ1WTNScGIyNGdjSEp2ZG1sa1pWTmpjbVZsYmxSNWNHVmNibHgwSUNvZ1FHUmxjSEpsWTJGMFpXUmNibHgwSUNvZ1FHMWxiV0psY205bUlHMXZaSFZzWlRwd2JHRjVmbkJzTG1kaGJXVmNibHgwSUNvdlhHNWNkSFJvYVhNdWNISnZkbWxrWlZOamNtVmxibFI1Y0dVZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc1Y2RGeDBjbVYwZFhKdUlGTmpjbVZsYmp0Y2JseDBmVHRjYmx4dVhIUXZLaXBjYmx4MElDb2dRWFZuYldWdWRITWdkR2hsSUdkc2IySmhiQ0J6WTI5d1pTNWNibHgwSUNvZ1FHWjFibU4wYVc5dUlITmpiM0JsWEc1Y2RDQXFJRUJoY21jZ2UyWjFibU4wYVc5dWZHOWlhbVZqZEgwZ1gyMXBlR2x1SUMwZ1QySnFaV04wSUc5eUlHTnZibk4wY25WamRHOXlJSFJ2SUdSbFptbHVaU0J0WlcxaVpYSnpMbHh1WEhRZ0tpQkFjbVYwZFhKdWN5QjdkR2hwYzMxY2JseDBJQ3BjYmx4MElDb2dRRzFsYldKbGNtOW1JRzF2WkhWc1pUcHdiR0Y1Zm5Cc0xtZGhiV1ZjYmx4MElDb3ZYRzVjZEhSb2FYTXVjMk52Y0dVZ1BTQm1kVzVqZEdsdmJpQW9YMjFwZUdsdUtTQjdYRzVjZEZ4MGFXWWdLSFI1Y0dWdlppQmZiV2w0YVc0Z1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JseDBYSFJjZEY5dGFYaHBiaTVqWVd4c0tGTkRUMUJGS1R0Y2JseDBYSFI5WEc1Y2JseDBYSFJsYkhObElHbG1JQ2hmYldsNGFXNHBJSHRjYmx4MFhIUmNkRk5EVDFCRkxtMXBlR2x1S0Y5dGFYaHBiaWs3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBjbVYwZFhKdUlIUm9hWE03WEc1Y2RIMDdYRzVjYmx4MEx5b3FYRzVjZENBcUlFQm1kVzVqZEdsdmJpQnhkV1YxWlZ4dVhIUWdLaUJBWkdWd2NtVmpZWFJsWkZ4dVhIUWdLaUJBYldWdFltVnliMllnYlc5a2RXeGxPbkJzWVhsK2NHd3VaMkZ0WlZ4dVhIUWdLaTljYmx4MGRHaHBjeTV4ZFdWMVpTQTlJR1oxYm1OMGFXOXVJQ2hmYVhSbGJTa2dlMXh1WEhSY2RHbG1JQ2doZmxKRlFVUlpYMUZWUlZWRkxtbHVaR1Y0VDJZb1gybDBaVzBwS1NCU1JVRkVXVjlSVlVWVlJTNXdkWE5vS0Y5cGRHVnRLVHRjYmx4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TzF4dVhIUjlPMXh1WEc1Y2RIUm9hWE11Y1hWbGRXVXVZMjl0Y0d4bGRHVWdQU0JtZFc1amRHbHZiaUFvWDJsMFpXMHNJRjlsZG1WdWRFNWhiV1VwSUh0Y2JseDBYSFIyWVhJZ2FXNWtaWGc3WEc1Y2JseDBYSFJwYm1SbGVDQTlJRkpGUVVSWlgxRlZSVlZGTG1sdVpHVjRUMllvWDJsMFpXMHBPMXh1WEhSY2RGSkZRVVJaWDFGVlJWVkZMbk53YkdsalpTaHBibVJsZUN3Z01TazdYRzVjYmx4MFhIUnlaV0ZrZVNoZlpYWmxiblJPWVcxbEtUdGNibHh1WEhSY2RISmxkSFZ5YmlCMGFHbHpPMXh1WEhSOU8xeHVYRzU5S1M1allXeHNLR2RoYldVcE8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQm5ZVzFsTzF4dVhHNWNibHh1THlvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTSUNvcVhHNGdLaW9nTGk5emIzVnlZMlV2Y0d4aGVTNW5ZVzFsTG1welhHNGdLaW92SWwwc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVwiKTtcblxuLyoqKi8gfSxcbi8qIDE3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRldmFsKFwidmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpWydkZWZhdWx0J107XFxuXFxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcXG4vKipcXG4gKiBEZWZpbmVzIHRoZSBgY29tcG9uZW50KClgIG1ldGhvZCBmb3IgY29tcG9uZW50IGJlaGF2aW9yIHJlZ2lzdHJhdGlvbi4gVGhpcyBtZXRob2QgaXMgYWxzbyBhIG5hbWVzYXBjZSBmb3IgbWV0aG9kcyB0byBtYW5hZ2UgYW5kIGxvYWQgY29tcG9uZW50IGJlaGF2aW9yIHNjcmlwdHMuXFxuICpcXG4gKiBAbW9kdWxlXFxuICogQGF1dGhvciBNaWNhaCBSb2xvbiA8bWljYWhAZ2luYXNpbmsuY29tPlxcbiAqXFxuICogQHJlcXVpcmVzIHBsYXl+cGwudXRpbFxcbiAqIEByZXF1aXJlcyB0eXBlcy9FdmVudHNcXG4gKi9cXG5cXG52YXIgX3V0aWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcXG5cXG52YXIgX3V0aWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXRpbCk7XFxuXFxudmFyIF90eXBlc0V2ZW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xcblxcbnZhciBfdHlwZXNFdmVudHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZXNFdmVudHMpO1xcblxcbi8qKlxcbiAqIENvbGxlY3Rpb24gb2YgY29tcG9uZW50IGJlaGF2aW9yIHJlY29yZHNcXG4gKiBAY29uc3RcXG4gKi9cXG52YXIgQ09NUE9ORU5UUztcXG5cXG4vKipcXG4gKiBSZWdpc3RlcnMgYSBjb21wb25lbnQgYmVoYXZpb3IuXFxuICogQGFyZyB7c3RyaW5nfSBfbmFtZSAtIFRoZSBuYW1lIGZvciB0aGUgY29tcG9uZW50LlxcbiAqIEBhcmcge2Z1bmN0aW9ufG9iamVjdH0gX2ltcGxlbWVudGF0aW9uIC0gQ29uc3RydWN0b3IgZnVuY3Rpb24gb3Igb2JqZWN0IHdpdGggdGhlIGJlaGF2aW9yJ3MgaW1wbGVtZW50YXRpb24uXFxuICogQHJldHVybnMge0BsaW5rIG1vZHVsZTpwbGF5fnBsLmdhbWV9XFxuICovXFxuZnVuY3Rpb24gY29tcG9uZW50KF9uYW1lLCBfaW1wbGVtZW50YXRpb24pIHtcXG5cXHRpZiAoIWNvbXBvbmVudC5nZXQoX25hbWUpKSB7XFxuXFx0XFx0Q09NUE9ORU5UUy5wdXNoKHtcXG5cXHRcXHRcXHRuYW1lOiBfbmFtZSxcXG5cXHRcXHRcXHRpbXBsZW1lbnRhdGlvbjogX2ltcGxlbWVudGF0aW9uLFxcblxcdFxcdFxcdGNvbmZpZzoge31cXG5cXHRcXHR9KTtcXG5cXHR9XFxuXFxuXFx0cmV0dXJuIHRoaXM7XFxufVxcblxcbkNPTVBPTkVOVFMgPSBbXTtcXG5cXG4vKipcXG4gKiBNZXRob2RzIHRvIG1hbmFnZSBhbmQgbG9hZCBjb21wb25lbnQgYmVoYXZpb3Igc2NyaXB0cy5cXG4gKiBAbmFtZXNwYWNlIGNvbXBvbmVudFxcbiAqIEBtZW1iZXJvZiBtb2R1bGU6cGxheX5wbC5nYW1lXFxuICogQG1peGVzIEV2ZW50c1xcbiAqL1xcbihmdW5jdGlvbiAoKSB7XFxuXFxuXFx0X3V0aWwyWydkZWZhdWx0J10ubWl4aW4odGhpcywgX3R5cGVzRXZlbnRzMlsnZGVmYXVsdCddKTtcXG5cXG5cXHQvKipcXG4gICogR2l2ZW4gYSBuYW1lOyBwcm92aWRlcyB0aGUgY29tcG9uZW50IHJlY29yZC4gYHtuYW1lLCBpbXBsZW1lbnRhdGlvbn1gXFxuICAqIEBtZW1iZXJvZiBtb2R1bGU6cGxheX5wbC5nYW1lLmNvbXBvbmVudFxcbiAgKiBAYXJnIHtzdHJpbmd9IF9uYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGNvbXBvbmVudC5cXG4gICogQHJldHVybnMge29iamVjdH0gVGhlIHJlY29yZC5cXG4gICovXFxuXFx0dGhpcy5nZXQgPSBmdW5jdGlvbiAoX25hbWUpIHtcXG5cXHRcXHR2YXIgaSwgcmVjb3JkO1xcblxcblxcdFxcdGZvciAoaSA9IDA7IHJlY29yZCA9IENPTVBPTkVOVFNbaV07IGkgKz0gMSkge1xcblxcdFxcdFxcdGlmIChyZWNvcmQubmFtZSA9PT0gX25hbWUpIHJldHVybiByZWNvcmQ7XFxuXFx0XFx0fVxcblxcblxcdFxcdHJldHVybiBudWxsO1xcblxcdH07XFxuXFxuXFx0LyoqXFxuICAqIExvYWRzIHRoZSBzY3JpcHQgZm9yIHRoZSBjb21wb25lbnQuIFRoZSBIVE1MIGFuZCBDU1Mgd2lsbCBiZSBsb2FkZWQgd2hlbiB0aGUgY29tcG9uZW50IHNjb3BlIGluaXRhbGl6ZXMuPGJyPlxcbiAgKiBUaGUgcGF0aCBvZiB0aGUgc2NyaXB0IGZpbGUgaXMgcmVzb2x2ZWQgYHtwbC5nYW1lLmNvbmZpZy5jb21wb25lbnREaXJlY3Rvcnl9L3tfbmFtZX0vYmVoYXZpb3IuanNgLlxcbiAgKiBAbWVtYmVyb2YgbW9kdWxlOnBsYXl+cGwuZ2FtZS5jb21wb25lbnRcXG4gICogQGFyZyB7c3RyaW5nfSBfbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBjb21wb25lbnQuXFxuICAqIEBhcmcge2Z1bmN0aW9ufSBfY2FsbGJhY2sgLSBDYWxsYmFjayBmb3IgbG9hZCBzdWNjZXNzLlxcbiAgKiBAdG9kbyBJbXBsZW1lbnQgUHJvbWlzZXMuXFxuICAqIEByZXR1cm5zIGB0aGlzYFxcbiAgKi9cXG5cXHR0aGlzLmxvYWQgPSBmdW5jdGlvbiAoX25hbWUsIF9jYWxsYmFjaykge1xcblxcdFxcdHZhciBwYXRoO1xcblxcblxcdFxcdGlmIChjb21wb25lbnQuZ2V0KF9uYW1lKSkge1xcblxcdFxcdFxcdGlmIChfY2FsbGJhY2spIF9jYWxsYmFjay5jYWxsKGNvbXBvbmVudCwgX25hbWUpO1xcblxcdFxcdFxcdHJldHVybiBudWxsO1xcblxcdFxcdH1cXG5cXG5cXHRcXHRwYXRoID0gcGwuZ2FtZS5jb25maWcoJ2NvbXBvbmVudERpcmVjdG9yeScpICsgX25hbWUgKyAnL2JlaGF2aW9yLmpzJztcXG5cXG5cXHRcXHQkLmdldFNjcmlwdChwYXRoLCBmdW5jdGlvbiAoKSB7XFxuXFx0XFx0XFx0aWYgKF9jYWxsYmFjaykgX2NhbGxiYWNrLmNhbGwoY29tcG9uZW50LCBfbmFtZSk7XFxuXFx0XFx0XFx0Y29tcG9uZW50LnRyaWdnZXIoJ2xvYWRlZCcsIFtfbmFtZV0pO1xcblxcdFxcdH0pO1xcblxcblxcdFxcdHJldHVybiB0aGlzO1xcblxcdH07XFxuXFxuXFx0LyoqXFxuICAqIExvYWRzIGFsbCB0aGUgY29tcG9uZW50IHNjcmlwdHMgZm9yIEhUTUwgZWxlbWVudHMgd2l0aCBgcGwtY29tcG9uZW50YCBhdHRyaWJ1dGVzLlxcbiAgKiBAbWVtYmVyb2YgbW9kdWxlOnBsYXl+cGwuZ2FtZS5jb21wb25lbnRcXG4gICogQGFyZyB7ZnVuY3Rpb259IF9jYWxsYmFjayAtIENhbGxiYWNrIGZvciBsb2FkIHN1Y2Nlc3MuXFxuICAqIEB0b2RvIEltcGxlbWVudCBQcm9taXNlcy5cXG4gICogQHJldHVybnMgYHRoaXNgXFxuICAqL1xcblxcdHRoaXMubG9hZEFsbCA9IGZ1bmN0aW9uIChfY2FsbGJhY2spIHtcXG5cXHRcXHR2YXIgJGNvbXBvbmVudHMsIHF1ZXVlO1xcblxcblxcdFxcdCRjb21wb25lbnRzID0gJCgnW3BsLWNvbXBvbmVudF0nKTtcXG5cXHRcXHRxdWV1ZSA9IFtdO1xcblxcblxcdFxcdCRjb21wb25lbnRzLmVhY2goZnVuY3Rpb24gKF9pbmRleCkge1xcblxcdFxcdFxcdHZhciBuYW1lO1xcblxcblxcdFxcdFxcdG5hbWUgPSAkKHRoaXMpLmF0dHIoJ3BsLWNvbXBvbmVudCcpO1xcblxcblxcdFxcdFxcdGlmICh+cXVldWUuaW5kZXhPZihuYW1lKSkgcmV0dXJuO1xcblxcblxcdFxcdFxcdHF1ZXVlLnB1c2gobmFtZSk7XFxuXFx0XFx0fSk7XFxuXFxuXFx0XFx0cXVldWUuc2xpY2UoMCkuZm9yRWFjaChmdW5jdGlvbiAoX25hbWUpIHtcXG5cXHRcXHRcXHRjb21wb25lbnQubG9hZChfbmFtZSwgZnVuY3Rpb24gKCkge1xcblxcdFxcdFxcdFxcdHZhciBpbmRleDtcXG5cXG5cXHRcXHRcXHRcXHRpbmRleCA9IHF1ZXVlLmluZGV4T2YoX25hbWUpO1xcblxcdFxcdFxcdFxcdHF1ZXVlLnNwbGljZShpbmRleCwgMSk7XFxuXFxuXFx0XFx0XFx0XFx0aWYgKCFxdWV1ZS5sZW5ndGggJiYgX2NhbGxiYWNrKSBfY2FsbGJhY2suYXBwbHkoY29tcG9uZW50LCBhcmd1bWVudHMpO1xcblxcdFxcdFxcdH0pO1xcblxcdFxcdH0pO1xcblxcblxcdFxcdHJldHVybiB0aGlzO1xcblxcdH07XFxuXFxuXFx0Ly8gTWF5YmU/XFxuXFx0Ly8gdGhpcy5jb25maWcgPSBmdW5jdGlvbiAoKSB7fTtcXG59KS5jYWxsKGNvbXBvbmVudCk7XFxuXFxuZXhwb3J0c1snZGVmYXVsdCddID0gY29tcG9uZW50O1xcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOy8vQCBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emIzVnlZMlV2Y0d4aGVTNW5ZVzFsTG1OdmJYQnZibVZ1ZEM1cWN6OWxNVGcySWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPenM3T3pzN1owTkJVMmxDTEVWQlFVMDdPenM3ZFVOQlEwb3NSVUZCWXpzN096czdPenM3UVVGTmFrTXNTVUZCU1N4VlFVRlZMRU5CUVVNN096czdPenM3TzBGQlVXWXNVMEZCVXl4VFFVRlRMRU5CUVVVc1MwRkJTeXhGUVVGRkxHVkJRV1VzUlVGQlJUdEJRVU16UXl4TFFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNSVUZCUlR0QlFVTXhRaXhaUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETzBGQlEyWXNUMEZCU1N4RlFVRkZMRXRCUVVzN1FVRkRXQ3hwUWtGQll5eEZRVUZGTEdWQlFXVTdRVUZETDBJc1UwRkJUU3hGUVVGRkxFVkJRVVU3UjBGRFZpeERRVUZETEVOQlFVTTdSVUZEU0RzN1FVRkZSQ3hSUVVGUExFbEJRVWtzUTBGQlF6dERRVU5hT3p0QlFVVkVMRlZCUVZVc1IwRkJSeXhGUVVGRkxFTkJRVU03T3pzN096czdPMEZCVVdoQ0xFTkJRVU1zV1VGQldUczdRVUZGV2l4dFFrRkJTeXhMUVVGTExFTkJRVU1zU1VGQlNTd3lRa0ZCVXl4RFFVRkRPenM3T3pzN096dEJRVkY2UWl4TFFVRkpMRU5CUVVNc1IwRkJSeXhIUVVGSExGVkJRVlVzUzBGQlN5eEZRVUZGTzBGQlF6TkNMRTFCUVVrc1EwRkJReXhGUVVGRkxFMUJRVTBzUTBGQlF6czdRVUZGWkN4UFFVRkxMRU5CUVVNc1IwRkJReXhEUVVGRExFVkJRVVVzVFVGQlRTeEhRVUZITEZWQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFbEJRVVVzUTBGQlF5eEZRVUZGTzBGQlEzWkRMRTlCUVVrc1RVRkJUU3hEUVVGRExFbEJRVWtzUzBGQlN5eExRVUZMTEVWQlFVVXNUMEZCVHl4TlFVRk5MRU5CUVVNN1IwRkRla003TzBGQlJVUXNVMEZCVHl4SlFVRkpMRU5CUVVNN1JVRkRXaXhEUVVGRE96czdPenM3T3pzN096dEJRVmRHTEV0QlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1ZVRkJWU3hMUVVGTExFVkJRVVVzVTBGQlV5eEZRVUZGTzBGQlEzWkRMRTFCUVVrc1NVRkJTVHM3UVVGRlVpeE5RVUZKTEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRVVU3UVVGRGVrSXNUMEZCU1N4VFFVRlRMRVZCUVVVc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRhRVFzVlVGQlR5eEpRVUZKTEVOQlFVTTdSMEZEV2pzN1FVRkZSQ3hOUVVGSkxFZEJRVWNzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNSMEZCUXl4TFFVRkxMRWRCUVVNc1kwRkJZeXhEUVVGRE96dEJRVVZxUlN4SFFVRkRMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUlVGQlJTeFpRVUZaTzBGQlF6ZENMRTlCUVVrc1UwRkJVeXhGUVVGRkxGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRE8wRkJRMmhFTEZsQlFWTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0SFFVTnlReXhEUVVGRExFTkJRVU03TzBGQlJVZ3NVMEZCVHl4SlFVRkpMRU5CUVVNN1JVRkRXaXhEUVVGRE96czdPenM3T3pzN1FVRlRSaXhMUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEZWQlFWVXNVMEZCVXl4RlFVRkZPMEZCUTI1RExFMUJRVWtzVjBGQlZ5eEZRVUZGTEV0QlFVc3NRMEZCUXpzN1FVRkZka0lzWVVGQlZ5eEhRVUZITEVOQlFVTXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eERRVUZETzBGQlEyeERMRTlCUVVzc1IwRkJSeXhGUVVGRkxFTkJRVU03TzBGQlJWZ3NZVUZCVnl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFMUJRVTBzUlVGQlJUdEJRVU5zUXl4UFFVRkpMRWxCUVVrc1EwRkJRenM3UVVGRlZDeFBRVUZKTEVkQlFVY3NRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNRMEZCUXpzN1FVRkZjRU1zVDBGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzVDBGQlR6czdRVUZGYWtNc1VVRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0SFFVTnFRaXhEUVVGRExFTkJRVU03TzBGQlJVZ3NUMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCVlN4TFFVRkxMRVZCUVVVN1FVRkRka01zV1VGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVc1dVRkJXVHRCUVVOcVF5eFJRVUZKTEV0QlFVc3NRMEZCUXpzN1FVRkZWaXhUUVVGTExFZEJRVWNzUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVNM1FpeFRRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6czdRVUZGZGtJc1VVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVsQlFVa3NVMEZCVXl4RlFVRkZMRk5CUVZNc1EwRkJReXhMUVVGTExFTkJRVU1zVTBGQlV5eEZRVUZGTEZOQlFWTXNRMEZCUXp0SlFVTnlSU3hEUVVGRExFTkJRVU03UjBGRFNDeERRVUZETEVOQlFVTTdPMEZCUlVnc1UwRkJUeXhKUVVGSkxFTkJRVU03UlVGRFdpeERRVUZET3pzN08wTkJTMFlzUlVGQlJTeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN08zRkNRVVZLTEZOQlFWTWlMQ0ptYVd4bElqb2lNVGN1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlFUmxabWx1WlhNZ2RHaGxJR0JqYjIxd2IyNWxiblFvS1dBZ2JXVjBhRzlrSUdadmNpQmpiMjF3YjI1bGJuUWdZbVZvWVhacGIzSWdjbVZuYVhOMGNtRjBhVzl1TGlCVWFHbHpJRzFsZEdodlpDQnBjeUJoYkhOdklHRWdibUZ0WlhOaGNHTmxJR1p2Y2lCdFpYUm9iMlJ6SUhSdklHMWhibUZuWlNCaGJtUWdiRzloWkNCamIyMXdiMjVsYm5RZ1ltVm9ZWFpwYjNJZ2MyTnlhWEIwY3k1Y2JpQXFYRzRnS2lCQWJXOWtkV3hsWEc0Z0tpQkFZWFYwYUc5eUlFMXBZMkZvSUZKdmJHOXVJRHh0YVdOaGFFQm5hVzVoYzJsdWF5NWpiMjArWEc0Z0tseHVJQ29nUUhKbGNYVnBjbVZ6SUhCc1lYbCtjR3d1ZFhScGJGeHVJQ29nUUhKbGNYVnBjbVZ6SUhSNWNHVnpMMFYyWlc1MGMxeHVJQ292WEc1cGJYQnZjblFnZFhScGJDQm1jbTl0SUNkMWRHbHNKenRjYm1sdGNHOXlkQ0JGZG1WdWRITWdabkp2YlNBbmRIbHdaWE12UlhabGJuUnpKenRjYmx4dUx5b3FYRzRnS2lCRGIyeHNaV04wYVc5dUlHOW1JR052YlhCdmJtVnVkQ0JpWldoaGRtbHZjaUJ5WldOdmNtUnpYRzRnS2lCQVkyOXVjM1JjYmlBcUwxeHVkbUZ5SUVOUFRWQlBUa1ZPVkZNN1hHNWNiaThxS2x4dUlDb2dVbVZuYVhOMFpYSnpJR0VnWTI5dGNHOXVaVzUwSUdKbGFHRjJhVzl5TGx4dUlDb2dRR0Z5WnlCN2MzUnlhVzVuZlNCZmJtRnRaU0F0SUZSb1pTQnVZVzFsSUdadmNpQjBhR1VnWTI5dGNHOXVaVzUwTGx4dUlDb2dRR0Z5WnlCN1puVnVZM1JwYjI1OGIySnFaV04wZlNCZmFXMXdiR1Z0Wlc1MFlYUnBiMjRnTFNCRGIyNXpkSEoxWTNSdmNpQm1kVzVqZEdsdmJpQnZjaUJ2WW1wbFkzUWdkMmwwYUNCMGFHVWdZbVZvWVhacGIzSW5jeUJwYlhCc1pXMWxiblJoZEdsdmJpNWNiaUFxSUVCeVpYUjFjbTV6SUh0QWJHbHVheUJ0YjJSMWJHVTZjR3hoZVg1d2JDNW5ZVzFsZlZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJqYjIxd2IyNWxiblFnS0Y5dVlXMWxMQ0JmYVcxd2JHVnRaVzUwWVhScGIyNHBJSHRjYmx4MGFXWWdLQ0ZqYjIxd2IyNWxiblF1WjJWMEtGOXVZVzFsS1NrZ2UxeHVYSFJjZEVOUFRWQlBUa1ZPVkZNdWNIVnphQ2g3WEc1Y2RGeDBYSFJ1WVcxbE9pQmZibUZ0WlN4Y2JseDBYSFJjZEdsdGNHeGxiV1Z1ZEdGMGFXOXVPaUJmYVcxd2JHVnRaVzUwWVhScGIyNHNYRzVjZEZ4MFhIUmpiMjVtYVdjNklIdDlYRzVjZEZ4MGZTazdYRzVjZEgxY2JseHVYSFJ5WlhSMWNtNGdkR2hwY3p0Y2JuMWNibHh1UTA5TlVFOU9SVTVVVXlBOUlGdGRPMXh1WEc0dktpcGNiaUFxSUUxbGRHaHZaSE1nZEc4Z2JXRnVZV2RsSUdGdVpDQnNiMkZrSUdOdmJYQnZibVZ1ZENCaVpXaGhkbWx2Y2lCelkzSnBjSFJ6TGx4dUlDb2dRRzVoYldWemNHRmpaU0JqYjIxd2IyNWxiblJjYmlBcUlFQnRaVzFpWlhKdlppQnRiMlIxYkdVNmNHeGhlWDV3YkM1bllXMWxYRzRnS2lCQWJXbDRaWE1nUlhabGJuUnpYRzRnS2k5Y2JpaG1kVzVqZEdsdmJpQW9LU0I3WEc1Y2RGeHVYSFIxZEdsc0xtMXBlR2x1S0hSb2FYTXNJRVYyWlc1MGN5azdYRzVjYmx4MEx5b3FYRzVjZENBcUlFZHBkbVZ1SUdFZ2JtRnRaVHNnY0hKdmRtbGtaWE1nZEdobElHTnZiWEJ2Ym1WdWRDQnlaV052Y21RdUlHQjdibUZ0WlN3Z2FXMXdiR1Z0Wlc1MFlYUnBiMjU5WUZ4dVhIUWdLaUJBYldWdFltVnliMllnYlc5a2RXeGxPbkJzWVhsK2NHd3VaMkZ0WlM1amIyMXdiMjVsYm5SY2JseDBJQ29nUUdGeVp5QjdjM1J5YVc1bmZTQmZibUZ0WlNBdElGUm9aU0J1WVcxbElHOW1JSFJvWlNCamIyMXdiMjVsYm5RdVhHNWNkQ0FxSUVCeVpYUjFjbTV6SUh0dlltcGxZM1I5SUZSb1pTQnlaV052Y21RdVhHNWNkQ0FxTDF4dVhIUjBhR2x6TG1kbGRDQTlJR1oxYm1OMGFXOXVJQ2hmYm1GdFpTa2dlMXh1WEhSY2RIWmhjaUJwTENCeVpXTnZjbVE3WEc1Y2JseDBYSFJtYjNJZ0tHazlNRHNnY21WamIzSmtJRDBnUTA5TlVFOU9SVTVVVTF0cFhUc2dhU3M5TVNrZ2UxeHVYSFJjZEZ4MGFXWWdLSEpsWTI5eVpDNXVZVzFsSUQwOVBTQmZibUZ0WlNrZ2NtVjBkWEp1SUhKbFkyOXlaRHRjYmx4MFhIUjlYRzVjYmx4MFhIUnlaWFIxY200Z2JuVnNiRHRjYmx4MGZUdGNibHh1WEhRdktpcGNibHgwSUNvZ1RHOWhaSE1nZEdobElITmpjbWx3ZENCbWIzSWdkR2hsSUdOdmJYQnZibVZ1ZEM0Z1ZHaGxJRWhVVFV3Z1lXNWtJRU5UVXlCM2FXeHNJR0psSUd4dllXUmxaQ0IzYUdWdUlIUm9aU0JqYjIxd2IyNWxiblFnYzJOdmNHVWdhVzVwZEdGc2FYcGxjeTQ4WW5JK1hHNWNkQ0FxSUZSb1pTQndZWFJvSUc5bUlIUm9aU0J6WTNKcGNIUWdabWxzWlNCcGN5QnlaWE52YkhabFpDQmdlM0JzTG1kaGJXVXVZMjl1Wm1sbkxtTnZiWEJ2Ym1WdWRFUnBjbVZqZEc5eWVYMHZlMTl1WVcxbGZTOWlaV2hoZG1sdmNpNXFjMkF1WEc1Y2RDQXFJRUJ0WlcxaVpYSnZaaUJ0YjJSMWJHVTZjR3hoZVg1d2JDNW5ZVzFsTG1OdmJYQnZibVZ1ZEZ4dVhIUWdLaUJBWVhKbklIdHpkSEpwYm1kOUlGOXVZVzFsSUMwZ1ZHaGxJRzVoYldVZ2IyWWdkR2hsSUdOdmJYQnZibVZ1ZEM1Y2JseDBJQ29nUUdGeVp5QjdablZ1WTNScGIyNTlJRjlqWVd4c1ltRmpheUF0SUVOaGJHeGlZV05ySUdadmNpQnNiMkZrSUhOMVkyTmxjM011WEc1Y2RDQXFJRUIwYjJSdklFbHRjR3hsYldWdWRDQlFjbTl0YVhObGN5NWNibHgwSUNvZ1FISmxkSFZ5Ym5NZ1lIUm9hWE5nWEc1Y2RDQXFMMXh1WEhSMGFHbHpMbXh2WVdRZ1BTQm1kVzVqZEdsdmJpQW9YMjVoYldVc0lGOWpZV3hzWW1GamF5a2dlMXh1WEhSY2RIWmhjaUJ3WVhSb1hHNWNibHgwWEhScFppQW9ZMjl0Y0c5dVpXNTBMbWRsZENoZmJtRnRaU2twSUh0Y2JseDBYSFJjZEdsbUlDaGZZMkZzYkdKaFkyc3BJRjlqWVd4c1ltRmpheTVqWVd4c0tHTnZiWEJ2Ym1WdWRDd2dYMjVoYldVcE8xeHVYSFJjZEZ4MGNtVjBkWEp1SUc1MWJHdzdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGNHRjBhQ0E5SUhCc0xtZGhiV1V1WTI5dVptbG5LQ2RqYjIxd2IyNWxiblJFYVhKbFkzUnZjbmtuS1N0ZmJtRnRaU3NuTDJKbGFHRjJhVzl5TG1wekp6dGNibHh1WEhSY2RDUXVaMlYwVTJOeWFYQjBLSEJoZEdnc0lHWjFibU4wYVc5dUlDZ3BJSHRjYmx4MFhIUmNkR2xtSUNoZlkyRnNiR0poWTJzcElGOWpZV3hzWW1GamF5NWpZV3hzS0dOdmJYQnZibVZ1ZEN3Z1gyNWhiV1VwTzF4dVhIUmNkRngwWTI5dGNHOXVaVzUwTG5SeWFXZG5aWElvSjJ4dllXUmxaQ2NzSUZ0ZmJtRnRaVjBwTzF4dVhIUmNkSDBwTzF4dVhHNWNkRngwY21WMGRYSnVJSFJvYVhNN1hHNWNkSDA3WEc1Y2JseDBMeW9xWEc1Y2RDQXFJRXh2WVdSeklHRnNiQ0IwYUdVZ1kyOXRjRzl1Wlc1MElITmpjbWx3ZEhNZ1ptOXlJRWhVVFV3Z1pXeGxiV1Z1ZEhNZ2QybDBhQ0JnY0d3dFkyOXRjRzl1Wlc1MFlDQmhkSFJ5YVdKMWRHVnpMbHh1WEhRZ0tpQkFiV1Z0WW1WeWIyWWdiVzlrZFd4bE9uQnNZWGwrY0d3dVoyRnRaUzVqYjIxd2IyNWxiblJjYmx4MElDb2dRR0Z5WnlCN1puVnVZM1JwYjI1OUlGOWpZV3hzWW1GamF5QXRJRU5oYkd4aVlXTnJJR1p2Y2lCc2IyRmtJSE4xWTJObGMzTXVYRzVjZENBcUlFQjBiMlJ2SUVsdGNHeGxiV1Z1ZENCUWNtOXRhWE5sY3k1Y2JseDBJQ29nUUhKbGRIVnlibk1nWUhSb2FYTmdYRzVjZENBcUwxeHVYSFIwYUdsekxteHZZV1JCYkd3Z1BTQm1kVzVqZEdsdmJpQW9YMk5oYkd4aVlXTnJLU0I3WEc1Y2RGeDBkbUZ5SUNSamIyMXdiMjVsYm5SekxDQnhkV1YxWlR0Y2JseHVYSFJjZENSamIyMXdiMjVsYm5SeklEMGdKQ2duVzNCc0xXTnZiWEJ2Ym1WdWRGMG5LVHRjYmx4MFhIUnhkV1YxWlNBOUlGdGRPMXh1WEc1Y2RGeDBKR052YlhCdmJtVnVkSE11WldGamFDaG1kVzVqZEdsdmJpQW9YMmx1WkdWNEtTQjdYRzVjZEZ4MFhIUjJZWElnYm1GdFpUdGNibHh1WEhSY2RGeDBibUZ0WlNBOUlDUW9kR2hwY3lrdVlYUjBjaWduY0d3dFkyOXRjRzl1Wlc1MEp5azdYRzVjYmx4MFhIUmNkR2xtSUNoK2NYVmxkV1V1YVc1a1pYaFBaaWh1WVcxbEtTa2djbVYwZFhKdU8xeHVYRzVjZEZ4MFhIUnhkV1YxWlM1d2RYTm9LRzVoYldVcE8xeHVYSFJjZEgwcE8xeHVYRzVjZEZ4MGNYVmxkV1V1YzJ4cFkyVW9NQ2t1Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvWDI1aGJXVXBJSHRjYmx4MFhIUmNkR052YlhCdmJtVnVkQzVzYjJGa0tGOXVZVzFsTENCbWRXNWpkR2x2YmlBb0tTQjdYRzVjZEZ4MFhIUmNkSFpoY2lCcGJtUmxlRHRjYmx4dVhIUmNkRngwWEhScGJtUmxlQ0E5SUhGMVpYVmxMbWx1WkdWNFQyWW9YMjVoYldVcE8xeHVYSFJjZEZ4MFhIUnhkV1YxWlM1emNHeHBZMlVvYVc1a1pYZ3NJREVwTzF4dVhHNWNkRngwWEhSY2RHbG1JQ2doY1hWbGRXVXViR1Z1WjNSb0lDWW1JRjlqWVd4c1ltRmpheWtnWDJOaGJHeGlZV05yTG1Gd2NHeDVLR052YlhCdmJtVnVkQ3dnWVhKbmRXMWxiblJ6S1Z4dVhIUmNkRngwZlNrN1hHNWNkRngwZlNrN1hHNWNibHgwWEhSeVpYUjFjbTRnZEdocGN6dGNibHgwZlR0Y2JseHVYSFF2THlCTllYbGlaVDljYmx4MEx5OGdkR2hwY3k1amIyNW1hV2NnUFNCbWRXNWpkR2x2YmlBb0tTQjdmVHRjYmx4dWZTa3VZMkZzYkNoamIyMXdiMjVsYm5RcE8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiMjF3YjI1bGJuUTdYRzVjYmx4dVhHNHZLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSWdLaXBjYmlBcUtpQXVMM052ZFhKalpTOXdiR0Y1TG1kaGJXVXVZMjl0Y0c5dVpXNTBMbXB6WEc0Z0tpb3ZJbDBzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XCIpO1xuXG4vKioqLyB9LFxuLyogMTggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdGV2YWwoXCJ2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oMilbJ2RlZmF1bHQnXTtcXG5cXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xcbi8qKlxcbiogIEV2ZW50c1xcbiogIEBkZXNjIENvbnRhaW5zIG1ldGhvZHMgZm9yIG1hbmFnaW5nIGFuZCBkaXNwYXRjaGluZyBldmVudHMgZnJvbSBvYmplY3RzLlxcbiogIEBwcm90byBCYXNpY1xcbiovXFxuXFxudmFyIF90eXBlc0Jhc2ljID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XFxuXFxudmFyIF90eXBlc0Jhc2ljMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVzQmFzaWMpO1xcblxcbnZhciBFdmVudHMgPSBfdHlwZXNCYXNpYzJbJ2RlZmF1bHQnXS5leHRlbmQoZnVuY3Rpb24gKCkge1xcblxcdHZhciBpLCBtZXRob2QsIG1ldGhvZHM7XFxuXFx0LyoqXFxuICogIEBkZXNjIENyZWF0ZXMgYSBmdW5jdGlvbiB3aXRoIGEgcHJveHkgdG8gdGhlIGpRdWVyeSBtZXRob2QuXFxuICogIEBwYXJhbSBfbmFtZSAoU3RyaW5nKSBUaGUgbmFtZSBvZiB0aGUgbWV0aG9kIGJlaW5nIHByb3hpZWQuXFxuICogIEByZXR1cm4gKGpRdWVyeXwqKSBFaXRoZXIgYSBqUXVlcnkgb2JqZWN0IG9yIHdoYXRldmVyIHRoZSBvcmlnaW5hbCBtZXRob2QgcmV0dXJucy5cXG4gKiAgQHByaXZhdGVcXG4gKi9cXG5cXHRmdW5jdGlvbiBjcmVhdGVQcm94eUZ1bmN0aW9uKF9uYW1lKSB7XFxuXFx0XFx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcXG5cXHRcXHRcXHR2YXIgJGpxID0gJCgpO1xcblxcdFxcdFxcdC8vIFdlIG11c3Qgd3JhcCBvdXIgb2JqZWN0IGluIGpRdWVyeS4gSWYgJ3R5cGVvZiB0aGlzJyBpcyBhIGZ1bmN0aW9uIHRoZW4gd2UgbmVlZFxcblxcdFxcdFxcdC8vIHRvIGFkZCBpdCBpbiB0aGlzIG1hbm5lciwgb3RoZXJ3aXNlIGpRdWVyeSB0cmVhdHMgaXQgbGlrZSBhIHJlYWR5IGNhbGxiYWNrLlxcblxcdFxcdFxcdCRqcS5wdXNoKHRoaXMpO1xcblxcblxcdFxcdFxcdHJldHVybiAkLmZuW19uYW1lXS5hcHBseSgkanEsIGFyZ3VtZW50cyk7XFxuXFx0XFx0fTtcXG5cXHR9XFxuXFxuXFx0bWV0aG9kcyA9IFsnb24nLCAnb2ZmJywgJ3RyaWdnZXInXTtcXG5cXG5cXHR0aGlzLmJhc2VUeXBlID0gJ1RZUEVfRVZFTlRTJztcXG5cXG5cXHRmb3IgKGkgPSAwOyBtZXRob2QgPSBtZXRob2RzW2ldOyBpICs9IDEpIHtcXG5cXHRcXHR0aGlzW21ldGhvZF0gPSBjcmVhdGVQcm94eUZ1bmN0aW9uKG1ldGhvZCk7XFxuXFx0fVxcbn0pO1xcblxcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IEV2ZW50cztcXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsvL0Agc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOXpiM1Z5WTJVdmRIbHdaWE12UlhabGJuUnpMbXB6UDJWbFpUTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN08zTkRRVTFyUWl4RlFVRmhPenM3TzBGQlJTOUNMRWxCUVVrc1RVRkJUU3hIUVVGSExIZENRVUZOTEUxQlFVMHNRMEZCUXl4WlFVRlpPMEZCUTNKRExFdEJRVWtzUTBGQlF5eEZRVUZGTEUxQlFVMHNSVUZCUlN4UFFVRlBMRU5CUVVNN096czdPenM3UVVGUGRrSXNWVUZCVXl4dFFrRkJiVUlzUTBGQlJTeExRVUZMTEVWQlFVVTdRVUZEY0VNc1UwRkJUeXhaUVVGWk8wRkJRMnhDTEU5QlFVa3NSMEZCUnl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRE96czdRVUZIWkN4TlFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZET3p0QlFVVm1MRlZCUVU4c1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhGUVVGRkxGTkJRVk1zUTBGQlF5eERRVUZETzBkQlEzcERMRU5CUVVNN1JVRkRSanM3UVVGRlJDeFJRVUZQTEVkQlFVY3NRMEZCUXl4SlFVRkpMRVZCUVVVc1MwRkJTeXhGUVVGRkxGTkJRVk1zUTBGQlF5eERRVUZET3p0QlFVVnVReXhMUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEdGQlFXRXNRMEZCUXpzN1FVRkZPVUlzVFVGQlN5eERRVUZETEVkQlFVTXNRMEZCUXl4RlFVRkZMRTFCUVUwc1IwRkJSeXhQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4SlFVRkZMRU5CUVVNc1JVRkJSVHRCUVVOd1F5eE5RVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc2JVSkJRVzFDTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1JVRkRNME03UTBGRFJDeERRVUZETEVOQlFVTTdPM0ZDUVVWWkxFMUJRVTBpTENKbWFXeGxJam9pTVRndWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2Jpb2dJRVYyWlc1MGMxeHVLaUFnUUdSbGMyTWdRMjl1ZEdGcGJuTWdiV1YwYUc5a2N5Qm1iM0lnYldGdVlXZHBibWNnWVc1a0lHUnBjM0JoZEdOb2FXNW5JR1YyWlc1MGN5Qm1jbTl0SUc5aWFtVmpkSE11WEc0cUlDQkFjSEp2ZEc4Z1FtRnphV05jYmlvdlhHNWNibWx0Y0c5eWRDQkNZWE5wWXlCbWNtOXRJQ2QwZVhCbGN5OUNZWE5wWXljN1hHNWNiblpoY2lCRmRtVnVkSE1nUFNCQ1lYTnBZeTVsZUhSbGJtUW9ablZ1WTNScGIyNGdLQ2tnZTF4dVhIUjJZWElnYVN3Z2JXVjBhRzlrTENCdFpYUm9iMlJ6TzF4dVhIUXZLaXBjYmx4MEtpQWdRR1JsYzJNZ1EzSmxZWFJsY3lCaElHWjFibU4wYVc5dUlIZHBkR2dnWVNCd2NtOTRlU0IwYnlCMGFHVWdhbEYxWlhKNUlHMWxkR2h2WkM1Y2JseDBLaUFnUUhCaGNtRnRJRjl1WVcxbElDaFRkSEpwYm1jcElGUm9aU0J1WVcxbElHOW1JSFJvWlNCdFpYUm9iMlFnWW1WcGJtY2djSEp2ZUdsbFpDNWNibHgwS2lBZ1FISmxkSFZ5YmlBb2FsRjFaWEo1ZkNvcElFVnBkR2hsY2lCaElHcFJkV1Z5ZVNCdlltcGxZM1FnYjNJZ2QyaGhkR1YyWlhJZ2RHaGxJRzl5YVdkcGJtRnNJRzFsZEdodlpDQnlaWFIxY201ekxseHVYSFFxSUNCQWNISnBkbUYwWlZ4dVhIUXFMMXh1WEhSbWRXNWpkR2x2YmlCamNtVmhkR1ZRY205NGVVWjFibU4wYVc5dUlDaGZibUZ0WlNrZ2UxeHVYSFJjZEhKbGRIVnliaUJtZFc1amRHbHZiaUFvS1NCN1hHNWNkRngwWEhSMllYSWdKR3B4SUQwZ0pDZ3BPMXh1WEhSY2RGeDBMeThnVjJVZ2JYVnpkQ0IzY21Gd0lHOTFjaUJ2WW1wbFkzUWdhVzRnYWxGMVpYSjVMaUJKWmlBbmRIbHdaVzltSUhSb2FYTW5JR2x6SUdFZ1puVnVZM1JwYjI0Z2RHaGxiaUIzWlNCdVpXVmtYRzVjZEZ4MFhIUXZMeUIwYnlCaFpHUWdhWFFnYVc0Z2RHaHBjeUJ0WVc1dVpYSXNJRzkwYUdWeWQybHpaU0JxVVhWbGNua2dkSEpsWVhSeklHbDBJR3hwYTJVZ1lTQnlaV0ZrZVNCallXeHNZbUZqYXk1Y2JseDBYSFJjZENScWNTNXdkWE5vS0hSb2FYTXBPMXh1WEc1Y2RGeDBYSFJ5WlhSMWNtNGdKQzVtYmx0ZmJtRnRaVjB1WVhCd2JIa29KR3B4TENCaGNtZDFiV1Z1ZEhNcE8xeHVYSFJjZEgwN1hHNWNkSDFjYmx4dVhIUnRaWFJvYjJSeklEMGdXeWR2Ymljc0lDZHZabVluTENBbmRISnBaMmRsY2lkZE8xeHVYRzVjZEhSb2FYTXVZbUZ6WlZSNWNHVWdQU0FuVkZsUVJWOUZWa1ZPVkZNbk8xeHVYRzVjZEdadmNpQW9hVDB3T3lCdFpYUm9iMlFnUFNCdFpYUm9iMlJ6VzJsZE95QnBLejB4S1NCN1hHNWNkRngwZEdocGMxdHRaWFJvYjJSZElEMGdZM0psWVhSbFVISnZlSGxHZFc1amRHbHZiaWh0WlhSb2IyUXBPMXh1WEhSOVhHNTlLVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnUlhabGJuUnpPMXh1WEc1Y2JpOHFLaUJYUlVKUVFVTkxJRVpQVDFSRlVpQXFLbHh1SUNvcUlDNHZjMjkxY21ObEwzUjVjR1Z6TDBWMlpXNTBjeTVxYzF4dUlDb3FMeUpkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIpO1xuXG4vKioqLyB9LFxuLyogMTkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdGV2YWwoXCJ2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oMilbJ2RlZmF1bHQnXTtcXG5cXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xcblxcbnZhciBfcGxheUdhbWVNYW5hZ2VyRHJhZ2dhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7XFxuXFxudmFyIF9wbGF5R2FtZU1hbmFnZXJEcmFnZ2FibGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGxheUdhbWVNYW5hZ2VyRHJhZ2dhYmxlKTtcXG5cXG5leHBvcnRzLmRyYWdnYWJsZSA9IF9wbGF5R2FtZU1hbmFnZXJEcmFnZ2FibGUyWydkZWZhdWx0J107Ly9AIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTl6YjNWeVkyVXZjR3hoZVM1bllXMWxMbTFoYm1GblpYSXVhbk0vT0RKaU5pSmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPMjlFUVVGelFpeEZRVUUyUWpzN096dFJRVVV4UXl4VFFVRlRJaXdpWm1sc1pTSTZJakU1TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElHUnlZV2RuWVdKc1pTQm1jbTl0SUNkd2JHRjVMbWRoYldVdWJXRnVZV2RsY2k1a2NtRm5aMkZpYkdVbk8xeHVYRzVsZUhCdmNuUWdleUJrY21GbloyRmliR1VnZlZ4dVhHNWNiaThxS2lCWFJVSlFRVU5MSUVaUFQxUkZVaUFxS2x4dUlDb3FJQzR2YzI5MWNtTmxMM0JzWVhrdVoyRnRaUzV0WVc1aFoyVnlMbXB6WEc0Z0tpb3ZJbDBzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XCIpO1xuXG4vKioqLyB9LFxuLyogMjAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdGV2YWwoXCJ2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oMilbJ2RlZmF1bHQnXTtcXG5cXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xcblxcbnZhciBfdXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xcblxcbnZhciBfdXRpbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91dGlsKTtcXG5cXG52YXIgX3R5cGVzQ29sbGVjdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xcblxcbnZhciBfdHlwZXNDb2xsZWN0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVzQ29sbGVjdGlvbik7XFxuXFxudmFyIF90eXBlc0RpbWVuc2lvbnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xcblxcbnZhciBDT0xMRUNUSU9OX0RSQUdBQkxFUyA9IF90eXBlc0NvbGxlY3Rpb24yWydkZWZhdWx0J10uY3JlYXRlKCk7XFxuXFxuZnVuY3Rpb24gYm9vdCgpIHtcXG5cXHRhdHRhY2hFdmVudHMoKTtcXG59XFxuXFxuZnVuY3Rpb24gYXR0YWNoRXZlbnRzKCkge1xcblxcdHZhciBzdGF0ZTtcXG5cXG5cXHQkKGRvY3VtZW50KS5vbignbW91c2Vkb3duJywgZnVuY3Rpb24gKF9ldmVudCkge1xcblxcdFxcdHZhciBjdXJzb3IsICRkcmFnZ2FibGUsIHRyYW5zZm9ybSwgcG9pbnQsIG1vZGUsIHN0eWxlLCBkcmFnU3RhcnRFdmVudDtcXG5cXG5cXHRcXHRjdXJzb3IgPSByZXNvbHZlRXZlbnRQb2ludChfZXZlbnQpO1xcblxcdFxcdCRkcmFnZ2FibGUgPSAkKF9ldmVudC50YXJnZXQpLmNsb3Nlc3QoJ1twbC1kcmFnZ2FibGVdJyk7XFxuXFxuXFx0XFx0aWYgKCRkcmFnZ2FibGUubGVuZ3RoKSB7XFxuXFx0XFx0XFx0bW9kZSA9ICRkcmFnZ2FibGUuYXR0cigncGwtZHJhZ2dhYmxlJyk7XFxuXFx0XFx0XFx0cG9pbnQgPSAkZHJhZ2dhYmxlLmFic29sdXRlUG9zaXRpb24oKTtcXG5cXHRcXHRcXHR0cmFuc2Zvcm0gPSAkZHJhZ2dhYmxlLnRyYW5zZm9ybSgpO1xcblxcdFxcdFxcdC8vIFRPRE86IFNldCB0aGVzZSBzdHlsZXMgaW4gYSBzdHlsZSBub2RlLlxcblxcdFxcdFxcdC8vIFRoYXQgd2F5IEkgZG9udCBoYXZlIHRvIG92ZXJyaWRlIHRoZW0gaW1wb3J0YW50IDovXFxuXFx0XFx0XFx0c3R5bGUgPSBfdXRpbDJbJ2RlZmF1bHQnXS5taXhpbih7fSwgd2luZG93LmdldENvbXB1dGVkU3R5bGUoJGRyYWdnYWJsZVswXSkpO1xcblxcblxcdFxcdFxcdGRlbGV0ZSBzdHlsZS56SW5kZXg7XFxuXFx0XFx0XFx0ZGVsZXRlIHN0eWxlLm9wYWNpdHk7XFxuXFx0XFx0XFx0ZGVsZXRlIHN0eWxlLmN1cnNvcjtcXG5cXHRcXHRcXHRkZWxldGUgc3R5bGUudHJhbnNpdGlvbjtcXG5cXHRcXHRcXHRkZWxldGUgc3R5bGUudHJhbnNpdGlvbkRlbGF5O1xcblxcdFxcdFxcdGRlbGV0ZSBzdHlsZS50cmFuc2l0aW9uRHVyYXRpb247XFxuXFx0XFx0XFx0ZGVsZXRlIHN0eWxlLnRyYW5zaXRpb25Qcm9wZXJ0eTtcXG5cXHRcXHRcXHRkZWxldGUgc3R5bGUudHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uO1xcblxcblxcdFxcdFxcdHN0YXRlID0ge1xcblxcdFxcdFxcdFxcdG1vZGU6IG1vZGUsXFxuXFx0XFx0XFx0XFx0JGRyYWdnYWJsZTogJGRyYWdnYWJsZSxcXG5cXHRcXHRcXHRcXHRzY29wZTogJGRyYWdnYWJsZS5zY29wZSgpLFxcblxcdFxcdFxcdFxcdCRoZWxwZXI6IG51bGwsXFxuXFxuXFx0XFx0XFx0XFx0c3RhcnQ6IHtcXG5cXHRcXHRcXHRcXHRcXHRjdXJzb3I6IGN1cnNvcixcXG5cXHRcXHRcXHRcXHRcXHRwb2ludDogcG9pbnQsXFxuXFx0XFx0XFx0XFx0XFx0dHJhbnNmb3JtOiB0cmFuc2Zvcm1cXG5cXHRcXHRcXHRcXHR9LFxcblxcblxcdFxcdFxcdFxcdHByb2dyZXNzOiB7XFxuXFx0XFx0XFx0XFx0XFx0ZGlzdGFuY2U6IG51bGwsXFxuXFx0XFx0XFx0XFx0XFx0cG9pbnQ6IG51bGwsXFxuXFx0XFx0XFx0XFx0XFx0dHJhbnNmb3JtOiBudWxsXFxuXFx0XFx0XFx0XFx0fVxcblxcdFxcdFxcdH07XFxuXFxuXFx0XFx0XFx0c3dpdGNoIChtb2RlKSB7XFxuXFx0XFx0XFx0XFx0Y2FzZSAnY2xvbmUnOlxcblxcdFxcdFxcdFxcdFxcdHN0YXRlLiRoZWxwZXIgPSAkZHJhZ2dhYmxlLmNsb25lKCk7XFxuXFx0XFx0XFx0XFx0XFx0c3RhdGUuJGhlbHBlci5yZW1vdmVBdHRyKCdwbC1kcmFnZ2FibGUnKSAvLyBoZWxwZXJzIGFyZSBub3QgdG8gYmUgY2FwdHVyZWQgYXMgZHJhZ2dhYmxlXFxuXFx0XFx0XFx0XFx0XFx0LmFkZENsYXNzKCdkcmFnZ2FibGUtaGVscGVyJykuY3NzKHN0eWxlKSAvLyBwcmVzZXJ2ZXMgdGhlIHN0eWxlIG9mIHRoZSBkcmFnZ2FibGUuXFxuXFx0XFx0XFx0XFx0XFx0LmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpLmFic29sdXRlUG9zaXRpb24ocG9pbnQpO1xcblxcdFxcdFxcdFxcdFxcdGJyZWFrO1xcblxcblxcdFxcdFxcdFxcdGNhc2UgJ3BsdWNrJzpcXG5cXHRcXHRcXHRcXHRcXHQkZHJhZ2dhYmxlLmFkZENsYXNzKCdQTFVDS0VEJyk7XFxuXFxuXFx0XFx0XFx0XFx0XFx0c3RhdGUuJGhlbHBlciA9ICRkcmFnZ2FibGUuY2xvbmUoKTtcXG5cXHRcXHRcXHRcXHRcXHRzdGF0ZS4kaGVscGVyLnJlbW92ZUF0dHIoJ3BsLWRyYWdnYWJsZScpIC8vIGhlbHBlcnMgYXJlIG5vdCB0byBiZSBjYXB0dXJlZCBhcyBkcmFnZ2FibGVcXG5cXHRcXHRcXHRcXHRcXHQuYWRkQ2xhc3MoJ2RyYWdnYWJsZS1oZWxwZXInKS5jc3Moc3R5bGUpIC8vIHByZXNlcnZlcyB0aGUgc3R5bGUgb2YgdGhlIGRyYWdnYWJsZS5cXG5cXHRcXHRcXHRcXHRcXHQuYXBwZW5kVG8oZG9jdW1lbnQuYm9keSkuYWJzb2x1dGVQb3NpdGlvbihwb2ludCk7XFxuXFx0XFx0XFx0XFx0XFx0YnJlYWs7XFxuXFxuXFx0XFx0XFx0XFx0ZGVmYXVsdDpcXG5cXHRcXHRcXHRcXHRcXHRzdGF0ZS4kaGVscGVyID0gJGRyYWdnYWJsZTtcXG5cXHRcXHRcXHRcXHRcXHRicmVhaztcXG5cXHRcXHRcXHR9XFxuXFxuXFx0XFx0XFx0c3RhdGUuJGhlbHBlci5yZW1vdmVDbGFzcygnRFJBRy1FTkRFRCcpLmFkZENsYXNzKCdEUkFHLVNUQVJUJyk7XFxuXFxuXFx0XFx0XFx0ZHJhZ1N0YXJ0RXZlbnQgPSAkLkV2ZW50KCdkcmFnLXN0YXJ0Jywge1xcblxcdFxcdFxcdFxcdHN0YXRlOiBzdGF0ZSxcXG5cXHRcXHRcXHRcXHR0YXJnZXRTY29wZTogc3RhdGUuc2NvcGVcXG5cXHRcXHRcXHR9KTtcXG5cXG5cXHRcXHRcXHRzdGF0ZS5zY29wZS50cmlnZ2VyKGRyYWdTdGFydEV2ZW50KTtcXG5cXHRcXHR9XFxuXFx0fSkub24oJ21vdXNlbW92ZScsIGZ1bmN0aW9uIChfZXZlbnQpIHtcXG5cXHRcXHR2YXIgY3Vyc29yLCAkZHJhZ2dhYmxlLCBkaXN0YW5jZSwgcG9pbnQsIHRyYW5zZm9ybSwgZHJhZ01vdmVFdmVudDtcXG5cXG5cXHRcXHRpZiAoc3RhdGUpIHtcXG5cXHRcXHRcXHRjdXJzb3IgPSByZXNvbHZlRXZlbnRQb2ludChfZXZlbnQpO1xcblxcdFxcdFxcdGRpc3RhbmNlID0gc3RhdGUuc3RhcnQuY3Vyc29yLmRpc3RhbmNlKGN1cnNvcik7XFxuXFx0XFx0XFx0cG9pbnQgPSBfdHlwZXNEaW1lbnNpb25zLlBvaW50LmNyZWF0ZSgpO1xcblxcdFxcdFxcdHRyYW5zZm9ybSA9IG51bGw7XFxuXFxuXFx0XFx0XFx0aWYgKHN0YXRlLnN0YXJ0LnRyYW5zZm9ybSAhPT0gJ25vbmUnKSB7XFxuXFx0XFx0XFx0XFx0dHJhbnNmb3JtID0gc3RhdGUuc3RhcnQudHJhbnNmb3JtLmNsb25lKCk7XFxuXFx0XFx0XFx0XFx0dHJhbnNmb3JtLnRyYW5zbGF0ZShkaXN0YW5jZS53aWR0aCwgZGlzdGFuY2UuaGVpZ2h0KTtcXG5cXHRcXHRcXHRcXHRwb2ludC5zZXQodHJhbnNmb3JtLmFwcGx5VG9Qb2ludCgwLCAwKSk7XFxuXFx0XFx0XFx0fSBlbHNlIHtcXG5cXHRcXHRcXHRcXHRwb2ludCA9IGRpc3RhbmNlLnRvKCdwb2ludCcpO1xcblxcdFxcdFxcdH1cXG5cXG5cXHRcXHRcXHRpZiAoc3RhdGUuJGhlbHBlci5oYXNDbGFzcygnRFJBRy1TVEFSVCcpKSB7XFxuXFx0XFx0XFx0XFx0c3RhdGUuJGhlbHBlci5yZW1vdmVDbGFzcygnRFJBRy1TVEFSVCcpLmFkZENsYXNzKCdEUkFHR0lORycpO1xcblxcdFxcdFxcdH1cXG5cXG5cXHRcXHRcXHRkcmFnTW92ZUV2ZW50ID0gJC5FdmVudCgnZHJhZy1tb3ZlJywge1xcblxcdFxcdFxcdFxcdHN0YXRlOiBzdGF0ZSxcXG5cXHRcXHRcXHRcXHR0YXJnZXRTY29wZTogc3RhdGUuc2NvcGVcXG5cXHRcXHRcXHR9KTtcXG5cXG5cXHRcXHRcXHRzdGF0ZS5wcm9ncmVzcy5kaXN0YW5jZSA9IGRpc3RhbmNlO1xcblxcdFxcdFxcdHN0YXRlLnByb2dyZXNzLnBvaW50ID0gc3RhdGUuc3RhcnQucG9pbnQuaW5jKHBvaW50KTtcXG5cXHRcXHRcXHRzdGF0ZS5wcm9ncmVzcy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XFxuXFxuXFx0XFx0XFx0c3RhdGUuc2NvcGUudHJhbnNsYXRlKHN0YXRlLiRoZWxwZXIsIHBvaW50LnNjYWxlKDEgLyBzdGF0ZS5zY29wZS5nYW1lLnpvb20pKTtcXG5cXHRcXHRcXHRzdGF0ZS5zY29wZS50cmlnZ2VyKGRyYWdNb3ZlRXZlbnQpO1xcblxcdFxcdH1cXG5cXHR9KS5vbignbW91c2V1cCBtb3VzZW91dCcsIGZ1bmN0aW9uIChfZXZlbnQpIHtcXG5cXHRcXHR2YXIgJGRyYWdnYWJsZSwgZHJhZ0VuZEV2ZW50O1xcblxcblxcdFxcdGlmIChzdGF0ZSkge1xcblxcdFxcdFxcdC8vIERvIG5vdCBlbmQgZHJhZ2dpbmcgaWYgd2UgZG9udCBtb3VzZSBvdXQgb2YgdGhlIGRvY3VtZW50LlxcblxcdFxcdFxcdGlmIChfZXZlbnQudHlwZSA9PT0gJ21vdXNlb3V0JyAmJiAhIH5bbnVsbCwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XS5pbmRleE9mKF9ldmVudC50b0VsZW1lbnQpKSB7XFxuXFx0XFx0XFx0XFx0cmV0dXJuO1xcblxcdFxcdFxcdH1cXG5cXG5cXHRcXHRcXHQkZHJhZ2dhYmxlID0gc3RhdGUuJGRyYWdnYWJsZTtcXG5cXG5cXHRcXHRcXHRpZiAoc3RhdGUuJGhlbHBlci5oYXNDbGFzcygnZHJhZ2dhYmxlLWhlbHBlcicpKSB7XFxuXFx0XFx0XFx0XFx0c3RhdGUuJGhlbHBlci5vbigndHJhbnNpdGlvbmVuZCcsIGZ1bmN0aW9uICgpIHtcXG5cXHRcXHRcXHRcXHRcXHQkZHJhZ2dhYmxlLnJlbW92ZUNsYXNzKCdQTFVDS0VEJyk7XFxuXFx0XFx0XFx0XFx0XFx0JCh0aGlzKS5yZW1vdmUoKTtcXG5cXHRcXHRcXHRcXHR9KTtcXG5cXHRcXHRcXHR9XFxuXFxuXFx0XFx0XFx0c3RhdGUuJGhlbHBlci5yZW1vdmVDbGFzcygnRFJBRy1TVEFSVCBEUkFHR0lORycpLmFkZENsYXNzKCdEUkFHLUVOREVEJyk7XFxuXFxuXFx0XFx0XFx0ZHJhZ0VuZEV2ZW50ID0gJC5FdmVudCgnZHJhZy1lbmQnLCB7XFxuXFx0XFx0XFx0XFx0c3RhdGU6IHN0YXRlLFxcblxcdFxcdFxcdFxcdHRhcmdldFNjb3BlOiBzdGF0ZS5zY29wZVxcblxcdFxcdFxcdH0pO1xcblxcblxcdFxcdFxcdHN0YXRlLnNjb3BlLnRyaWdnZXIoZHJhZ0VuZEV2ZW50KTtcXG5cXG5cXHRcXHRcXHRzdGF0ZSA9IG51bGw7XFxuXFx0XFx0fVxcblxcdH0pO1xcbn1cXG5cXG5mdW5jdGlvbiByZXNvbHZlRXZlbnRQb2ludChfZXZlbnQpIHtcXG5cXHR2YXIgeCwgeTtcXG5cXG5cXHRpZiAoX2V2ZW50LnRvdWNoZXMpIHtcXG5cXHRcXHR4ID0gX2V2ZW50LnRvdWNoZXNbMF0uY2xpZW50WDtcXG5cXHRcXHR5ID0gX2V2ZW50LnRvdWNoZXNbMF0uY2xpZW50WTtcXG5cXHR9IGVsc2Uge1xcblxcdFxcdHggPSBfZXZlbnQuY2xpZW50WDtcXG5cXHRcXHR5ID0gX2V2ZW50LmNsaWVudFk7XFxuXFx0fVxcblxcblxcdHJldHVybiBfdHlwZXNEaW1lbnNpb25zLlBvaW50LmNyZWF0ZSgpLnNldCh4LCB5KTtcXG59XFxuXFxudmFyIGRyYWdnYWJsZU1hbmFnZXIgPSB7fTtcXG5cXG5ib290KCk7XFxuXFxuZXhwb3J0c1snZGVmYXVsdCddID0gZHJhZ2dhYmxlTWFuYWdlcjtcXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsvL0Agc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOXpiM1Z5WTJVdmNHeGhlUzVuWVcxbExtMWhibUZuWlhJdVpISmhaMmRoWW14bExtcHpQek13TmpjaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096dG5RMEZCYVVJc1JVRkJUVHM3T3pzeVEwRkRRU3hGUVVGclFqczdPenN5UTBGRGJrSXNRMEZCYTBJN08wRkJSWGhETEVsQlFVMHNiMEpCUVc5Q0xFZEJRVWNzTmtKQlFWY3NUVUZCVFN4RlFVRkZMRU5CUVVNN08wRkJSV3BFTEZOQlFWTXNTVUZCU1N4SFFVRkpPMEZCUTJoQ0xHRkJRVmtzUlVGQlJTeERRVUZETzBOQlEyWTdPMEZCUlVRc1UwRkJVeXhaUVVGWkxFZEJRVWs3UVVGRGVFSXNTMEZCU1N4TFFVRkxMRU5CUVVNN08wRkJSVllzUlVGQlF5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVTlVMRVZCUVVVc1EwRkJReXhYUVVGWExFVkJRVVVzVlVGQlZTeE5RVUZOTEVWQlFVVTdRVUZEYkVNc1RVRkJTU3hOUVVGTkxFVkJRVVVzVlVGQlZTeEZRVUZGTEZOQlFWTXNSVUZCUlN4TFFVRkxMRVZCUVVVc1NVRkJTU3hGUVVGRkxFdEJRVXNzUlVGQlJTeGpRVUZqTEVOQlFVTTdPMEZCUlhSRkxGRkJRVTBzUjBGQlJ5eHBRa0ZCYVVJc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dEJRVU51UXl4WlFVRlZMRWRCUVVjc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNRMEZCUXpzN1FVRkhlRVFzVFVGQlNTeFZRVUZWTEVOQlFVTXNUVUZCVFN4RlFVRkZPMEZCUTNSQ0xFOUJRVWtzUjBGQlJ5eFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRE8wRkJRM1pETEZGQlFVc3NSMEZCUnl4VlFVRlZMRU5CUVVNc1owSkJRV2RDTEVWQlFVVXNRMEZCUXp0QlFVTjBReXhaUVVGVExFZEJRVWNzVlVGQlZTeERRVUZETEZOQlFWTXNSVUZCUlN4RFFVRkRPenM3UVVGSGJrTXNVVUZCU3l4SFFVRkhMR3RDUVVGTExFdEJRVXNzUTBGQlF5eEZRVUZGTEVWQlFVVXNUVUZCVFN4RFFVRkRMR2RDUVVGblFpeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03TzBGQlJTOUVMRlZCUVU4c1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF6dEJRVU53UWl4VlFVRlBMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU03UVVGRGNrSXNWVUZCVHl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRE8wRkJRM0JDTEZWQlFVOHNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJRenRCUVVONFFpeFZRVUZQTEV0QlFVc3NRMEZCUXl4bFFVRmxMRU5CUVVNN1FVRkROMElzVlVGQlR5eExRVUZMTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU03UVVGRGFFTXNWVUZCVHl4TFFVRkxMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTTdRVUZEYUVNc1ZVRkJUeXhMUVVGTExFTkJRVU1zZDBKQlFYZENMRU5CUVVNN08wRkJSWFJETEZGQlFVc3NSMEZCUnp0QlFVTlFMRkZCUVVrc1JVRkJSU3hKUVVGSk8wRkJRMVlzWTBGQlZTeEZRVUZGTEZWQlFWVTdRVUZEZEVJc1UwRkJTeXhGUVVGRkxGVkJRVlVzUTBGQlF5eExRVUZMTEVWQlFVVTdRVUZEZWtJc1YwRkJUeXhGUVVGRkxFbEJRVWs3TzBGQlJXSXNVMEZCU3l4RlFVRkZPMEZCUTA0c1YwRkJUU3hGUVVGRkxFMUJRVTA3UVVGRFpDeFZRVUZMTEVWQlFVVXNTMEZCU3p0QlFVTmFMR05CUVZNc1JVRkJSU3hUUVVGVE8wdEJRM0JDT3p0QlFVVkVMRmxCUVZFc1JVRkJSVHRCUVVOVUxHRkJRVkVzUlVGQlJTeEpRVUZKTzBGQlEyUXNWVUZCU3l4RlFVRkZMRWxCUVVrN1FVRkRXQ3hqUVVGVExFVkJRVVVzU1VGQlNUdExRVU5tTzBsQlEwUXNRMEZCUXpzN1FVRkZSaXhYUVVGUkxFbEJRVWs3UVVGRFdDeFRRVUZMTEU5QlFVODdRVUZEV0N4VlFVRkxMRU5CUVVNc1QwRkJUeXhIUVVGSExGVkJRVlVzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXp0QlFVTnVReXhWUVVGTExFTkJRVU1zVDBGQlR5eERRVU5ZTEZWQlFWVXNRMEZCUXl4alFVRmpMRU5CUVVNN1RVRkRNVUlzVVVGQlVTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFTkJRelZDTEVkQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVNN1RVRkRWaXhSUVVGUkxFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVTjJRaXhuUWtGQlowSXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVNeFFpeFhRVUZOT3p0QlFVVlFMRk5CUVVzc1QwRkJUenRCUVVOWUxHVkJRVlVzUTBGQlF5eFJRVUZSTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN08wRkJSUzlDTEZWQlFVc3NRMEZCUXl4UFFVRlBMRWRCUVVjc1ZVRkJWU3hEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETzBGQlEyNURMRlZCUVVzc1EwRkJReXhQUVVGUExFTkJRMWdzVlVGQlZTeERRVUZETEdOQlFXTXNRMEZCUXp0TlFVTXhRaXhSUVVGUkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkROVUlzUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXp0TlFVTldMRkZCUVZFc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlEzWkNMR2RDUVVGblFpeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMEZCUXpGQ0xGZEJRVTA3TzBGQlJWQTdRVUZEUXl4VlFVRkxMRU5CUVVNc1QwRkJUeXhIUVVGSExGVkJRVlVzUTBGQlF6dEJRVU16UWl4WFFVRk5PMEZCUVVFc1NVRkRVRHM3UVVGRlJDeFJRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRmRCUVZjc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGRGNrTXNVVUZCVVN4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRE96dEJRVVY2UWl4cFFrRkJZeXhIUVVGSExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNXVUZCV1N4RlFVRkZPMEZCUTNSRExGTkJRVXNzUlVGQlJTeExRVUZMTzBGQlExb3NaVUZCVnl4RlFVRkZMRXRCUVVzc1EwRkJReXhMUVVGTE8wbEJRM2hDTEVOQlFVTXNRMEZCUXpzN1FVRkZTQ3hSUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJRenRIUVVOd1F6dEZRVU5FTEVOQlFVTXNRMEZGUkN4RlFVRkZMRU5CUVVNc1YwRkJWeXhGUVVGRkxGVkJRVlVzVFVGQlRTeEZRVUZGTzBGQlEyeERMRTFCUVVrc1RVRkJUU3hGUVVGRkxGVkJRVlVzUlVGQlJTeFJRVUZSTEVWQlFVVXNTMEZCU3l4RlFVRkZMRk5CUVZNc1JVRkJSU3hoUVVGaExFTkJRVU03TzBGQlJXeEZMRTFCUVVrc1MwRkJTeXhGUVVGRk8wRkJRMVlzVTBGQlRTeEhRVUZITEdsQ1FVRnBRaXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzBGQlEyNURMRmRCUVZFc1IwRkJSeXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03UVVGREwwTXNVVUZCU3l4SFFVRkhMSFZDUVVGTkxFMUJRVTBzUlVGQlJTeERRVUZETzBGQlEzWkNMRmxCUVZNc1IwRkJSeXhKUVVGSkxFTkJRVU03TzBGQlJXcENMRTlCUVVrc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eFRRVUZUTEV0QlFVc3NUVUZCVFN4RlFVRkZPMEZCUTNKRExHRkJRVk1zUjBGQlJ5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF6dEJRVU14UXl4aFFVRlRMRU5CUVVNc1UwRkJVeXhEUVVGRExGRkJRVkVzUTBGQlF5eExRVUZMTEVWQlFVVXNVVUZCVVN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8wRkJRM0pFTEZOQlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1UwRkJVeXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVONFF5eE5RVVZKTzBGQlEwb3NVMEZCU3l4SFFVRkhMRkZCUVZFc1EwRkJReXhGUVVGRkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdTVUZETjBJN08wRkJSVVFzVDBGQlNTeExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRkZCUVZFc1EwRkJReXhaUVVGWkxFTkJRVU1zUlVGQlJUdEJRVU42UXl4VFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVOWUxGZEJRVmNzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZEZWtJc1VVRkJVU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzBsQlEzWkNPenRCUVVWRUxHZENRVUZoTEVkQlFVY3NRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhYUVVGWExFVkJRVVU3UVVGRGNFTXNVMEZCU3l4RlFVRkZMRXRCUVVzN1FVRkRXaXhsUVVGWExFVkJRVVVzUzBGQlN5eERRVUZETEV0QlFVczdTVUZEZUVJc1EwRkJReXhEUVVGRE96dEJRVVZJTEZGQlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1VVRkJVU3hIUVVGSExGRkJRVkVzUTBGQlF6dEJRVU51UXl4UlFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFdEJRVXNzUjBGQlJ5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdRVUZEY0VRc1VVRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eFRRVUZUTEVkQlFVY3NVMEZCVXl4RFFVRkRPenRCUVVWeVF5eFJRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eEZRVUZGTEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhIUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRE0wVXNVVUZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTTdSMEZEYmtNN1JVRkRSQ3hEUVVGRExFTkJSVVFzUlVGQlJTeERRVUZETEd0Q1FVRnJRaXhGUVVGRkxGVkJRVlVzVFVGQlRTeEZRVUZGTzBGQlEzcERMRTFCUVVrc1ZVRkJWU3hGUVVGRkxGbEJRVmtzUTBGQlF6czdRVUZGTjBJc1RVRkJTU3hMUVVGTExFVkJRVVU3TzBGQlJWWXNUMEZCU1N4TlFVRk5MRU5CUVVNc1NVRkJTU3hMUVVGTExGVkJRVlVzU1VGQlNTeEZRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1VVRkJVU3hEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFVkJRVVU3UVVGREwwWXNWMEZCVHp0SlFVTlFPenRCUVVWRUxHRkJRVlVzUjBGQlJ5eExRVUZMTEVOQlFVTXNWVUZCVlN4RFFVRkRPenRCUVVVNVFpeFBRVUZKTEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1VVRkJVU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRVZCUVVVN1FVRkRMME1zVTBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4RlFVRkZMRU5CUVVNc1pVRkJaU3hGUVVGRkxGbEJRVms3UVVGRE4wTXNaVUZCVlN4RFFVRkRMRmRCUVZjc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dEJRVU5zUXl4TlFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTTdTMEZEYWtJc1EwRkJReXhEUVVGRE8wbEJRMGc3TzBGQlJVUXNVVUZCU3l4RFFVRkRMRTlCUVU4c1EwRkRXQ3hYUVVGWExFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1EwRkRiRU1zVVVGQlVTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRPenRCUVVWNlFpeGxRVUZaTEVkQlFVY3NRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhWUVVGVkxFVkJRVVU3UVVGRGJFTXNVMEZCU3l4RlFVRkZMRXRCUVVzN1FVRkRXaXhsUVVGWExFVkJRVVVzUzBGQlN5eERRVUZETEV0QlFVczdTVUZEZUVJc1EwRkJReXhEUVVGRE96dEJRVVZJTEZGQlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZET3p0QlFVVnNReXhSUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETzBkQlEySTdSVUZEUkN4RFFVRkRMRU5CUVVNN1EwRkRTanM3UVVGRlJDeFRRVUZUTEdsQ1FVRnBRaXhEUVVGRkxFMUJRVTBzUlVGQlJUdEJRVU51UXl4TFFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03TzBGQlJWUXNTMEZCU1N4TlFVRk5MRU5CUVVNc1QwRkJUeXhGUVVGRk8wRkJRMjVDTEVkQlFVTXNSMEZCUnl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXp0QlFVTTVRaXhIUVVGRExFZEJRVWNzVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU03UlVGRE9VSXNUVUZGU1R0QlFVTktMRWRCUVVNc1IwRkJSeXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETzBGQlEyNUNMRWRCUVVNc1IwRkJSeXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETzBWQlEyNUNPenRCUVVWRUxGRkJRVThzZFVKQlFVMHNUVUZCVFN4RlFVRkZMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0RFFVTm9RenM3UVVGRlJDeEpRVUZKTEdkQ1FVRm5RaXhIUVVGSExFVkJSWFJDTEVOQlFVTTdPMEZCUlVZc1NVRkJTU3hGUVVGRkxFTkJRVU03TzNGQ1FVVlJMR2RDUVVGblFpSXNJbVpwYkdVaU9pSXlNQzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCMWRHbHNJR1p5YjIwZ0ozVjBhV3duTzF4dWFXMXdiM0owSUVOdmJHeGxZM1JwYjI0Z1puSnZiU0FuZEhsd1pYTXZRMjlzYkdWamRHbHZiaWM3WEc1cGJYQnZjblFnZXlCUWIybHVkQ0I5SUdaeWIyMGdKM1I1Y0dWekwwUnBiV1Z1YzJsdmJuTW5PMXh1WEc1amIyNXpkQ0JEVDB4TVJVTlVTVTlPWDBSU1FVZEJRa3hGVXlBOUlFTnZiR3hsWTNScGIyNHVZM0psWVhSbEtDazdYRzVjYm1aMWJtTjBhVzl1SUdKdmIzUWdLQ2tnZTF4dVhIUmhkSFJoWTJoRmRtVnVkSE1vS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWVhSMFlXTm9SWFpsYm5SeklDZ3BJSHRjYmx4MGRtRnlJSE4wWVhSbE8xeHVYRzVjZENRb1pHOWpkVzFsYm5RcFhHNWNkRngwTG05dUtDZHRiM1Z6WldSdmQyNG5MQ0JtZFc1amRHbHZiaUFvWDJWMlpXNTBLU0I3WEc1Y2RGeDBYSFIyWVhJZ1kzVnljMjl5TENBa1pISmhaMmRoWW14bExDQjBjbUZ1YzJadmNtMHNJSEJ2YVc1MExDQnRiMlJsTENCemRIbHNaU3dnWkhKaFoxTjBZWEowUlhabGJuUTdYRzVjYmx4MFhIUmNkR04xY25OdmNpQTlJSEpsYzI5c2RtVkZkbVZ1ZEZCdmFXNTBLRjlsZG1WdWRDazdYRzVjZEZ4MFhIUWtaSEpoWjJkaFlteGxJRDBnSkNoZlpYWmxiblF1ZEdGeVoyVjBLUzVqYkc5elpYTjBLQ2RiY0d3dFpISmhaMmRoWW14bFhTY3BPMXh1WEc1Y2JseDBYSFJjZEdsbUlDZ2taSEpoWjJkaFlteGxMbXhsYm1kMGFDa2dlMXh1WEhSY2RGeDBYSFJ0YjJSbElEMGdKR1J5WVdkbllXSnNaUzVoZEhSeUtDZHdiQzFrY21GbloyRmliR1VuS1R0Y2JseDBYSFJjZEZ4MGNHOXBiblFnUFNBa1pISmhaMmRoWW14bExtRmljMjlzZFhSbFVHOXphWFJwYjI0b0tUdGNibHgwWEhSY2RGeDBkSEpoYm5ObWIzSnRJRDBnSkdSeVlXZG5ZV0pzWlM1MGNtRnVjMlp2Y20wb0tUdGNibHgwWEhSY2RGeDBMeThnVkU5RVR6b2dVMlYwSUhSb1pYTmxJSE4wZVd4bGN5QnBiaUJoSUhOMGVXeGxJRzV2WkdVdVhHNWNkRngwWEhSY2RDOHZJRlJvWVhRZ2QyRjVJRWtnWkc5dWRDQm9ZWFpsSUhSdklHOTJaWEp5YVdSbElIUm9aVzBnYVcxd2IzSjBZVzUwSURvdlhHNWNkRngwWEhSY2RITjBlV3hsSUQwZ2RYUnBiQzV0YVhocGJpaDdmU3dnZDJsdVpHOTNMbWRsZEVOdmJYQjFkR1ZrVTNSNWJHVW9KR1J5WVdkbllXSnNaVnN3WFNrcE8xeHVYRzVjZEZ4MFhIUmNkR1JsYkdWMFpTQnpkSGxzWlM1NlNXNWtaWGc3WEc1Y2RGeDBYSFJjZEdSbGJHVjBaU0J6ZEhsc1pTNXZjR0ZqYVhSNU8xeHVYSFJjZEZ4MFhIUmtaV3hsZEdVZ2MzUjViR1V1WTNWeWMyOXlPMXh1WEhSY2RGeDBYSFJrWld4bGRHVWdjM1I1YkdVdWRISmhibk5wZEdsdmJqdGNibHgwWEhSY2RGeDBaR1ZzWlhSbElITjBlV3hsTG5SeVlXNXphWFJwYjI1RVpXeGhlVHRjYmx4MFhIUmNkRngwWkdWc1pYUmxJSE4wZVd4bExuUnlZVzV6YVhScGIyNUVkWEpoZEdsdmJqdGNibHgwWEhSY2RGeDBaR1ZzWlhSbElITjBlV3hsTG5SeVlXNXphWFJwYjI1UWNtOXdaWEowZVR0Y2JseDBYSFJjZEZ4MFpHVnNaWFJsSUhOMGVXeGxMblJ5WVc1emFYUnBiMjVVYVcxcGJtZEdkVzVqZEdsdmJqdGNibHh1WEhSY2RGeDBYSFJ6ZEdGMFpTQTlJSHRjYmx4MFhIUmNkRngwWEhSdGIyUmxPaUJ0YjJSbExGeHVYSFJjZEZ4MFhIUmNkQ1JrY21GbloyRmliR1U2SUNSa2NtRm5aMkZpYkdVc1hHNWNkRngwWEhSY2RGeDBjMk52Y0dVNklDUmtjbUZuWjJGaWJHVXVjMk52Y0dVb0tTeGNibHgwWEhSY2RGeDBYSFFrYUdWc2NHVnlPaUJ1ZFd4c0xGeHVYRzVjZEZ4MFhIUmNkRngwYzNSaGNuUTZJSHRjYmx4MFhIUmNkRngwWEhSY2RHTjFjbk52Y2pvZ1kzVnljMjl5TEZ4dVhIUmNkRngwWEhSY2RGeDBjRzlwYm5RNklIQnZhVzUwTEZ4dVhIUmNkRngwWEhSY2RGeDBkSEpoYm5ObWIzSnRPaUIwY21GdWMyWnZjbTFjYmx4MFhIUmNkRngwWEhSOUxGeHVYRzVjZEZ4MFhIUmNkRngwY0hKdlozSmxjM002SUh0Y2JseDBYSFJjZEZ4MFhIUmNkR1JwYzNSaGJtTmxPaUJ1ZFd4c0xGeHVYSFJjZEZ4MFhIUmNkRngwY0c5cGJuUTZJRzUxYkd3c1hHNWNkRngwWEhSY2RGeDBYSFIwY21GdWMyWnZjbTA2SUc1MWJHeGNibHgwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEgwN1hHNWNibHgwWEhSY2RGeDBjM2RwZEdOb0lDaHRiMlJsS1NCN1hHNWNkRngwWEhSY2RGeDBZMkZ6WlNBblkyeHZibVVuT2x4dVhIUmNkRngwWEhSY2RGeDBjM1JoZEdVdUpHaGxiSEJsY2lBOUlDUmtjbUZuWjJGaWJHVXVZMnh2Ym1Vb0tUdGNibHgwWEhSY2RGeDBYSFJjZEhOMFlYUmxMaVJvWld4d1pYSmNibHgwWEhSY2RGeDBYSFJjZEZ4MExuSmxiVzkyWlVGMGRISW9KM0JzTFdSeVlXZG5ZV0pzWlNjcElDOHZJR2hsYkhCbGNuTWdZWEpsSUc1dmRDQjBieUJpWlNCallYQjBkWEpsWkNCaGN5QmtjbUZuWjJGaWJHVmNibHgwWEhSY2RGeDBYSFJjZEZ4MExtRmtaRU5zWVhOektDZGtjbUZuWjJGaWJHVXRhR1ZzY0dWeUp5bGNibHgwWEhSY2RGeDBYSFJjZEZ4MExtTnpjeWh6ZEhsc1pTa2dMeThnY0hKbGMyVnlkbVZ6SUhSb1pTQnpkSGxzWlNCdlppQjBhR1VnWkhKaFoyZGhZbXhsTGx4dVhIUmNkRngwWEhSY2RGeDBYSFF1WVhCd1pXNWtWRzhvWkc5amRXMWxiblF1WW05a2VTbGNibHgwWEhSY2RGeDBYSFJjZEZ4MExtRmljMjlzZFhSbFVHOXphWFJwYjI0b2NHOXBiblFwTzF4dVhIUmNkRngwWEhSY2RGeDBZbkpsWVdzN1hHNWNibHgwWEhSY2RGeDBYSFJqWVhObElDZHdiSFZqYXljNlhHNWNkRngwWEhSY2RGeDBYSFFrWkhKaFoyZGhZbXhsTG1Ga1pFTnNZWE56S0NkUVRGVkRTMFZFSnlrN1hHNWNibHgwWEhSY2RGeDBYSFJjZEhOMFlYUmxMaVJvWld4d1pYSWdQU0FrWkhKaFoyZGhZbXhsTG1Oc2IyNWxLQ2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUnpkR0YwWlM0a2FHVnNjR1Z5WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkQzV5WlcxdmRtVkJkSFJ5S0Nkd2JDMWtjbUZuWjJGaWJHVW5LU0F2THlCb1pXeHdaWEp6SUdGeVpTQnViM1FnZEc4Z1ltVWdZMkZ3ZEhWeVpXUWdZWE1nWkhKaFoyZGhZbXhsWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkQzVoWkdSRGJHRnpjeWduWkhKaFoyZGhZbXhsTFdobGJIQmxjaWNwWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkQzVqYzNNb2MzUjViR1VwSUM4dklIQnlaWE5sY25abGN5QjBhR1VnYzNSNWJHVWdiMllnZEdobElHUnlZV2RuWVdKc1pTNWNibHgwWEhSY2RGeDBYSFJjZEZ4MExtRndjR1Z1WkZSdktHUnZZM1Z0Wlc1MExtSnZaSGtwWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkQzVoWW5OdmJIVjBaVkJ2YzJsMGFXOXVLSEJ2YVc1MEtUdGNibHgwWEhSY2RGeDBYSFJjZEdKeVpXRnJPMXh1WEc1Y2RGeDBYSFJjZEZ4MFpHVm1ZWFZzZERwY2JseDBYSFJjZEZ4MFhIUmNkSE4wWVhSbExpUm9aV3h3WlhJZ1BTQWtaSEpoWjJkaFlteGxPMXh1WEhSY2RGeDBYSFJjZEZ4MFluSmxZV3M3WEc1Y2RGeDBYSFJjZEgxY2JseHVYSFJjZEZ4MFhIUnpkR0YwWlM0a2FHVnNjR1Z5TG5KbGJXOTJaVU5zWVhOektDZEVVa0ZITFVWT1JFVkVKeWxjYmx4MFhIUmNkRngwWEhRdVlXUmtRMnhoYzNNb0owUlNRVWN0VTFSQlVsUW5LVHRjYmx4dVhIUmNkRngwWEhSa2NtRm5VM1JoY25SRmRtVnVkQ0E5SUNRdVJYWmxiblFvSjJSeVlXY3RjM1JoY25RbkxDQjdYRzVjZEZ4MFhIUmNkRngwYzNSaGRHVTZJSE4wWVhSbExGeHVYSFJjZEZ4MFhIUmNkSFJoY21kbGRGTmpiM0JsT2lCemRHRjBaUzV6WTI5d1pWeHVYSFJjZEZ4MFhIUjlLVHRjYmx4dVhIUmNkRngwWEhSemRHRjBaUzV6WTI5d1pTNTBjbWxuWjJWeUtHUnlZV2RUZEdGeWRFVjJaVzUwS1R0Y2JseDBYSFJjZEgxY2JseDBYSFI5S1Z4dVhHNWNkRngwTG05dUtDZHRiM1Z6WlcxdmRtVW5MQ0JtZFc1amRHbHZiaUFvWDJWMlpXNTBLU0I3WEc1Y2RGeDBYSFIyWVhJZ1kzVnljMjl5TENBa1pISmhaMmRoWW14bExDQmthWE4wWVc1alpTd2djRzlwYm5Rc0lIUnlZVzV6Wm05eWJTd2daSEpoWjAxdmRtVkZkbVZ1ZER0Y2JseHVYSFJjZEZ4MGFXWWdLSE4wWVhSbEtTQjdYRzVjZEZ4MFhIUmNkR04xY25OdmNpQTlJSEpsYzI5c2RtVkZkbVZ1ZEZCdmFXNTBLRjlsZG1WdWRDazdYRzVjZEZ4MFhIUmNkR1JwYzNSaGJtTmxJRDBnYzNSaGRHVXVjM1JoY25RdVkzVnljMjl5TG1ScGMzUmhibU5sS0dOMWNuTnZjaWs3WEc1Y2RGeDBYSFJjZEhCdmFXNTBJRDBnVUc5cGJuUXVZM0psWVhSbEtDazdYRzVjZEZ4MFhIUmNkSFJ5WVc1elptOXliU0E5SUc1MWJHdzdYRzVjYmx4MFhIUmNkRngwYVdZZ0tITjBZWFJsTG5OMFlYSjBMblJ5WVc1elptOXliU0FoUFQwZ0oyNXZibVVuS1NCN1hHNWNkRngwWEhSY2RGeDBkSEpoYm5ObWIzSnRJRDBnYzNSaGRHVXVjM1JoY25RdWRISmhibk5tYjNKdExtTnNiMjVsS0NrN1hHNWNkRngwWEhSY2RGeDBkSEpoYm5ObWIzSnRMblJ5WVc1emJHRjBaU2hrYVhOMFlXNWpaUzUzYVdSMGFDd2daR2x6ZEdGdVkyVXVhR1ZwWjJoMEtUdGNibHgwWEhSY2RGeDBYSFJ3YjJsdWRDNXpaWFFvZEhKaGJuTm1iM0p0TG1Gd2NHeDVWRzlRYjJsdWRDZ3dMQ0F3S1NrN1hHNWNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFJsYkhObElIdGNibHgwWEhSY2RGeDBYSFJ3YjJsdWRDQTlJR1JwYzNSaGJtTmxMblJ2S0Nkd2IybHVkQ2NwTzF4dVhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBhV1lnS0hOMFlYUmxMaVJvWld4d1pYSXVhR0Z6UTJ4aGMzTW9KMFJTUVVjdFUxUkJVbFFuS1NrZ2UxeHVYSFJjZEZ4MFhIUmNkSE4wWVhSbExpUm9aV3h3WlhKY2JseDBYSFJjZEZ4MFhIUmNkQzV5WlcxdmRtVkRiR0Z6Y3lnblJGSkJSeTFUVkVGU1ZDY3BYRzVjZEZ4MFhIUmNkRngwWEhRdVlXUmtRMnhoYzNNb0owUlNRVWRIU1U1SEp5azdYRzVjZEZ4MFhIUmNkSDFjYmx4dVhIUmNkRngwWEhSa2NtRm5UVzkyWlVWMlpXNTBJRDBnSkM1RmRtVnVkQ2duWkhKaFp5MXRiM1psSnl3Z2UxeHVYSFJjZEZ4MFhIUmNkSE4wWVhSbE9pQnpkR0YwWlN4Y2JseDBYSFJjZEZ4MFhIUjBZWEpuWlhSVFkyOXdaVG9nYzNSaGRHVXVjMk52Y0dWY2JseDBYSFJjZEZ4MGZTazdYRzVjYmx4MFhIUmNkRngwYzNSaGRHVXVjSEp2WjNKbGMzTXVaR2x6ZEdGdVkyVWdQU0JrYVhOMFlXNWpaVHRjYmx4MFhIUmNkRngwYzNSaGRHVXVjSEp2WjNKbGMzTXVjRzlwYm5RZ1BTQnpkR0YwWlM1emRHRnlkQzV3YjJsdWRDNXBibU1vY0c5cGJuUXBPMXh1WEhSY2RGeDBYSFJ6ZEdGMFpTNXdjbTluY21WemN5NTBjbUZ1YzJadmNtMGdQU0IwY21GdWMyWnZjbTA3WEc1Y2JseDBYSFJjZEZ4MGMzUmhkR1V1YzJOdmNHVXVkSEpoYm5Oc1lYUmxLSE4wWVhSbExpUm9aV3h3WlhJc0lIQnZhVzUwTG5OallXeGxLREV2YzNSaGRHVXVjMk52Y0dVdVoyRnRaUzU2YjI5dEtTazdYRzVjZEZ4MFhIUmNkSE4wWVhSbExuTmpiM0JsTG5SeWFXZG5aWElvWkhKaFowMXZkbVZGZG1WdWRDazdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZTbGNibHh1WEhSY2RDNXZiaWduYlc5MWMyVjFjQ0J0YjNWelpXOTFkQ2NzSUdaMWJtTjBhVzl1SUNoZlpYWmxiblFwSUh0Y2JseDBYSFJjZEhaaGNpQWtaSEpoWjJkaFlteGxMQ0JrY21GblJXNWtSWFpsYm5RN1hHNWNibHgwWEhSY2RHbG1JQ2h6ZEdGMFpTa2dlMXh1WEhSY2RGeDBYSFF2THlCRWJ5QnViM1FnWlc1a0lHUnlZV2RuYVc1bklHbG1JSGRsSUdSdmJuUWdiVzkxYzJVZ2IzVjBJRzltSUhSb1pTQmtiMk4xYldWdWRDNWNibHgwWEhSY2RGeDBhV1lnS0Y5bGRtVnVkQzUwZVhCbElEMDlQU0FuYlc5MWMyVnZkWFFuSUNZbUlDRitXMjUxYkd3c0lHUnZZM1Z0Wlc1MExtUnZZM1Z0Wlc1MFJXeGxiV1Z1ZEYwdWFXNWtaWGhQWmloZlpYWmxiblF1ZEc5RmJHVnRaVzUwS1NrZ2UxeHVYSFJjZEZ4MFhIUmNkSEpsZEhWeWJqdGNibHgwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZENSa2NtRm5aMkZpYkdVZ1BTQnpkR0YwWlM0a1pISmhaMmRoWW14bE8xeHVYRzVjZEZ4MFhIUmNkR2xtSUNoemRHRjBaUzRrYUdWc2NHVnlMbWhoYzBOc1lYTnpLQ2RrY21GbloyRmliR1V0YUdWc2NHVnlKeWtwSUh0Y2JseDBYSFJjZEZ4MFhIUnpkR0YwWlM0a2FHVnNjR1Z5TG05dUtDZDBjbUZ1YzJsMGFXOXVaVzVrSnl3Z1puVnVZM1JwYjI0Z0tDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MEpHUnlZV2RuWVdKc1pTNXlaVzF2ZG1WRGJHRnpjeWduVUV4VlEwdEZSQ2NwTzF4dVhIUmNkRngwWEhSY2RGeDBKQ2gwYUdsektTNXlaVzF2ZG1Vb0tUdGNibHgwWEhSY2RGeDBYSFI5S1R0Y2JseDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkSE4wWVhSbExpUm9aV3h3WlhKY2JseDBYSFJjZEZ4MFhIUXVjbVZ0YjNabFEyeGhjM01vSjBSU1FVY3RVMVJCVWxRZ1JGSkJSMGRKVGtjbktWeHVYSFJjZEZ4MFhIUmNkQzVoWkdSRGJHRnpjeWduUkZKQlJ5MUZUa1JGUkNjcE8xeHVYRzVjZEZ4MFhIUmNkR1J5WVdkRmJtUkZkbVZ1ZENBOUlDUXVSWFpsYm5Rb0oyUnlZV2N0Wlc1a0p5d2dlMXh1WEhSY2RGeDBYSFJjZEhOMFlYUmxPaUJ6ZEdGMFpTeGNibHgwWEhSY2RGeDBYSFIwWVhKblpYUlRZMjl3WlRvZ2MzUmhkR1V1YzJOdmNHVmNibHgwWEhSY2RGeDBmU2s3WEc1Y2JseDBYSFJjZEZ4MGMzUmhkR1V1YzJOdmNHVXVkSEpwWjJkbGNpaGtjbUZuUlc1a1JYWmxiblFwTzF4dVhHNWNkRngwWEhSY2RITjBZWFJsSUQwZ2JuVnNiRHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlLVHRjYm4xY2JseHVablZ1WTNScGIyNGdjbVZ6YjJ4MlpVVjJaVzUwVUc5cGJuUWdLRjlsZG1WdWRDa2dlMXh1WEhSMllYSWdlQ3dnZVR0Y2JseHVYSFJwWmlBb1gyVjJaVzUwTG5SdmRXTm9aWE1wSUh0Y2JseDBYSFI0SUQwZ1gyVjJaVzUwTG5SdmRXTm9aWE5iTUYwdVkyeHBaVzUwV0R0Y2JseDBYSFI1SUQwZ1gyVjJaVzUwTG5SdmRXTm9aWE5iTUYwdVkyeHBaVzUwV1R0Y2JseDBmVnh1WEc1Y2RHVnNjMlVnZTF4dVhIUmNkSGdnUFNCZlpYWmxiblF1WTJ4cFpXNTBXRHRjYmx4MFhIUjVJRDBnWDJWMlpXNTBMbU5zYVdWdWRGazdYRzVjZEgxY2JseHVYSFJ5WlhSMWNtNGdVRzlwYm5RdVkzSmxZWFJsS0NrdWMyVjBLSGdzSUhrcE8xeHVmVnh1WEc1MllYSWdaSEpoWjJkaFlteGxUV0Z1WVdkbGNpQTlJSHRjYmx4dWZUdGNibHh1WW05dmRDZ3BPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JrY21GbloyRmliR1ZOWVc1aFoyVnlPMXh1WEc1Y2JseHVMeW9xSUZkRlFsQkJRMHNnUms5UFZFVlNJQ29xWEc0Z0tpb2dMaTl6YjNWeVkyVXZjR3hoZVM1bllXMWxMbTFoYm1GblpYSXVaSEpoWjJkaFlteGxMbXB6WEc0Z0tpb3ZJbDBzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XCIpO1xuXG4vKioqLyB9LFxuLyogMjEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdGV2YWwoXCJ2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oMilbJ2RlZmF1bHQnXTtcXG5cXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xcbi8qKlxcbiAqIENvbGxlY3Rpb25zIGFyZSBpdGVyYWJsZXMgd2hpY2ggaG9sZCBhIGNvbnNpc3RlbnQgaW50ZXJmYWNlIHRocm91Z2hvdXQgaXRzIGluZGV4ZXMuXFxuICpcXG4gKiBAbW9kdWxlXFxuICogQHJlcXVpcmVzIG1vZHVsZTp0eXBlcy9CYXNpY0FycmF5XFxuICovXFxuXFxudmFyIF90eXBlc0Jhc2ljQXJyYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xcblxcbnZhciBfdHlwZXNCYXNpY0FycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVzQmFzaWNBcnJheSk7XFxuXFxuLyoqXFxuICogPHNwYW4gY2xhc3M9XFxcImltcG9ydGFudFxcXCI+Tk9URTo8L3NwYW4+IFRoaXMgaXMgTk9UIGEgY29uc3RydWN0b3IuIHVzZSBgQ29sbGVjdGlvbi5jcmVhdGUoKWAgdG8gZ2V0IGEgbmV3IGluc3RhbmNlLlxcbiAqIEBjbGFzc2Rlc2MgSXRlcmFibGUgaG9sZGluZyByZWNvcmQgb2JqZWN0cyBvZiB0aGUgc2FtZSBpbnRlcmZhY2UuXFxuICogQGNsYXNzXFxuICogQGV4dGVuZHMgbW9kdWxlOnR5cGVzL0Jhc2ljQXJyYXl+QmFzaWNBcnJheVxcbiAqL1xcbnZhciBDb2xsZWN0aW9uID0gX3R5cGVzQmFzaWNBcnJheTJbJ2RlZmF1bHQnXS5leHRlbmQoZnVuY3Rpb24gKCkge1xcblxcdC8qKlxcbiAgKiBHZXRzIHRoZSByZWNvcmQgb2JqZWN0IHdoaWNoIGhhcyBgX21lbWJlcmAgYXMgYSBtZW1iZXIuXFxuICAqIEBpbnN0YW5jZVxcbiAgKiBAcHJvdGVjdGVkXFxuICAqIEBtZW1iZXJvZiBtb2R1bGU6dHlwZXMvQ29sbGVjdGlvbn5Db2xsZWN0aW9uXFxuICAqIEBhcmcgeyp9IF9tZW1iZXIgLSBvYmplY3QgcmVmZXJlbmNlIHRvIHNlYXJjaCBmb3IuXFxuICAqIEBhcmcge3N0cmluZ30gX2tleSAtIHRoZSB0YXJnZXQga2V5IHRvIHRlc3QgdGhlIGBfbWVtYmVyYCBhZ2FpbnN0LlxcbiAgKiBAYXJnIHtib29sZWFufSBfc2hvdWxkQ29sbGVjdCAtIDxzcGFuIHN0eWxlPVxcXCJjb2xvcjogYmx1ZTsgZm9udC13ZWlnaHQ6IGJvbGQ7XFxcIj5gdHJ1ZWA8L3NwYW4+OiBjb2xsZWN0IGFsbCBtYXRjaGluZyBlbGVtZW50cy48YnI+XFxuICAqIDxzcGFuIHN0eWxlPVxcXCJjb2xvcjogYmx1ZTsgZm9udC13ZWlnaHQ6IGJvbGQ7XFxcIj5gZmFsc2VgPC9zcGFuPjogcmV0dXJuIGZpcnN0IHJlc3VsdC5cXG4gICovXFxuXFx0ZnVuY3Rpb24gZ2V0UmVjb3JkKF9tZW1iZXIsIF9rZXksIF9zaG91bGRDb2xsZWN0KSB7XFxuXFx0XFx0dmFyIGksIHJlY29yZCwgbWVtYmVyLCByZXN1bHQ7XFxuXFxuXFx0XFx0cmVzdWx0ID0gW107XFxuXFxuXFx0XFx0Zm9yIChpID0gMDsgcmVjb3JkID0gdGhpc1tpXTsgaSArPSAxKSB7XFxuXFx0XFx0XFx0aWYgKF9rZXkgIT09IHVuZGVmaW5lZCkge1xcblxcdFxcdFxcdFxcdGlmIChyZWNvcmRbX2tleV0gPT09IF9tZW1iZXIpIHtcXG5cXHRcXHRcXHRcXHRcXHRpZiAoX3Nob3VsZENvbGxlY3QpIHtcXG5cXHRcXHRcXHRcXHRcXHRcXHRyZXN1bHQucHVzaChyZWNvcmQpO1xcblxcdFxcdFxcdFxcdFxcdH0gZWxzZSB7XFxuXFx0XFx0XFx0XFx0XFx0XFx0cmV0dXJuIHJlY29yZDtcXG5cXHRcXHRcXHRcXHRcXHR9XFxuXFx0XFx0XFx0XFx0fVxcblxcdFxcdFxcdH0gZWxzZSBpZiAocmVjb3JkIGluc3RhbmNlb2YgQXJyYXkpIHtcXG5cXHRcXHRcXHRcXHRpZiAofnJlY29yZC5pbmRleE9mKF9tZW1iZXIpKSB7XFxuXFx0XFx0XFx0XFx0XFx0aWYgKF9zaG91bGRDb2xsZWN0KSB7XFxuXFx0XFx0XFx0XFx0XFx0XFx0cmVzdWx0LnB1c2gocmVjb3JkKTtcXG5cXHRcXHRcXHRcXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdFxcdFxcdFxcdHJldHVybiByZWNvcmQ7XFxuXFx0XFx0XFx0XFx0XFx0fVxcblxcdFxcdFxcdFxcdH1cXG5cXHRcXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdFxcdGZvciAobWVtYmVyIGluIHJlY29yZCkge1xcblxcdFxcdFxcdFxcdFxcdGlmICghcmVjb3JkLmhhc093blByb3BlcnR5KG1lbWJlcikpIGNvbnRpbnVlO1xcblxcdFxcdFxcdFxcdFxcdGlmIChyZWNvcmRbbWVtYmVyXSA9PT0gX21lbWJlcikge1xcblxcdFxcdFxcdFxcdFxcdFxcdGlmIChfc2hvdWxkQ29sbGVjdCkge1xcblxcdFxcdFxcdFxcdFxcdFxcdFxcdHJlc3VsdC5wdXNoKHJlY29yZCk7XFxuXFx0XFx0XFx0XFx0XFx0XFx0fSBlbHNlIHtcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRyZXR1cm4gcmVjb3JkO1xcblxcdFxcdFxcdFxcdFxcdFxcdH1cXG5cXHRcXHRcXHRcXHRcXHR9XFxuXFx0XFx0XFx0XFx0fVxcblxcdFxcdFxcdH1cXG5cXHRcXHR9XFxuXFxuXFx0XFx0cmV0dXJuIHJlc3VsdC5sZW5ndGggPyByZXN1bHQgOiBudWxsO1xcblxcdH1cXG5cXG5cXHQvKipcXG4gICogT2JqZWN0cyB3aXRoIHRoaXMgYXMgYW4gb3duIHByb3BlcnR5IHdpbGwgYmUgaWRlbnRpZmllZCBhcyB0aGUgcm9vdCBvYmplY3QuXFxuICAqIEBtZW1iZXJvZiBtb2R1bGU6dHlwZXMvQ29sbGVjdGlvbn5Db2xsZWN0aW9uXFxuICAqIEByZWFkb25seVxcbiAgKiBAZGVmYXVsdFxcbiAgKi9cXG5cXHR0aGlzLmJhc2VUeXBlID0gJ1RZUEVfQ09MTEVDVElPTic7XFxuXFxuXFx0dGhpcy5hZGQgPSBmdW5jdGlvbiAoX3JlY29yZCkge1xcblxcdFxcdGlmICh+dGhpcy5pbmRleE9mKF9yZWNvcmQpKSByZXR1cm4gZmFsc2U7XFxuXFx0XFx0dGhpcy5wdXNoKF9yZWNvcmQpO1xcblxcblxcdFxcdHJldHVybiB0aGlzO1xcblxcdH07XFxuXFxuXFx0dGhpcy5yZW1vdmUgPSBmdW5jdGlvbiAoX3JlY29yZCkge1xcblxcdFxcdHZhciBpbmRleDtcXG5cXG5cXHRcXHRpbmRleCA9IHRoaXMuaW5kZXhPZihfcmVjb3JkKTtcXG5cXHRcXHRpZiAofmluZGV4KSB0aGlzLnNwbGljZShpbmRleCwgMSk7XFxuXFxuXFx0XFx0cmV0dXJuIHRoaXM7XFxuXFx0fTtcXG5cXG5cXHR0aGlzLmhhcyA9IGZ1bmN0aW9uIChfcmVjb3JkKSB7XFxuXFx0XFx0cmV0dXJuICEhIH50aGlzLmluZGV4T2YoX3JlY29yZCk7XFxuXFx0fTtcXG5cXG5cXHR0aGlzLmdldCA9IGZ1bmN0aW9uIChfbWVtYmVyLCBfa2V5KSB7XFxuXFx0XFx0cmV0dXJuIGdldFJlY29yZC5jYWxsKHRoaXMsIF9tZW1iZXIsIF9rZXkpO1xcblxcdH07XFxuXFxuXFx0dGhpcy5maWx0ZXIgPSBmdW5jdGlvbiAoX21lbWJlciwgX2tleSkge1xcblxcdFxcdHJldHVybiBnZXRSZWNvcmQuY2FsbCh0aGlzLCBfbWVtYmVyLCBfa2V5LCB0cnVlKTtcXG5cXHR9O1xcbn0pO1xcblxcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IENvbGxlY3Rpb247XFxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Ly9AIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTl6YjNWeVkyVXZkSGx3WlhNdlEyOXNiR1ZqZEdsdmJpNXFjejlsTjJSaklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3T3pzN01rTkJUWFZDTEVOQlFXdENPenM3T3pzN096czdPMEZCVVhwRExFbEJRVWtzVlVGQlZTeEhRVUZITERaQ1FVRlhMRTFCUVUwc1EwRkJReXhaUVVGWk96czdPenM3T3pzN096dEJRVmM1UXl4VlFVRlRMRk5CUVZNc1EwRkJSU3hQUVVGUExFVkJRVVVzU1VGQlNTeEZRVUZGTEdOQlFXTXNSVUZCUlR0QlFVTnNSQ3hOUVVGSkxFTkJRVU1zUlVGQlJTeE5RVUZOTEVWQlFVVXNUVUZCVFN4RlFVRkZMRTFCUVUwc1EwRkJRenM3UVVGRk9VSXNVVUZCVFN4SFFVRkhMRVZCUVVVc1EwRkJRenM3UVVGRldpeFBRVUZMTEVOQlFVTXNSMEZCUXl4RFFVRkRMRVZCUVVVc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRWxCUVVVc1EwRkJReXhGUVVGRk8wRkJRMnBETEU5QlFVa3NTVUZCU1N4TFFVRkxMRk5CUVZNc1JVRkJSVHRCUVVOMlFpeFJRVUZKTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhQUVVGUExFVkJRVVU3UVVGRE4wSXNVMEZCU1N4alFVRmpMRVZCUVVVN1FVRkRia0lzV1VGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenROUVVOd1FpeE5RVVZKTzBGQlEwb3NZVUZCVHl4TlFVRk5MRU5CUVVNN1RVRkRaRHRMUVVORU8wbEJRMFFzVFVGRlNTeEpRVUZKTEUxQlFVMHNXVUZCV1N4TFFVRkxMRVZCUVVVN1FVRkRha01zVVVGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRVVU3UVVGRE4wSXNVMEZCU1N4alFVRmpMRVZCUVVVN1FVRkRia0lzV1VGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenROUVVOd1FpeE5RVVZKTzBGQlEwb3NZVUZCVHl4TlFVRk5MRU5CUVVNN1RVRkRaRHRMUVVORU8wbEJRMFFzVFVGRlNUdEJRVU5LTEZOQlFVc3NUVUZCVFN4SlFVRkpMRTFCUVUwc1JVRkJSVHRCUVVOMFFpeFRRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMR05CUVdNc1EwRkJReXhOUVVGTkxFTkJRVU1zUlVGQlJTeFRRVUZUTzBGQlF6ZERMRk5CUVVrc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEU5QlFVOHNSVUZCUlR0QlFVTXZRaXhWUVVGSkxHTkJRV01zUlVGQlJUdEJRVU51UWl4aFFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzA5QlEzQkNMRTFCUlVrN1FVRkRTaXhqUVVGUExFMUJRVTBzUTBGQlF6dFBRVU5rTzAxQlEwUTdTMEZEUkR0SlFVTkVPMGRCUTBRN08wRkJSVVFzVTBGQlR5eE5RVUZOTEVOQlFVTXNUVUZCVFN4SFFVRkhMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU03UlVGRGNrTTdPenM3T3pzN08wRkJVVVFzUzBGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4cFFrRkJhVUlzUTBGQlF6czdRVUZGYkVNc1MwRkJTU3hEUVVGRExFZEJRVWNzUjBGQlJ5eFZRVUZWTEU5QlFVOHNSVUZCUlR0QlFVTTNRaXhOUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1JVRkJSU3hQUVVGUExFdEJRVXNzUTBGQlF6dEJRVU42UXl4TlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZET3p0QlFVVnVRaXhUUVVGUExFbEJRVWtzUTBGQlF6dEZRVU5hTEVOQlFVTTdPMEZCUlVZc1MwRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eFZRVUZWTEU5QlFVOHNSVUZCUlR0QlFVTm9ReXhOUVVGSkxFdEJRVXNzUTBGQlF6czdRVUZGVml4UFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0QlFVTTVRaXhOUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZGTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZET3p0QlFVVnNReXhUUVVGUExFbEJRVWtzUTBGQlF6dEZRVU5hTEVOQlFVTTdPMEZCUlVZc1MwRkJTU3hEUVVGRExFZEJRVWNzUjBGQlJ5eFZRVUZWTEU5QlFVOHNSVUZCUlR0QlFVTTNRaXhUUVVGUExFTkJRVU1zUlVGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03UlVGRGFFTXNRMEZCUXpzN1FVRkZSaXhMUVVGSkxFTkJRVU1zUjBGQlJ5eEhRVUZITEZWQlFWVXNUMEZCVHl4RlFVRkZMRWxCUVVrc1JVRkJSVHRCUVVOdVF5eFRRVUZQTEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRkxFOUJRVThzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0RlFVTXpReXhEUVVGRE96dEJRVVZHTEV0QlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1ZVRkJWU3hQUVVGUExFVkJRVVVzU1VGQlNTeEZRVUZGTzBGQlEzUkRMRk5CUVU4c1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNUMEZCVHl4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF6dEZRVU5xUkN4RFFVRkRPME5CUlVZc1EwRkJReXhEUVVGRE96dHhRa0ZGV1N4VlFVRlZJaXdpWm1sc1pTSTZJakl4TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkRiMnhzWldOMGFXOXVjeUJoY21VZ2FYUmxjbUZpYkdWeklIZG9hV05vSUdodmJHUWdZU0JqYjI1emFYTjBaVzUwSUdsdWRHVnlabUZqWlNCMGFISnZkV2RvYjNWMElHbDBjeUJwYm1SbGVHVnpMbHh1SUNwY2JpQXFJRUJ0YjJSMWJHVmNiaUFxSUVCeVpYRjFhWEpsY3lCdGIyUjFiR1U2ZEhsd1pYTXZRbUZ6YVdOQmNuSmhlVnh1SUNvdlhHNXBiWEJ2Y25RZ1FtRnphV05CY25KaGVTQm1jbTl0SUNkMGVYQmxjeTlDWVhOcFkwRnljbUY1Snp0Y2JseHVMeW9xWEc0Z0tpQThjM0JoYmlCamJHRnpjejFjSW1sdGNHOXlkR0Z1ZEZ3aVBrNVBWRVU2UEM5emNHRnVQaUJVYUdseklHbHpJRTVQVkNCaElHTnZibk4wY25WamRHOXlMaUIxYzJVZ1lFTnZiR3hsWTNScGIyNHVZM0psWVhSbEtDbGdJSFJ2SUdkbGRDQmhJRzVsZHlCcGJuTjBZVzVqWlM1Y2JpQXFJRUJqYkdGemMyUmxjMk1nU1hSbGNtRmliR1VnYUc5c1pHbHVaeUJ5WldOdmNtUWdiMkpxWldOMGN5QnZaaUIwYUdVZ2MyRnRaU0JwYm5SbGNtWmhZMlV1WEc0Z0tpQkFZMnhoYzNOY2JpQXFJRUJsZUhSbGJtUnpJRzF2WkhWc1pUcDBlWEJsY3k5Q1lYTnBZMEZ5Y21GNWZrSmhjMmxqUVhKeVlYbGNiaUFxTDF4dWRtRnlJRU52Ykd4bFkzUnBiMjRnUFNCQ1lYTnBZMEZ5Y21GNUxtVjRkR1Z1WkNobWRXNWpkR2x2YmlBb0tTQjdYRzVjZEM4cUtseHVYSFFnS2lCSFpYUnpJSFJvWlNCeVpXTnZjbVFnYjJKcVpXTjBJSGRvYVdOb0lHaGhjeUJnWDIxbGJXSmxjbUFnWVhNZ1lTQnRaVzFpWlhJdVhHNWNkQ0FxSUVCcGJuTjBZVzVqWlZ4dVhIUWdLaUJBY0hKdmRHVmpkR1ZrWEc1Y2RDQXFJRUJ0WlcxaVpYSnZaaUJ0YjJSMWJHVTZkSGx3WlhNdlEyOXNiR1ZqZEdsdmJuNURiMnhzWldOMGFXOXVYRzVjZENBcUlFQmhjbWNnZXlwOUlGOXRaVzFpWlhJZ0xTQnZZbXBsWTNRZ2NtVm1aWEpsYm1ObElIUnZJSE5sWVhKamFDQm1iM0l1WEc1Y2RDQXFJRUJoY21jZ2UzTjBjbWx1WjMwZ1gydGxlU0F0SUhSb1pTQjBZWEpuWlhRZ2EyVjVJSFJ2SUhSbGMzUWdkR2hsSUdCZmJXVnRZbVZ5WUNCaFoyRnBibk4wTGx4dVhIUWdLaUJBWVhKbklIdGliMjlzWldGdWZTQmZjMmh2ZFd4a1EyOXNiR1ZqZENBdElEeHpjR0Z1SUhOMGVXeGxQVndpWTI5c2IzSTZJR0pzZFdVN0lHWnZiblF0ZDJWcFoyaDBPaUJpYjJ4a08xd2lQbUIwY25WbFlEd3ZjM0JoYmo0NklHTnZiR3hsWTNRZ1lXeHNJRzFoZEdOb2FXNW5JR1ZzWlcxbGJuUnpManhpY2o1Y2JseDBJQ29nUEhOd1lXNGdjM1I1YkdVOVhDSmpiMnh2Y2pvZ1lteDFaVHNnWm05dWRDMTNaV2xuYUhRNklHSnZiR1E3WENJK1lHWmhiSE5sWUR3dmMzQmhiajQ2SUhKbGRIVnliaUJtYVhKemRDQnlaWE4xYkhRdVhHNWNkQ0FxTDF4dVhIUm1kVzVqZEdsdmJpQm5aWFJTWldOdmNtUWdLRjl0WlcxaVpYSXNJRjlyWlhrc0lGOXphRzkxYkdSRGIyeHNaV04wS1NCN1hHNWNkRngwZG1GeUlHa3NJSEpsWTI5eVpDd2diV1Z0WW1WeUxDQnlaWE4xYkhRN1hHNWNibHgwWEhSeVpYTjFiSFFnUFNCYlhUdGNibHh1WEhSY2RHWnZjaUFvYVQwd095QnlaV052Y21RZ1BTQjBhR2x6VzJsZE95QnBLejB4S1NCN1hHNWNkRngwWEhScFppQW9YMnRsZVNBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc1Y2RGeDBYSFJjZEdsbUlDaHlaV052Y21SYlgydGxlVjBnUFQwOUlGOXRaVzFpWlhJcElIdGNibHgwWEhSY2RGeDBYSFJwWmlBb1gzTm9iM1ZzWkVOdmJHeGxZM1FwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkSEpsYzNWc2RDNXdkWE5vS0hKbFkyOXlaQ2s3WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkRngwWld4elpTQjdYRzVjZEZ4MFhIUmNkRngwWEhSeVpYUjFjbTRnY21WamIzSmtPMXh1WEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmxiSE5sSUdsbUlDaHlaV052Y21RZ2FXNXpkR0Z1WTJWdlppQkJjbkpoZVNrZ2UxeHVYSFJjZEZ4MFhIUnBaaUFvZm5KbFkyOXlaQzVwYm1SbGVFOW1LRjl0WlcxaVpYSXBLU0I3WEc1Y2RGeDBYSFJjZEZ4MGFXWWdLRjl6YUc5MWJHUkRiMnhzWldOMEtTQjdYRzVjZEZ4MFhIUmNkRngwWEhSeVpYTjFiSFF1Y0hWemFDaHlaV052Y21RcE8xeHVYSFJjZEZ4MFhIUmNkSDFjYmx4dVhIUmNkRngwWEhSY2RHVnNjMlVnZTF4dVhIUmNkRngwWEhSY2RGeDBjbVYwZFhKdUlISmxZMjl5WkR0Y2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwWld4elpTQjdYRzVjZEZ4MFhIUmNkR1p2Y2lBb2JXVnRZbVZ5SUdsdUlISmxZMjl5WkNrZ2UxeHVYSFJjZEZ4MFhIUmNkR2xtSUNnaGNtVmpiM0prTG1oaGMwOTNibEJ5YjNCbGNuUjVLRzFsYldKbGNpa3BJR052Ym5ScGJuVmxPMXh1WEhSY2RGeDBYSFJjZEdsbUlDaHlaV052Y21SYmJXVnRZbVZ5WFNBOVBUMGdYMjFsYldKbGNpa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MGFXWWdLRjl6YUc5MWJHUkRiMnhzWldOMEtTQjdYRzVjZEZ4MFhIUmNkRngwWEhSY2RISmxjM1ZzZEM1d2RYTm9LSEpsWTI5eVpDazdYRzVjZEZ4MFhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBYSFJjZEdWc2MyVWdlMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUnlaWFIxY200Z2NtVmpiM0prTzF4dVhIUmNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseHVYSFJjZEhKbGRIVnliaUJ5WlhOMWJIUXViR1Z1WjNSb0lEOGdjbVZ6ZFd4MElEb2diblZzYkR0Y2JseDBmVnh1WEc1Y2RDOHFLbHh1WEhRZ0tpQlBZbXBsWTNSeklIZHBkR2dnZEdocGN5QmhjeUJoYmlCdmQyNGdjSEp2Y0dWeWRIa2dkMmxzYkNCaVpTQnBaR1Z1ZEdsbWFXVmtJR0Z6SUhSb1pTQnliMjkwSUc5aWFtVmpkQzVjYmx4MElDb2dRRzFsYldKbGNtOW1JRzF2WkhWc1pUcDBlWEJsY3k5RGIyeHNaV04wYVc5dWZrTnZiR3hsWTNScGIyNWNibHgwSUNvZ1FISmxZV1J2Ym14NVhHNWNkQ0FxSUVCa1pXWmhkV3gwWEc1Y2RDQXFMMXh1WEhSMGFHbHpMbUpoYzJWVWVYQmxJRDBnSjFSWlVFVmZRMDlNVEVWRFZFbFBUaWM3WEc1Y2JseDBkR2hwY3k1aFpHUWdQU0JtZFc1amRHbHZiaUFvWDNKbFkyOXlaQ2tnZTF4dVhIUmNkR2xtSUNoK2RHaHBjeTVwYm1SbGVFOW1LRjl5WldOdmNtUXBLU0J5WlhSMWNtNGdabUZzYzJVN1hHNWNkRngwZEdocGN5NXdkWE5vS0Y5eVpXTnZjbVFwTzF4dVhHNWNkRngwY21WMGRYSnVJSFJvYVhNN1hHNWNkSDA3WEc1Y2JseDBkR2hwY3k1eVpXMXZkbVVnUFNCbWRXNWpkR2x2YmlBb1gzSmxZMjl5WkNrZ2UxeHVYSFJjZEhaaGNpQnBibVJsZUR0Y2JseHVYSFJjZEdsdVpHVjRJRDBnZEdocGN5NXBibVJsZUU5bUtGOXlaV052Y21RcE8xeHVYSFJjZEdsbUlDaCthVzVrWlhncElIUm9hWE11YzNCc2FXTmxLR2x1WkdWNExDQXhLVHRjYmx4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TzF4dVhIUjlPMXh1WEc1Y2RIUm9hWE11YUdGeklEMGdablZ1WTNScGIyNGdLRjl5WldOdmNtUXBJSHRjYmx4MFhIUnlaWFIxY200Z0lTRitkR2hwY3k1cGJtUmxlRTltS0Y5eVpXTnZjbVFwTzF4dVhIUjlPMXh1WEc1Y2RIUm9hWE11WjJWMElEMGdablZ1WTNScGIyNGdLRjl0WlcxaVpYSXNJRjlyWlhrcElIdGNibHgwWEhSeVpYUjFjbTRnWjJWMFVtVmpiM0prTG1OaGJHd29kR2hwY3l3Z1gyMWxiV0psY2l3Z1gydGxlU2s3WEc1Y2RIMDdYRzVjYmx4MGRHaHBjeTVtYVd4MFpYSWdQU0JtZFc1amRHbHZiaUFvWDIxbGJXSmxjaXdnWDJ0bGVTa2dlMXh1WEhSY2RISmxkSFZ5YmlCblpYUlNaV052Y21RdVkyRnNiQ2gwYUdsekxDQmZiV1Z0WW1WeUxDQmZhMlY1TENCMGNuVmxLVHRjYmx4MGZUdGNibHh1ZlNrN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElFTnZiR3hsWTNScGIyNDdYRzVjYmx4dUx5b3FJRmRGUWxCQlEwc2dSazlQVkVWU0lDb3FYRzRnS2lvZ0xpOXpiM1Z5WTJVdmRIbHdaWE12UTI5c2JHVmpkR2x2Ymk1cWMxeHVJQ29xTHlKZExDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVwiKTtcblxuLyoqKi8gfSxcbi8qIDIyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRldmFsKFwiZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcXG4vKipcXG4qICBHbG9iYWxTY29wZVxcbiovXFxuXFxudmFyIF90eXBlc1Njb3BlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XFxuXFxudmFyIEdsb2JhbFNjb3BlID0gX3R5cGVzU2NvcGUuU2NvcGUuZXh0ZW5kKGZ1bmN0aW9uICgpIHtcXG5cXG5cXHR0aGlzLmJhc2VUeXBlID0gJ1RZUEVfR0xPQkFMX1NDT1BFJztcXG59KTtcXG5cXG5leHBvcnRzWydkZWZhdWx0J10gPSBHbG9iYWxTY29wZTtcXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsvL0Agc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOXpiM1Z5WTJVdmRIbHdaWE12UjJ4dlltRnNVMk52Y0dVdWFuTS9abUUzWXlKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN096dHpRMEZKYzBJc1JVRkJZVHM3UVVGRmJrTXNTVUZCU1N4WFFVRlhMRWRCUVVjc2EwSkJRVTBzVFVGQlRTeERRVUZETEZsQlFWazdPMEZCUlRGRExFdEJRVWtzUTBGQlF5eFJRVUZSTEVkQlFVY3NiVUpCUVcxQ0xFTkJRVU03UTBGRmNFTXNRMEZCUXl4RFFVRkRPenR4UWtGRldTeFhRVUZYSWl3aVptbHNaU0k2SWpJeUxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcVhHNHFJQ0JIYkc5aVlXeFRZMjl3WlZ4dUtpOWNibHh1YVcxd2IzSjBJSHNnVTJOdmNHVWdmU0JtY205dElDZDBlWEJsY3k5VFkyOXdaU2M3WEc1Y2JuWmhjaUJIYkc5aVlXeFRZMjl3WlNBOUlGTmpiM0JsTG1WNGRHVnVaQ2htZFc1amRHbHZiaUFvS1NCN1hHNWNkRnh1WEhSMGFHbHpMbUpoYzJWVWVYQmxJRDBnSjFSWlVFVmZSMHhQUWtGTVgxTkRUMUJGSnp0Y2JseHVmU2s3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUVkc2IySmhiRk5qYjNCbE8xeHVYRzVjYmk4cUtpQlhSVUpRUVVOTElFWlBUMVJGVWlBcUtseHVJQ29xSUM0dmMyOTFjbU5sTDNSNWNHVnpMMGRzYjJKaGJGTmpiM0JsTG1welhHNGdLaW92SWwwc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVwiKTtcblxuLyoqKi8gfSxcbi8qIDIzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRldmFsKFwidmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpWydkZWZhdWx0J107XFxuXFxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcXG4vKipcXG4gKiBTY29wZXMgYXJlIHBhY2thZ2VzIHdoaWNoIGNvbnRhaW4gYSByZWZlcmVuY2UgdG8gYSBET00gZWxlbWVudCB3cmFwcGVkIGluIGEgalF1ZXJ5IG9iamVjdC5cXG4gKiBUaGlzIGVuYWJsZXMgcHJvcGVydGllcyBhbmQgbWV0aG9kcyB0byBiZSBpbiBjb250ZXh0IG9mIHRoZSBET00gbm9kZSBhbmQgaXRzIGRlc2NlbmRhbnRzLlxcbiAqXFxuICogQG1vZHVsZVxcbiAqIEByZXF1aXJlcyB0eXBlcy9qUVByb3h5XFxuICogQHJlcXVpcmVzIHR5cGVzL0Jhc2ljXFxuICogQHJlcXVpcmVzIHR5cGVzL1F1ZXVlXFxuICogQHJlcXVpcmVzIHBsYXkuZ2FtZVxcbiAqIEByZXF1aXJlcyB1dGlsXFxuICogQHJlcXVpcmVzIGV2YWxBY3Rpb25cXG4gKlxcbiAqIEBleHBvcnRzIGNyZWF0ZUVudGl0eVxcbiAqL1xcblxcbnZhciBfdHlwZXNKUVByb3h5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7XFxuXFxudmFyIF90eXBlc0pRUHJveHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZXNKUVByb3h5KTtcXG5cXG52YXIgX3R5cGVzQmFzaWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcXG5cXG52YXIgX3R5cGVzQmFzaWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZXNCYXNpYyk7XFxuXFxudmFyIF90eXBlc1F1ZXVlID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNyk7XFxuXFxudmFyIF90eXBlc1F1ZXVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVzUXVldWUpO1xcblxcbnZhciBfdHlwZXNEaW1lbnNpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcXG5cXG52YXIgX3BsYXlHYW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XFxuXFxudmFyIF9wbGF5R2FtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wbGF5R2FtZSk7XFxuXFxudmFyIF91dGlsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XFxuXFxudmFyIF91dGlsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3V0aWwpO1xcblxcbnZhciBfZXZhbEFjdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMzgpO1xcblxcbnZhciBfZXZhbEFjdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ldmFsQWN0aW9uKTtcXG5cXG4vKipcXG4gKiBDcmVhdGVzIGEgbmV3IEVuaXRpeSBpbnN0YW5jZSB3aXRoIGEgY29udGV4dCBub2RlIGFuZCBpbXBsZW1lbnRhdGlvbi5cXG4gKiBUaGUgaW5zdGFuY2UgaXMgcHJvdG90eXBlZCBmcm9tIHRoZSBwYXJlbnQgc2NvcGUuXFxuICpcXG4gKiBAbWVtYmVyb2YgbW9kdWxlOnR5cGVzL1Njb3BlflNjb3BlI2NyZWF0ZUVudGl0eVxcbiAqIEBwcm90ZWN0ZWRcXG4gKiBAYXJnIHtqUXVlcnl9IF8kbm9kZSAtIGpRdWVyeSBvYmplY3Qgd2l0aCBhIHNpbmdsZSBub2RlIGluIHRoZSBjb2xsZWN0aW9uLlxcbiAqIEBhcmcge2Z1bmN0aW9ufG9iamVjdH0gX2ltcGxlbWVudGF0aW9uIC0gQ29uc3RydWN0b3IgZnVuY3Rpb24gb3Igb2JqZWN0IHdpdGggdGhlIGVudGl0eSBiZWhhdmlvci5cXG4gKiBAcmV0dXJucyB7bW9kdWxlOnR5cGVzL1Njb3BlflNjb3BlfVxcbiAqL1xcbmZ1bmN0aW9uIGNyZWF0ZUVudGl0eShfJG5vZGUsIF9pbXBsZW1lbnRhdGlvbikge1xcblxcdHZhciBjb21wb25lbnQsIHByb3RvdHlwZSwgY29tcG9uZW50UmVjb3JkLCBpbnN0YW5jZTtcXG5cXG5cXHRjb21wb25lbnQgPSBfJG5vZGUuYXR0cigncGwtY29tcG9uZW50Jyk7XFxuXFx0cHJvdG90eXBlID0gdGhpcztcXG5cXG5cXHRpZiAoY29tcG9uZW50KSB7XFxuXFx0XFx0Y29tcG9uZW50UmVjb3JkID0gX3BsYXlHYW1lMlsnZGVmYXVsdCddLmNvbXBvbmVudC5nZXQoY29tcG9uZW50KTtcXG5cXG5cXHRcXHRpZiAoY29tcG9uZW50UmVjb3JkKSB7XFxuXFx0XFx0XFx0cHJvdG90eXBlID0gdGhpcy5leHRlbmQoY29tcG9uZW50UmVjb3JkLmltcGxlbWVudGF0aW9uKTtcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdHRocm93IG5ldyBFcnJvcignTm8gaW1wbGVtZW50YXRpb24gcmVjb3JkIGZvciB0aGUgJyArIGNvbXBvbmVudCArICdjb21wb25lbnQuJyk7XFxuXFx0XFx0fVxcblxcdH1cXG5cXG5cXHRpbnN0YW5jZSA9IHR5cGVvZiBfaW1wbGVtZW50YXRpb24gPT09ICdmdW5jdGlvbicgPyBwcm90b3R5cGUuZXh0ZW5kKF9pbXBsZW1lbnRhdGlvbikgOiBwcm90b3R5cGUuY3JlYXRlKCk7XFxuXFxuXFx0cmV0dXJuIGluc3RhbmNlLmluaXRpYWxpemUoXyRub2RlLCBjb21wb25lbnQpO1xcbn1cXG5cXG4vKipcXG4gKiA8c3BhbiBjbGFzcz1cXFwiaW1wb3J0YW50XFxcIj5OT1RFOjwvc3Bhbj4gVGhpcyBpcyBOT1QgYSBjb25zdHJ1Y3Rvci4gVXNlIGBTY29wZS5jcmVhdGUoKWAgdG8gZ2V0IGEgbmV3IGluc3RhbmNlLlxcbiAqIEBjbGFzc2Rlc2MgQSBwYWNrYWdlIHdoaWNoIGNvbnRhaW5zIGEgcmVmZXJlbmNlIHRvIGEgRE9NIG5vZGUgd3JhcHBlZCBpbiBhIGpRdWVyeSBvYmplY3QuIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHNjb3BlcyByZWFkIFt0aGlzXXtAbGluayBtb2R1bGU6dHlwZXMvU2NvcGV9LlxcbiAqIEBjbGFzc1xcbiAqIEBleHRlbmRzIG1vZHVsZTp0eXBlcy9qUVByb3h5fmpRUHJveHlcXG4gKi9cXG52YXIgU2NvcGUgPSBfdHlwZXNKUVByb3h5MlsnZGVmYXVsdCddLmV4dGVuZChmdW5jdGlvbiAoKSB7XFxuXFxuXFx0LyoqXFxuICAqIENvbGxlY3Rpb24gb2YgcmVjb3JkcyBwYWlyaW5nIGEgbm9kZSB3aXRoIGl0cyBhY3Rpb24uXFxuICAqIEBtZW1iZXJvZiBtb2R1bGU6dHlwZXMvU2NvcGV+U2NvcGVcXG4gICogQHN0YXRpY1xcbiAgKiBAcHJvdGVjdGVkXFxuICAqIEB0b2RvIENvbnZlcnQgdG8gdHlwZXMvQ29sbGVjdGlvblxcbiAgKi9cXG5cXHR2YXIgQWN0aW9uYWJsZXM7XFxuXFxuXFx0ZnVuY3Rpb24gYXR0YWNoQWN0aW9uSGFuZGxlcigpIHtcXG5cXHRcXHR2YXIgZW50aXR5O1xcblxcblxcdFxcdGVudGl0eSA9IHRoaXM7XFxuXFxuXFx0XFx0dGhpcy5vbihwbC5FVkVOVC5DTElDSywgZnVuY3Rpb24gKF9ldmVudCkge1xcblxcdFxcdFxcdHZhciB0YXJnZXQsIHJlY29yZDtcXG5cXG5cXHRcXHRcXHR0YXJnZXQgPSAkKF9ldmVudC50YXJnZXQpLmNsb3Nlc3QoJ1twbC1hY3Rpb25dJylbMF07XFxuXFx0XFx0XFx0Ly8gVE9ETzogUmVzb2x2ZSBmb3IgdG91Y2hlc1xcblxcdFxcdFxcdF9ldmVudC5jdXJzb3IgPSBfdHlwZXNEaW1lbnNpb25zLlBvaW50LmNyZWF0ZSgpLnNldChfZXZlbnQuY2xpZW50WCwgX2V2ZW50LmNsaWVudFkpO1xcblxcblxcdFxcdFxcdGlmICh0YXJnZXQpIHtcXG5cXHRcXHRcXHRcXHRyZWNvcmQgPSBlbnRpdHkuYWN0aW9uYWJsZXMuaXRlbSh0YXJnZXQpO1xcblxcblxcdFxcdFxcdFxcdGlmIChyZWNvcmQpIHtcXG5cXHRcXHRcXHRcXHRcXHRfZXZlbnQudGFyZ2V0U2NvcGUgPSBlbnRpdHk7XFxuXFx0XFx0XFx0XFx0XFx0ZW50aXR5LmV2ZW50ID0gX2V2ZW50O1xcblxcdFxcdFxcdFxcdFxcdF9ldmFsQWN0aW9uMlsnZGVmYXVsdCddKHJlY29yZC5hY3Rpb24sIGVudGl0eSk7XFxuXFx0XFx0XFx0XFx0XFx0ZW50aXR5LmV2ZW50ID0gbnVsbDtcXG5cXHRcXHRcXHRcXHR9XFxuXFx0XFx0XFx0fVxcblxcdFxcdH0pO1xcblxcdH1cXG5cXG5cXHRmdW5jdGlvbiBnZXRSZWNvcmRCeShfa2V5LCBfbWVtYmVyLCBfY29sbGVjdGlvbikge1xcblxcdFxcdHZhciBpLCByZWNvcmQ7XFxuXFxuXFx0XFx0aWYgKF9jb2xsZWN0aW9uKSB7XFxuXFx0XFx0XFx0Zm9yIChpID0gMDsgcmVjb3JkID0gX2NvbGxlY3Rpb25baV07IGkgKz0gMSkge1xcblxcdFxcdFxcdFxcdGlmIChyZWNvcmRbX2tleV0gPT09IF9tZW1iZXIpIHJldHVybiByZWNvcmQ7XFxuXFx0XFx0XFx0fVxcblxcdFxcdH1cXG5cXG5cXHRcXHRyZXR1cm4gbnVsbDtcXG5cXHR9XFxuXFxuXFx0ZnVuY3Rpb24gcmVtb3ZlUmVjb3JkKF9yZWNvcmQsIF9jb2xsZWN0aW9uKSB7XFxuXFx0XFx0dmFyIGluZGV4O1xcblxcblxcdFxcdGluZGV4ID0gX2NvbGxlY3Rpb24uaW5kZXhPZihfcmVjb3JkKTtcXG5cXHRcXHRpZiAofmluZGV4KSBfY29sbGVjdGlvbi5zcGxpY2UoaW5kZXgsIDEpO1xcblxcdH1cXG5cXG5cXHRmdW5jdGlvbiBjYXB0dXJlRHJvcGFibGVzKF9zY29wZSkge1xcblxcdFxcdHZhciBjb2xsZWN0aW9uO1xcblxcblxcdFxcdGNvbGxlY3Rpb24gPSBbXTtcXG5cXG5cXHRcXHRfc2NvcGUuZmluZCgnPiBbcGwtcGx1Y2tdJykuZWFjaChmdW5jdGlvbiAoKSB7XFxuXFx0XFx0XFx0dmFyIG5hbWU7XFxuXFxuXFx0XFx0XFx0bmFtZSA9ICQodGhpcykuYXR0cigncGwtcGx1Y2snKTtcXG5cXG5cXHRcXHRcXHRjb2xsZWN0aW9uLnB1c2godGhpcyk7XFxuXFx0XFx0XFx0Y29sbGVjdGlvbltuYW1lXSA9IHRoaXM7XFxuXFx0XFx0fSk7XFxuXFxuXFx0XFx0cmV0dXJuIGNvbGxlY3Rpb247XFxuXFx0fVxcblxcblxcdGZ1bmN0aW9uIHBsdWNrQW5kRHJvcChfZHJvcGFibGVzLCBfdGVtcGxhdGUpIHtcXG5cXHRcXHQkKF90ZW1wbGF0ZSkuZmluZCgnW3BsLWRyb3BdJykuZWFjaChmdW5jdGlvbiAoKSB7XFxuXFx0XFx0XFx0dmFyICRub2RlLCBuYW1lLCBkcm9wYWJsZTtcXG5cXG5cXHRcXHRcXHQkbm9kZSA9ICQodGhpcyk7XFxuXFx0XFx0XFx0bmFtZSA9ICRub2RlLmF0dHIoJ3BsLWRyb3AnKTtcXG5cXHRcXHRcXHRkcm9wYWJsZSA9IF9kcm9wYWJsZXNbbmFtZV07XFxuXFxuXFx0XFx0XFx0aWYgKGRyb3BhYmxlKSB7XFxuXFx0XFx0XFx0XFx0JG5vZGUucmVwbGFjZVdpdGgoZHJvcGFibGUuY2hpbGRyZW4pO1xcblxcdFxcdFxcdH1cXG5cXHRcXHR9KTtcXG5cXHR9XFxuXFxuXFx0Ly8gUHJvdGVjdGVkXFxuXFx0ZnVuY3Rpb24gbG9hZENvbXBvbmVudEFzc2V0cyhfbmFtZSwgX2NhbGxiYWNrKSB7XFxuXFx0XFx0dmFyIHNjb3BlLCBwYXRoLCB0b3RhbFJlcXVlc3RzLCB0cmFuc2NsdWRlTW9kZSwgZHJvcGFibGVzO1xcblxcblxcdFxcdGZ1bmN0aW9uIHJlYWR5KCkge1xcblxcdFxcdFxcdHJlYWR5LnN0YXR1cyArPSAxO1xcblxcblxcdFxcdFxcdGlmIChyZWFkeS5zdGF0dXMgPT09IHRvdGFsUmVxdWVzdHMpIHtcXG5cXHRcXHRcXHRcXHRpZiAoX2NhbGxiYWNrKSB7XFxuXFx0XFx0XFx0XFx0XFx0X2NhbGxiYWNrLmNhbGwoc2NvcGUsIF9uYW1lKTtcXG5cXHRcXHRcXHRcXHR9XFxuXFx0XFx0XFx0fVxcblxcdFxcdH1cXG5cXG5cXHRcXHR0b3RhbFJlcXVlc3RzID0gMDtcXG5cXHRcXHRzY29wZSA9IHRoaXM7XFxuXFx0XFx0cGF0aCA9IF9wbGF5R2FtZTJbJ2RlZmF1bHQnXS5jb25maWcoJ2NvbXBvbmVudERpcmVjdG9yeScpICsgX25hbWUgKyAnLyc7XFxuXFx0XFx0ZHJvcGFibGVzID0gY2FwdHVyZURyb3BhYmxlcyh0aGlzKTtcXG5cXHRcXHR0cmFuc2NsdWRlTW9kZSA9IGRyb3BhYmxlcy5sZW5ndGggPyB0aGlzLlRSQU5TQ0xVREVfUExVQ0sgOiB0aGlzLnByb3BlcnRpZXMudHJhbnNjbHVkZTtcXG5cXHRcXHRyZWFkeS5zdGF0dXMgPSAwO1xcblxcblxcdFxcdGlmICghdGhpcy5jaGlsZHJlbigpLmxlbmd0aCB8fCB0cmFuc2NsdWRlTW9kZSkge1xcblxcdFxcdFxcdHRvdGFsUmVxdWVzdHMgKz0gMTtcXG5cXHRcXHRcXHQkKCc8ZGl2PicpLmxvYWQocGF0aCArICd0ZW1wbGF0ZS5odG1sJywgZnVuY3Rpb24gKCkge1xcblxcdFxcdFxcdFxcdHZhciBtZW1vcnk7XFxuXFxuXFx0XFx0XFx0XFx0bWVtb3J5ID0gW107XFxuXFxuXFx0XFx0XFx0XFx0c3dpdGNoICh0cmFuc2NsdWRlTW9kZSkge1xcblxcdFxcdFxcdFxcdFxcdGNhc2Ugc2NvcGUuVFJBTlNDTFVERV9BUFBFTkQ6XFxuXFx0XFx0XFx0XFx0XFx0XFx0c2NvcGUuYXBwZW5kKHRoaXMuY2hpbGRyZW4pO1xcblxcdFxcdFxcdFxcdFxcdFxcdGJyZWFrO1xcblxcblxcdFxcdFxcdFxcdFxcdGNhc2Ugc2NvcGUuVFJBTlNDTFVERV9QUkVQRU5EOlxcblxcdFxcdFxcdFxcdFxcdFxcdHNjb3BlLnByZXBlbmQodGhpcy5jaGlsZHJlbik7XFxuXFx0XFx0XFx0XFx0XFx0XFx0YnJlYWs7XFxuXFxuXFx0XFx0XFx0XFx0XFx0Y2FzZSBzY29wZS5UUkFOU0NMVURFX1BMVUNLOlxcblxcdFxcdFxcdFxcdFxcdFxcdHBsdWNrQW5kRHJvcChkcm9wYWJsZXMsIHRoaXMpO1xcblxcdFxcdFxcdFxcdFxcdFxcdHNjb3BlLmVtcHR5KCkuYXBwZW5kKHRoaXMuY2hpbGRyZW4pO1xcblxcdFxcdFxcdFxcdFxcdFxcdGJyZWFrO1xcblxcblxcdFxcdFxcdFxcdFxcdGNhc2Ugc2NvcGUuVFJBTlNDTFVERV9SRVBMQUNFOlxcblxcdFxcdFxcdFxcdFxcdFxcdHNjb3BlLmVtcHR5KCkuYXBwZW5kKHRoaXMuY2hpbGRyZW4pO1xcblxcdFxcdFxcdFxcdFxcdFxcdGJyZWFrO1xcblxcblxcdFxcdFxcdFxcdFxcdGRlZmF1bHQ6XFxuXFx0XFx0XFx0XFx0XFx0XFx0aWYgKHRyYW5zY2x1ZGVNb2RlKSB7XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0cGx1Y2tBbmREcm9wKG5ldyBmdW5jdGlvbiAoKSB7XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0dGhpc1t0cmFuc2NsdWRlTW9kZV0gPSBzY29wZS5ub2RlKCk7XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0fSgpLCB0aGlzKTtcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRzY29wZS5lbXB0eSgpLmFwcGVuZCh0aGlzLmNoaWxkcmVuKTtcXG5cXHRcXHRcXHRcXHRcXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdFxcdFxcdFxcdFxcdHNjb3BlLmVtcHR5KCkuYXBwZW5kKHRoaXMuY2hpbGRyZW4pO1xcblxcdFxcdFxcdFxcdFxcdFxcdH1cXG5cXG5cXHRcXHRcXHRcXHR9XFxuXFxuXFx0XFx0XFx0XFx0c2NvcGUuZmluZE93bignW3BsLWNvbXBvbmVudF0nKS5lYWNoKGZ1bmN0aW9uICgpIHtcXG5cXHRcXHRcXHRcXHRcXHR2YXIgbmFtZTtcXG5cXG5cXHRcXHRcXHRcXHRcXHRuYW1lID0gJCh0aGlzKS5hdHRyKCdwbC1jb21wb25lbnQnKTtcXG5cXG5cXHRcXHRcXHRcXHRcXHRpZiAofm1lbW9yeS5pbmRleE9mKG5hbWUpKSByZXR1cm47XFxuXFxuXFx0XFx0XFx0XFx0XFx0bWVtb3J5LnB1c2gobmFtZSk7XFxuXFxuXFx0XFx0XFx0XFx0XFx0dG90YWxSZXF1ZXN0cyArPSAxO1xcblxcblxcdFxcdFxcdFxcdFxcdF9wbGF5R2FtZTJbJ2RlZmF1bHQnXS5jb21wb25lbnQubG9hZChuYW1lLCBmdW5jdGlvbiAoKSB7XFxuXFx0XFx0XFx0XFx0XFx0XFx0cmVhZHkoKTtcXG5cXHRcXHRcXHRcXHRcXHR9KTtcXG5cXHRcXHRcXHRcXHR9KTtcXG5cXHRcXHRcXHRcXHRyZWFkeSgpO1xcblxcdFxcdFxcdH0pO1xcblxcdFxcdH1cXG5cXG5cXHRcXHRpZiAoISQoJ3N0eWxlW3BsLWZvci1jb21wb25lbnQ9XFxcIicgKyBfbmFtZSArICdcXFwiXScpLmxlbmd0aCAmJiBfcGxheUdhbWUyWydkZWZhdWx0J10uY29uZmlnKCdzaG91bGRMb2FkQ29tcG9uZW50U3R5bGVzJykgIT09IGZhbHNlKSB7XFxuXFx0XFx0XFx0dG90YWxSZXF1ZXN0cyArPSAxO1xcblxcdFxcdFxcdCQoJzxzdHlsZSB0eXBlPVxcXCJ0ZXh0L2Nzc1xcXCIgcGwtZm9yLWNvbXBvbmVudD1cXFwiJyArIF9uYW1lICsgJ1xcXCI+JykubG9hZChwYXRoICsgJ3N0eWxlLmNzcycsIHJlYWR5KS5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KTtcXG5cXHRcXHR9XFxuXFxuXFx0XFx0aWYgKCF0b3RhbFJlcXVlc3RzKSBfY2FsbGJhY2sgJiYgX2NhbGxiYWNrLmNhbGwodGhpcywgX25hbWUpO1xcblxcblxcdFxcdHJldHVybiB0aGlzO1xcblxcdH1cXG5cXG5cXHRmdW5jdGlvbiBjYXB0dXJlUHJvcGVydGllcygpIHtcXG5cXHRcXHR2YXIgaSwgYXR0ciwgbmFtZSwgY29sbGVjdGlvbjtcXG5cXG5cXHRcXHRjb2xsZWN0aW9uID0gKGZ1bmN0aW9uICgpIHtcXG5cXG5cXHRcXHRcXHR0aGlzLmhhcyA9IGZ1bmN0aW9uIChfbmFtZSkge1xcblxcdFxcdFxcdFxcdHJldHVybiAhISB+dGhpcy5pbmRleE9mKF9uYW1lKTtcXG5cXHRcXHRcXHR9O1xcblxcblxcdFxcdFxcdHJldHVybiB0aGlzO1xcblxcdFxcdH0pLmNhbGwoW10pO1xcblxcblxcdFxcdGZvciAoaSA9IDA7IGF0dHIgPSB0aGlzLiRlbHNbMF0uYXR0cmlidXRlc1tpXTsgaSArPSAxKSB7XFxuXFx0XFx0XFx0Ly8gSSBleHBsaWNpdGx5IHdhbnQgaXQgdG8gYmUgYXQgdGhlIGJlZ2lubmluZy5cXG5cXHRcXHRcXHRpZiAoYXR0ci5uYW1lLmluZGV4T2YoJ3BsLScpID09PSAwKSB7XFxuXFx0XFx0XFx0XFx0bmFtZSA9IGF0dHIubmFtZS5zbGljZSgzKTtcXG5cXHRcXHRcXHRcXHRjb2xsZWN0aW9uW191dGlsMlsnZGVmYXVsdCddLnRyYW5zZm9ybUlkKG5hbWUsIHRydWUpXSA9IGF0dHIudmFsdWU7XFxuXFxuXFx0XFx0XFx0XFx0Y29sbGVjdGlvbi5wdXNoKG5hbWUpO1xcblxcdFxcdFxcdH1cXG5cXHRcXHR9XFxuXFxuXFx0XFx0aWYgKGNvbGxlY3Rpb24ubGVuZ3RoKSB0aGlzLnByb3BlcnRpZXMgPSBjb2xsZWN0aW9uO1xcblxcblxcdFxcdHJldHVybiB0aGlzO1xcblxcdH1cXG5cXG5cXHRmdW5jdGlvbiBpbml0aWFsaXplRW50aXRpZXMoKSB7XFxuXFx0XFx0aWYgKCF0aGlzLmhhc093blByb3BlcnR5KCdlbnRpdGllcycpKSByZXR1cm4gdGhpcztcXG5cXG5cXHRcXHR0aGlzLmVudGl0aWVzLmZvckVhY2godGhpcy5iaW5kKGZ1bmN0aW9uIChfcmVjb3JkLCBfaW5kZXgpIHtcXG5cXHRcXHRcXHR2YXIgJG5vZGUsIGluc3RhbmNlLCBpZCwgcXVlcnksIGluZGV4O1xcblxcblxcdFxcdFxcdCRub2RlID0gdGhpcy5maW5kT3duKF9yZWNvcmQuc2VsZWN0b3IpO1xcblxcdFxcdFxcdHF1ZXJ5ID0gWycjJyArIF9yZWNvcmQuc2VsZWN0b3IsICdbcGwtaWQ9JyArIF9yZWNvcmQuc2VsZWN0b3IgKyAnXScsICdbcGwtY29tcG9uZW50PScgKyBfcmVjb3JkLnNlbGVjdG9yICsgJ10nLCAnW3BsLScgKyBfcmVjb3JkLnNlbGVjdG9yICsgJ10nXTtcXG5cXHRcXHRcXHRpbmRleCA9IDA7XFxuXFxuXFx0XFx0XFx0d2hpbGUgKCEkbm9kZS5sZW5ndGgpIHtcXG5cXHRcXHRcXHRcXHRpZiAoaW5kZXggPT09IHF1ZXJ5Lmxlbmd0aCkge1xcblxcdFxcdFxcdFxcdFxcdHRocm93IG5ldyBFcnJvcihcXFwiVW5hYmxlIHRvIGxvY2F0ZSBlbnRpdHkgd2l0aCBzZWxlY3RvclxcXCIsIF9yZWNvcmQuc2VsZWN0b3IpO1xcblxcdFxcdFxcdFxcdH1cXG5cXHRcXHRcXHRcXHQkbm9kZSA9IHRoaXMuZmluZE93bihxdWVyeVtpbmRleF0pO1xcblxcdFxcdFxcdFxcdGluZGV4ICs9IDE7XFxuXFx0XFx0XFx0fVxcblxcblxcdFxcdFxcdGlmICghU2NvcGUuaXNQcm90b3R5cGVPZihfcmVjb3JkKSkge1xcblxcdFxcdFxcdFxcdGluc3RhbmNlID0gY3JlYXRlRW50aXR5LmNhbGwodGhpcywgJG5vZGUsIF9yZWNvcmQuaW1wbGVtZW50YXRpb24pO1xcblxcblxcdFxcdFxcdFxcdGlmICghaW5zdGFuY2UuaXNSZWFkeSkge1xcblxcdFxcdFxcdFxcdFxcdHRoaXMuYXNzZXRRdWV1ZS5hZGQoaW5zdGFuY2UpO1xcblxcdFxcdFxcdFxcdH1cXG5cXHRcXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdFxcdGluc3RhbmNlID0gX3JlY29yZDtcXG5cXHRcXHRcXHR9XFxuXFxuXFx0XFx0XFx0aWQgPSBfdXRpbDJbJ2RlZmF1bHQnXS50cmFuc2Zvcm1JZChpbnN0YW5jZS5pZCgpLCB0cnVlKTtcXG5cXHRcXHRcXHRpZiAoaWQpIF91dGlsMlsnZGVmYXVsdCddLmFzc2lnblJlZih0aGlzLCBpZCwgaW5zdGFuY2UpO1xcblxcdFxcdH0pKTtcXG5cXG5cXHRcXHRyZXR1cm4gdGhpcztcXG5cXHR9XFxuXFxuXFx0ZnVuY3Rpb24gaGFuZGxlUHJvcGVydGllcygpIHtcXG5cXHRcXHR2YXIgc2NvcGUsIHByb3BlcnR5LCBoYW5kbGVyO1xcblxcblxcdFxcdHNjb3BlID0gdGhpcztcXG5cXG5cXHRcXHRpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eSgncHJvcGVydGllcycpKSB7XFxuXFx0XFx0XFx0dGhpcy5wcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24gKF9uYW1lKSB7XFxuXFx0XFx0XFx0XFx0aGFuZGxlciA9IHNjb3BlLnByb3BlcnR5SGFuZGxlcnNbX25hbWVdO1xcblxcdFxcdFxcdFxcdGlmIChoYW5kbGVyKSBoYW5kbGVyLmNhbGwoc2NvcGUsIHNjb3BlLiRlbHNbMF0sIF9uYW1lLCBzY29wZS5wcm9wZXJ0aWVzW19uYW1lXSk7XFxuXFx0XFx0XFx0fSk7XFxuXFx0XFx0fVxcblxcblxcdFxcdGlmICh0aGlzLnByb3BlcnR5SGFuZGxlcnMpIHtcXG5cXHRcXHRcXHRmb3IgKHByb3BlcnR5IGluIHRoaXMucHJvcGVydHlIYW5kbGVycykge1xcblxcdFxcdFxcdFxcdC8vIG9ubHkgZXhjbGlkZSBtZW1iZXJzIG9uIHRoZSBiYXNlIHR5cGVcXG5cXHRcXHRcXHRcXHRpZiAoX3R5cGVzQmFzaWMyWydkZWZhdWx0J10uaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSBjb250aW51ZTtcXG5cXG5cXHRcXHRcXHRcXHRoYW5kbGVyID0gdGhpcy5wcm9wZXJ0eUhhbmRsZXJzW3Byb3BlcnR5XTtcXG5cXG5cXHRcXHRcXHRcXHR0aGlzLmZpbmQoJ1twbC0nICsgcHJvcGVydHkgKyAnXScpLmVhY2goZnVuY3Rpb24gKCkge1xcblxcdFxcdFxcdFxcdFxcdHZhciBhdHRyO1xcblxcblxcdFxcdFxcdFxcdFxcdGlmIChzY29wZSA9PT0gJCh0aGlzKS5zY29wZSgpKSB7XFxuXFx0XFx0XFx0XFx0XFx0XFx0YXR0ciA9IHRoaXMuYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ3BsLScgKyBwcm9wZXJ0eSk7XFxuXFxuXFx0XFx0XFx0XFx0XFx0XFx0aWYgKGhhbmRsZXIpIGhhbmRsZXIuY2FsbChzY29wZSwgdGhpcywgcHJvcGVydHksIGF0dHIudmFsdWUpO1xcblxcdFxcdFxcdFxcdFxcdH1cXG5cXHRcXHRcXHRcXHR9KTtcXG5cXHRcXHRcXHR9XFxuXFx0XFx0fVxcblxcblxcdFxcdHJldHVybiB0aGlzO1xcblxcdH1cXG5cXG5cXHRmdW5jdGlvbiBpbnZva2VMb2NhbChfbmFtZSkge1xcblxcdFxcdHZhciBhcmdzLCBvd25lcjtcXG5cXG5cXHRcXHRhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xcblxcblxcdFxcdGlmICh0aGlzLmlzTWVtYmVyU2FmZShfbmFtZSkpIHtcXG5cXHRcXHRcXHRyZXR1cm4gdGhpc1tfbmFtZV0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG5cXHRcXHR9XFxuXFx0fVxcblxcblxcdGZ1bmN0aW9uIGluaXQoKSB7XFxuXFx0XFx0aW52b2tlTG9jYWwuY2FsbCh0aGlzLCAnd2lsbEluaXQnKTtcXG5cXG5cXHRcXHR0aGlzLmF0dGFjaEV2ZW50cygpO1xcblxcblxcdFxcdGluaXRpYWxpemVFbnRpdGllcy5jYWxsKHRoaXMpO1xcblxcdFxcdGhhbmRsZVByb3BlcnRpZXMuY2FsbCh0aGlzKTtcXG5cXG5cXHRcXHR0aGlzLndhdGNoQXNzZXRzKCk7XFxuXFx0XFx0dGhpcy5jYXB0dXJlQXVkaW9Bc3NldHMoKTtcXG5cXHRcXHR0aGlzLmNhcHR1cmVSZWZlcmVuY2VzKCk7XFxuXFxuXFx0XFx0dGhpcy5fX2luaXQoKTtcXG5cXHRcXHRpbnZva2VMb2NhbC5jYWxsKHRoaXMsICdpbml0Jyk7XFxuXFxuXFx0XFx0aWYgKCF0aGlzLmlzUmVhZHkpIHRoaXMuYXNzZXRRdWV1ZS5yZWFkeSgpO1xcblxcblxcdFxcdHJldHVybiB0aGlzO1xcblxcdH1cXG5cXG5cXHRmdW5jdGlvbiByZWFkeSgpIHtcXG5cXHRcXHR2YXIgcmVhZHlFdmVudCwgZW50aXRpZXM7XFxuXFxuXFx0XFx0cmVhZHlFdmVudCA9ICQuRXZlbnQoJ3JlYWR5JywgeyB0YXJnZXRTY29wZTogdGhpcyB9KTtcXG5cXHRcXHRlbnRpdGllcyA9IHRoaXMuZmluZE93bignLnBsLXNjb3BlJykuc2NvcGUoKTtcXG5cXG5cXHRcXHRpZiAoZW50aXRpZXMpIHtcXG5cXHRcXHRcXHRpZiAoZW50aXRpZXMubGVuZ3RoID4gMCkge1xcblxcdFxcdFxcdFxcdHRoaXMuZW50aXRpZXMgPSBlbnRpdGllcztcXG5cXHRcXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdFxcdHRoaXMuZW50aXRpZXMgPSBbZW50aXRpZXNdO1xcblxcdFxcdFxcdH1cXG5cXHRcXHR9XFxuXFxuXFx0XFx0dGhpcy5pc1JlYWR5ID0gdHJ1ZTtcXG5cXHRcXHR0aGlzLmFkZENsYXNzKCdSRUFEWScpO1xcblxcblxcdFxcdHRoaXMuX19yZWFkeSgpO1xcblxcdFxcdGludm9rZUxvY2FsLmNhbGwodGhpcywgJ3JlYWR5Jyk7XFxuXFxuXFx0XFx0dGhpcy50cmlnZ2VyKHJlYWR5RXZlbnQpO1xcblxcdH1cXG5cXG5cXHRBY3Rpb25hYmxlcyA9IChmdW5jdGlvbiAoKSB7XFxuXFxuXFx0XFx0X3V0aWwyWydkZWZhdWx0J10ubWl4aW4odGhpcywgX3R5cGVzQmFzaWMyWydkZWZhdWx0J10pO1xcblxcblxcdFxcdHRoaXMuYWRkID0gZnVuY3Rpb24gKF9ub2RlLCBfYWN0aW9uKSB7XFxuXFx0XFx0XFx0aWYgKCF0aGlzLmhhcyhfbm9kZSkpIHtcXG5cXHRcXHRcXHRcXHR0aGlzLnB1c2goe1xcblxcdFxcdFxcdFxcdFxcdG5vZGU6IF9ub2RlLFxcblxcdFxcdFxcdFxcdFxcdGFjdGlvbjogX2FjdGlvblxcblxcdFxcdFxcdFxcdH0pO1xcblxcdFxcdFxcdH1cXG5cXG5cXHRcXHRcXHRyZXR1cm4gdGhpcztcXG5cXHRcXHR9O1xcblxcblxcdFxcdHRoaXMucmVtb3ZlID0gZnVuY3Rpb24gKF9ub2RlKSB7XFxuXFx0XFx0XFx0dmFyIGl0ZW0sIGluZGV4O1xcblxcblxcdFxcdFxcdGl0ZW0gPSB0aGlzLml0ZW0oX25vZGUpO1xcblxcdFxcdFxcdGluZGV4ID0gdGhpcy5pbmRleE9mKGl0ZW0pO1xcblxcdFxcdFxcdGlmICh+aW5kZXgpIHRoaXMuc3BsaWNlKGluZGV4LCAxKTtcXG5cXG5cXHRcXHRcXHRyZXR1cm4gdGhpcztcXG5cXHRcXHR9O1xcblxcblxcdFxcdHRoaXMuaXRlbSA9IGZ1bmN0aW9uIChfbm9kZSkge1xcblxcdFxcdFxcdHZhciBpLCBpdGVtO1xcblxcblxcdFxcdFxcdGZvciAoaSA9IDA7IGl0ZW0gPSB0aGlzW2ldOyBpICs9IDEpIHtcXG5cXHRcXHRcXHRcXHRpZiAoaXRlbS5ub2RlID09PSBfbm9kZSkgcmV0dXJuIGl0ZW07XFxuXFx0XFx0XFx0fVxcblxcdFxcdH07XFxuXFxuXFx0XFx0dGhpcy5oYXMgPSBmdW5jdGlvbiAoX25vZGUpIHtcXG5cXHRcXHRcXHRyZXR1cm4gISF0aGlzLml0ZW0oX25vZGUpO1xcblxcdFxcdH07XFxuXFxuXFx0XFx0cmV0dXJuIHRoaXM7XFxuXFx0fSkuY2FsbChbXSk7XFxuXFxuXFx0dGhpcy5UUkFOU0NMVURFX1JFUExBQ0UgPSAncmVwbGFjZSc7XFxuXFx0dGhpcy5UUkFOU0NMVURFX1BSRVBFTkQgPSAncHJlcGVuZCc7XFxuXFx0dGhpcy5UUkFOU0NMVURFX0FQUEVORCA9ICdhcHBlbmQnO1xcblxcdHRoaXMuVFJBTlNDTFVERV9QTFVDSyA9ICdwbHVjayc7XFxuXFxuXFx0dGhpcy5iYXNlVHlwZSA9ICdUWVBFX1NDT1BFJztcXG5cXHR0aGlzLmFjdGlvbmFibGVzID0gbnVsbDtcXG5cXHR0aGlzLmlzUmVhZHkgPSBudWxsO1xcblxcdHRoaXMuaXNDb21wb25lbnQgPSBmYWxzZTtcXG5cXHR0aGlzLmVudGl0aWVzID0gbnVsbDtcXG5cXHR0aGlzLmF1ZGlvID0gbnVsbDtcXG5cXHR0aGlzLnByb3BlcnRpZXMgPSBudWxsO1xcblxcdHRoaXMucHJvcGVydHlIYW5kbGVycyA9IG51bGw7XFxuXFx0dGhpcy5hc3NldFF1ZXVlID0gbnVsbDtcXG5cXHR0aGlzLmV2ZW50ID0gbnVsbDtcXG5cXG5cXHR0aGlzLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoX25vZGVfc2VsZWN0b3IsIF9jb21wb25lbnROYW1lKSB7XFxuXFx0XFx0dmFyIHNjb3BlO1xcblxcblxcdFxcdHNjb3BlID0gdGhpcztcXG5cXG5cXHRcXHR0aGlzLmlzUmVhZHkgPSBmYWxzZTtcXG5cXHRcXHR0aGlzLmlzQ29tcG9uZW50ID0gISFfY29tcG9uZW50TmFtZTtcXG5cXHRcXHR0aGlzLmV2ZW50ID0gbnVsbDtcXG5cXHRcXHR0aGlzLmFzc2V0UXVldWUgPSBfdHlwZXNRdWV1ZTJbJ2RlZmF1bHQnXS5jcmVhdGUoKTtcXG5cXHRcXHR0aGlzLiRlbHMgPSBfbm9kZV9zZWxlY3Rvci5qcXVlcnkgPyBfbm9kZV9zZWxlY3RvciA6ICQoX25vZGVfc2VsZWN0b3IpO1xcblxcblxcdFxcdGlmICghdGhpcy4kZWxzLmxlbmd0aCkge1xcblxcdFxcdFxcdHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcignVW5hYmxlIHRvIGxvY2F0ZSB0aGUgZWxlbWVudCB3aXRoIHNlbGVjdG9yICcgKyB0aGlzLiRlbHMuc2VsZWN0b3IgKyAnLicpO1xcblxcdFxcdH1cXG5cXG5cXHRcXHR0aGlzLmFkZENsYXNzKCdwbC1zY29wZSAnICsgKF9jb21wb25lbnROYW1lID8gX2NvbXBvbmVudE5hbWUgKyAnLWNvbXBvbmVudCcgOiAnJykpO1xcblxcdFxcdHRoaXMuZGF0YSgncGwtc2NvcGUnLCB0aGlzKTtcXG5cXHRcXHR0aGlzLmRhdGEoJ3BsLWlzQ29tcG9uZW50JywgISFfY29tcG9uZW50TmFtZSk7XFxuXFxuXFx0XFx0Y2FwdHVyZVByb3BlcnRpZXMuY2FsbCh0aGlzKTtcXG5cXG5cXHRcXHRpZiAoX2NvbXBvbmVudE5hbWUpIHtcXG5cXHRcXHRcXHRsb2FkQ29tcG9uZW50QXNzZXRzLmNhbGwodGhpcywgX2NvbXBvbmVudE5hbWUsIGZ1bmN0aW9uICgpIHtcXG5cXHRcXHRcXHRcXHRpbml0LmNhbGwodGhpcyk7XFxuXFx0XFx0XFx0fSk7XFxuXFx0XFx0fSBlbHNlIHtcXG5cXHRcXHRcXHRpbml0LmNhbGwodGhpcyk7XFxuXFx0XFx0fVxcblxcblxcdFxcdHJldHVybiB0aGlzO1xcblxcdH07XFxuXFxuXFx0Ly8gb25seSBmb3IgdXNlIGluIGJhc2UgdHlwZXNcXG5cXHR0aGlzLl9faW5pdCA9IGZ1bmN0aW9uICgpIHtcXG5cXHRcXHRyZXR1cm4gdGhpcztcXG5cXHR9O1xcblxcdHRoaXMuX19yZWFkeSA9IGZ1bmN0aW9uICgpIHtcXG5cXHRcXHRyZXR1cm4gdGhpcztcXG5cXHR9O1xcblxcblxcdHRoaXMud2lsbEluaXQgPSBmdW5jdGlvbiAoKSB7XFxuXFx0XFx0cmV0dXJuIHRoaXM7XFxuXFx0fTtcXG5cXHR0aGlzLmluaXQgPSBmdW5jdGlvbiAoKSB7XFxuXFx0XFx0cmV0dXJuIHRoaXM7XFxuXFx0fTtcXG5cXHR0aGlzLnJlYWR5ID0gZnVuY3Rpb24gKCkge1xcblxcdFxcdHJldHVybiB0aGlzO1xcblxcdH07XFxuXFxuXFx0dGhpcy53YXRjaEFzc2V0cyA9IGZ1bmN0aW9uICgpIHtcXG5cXHRcXHR2YXIgc2NvcGUsIGFzc2V0VHlwZXM7XFxuXFxuXFx0XFx0ZnVuY3Rpb24gd2F0Y2goKSB7XFxuXFx0XFx0XFx0dmFyIGV2ZW50TWFwLCBpc05vZGVDb21wbGV0ZTtcXG5cXG5cXHRcXHRcXHRmdW5jdGlvbiBjcmVhdGVIYW5kbGVyKF9ub2RlKSB7XFxuXFx0XFx0XFx0XFx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcXG5cXHRcXHRcXHRcXHRcXHR2YXIgbG9hZGVkRXZlbnQ7XFxuXFxuXFx0XFx0XFx0XFx0XFx0bG9hZGVkRXZlbnQgPSAkLkV2ZW50KCdsb2FkZWQnLCB7IHRhcmdldFNjb3BlOiBzY29wZSB9KTtcXG5cXHRcXHRcXHRcXHRcXHRzY29wZS5hc3NldFF1ZXVlLnJlYWR5KF9ub2RlLnNyYyk7XFxuXFx0XFx0XFx0XFx0XFx0c2NvcGUudHJpZ2dlcihsb2FkZWRFdmVudCwgW19ub2RlXSk7XFxuXFx0XFx0XFx0XFx0fTtcXG5cXHRcXHRcXHR9XFxuXFxuXFx0XFx0XFx0ZXZlbnRNYXAgPSB7XFxuXFx0XFx0XFx0XFx0QVVESU86ICdvbmxvYWRlZGRhdGEnLFxcblxcdFxcdFxcdFxcdFZJREVPOiAnb25sb2FkZWRkYXRhJyxcXG5cXHRcXHRcXHRcXHRJTUc6ICdvbmxvYWQnXFxuXFx0XFx0XFx0fTtcXG5cXG5cXHRcXHRcXHRpc05vZGVDb21wbGV0ZSA9IHtcXG5cXHRcXHRcXHRcXHRBVURJTzogdGhpcy5yZWFkeVN0YXRlID09PSB0aGlzLkhBVkVfRU5PVUdIX0RBVEEsXFxuXFx0XFx0XFx0XFx0VklERU86IHRoaXMucmVhZHlTdGF0ZSA9PT0gdGhpcy5IQVZFX0VOT1VHSF9EQVRBLFxcblxcdFxcdFxcdFxcdElNRzogdGhpcy5jb21wbGV0ZVxcblxcdFxcdFxcdH07XFxuXFxuXFx0XFx0XFx0Ly8gY29uc29sZS5sb2coJ2ZvdW5kIGFzc2V0JywgdGhpcy5ub2RlTmFtZSk7XFxuXFxuXFx0XFx0XFx0aWYgKGlzTm9kZUNvbXBsZXRlW3RoaXMubm9kZU5hbWVdKSByZXR1cm47XFxuXFx0XFx0XFx0aWYgKHNjb3BlLmFzc2V0UXVldWUuYWRkKHRoaXMuc3JjKSkge1xcblxcdFxcdFxcdFxcdC8vIGNvbnNvbGUubG9nKCd3YXRjaCcsIHRoaXMubm9kZU5hbWUsIHRoaXMuc3JjLCBzY29wZS5pZCgpKTtcXG5cXHRcXHRcXHRcXHR0aGlzW2V2ZW50TWFwW3RoaXMubm9kZU5hbWVdXSA9IGNyZWF0ZUhhbmRsZXIodGhpcyk7XFxuXFx0XFx0XFx0XFx0dGhpcy5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xcblxcdFxcdFxcdFxcdFxcdGNvbnNvbGUuZXJyb3IoJ0ltYWdlIGZhaWxlZCB0byBsb2FkJywgdGhpcy5zcmMpO1xcblxcdFxcdFxcdFxcdH07XFxuXFx0XFx0XFx0fVxcblxcdFxcdH1cXG5cXG5cXHRcXHRzY29wZSA9IHRoaXM7XFxuXFx0XFx0YXNzZXRUeXBlcyA9IFsnSU1HJywgJ0FVRElPJywgJ1ZJREVPJ107XFxuXFxuXFx0XFx0dGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcXG5cXHRcXHRcXHRpZiAofmFzc2V0VHlwZXMuaW5kZXhPZih0aGlzLm5vZGVOYW1lKSkge1xcblxcdFxcdFxcdFxcdHdhdGNoLmNhbGwodGhpcyk7XFxuXFx0XFx0XFx0fVxcblxcdFxcdH0pO1xcblxcblxcdFxcdHRoaXMuZmluZE93bihhc3NldFR5cGVzLmpvaW4oJywnKSkuZWFjaChmdW5jdGlvbiAoKSB7XFxuXFx0XFx0XFx0d2F0Y2guY2FsbCh0aGlzKTtcXG5cXHRcXHR9KTtcXG5cXG5cXHRcXHRyZXR1cm4gdGhpcztcXG5cXHR9O1xcblxcblxcdHRoaXMuYXR0YWNoRXZlbnRzID0gZnVuY3Rpb24gKCkge1xcblxcdFxcdHZhciBzY29wZTtcXG5cXG5cXHRcXHR0aGlzLnByb3RvKCk7XFxuXFxuXFx0XFx0c2NvcGUgPSB0aGlzO1xcblxcblxcdFxcdC8vIGlmICh0aGlzLmlzKCcjYmVhcnMnKSkgZGVidWdnZXI7XFxuXFxuXFx0XFx0dGhpcy5hc3NldFF1ZXVlLm9uKCdjb21wbGV0ZScsIGZ1bmN0aW9uICgpIHtcXG5cXHRcXHRcXHRzY29wZS5hc3NldFF1ZXVlLm9mZigpO1xcblxcdFxcdFxcdHJlYWR5LmNhbGwoc2NvcGUpO1xcblxcdFxcdH0pO1xcblxcblxcdFxcdHRoaXMub24oJ3JlYWR5JywgZnVuY3Rpb24gKF9ldmVudCkge1xcblxcdFxcdFxcdC8vIGNvbnNvbGUubG9nKCcqIHJlYWR5OicsIHRoaXMuYWRkcmVzcygpLCAnLCB0YXJnZXQ6JywgX2V2ZW50LnRhcmdldFNjb3BlLmFkZHJlc3MoKSk7XFxuXFxuXFx0XFx0XFx0aWYgKHRoaXMuaGFzKF9ldmVudC50YXJnZXRTY29wZSkgJiYgdGhpcy5hc3NldFF1ZXVlLmhhcyhfZXZlbnQudGFyZ2V0U2NvcGUpKSB7XFxuXFx0XFx0XFx0XFx0Ly8gY29uc29sZS5sb2coJyoqIHVwZGF0ZSBxdWV1ZScsIF9ldmVudC50YXJnZXRTY29wZS5hZGRyZXNzKCksIHRoaXMuYXNzZXRRdWV1ZS5sZW5ndGgpO1xcblxcdFxcdFxcdFxcdHRoaXMuYXNzZXRRdWV1ZS5yZWFkeShfZXZlbnQudGFyZ2V0U2NvcGUpO1xcblxcdFxcdFxcdH1cXG5cXG5cXHRcXHRcXHRpZiAoIXRoaXMuYXNzZXRRdWV1ZS5sZW5ndGggJiYgdGhpcy5pc1JlYWR5KSB0aGlzLm9mZigncmVhZHknKTtcXG5cXHRcXHR9KTtcXG5cXG5cXHRcXHRyZXR1cm4gdGhpcztcXG5cXHR9O1xcblxcblxcdHRoaXMuY2FwdHVyZVJlZmVyZW5jZXMgPSBmdW5jdGlvbiAoKSB7XFxuXFx0XFx0dGhpcy5maW5kT3duKCdbaWRdLCBbcGwtaWRdJykuZWFjaCh0aGlzLmJpbmQoZnVuY3Rpb24gKF9pbmRleCwgX25vZGUpIHtcXG5cXHRcXHRcXHR2YXIgJG5vZGUsIGlkO1xcblxcblxcdFxcdFxcdGlmIChfbm9kZS5ub2RlTmFtZSA9PT0gJ0FVRElPJykgcmV0dXJuO1xcblxcblxcdFxcdFxcdCRub2RlID0gJChfbm9kZSk7XFxuXFx0XFx0XFx0aWQgPSAkbm9kZS5hdHRyKCdpZCcpIHx8ICRub2RlLmF0dHIoJ3BsLWlkJyk7XFxuXFxuXFx0XFx0XFx0aWYgKCF0aGlzW2lkXSkge1xcblxcdFxcdFxcdFxcdF91dGlsMlsnZGVmYXVsdCddLmFzc2lnblJlZih0aGlzLCBpZCwgJG5vZGUuZGF0YSgncGwtc2NvcGUnKSB8fCAkbm9kZSk7XFxuXFx0XFx0XFx0fVxcblxcdFxcdH0pKTtcXG5cXHR9O1xcblxcblxcdHRoaXMuY2FwdHVyZUF1ZGlvQXNzZXRzID0gZnVuY3Rpb24gKCkge1xcblxcdFxcdHZhciBzY29wZSwgc2NyZWVuO1xcblxcblxcdFxcdHNjb3BlID0gdGhpcztcXG5cXHRcXHRzY3JlZW4gPSB0eXBlb2Ygc2NvcGUuc2NyZWVuID09PSAnb2JqZWN0JyA/IHNjb3BlLnNjcmVlbiA6IHNjb3BlO1xcblxcblxcdFxcdHNjb3BlLmZpbmRPd24oJ2F1ZGlvJykuZWFjaChmdW5jdGlvbiAoKSB7XFxuXFx0XFx0XFx0dmFyICRub2RlLCBpZCwgYXVkaW9UeXBlcztcXG5cXG5cXHRcXHRcXHRpZiAoIXNjb3BlLmhhc093blByb3BlcnR5KCdhdWRpbycpKSB7XFxuXFx0XFx0XFx0XFx0c2NvcGUuYXVkaW8gPSB7XFxuXFx0XFx0XFx0XFx0XFx0YmFja2dyb3VuZDogbnVsbCxcXG5cXHRcXHRcXHRcXHRcXHR2b2ljZU92ZXI6IG51bGwsXFxuXFx0XFx0XFx0XFx0XFx0c2Z4OiBudWxsXFxuXFx0XFx0XFx0XFx0fTtcXG5cXHRcXHRcXHR9XFxuXFxuXFx0XFx0XFx0JG5vZGUgPSAkKHRoaXMpO1xcblxcdFxcdFxcdGlkID0gX3V0aWwyWydkZWZhdWx0J10udHJhbnNmb3JtSWQoJG5vZGUuaWQoKSwgdHJ1ZSk7XFxuXFx0XFx0XFx0YXVkaW9UeXBlcyA9IFsnYmFja2dyb3VuZCcsICd2b2ljZS1vdmVyJywgJ3NmeCddO1xcblxcblxcdFxcdFxcdGF1ZGlvVHlwZXMuZm9yRWFjaChmdW5jdGlvbiAoX3R5cGUpIHtcXG5cXHRcXHRcXHRcXHRpZiAoJG5vZGUuaGFzQ2xhc3MoX3R5cGUpKSB7XFxuXFx0XFx0XFx0XFx0XFx0JG5vZGUub24oJ3BsYXkgcGF1c2UgZW5kZWQnLCBmdW5jdGlvbiAoX2V2ZW50KSB7XFxuXFx0XFx0XFx0XFx0XFx0XFx0dmFyIHNjcmVlbjtcXG5cXG5cXHRcXHRcXHRcXHRcXHRcXHRzY3JlZW4gPSB0eXBlb2Ygc2NvcGUuc2NyZWVuID09PSAnb2JqZWN0JyA/IHNjb3BlLnNjcmVlbiA6IHNjb3BlO1xcblxcblxcdFxcdFxcdFxcdFxcdFxcdHN3aXRjaCAoX2V2ZW50LnR5cGUpIHtcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRjYXNlICdwbGF5JzpcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRzY3JlZW4uYWRkQ2xhc3MoJ1BMQVlJTkcgJyArIF90eXBlLnRvVXBwZXJDYXNlKCkpO1xcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdGJyZWFrO1xcblxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdGNhc2UgJ3BhdXNlJzpcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRjYXNlICdlbmRlZCc6XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0c2NyZWVuLnJlbW92ZUNsYXNzKCdQTEFZSU5HICcgKyBfdHlwZS50b1VwcGVyQ2FzZSgpKTtcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRicmVhaztcXG5cXHRcXHRcXHRcXHRcXHRcXHR9XFxuXFx0XFx0XFx0XFx0XFx0XFx0c2NvcGUudHJpZ2dlcigkLkV2ZW50KCdhdWRpby0nICsgX2V2ZW50LnR5cGUsIHtcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHR0YXJnZXQ6ICRub2RlWzBdLFxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdHRhcmdldFNjb3BlOiBzY29wZSxcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRhdWRpb1R5cGU6IF90eXBlXFxuXFx0XFx0XFx0XFx0XFx0XFx0fSkpO1xcblxcdFxcdFxcdFxcdFxcdH0pO1xcblxcblxcdFxcdFxcdFxcdFxcdGlmICgkbm9kZS5hdHRyKCdwbC1yZXF1aXJlZCcpICE9IG51bGwpIHtcXG5cXHRcXHRcXHRcXHRcXHRcXHRzY3JlZW4ucmVxdWlyZSgkbm9kZVswXSk7XFxuXFx0XFx0XFx0XFx0XFx0fVxcblxcblxcdFxcdFxcdFxcdFxcdC8vIFRoaXMgcHJvcGVydHkgY2FuIGJlIGVpdGhlciBhbiBhcnJheSBvZiBub2RlcyBvciB0aGUgbm9kZS5cXG5cXHRcXHRcXHRcXHRcXHRfdXRpbDJbJ2RlZmF1bHQnXS5hc3NpZ25SZWYoc2NvcGUuYXVkaW8sIF90eXBlLCAkbm9kZVswXSk7XFxuXFxuXFx0XFx0XFx0XFx0XFx0Ly8gTWFrZXMgc3VyZSB0aGUgcHJvcGVydHkgaXMgc2V0IG9uIHRoZSBmaW5hbCB2YWx1ZSBvZiBzY29wZS5hdWRpb1tfdHlwZV0uXFxuXFx0XFx0XFx0XFx0XFx0Ly8gVGhpcyBzaG91bGQgYmUgc2FmZSB0byBydW4gb3V0IG9mIHRoZSBjYWxsc3RhY2suXFxuXFx0XFx0XFx0XFx0XFx0c2V0VGltZW91dChmdW5jdGlvbiAoKSB7XFxuXFx0XFx0XFx0XFx0XFx0XFx0aWYgKGlkKSBfdXRpbDJbJ2RlZmF1bHQnXS5hc3NpZ25SZWYoc2NvcGUuYXVkaW9bX3V0aWwyWydkZWZhdWx0J10udHJhbnNmb3JtSWQoX3R5cGUsIHRydWUpXSwgaWQsICRub2RlWzBdKTtcXG5cXHRcXHRcXHRcXHRcXHR9KTtcXG5cXHRcXHRcXHRcXHR9XFxuXFx0XFx0XFx0fSk7XFxuXFx0XFx0fSk7XFxuXFxuXFx0XFx0cmV0dXJuIHNjb3BlO1xcblxcdH07XFxuXFxuXFx0dGhpcy5oYW5kbGVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChfaW1wbGVtZW50YXRpb24pIHtcXG5cXHRcXHRpZiAodGhpcy5wcm9wZXJ0eUhhbmRsZXJzKSB7XFxuXFx0XFx0XFx0aWYgKHRoaXMuaGFzT3duUHJvcGVydHkoJ3Byb3BlcnR5SGFuZGxlcnMnKSkge1xcblxcdFxcdFxcdFxcdHN3aXRjaCAodHlwZW9mIF9pbXBsZW1lbnRhdGlvbikge1xcblxcdFxcdFxcdFxcdFxcdGNhc2UgJ2Z1bmN0aW9uJzpcXG5cXHRcXHRcXHRcXHRcXHRcXHRfaW1wbGVtZW50YXRpb24uY2FsbCh0aGlzLnByb3BlcnR5SGFuZGxlcnMpO1xcblxcdFxcdFxcdFxcdFxcdFxcdGJyZWFrO1xcblxcblxcdFxcdFxcdFxcdFxcdGNhc2UgJ29iamVjdCc6XFxuXFx0XFx0XFx0XFx0XFx0XFx0dGhpcy5wcm9wZXJ0eUhhbmRsZXJzLm1peGluKF9pbXBsZW1lbnRhdGlvbik7XFxuXFx0XFx0XFx0XFx0XFx0XFx0YnJlYWs7XFxuXFx0XFx0XFx0XFx0fVxcblxcdFxcdFxcdH0gZWxzZSB7XFxuXFx0XFx0XFx0XFx0dGhpcy5wcm9wZXJ0eUhhbmRsZXJzID0gdGhpcy5wcm9wZXJ0eUhhbmRsZXJzLmV4dGVuZChfaW1wbGVtZW50YXRpb24pO1xcblxcdFxcdFxcdH1cXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdHRoaXMucHJvcGVydHlIYW5kbGVycyA9IF90eXBlc0Jhc2ljMlsnZGVmYXVsdCddLmV4dGVuZChfaW1wbGVtZW50YXRpb24pO1xcblxcdFxcdH1cXG5cXG5cXHRcXHRyZXR1cm4gdGhpcztcXG5cXHR9O1xcblxcblxcdHRoaXMuZW50aXR5ID0gZnVuY3Rpb24gKF9zZWxlY3RvciwgX2ltcGxlbWVudGF0aW9uKSB7XFxuXFx0XFx0dmFyIEVudGl0eSwgcHJvdG90eXBlLCBpZDtcXG5cXG5cXHRcXHRFbnRpdHkgPSBfcGxheUdhbWUyWydkZWZhdWx0J10ucHJvdmlkZUVudGl0eVR5cGUoKTtcXG5cXG5cXHRcXHRpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoJ2VudGl0aWVzJykpIHRoaXMuZW50aXRpZXMgPSBbXTtcXG5cXG5cXHRcXHRpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eSgnJGVscycpKSB7XFxuXFx0XFx0XFx0dGhyb3cgbmV3IEVycm9yKCdXYWl0IHRoaXMgaGFzblxcXFwndCBiZWVuIHRlc3RlZC4nKTtcXG5cXHRcXHRcXHRwcm90b3R5cGUgPSBFbnRpdHkuaXNQcm90b3R5cGVPZih0aGlzKSA/IHRoaXMgOiBFbnRpdHk7XFxuXFx0XFx0XFx0aW5zdGFuY2UgPSBwcm90b3R5cGUuZXh0ZW5kKF9pbXBsZW1lbnRhdGlvbikuaW5pdGlhbGl6ZSh0aGlzLmZpbmQoX3NlbGVjdG9yKSk7XFxuXFx0XFx0XFx0aWQgPSBfdXRpbDJbJ2RlZmF1bHQnXS50cmFuc2Zvcm1JZChpbnN0YW5jZS5pZCgpKTtcXG5cXG5cXHRcXHRcXHQvLyB0aGlzLmVudGl0aWVzLnB1c2goaW5zdGFuY2UpO1xcblxcdFxcdFxcdGlmIChpZCkgdGhpc1tpZF0gPSBpbnN0YW5jZTtcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdHRoaXMuZW50aXRpZXMucHVzaCh7XFxuXFx0XFx0XFx0XFx0c2VsZWN0b3I6IF9zZWxlY3RvcixcXG5cXHRcXHRcXHRcXHRpbXBsZW1lbnRhdGlvbjogX2ltcGxlbWVudGF0aW9uXFxuXFx0XFx0XFx0fSk7XFxuXFx0XFx0fVxcblxcblxcdFxcdHJldHVybiB0aGlzO1xcblxcdH07XFxuXFxuXFx0dGhpcy5oYXMgPSBmdW5jdGlvbiAoX2NoaWxkKSB7XFxuXFx0XFx0dmFyIGNoaWxkO1xcblxcblxcdFxcdGNoaWxkID0gU2NvcGUuaXNQcm90b3R5cGVPZihfY2hpbGQpID8gX2NoaWxkLiRlbHMgOiBfY2hpbGQ7XFxuXFxuXFx0XFx0cmV0dXJuICEhdGhpcy4kZWxzLmhhcyhjaGlsZCkubGVuZ3RoO1xcblxcdH07XFxuXFxuXFx0dGhpcy50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcXG5cXHRcXHR2YXIgdHlwZTtcXG5cXG5cXHRcXHR0eXBlID0gdGhpcy5iYXNlVHlwZS5yZXBsYWNlKCdUWVBFXycsICcnKTtcXG5cXHRcXHR0eXBlID0gdHlwZS5zbGljZSgwLCAxKSArIHR5cGUuc2xpY2UoMSkudG9Mb3dlckNhc2UoKTtcXG5cXG5cXHRcXHRyZXR1cm4gWydbJywgdGhpcy5pZCgpIHx8IHRoaXMuYWRkcmVzcygpLCAnICcsIHR5cGUsICddJ10uam9pbignJyk7XFxuXFx0fTtcXG5cXG5cXHR0aGlzLmxvZyA9IGZ1bmN0aW9uICgpIHtcXG5cXHRcXHR2YXIgYXJncztcXG5cXG5cXHRcXHRhcmdzID0gX3V0aWwyWydkZWZhdWx0J10udG9BcnJheShhcmd1bWVudHMpO1xcblxcblxcdFxcdGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIFt0aGlzLmlkKCkgfHwgdGhpcy5hZGRyZXNzKCksICctJ10uY29uY2F0KGFyZ3MpKTtcXG5cXHRcXHRyZXR1cm4gdGhpcztcXG5cXHR9O1xcblxcblxcdHRoaXMuaGFuZGxlUHJvcGVydHkoZnVuY3Rpb24gKCkge1xcblxcblxcdFxcdHRoaXMuY29tcG9uZW50ID0gZnVuY3Rpb24gKF9ub2RlLCBfbmFtZSwgX3ZhbHVlLCBfcHJvcGVydHkpIHtcXG5cXHRcXHRcXHR2YXIgJG5vZGUsIHJlY29yZCwgc2NvcGUsIGlkO1xcblxcblxcdFxcdFxcdCRub2RlID0gJChfbm9kZSk7XFxuXFxuXFx0XFx0XFx0aWYgKCEkbm9kZS5kYXRhKCdwbC1pc0NvbXBvbmVudCcpKSB7XFxuXFx0XFx0XFx0XFx0cmVjb3JkID0gX3BsYXlHYW1lMlsnZGVmYXVsdCddLmNvbXBvbmVudC5nZXQoX3ZhbHVlKTtcXG5cXG5cXHRcXHRcXHRcXHRpZiAocmVjb3JkKSB7XFxuXFx0XFx0XFx0XFx0XFx0c2NvcGUgPSBjcmVhdGVFbnRpdHkuY2FsbCh0aGlzLCAkbm9kZSwgcmVjb3JkLmltcGxlbWVudGF0aW9uKTtcXG5cXHRcXHRcXHRcXHRcXHRpZCA9IF91dGlsMlsnZGVmYXVsdCddLnRyYW5zZm9ybUlkKHNjb3BlLmlkKCkgfHwgX3ZhbHVlLCB0cnVlKTtcXG5cXHRcXHRcXHRcXHRcXHRfdXRpbDJbJ2RlZmF1bHQnXS5hc3NpZ25SZWYodGhpcywgaWQsIHNjb3BlKTtcXG5cXG5cXHRcXHRcXHRcXHRcXHRpZiAoIXNjb3BlLmlzUmVhZHkpIHRoaXMuYXNzZXRRdWV1ZS5hZGQoc2NvcGUpO1xcblxcdFxcdFxcdFxcdH0gZWxzZSB7XFxuXFx0XFx0XFx0XFx0XFx0dGhyb3cgbmV3IEVycm9yKCdBaGghJyk7XFxuXFx0XFx0XFx0XFx0fVxcblxcdFxcdFxcdH1cXG5cXHRcXHR9O1xcblxcblxcdFxcdHRoaXMuYWN0aW9uID0gZnVuY3Rpb24gKF9ub2RlLCBfbmFtZSwgX3ZhbHVlKSB7XFxuXFx0XFx0XFx0aWYgKCF0aGlzLmhhc093blByb3BlcnR5KCdhY3Rpb25hYmxlcycpKSB7XFxuXFx0XFx0XFx0XFx0dGhpcy5hY3Rpb25hYmxlcyA9IEFjdGlvbmFibGVzLmNyZWF0ZSgpO1xcblxcdFxcdFxcdFxcdGF0dGFjaEFjdGlvbkhhbmRsZXIuY2FsbCh0aGlzKTtcXG5cXHRcXHRcXHR9XFxuXFxuXFx0XFx0XFx0dGhpcy5hY3Rpb25hYmxlcy5hZGQoX25vZGUsIF92YWx1ZSk7XFxuXFx0XFx0fTtcXG5cXG5cXHRcXHR0aGlzLnJlcXVpcmVkID0gZnVuY3Rpb24gKF9ub2RlLCBfbmFtZSwgX3ZhbHVlKSB7XFxuXFx0XFx0XFx0aWYgKHRoaXMuaXMoX25vZGUpKSB7XFxuXFx0XFx0XFx0XFx0dGhpcy5zY3JlZW4ucmVxdWlyZSh0aGlzKTtcXG5cXHRcXHRcXHR9XFxuXFx0XFx0fTtcXG5cXG5cXHRcXHR0aGlzLnJlcXVpcmUgPSBmdW5jdGlvbiAoX25vZGUsIF9uYW1lLCBfdmFsdWUpIHtcXG5cXHRcXHRcXHR2YXIgcXVlcnksICRub2RlO1xcblxcblxcdFxcdFxcdC8vIGlmIHRoZSBub2RlIHdpdGggdGhlIGF0dHJpYnV0ZSBpcyB0aGUgbm9kZSBmb3IgdGhpcyBzY29wZVxcblxcdFxcdFxcdGlmICh0aGlzLmlzKF9ub2RlKSkge1xcblxcdFxcdFxcdFxcdHF1ZXJ5ID0gJyNfdmFsdWUsIFtwbC1pZD1fdmFsdWVdLCBbcGwtY29tcG9uZW50PV92YWx1ZV0nLnJlcGxhY2UoL192YWx1ZS9nLCBfdmFsdWUpO1xcblxcdFxcdFxcdFxcdCRub2RlID0gdGhpcy5maW5kKHF1ZXJ5KTtcXG5cXG5cXHRcXHRcXHRcXHRpZiAoJG5vZGUuaXMoJ2F1ZGlvLCB2aWRlbycpKSB7XFxuXFx0XFx0XFx0XFx0XFx0JG5vZGUuZWFjaCh0aGlzLmJpbmQoZnVuY3Rpb24gKF9pbmRleCwgX25vZGUpIHtcXG5cXHRcXHRcXHRcXHRcXHRcXHR0aGlzLnJlcXVpcmUoX25vZGUpO1xcblxcdFxcdFxcdFxcdFxcdH0pKTtcXG5cXHRcXHRcXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdFxcdFxcdCRub2RlLm9uKCdyZWFkeScsIHRoaXMuYmluZChmdW5jdGlvbiAoX2V2ZW50KSB7XFxuXFx0XFx0XFx0XFx0XFx0XFx0aWYgKCRub2RlLmlzKF9ldmVudC50YXJnZXQpKSB7XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0dGhpcy5yZXF1aXJlKF9ldmVudC50YXJnZXRTY29wZSk7XFxuXFx0XFx0XFx0XFx0XFx0XFx0fVxcblxcdFxcdFxcdFxcdFxcdH0pKTtcXG5cXHRcXHRcXHRcXHR9XFxuXFx0XFx0XFx0fVxcblxcdFxcdH07XFxuXFx0fSk7XFxufSk7XFxuXFxuZXhwb3J0c1snZGVmYXVsdCddID0geyBTY29wZTogU2NvcGUsIGNyZWF0ZUVudGl0eTogY3JlYXRlRW50aXR5IH07XFxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Ly9AIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTl6YjNWeVkyVXZkSGx3WlhNdlUyTnZjR1V1YW5NL1lXTTJZU0pkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096czdPenM3T3pzN096czdkME5CWTI5Q0xFVkJRV1U3T3pzN2MwTkJRMnBDTEVWQlFXRTdPenM3YzBOQlEySXNSVUZCWVRzN096c3lRMEZEVkN4RFFVRnJRanM3YjBOQlEzWkNMRVZCUVZjN096czdaME5CUTFnc1JVRkJUVHM3T3p0elEwRkRRU3hGUVVGWk96czdPenM3T3pzN096czdPenRCUVZsdVF5eFRRVUZUTEZsQlFWa3NRMEZCUlN4TlFVRk5MRVZCUVVVc1pVRkJaU3hGUVVGRk8wRkJReTlETEV0QlFVa3NVMEZCVXl4RlFVRkZMRk5CUVZNc1JVRkJSU3hsUVVGbExFVkJRVVVzVVVGQlVTeERRVUZET3p0QlFVVndSQ3hWUVVGVExFZEJRVWNzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJRenRCUVVONFF5eFZRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkRPenRCUVVWcVFpeExRVUZKTEZOQlFWTXNSVUZCUlR0QlFVTmtMR2xDUVVGbExFZEJRVWNzYzBKQlFVc3NVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6czdRVUZGYUVRc1RVRkJTU3hsUVVGbExFVkJRVVU3UVVGRGNFSXNXVUZCVXl4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zWlVGQlpTeERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRPMGRCUTNoRUxFMUJSVWs3UVVGRFNpeFRRVUZOTEVsQlFVa3NTMEZCU3l4RFFVRkRMRzFEUVVGdFF5eEhRVUZETEZOQlFWTXNSMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJRenRIUVVNMVJUdEZRVU5FT3p0QlFVVkVMRk5CUVZFc1IwRkJSeXhQUVVGUExHVkJRV1VzUzBGQlN5eFZRVUZWTEVkQlFVY3NVMEZCVXl4RFFVRkRMRTFCUVUwc1EwRkJReXhsUVVGbExFTkJRVU1zUjBGQlJ5eFRRVUZUTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNN08wRkJSVEZITEZGQlFVOHNVVUZCVVN4RFFVRkRMRlZCUVZVc1EwRkJReXhOUVVGTkxFVkJRVVVzVTBGQlV5eERRVUZETEVOQlFVTTdRMEZET1VNN096czdPenM3TzBGQlVVUXNTVUZCU1N4TFFVRkxMRWRCUVVjc01FSkJRVkVzVFVGQlRTeERRVUZETEZsQlFWazdPenM3T3pzN096dEJRVk4wUXl4TFFVRkpMRmRCUVZjc1EwRkJRenM3UVVGRmFFSXNWVUZCVXl4dFFrRkJiVUlzUjBGQlNUdEJRVU12UWl4TlFVRkpMRTFCUVUwc1EwRkJRenM3UVVGRldDeFJRVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRPenRCUVVWa0xFMUJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExFVkJRVVVzVlVGQlZTeE5RVUZOTEVWQlFVVTdRVUZEZWtNc1QwRkJTU3hOUVVGTkxFVkJRVVVzVFVGQlRTeERRVUZET3p0QlFVVnVRaXhUUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN08wRkJSWEJFTEZOQlFVMHNRMEZCUXl4TlFVRk5MRWRCUVVjc2RVSkJRVTBzVFVGQlRTeEZRVUZGTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhQUVVGUExFVkJRVVVzVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPenRCUVVWdVJTeFBRVUZKTEUxQlFVMHNSVUZCUlR0QlFVTllMRlZCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenM3UVVGRmVrTXNVVUZCU1N4TlFVRk5MRVZCUVVVN1FVRkRXQ3hYUVVGTkxFTkJRVU1zVjBGQlZ5eEhRVUZITEUxQlFVMHNRMEZCUXp0QlFVTTFRaXhYUVVGTkxFTkJRVU1zUzBGQlN5eEhRVUZITEUxQlFVMHNRMEZCUXp0QlFVTjBRaXcyUWtGQlZ5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRE8wRkJRMnhETEZkQlFVMHNRMEZCUXl4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRE8wdEJRM0JDTzBsQlEwUTdSMEZEUkN4RFFVRkRMRU5CUVVNN1JVRkRTRHM3UVVGRlJDeFZRVUZUTEZkQlFWY3NRMEZCUlN4SlFVRkpMRVZCUVVVc1QwRkJUeXhGUVVGRkxGZEJRVmNzUlVGQlJUdEJRVU5xUkN4TlFVRkpMRU5CUVVNc1JVRkJSU3hOUVVGTkxFTkJRVU03TzBGQlJXUXNUVUZCU1N4WFFVRlhMRVZCUVVVN1FVRkRhRUlzVVVGQlN5eERRVUZETEVkQlFVTXNRMEZCUXl4RlFVRkZMRTFCUVUwc1IwRkJSeXhYUVVGWExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4SlFVRkZMRU5CUVVNc1JVRkJSVHRCUVVONFF5eFJRVUZKTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhQUVVGUExFVkJRVVVzVDBGQlR5eE5RVUZOTEVOQlFVTTdTVUZETlVNN1IwRkRSRHM3UVVGRlJDeFRRVUZQTEVsQlFVa3NRMEZCUXp0RlFVTmFPenRCUVVWRUxGVkJRVk1zV1VGQldTeERRVUZGTEU5QlFVOHNSVUZCUlN4WFFVRlhMRVZCUVVVN1FVRkROVU1zVFVGQlNTeExRVUZMTEVOQlFVTTdPMEZCUlZZc1QwRkJTeXhIUVVGSExGZEJRVmNzUTBGQlF5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1FVRkRja01zVFVGQlNTeERRVUZETEV0QlFVc3NSVUZCUlN4WFFVRlhMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0RlFVTjZRenM3UVVGRlJDeFZRVUZUTEdkQ1FVRm5RaXhEUVVGRkxFMUJRVTBzUlVGQlJUdEJRVU5zUXl4TlFVRkpMRlZCUVZVc1EwRkJRenM3UVVGRlppeFpRVUZWTEVkQlFVY3NSVUZCUlN4RFFVRkRPenRCUVVWb1FpeFJRVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eFpRVUZaTzBGQlF6VkRMRTlCUVVrc1NVRkJTU3hEUVVGRE96dEJRVVZVTEU5QlFVa3NSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPenRCUVVWb1F5eGhRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRM1JDTEdGQlFWVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU03UjBGRGVFSXNRMEZCUXl4RFFVRkRPenRCUVVWSUxGTkJRVThzVlVGQlZTeERRVUZETzBWQlEyeENPenRCUVVWRUxGVkJRVk1zV1VGQldTeERRVUZGTEZWQlFWVXNSVUZCUlN4VFFVRlRMRVZCUVVVN1FVRkROME1zUjBGQlF5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNXVUZCV1R0QlFVTXZReXhQUVVGSkxFdEJRVXNzUlVGQlJTeEpRVUZKTEVWQlFVVXNVVUZCVVN4RFFVRkRPenRCUVVVeFFpeFJRVUZMTEVkQlFVY3NRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRMmhDTEU5QlFVa3NSMEZCUnl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzBGQlF6ZENMRmRCUVZFc1IwRkJSeXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdPMEZCUlRWQ0xFOUJRVWtzVVVGQlVTeEZRVUZGTzBGQlEySXNVMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJReXhSUVVGUkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdTVUZEY2tNN1IwRkRSQ3hEUVVGRExFTkJRVU03UlVGRFNEczdPMEZCUjBRc1ZVRkJVeXh0UWtGQmJVSXNRMEZCUlN4TFFVRkxMRVZCUVVVc1UwRkJVeXhGUVVGRk8wRkJReTlETEUxQlFVa3NTMEZCU3l4RlFVRkZMRWxCUVVrc1JVRkJSU3hoUVVGaExFVkJRVVVzWTBGQll5eEZRVUZGTEZOQlFWTXNRMEZCUXpzN1FVRkZNVVFzVjBGQlV5eExRVUZMTEVkQlFVazdRVUZEYWtJc1VVRkJTeXhEUVVGRExFMUJRVTBzU1VGQlJ5eERRVUZETEVOQlFVTTdPMEZCUldwQ0xFOUJRVWtzUzBGQlN5eERRVUZETEUxQlFVMHNTMEZCU3l4aFFVRmhMRVZCUVVVN1FVRkRia01zVVVGQlNTeFRRVUZUTEVWQlFVVTdRVUZEWkN4alFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXp0TFFVTTNRanRKUVVORU8wZEJRMFE3TzBGQlJVUXNaVUZCWVN4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVOc1FpeFBRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRPMEZCUTJJc1RVRkJTU3hIUVVGSExITkNRVUZMTEUxQlFVMHNRMEZCUXl4dlFrRkJiMElzUTBGQlF5eEhRVUZETEV0QlFVc3NSMEZCUXl4SFFVRkhMRU5CUVVNN1FVRkRia1FzVjBGQlV5eEhRVUZITEdkQ1FVRm5RaXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEyNURMR2RDUVVGakxFZEJRVWNzVTBGQlV5eERRVUZETEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVkQlFVY3NTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhWUVVGVkxFTkJRVU03UVVGRGRrWXNUMEZCU3l4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU03TzBGQlJXcENMRTFCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNUVUZCVFN4SlFVRkpMR05CUVdNc1JVRkJSVHRCUVVNNVF5eG5Ra0ZCWVN4SlFVRkZMRU5CUVVNc1EwRkJRenRCUVVOcVFpeEpRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlF5eGxRVUZsTEVWQlFVVXNXVUZCV1R0QlFVTnFSQ3hSUVVGSkxFMUJRVTBzUTBGQlF6czdRVUZGV0N4VlFVRk5MRWRCUVVjc1JVRkJSU3hEUVVGRE96dEJRVVZhTEZsQlFWRXNZMEZCWXp0QlFVTnlRaXhWUVVGTExFdEJRVXNzUTBGQlF5eHBRa0ZCYVVJN1FVRkRNMElzVjBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03UVVGRE5VSXNXVUZCVFRzN1FVRkZVQ3hWUVVGTExFdEJRVXNzUTBGQlF5eHJRa0ZCYTBJN1FVRkROVUlzVjBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03UVVGRE4wSXNXVUZCVFRzN1FVRkZVQ3hWUVVGTExFdEJRVXNzUTBGQlF5eG5Ra0ZCWjBJN1FVRkRNVUlzYTBKQlFWa3NRMEZCUXl4VFFVRlRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRE9VSXNWMEZCU3l4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1FVRkRjRU1zV1VGQlRUczdRVUZGVUN4VlFVRkxMRXRCUVVzc1EwRkJReXhyUWtGQmEwSTdRVUZETlVJc1YwRkJTeXhEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03UVVGRGNFTXNXVUZCVFRzN1FVRkZVRHRCUVVORExGVkJRVWtzWTBGQll5eEZRVUZGTzBGQlEyNUNMRzFDUVVGWkxFTkJRVU1zU1VGQlN5eFpRVUZaTzBGQlF6ZENMRmxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zUjBGQlJ5eExRVUZMTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNN1VVRkRjRU1zUlVGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMEZCUTFZc1dVRkJTeXhEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03VDBGRGNFTXNUVUZGU1R0QlFVTktMRmxCUVVzc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wOUJRM0JET3p0QlFVRkJMRXRCUlVZN08wRkJSVVFzVTBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4WlFVRlpPMEZCUTJoRUxGTkJRVWtzU1VGQlNTeERRVUZET3p0QlFVVlVMRk5CUVVrc1IwRkJSeXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRE96dEJRVVZ3UXl4VFFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4UFFVRlBPenRCUVVWc1F5eFhRVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE96dEJRVVZzUWl4clFrRkJZU3hKUVVGRkxFTkJRVU1zUTBGQlF6czdRVUZGYWtJc01rSkJRVXNzVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1dVRkJXVHRCUVVOeVF5eFhRVUZMTEVWQlFVVXNRMEZCUXp0TlFVTlNMRU5CUVVNc1EwRkJRenRMUVVOSUxFTkJRVU1zUTBGQlF6dEJRVU5JTEZOQlFVc3NSVUZCUlN4RFFVRkRPMGxCUTFJc1EwRkJReXhEUVVGRE8wZEJRMGc3TzBGQlJVUXNUVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXd3UWtGQk1FSXNSMEZCUXl4TFFVRkxMRWRCUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zVFVGQlRTeEpRVUZKTEhOQ1FVRkxMRTFCUVUwc1EwRkJReXd5UWtGQk1rSXNRMEZCUXl4TFFVRkxMRXRCUVVzc1JVRkJSVHRCUVVNelJ5eG5Ra0ZCWVN4SlFVRkZMRU5CUVVNc1EwRkJRenRCUVVOcVFpeEpRVUZETEVOQlFVTXNNa05CUVRKRExFZEJRVU1zUzBGQlN5eEhRVUZETEVsQlFVa3NRMEZCUXl4RFFVTjJSQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZETEZkQlFWY3NSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkROMElzVVVGQlVTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRIUVVNeFFqczdRVUZGUkN4TlFVRkpMRU5CUVVNc1lVRkJZU3hGUVVGRkxGTkJRVk1zU1VGQlNTeFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6czdRVUZGTjBRc1UwRkJUeXhKUVVGSkxFTkJRVU03UlVGRFdqczdRVUZGUkN4VlFVRlRMR2xDUVVGcFFpeEhRVUZKTzBGQlF6ZENMRTFCUVVrc1EwRkJReXhGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNWVUZCVlN4RFFVRkRPenRCUVVVNVFpeFpRVUZWTEVkQlFVY3NRMEZCUXl4WlFVRlpPenRCUVVWNlFpeFBRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhMRlZCUVZVc1MwRkJTeXhGUVVGRk8wRkJRek5DTEZkQlFVOHNRMEZCUXl4RlFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0SlFVTTVRaXhEUVVGRE96dEJRVVZHTEZWQlFVOHNTVUZCU1N4RFFVRkRPMGRCUlZvc1JVRkJSU3hKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdPMEZCUlZvc1QwRkJTeXhEUVVGRExFZEJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFbEJRVVVzUTBGQlF5eEZRVUZGT3p0QlFVVnNSQ3hQUVVGSkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJUdEJRVU51UXl4UlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRNVUlzWTBGQlZTeERRVUZETEd0Q1FVRkxMRmRCUVZjc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRE96dEJRVVYwUkN4alFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBsQlEzUkNPMGRCUTBRN08wRkJSVVFzVFVGQlNTeFZRVUZWTEVOQlFVTXNUVUZCVFN4RlFVRkZMRWxCUVVrc1EwRkJReXhWUVVGVkxFZEJRVWNzVlVGQlZTeERRVUZET3p0QlFVVndSQ3hUUVVGUExFbEJRVWtzUTBGQlF6dEZRVU5hT3p0QlFVVkVMRlZCUVZNc2EwSkJRV3RDTEVkQlFVazdRVUZET1VJc1RVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNWVUZCVlN4RFFVRkRMRVZCUVVVc1QwRkJUeXhKUVVGSkxFTkJRVU03TzBGQlJXeEVMRTFCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hQUVVGUExFVkJRVVVzVFVGQlRTeEZRVUZGTzBGQlF6RkVMRTlCUVVrc1MwRkJTeXhGUVVGRkxGRkJRVkVzUlVGQlJTeEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1EwRkJRenM3UVVGRmRFTXNVVUZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMEZCUTNaRExGRkJRVXNzUjBGQlJ5eERRVUZETEVkQlFVY3NSMEZCUXl4UFFVRlBMRU5CUVVNc1VVRkJVU3hGUVVGRkxGTkJRVk1zUjBGQlF5eFBRVUZQTEVOQlFVTXNVVUZCVVN4SFFVRkRMRWRCUVVjc1JVRkJSU3huUWtGQlowSXNSMEZCUXl4UFFVRlBMRU5CUVVNc1VVRkJVU3hIUVVGRExFZEJRVWNzUlVGQlJTeE5RVUZOTEVkQlFVTXNUMEZCVHl4RFFVRkRMRkZCUVZFc1IwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU51U1N4UlFVRkxMRWRCUVVjc1EwRkJReXhEUVVGRE96dEJRVVZXTEZWQlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hGUVVGRk8wRkJRM0pDTEZGQlFVa3NTMEZCU3l4TFFVRkxMRXRCUVVzc1EwRkJReXhOUVVGTkxFVkJRVVU3UVVGRE0wSXNWMEZCVFN4SlFVRkpMRXRCUVVzc1EwRkJReXgxUTBGQmRVTXNSVUZCUlN4UFFVRlBMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03UzBGRE0wVTdRVUZEUkN4VFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOdVF5eFRRVUZMTEVsQlFVVXNRMEZCUXl4RFFVRkRPMGxCUTFRN08wRkJSVVFzVDBGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4aFFVRmhMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRVVU3UVVGRGJFTXNXVUZCVVN4SFFVRkhMRmxCUVZrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEV0QlFVc3NSVUZCUlN4UFFVRlBMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU03TzBGQlJXeEZMRkZCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zVDBGQlR5eEZRVUZGTzBGQlEzUkNMRk5CUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUjBGQlJ5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMHRCUXpsQ08wbEJSVVFzVFVGRlNUdEJRVU5LTEZsQlFWRXNSMEZCUnl4UFFVRlBMRU5CUVVNN1NVRkRia0k3TzBGQlJVUXNTMEZCUlN4SFFVRkhMR3RDUVVGTExGZEJRVmNzUTBGQlF5eFJRVUZSTEVOQlFVTXNSVUZCUlN4RlFVRkZMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRE0wTXNUMEZCU1N4RlFVRkZMRVZCUVVVc2EwSkJRVXNzVTBGQlV5eERRVUZETEVsQlFVa3NSVUZCUlN4RlFVRkZMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU03UjBGRE0wTXNRMEZCUXl4RFFVRkRMRU5CUVVNN08wRkJSVW9zVTBGQlR5eEpRVUZKTEVOQlFVTTdSVUZEV2pzN1FVRkZSQ3hWUVVGVExHZENRVUZuUWl4SFFVRkpPMEZCUXpWQ0xFMUJRVWtzUzBGQlN5eEZRVUZGTEZGQlFWRXNSVUZCUlN4UFFVRlBMRU5CUVVNN08wRkJSVGRDTEU5QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNN08wRkJSV0lzVFVGQlNTeEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRmxCUVZrc1EwRkJReXhGUVVGRk8wRkJRM1JETEU5QlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVlVzUzBGQlN5eEZRVUZGTzBGQlEzaERMRmRCUVU4c1IwRkJSeXhMUVVGTExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGRGVFTXNVVUZCU1N4UFFVRlBMRVZCUVVVc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEyaEdMRU5CUVVNc1EwRkJRenRIUVVOSU96dEJRVVZFTEUxQlFVa3NTVUZCU1N4RFFVRkRMR2RDUVVGblFpeEZRVUZGTzBGQlF6RkNMRkZCUVVzc1VVRkJVU3hKUVVGSkxFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSVHM3UVVGRmRrTXNVVUZCU1N4M1FrRkJUU3hqUVVGakxFTkJRVU1zVVVGQlVTeERRVUZETEVWQlFVVXNVMEZCVXpzN1FVRkZOME1zVjBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXpzN1FVRkZNVU1zVVVGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVNc1VVRkJVU3hIUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4WlFVRlpPMEZCUXk5RExGTkJRVWtzU1VGQlNTeERRVUZET3p0QlFVVlVMRk5CUVVrc1MwRkJTeXhMUVVGTExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1JVRkJSVHRCUVVNNVFpeFZRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhaUVVGWkxFTkJRVU1zUzBGQlN5eEhRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPenRCUVVWd1JDeFZRVUZKTEU5QlFVOHNSVUZCUlN4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJTeEpRVUZKTEVWQlFVVXNVVUZCVVN4RlFVRkZMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dE5RVU0zUkR0TFFVTkVMRU5CUVVNc1EwRkJRenRKUVVOSU8wZEJRMFE3TzBGQlJVUXNVMEZCVHl4SlFVRkpMRU5CUVVNN1JVRkRXanM3UVVGRlJDeFZRVUZUTEZkQlFWY3NRMEZCUlN4TFFVRkxMRVZCUVVVN1FVRkROVUlzVFVGQlNTeEpRVUZKTEVWQlFVVXNTMEZCU3l4RFFVRkRPenRCUVVWb1FpeE5RVUZKTEVkQlFVY3NSVUZCUlN4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPenRCUVVWdVF5eE5RVUZKTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRVVU3UVVGRE4wSXNWVUZCVHl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NSVUZCUlN4VFFVRlRMRU5CUVVNc1EwRkJRenRIUVVNeFF6dEZRVU5FT3p0QlFVVkVMRlZCUVZNc1NVRkJTU3hIUVVGSk8wRkJRMmhDTEdGQlFWY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRkxGVkJRVlVzUTBGQlF5eERRVUZET3p0QlFVVnVReXhOUVVGSkxFTkJRVU1zV1VGQldTeEZRVUZGTEVOQlFVTTdPMEZCUlhCQ0xHOUNRVUZyUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU01UWl4clFrRkJaMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN08wRkJSVFZDTEUxQlFVa3NRMEZCUXl4WFFVRlhMRVZCUVVVc1EwRkJRenRCUVVOdVFpeE5RVUZKTEVOQlFVTXNhMEpCUVd0Q0xFVkJRVVVzUTBGQlF6dEJRVU14UWl4TlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVWQlFVVXNRMEZCUXpzN1FVRkZla0lzVFVGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRPMEZCUTJRc1lVRkJWeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN08wRkJSUzlDTEUxQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhGUVVGRkxFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNN08wRkJSVE5ETEZOQlFVOHNTVUZCU1N4RFFVRkRPMFZCUTFvN08wRkJSVVFzVlVGQlV5eExRVUZMTEVkQlFVazdRVUZEYWtJc1RVRkJTU3hWUVVGVkxFVkJRVVVzVVVGQlVTeERRVUZET3p0QlFVVjZRaXhaUVVGVkxFZEJRVWNzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRVZCUVVVc1JVRkJSU3hYUVVGWExFVkJRVVVzU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVTnlSQ3hWUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF6czdRVUZGTjBNc1RVRkJTU3hSUVVGUkxFVkJRVVU3UVVGRFlpeFBRVUZKTEZGQlFWRXNRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhGUVVGRk8wRkJRM2hDTEZGQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1VVRkJVU3hEUVVGRE8wbEJRM3BDTEUxQlJVazdRVUZEU2l4UlFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGSExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdTVUZETTBJN1IwRkRSRHM3UVVGRlJDeE5RVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRWxCUVVrc1EwRkJRenRCUVVOd1FpeE5RVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE96dEJRVVYyUWl4TlFVRkpMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU03UVVGRFppeGhRVUZYTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF6czdRVUZGYUVNc1RVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0RlFVTjZRanM3UVVGRlJDeFpRVUZYTEVkQlFVY3NRMEZCUXl4WlFVRlpPenRCUVVVeFFpeHZRa0ZCU3l4TFFVRkxMRU5CUVVNc1NVRkJTU3d3UWtGQlVTeERRVUZET3p0QlFVVjRRaXhOUVVGSkxFTkJRVU1zUjBGQlJ5eEhRVUZITEZWQlFWVXNTMEZCU3l4RlFVRkZMRTlCUVU4c1JVRkJSVHRCUVVOd1F5eFBRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJUdEJRVU55UWl4UlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRE8wRkJRMVFzVTBGQlNTeEZRVUZGTEV0QlFVczdRVUZEV0N4WFFVRk5MRVZCUVVVc1QwRkJUenRMUVVObUxFTkJRVU1zUTBGQlF6dEpRVU5JT3p0QlFVVkVMRlZCUVU4c1NVRkJTU3hEUVVGRE8wZEJRMW9zUTBGQlF6czdRVUZGUml4TlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExGVkJRVlVzUzBGQlN5eEZRVUZGTzBGQlF6bENMRTlCUVVrc1NVRkJTU3hGUVVGRkxFdEJRVXNzUTBGQlF6czdRVUZGYUVJc1QwRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRlRUlzVVVGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRE0wSXNUMEZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSU3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenM3UVVGRmJFTXNWVUZCVHl4SlFVRkpMRU5CUVVNN1IwRkRXaXhEUVVGRE96dEJRVVZHTEUxQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1ZVRkJWU3hMUVVGTExFVkJRVVU3UVVGRE5VSXNUMEZCU1N4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRE96dEJRVVZhTEZGQlFVc3NRMEZCUXl4SFFVRkRMRU5CUVVNc1JVRkJSU3hKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1NVRkJSU3hEUVVGRExFVkJRVVU3UVVGREwwSXNVVUZCU1N4SlFVRkpMRU5CUVVNc1NVRkJTU3hMUVVGTExFdEJRVXNzUlVGQlJTeFBRVUZQTEVsQlFVa3NRMEZCUXp0SlFVTnlRenRIUVVORUxFTkJRVU03TzBGQlJVWXNUVUZCU1N4RFFVRkRMRWRCUVVjc1IwRkJSeXhWUVVGVkxFdEJRVXNzUlVGQlJUdEJRVU16UWl4VlFVRlBMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMGRCUXpGQ0xFTkJRVU03TzBGQlJVWXNVMEZCVHl4SlFVRkpMRU5CUVVNN1JVRkZXaXhGUVVGRkxFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXpzN1FVRkZXaXhMUVVGSkxFTkJRVU1zYTBKQlFXdENMRWRCUVVjc1UwRkJVeXhEUVVGRE8wRkJRM0JETEV0QlFVa3NRMEZCUXl4clFrRkJhMElzUjBGQlJ5eFRRVUZUTEVOQlFVTTdRVUZEY0VNc1MwRkJTU3hEUVVGRExHbENRVUZwUWl4SFFVRkhMRkZCUVZFc1EwRkJRenRCUVVOc1F5eExRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFZEJRVWNzVDBGQlR5eERRVUZET3p0QlFVVm9ReXhMUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEZsQlFWa3NRMEZCUXp0QlFVTTNRaXhMUVVGSkxFTkJRVU1zVjBGQlZ5eEhRVUZITEVsQlFVa3NRMEZCUXp0QlFVTjRRaXhMUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXp0QlFVTndRaXhMUVVGSkxFTkJRVU1zVjBGQlZ5eEhRVUZITEV0QlFVc3NRMEZCUXp0QlFVTjZRaXhMUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEVsQlFVa3NRMEZCUXp0QlFVTnlRaXhMUVVGSkxFTkJRVU1zUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXp0QlFVTnNRaXhMUVVGSkxFTkJRVU1zVlVGQlZTeEhRVUZITEVsQlFVa3NRMEZCUXp0QlFVTjJRaXhMUVVGSkxFTkJRVU1zWjBKQlFXZENMRWRCUVVjc1NVRkJTU3hEUVVGRE8wRkJRemRDTEV0QlFVa3NRMEZCUXl4VlFVRlZMRWRCUVVjc1NVRkJTU3hEUVVGRE8wRkJRM1pDTEV0QlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRE96dEJRVVZzUWl4TFFVRkpMRU5CUVVNc1ZVRkJWU3hIUVVGSExGVkJRVlVzWTBGQll5eEZRVUZGTEdOQlFXTXNSVUZCUlR0QlFVTXpSQ3hOUVVGSkxFdEJRVXNzUTBGQlF6czdRVUZGVml4UFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRE96dEJRVVZpTEUxQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1MwRkJTeXhEUVVGRE8wRkJRM0pDTEUxQlFVa3NRMEZCUXl4WFFVRlhMRWRCUVVjc1EwRkJReXhEUVVGRExHTkJRV01zUTBGQlF6dEJRVU53UXl4TlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF6dEJRVU5zUWl4TlFVRkpMRU5CUVVNc1ZVRkJWU3hIUVVGSExIZENRVUZOTEUxQlFVMHNSVUZCUlN4RFFVRkRPMEZCUTJwRExFMUJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVa3NZMEZCWXl4RFFVRkRMRTFCUVUwc1IwRkJTU3hqUVVGakxFZEJRVWNzUTBGQlF5eERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRPenRCUVVWNlJTeE5RVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVU3UVVGRGRFSXNVMEZCVFN4SlFVRkpMR05CUVdNc1EwRkJReXcyUTBGQk5rTXNSMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0SFFVTXZSanM3UVVGRlJDeE5RVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRmRCUVZjc1NVRkJSU3hqUVVGakxFZEJRVWNzWTBGQll5eEhRVUZETEZsQlFWa3NSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJReTlGTEUxQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzBGQlF6VkNMRTFCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRVZCUVVVc1EwRkJReXhEUVVGRExHTkJRV01zUTBGQlF5eERRVUZET3p0QlFVVTVReXh0UWtGQmFVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03TzBGQlJUZENMRTFCUVVrc1kwRkJZeXhGUVVGRk8wRkJRMjVDTEhOQ1FVRnRRaXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNZMEZCWXl4RlFVRkZMRmxCUVZrN1FVRkRNVVFzVVVGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRKUVVOb1FpeERRVUZETEVOQlFVTTdSMEZEU0N4TlFVVkpPMEZCUTBvc1QwRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0SFFVTm9RanM3UVVGRlJDeFRRVUZQTEVsQlFVa3NRMEZCUXp0RlFVTmFMRU5CUVVNN096dEJRVWRHTEV0QlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1dVRkJXVHRCUVVGRkxGTkJRVThzU1VGQlNTeERRVUZETzBWQlFVVXNRMEZCUXp0QlFVTXpReXhMUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEZsQlFWazdRVUZCUlN4VFFVRlBMRWxCUVVrc1EwRkJRenRGUVVGRkxFTkJRVU03TzBGQlJUVkRMRXRCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzV1VGQldUdEJRVUZGTEZOQlFVOHNTVUZCU1N4RFFVRkRPMFZCUVVVc1EwRkJRenRCUVVNM1F5eExRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMRmxCUVZrN1FVRkJSU3hUUVVGUExFbEJRVWtzUTBGQlF6dEZRVUZGTEVOQlFVTTdRVUZEZWtNc1MwRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eFpRVUZaTzBGQlFVVXNVMEZCVHl4SlFVRkpMRU5CUVVNN1JVRkJSU3hEUVVGRE96dEJRVVV4UXl4TFFVRkpMRU5CUVVNc1YwRkJWeXhIUVVGSExGbEJRVms3UVVGRE9VSXNUVUZCU1N4TFFVRkxMRVZCUVVVc1ZVRkJWU3hEUVVGRE96dEJRVVYwUWl4WFFVRlRMRXRCUVVzc1IwRkJTVHRCUVVOcVFpeFBRVUZKTEZGQlFWRXNSVUZCUlN4alFVRmpMRU5CUVVNN08wRkJSVGRDTEZsQlFWTXNZVUZCWVN4RFFVRkZMRXRCUVVzc1JVRkJSVHRCUVVNNVFpeFhRVUZQTEZsQlFWazdRVUZEYkVJc1UwRkJTU3hYUVVGWExFTkJRVU03TzBGQlJXaENMR2RDUVVGWExFZEJRVWNzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4UlFVRlJMRVZCUVVVc1JVRkJSU3hYUVVGWExFVkJRVVVzUzBGQlN5eEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVTjRSQ3hWUVVGTExFTkJRVU1zVlVGQlZTeERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRGJFTXNWVUZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhYUVVGWExFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRPMHRCUTNCRExFTkJRVU03U1VGRFJqczdRVUZGUkN4WFFVRlJMRWRCUVVjN1FVRkRWaXhUUVVGTExFVkJRVVVzWTBGQll6dEJRVU55UWl4VFFVRkxMRVZCUVVVc1kwRkJZenRCUVVOeVFpeFBRVUZITEVWQlFVVXNVVUZCVVR0SlFVTmlMRU5CUVVNN08wRkJSVVlzYVVKQlFXTXNSMEZCUnp0QlFVTm9RaXhUUVVGTExFVkJRVVVzU1VGQlNTeERRVUZETEZWQlFWVXNTMEZCU3l4SlFVRkpMRU5CUVVNc1owSkJRV2RDTzBGQlEyaEVMRk5CUVVzc1JVRkJSU3hKUVVGSkxFTkJRVU1zVlVGQlZTeExRVUZMTEVsQlFVa3NRMEZCUXl4blFrRkJaMEk3UVVGRGFFUXNUMEZCUnl4RlFVRkZMRWxCUVVrc1EwRkJReXhSUVVGUk8wbEJRMnhDTEVOQlFVTTdPenM3UVVGSlJpeFBRVUZKTEdOQlFXTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRVVVzVDBGQlR6dEJRVU14UXl4UFFVRkpMRXRCUVVzc1EwRkJReXhWUVVGVkxFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSVHM3UVVGRmJrTXNVVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNSMEZCUnl4aFFVRmhMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRGNFUXNVVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhaUVVGWk8wRkJRekZDTEZsQlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc2MwSkJRWE5DTEVWQlFVVXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wdEJRMmhFTEVOQlFVTTdTVUZEUmp0SFFVTkVPenRCUVVWRUxFOUJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTTdRVUZEWWl4WlFVRlZMRWRCUVVjc1EwRkJReXhMUVVGTExFVkJRVVVzVDBGQlR5eEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRPenRCUVVWMlF5eE5RVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmxCUVZrN1FVRkRja0lzVDBGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEZRVUZGTzBGQlEzWkRMRk5CUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdTVUZEYWtJN1IwRkRSQ3hEUVVGRExFTkJRVU03TzBGQlJVZ3NUVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExGbEJRVms3UVVGRGJrUXNVVUZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEhRVU5xUWl4RFFVRkRMRU5CUVVNN08wRkJSVWdzVTBGQlR5eEpRVUZKTEVOQlFVTTdSVUZEV2l4RFFVRkRPenRCUVVWR0xFdEJRVWtzUTBGQlF5eFpRVUZaTEVkQlFVY3NXVUZCV1R0QlFVTXZRaXhOUVVGSkxFdEJRVXNzUTBGQlF6czdRVUZGVml4TlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03TzBGQlJXSXNUMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJRenM3T3p0QlFVbGlMRTFCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUlVGQlJTeERRVUZETEZWQlFWVXNSVUZCUlN4WlFVRlpPMEZCUXpGRExGRkJRVXNzUTBGQlF5eFZRVUZWTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNN1FVRkRka0lzVVVGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRIUVVOc1FpeERRVUZETEVOQlFVTTdPMEZCUlVnc1RVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eFBRVUZQTEVWQlFVVXNWVUZCVlN4TlFVRk5MRVZCUVVVN096dEJRVWRzUXl4UFFVRkpMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEZkQlFWY3NRMEZCUXl4SlFVRkpMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVNc1JVRkJSVHM3UVVGRk5VVXNVVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMGxCUXpGRE96dEJRVVZFTEU5QlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFMUJRVTBzU1VGQlNTeEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdSMEZETDBRc1EwRkJReXhEUVVGRE96dEJRVVZJTEZOQlFVOHNTVUZCU1N4RFFVRkRPMFZCUTFvc1EwRkJRenM3UVVGRlJpeExRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFZEJRVWNzV1VGQldUdEJRVU53UXl4TlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzVFVGQlRTeEZRVUZGTEV0QlFVc3NSVUZCUlR0QlFVTnlSU3hQUVVGSkxFdEJRVXNzUlVGQlJTeEZRVUZGTEVOQlFVTTdPMEZCUldRc1QwRkJTU3hMUVVGTExFTkJRVU1zVVVGQlVTeExRVUZMTEU5QlFVOHNSVUZCUlN4UFFVRlBPenRCUVVWMlF5eFJRVUZMTEVkQlFVY3NRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wRkJRMnBDTEV0QlFVVXNSMEZCUnl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03TzBGQlJUZERMRTlCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVTdRVUZEWkN4elFrRkJTeXhUUVVGVExFTkJRVU1zU1VGQlNTeEZRVUZGTEVWQlFVVXNSVUZCUlN4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZKTEV0QlFVc3NRMEZCUXl4RFFVRkRPMGxCUXpGRU8wZEJRMFFzUTBGQlF5eERRVUZETEVOQlFVTTdSVUZEU2l4RFFVRkRPenRCUVVWR0xFdEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1IwRkJSeXhaUVVGWk8wRkJRM0pETEUxQlFVa3NTMEZCU3l4RlFVRkZMRTFCUVUwc1EwRkJRenM3UVVGRmJFSXNUMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJRenRCUVVOaUxGRkJRVTBzUjBGQlJ5eFBRVUZQTEV0QlFVc3NRMEZCUXl4TlFVRk5MRXRCUVVzc1VVRkJVU3hIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTEVkQlFVY3NTMEZCU3l4RFFVRkRPenRCUVVWcVJTeFBRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eFpRVUZaTzBGQlEzWkRMRTlCUVVrc1MwRkJTeXhGUVVGRkxFVkJRVVVzUlVGQlJTeFZRVUZWTEVOQlFVTTdPMEZCUlRGQ0xFOUJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNZMEZCWXl4RFFVRkRMRTlCUVU4c1EwRkJReXhGUVVGRk8wRkJRMjVETEZOQlFVc3NRMEZCUXl4TFFVRkxMRWRCUVVjN1FVRkRZaXhsUVVGVkxFVkJRVVVzU1VGQlNUdEJRVU5vUWl4alFVRlRMRVZCUVVVc1NVRkJTVHRCUVVObUxGRkJRVWNzUlVGQlJTeEpRVUZKTzB0QlExUXNRMEZCUXp0SlFVTkdPenRCUVVWRUxGRkJRVXNzUjBGQlJ5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRhRUlzUzBGQlJTeEhRVUZITEd0Q1FVRkxMRmRCUVZjc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJTeEZRVUZGTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRlRU1zWVVGQlZTeEhRVUZITEVOQlFVTXNXVUZCV1N4RlFVRkZMRmxCUVZrc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6czdRVUZGYWtRc1lVRkJWU3hEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZWTEV0QlFVc3NSVUZCUlR0QlFVTnVReXhSUVVGSkxFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVN1FVRkRNVUlzVlVGQlN5eERRVUZETEVWQlFVVXNRMEZCUXl4clFrRkJhMElzUlVGQlJTeFZRVUZWTEUxQlFVMHNSVUZCUlR0QlFVTTVReXhWUVVGSkxFMUJRVTBzUTBGQlF6czdRVUZGV0N4WlFVRk5MRWRCUVVjc1QwRkJUeXhMUVVGTExFTkJRVU1zVFVGQlRTeExRVUZMTEZGQlFWRXNSMEZCUnl4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGSExFdEJRVXNzUTBGQlF6czdRVUZGYWtVc1kwRkJVU3hOUVVGTkxFTkJRVU1zU1VGQlNUdEJRVU5zUWl4WlFVRkxMRTFCUVUwN1FVRkRWaXhqUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEZWQlFWVXNSMEZCUXl4TFFVRkxMRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVU1zUTBGQlF6dEJRVU5vUkN4alFVRk5PenRCUVVWUUxGbEJRVXNzVDBGQlR5eERRVUZETzBGQlEySXNXVUZCU3l4UFFVRlBPMEZCUTFnc1kwRkJUU3hEUVVGRExGZEJRVmNzUTBGQlF5eFZRVUZWTEVkQlFVTXNTMEZCU3l4RFFVRkRMRmRCUVZjc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRGJrUXNZMEZCVFR0QlFVRkJMRTlCUTFBN1FVRkRSQ3hYUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hIUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVWQlFVVTdRVUZETTBNc1lVRkJUU3hGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEYUVJc2EwSkJRVmNzUlVGQlJTeExRVUZMTzBGQlEyeENMR2RDUVVGVExFVkJRVVVzUzBGQlN6dFBRVU5vUWl4RFFVRkRMRU5CUVVNc1EwRkJRenROUVVOS0xFTkJRVU1zUTBGQlF6czdRVUZGU0N4VFFVRkpMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEVsQlFVa3NTVUZCU1N4RlFVRkZPMEZCUTNSRExGbEJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VFVGRGVrSTdPenRCUVVkRUxIVkNRVUZMTEZOQlFWTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenM3T3p0QlFVazNReXhsUVVGVkxFTkJRVU1zV1VGQldUdEJRVU4wUWl4VlFVRkpMRVZCUVVVc1JVRkJSU3hyUWtGQlN5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhyUWtGQlN5eFhRVUZYTEVOQlFVTXNTMEZCU3l4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJTeEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wMUJRMnBHTEVOQlFVTXNRMEZCUXp0TFFVTklPMGxCUTBRc1EwRkJReXhEUVVGRE8wZEJRMGdzUTBGQlF5eERRVUZET3p0QlFVVklMRk5CUVU4c1MwRkJTeXhEUVVGRE8wVkJRMklzUTBGQlF6czdRVUZGUml4TFFVRkpMRU5CUVVNc1kwRkJZeXhIUVVGSExGVkJRVlVzWlVGQlpTeEZRVUZGTzBGQlEyaEVMRTFCUVVrc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RlFVRkZPMEZCUXpGQ0xFOUJRVWtzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eEZRVUZGTzBGQlF6VkRMRmxCUVZFc1QwRkJUeXhsUVVGbE8wRkJRemRDTEZWQlFVc3NWVUZCVlR0QlFVTmtMSEZDUVVGbExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eERRVUZETzBGQlF6VkRMRmxCUVUwN08wRkJSVkFzVlVGQlN5eFJRVUZSTzBGQlExb3NWVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEV0QlFVc3NRMEZCUXl4bFFVRmxMRU5CUVVNc1EwRkJRenRCUVVNM1F5eFpRVUZOTzBGQlFVRXNTMEZEVUR0SlFVTkVMRTFCUlVrN1FVRkRTaXhSUVVGSkxFTkJRVU1zWjBKQlFXZENMRWRCUVVjc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRTFCUVUwc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF6dEpRVU4wUlR0SFFVTkVMRTFCUlVrN1FVRkRTaXhQUVVGSkxFTkJRVU1zWjBKQlFXZENMRWRCUVVjc2QwSkJRVTBzVFVGQlRTeERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkRPMGRCUTNSRU96dEJRVVZFTEZOQlFVOHNTVUZCU1N4RFFVRkRPMFZCUTFvc1EwRkJRenM3UVVGRlJpeExRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRlZCUVZVc1UwRkJVeXhGUVVGRkxHVkJRV1VzUlVGQlJUdEJRVU51UkN4TlFVRkpMRTFCUVUwc1JVRkJSU3hUUVVGVExFVkJRVVVzUlVGQlJTeERRVUZET3p0QlFVVXhRaXhSUVVGTkxFZEJRVWNzYzBKQlFVc3NhVUpCUVdsQ0xFVkJRVVVzUTBGQlF6czdRVUZGYkVNc1RVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNWVUZCVlN4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eEZRVUZGTEVOQlFVTTdPMEZCUlhwRUxFMUJRVWtzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1JVRkJSVHRCUVVOb1F5eFRRVUZOTEVsQlFVa3NTMEZCU3l4RFFVRkRMR2REUVVGblF5eERRVUZETEVOQlFVTTdRVUZEYkVRc1dVRkJVeXhIUVVGSkxFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVrc1NVRkJTU3hIUVVGSExFMUJRVTBzUTBGQlF6dEJRVU42UkN4WFFVRlJMRWRCUVVjc1UwRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF5eGxRVUZsTEVOQlFVTXNRMEZCUXl4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUXpsRkxFdEJRVVVzUjBGQlJ5eHJRa0ZCU3l4WFFVRlhMRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTTdPenRCUVVkeVF5eFBRVUZKTEVWQlFVVXNSVUZCUlN4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzVVVGQlVTeERRVUZETzBkQlF6VkNMRTFCUlVrN1FVRkRTaXhQUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXp0QlFVTnNRaXhaUVVGUkxFVkJRVVVzVTBGQlV6dEJRVU51UWl4clFrRkJZeXhGUVVGRkxHVkJRV1U3U1VGREwwSXNRMEZCUXl4RFFVRkRPMGRCUTBnN08wRkJSVVFzVTBGQlR5eEpRVUZKTEVOQlFVTTdSVUZEV2l4RFFVRkRPenRCUVVWR0xFdEJRVWtzUTBGQlF5eEhRVUZITEVkQlFVY3NWVUZCVlN4TlFVRk5MRVZCUVVVN1FVRkROVUlzVFVGQlNTeExRVUZMTEVOQlFVTTdPMEZCUlZZc1QwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF5eGhRVUZoTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1RVRkJUU3hEUVVGRExFbEJRVWtzUjBGQlJ5eE5RVUZOTEVOQlFVTTdPMEZCUlRORUxGTkJRVThzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXp0RlFVTnlReXhEUVVGRE96dEJRVVZHTEV0QlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1dVRkJXVHRCUVVNelFpeE5RVUZKTEVsQlFVa3NRMEZCUXpzN1FVRkZWQ3hOUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1QwRkJUeXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETzBGQlF6RkRMRTFCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNSVUZCUXl4RFFVRkRMRU5CUVVNc1IwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRmRCUVZjc1JVRkJSU3hEUVVGRE96dEJRVVZ1UkN4VFFVRlBMRU5CUVVNc1IwRkJSeXhGUVVGRkxFbEJRVWtzUTBGQlF5eEZRVUZGTEVWQlFVVXNTVUZCU1N4SlFVRkpMRU5CUVVNc1QwRkJUeXhGUVVGRkxFVkJRVVVzUjBGQlJ5eEZRVUZGTEVsQlFVa3NSVUZCUlN4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdSVUZEYmtVc1EwRkJRenM3UVVGRlJpeExRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhMRmxCUVZrN1FVRkRkRUlzVFVGQlNTeEpRVUZKTEVOQlFVTTdPMEZCUlZRc1RVRkJTU3hIUVVGSExHdENRVUZMTEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenM3UVVGRkwwSXNVMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1JVRkJSU3hKUVVGSkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVWQlFVVXNSVUZCUlN4SFFVRkhMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTTFSU3hUUVVGUExFbEJRVWtzUTBGQlF6dEZRVU5hTEVOQlFVTTdPMEZCUlVZc1MwRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eFpRVUZaT3p0QlFVVXZRaXhOUVVGSkxFTkJRVU1zVTBGQlV5eEhRVUZITEZWQlFWVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hOUVVGTkxFVkJRVVVzVTBGQlV5eEZRVUZGTzBGQlF6TkVMRTlCUVVrc1MwRkJTeXhGUVVGRkxFMUJRVTBzUlVGQlJTeExRVUZMTEVWQlFVVXNSVUZCUlN4RFFVRkRPenRCUVVVM1FpeFJRVUZMTEVkQlFVY3NRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE96dEJRVVZxUWl4UFFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhGUVVGRk8wRkJRMnhETEZWQlFVMHNSMEZCUnl4elFrRkJTeXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPenRCUVVWd1F5eFJRVUZKTEUxQlFVMHNSVUZCUlR0QlFVTllMRlZCUVVzc1IwRkJSeXhaUVVGWkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlN4TFFVRkxMRVZCUVVVc1RVRkJUU3hEUVVGRExHTkJRV01zUTBGQlF5eERRVUZETzBGQlF6bEVMRTlCUVVVc1IwRkJSeXhyUWtGQlN5eFhRVUZYTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVc1JVRkJSU3hKUVVGSkxFMUJRVTBzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0QlFVTnNSQ3gxUWtGQlN5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RlFVRkZMRVZCUVVVc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6czdRVUZGYUVNc1UwRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVWQlFVVXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdTMEZETDBNc1RVRkZTVHRCUVVOS0xGZEJRVTBzU1VGQlNTeExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1MwRkRlRUk3U1VGRFJEdEhRVU5FTEVOQlFVTTdPMEZCUlVZc1RVRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eFZRVUZWTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1RVRkJUU3hGUVVGRk8wRkJRemRETEU5QlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExHRkJRV0VzUTBGQlF5eEZRVUZGTzBGQlEzaERMRkZCUVVrc1EwRkJReXhYUVVGWExFZEJRVWNzVjBGQlZ5eERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRPMEZCUTNoRExIVkNRVUZ0UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEpRVU12UWpzN1FVRkZSQ3hQUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03UjBGRGNFTXNRMEZCUXpzN1FVRkZSaXhOUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEZWQlFWVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hOUVVGTkxFVkJRVVU3UVVGREwwTXNUMEZCU1N4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTzBGQlEyNUNMRkZCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMGxCUXpGQ08wZEJRMFFzUTBGQlF6czdRVUZGUml4TlFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExGVkJRVlVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TlFVRk5MRVZCUVVVN1FVRkRPVU1zVDBGQlNTeExRVUZMTEVWQlFVVXNTMEZCU3l4RFFVRkRPenM3UVVGSGFrSXNUMEZCU1N4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTzBGQlEyNUNMRk5CUVVzc1IwRkJSeXhuUkVGQlowUXNRMEZCUXl4UFFVRlBMRU5CUVVNc1UwRkJVeXhGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzBGQlEzQkdMRk5CUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPenRCUVVWNlFpeFJRVUZKTEV0QlFVc3NRMEZCUXl4RlFVRkZMRU5CUVVNc1kwRkJZeXhEUVVGRExFVkJRVVU3UVVGRE4wSXNWVUZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVXNUVUZCVFN4RlFVRkZMRXRCUVVzc1JVRkJSVHRCUVVNM1F5eFZRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wMUJRM0JDTEVOQlFVTXNRMEZCUXl4RFFVRkRPMHRCUTBvc1RVRkZTVHRCUVVOS0xGVkJRVXNzUTBGQlF5eEZRVUZGTEVOQlFVTXNUMEZCVHl4RlFVRkZMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeE5RVUZOTEVWQlFVVTdRVUZETjBNc1ZVRkJTU3hMUVVGTExFTkJRVU1zUlVGQlJTeERRVUZETEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1JVRkJSVHRCUVVNMVFpeFhRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF6dFBRVU5xUXp0TlFVTkVMRU5CUVVNc1EwRkJReXhEUVVGRE8wdEJRMG83U1VGRFJEdEhRVU5FTEVOQlFVTTdSVUZGUml4RFFVRkRMRU5CUVVNN1EwRkZTQ3hEUVVGRExFTkJRVU03TzNGQ1FVVlpMRVZCUVVVc1MwRkJTeXhGUVVGTUxFdEJRVXNzUlVGQlJTeFpRVUZaTEVWQlFWb3NXVUZCV1N4RlFVRkZJaXdpWm1sc1pTSTZJakl6TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQlRZMjl3WlhNZ1lYSmxJSEJoWTJ0aFoyVnpJSGRvYVdOb0lHTnZiblJoYVc0Z1lTQnlaV1psY21WdVkyVWdkRzhnWVNCRVQwMGdaV3hsYldWdWRDQjNjbUZ3Y0dWa0lHbHVJR0VnYWxGMVpYSjVJRzlpYW1WamRDNWNiaUFxSUZSb2FYTWdaVzVoWW14bGN5QndjbTl3WlhKMGFXVnpJR0Z1WkNCdFpYUm9iMlJ6SUhSdklHSmxJR2x1SUdOdmJuUmxlSFFnYjJZZ2RHaGxJRVJQVFNCdWIyUmxJR0Z1WkNCcGRITWdaR1Z6WTJWdVpHRnVkSE11WEc0Z0tseHVJQ29nUUcxdlpIVnNaVnh1SUNvZ1FISmxjWFZwY21WeklIUjVjR1Z6TDJwUlVISnZlSGxjYmlBcUlFQnlaWEYxYVhKbGN5QjBlWEJsY3k5Q1lYTnBZMXh1SUNvZ1FISmxjWFZwY21WeklIUjVjR1Z6TDFGMVpYVmxYRzRnS2lCQWNtVnhkV2x5WlhNZ2NHeGhlUzVuWVcxbFhHNGdLaUJBY21WeGRXbHlaWE1nZFhScGJGeHVJQ29nUUhKbGNYVnBjbVZ6SUdWMllXeEJZM1JwYjI1Y2JpQXFYRzRnS2lCQVpYaHdiM0owY3lCamNtVmhkR1ZGYm5ScGRIbGNiaUFxTDF4dWFXMXdiM0owSUdwUlVISnZlSGtnWm5KdmJTQW5kSGx3WlhNdmFsRlFjbTk0ZVNjN1hHNXBiWEJ2Y25RZ1FtRnphV01nWm5KdmJTQW5kSGx3WlhNdlFtRnphV01uTzF4dWFXMXdiM0owSUZGMVpYVmxJR1p5YjIwZ0ozUjVjR1Z6TDFGMVpYVmxKenRjYm1sdGNHOXlkQ0I3SUZCdmFXNTBJSDBnWm5KdmJTQW5kSGx3WlhNdlJHbHRaVzV6YVc5dWN5YzdYRzVwYlhCdmNuUWdaMkZ0WlNCbWNtOXRJQ2R3YkdGNUxtZGhiV1VuTzF4dWFXMXdiM0owSUhWMGFXd2dabkp2YlNBbmRYUnBiQ2M3WEc1cGJYQnZjblFnWlhaaGJFRmpkR2x2YmlCbWNtOXRJQ2RsZG1Gc1FXTjBhVzl1Snp0Y2JseHVMeW9xWEc0Z0tpQkRjbVZoZEdWeklHRWdibVYzSUVWdWFYUnBlU0JwYm5OMFlXNWpaU0IzYVhSb0lHRWdZMjl1ZEdWNGRDQnViMlJsSUdGdVpDQnBiWEJzWlcxbGJuUmhkR2x2Ymk1Y2JpQXFJRlJvWlNCcGJuTjBZVzVqWlNCcGN5QndjbTkwYjNSNWNHVmtJR1p5YjIwZ2RHaGxJSEJoY21WdWRDQnpZMjl3WlM1Y2JpQXFYRzRnS2lCQWJXVnRZbVZ5YjJZZ2JXOWtkV3hsT25SNWNHVnpMMU5qYjNCbGZsTmpiM0JsSTJOeVpXRjBaVVZ1ZEdsMGVWeHVJQ29nUUhCeWIzUmxZM1JsWkZ4dUlDb2dRR0Z5WnlCN2FsRjFaWEo1ZlNCZkpHNXZaR1VnTFNCcVVYVmxjbmtnYjJKcVpXTjBJSGRwZEdnZ1lTQnphVzVuYkdVZ2JtOWtaU0JwYmlCMGFHVWdZMjlzYkdWamRHbHZiaTVjYmlBcUlFQmhjbWNnZTJaMWJtTjBhVzl1Zkc5aWFtVmpkSDBnWDJsdGNHeGxiV1Z1ZEdGMGFXOXVJQzBnUTI5dWMzUnlkV04wYjNJZ1puVnVZM1JwYjI0Z2IzSWdiMkpxWldOMElIZHBkR2dnZEdobElHVnVkR2wwZVNCaVpXaGhkbWx2Y2k1Y2JpQXFJRUJ5WlhSMWNtNXpJSHR0YjJSMWJHVTZkSGx3WlhNdlUyTnZjR1YrVTJOdmNHVjlYRzRnS2k5Y2JtWjFibU4wYVc5dUlHTnlaV0YwWlVWdWRHbDBlU0FvWHlSdWIyUmxMQ0JmYVcxd2JHVnRaVzUwWVhScGIyNHBJSHRjYmx4MGRtRnlJR052YlhCdmJtVnVkQ3dnY0hKdmRHOTBlWEJsTENCamIyMXdiMjVsYm5SU1pXTnZjbVFzSUdsdWMzUmhibU5sTzF4dVhHNWNkR052YlhCdmJtVnVkQ0E5SUY4a2JtOWtaUzVoZEhSeUtDZHdiQzFqYjIxd2IyNWxiblFuS1R0Y2JseDBjSEp2ZEc5MGVYQmxJRDBnZEdocGN6dGNibHh1WEhScFppQW9ZMjl0Y0c5dVpXNTBLU0I3WEc1Y2RGeDBZMjl0Y0c5dVpXNTBVbVZqYjNKa0lEMGdaMkZ0WlM1amIyMXdiMjVsYm5RdVoyVjBLR052YlhCdmJtVnVkQ2s3WEc1Y2JseDBYSFJwWmlBb1kyOXRjRzl1Wlc1MFVtVmpiM0prS1NCN1hHNWNkRngwWEhSd2NtOTBiM1I1Y0dVZ1BTQjBhR2x6TG1WNGRHVnVaQ2hqYjIxd2IyNWxiblJTWldOdmNtUXVhVzF3YkdWdFpXNTBZWFJwYjI0cE8xeHVYSFJjZEgxY2JseHVYSFJjZEdWc2MyVWdlMXh1WEhSY2RGeDBkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZE9ieUJwYlhCc1pXMWxiblJoZEdsdmJpQnlaV052Y21RZ1ptOXlJSFJvWlNBbksyTnZiWEJ2Ym1WdWRDc25ZMjl0Y0c5dVpXNTBMaWNwTzF4dVhIUmNkSDFjYmx4MGZWeHVYRzVjZEdsdWMzUmhibU5sSUQwZ2RIbHdaVzltSUY5cGJYQnNaVzFsYm5SaGRHbHZiaUE5UFQwZ0oyWjFibU4wYVc5dUp5QS9JSEJ5YjNSdmRIbHdaUzVsZUhSbGJtUW9YMmx0Y0d4bGJXVnVkR0YwYVc5dUtTQTZJSEJ5YjNSdmRIbHdaUzVqY21WaGRHVW9LVHRjYmx4dVhIUnlaWFIxY200Z2FXNXpkR0Z1WTJVdWFXNXBkR2xoYkdsNlpTaGZKRzV2WkdVc0lHTnZiWEJ2Ym1WdWRDazdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1BITndZVzRnWTJ4aGMzTTlYQ0pwYlhCdmNuUmhiblJjSWo1T1QxUkZPand2YzNCaGJqNGdWR2hwY3lCcGN5Qk9UMVFnWVNCamIyNXpkSEoxWTNSdmNpNGdWWE5sSUdCVFkyOXdaUzVqY21WaGRHVW9LV0FnZEc4Z1oyVjBJR0VnYm1WM0lHbHVjM1JoYm1ObExseHVJQ29nUUdOc1lYTnpaR1Z6WXlCQklIQmhZMnRoWjJVZ2QyaHBZMmdnWTI5dWRHRnBibk1nWVNCeVpXWmxjbVZ1WTJVZ2RHOGdZU0JFVDAwZ2JtOWtaU0IzY21Gd2NHVmtJR2x1SUdFZ2FsRjFaWEo1SUc5aWFtVmpkQzRnUm05eUlHMXZjbVVnYVc1bWIzSnRZWFJwYjI0Z2IyNGdjMk52Y0dWeklISmxZV1FnVzNSb2FYTmRlMEJzYVc1cklHMXZaSFZzWlRwMGVYQmxjeTlUWTI5d1pYMHVYRzRnS2lCQVkyeGhjM05jYmlBcUlFQmxlSFJsYm1SeklHMXZaSFZzWlRwMGVYQmxjeTlxVVZCeWIzaDVmbXBSVUhKdmVIbGNiaUFxTDF4dWRtRnlJRk5qYjNCbElEMGdhbEZRY205NGVTNWxlSFJsYm1Rb1puVnVZM1JwYjI0Z0tDa2dlMXh1WEc1Y2RDOHFLbHh1WEhRZ0tpQkRiMnhzWldOMGFXOXVJRzltSUhKbFkyOXlaSE1nY0dGcGNtbHVaeUJoSUc1dlpHVWdkMmwwYUNCcGRITWdZV04wYVc5dUxseHVYSFFnS2lCQWJXVnRZbVZ5YjJZZ2JXOWtkV3hsT25SNWNHVnpMMU5qYjNCbGZsTmpiM0JsWEc1Y2RDQXFJRUJ6ZEdGMGFXTmNibHgwSUNvZ1FIQnliM1JsWTNSbFpGeHVYSFFnS2lCQWRHOWtieUJEYjI1MlpYSjBJSFJ2SUhSNWNHVnpMME52Ykd4bFkzUnBiMjVjYmx4MElDb3ZYRzVjZEhaaGNpQkJZM1JwYjI1aFlteGxjenRjYmx4dVhIUm1kVzVqZEdsdmJpQmhkSFJoWTJoQlkzUnBiMjVJWVc1a2JHVnlJQ2dwSUh0Y2JseDBYSFIyWVhJZ1pXNTBhWFI1TzF4dVhHNWNkRngwWlc1MGFYUjVJRDBnZEdocGN6dGNibHh1WEhSY2RIUm9hWE11YjI0b2NHd3VSVlpGVGxRdVEweEpRMHNzSUdaMWJtTjBhVzl1SUNoZlpYWmxiblFwSUh0Y2JseDBYSFJjZEhaaGNpQjBZWEpuWlhRc0lISmxZMjl5WkR0Y2JseHVYSFJjZEZ4MGRHRnlaMlYwSUQwZ0pDaGZaWFpsYm5RdWRHRnlaMlYwS1M1amJHOXpaWE4wS0NkYmNHd3RZV04wYVc5dVhTY3BXekJkTzF4dVhIUmNkRngwTHk4Z1ZFOUVUem9nVW1WemIyeDJaU0JtYjNJZ2RHOTFZMmhsYzF4dVhIUmNkRngwWDJWMlpXNTBMbU4xY25OdmNpQTlJRkJ2YVc1MExtTnlaV0YwWlNncExuTmxkQ2hmWlhabGJuUXVZMnhwWlc1MFdDd2dYMlYyWlc1MExtTnNhV1Z1ZEZrcE8xeHVYRzVjZEZ4MFhIUnBaaUFvZEdGeVoyVjBLU0I3WEc1Y2RGeDBYSFJjZEhKbFkyOXlaQ0E5SUdWdWRHbDBlUzVoWTNScGIyNWhZbXhsY3k1cGRHVnRLSFJoY21kbGRDazdYRzVjYmx4MFhIUmNkRngwYVdZZ0tISmxZMjl5WkNrZ2UxeHVYSFJjZEZ4MFhIUmNkRjlsZG1WdWRDNTBZWEpuWlhSVFkyOXdaU0E5SUdWdWRHbDBlVHRjYmx4MFhIUmNkRngwWEhSbGJuUnBkSGt1WlhabGJuUWdQU0JmWlhabGJuUTdYRzVjZEZ4MFhIUmNkRngwWlhaaGJFRmpkR2x2YmloeVpXTnZjbVF1WVdOMGFXOXVMQ0JsYm5ScGRIa3BPMXh1WEhSY2RGeDBYSFJjZEdWdWRHbDBlUzVsZG1WdWRDQTlJRzUxYkd3N1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMWNibHgwWEhSOUtUdGNibHgwZlZ4dVhHNWNkR1oxYm1OMGFXOXVJR2RsZEZKbFkyOXlaRUo1SUNoZmEyVjVMQ0JmYldWdFltVnlMQ0JmWTI5c2JHVmpkR2x2YmlrZ2UxeHVYSFJjZEhaaGNpQnBMQ0J5WldOdmNtUTdYRzVjYmx4MFhIUnBaaUFvWDJOdmJHeGxZM1JwYjI0cElIdGNibHgwWEhSY2RHWnZjaUFvYVQwd095QnlaV052Y21RZ1BTQmZZMjlzYkdWamRHbHZibHRwWFRzZ2FTczlNU2tnZTF4dVhIUmNkRngwWEhScFppQW9jbVZqYjNKa1cxOXJaWGxkSUQwOVBTQmZiV1Z0WW1WeUtTQnlaWFIxY200Z2NtVmpiM0prTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4dVhIUmNkSEpsZEhWeWJpQnVkV3hzTzF4dVhIUjlYRzVjYmx4MFpuVnVZM1JwYjI0Z2NtVnRiM1psVW1WamIzSmtJQ2hmY21WamIzSmtMQ0JmWTI5c2JHVmpkR2x2YmlrZ2UxeHVYSFJjZEhaaGNpQnBibVJsZUR0Y2JseHVYSFJjZEdsdVpHVjRJRDBnWDJOdmJHeGxZM1JwYjI0dWFXNWtaWGhQWmloZmNtVmpiM0prS1R0Y2JseDBYSFJwWmlBb2ZtbHVaR1Y0S1NCZlkyOXNiR1ZqZEdsdmJpNXpjR3hwWTJVb2FXNWtaWGdzSURFcE8xeHVYSFI5WEc1Y2JseDBablZ1WTNScGIyNGdZMkZ3ZEhWeVpVUnliM0JoWW14bGN5QW9YM05qYjNCbEtTQjdYRzVjZEZ4MGRtRnlJR052Ykd4bFkzUnBiMjQ3WEc1Y2JseDBYSFJqYjJ4c1pXTjBhVzl1SUQwZ1cxMDdYRzVjYmx4MFhIUmZjMk52Y0dVdVptbHVaQ2duUGlCYmNHd3RjR3gxWTJ0ZEp5a3VaV0ZqYUNobWRXNWpkR2x2YmlBb0tTQjdYRzVjZEZ4MFhIUjJZWElnYm1GdFpUdGNibHh1WEhSY2RGeDBibUZ0WlNBOUlDUW9kR2hwY3lrdVlYUjBjaWduY0d3dGNHeDFZMnNuS1R0Y2JseHVYSFJjZEZ4MFkyOXNiR1ZqZEdsdmJpNXdkWE5vS0hSb2FYTXBPMXh1WEhSY2RGeDBZMjlzYkdWamRHbHZibHR1WVcxbFhTQTlJSFJvYVhNN1hHNWNkRngwZlNrN1hHNWNibHgwWEhSeVpYUjFjbTRnWTI5c2JHVmpkR2x2Ymp0Y2JseDBmVnh1WEc1Y2RHWjFibU4wYVc5dUlIQnNkV05yUVc1a1JISnZjQ0FvWDJSeWIzQmhZbXhsY3l3Z1gzUmxiWEJzWVhSbEtTQjdYRzVjZEZ4MEpDaGZkR1Z0Y0d4aGRHVXBMbVpwYm1Rb0oxdHdiQzFrY205d1hTY3BMbVZoWTJnb1puVnVZM1JwYjI0Z0tDa2dlMXh1WEhSY2RGeDBkbUZ5SUNSdWIyUmxMQ0J1WVcxbExDQmtjbTl3WVdKc1pUdGNibHh1WEhSY2RGeDBKRzV2WkdVZ1BTQWtLSFJvYVhNcE8xeHVYSFJjZEZ4MGJtRnRaU0E5SUNSdWIyUmxMbUYwZEhJb0ozQnNMV1J5YjNBbktUdGNibHgwWEhSY2RHUnliM0JoWW14bElEMGdYMlJ5YjNCaFlteGxjMXR1WVcxbFhUdGNibHh1WEhSY2RGeDBhV1lnS0dSeWIzQmhZbXhsS1NCN1hHNWNkRngwWEhSY2RDUnViMlJsTG5KbGNHeGhZMlZYYVhSb0tHUnliM0JoWW14bExtTm9hV3hrY21WdUtUdGNibHgwWEhSY2RIMWNibHgwWEhSOUtUdGNibHgwZlZ4dVhHNWNkQzh2SUZCeWIzUmxZM1JsWkZ4dVhIUm1kVzVqZEdsdmJpQnNiMkZrUTI5dGNHOXVaVzUwUVhOelpYUnpJQ2hmYm1GdFpTd2dYMk5oYkd4aVlXTnJLU0I3WEc1Y2RGeDBkbUZ5SUhOamIzQmxMQ0J3WVhSb0xDQjBiM1JoYkZKbGNYVmxjM1J6TENCMGNtRnVjMk5zZFdSbFRXOWtaU3dnWkhKdmNHRmliR1Z6TzF4dVhHNWNkRngwWm5WdVkzUnBiMjRnY21WaFpIa2dLQ2tnZTF4dVhIUmNkRngwY21WaFpIa3VjM1JoZEhWeklDczlNVHRjYmx4dVhIUmNkRngwYVdZZ0tISmxZV1I1TG5OMFlYUjFjeUE5UFQwZ2RHOTBZV3hTWlhGMVpYTjBjeWtnZTF4dVhIUmNkRngwWEhScFppQW9YMk5oYkd4aVlXTnJLU0I3WEc1Y2RGeDBYSFJjZEZ4MFgyTmhiR3hpWVdOckxtTmhiR3dvYzJOdmNHVXNJRjl1WVcxbEtUdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHh1WEhSY2RIUnZkR0ZzVW1WeGRXVnpkSE1nUFNBd08xeHVYSFJjZEhOamIzQmxJRDBnZEdocGN6dGNibHgwWEhSd1lYUm9JRDBnWjJGdFpTNWpiMjVtYVdjb0oyTnZiWEJ2Ym1WdWRFUnBjbVZqZEc5eWVTY3BLMTl1WVcxbEt5Y3ZKenRjYmx4MFhIUmtjbTl3WVdKc1pYTWdQU0JqWVhCMGRYSmxSSEp2Y0dGaWJHVnpLSFJvYVhNcE8xeHVYSFJjZEhSeVlXNXpZMngxWkdWTmIyUmxJRDBnWkhKdmNHRmliR1Z6TG14bGJtZDBhQ0EvSUhSb2FYTXVWRkpCVGxORFRGVkVSVjlRVEZWRFN5QTZJSFJvYVhNdWNISnZjR1Z5ZEdsbGN5NTBjbUZ1YzJOc2RXUmxPMXh1WEhSY2RISmxZV1I1TG5OMFlYUjFjeUE5SURBN1hHNWNibHgwWEhScFppQW9JWFJvYVhNdVkyaHBiR1J5Wlc0b0tTNXNaVzVuZEdnZ2ZId2dkSEpoYm5OamJIVmtaVTF2WkdVcElIdGNibHgwWEhSY2RIUnZkR0ZzVW1WeGRXVnpkSE1yUFRFN1hHNWNkRngwWEhRa0tDYzhaR2wyUGljcExteHZZV1FvY0dGMGFDc25kR1Z0Y0d4aGRHVXVhSFJ0YkNjc0lHWjFibU4wYVc5dUlDZ3BJSHRjYmx4MFhIUmNkRngwZG1GeUlHMWxiVzl5ZVR0Y2JseHVYSFJjZEZ4MFhIUnRaVzF2Y25rZ1BTQmJYVHRjYmx4dVhIUmNkRngwWEhSemQybDBZMmdnS0hSeVlXNXpZMngxWkdWTmIyUmxLU0I3WEc1Y2RGeDBYSFJjZEZ4MFkyRnpaU0J6WTI5d1pTNVVVa0ZPVTBOTVZVUkZYMEZRVUVWT1JEcGNibHgwWEhSY2RGeDBYSFJjZEhOamIzQmxMbUZ3Y0dWdVpDaDBhR2x6TG1Ob2FXeGtjbVZ1S1R0Y2JseDBYSFJjZEZ4MFhIUmNkR0p5WldGck8xeHVYRzVjZEZ4MFhIUmNkRngwWTJGelpTQnpZMjl3WlM1VVVrRk9VME5NVlVSRlgxQlNSVkJGVGtRNlhHNWNkRngwWEhSY2RGeDBYSFJ6WTI5d1pTNXdjbVZ3Wlc1a0tIUm9hWE11WTJocGJHUnlaVzRwTzF4dVhIUmNkRngwWEhSY2RGeDBZbkpsWVdzN1hHNWNkRngwWEhSY2RGeDBYSFJjYmx4MFhIUmNkRngwWEhSallYTmxJSE5qYjNCbExsUlNRVTVUUTB4VlJFVmZVRXhWUTBzNlhHNWNkRngwWEhSY2RGeDBYSFJ3YkhWamEwRnVaRVJ5YjNBb1pISnZjR0ZpYkdWekxDQjBhR2x6S1R0Y2JseDBYSFJjZEZ4MFhIUmNkSE5qYjNCbExtVnRjSFI1S0NrdVlYQndaVzVrS0hSb2FYTXVZMmhwYkdSeVpXNHBPMXh1WEhSY2RGeDBYSFJjZEZ4MFluSmxZV3M3WEc1Y2JseDBYSFJjZEZ4MFhIUmpZWE5sSUhOamIzQmxMbFJTUVU1VFEweFZSRVZmVWtWUVRFRkRSVHBjYmx4MFhIUmNkRngwWEhSY2RITmpiM0JsTG1WdGNIUjVLQ2t1WVhCd1pXNWtLSFJvYVhNdVkyaHBiR1J5Wlc0cE8xeHVYSFJjZEZ4MFhIUmNkRngwWW5KbFlXczdYRzVjYmx4MFhIUmNkRngwWEhSa1pXWmhkV3gwT2x4dVhIUmNkRngwWEhSY2RGeDBhV1lnS0hSeVlXNXpZMngxWkdWTmIyUmxLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkSEJzZFdOclFXNWtSSEp2Y0NodVpYY2dLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhSMGFHbHpXM1J5WVc1elkyeDFaR1ZOYjJSbFhTQTlJSE5qYjNCbExtNXZaR1VvS1R0Y2JseDBYSFJjZEZ4MFhIUmNkRngwZlNrc0lIUm9hWE1wTzF4dVhIUmNkRngwWEhSY2RGeDBYSFJ6WTI5d1pTNWxiWEIwZVNncExtRndjR1Z1WkNoMGFHbHpMbU5vYVd4a2NtVnVLVHRjYmx4MFhIUmNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFJjZEZ4MFpXeHpaU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkSE5qYjNCbExtVnRjSFI1S0NrdVlYQndaVzVrS0hSb2FYTXVZMmhwYkdSeVpXNHBPMXh1WEhSY2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmNkRngwWEc1Y2RGeDBYSFJjZEgxY2JseHVYSFJjZEZ4MFhIUnpZMjl3WlM1bWFXNWtUM2R1S0NkYmNHd3RZMjl0Y0c5dVpXNTBYU2NwTG1WaFkyZ29ablZ1WTNScGIyNGdLQ2tnZTF4dVhIUmNkRngwWEhSY2RIWmhjaUJ1WVcxbE8xeHVYRzVjZEZ4MFhIUmNkRngwYm1GdFpTQTlJQ1FvZEdocGN5a3VZWFIwY2lnbmNHd3RZMjl0Y0c5dVpXNTBKeWs3WEc1Y2JseDBYSFJjZEZ4MFhIUnBaaUFvZm0xbGJXOXllUzVwYm1SbGVFOW1LRzVoYldVcEtTQnlaWFIxY200N1hHNWNibHgwWEhSY2RGeDBYSFJ0WlcxdmNua3VjSFZ6YUNodVlXMWxLVHRjYmx4dVhIUmNkRngwWEhSY2RIUnZkR0ZzVW1WeGRXVnpkSE1yUFRFN1hHNWNibHgwWEhSY2RGeDBYSFJuWVcxbExtTnZiWEJ2Ym1WdWRDNXNiMkZrS0c1aGJXVXNJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkSEpsWVdSNUtDazdYRzVjZEZ4MFhIUmNkRngwZlNrN1hHNWNkRngwWEhSY2RIMHBPMXh1WEhSY2RGeDBYSFJ5WldGa2VTZ3BPMXh1WEhSY2RGeDBmU2s3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBhV1lnS0NFa0tDZHpkSGxzWlZ0d2JDMW1iM0l0WTI5dGNHOXVaVzUwUFZ3aUp5dGZibUZ0WlNzblhDSmRKeWt1YkdWdVozUm9JQ1ltSUdkaGJXVXVZMjl1Wm1sbktDZHphRzkxYkdSTWIyRmtRMjl0Y0c5dVpXNTBVM1I1YkdWekp5a2dJVDA5SUdaaGJITmxLU0I3WEc1Y2RGeDBYSFIwYjNSaGJGSmxjWFZsYzNSekt6MHhPMXh1WEhSY2RGeDBKQ2duUEhOMGVXeGxJSFI1Y0dVOVhDSjBaWGgwTDJOemMxd2lJSEJzTFdadmNpMWpiMjF3YjI1bGJuUTlYQ0luSzE5dVlXMWxLeWRjSWo0bktWeHVYSFJjZEZ4MFhIUXViRzloWkNod1lYUm9LeWR6ZEhsc1pTNWpjM01uTENCeVpXRmtlU2xjYmx4MFhIUmNkRngwTG1Gd2NHVnVaRlJ2S0dSdlkzVnRaVzUwTG1KdlpIa3BPMXh1WEhSY2RIMWNibHh1WEhSY2RHbG1JQ2doZEc5MFlXeFNaWEYxWlhOMGN5a2dYMk5oYkd4aVlXTnJJQ1ltSUY5allXeHNZbUZqYXk1allXeHNLSFJvYVhNc0lGOXVZVzFsS1R0Y2JseHVYSFJjZEhKbGRIVnliaUIwYUdsek8xeHVYSFI5WEc1Y2JseDBablZ1WTNScGIyNGdZMkZ3ZEhWeVpWQnliM0JsY25ScFpYTWdLQ2tnZTF4dVhIUmNkSFpoY2lCcExDQmhkSFJ5TENCdVlXMWxMQ0JqYjJ4c1pXTjBhVzl1TzF4dVhHNWNkRngwWTI5c2JHVmpkR2x2YmlBOUlDaG1kVzVqZEdsdmJpQW9LU0I3WEc1Y2RGeDBYSFJjYmx4MFhIUmNkSFJvYVhNdWFHRnpJRDBnWm5WdVkzUnBiMjRnS0Y5dVlXMWxLU0I3WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUFoSVg1MGFHbHpMbWx1WkdWNFQyWW9YMjVoYldVcE8xeHVYSFJjZEZ4MGZUdGNibHh1WEhSY2RGeDBjbVYwZFhKdUlIUm9hWE03WEc1Y2JseDBYSFI5S1M1allXeHNLRnRkS1R0Y2JseHVYSFJjZEdadmNpQW9hVDB3T3lCaGRIUnlJRDBnZEdocGN5NGtaV3h6V3pCZExtRjBkSEpwWW5WMFpYTmJhVjA3SUdrclBURXBJSHRjYmx4MFhIUmNkQzh2SUVrZ1pYaHdiR2xqYVhSc2VTQjNZVzUwSUdsMElIUnZJR0psSUdGMElIUm9aU0JpWldkcGJtNXBibWN1WEc1Y2RGeDBYSFJwWmlBb1lYUjBjaTV1WVcxbExtbHVaR1Y0VDJZb0ozQnNMU2NwSUQwOVBTQXdLU0I3WEc1Y2RGeDBYSFJjZEc1aGJXVWdQU0JoZEhSeUxtNWhiV1V1YzJ4cFkyVW9NeWs3WEc1Y2RGeDBYSFJjZEdOdmJHeGxZM1JwYjI1YmRYUnBiQzUwY21GdWMyWnZjbTFKWkNodVlXMWxMQ0IwY25WbEtWMGdQU0JoZEhSeUxuWmhiSFZsTzF4dVhIUmNkRngwWEhSY2JseDBYSFJjZEZ4MFkyOXNiR1ZqZEdsdmJpNXdkWE5vS0c1aGJXVXBPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHh1WEhSY2RHbG1JQ2hqYjJ4c1pXTjBhVzl1TG14bGJtZDBhQ2tnZEdocGN5NXdjbTl3WlhKMGFXVnpJRDBnWTI5c2JHVmpkR2x2Ymp0Y2JseHVYSFJjZEhKbGRIVnliaUIwYUdsek8xeHVYSFI5WEc1Y2JseDBablZ1WTNScGIyNGdhVzVwZEdsaGJHbDZaVVZ1ZEdsMGFXVnpJQ2dwSUh0Y2JseDBYSFJwWmlBb0lYUm9hWE11YUdGelQzZHVVSEp2Y0dWeWRIa29KMlZ1ZEdsMGFXVnpKeWtwSUhKbGRIVnliaUIwYUdsek8xeHVYRzVjZEZ4MGRHaHBjeTVsYm5ScGRHbGxjeTVtYjNKRllXTm9LSFJvYVhNdVltbHVaQ2htZFc1amRHbHZiaUFvWDNKbFkyOXlaQ3dnWDJsdVpHVjRLU0I3WEc1Y2RGeDBYSFIyWVhJZ0pHNXZaR1VzSUdsdWMzUmhibU5sTENCcFpDd2djWFZsY25rc0lHbHVaR1Y0TzF4dVhHNWNkRngwWEhRa2JtOWtaU0E5SUhSb2FYTXVabWx1WkU5M2JpaGZjbVZqYjNKa0xuTmxiR1ZqZEc5eUtUdGNibHgwWEhSY2RIRjFaWEo1SUQwZ1d5Y2pKeXRmY21WamIzSmtMbk5sYkdWamRHOXlMQ0FuVzNCc0xXbGtQU2NyWDNKbFkyOXlaQzV6Wld4bFkzUnZjaXNuWFNjc0lDZGJjR3d0WTI5dGNHOXVaVzUwUFNjclgzSmxZMjl5WkM1elpXeGxZM1J2Y2lzblhTY3NJQ2RiY0d3dEp5dGZjbVZqYjNKa0xuTmxiR1ZqZEc5eUt5ZGRKMTA3WEc1Y2RGeDBYSFJwYm1SbGVDQTlJREE3WEc1Y2JseDBYSFJjZEhkb2FXeGxJQ2doSkc1dlpHVXViR1Z1WjNSb0tTQjdYRzVjZEZ4MFhIUmNkR2xtSUNocGJtUmxlQ0E5UFQwZ2NYVmxjbmt1YkdWdVozUm9LU0I3WEc1Y2RGeDBYSFJjZEZ4MGRHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVZXNWhZbXhsSUhSdklHeHZZMkYwWlNCbGJuUnBkSGtnZDJsMGFDQnpaV3hsWTNSdmNsd2lMQ0JmY21WamIzSmtMbk5sYkdWamRHOXlLVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhRa2JtOWtaU0E5SUhSb2FYTXVabWx1WkU5M2JpaHhkV1Z5ZVZ0cGJtUmxlRjBwTzF4dVhIUmNkRngwWEhScGJtUmxlQ3M5TVR0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MGFXWWdLQ0ZUWTI5d1pTNXBjMUJ5YjNSdmRIbHdaVTltS0Y5eVpXTnZjbVFwS1NCN1hHNWNkRngwWEhSY2RHbHVjM1JoYm1ObElEMGdZM0psWVhSbFJXNTBhWFI1TG1OaGJHd29kR2hwY3l3Z0pHNXZaR1VzSUY5eVpXTnZjbVF1YVcxd2JHVnRaVzUwWVhScGIyNHBPMXh1WEc1Y2RGeDBYSFJjZEdsbUlDZ2hhVzV6ZEdGdVkyVXVhWE5TWldGa2VTa2dlMXh1WEhSY2RGeDBYSFJjZEhSb2FYTXVZWE56WlhSUmRXVjFaUzVoWkdRb2FXNXpkR0Z1WTJVcE8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRnh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJsYkhObElIdGNibHgwWEhSY2RGeDBhVzV6ZEdGdVkyVWdQU0JmY21WamIzSmtPMXh1WEhSY2RGeDBmVnh1WEhSY2RGeDBYRzVjZEZ4MFhIUnBaQ0E5SUhWMGFXd3VkSEpoYm5ObWIzSnRTV1FvYVc1emRHRnVZMlV1YVdRb0tTd2dkSEoxWlNrN1hHNWNkRngwWEhScFppQW9hV1FwSUhWMGFXd3VZWE56YVdkdVVtVm1LSFJvYVhNc0lHbGtMQ0JwYm5OMFlXNWpaU2s3WEc1Y2RGeDBmU2twTzF4dVhHNWNkRngwY21WMGRYSnVJSFJvYVhNN1hHNWNkSDFjYmx4dVhIUm1kVzVqZEdsdmJpQm9ZVzVrYkdWUWNtOXdaWEowYVdWeklDZ3BJSHRjYmx4MFhIUjJZWElnYzJOdmNHVXNJSEJ5YjNCbGNuUjVMQ0JvWVc1a2JHVnlPMXh1WEc1Y2RGeDBjMk52Y0dVZ1BTQjBhR2x6TzF4dVhHNWNkRngwYVdZZ0tIUm9hWE11YUdGelQzZHVVSEp2Y0dWeWRIa29KM0J5YjNCbGNuUnBaWE1uS1NrZ2UxeHVYSFJjZEZ4MGRHaHBjeTV3Y205d1pYSjBhV1Z6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0Y5dVlXMWxLU0I3WEc1Y2RGeDBYSFJjZEdoaGJtUnNaWElnUFNCelkyOXdaUzV3Y205d1pYSjBlVWhoYm1Sc1pYSnpXMTl1WVcxbFhUdGNibHgwWEhSY2RGeDBhV1lnS0doaGJtUnNaWElwSUdoaGJtUnNaWEl1WTJGc2JDaHpZMjl3WlN3Z2MyTnZjR1V1SkdWc2Mxc3dYU3dnWDI1aGJXVXNJSE5qYjNCbExuQnliM0JsY25ScFpYTmJYMjVoYldWZEtUdGNibHgwWEhSY2RIMHBPMXh1WEhSY2RIMWNibHh1WEhSY2RHbG1JQ2gwYUdsekxuQnliM0JsY25SNVNHRnVaR3hsY25NcElIdGNibHgwWEhSY2RHWnZjaUFvY0hKdmNHVnlkSGtnYVc0Z2RHaHBjeTV3Y205d1pYSjBlVWhoYm1Sc1pYSnpLU0I3WEc1Y2RGeDBYSFJjZEM4dklHOXViSGtnWlhoamJHbGtaU0J0WlcxaVpYSnpJRzl1SUhSb1pTQmlZWE5sSUhSNWNHVmNibHgwWEhSY2RGeDBhV1lnS0VKaGMybGpMbWhoYzA5M2JsQnliM0JsY25SNUtIQnliM0JsY25SNUtTa2dZMjl1ZEdsdWRXVTdYRzVjYmx4MFhIUmNkRngwYUdGdVpHeGxjaUE5SUhSb2FYTXVjSEp2Y0dWeWRIbElZVzVrYkdWeWMxdHdjbTl3WlhKMGVWMDdYRzVjYmx4MFhIUmNkRngwZEdocGN5NW1hVzVrS0NkYmNHd3RKeXR3Y205d1pYSjBlU3NuWFNjcExtVmhZMmdvWm5WdVkzUnBiMjRnS0NrZ2UxeHVYSFJjZEZ4MFhIUmNkSFpoY2lCaGRIUnlPMXh1WEc1Y2RGeDBYSFJjZEZ4MGFXWWdLSE5qYjNCbElEMDlQU0FrS0hSb2FYTXBMbk5qYjNCbEtDa3BJSHRjYmx4MFhIUmNkRngwWEhSY2RHRjBkSElnUFNCMGFHbHpMbUYwZEhKcFluVjBaWE11WjJWMFRtRnRaV1JKZEdWdEtDZHdiQzBuSzNCeWIzQmxjblI1S1R0Y2JseHVYSFJjZEZ4MFhIUmNkRngwYVdZZ0tHaGhibVJzWlhJcElHaGhibVJzWlhJdVkyRnNiQ2h6WTI5d1pTd2dkR2hwY3l3Z2NISnZjR1Z5ZEhrc0lHRjBkSEl1ZG1Gc2RXVXBPMXh1WEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MGZTazdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZWeHVYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTTdYRzVjZEgxY2JseHVYSFJtZFc1amRHbHZiaUJwYm5admEyVk1iMk5oYkNBb1gyNWhiV1VwSUh0Y2JseDBYSFIyWVhJZ1lYSm5jeXdnYjNkdVpYSTdYRzVjYmx4MFhIUmhjbWR6SUQwZ1cxMHVjMnhwWTJVdVkyRnNiQ2hoY21kMWJXVnVkSE1zSURFcE8xeHVYRzVjZEZ4MGFXWWdLSFJvYVhNdWFYTk5aVzFpWlhKVFlXWmxLRjl1WVcxbEtTa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlIUm9hWE5iWDI1aGJXVmRMbUZ3Y0d4NUtIUm9hWE1zSUdGeVozVnRaVzUwY3lrN1hHNWNkRngwZlZ4dVhIUjlYRzVjYmx4MFpuVnVZM1JwYjI0Z2FXNXBkQ0FvS1NCN1hHNWNkRngwYVc1MmIydGxURzlqWVd3dVkyRnNiQ2gwYUdsekxDQW5kMmxzYkVsdWFYUW5LVHRjYmx4dVhIUmNkSFJvYVhNdVlYUjBZV05vUlhabGJuUnpLQ2s3WEc1Y2JseDBYSFJwYm1sMGFXRnNhWHBsUlc1MGFYUnBaWE11WTJGc2JDaDBhR2x6S1R0Y2JseDBYSFJvWVc1a2JHVlFjbTl3WlhKMGFXVnpMbU5oYkd3b2RHaHBjeWs3WEc1Y2JseDBYSFIwYUdsekxuZGhkR05vUVhOelpYUnpLQ2s3WEc1Y2RGeDBkR2hwY3k1allYQjBkWEpsUVhWa2FXOUJjM05sZEhNb0tUdGNibHgwWEhSMGFHbHpMbU5oY0hSMWNtVlNaV1psY21WdVkyVnpLQ2s3WEc1Y2JseDBYSFIwYUdsekxsOWZhVzVwZENncE8xeHVYSFJjZEdsdWRtOXJaVXh2WTJGc0xtTmhiR3dvZEdocGN5d2dKMmx1YVhRbktUdGNibHh1WEhSY2RHbG1JQ2doZEdocGN5NXBjMUpsWVdSNUtTQjBhR2x6TG1GemMyVjBVWFZsZFdVdWNtVmhaSGtvS1R0Y2JseHVYSFJjZEhKbGRIVnliaUIwYUdsek8xeHVYSFI5WEc1Y2JseDBablZ1WTNScGIyNGdjbVZoWkhrZ0tDa2dlMXh1WEhSY2RIWmhjaUJ5WldGa2VVVjJaVzUwTENCbGJuUnBkR2xsY3p0Y2JseHVYSFJjZEhKbFlXUjVSWFpsYm5RZ1BTQWtMa1YyWlc1MEtDZHlaV0ZrZVNjc0lIc2dkR0Z5WjJWMFUyTnZjR1U2SUhSb2FYTWdmU2s3WEc1Y2RGeDBaVzUwYVhScFpYTWdQU0IwYUdsekxtWnBibVJQZDI0b0p5NXdiQzF6WTI5d1pTY3BMbk5qYjNCbEtDazdYRzVjYmx4MFhIUnBaaUFvWlc1MGFYUnBaWE1wSUh0Y2JseDBYSFJjZEdsbUlDaGxiblJwZEdsbGN5NXNaVzVuZEdnZ1BpQXdLU0I3WEc1Y2RGeDBYSFJjZEhSb2FYTXVaVzUwYVhScFpYTWdQU0JsYm5ScGRHbGxjenRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwWld4elpTQjdYRzVjZEZ4MFhIUmNkSFJvYVhNdVpXNTBhWFJwWlhNZ1BTQmJaVzUwYVhScFpYTmRPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHh1WEhSY2RIUm9hWE11YVhOU1pXRmtlU0E5SUhSeWRXVTdYRzVjZEZ4MGRHaHBjeTVoWkdSRGJHRnpjeWduVWtWQlJGa25LVHRjYmx4dVhIUmNkSFJvYVhNdVgxOXlaV0ZrZVNncE8xeHVYSFJjZEdsdWRtOXJaVXh2WTJGc0xtTmhiR3dvZEdocGN5d2dKM0psWVdSNUp5azdYRzVjYmx4MFhIUjBhR2x6TG5SeWFXZG5aWElvY21WaFpIbEZkbVZ1ZENrN1hHNWNkSDFjYmx4dVhIUkJZM1JwYjI1aFlteGxjeUE5SUNobWRXNWpkR2x2YmlBb0tTQjdYRzVjYmx4MFhIUjFkR2xzTG0xcGVHbHVLSFJvYVhNc0lFSmhjMmxqS1R0Y2JseHVYSFJjZEhSb2FYTXVZV1JrSUQwZ1puVnVZM1JwYjI0Z0tGOXViMlJsTENCZllXTjBhVzl1S1NCN1hHNWNkRngwWEhScFppQW9JWFJvYVhNdWFHRnpLRjl1YjJSbEtTa2dlMXh1WEhSY2RGeDBYSFIwYUdsekxuQjFjMmdvZTF4dVhIUmNkRngwWEhSY2RHNXZaR1U2SUY5dWIyUmxMRnh1WEhSY2RGeDBYSFJjZEdGamRHbHZiam9nWDJGamRHbHZibHh1WEhSY2RGeDBYSFI5S1R0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MGNtVjBkWEp1SUhSb2FYTTdYRzVjZEZ4MGZUdGNibHh1WEhSY2RIUm9hWE11Y21WdGIzWmxJRDBnWm5WdVkzUnBiMjRnS0Y5dWIyUmxLU0I3WEc1Y2RGeDBYSFIyWVhJZ2FYUmxiU3dnYVc1a1pYZzdYRzVjYmx4MFhIUmNkR2wwWlcwZ1BTQjBhR2x6TG1sMFpXMG9YMjV2WkdVcE8xeHVYSFJjZEZ4MGFXNWtaWGdnUFNCMGFHbHpMbWx1WkdWNFQyWW9hWFJsYlNrN1hHNWNkRngwWEhScFppQW9mbWx1WkdWNEtTQjBhR2x6TG5Od2JHbGpaU2hwYm1SbGVDd2dNU2s3WEc1Y2JseDBYSFJjZEhKbGRIVnliaUIwYUdsek8xeHVYSFJjZEgwN1hHNWNibHgwWEhSMGFHbHpMbWwwWlcwZ1BTQm1kVzVqZEdsdmJpQW9YMjV2WkdVcElIdGNibHgwWEhSY2RIWmhjaUJwTENCcGRHVnRPMXh1WEc1Y2RGeDBYSFJtYjNJZ0tHazlNRHNnYVhSbGJTQTlJSFJvYVhOYmFWMDdJR2tyUFRFcElIdGNibHgwWEhSY2RGeDBhV1lnS0dsMFpXMHVibTlrWlNBOVBUMGdYMjV2WkdVcElISmxkSFZ5YmlCcGRHVnRPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMDdYRzVjYmx4MFhIUjBhR2x6TG1oaGN5QTlJR1oxYm1OMGFXOXVJQ2hmYm05a1pTa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlDRWhkR2hwY3k1cGRHVnRLRjl1YjJSbEtUdGNibHgwWEhSOU8xeHVYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTTdYRzVjYmx4MGZTa3VZMkZzYkNoYlhTazdYRzVjYmx4MGRHaHBjeTVVVWtGT1UwTk1WVVJGWDFKRlVFeEJRMFVnUFNBbmNtVndiR0ZqWlNjN1hHNWNkSFJvYVhNdVZGSkJUbE5EVEZWRVJWOVFVa1ZRUlU1RUlEMGdKM0J5WlhCbGJtUW5PMXh1WEhSMGFHbHpMbFJTUVU1VFEweFZSRVZmUVZCUVJVNUVJRDBnSjJGd2NHVnVaQ2M3WEc1Y2RIUm9hWE11VkZKQlRsTkRURlZFUlY5UVRGVkRTeUE5SUNkd2JIVmpheWM3WEc1Y2JseDBkR2hwY3k1aVlYTmxWSGx3WlNBOUlDZFVXVkJGWDFORFQxQkZKenRjYmx4MGRHaHBjeTVoWTNScGIyNWhZbXhsY3lBOUlHNTFiR3c3WEc1Y2RIUm9hWE11YVhOU1pXRmtlU0E5SUc1MWJHdzdYRzVjZEhSb2FYTXVhWE5EYjIxd2IyNWxiblFnUFNCbVlXeHpaVHRjYmx4MGRHaHBjeTVsYm5ScGRHbGxjeUE5SUc1MWJHdzdYRzVjZEhSb2FYTXVZWFZrYVc4Z1BTQnVkV3hzTzF4dVhIUjBhR2x6TG5CeWIzQmxjblJwWlhNZ1BTQnVkV3hzTzF4dVhIUjBhR2x6TG5CeWIzQmxjblI1U0dGdVpHeGxjbk1nUFNCdWRXeHNPMXh1WEhSMGFHbHpMbUZ6YzJWMFVYVmxkV1VnUFNCdWRXeHNPMXh1WEhSMGFHbHpMbVYyWlc1MElEMGdiblZzYkR0Y2JseDBYRzVjZEhSb2FYTXVhVzVwZEdsaGJHbDZaU0E5SUdaMWJtTjBhVzl1SUNoZmJtOWtaVjl6Wld4bFkzUnZjaXdnWDJOdmJYQnZibVZ1ZEU1aGJXVXBJSHRjYmx4MFhIUjJZWElnYzJOdmNHVTdYRzVjYmx4MFhIUnpZMjl3WlNBOUlIUm9hWE03WEc1Y2JseDBYSFIwYUdsekxtbHpVbVZoWkhrZ1BTQm1ZV3h6WlR0Y2JseDBYSFIwYUdsekxtbHpRMjl0Y0c5dVpXNTBJRDBnSVNGZlkyOXRjRzl1Wlc1MFRtRnRaVHRjYmx4MFhIUjBhR2x6TG1WMlpXNTBJRDBnYm5Wc2JEdGNibHgwWEhSMGFHbHpMbUZ6YzJWMFVYVmxkV1VnUFNCUmRXVjFaUzVqY21WaGRHVW9LVHRjYmx4MFhIUjBhR2x6TGlSbGJITWdQU0FvWDI1dlpHVmZjMlZzWldOMGIzSXVhbkYxWlhKNUtTQS9JRjl1YjJSbFgzTmxiR1ZqZEc5eUlEb2dKQ2hmYm05a1pWOXpaV3hsWTNSdmNpazdYRzVjYmx4MFhIUnBaaUFvSVhSb2FYTXVKR1ZzY3k1c1pXNW5kR2dwSUh0Y2JseDBYSFJjZEhSb2NtOTNJRzVsZHlCU1pXWmxjbVZ1WTJWRmNuSnZjaWduVlc1aFlteGxJSFJ2SUd4dlkyRjBaU0IwYUdVZ1pXeGxiV1Z1ZENCM2FYUm9JSE5sYkdWamRHOXlJQ2NyZEdocGN5NGtaV3h6TG5ObGJHVmpkRzl5S3ljdUp5azdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGRHaHBjeTVoWkdSRGJHRnpjeWduY0d3dGMyTnZjR1VnSnlzb1gyTnZiWEJ2Ym1WdWRFNWhiV1VnUHlCZlkyOXRjRzl1Wlc1MFRtRnRaU3NuTFdOdmJYQnZibVZ1ZENjZ09pQW5KeWtwTzF4dVhIUmNkSFJvYVhNdVpHRjBZU2duY0d3dGMyTnZjR1VuTENCMGFHbHpLVHRjYmx4MFhIUjBhR2x6TG1SaGRHRW9KM0JzTFdselEyOXRjRzl1Wlc1MEp5d2dJU0ZmWTI5dGNHOXVaVzUwVG1GdFpTazdYRzVjYmx4MFhIUmpZWEIwZFhKbFVISnZjR1Z5ZEdsbGN5NWpZV3hzS0hSb2FYTXBPMXh1WEhSY2RGeHVYSFJjZEdsbUlDaGZZMjl0Y0c5dVpXNTBUbUZ0WlNrZ2UxeHVYSFJjZEZ4MGJHOWhaRU52YlhCdmJtVnVkRUZ6YzJWMGN5NWpZV3hzS0hSb2FYTXNJRjlqYjIxd2IyNWxiblJPWVcxbExDQm1kVzVqZEdsdmJpQW9LU0I3WEc1Y2RGeDBYSFJjZEdsdWFYUXVZMkZzYkNoMGFHbHpLVHRjYmx4MFhIUmNkSDBwTzF4dVhIUmNkSDFjYmx4MFhIUmNibHgwWEhSbGJITmxJSHRjYmx4MFhIUmNkR2x1YVhRdVkyRnNiQ2gwYUdsektUdGNibHgwWEhSOVhHNWNibHgwWEhSeVpYUjFjbTRnZEdocGN6dGNibHgwZlR0Y2JseHVYSFF2THlCdmJteDVJR1p2Y2lCMWMyVWdhVzRnWW1GelpTQjBlWEJsYzF4dVhIUjBhR2x6TGw5ZmFXNXBkQ0E5SUdaMWJtTjBhVzl1SUNncElIc2djbVYwZFhKdUlIUm9hWE03SUgwN1hHNWNkSFJvYVhNdVgxOXlaV0ZrZVNBOUlHWjFibU4wYVc5dUlDZ3BJSHNnY21WMGRYSnVJSFJvYVhNN0lIMDdYRzVjYmx4MGRHaHBjeTUzYVd4c1NXNXBkQ0E5SUdaMWJtTjBhVzl1SUNncElIc2djbVYwZFhKdUlIUm9hWE03SUgwN1hHNWNkSFJvYVhNdWFXNXBkQ0E5SUdaMWJtTjBhVzl1SUNncElIc2djbVYwZFhKdUlIUm9hWE03SUgwN1hHNWNkSFJvYVhNdWNtVmhaSGtnUFNCbWRXNWpkR2x2YmlBb0tTQjdJSEpsZEhWeWJpQjBhR2x6T3lCOU8xeHVYRzVjZEhSb2FYTXVkMkYwWTJoQmMzTmxkSE1nUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzVjZEZ4MGRtRnlJSE5qYjNCbExDQmhjM05sZEZSNWNHVnpPMXh1WEc1Y2RGeDBablZ1WTNScGIyNGdkMkYwWTJnZ0tDa2dlMXh1WEhSY2RGeDBkbUZ5SUdWMlpXNTBUV0Z3TENCcGMwNXZaR1ZEYjIxd2JHVjBaVHRjYmx4dVhIUmNkRngwWm5WdVkzUnBiMjRnWTNKbFlYUmxTR0Z1Wkd4bGNpQW9YMjV2WkdVcElIdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlHWjFibU4wYVc5dUlDZ3BJSHRjYmx4MFhIUmNkRngwWEhSMllYSWdiRzloWkdWa1JYWmxiblE3WEc1Y2JseDBYSFJjZEZ4MFhIUnNiMkZrWldSRmRtVnVkQ0E5SUNRdVJYWmxiblFvSjJ4dllXUmxaQ2NzSUhzZ2RHRnlaMlYwVTJOdmNHVTZJSE5qYjNCbElIMHBPMXh1WEhSY2RGeDBYSFJjZEhOamIzQmxMbUZ6YzJWMFVYVmxkV1V1Y21WaFpIa29YMjV2WkdVdWMzSmpLVHRjYmx4MFhIUmNkRngwWEhSelkyOXdaUzUwY21sbloyVnlLR3h2WVdSbFpFVjJaVzUwTENCYlgyNXZaR1ZkS1R0Y2JseDBYSFJjZEZ4MGZUdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBaWFpsYm5STllYQWdQU0I3WEc1Y2RGeDBYSFJjZEVGVlJFbFBPaUFuYjI1c2IyRmtaV1JrWVhSaEp5eGNibHgwWEhSY2RGeDBWa2xFUlU4NklDZHZibXh2WVdSbFpHUmhkR0VuTEZ4dVhIUmNkRngwWEhSSlRVYzZJQ2R2Ym14dllXUW5YRzVjZEZ4MFhIUjlPMXh1WEc1Y2RGeDBYSFJwYzA1dlpHVkRiMjF3YkdWMFpTQTlJSHRjYmx4MFhIUmNkRngwUVZWRVNVODZJSFJvYVhNdWNtVmhaSGxUZEdGMFpTQTlQVDBnZEdocGN5NUlRVlpGWDBWT1QxVkhTRjlFUVZSQkxGeHVYSFJjZEZ4MFhIUldTVVJGVHpvZ2RHaHBjeTV5WldGa2VWTjBZWFJsSUQwOVBTQjBhR2x6TGtoQlZrVmZSVTVQVlVkSVgwUkJWRUVzWEc1Y2RGeDBYSFJjZEVsTlJ6b2dkR2hwY3k1amIyMXdiR1YwWlZ4dVhIUmNkRngwZlR0Y2JseHVYSFJjZEZ4MEx5OGdZMjl1YzI5c1pTNXNiMmNvSjJadmRXNWtJR0Z6YzJWMEp5d2dkR2hwY3k1dWIyUmxUbUZ0WlNrN1hHNWNibHgwWEhSY2RHbG1JQ2hwYzA1dlpHVkRiMjF3YkdWMFpWdDBhR2x6TG01dlpHVk9ZVzFsWFNrZ2NtVjBkWEp1TzF4dVhIUmNkRngwYVdZZ0tITmpiM0JsTG1GemMyVjBVWFZsZFdVdVlXUmtLSFJvYVhNdWMzSmpLU2tnZTF4dVhIUmNkRngwWEhRdkx5QmpiMjV6YjJ4bExteHZaeWduZDJGMFkyZ25MQ0IwYUdsekxtNXZaR1ZPWVcxbExDQjBhR2x6TG5OeVl5d2djMk52Y0dVdWFXUW9LU2s3WEc1Y2RGeDBYSFJjZEhSb2FYTmJaWFpsYm5STllYQmJkR2hwY3k1dWIyUmxUbUZ0WlYxZElEMGdZM0psWVhSbFNHRnVaR3hsY2loMGFHbHpLVHRjYmx4MFhIUmNkRngwZEdocGN5NXZibVZ5Y205eUlEMGdablZ1WTNScGIyNGdLQ2tnZTF4dVhIUmNkRngwWEhSY2RHTnZibk52YkdVdVpYSnliM0lvSjBsdFlXZGxJR1poYVd4bFpDQjBieUJzYjJGa0p5d2dkR2hwY3k1emNtTXBPMXh1WEhSY2RGeDBYSFI5TzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4dVhIUmNkSE5qYjNCbElEMGdkR2hwY3p0Y2JseDBYSFJoYzNObGRGUjVjR1Z6SUQwZ1d5ZEpUVWNuTENBblFWVkVTVThuTENBblZrbEVSVThuWFR0Y2JseHVYSFJjZEhSb2FYTXVaV0ZqYUNobWRXNWpkR2x2YmlBb0tTQjdYRzVjZEZ4MFhIUnBaaUFvZm1GemMyVjBWSGx3WlhNdWFXNWtaWGhQWmloMGFHbHpMbTV2WkdWT1lXMWxLU2tnZTF4dVhIUmNkRngwWEhSM1lYUmphQzVqWVd4c0tIUm9hWE1wTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDBwTzF4dVhHNWNkRngwZEdocGN5NW1hVzVrVDNkdUtHRnpjMlYwVkhsd1pYTXVhbTlwYmlnbkxDY3BLUzVsWVdOb0tHWjFibU4wYVc5dUlDZ3BJSHRjYmx4MFhIUmNkSGRoZEdOb0xtTmhiR3dvZEdocGN5azdYRzVjZEZ4MGZTazdYRzVjYmx4MFhIUnlaWFIxY200Z2RHaHBjenRjYmx4MGZUdGNibHh1WEhSMGFHbHpMbUYwZEdGamFFVjJaVzUwY3lBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmx4MFhIUjJZWElnYzJOdmNHVTdYRzVjYmx4MFhIUjBhR2x6TG5CeWIzUnZLQ2s3WEc1Y2JseDBYSFJ6WTI5d1pTQTlJSFJvYVhNN1hHNWNibHgwWEhRdkx5QnBaaUFvZEdocGN5NXBjeWduSTJKbFlYSnpKeWtwSUdSbFluVm5aMlZ5TzF4dVhHNWNkRngwZEdocGN5NWhjM05sZEZGMVpYVmxMbTl1S0NkamIyMXdiR1YwWlNjc0lHWjFibU4wYVc5dUlDZ3BJSHRjYmx4MFhIUmNkSE5qYjNCbExtRnpjMlYwVVhWbGRXVXViMlptS0NrN1hHNWNkRngwWEhSeVpXRmtlUzVqWVd4c0tITmpiM0JsS1R0Y2JseDBYSFI5S1R0Y2JseHVYSFJjZEhSb2FYTXViMjRvSjNKbFlXUjVKeXdnWm5WdVkzUnBiMjRnS0Y5bGRtVnVkQ2tnZTF4dVhIUmNkRngwTHk4Z1kyOXVjMjlzWlM1c2IyY29KeW9nY21WaFpIazZKeXdnZEdocGN5NWhaR1J5WlhOektDa3NJQ2NzSUhSaGNtZGxkRG9uTENCZlpYWmxiblF1ZEdGeVoyVjBVMk52Y0dVdVlXUmtjbVZ6Y3lncEtUdGNibHh1WEhSY2RGeDBhV1lnS0hSb2FYTXVhR0Z6S0Y5bGRtVnVkQzUwWVhKblpYUlRZMjl3WlNrZ0ppWWdkR2hwY3k1aGMzTmxkRkYxWlhWbExtaGhjeWhmWlhabGJuUXVkR0Z5WjJWMFUyTnZjR1VwS1NCN1hHNWNkRngwWEhSY2RDOHZJR052Ym5OdmJHVXViRzluS0NjcUtpQjFjR1JoZEdVZ2NYVmxkV1VuTENCZlpYWmxiblF1ZEdGeVoyVjBVMk52Y0dVdVlXUmtjbVZ6Y3lncExDQjBhR2x6TG1GemMyVjBVWFZsZFdVdWJHVnVaM1JvS1R0Y2JseDBYSFJjZEZ4MGRHaHBjeTVoYzNObGRGRjFaWFZsTG5KbFlXUjVLRjlsZG1WdWRDNTBZWEpuWlhSVFkyOXdaU2s3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEdsbUlDZ2hkR2hwY3k1aGMzTmxkRkYxWlhWbExteGxibWQwYUNBbUppQjBhR2x6TG1selVtVmhaSGtwSUhSb2FYTXViMlptS0NkeVpXRmtlU2NwTzF4dVhIUmNkSDBwTzF4dVhHNWNkRngwY21WMGRYSnVJSFJvYVhNN1hHNWNkSDA3WEc1Y2JseDBkR2hwY3k1allYQjBkWEpsVW1WbVpYSmxibU5sY3lBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmx4MFhIUjBhR2x6TG1acGJtUlBkMjRvSjF0cFpGMHNJRnR3YkMxcFpGMG5LUzVsWVdOb0tIUm9hWE11WW1sdVpDaG1kVzVqZEdsdmJpQW9YMmx1WkdWNExDQmZibTlrWlNrZ2UxeHVYSFJjZEZ4MGRtRnlJQ1J1YjJSbExDQnBaRHRjYmx4dVhIUmNkRngwYVdZZ0tGOXViMlJsTG01dlpHVk9ZVzFsSUQwOVBTQW5RVlZFU1U4bktTQnlaWFIxY200N1hHNWNibHgwWEhSY2RDUnViMlJsSUQwZ0pDaGZibTlrWlNrN1hHNWNkRngwWEhScFpDQTlJQ1J1YjJSbExtRjBkSElvSjJsa0p5a2dmSHdnSkc1dlpHVXVZWFIwY2lnbmNHd3RhV1FuS1R0Y2JseHVYSFJjZEZ4MGFXWWdLQ0YwYUdselcybGtYU2tnZTF4dVhIUmNkRngwWEhSMWRHbHNMbUZ6YzJsbmJsSmxaaWgwYUdsekxDQnBaQ3dnSkc1dlpHVXVaR0YwWVNnbmNHd3RjMk52Y0dVbktTQjhmQ0FrYm05a1pTazdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZTa3BPMXh1WEhSOU8xeHVYRzVjZEhSb2FYTXVZMkZ3ZEhWeVpVRjFaR2x2UVhOelpYUnpJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVYSFJjZEhaaGNpQnpZMjl3WlN3Z2MyTnlaV1Z1TzF4dVhHNWNkRngwYzJOdmNHVWdQU0IwYUdsek8xeHVYSFJjZEhOamNtVmxiaUE5SUhSNWNHVnZaaUJ6WTI5d1pTNXpZM0psWlc0Z1BUMDlJQ2R2WW1wbFkzUW5JRDhnYzJOdmNHVXVjMk55WldWdUlEb2djMk52Y0dVN1hHNWNibHgwWEhSelkyOXdaUzVtYVc1a1QzZHVLQ2RoZFdScGJ5Y3BMbVZoWTJnb1puVnVZM1JwYjI0Z0tDa2dlMXh1WEhSY2RGeDBkbUZ5SUNSdWIyUmxMQ0JwWkN3Z1lYVmthVzlVZVhCbGN6dGNibHh1WEhSY2RGeDBhV1lnS0NGelkyOXdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTZ25ZWFZrYVc4bktTa2dlMXh1WEhSY2RGeDBYSFJ6WTI5d1pTNWhkV1JwYnlBOUlIdGNibHgwWEhSY2RGeDBYSFJpWVdOclozSnZkVzVrT2lCdWRXeHNMRnh1WEhSY2RGeDBYSFJjZEhadmFXTmxUM1psY2pvZ2JuVnNiQ3hjYmx4MFhIUmNkRngwWEhSelpuZzZJRzUxYkd4Y2JseDBYSFJjZEZ4MGZUdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBKRzV2WkdVZ1BTQWtLSFJvYVhNcE8xeHVYSFJjZEZ4MGFXUWdQU0IxZEdsc0xuUnlZVzV6Wm05eWJVbGtLQ1J1YjJSbExtbGtLQ2tzSUhSeWRXVXBPMXh1WEhSY2RGeDBZWFZrYVc5VWVYQmxjeUE5SUZzblltRmphMmR5YjNWdVpDY3NJQ2QyYjJsalpTMXZkbVZ5Snl3Z0ozTm1lQ2RkTzF4dVhHNWNkRngwWEhSaGRXUnBiMVI1Y0dWekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tGOTBlWEJsS1NCN1hHNWNkRngwWEhSY2RHbG1JQ2drYm05a1pTNW9ZWE5EYkdGemN5aGZkSGx3WlNrcElIdGNibHgwWEhSY2RGeDBYSFFrYm05a1pTNXZiaWduY0d4aGVTQndZWFZ6WlNCbGJtUmxaQ2NzSUdaMWJtTjBhVzl1SUNoZlpYWmxiblFwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkSFpoY2lCelkzSmxaVzQ3WEc1Y2JseDBYSFJjZEZ4MFhIUmNkSE5qY21WbGJpQTlJSFI1Y0dWdlppQnpZMjl3WlM1elkzSmxaVzRnUFQwOUlDZHZZbXBsWTNRbklEOGdjMk52Y0dVdWMyTnlaV1Z1SURvZ2MyTnZjR1U3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNibHgwWEhSY2RGeDBYSFJjZEhOM2FYUmphQ0FvWDJWMlpXNTBMblI1Y0dVcElIdGNibHgwWEhSY2RGeDBYSFJjZEZ4MFkyRnpaU0FuY0d4aGVTYzZYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBjMk55WldWdUxtRmtaRU5zWVhOektDZFFURUZaU1U1SElDY3JYM1I1Y0dVdWRHOVZjSEJsY2tOaGMyVW9LU2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWW5KbFlXczdYRzVjYmx4MFhIUmNkRngwWEhSY2RGeDBZMkZ6WlNBbmNHRjFjMlVuT2x4dVhIUmNkRngwWEhSY2RGeDBYSFJqWVhObElDZGxibVJsWkNjNlhHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MGMyTnlaV1Z1TG5KbGJXOTJaVU5zWVhOektDZFFURUZaU1U1SElDY3JYM1I1Y0dVdWRHOVZjSEJsY2tOaGMyVW9LU2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwWW5KbFlXczdYRzVjZEZ4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RGeDBYSFJ6WTI5d1pTNTBjbWxuWjJWeUtDUXVSWFpsYm5Rb0oyRjFaR2x2TFNjclgyVjJaVzUwTG5SNWNHVXNJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBkR0Z5WjJWME9pQWtibTlrWlZzd1hTeGNibHgwWEhSY2RGeDBYSFJjZEZ4MGRHRnlaMlYwVTJOdmNHVTZJSE5qYjNCbExGeHVYSFJjZEZ4MFhIUmNkRngwWEhSaGRXUnBiMVI1Y0dVNklGOTBlWEJsWEc1Y2RGeDBYSFJjZEZ4MFhIUjlLU2s3WEc1Y2RGeDBYSFJjZEZ4MGZTazdYRzVjYmx4MFhIUmNkRngwWEhScFppQW9KRzV2WkdVdVlYUjBjaWduY0d3dGNtVnhkV2x5WldRbktTQWhQU0J1ZFd4c0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSelkzSmxaVzR1Y21WeGRXbHlaU2drYm05a1pWc3dYU2s3WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkRngwTHk4Z1ZHaHBjeUJ3Y205d1pYSjBlU0JqWVc0Z1ltVWdaV2wwYUdWeUlHRnVJR0Z5Y21GNUlHOW1JRzV2WkdWeklHOXlJSFJvWlNCdWIyUmxMbHh1WEhSY2RGeDBYSFJjZEhWMGFXd3VZWE56YVdkdVVtVm1LSE5qYjNCbExtRjFaR2x2TENCZmRIbHdaU3dnSkc1dlpHVmJNRjBwTzF4dVhHNWNkRngwWEhSY2RGeDBMeThnVFdGclpYTWdjM1Z5WlNCMGFHVWdjSEp2Y0dWeWRIa2dhWE1nYzJWMElHOXVJSFJvWlNCbWFXNWhiQ0IyWVd4MVpTQnZaaUJ6WTI5d1pTNWhkV1JwYjF0ZmRIbHdaVjB1WEc1Y2RGeDBYSFJjZEZ4MEx5OGdWR2hwY3lCemFHOTFiR1FnWW1VZ2MyRm1aU0IwYnlCeWRXNGdiM1YwSUc5bUlIUm9aU0JqWVd4c2MzUmhZMnN1WEc1Y2RGeDBYSFJjZEZ4MGMyVjBWR2x0Wlc5MWRDaG1kVzVqZEdsdmJpQW9LU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUnBaaUFvYVdRcElIVjBhV3d1WVhOemFXZHVVbVZtS0hOamIzQmxMbUYxWkdsdlczVjBhV3d1ZEhKaGJuTm1iM0p0U1dRb1gzUjVjR1VzSUhSeWRXVXBYU3dnYVdRc0lDUnViMlJsV3pCZEtUdGNibHgwWEhSY2RGeDBYSFI5S1R0Y2JseDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MGZTazdYRzVjZEZ4MGZTazdYRzVjYmx4MFhIUnlaWFIxY200Z2MyTnZjR1U3WEc1Y2RIMDdYRzVjYmx4MGRHaHBjeTVvWVc1a2JHVlFjbTl3WlhKMGVTQTlJR1oxYm1OMGFXOXVJQ2hmYVcxd2JHVnRaVzUwWVhScGIyNHBJSHRjYmx4MFhIUnBaaUFvZEdocGN5NXdjbTl3WlhKMGVVaGhibVJzWlhKektTQjdYRzVjZEZ4MFhIUnBaaUFvZEdocGN5NW9ZWE5QZDI1UWNtOXdaWEowZVNnbmNISnZjR1Z5ZEhsSVlXNWtiR1Z5Y3ljcEtTQjdYRzVjZEZ4MFhIUmNkSE4zYVhSamFDQW9kSGx3Wlc5bUlGOXBiWEJzWlcxbGJuUmhkR2x2YmlrZ2UxeHVYSFJjZEZ4MFhIUmNkR05oYzJVZ0oyWjFibU4wYVc5dUp6cGNibHgwWEhSY2RGeDBYSFJjZEY5cGJYQnNaVzFsYm5SaGRHbHZiaTVqWVd4c0tIUm9hWE11Y0hKdmNHVnlkSGxJWVc1a2JHVnljeWs3WEc1Y2RGeDBYSFJjZEZ4MFhIUmljbVZoYXp0Y2JseHVYSFJjZEZ4MFhIUmNkR05oYzJVZ0oyOWlhbVZqZENjNlhHNWNkRngwWEhSY2RGeDBYSFIwYUdsekxuQnliM0JsY25SNVNHRnVaR3hsY25NdWJXbDRhVzRvWDJsdGNHeGxiV1Z1ZEdGMGFXOXVLVHRjYmx4MFhIUmNkRngwWEhSY2RHSnlaV0ZyTzF4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RHVnNjMlVnZTF4dVhIUmNkRngwWEhSMGFHbHpMbkJ5YjNCbGNuUjVTR0Z1Wkd4bGNuTWdQU0IwYUdsekxuQnliM0JsY25SNVNHRnVaR3hsY25NdVpYaDBaVzVrS0Y5cGJYQnNaVzFsYm5SaGRHbHZiaWs3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmVnh1WEc1Y2RGeDBaV3h6WlNCN1hHNWNkRngwWEhSMGFHbHpMbkJ5YjNCbGNuUjVTR0Z1Wkd4bGNuTWdQU0JDWVhOcFl5NWxlSFJsYm1Rb1gybHRjR3hsYldWdWRHRjBhVzl1S1R0Y2JseDBYSFI5WEc1Y2JseDBYSFJ5WlhSMWNtNGdkR2hwY3p0Y2JseDBmVHRjYmx4dVhIUjBhR2x6TG1WdWRHbDBlU0E5SUdaMWJtTjBhVzl1SUNoZmMyVnNaV04wYjNJc0lGOXBiWEJzWlcxbGJuUmhkR2x2YmlrZ2UxeHVYSFJjZEhaaGNpQkZiblJwZEhrc0lIQnliM1J2ZEhsd1pTd2dhV1E3WEc1Y2JseDBYSFJGYm5ScGRIa2dQU0JuWVcxbExuQnliM1pwWkdWRmJuUnBkSGxVZVhCbEtDazdYRzVjYmx4MFhIUnBaaUFvSVhSb2FYTXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb0oyVnVkR2wwYVdWekp5a3BJSFJvYVhNdVpXNTBhWFJwWlhNZ1BTQmJYVHRjYmx4dVhIUmNkR2xtSUNoMGFHbHpMbWhoYzA5M2JsQnliM0JsY25SNUtDY2taV3h6SnlrcElIdGNibHgwWEhSY2RIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblYyRnBkQ0IwYUdseklHaGhjMjVjWENkMElHSmxaVzRnZEdWemRHVmtMaWNwTzF4dVhIUmNkRngwY0hKdmRHOTBlWEJsSUQwZ0tFVnVkR2wwZVM1cGMxQnliM1J2ZEhsd1pVOW1LSFJvYVhNcEtTQS9JSFJvYVhNZ09pQkZiblJwZEhrN1hHNWNkRngwWEhScGJuTjBZVzVqWlNBOUlIQnliM1J2ZEhsd1pTNWxlSFJsYm1Rb1gybHRjR3hsYldWdWRHRjBhVzl1S1M1cGJtbDBhV0ZzYVhwbEtIUm9hWE11Wm1sdVpDaGZjMlZzWldOMGIzSXBLVHRjYmx4MFhIUmNkR2xrSUQwZ2RYUnBiQzUwY21GdWMyWnZjbTFKWkNocGJuTjBZVzVqWlM1cFpDZ3BLVHRjYmx4dVhIUmNkRngwTHk4Z2RHaHBjeTVsYm5ScGRHbGxjeTV3ZFhOb0tHbHVjM1JoYm1ObEtUdGNibHgwWEhSY2RHbG1JQ2hwWkNrZ2RHaHBjMXRwWkYwZ1BTQnBibk4wWVc1alpUdGNibHgwWEhSOVhHNWNibHgwWEhSbGJITmxJSHRjYmx4MFhIUmNkSFJvYVhNdVpXNTBhWFJwWlhNdWNIVnphQ2g3WEc1Y2RGeDBYSFJjZEhObGJHVmpkRzl5T2lCZmMyVnNaV04wYjNJc1hHNWNkRngwWEhSY2RHbHRjR3hsYldWdWRHRjBhVzl1T2lCZmFXMXdiR1Z0Wlc1MFlYUnBiMjVjYmx4MFhIUmNkSDBwTzF4dVhIUmNkSDFjYmx4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TzF4dVhIUjlPMXh1WEc1Y2RIUm9hWE11YUdGeklEMGdablZ1WTNScGIyNGdLRjlqYUdsc1pDa2dlMXh1WEhSY2RIWmhjaUJqYUdsc1pEdGNibHh1WEhSY2RHTm9hV3hrSUQwZ1UyTnZjR1V1YVhOUWNtOTBiM1I1Y0dWUFppaGZZMmhwYkdRcElEOGdYMk5vYVd4a0xpUmxiSE1nT2lCZlkyaHBiR1E3WEc1Y2JseDBYSFJ5WlhSMWNtNGdJU0YwYUdsekxpUmxiSE11YUdGektHTm9hV3hrS1M1c1pXNW5kR2c3WEc1Y2RIMDdYRzVjYmx4MGRHaHBjeTUwYjFOMGNtbHVaeUE5SUdaMWJtTjBhVzl1SUNncElIdGNibHgwWEhSMllYSWdkSGx3WlR0Y2JseHVYSFJjZEhSNWNHVWdQU0IwYUdsekxtSmhjMlZVZVhCbExuSmxjR3hoWTJVb0oxUlpVRVZmSnl3Z0p5Y3BPMXh1WEhSY2RIUjVjR1VnUFNCMGVYQmxMbk5zYVdObEtEQXNNU2tyZEhsd1pTNXpiR2xqWlNneEtTNTBiMHh2ZDJWeVEyRnpaU2dwTzF4dVhHNWNkRngwY21WMGRYSnVJRnNuV3ljc0lIUm9hWE11YVdRb0tTQjhmQ0IwYUdsekxtRmtaSEpsYzNNb0tTd2dKeUFuTENCMGVYQmxMQ0FuWFNkZExtcHZhVzRvSnljcE8xeHVYSFI5TzF4dVhHNWNkSFJvYVhNdWJHOW5JRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVYSFJjZEhaaGNpQmhjbWR6TzF4dVhHNWNkRngwWVhKbmN5QTlJSFYwYVd3dWRHOUJjbkpoZVNoaGNtZDFiV1Z1ZEhNcE8xeHVYRzVjZEZ4MFkyOXVjMjlzWlM1c2IyY3VZWEJ3Ykhrb1kyOXVjMjlzWlN3Z1czUm9hWE11YVdRb0tTQjhmQ0IwYUdsekxtRmtaSEpsYzNNb0tTd2dKeTBuWFM1amIyNWpZWFFvWVhKbmN5a3BPMXh1WEhSY2RISmxkSFZ5YmlCMGFHbHpPMXh1WEhSOU8xeHVYRzVjZEhSb2FYTXVhR0Z1Wkd4bFVISnZjR1Z5ZEhrb1puVnVZM1JwYjI0Z0tDa2dlMXh1WEhSY2RGeHVYSFJjZEhSb2FYTXVZMjl0Y0c5dVpXNTBJRDBnWm5WdVkzUnBiMjRnS0Y5dWIyUmxMQ0JmYm1GdFpTd2dYM1poYkhWbExDQmZjSEp2Y0dWeWRIa3BJSHRjYmx4MFhIUmNkSFpoY2lBa2JtOWtaU3dnY21WamIzSmtMQ0J6WTI5d1pTd2dhV1E3WEc1Y2JseDBYSFJjZENSdWIyUmxJRDBnSkNoZmJtOWtaU2s3WEc1Y2RGeDBYSFJjYmx4MFhIUmNkR2xtSUNnaEpHNXZaR1V1WkdGMFlTZ25jR3d0YVhORGIyMXdiMjVsYm5RbktTa2dlMXh1WEhSY2RGeDBYSFJ5WldOdmNtUWdQU0JuWVcxbExtTnZiWEJ2Ym1WdWRDNW5aWFFvWDNaaGJIVmxLVHRjYmx4dVhIUmNkRngwWEhScFppQW9jbVZqYjNKa0tTQjdYRzVjZEZ4MFhIUmNkRngwYzJOdmNHVWdQU0JqY21WaGRHVkZiblJwZEhrdVkyRnNiQ2gwYUdsekxDQWtibTlrWlN3Z2NtVmpiM0prTG1sdGNHeGxiV1Z1ZEdGMGFXOXVLVHRjYmx4MFhIUmNkRngwWEhScFpDQTlJSFYwYVd3dWRISmhibk5tYjNKdFNXUW9jMk52Y0dVdWFXUW9LU0I4ZkNCZmRtRnNkV1VzSUhSeWRXVXBPMXh1WEhSY2RGeDBYSFJjZEhWMGFXd3VZWE56YVdkdVVtVm1LSFJvYVhNc0lHbGtMQ0J6WTI5d1pTazdYRzVjYmx4MFhIUmNkRngwWEhScFppQW9JWE5qYjNCbExtbHpVbVZoWkhrcElIUm9hWE11WVhOelpYUlJkV1YxWlM1aFpHUW9jMk52Y0dVcE8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRnh1WEhSY2RGeDBYSFJsYkhObElIdGNibHgwWEhSY2RGeDBYSFIwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMEZvYUNFbktUdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmVnh1WEhSY2RIMDdYRzVjYmx4MFhIUjBhR2x6TG1GamRHbHZiaUE5SUdaMWJtTjBhVzl1SUNoZmJtOWtaU3dnWDI1aGJXVXNJRjkyWVd4MVpTa2dlMXh1WEhSY2RGeDBhV1lnS0NGMGFHbHpMbWhoYzA5M2JsQnliM0JsY25SNUtDZGhZM1JwYjI1aFlteGxjeWNwS1NCN1hHNWNkRngwWEhSY2RIUm9hWE11WVdOMGFXOXVZV0pzWlhNZ1BTQkJZM1JwYjI1aFlteGxjeTVqY21WaGRHVW9LVHRjYmx4MFhIUmNkRngwWVhSMFlXTm9RV04wYVc5dVNHRnVaR3hsY2k1allXeHNLSFJvYVhNcE8xeDBYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkSFJvYVhNdVlXTjBhVzl1WVdKc1pYTXVZV1JrS0Y5dWIyUmxMQ0JmZG1Gc2RXVXBPMXh1WEhSY2RIMDdYRzVjYmx4MFhIUjBhR2x6TG5KbGNYVnBjbVZrSUQwZ1puVnVZM1JwYjI0Z0tGOXViMlJsTENCZmJtRnRaU3dnWDNaaGJIVmxLU0I3WEc1Y2RGeDBYSFJwWmlBb2RHaHBjeTVwY3loZmJtOWtaU2twSUh0Y2JseDBYSFJjZEZ4MGRHaHBjeTV6WTNKbFpXNHVjbVZ4ZFdseVpTaDBhR2x6S1R0Y2JseDBYSFJjZEgxY2JseDBYSFI5TzF4dVhHNWNkRngwZEdocGN5NXlaWEYxYVhKbElEMGdablZ1WTNScGIyNGdLRjl1YjJSbExDQmZibUZ0WlN3Z1gzWmhiSFZsS1NCN1hHNWNkRngwWEhSMllYSWdjWFZsY25rc0lDUnViMlJsTzF4dVhHNWNkRngwWEhRdkx5QnBaaUIwYUdVZ2JtOWtaU0IzYVhSb0lIUm9aU0JoZEhSeWFXSjFkR1VnYVhNZ2RHaGxJRzV2WkdVZ1ptOXlJSFJvYVhNZ2MyTnZjR1ZjYmx4MFhIUmNkR2xtSUNoMGFHbHpMbWx6S0Y5dWIyUmxLU2tnZTF4dVhIUmNkRngwWEhSeGRXVnllU0E5SUNjalgzWmhiSFZsTENCYmNHd3RhV1E5WDNaaGJIVmxYU3dnVzNCc0xXTnZiWEJ2Ym1WdWREMWZkbUZzZFdWZEp5NXlaWEJzWVdObEtDOWZkbUZzZFdVdlp5d2dYM1poYkhWbEtUdGNibHgwWEhSY2RGeDBKRzV2WkdVZ1BTQjBhR2x6TG1acGJtUW9jWFZsY25rcE8xeHVYRzVjZEZ4MFhIUmNkR2xtSUNna2JtOWtaUzVwY3lnbllYVmthVzhzSUhacFpHVnZKeWtwSUh0Y2JseDBYSFJjZEZ4MFhIUWtibTlrWlM1bFlXTm9LSFJvYVhNdVltbHVaQ2htZFc1amRHbHZiaUFvWDJsdVpHVjRMQ0JmYm05a1pTa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MGRHaHBjeTV5WlhGMWFYSmxLRjl1YjJSbEtUdGNibHgwWEhSY2RGeDBYSFI5S1NrN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBYRzVjZEZ4MFhIUmNkR1ZzYzJVZ2UxeHVYSFJjZEZ4MFhIUmNkQ1J1YjJSbExtOXVLQ2R5WldGa2VTY3NJSFJvYVhNdVltbHVaQ2htZFc1amRHbHZiaUFvWDJWMlpXNTBLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUnBaaUFvSkc1dlpHVXVhWE1vWDJWMlpXNTBMblJoY21kbGRDa3BJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBkR2hwY3k1eVpYRjFhWEpsS0Y5bGRtVnVkQzUwWVhKblpYUlRZMjl3WlNrN1hHNWNkRngwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MGZTa3BPMXh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmVHRjYmx4dVhIUjlLVHRjYmx4dWZTazdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJSHNnVTJOdmNHVXNJR055WldGMFpVVnVkR2wwZVNCOU8xeHVYRzVjYmx4dUx5b3FJRmRGUWxCQlEwc2dSazlQVkVWU0lDb3FYRzRnS2lvZ0xpOXpiM1Z5WTJVdmRIbHdaWE12VTJOdmNHVXVhbk5jYmlBcUtpOGlYU3dpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0sXG4vKiAyNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0ZXZhbChcInZhciBfT2JqZWN0JGtleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI1KVsnZGVmYXVsdCddO1xcblxcbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKVsnZGVmYXVsdCddO1xcblxcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XFxuLyoqXFxuKiAgalFQcm94eVxcbiogIEBkZXNjIENvbnRhaW5zIGFsbCB0aGUgalF1ZXJ5IG1ldGhvZHMgdGFyZ2V0ZWQgdG93YXJkcyBhIHByb3BlcnR5IHdoaWNoIHJlZmVyZW5jZXMgYSBqUXVlcnkgb2JqZWN0LlxcbiogIEBwcm90byBCYXNpY1xcbiogIFxcbiogIE5PVEU6IEN1c3RvbSBldmVudHMgbWF5IHRyaWdnZXIgb24gc2NvcGVzXFxuKiAgdGhhdCBhbHNvIHRhcmdldHMgdGhlIHNhbWUgZWxtZW50cy4gVGVzdGluZyBuZWVkZWQuXFxuKi9cXG5cXG52YXIgX3V0aWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcXG5cXG52YXIgX3V0aWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXRpbCk7XFxuXFxudmFyIF90eXBlc0Jhc2ljID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XFxuXFxudmFyIF90eXBlc0Jhc2ljMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVzQmFzaWMpO1xcblxcbnZhciBqUVByb3h5ID0gX3R5cGVzQmFzaWMyWydkZWZhdWx0J10uZXh0ZW5kKGZ1bmN0aW9uICgpIHtcXG5cXHR2YXIgbWV0aG9kLCBleGNsdWRlO1xcblxcblxcdC8qKlxcbiAqICBAZGVzYyBDcmVhdGVzIGEgZnVuY3Rpb24gd2l0aCBhIHByb3h5IHRvIHRoZSBqUXVlcnkgbWV0aG9kLlxcbiAqICBAcGFyYW0gX25hbWUgKFN0cmluZykgVGhlIG5hbWUgb2YgdGhlIG1ldGhvZCBiZWluZyBwcm94aWVkLlxcbiAqICBAcmV0dXJuIChqUXVlcnl8KikgRWl0aGVyIGEgalF1ZXJ5IG9iamVjdCBvciB3aGF0ZXZlciB0aGUgb3JpZ2luYWwgbWV0aG9kIHJldHVybnMuXFxuICogIEBwcml2YXRlXFxuICovXFxuXFx0ZnVuY3Rpb24gY3JlYXRlUHJveHlGdW5jdGlvbihfbmFtZSkge1xcblxcdFxcdHJldHVybiBmdW5jdGlvbiAoKSB7XFxuXFx0XFx0XFx0dmFyIHJlc3BvbnNlO1xcblxcblxcdFxcdFxcdC8vIFRoaXMgbWFrZXMgc3VyZSB5b3VyIG5vdCBjYWxsaW5nIGFueSBqUXVlcnkgbWV0aG9kcyBiZWZvcmUgaW5pdGlhbGl6YXRpb24uXFxuXFx0XFx0XFx0aWYgKCF0aGlzLmhhc093blByb3BlcnR5KCckZWxzJykpIHtcXG5cXHRcXHRcXHRcXHRpZiAoX25hbWUgPT09ICdvbicpIHtcXG5cXHRcXHRcXHRcXHRcXHR0aGlzLnJlZ2lzdGVySGFuZGxlcihhcmd1bWVudHMpO1xcblxcdFxcdFxcdFxcdH0gZWxzZSB7XFxuXFx0XFx0XFx0XFx0XFx0dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCdVbmFibGUgdG8gaW52b2tlICcgKyBfbmFtZSArICcgYmVjYXVzZSB0aGUgc2NvcGUgaXMgbm90IGluaXRpYWxpemVkLicpO1xcblxcdFxcdFxcdFxcdH1cXG5cXHRcXHRcXHRcXHRyZXR1cm47XFxuXFx0XFx0XFx0fVxcblxcblxcdFxcdFxcdHJlc3BvbnNlID0gJC5mbltfbmFtZV0uYXBwbHkodGhpcy4kZWxzLCByZXNvbHZlRXZlbnRIYW5kbGVyKHRoaXMsIF9uYW1lLCBhcmd1bWVudHMpKTtcXG5cXG5cXHRcXHRcXHRpZiAocmVzcG9uc2UgPT09IHRoaXMuJGVscyB8fCByZXNwb25zZSAmJiByZXNwb25zZS5qcXVlcnkgJiYgcmVzcG9uc2UuaXModGhpcy4kZWxzKSkge1xcblxcdFxcdFxcdFxcdHJldHVybiB0aGlzO1xcblxcdFxcdFxcdH1cXG5cXG5cXHRcXHRcXHRyZXR1cm4gcmVzcG9uc2U7XFxuXFx0XFx0fTtcXG5cXHR9XFxuXFxuXFx0ZnVuY3Rpb24gcmVzb2x2ZUV2ZW50SGFuZGxlcihfc2NvcGUsIF9tZXRob2QsIF9hcmdzKSB7XFxuXFx0XFx0dmFyIGksIGFyZywgYXJncztcXG5cXG5cXHRcXHRhcmdzID0gW107XFxuXFxuXFx0XFx0aWYgKH5bJ29uJywgJ2xvYWQnXS5pbmRleE9mKF9tZXRob2QpKSB7XFxuXFx0XFx0XFx0Zm9yIChpID0gMDsgYXJnID0gX2FyZ3NbaV07IGkgKz0gMSkge1xcblxcdFxcdFxcdFxcdGlmICh0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nKSB7XFxuXFx0XFx0XFx0XFx0XFx0YXJncy5wdXNoKChmdW5jdGlvbiAoX2hhbmRsZXIpIHtcXG5cXHRcXHRcXHRcXHRcXHRcXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xcblxcdFxcdFxcdFxcdFxcdFxcdFxcdHJldHVybiBfaGFuZGxlci5hcHBseShfc2NvcGUsIGFyZ3VtZW50cyk7XFxuXFx0XFx0XFx0XFx0XFx0XFx0fTtcXG5cXHRcXHRcXHRcXHRcXHR9KShhcmcpKTtcXG5cXHRcXHRcXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdFxcdFxcdGFyZ3MucHVzaChhcmcpO1xcblxcdFxcdFxcdFxcdH1cXG5cXHRcXHRcXHR9XFxuXFxuXFx0XFx0XFx0cmV0dXJuIGFyZ3M7XFxuXFx0XFx0fVxcblxcblxcdFxcdHJldHVybiBfYXJncztcXG5cXHR9XFxuXFxuXFx0Ly8gV2UgZG9uJ3Qgd2FudCBqUXVlcnkgbWV0aG9kcyBvdmVycmlkZGluZyBvdXIgYmFzZSB0eXBlJ3MgbWV0aG9kcy5cXG5cXHRleGNsdWRlID0gWydjb25zdHJ1Y3RvciddLmNvbmNhdChfT2JqZWN0JGtleXMoX3R5cGVzQmFzaWMyWydkZWZhdWx0J10pKTtcXG5cXG5cXHR0aGlzLmJhc2VUeXBlID0gJ1RZUEVfSlFQUk9YWSc7XFxuXFx0dGhpcy4kZWxzID0gbnVsbDtcXG5cXHR0aGlzLmV2ZW50UmVnaXN0cnkgPSBudWxsO1xcblxcblxcdGZvciAobWV0aG9kIGluICQuZm4pIHtcXG5cXHRcXHRpZiAoISQuZm4uaGFzT3duUHJvcGVydHkobWV0aG9kKSB8fCB+ZXhjbHVkZS5pbmRleE9mKG1ldGhvZCkpIGNvbnRpbnVlO1xcblxcdFxcdHRoaXNbbWV0aG9kXSA9IGNyZWF0ZVByb3h5RnVuY3Rpb24obWV0aG9kKTtcXG5cXHR9XFxuXFxuXFx0dGhpcy5ub2RlID0gZnVuY3Rpb24gKCkge1xcblxcdFxcdHJldHVybiB0aGlzLiRlbHNbMF07XFxuXFx0fTtcXG5cXG5cXHQvLyBUT0RPOiBtYWtlIHRoaXMgcHJpdmF0ZVxcblxcdHRoaXMucmVnaXN0ZXJIYW5kbGVyID0gZnVuY3Rpb24gKF9kZWZpbml0aW9uKSB7XFxuXFx0XFx0aWYgKCF0aGlzLmhhc093blByb3BlcnR5KCdldmVudFJlZ2lzdHJ5JykpIHtcXG5cXHRcXHRcXHRpZiAodGhpcy5ldmVudFJlZ2lzdHJ5ICYmIHRoaXMuaXNNZW1iZXJTYWZlKCdldmVudFJlZ2lzdHJ5JykpIHtcXG5cXHRcXHRcXHRcXHR0aGlzLmV2ZW50UmVnaXN0cnkgPSB0aGlzLmV2ZW50UmVnaXN0cnkuc2xpY2UoMCk7XFxuXFx0XFx0XFx0fSBlbHNlIHtcXG5cXHRcXHRcXHRcXHR0aGlzLmV2ZW50UmVnaXN0cnkgPSBbXTtcXG5cXHRcXHRcXHR9XFxuXFx0XFx0fVxcblxcblxcdFxcdHRoaXMuZXZlbnRSZWdpc3RyeS5wdXNoKF9kZWZpbml0aW9uKTtcXG5cXHR9O1xcblxcblxcdHRoaXMuYXR0YWNoRXZlbnRzID0gZnVuY3Rpb24gKCkge1xcblxcdFxcdHZhciBzZWxmO1xcblxcblxcdFxcdHNlbGYgPSB0aGlzO1xcblxcblxcdFxcdGlmICh0aGlzLmV2ZW50UmVnaXN0cnkgJiYgdGhpcy5pc01lbWJlclNhZmUoJ2V2ZW50UmVnaXN0cnknKSkge1xcblxcdFxcdFxcdHRoaXMuZXZlbnRSZWdpc3RyeS5mb3JFYWNoKGZ1bmN0aW9uIChfZGVmaW5pdGlvbikge1xcblxcdFxcdFxcdFxcdHNlbGYub24uYXBwbHkoc2VsZiwgX2RlZmluaXRpb24pO1xcblxcdFxcdFxcdH0pO1xcblxcdFxcdH1cXG5cXHR9O1xcblxcblxcdC8vIFdyYXBzIHlvdSBmdW5jdGlvbiAndGhpcycgdG8gdGhlIHNjb3BlLlxcblxcdC8vXFxuXFx0dGhpcy5iaW5kID0gZnVuY3Rpb24gKF9oYW5kbGVyKSB7XFxuXFx0XFx0dmFyIHNjb3BlLCBkYXRhQXJncztcXG5cXG5cXHRcXHRzY29wZSA9IHRoaXM7XFxuXFx0XFx0ZGF0YUFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XFxuXFxuXFx0XFx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcXG5cXHRcXHRcXHR2YXIgYXJncztcXG5cXG5cXHRcXHRcXHRhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xcblxcdFxcdFxcdHJldHVybiBfaGFuZGxlci5hcHBseShzY29wZSwgYXJncy5jb25jYXQoZGF0YUFyZ3MpKTtcXG5cXHRcXHR9O1xcblxcdH07XFxuXFxuXFx0dGhpcy5maW5kT3duID0gZnVuY3Rpb24gKF9zZWxlY3Rvcikge1xcblxcdFxcdHJldHVybiB0aGlzLmZpbmQoX3NlbGVjdG9yKS5maWx0ZXIodGhpcy5iaW5kKGZ1bmN0aW9uIChfaW5kZXgsIF9ub2RlKSB7XFxuXFx0XFx0XFx0dmFyICRub2RlO1xcblxcblxcdFxcdFxcdCRub2RlID0gJChfbm9kZSk7XFxuXFxuXFx0XFx0XFx0aWYgKCRub2RlLmhhc0NsYXNzKCdwbC1zY29wZScpKSB7XFxuXFx0XFx0XFx0XFx0cmV0dXJuICRub2RlLnBhcmVudCgpLnNjb3BlKCkgPT09IHRoaXM7XFxuXFx0XFx0XFx0fVxcblxcblxcdFxcdFxcdHJldHVybiAkbm9kZS5zY29wZSgpID09PSB0aGlzO1xcblxcdFxcdH0pKTtcXG5cXHR9O1xcblxcblxcdHRoaXMuaXNNZW1iZXJTYWZlID0gZnVuY3Rpb24gKF9uYW1lKSB7XFxuXFx0XFx0dmFyIG93bmVyLCBlbE93bmVyLCBwcm90b3R5cGU7XFxuXFxuXFx0XFx0aWYgKHRoaXMuaGFzT3duUHJvcGVydHkoX25hbWUpKSB7XFxuXFx0XFx0XFx0cmV0dXJuIHRydWU7XFxuXFx0XFx0fSBlbHNlIHtcXG5cXHRcXHRcXHRwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcyk7XFxuXFx0XFx0XFx0b3duZXIgPSBfdXRpbDJbJ2RlZmF1bHQnXS5nZXRPd25lcih0aGlzLCB0aGlzW19uYW1lXSk7XFxuXFxuXFx0XFx0XFx0aWYgKG93bmVyLm9iamVjdC5oYXNPd25Qcm9wZXJ0eSgnJGVscycpIHx8IHByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSgnJGVscycpKSByZXR1cm4gZmFsc2U7XFxuXFxuXFx0XFx0XFx0aWYgKHByb3RvdHlwZS4kZWxzKSB7XFxuXFx0XFx0XFx0XFx0ZWxPd25lciA9IF91dGlsMlsnZGVmYXVsdCddLmdldE93bmVyKHByb3RvdHlwZSwgcHJvdG90eXBlLiRlbHMpO1xcblxcblxcdFxcdFxcdFxcdGlmIChvd25lci5vYmplY3QuaXNQcm90b3R5cGVPZihlbE93bmVyLm9iamVjdCkpIHtcXG5cXHRcXHRcXHRcXHRcXHRyZXR1cm4gZmFsc2U7XFxuXFx0XFx0XFx0XFx0fVxcblxcdFxcdFxcdH1cXG5cXG5cXHRcXHRcXHRyZXR1cm4gdHJ1ZTtcXG5cXHRcXHR9XFxuXFxuXFx0XFx0cmV0dXJuIGZhbHNlO1xcblxcdH07XFxuXFxuXFx0dGhpcy5pcyA9IGZ1bmN0aW9uIChfb2JqKSB7XFxuXFx0XFx0aWYgKCFfb2JqKSByZXR1cm4gZmFsc2U7XFxuXFx0XFx0aWYgKF9vYmouJGVscykgcmV0dXJuIHRoaXMuJGVscy5pcyhfb2JqLiRlbHMpO1xcblxcblxcdFxcdHJldHVybiB0aGlzLiRlbHMuaXMoX29iaik7XFxuXFx0fTtcXG59KTtcXG5cXG5leHBvcnRzWydkZWZhdWx0J10gPSBqUVByb3h5O1xcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOy8vQCBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emIzVnlZMlV2ZEhsd1pYTXZhbEZRY205NGVTNXFjejh3T0RKaklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3T3pzN096czdPMmREUVZOcFFpeEZRVUZOT3pzN08zTkRRVU5NTEVWQlFXRTdPenM3UVVGRkwwSXNTVUZCU1N4UFFVRlBMRWRCUVVjc2QwSkJRVTBzVFVGQlRTeERRVUZETEZsQlFWazdRVUZEZEVNc1MwRkJTU3hOUVVGTkxFVkJRVVVzVDBGQlR5eERRVUZET3pzN096czdPenRCUVZGd1FpeFZRVUZUTEcxQ1FVRnRRaXhEUVVGRkxFdEJRVXNzUlVGQlJUdEJRVU53UXl4VFFVRlBMRmxCUVZrN1FVRkRiRUlzVDBGQlNTeFJRVUZSTEVOQlFVTTdPenRCUVVkaUxFOUJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRTFCUVUwc1EwRkJReXhGUVVGRk8wRkJRMnBETEZGQlFVa3NTMEZCU3l4TFFVRkxMRWxCUVVrc1JVRkJSVHRCUVVOdVFpeFRRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE8wdEJRMmhETEUxQlJVazdRVUZEU2l4WFFVRk5MRWxCUVVrc1kwRkJZeXhEUVVGRExHMUNRVUZ0UWl4SFFVRkRMRXRCUVVzc1IwRkJReXgzUTBGQmQwTXNRMEZCUXl4RFFVRkRPMHRCUXpkR08wRkJRMFFzVjBGQlR6dEpRVU5RT3p0QlFVVkVMRmRCUVZFc1IwRkJSeXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEcxQ1FVRnRRaXhEUVVGRExFbEJRVWtzUlVGQlJTeExRVUZMTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJRenM3UVVGRmNrWXNUMEZCU1N4UlFVRlJMRXRCUVVzc1NVRkJTU3hEUVVGRExFbEJRVWtzU1VGQlN5eFJRVUZSTEVsQlFVa3NVVUZCVVN4RFFVRkRMRTFCUVUwc1NVRkJTU3hSUVVGUkxFTkJRVU1zUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVVc1JVRkJSVHRCUVVOMFJpeFhRVUZQTEVsQlFVa3NRMEZCUXp0SlFVTmFPenRCUVVWRUxGVkJRVThzVVVGQlVTeERRVUZETzBkQlEyaENMRU5CUVVNN1JVRkRSanM3UVVGRlJDeFZRVUZUTEcxQ1FVRnRRaXhEUVVGRkxFMUJRVTBzUlVGQlJTeFBRVUZQTEVWQlFVVXNTMEZCU3l4RlFVRkZPMEZCUTNKRUxFMUJRVWtzUTBGQlF5eEZRVUZGTEVkQlFVY3NSVUZCUlN4SlFVRkpMRU5CUVVNN08wRkJSV3BDTEUxQlFVa3NSMEZCUnl4RlFVRkZMRU5CUVVNN08wRkJSVllzVFVGQlNTeERRVUZGTEVOQlFVTXNTVUZCU1N4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRkxFOUJRVThzUTBGQlF5eFBRVUZQTEVOQlFVTXNSVUZCUlR0QlFVTjJReXhSUVVGTExFTkJRVU1zUjBGQlF5eERRVUZETEVWQlFVVXNSMEZCUnl4SFFVRkhMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVsQlFVVXNRMEZCUXl4RlFVRkZPMEZCUXk5Q0xGRkJRVWtzVDBGQlR5eEhRVUZITEV0QlFVc3NWVUZCVlN4RlFVRkZPMEZCUXpsQ0xGTkJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVVXNWMEZCVlN4UlFVRlJMRVZCUVVVN1FVRkRPVUlzWVVGQlR5eFpRVUZaTzBGQlFVVXNZMEZCVHl4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUlVGQlJTeFRRVUZUTEVOQlFVTXNRMEZCUXp0UFFVRkRMRU5CUVVNN1RVRkRhRVVzUlVGQlF5eEhRVUZITEVOQlFVTXNRMEZCUlN4RFFVRkRPMHRCUTFRc1RVRkZTVHRCUVVOS0xGTkJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1MwRkRaanRKUVVORU96dEJRVVZFTEZWQlFVOHNTVUZCU1N4RFFVRkRPMGRCUTFvN08wRkJSVVFzVTBGQlR5eExRVUZMTEVOQlFVTTdSVUZEWWpzN08wRkJSMFFzVVVGQlR5eEhRVUZITEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExIRkRRVUZyUWl4RFFVRkRMRU5CUVVNN08wRkJSWEpFTEV0QlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1kwRkJZeXhEUVVGRE8wRkJReTlDTEV0QlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRE8wRkJRMnBDTEV0QlFVa3NRMEZCUXl4aFFVRmhMRWRCUVVjc1NVRkJTU3hEUVVGRE96dEJRVVV4UWl4TlFVRkxMRTFCUVUwc1NVRkJTU3hEUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZGTzBGQlEzQkNMRTFCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEdOQlFXTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RFFVRkRMRVZCUVVVc1UwRkJVenRCUVVOMlJTeE5RVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc2JVSkJRVzFDTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1JVRkRNME03TzBGQlJVUXNTMEZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhaUVVGWk8wRkJRM1pDTEZOQlFVOHNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEZRVU53UWl4RFFVRkRPenM3UVVGSFJpeExRVUZKTEVOQlFVTXNaVUZCWlN4SFFVRkhMRlZCUVZVc1YwRkJWeXhGUVVGRk8wRkJRemRETEUxQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExHVkJRV1VzUTBGQlF5eEZRVUZGTzBGQlF6RkRMRTlCUVVrc1NVRkJTU3hEUVVGRExHRkJRV0VzU1VGQlNTeEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMR1ZCUVdVc1EwRkJReXhGUVVGRk8wRkJRemRFTEZGQlFVa3NRMEZCUXl4aFFVRmhMRWRCUVVjc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRha1FzVFVGRlNUdEJRVU5LTEZGQlFVa3NRMEZCUXl4aFFVRmhMRWRCUVVjc1JVRkJSU3hEUVVGRE8wbEJRM2hDTzBkQlEwUTdPMEZCUlVRc1RVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1JVRkRja01zUTBGQlF6czdRVUZGUml4TFFVRkpMRU5CUVVNc1dVRkJXU3hIUVVGSExGbEJRVms3UVVGREwwSXNUVUZCU1N4SlFVRkpMRU5CUVVNN08wRkJSVlFzVFVGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXpzN1FVRkZXaXhOUVVGSkxFbEJRVWtzUTBGQlF5eGhRVUZoTEVsQlFVa3NTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhsUVVGbExFTkJRVU1zUlVGQlJUdEJRVU0zUkN4UFFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZWTEZkQlFWY3NSVUZCUlR0QlFVTnFSQ3hSUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRVZCUVVVc1YwRkJWeXhEUVVGRExFTkJRVU03U1VGRGFrTXNRMEZCUXl4RFFVRkRPMGRCUTBnN1JVRkRSQ3hEUVVGRE96czdPMEZCU1VZc1MwRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eFZRVUZWTEZGQlFWRXNSVUZCUlR0QlFVTXZRaXhOUVVGSkxFdEJRVXNzUlVGQlJTeFJRVUZSTEVOQlFVTTdPMEZCUlhCQ0xFOUJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTTdRVUZEWWl4VlFVRlJMRWRCUVVjc1JVRkJSU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE96dEJRVVYyUXl4VFFVRlBMRmxCUVZrN1FVRkRiRUlzVDBGQlNTeEpRVUZKTEVOQlFVTTdPMEZCUlZRc1QwRkJTU3hIUVVGSExFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU51UXl4VlFVRlBMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eEZRVUZGTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF6dEhRVU53UkN4RFFVRkRPMFZCUTBZc1EwRkJRenM3UVVGRlJpeExRVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRlZCUVZVc1UwRkJVeXhGUVVGRk8wRkJRMjVETEZOQlFVOHNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFMUJRVTBzUlVGQlJTeExRVUZMTEVWQlFVVTdRVUZEY2tVc1QwRkJTU3hMUVVGTExFTkJRVU03TzBGQlJWWXNVVUZCU3l4SFFVRkhMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6czdRVUZGYWtJc1QwRkJTU3hMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEZWQlFWVXNRMEZCUXl4RlFVRkZPMEZCUXk5Q0xGZEJRVThzUzBGQlN5eERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRXRCUVVzc1JVRkJSU3hMUVVGTExFbEJRVWtzUTBGQlF6dEpRVU4yUXpzN1FVRkZSQ3hWUVVGUExFdEJRVXNzUTBGQlF5eExRVUZMTEVWQlFVVXNTMEZCU3l4SlFVRkpMRU5CUVVNN1IwRkRPVUlzUTBGQlF5eERRVUZETEVOQlFVTTdSVUZEU2l4RFFVRkRPenRCUVVWR0xFdEJRVWtzUTBGQlF5eFpRVUZaTEVkQlFVY3NWVUZCVlN4TFFVRkxMRVZCUVVVN1FVRkRjRU1zVFVGQlNTeExRVUZMTEVWQlFVVXNUMEZCVHl4RlFVRkZMRk5CUVZNc1EwRkJRenM3UVVGRk9VSXNUVUZCU1N4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTzBGQlF5OUNMRlZCUVU4c1NVRkJTU3hEUVVGRE8wZEJRMW9zVFVGRlNUdEJRVU5LTEZsQlFWTXNSMEZCUnl4TlFVRk5MRU5CUVVNc1kwRkJZeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEzaERMRkZCUVVzc1IwRkJSeXhyUWtGQlN5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZET3p0QlFVVjZReXhQUVVGSkxFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNZMEZCWXl4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxGTkJRVk1zUTBGQlF5eGpRVUZqTEVOQlFVTXNUVUZCVFN4RFFVRkRMRVZCUVVVc1QwRkJUeXhMUVVGTExFTkJRVU03TzBGQlJURkdMRTlCUVVrc1UwRkJVeXhEUVVGRExFbEJRVWtzUlVGQlJUdEJRVU51UWl4WFFVRlBMRWRCUVVjc2EwSkJRVXNzVVVGQlVTeERRVUZETEZOQlFWTXNSVUZCUlN4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03TzBGQlJXNUVMRkZCUVVrc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkJReXhGUVVGRk8wRkJReTlETEZsQlFVOHNTMEZCU3l4RFFVRkRPMHRCUTJJN1NVRkRSRHM3UVVGRlJDeFZRVUZQTEVsQlFVa3NRMEZCUXp0SFFVTmFPenRCUVVWRUxGTkJRVThzUzBGQlN5eERRVUZETzBWQlEySXNRMEZCUXpzN1FVRkZSaXhMUVVGSkxFTkJRVU1zUlVGQlJTeEhRVUZITEZWQlFWVXNTVUZCU1N4RlFVRkZPMEZCUTNwQ0xFMUJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNUMEZCVHl4TFFVRkxMRU5CUVVNN1FVRkRlRUlzVFVGQlNTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZMRTlCUVU4c1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE96dEJRVVU1UXl4VFFVRlBMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMFZCUXpGQ0xFTkJRVU03UTBGRFJpeERRVUZETEVOQlFVTTdPM0ZDUVVWWkxFOUJRVThpTENKbWFXeGxJam9pTWpRdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2Jpb2dJR3BSVUhKdmVIbGNiaW9nSUVCa1pYTmpJRU52Ym5SaGFXNXpJR0ZzYkNCMGFHVWdhbEYxWlhKNUlHMWxkR2h2WkhNZ2RHRnlaMlYwWldRZ2RHOTNZWEprY3lCaElIQnliM0JsY25SNUlIZG9hV05vSUhKbFptVnlaVzVqWlhNZ1lTQnFVWFZsY25rZ2IySnFaV04wTGx4dUtpQWdRSEJ5YjNSdklFSmhjMmxqWEc0cUlDQmNiaW9nSUU1UFZFVTZJRU4xYzNSdmJTQmxkbVZ1ZEhNZ2JXRjVJSFJ5YVdkblpYSWdiMjRnYzJOdmNHVnpYRzRxSUNCMGFHRjBJR0ZzYzI4Z2RHRnlaMlYwY3lCMGFHVWdjMkZ0WlNCbGJHMWxiblJ6TGlCVVpYTjBhVzVuSUc1bFpXUmxaQzVjYmlvdlhHNWNibWx0Y0c5eWRDQjFkR2xzSUdaeWIyMGdKM1YwYVd3bk8xeHVhVzF3YjNKMElFSmhjMmxqSUdaeWIyMGdKM1I1Y0dWekwwSmhjMmxqSnp0Y2JseHVkbUZ5SUdwUlVISnZlSGtnUFNCQ1lYTnBZeTVsZUhSbGJtUW9ablZ1WTNScGIyNGdLQ2tnZTF4dVhIUjJZWElnYldWMGFHOWtMQ0JsZUdOc2RXUmxPMXh1WEc1Y2RDOHFLbHh1WEhRcUlDQkFaR1Z6WXlCRGNtVmhkR1Z6SUdFZ1puVnVZM1JwYjI0Z2QybDBhQ0JoSUhCeWIzaDVJSFJ2SUhSb1pTQnFVWFZsY25rZ2JXVjBhRzlrTGx4dVhIUXFJQ0JBY0dGeVlXMGdYMjVoYldVZ0tGTjBjbWx1WnlrZ1ZHaGxJRzVoYldVZ2IyWWdkR2hsSUcxbGRHaHZaQ0JpWldsdVp5QndjbTk0YVdWa0xseHVYSFFxSUNCQWNtVjBkWEp1SUNocVVYVmxjbmw4S2lrZ1JXbDBhR1Z5SUdFZ2FsRjFaWEo1SUc5aWFtVmpkQ0J2Y2lCM2FHRjBaWFpsY2lCMGFHVWdiM0pwWjJsdVlXd2diV1YwYUc5a0lISmxkSFZ5Ym5NdVhHNWNkQ29nSUVCd2NtbDJZWFJsWEc1Y2RDb3ZYRzVjZEdaMWJtTjBhVzl1SUdOeVpXRjBaVkJ5YjNoNVJuVnVZM1JwYjI0Z0tGOXVZVzFsS1NCN1hHNWNkRngwY21WMGRYSnVJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseDBYSFJjZEhaaGNpQnlaWE53YjI1elpUdGNibHh1WEhSY2RGeDBMeThnVkdocGN5QnRZV3RsY3lCemRYSmxJSGx2ZFhJZ2JtOTBJR05oYkd4cGJtY2dZVzU1SUdwUmRXVnllU0J0WlhSb2IyUnpJR0psWm05eVpTQnBibWwwYVdGc2FYcGhkR2x2Ymk1Y2JseDBYSFJjZEdsbUlDZ2hkR2hwY3k1b1lYTlBkMjVRY205d1pYSjBlU2duSkdWc2N5Y3BLU0I3WEc1Y2RGeDBYSFJjZEdsbUlDaGZibUZ0WlNBOVBUMGdKMjl1SnlrZ2UxeHVYSFJjZEZ4MFhIUmNkSFJvYVhNdWNtVm5hWE4wWlhKSVlXNWtiR1Z5S0dGeVozVnRaVzUwY3lrN1hHNWNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFJsYkhObElIdGNibHgwWEhSY2RGeDBYSFIwYUhKdmR5QnVaWGNnVW1WbVpYSmxibU5sUlhKeWIzSW9KMVZ1WVdKc1pTQjBieUJwYm5admEyVWdKeXRmYm1GdFpTc25JR0psWTJGMWMyVWdkR2hsSUhOamIzQmxJR2x6SUc1dmRDQnBibWwwYVdGc2FYcGxaQzRuS1R0Y2JseDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUnlaWFIxY200N1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RISmxjM0J2Ym5ObElEMGdKQzVtYmx0ZmJtRnRaVjB1WVhCd2JIa29kR2hwY3k0a1pXeHpMQ0J5WlhOdmJIWmxSWFpsYm5SSVlXNWtiR1Z5S0hSb2FYTXNJRjl1WVcxbExDQmhjbWQxYldWdWRITXBLVHRjYmx4dVhIUmNkRngwYVdZZ0tISmxjM0J2Ym5ObElEMDlQU0IwYUdsekxpUmxiSE1nZkh3Z0tISmxjM0J2Ym5ObElDWW1JSEpsYzNCdmJuTmxMbXB4ZFdWeWVTQW1KaUJ5WlhOd2IyNXpaUzVwY3loMGFHbHpMaVJsYkhNcEtTa2dlMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdkR2hwY3p0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MGNtVjBkWEp1SUhKbGMzQnZibk5sTzF4dVhIUmNkSDA3WEc1Y2RIMWNibHh1WEhSbWRXNWpkR2x2YmlCeVpYTnZiSFpsUlhabGJuUklZVzVrYkdWeUlDaGZjMk52Y0dVc0lGOXRaWFJvYjJRc0lGOWhjbWR6S1NCN1hHNWNkRngwZG1GeUlHa3NJR0Z5Wnl3Z1lYSm5jenRjYmx4dVhIUmNkR0Z5WjNNZ1BTQmJYVHRjYmx4dVhIUmNkR2xtSUNoK0tGc25iMjRuTENBbmJHOWhaQ2RkS1M1cGJtUmxlRTltS0Y5dFpYUm9iMlFwS1NCN1hHNWNkRngwWEhSbWIzSWdLR2s5TURzZ1lYSm5JRDBnWDJGeVozTmJhVjA3SUdrclBURXBJSHRjYmx4MFhIUmNkRngwYVdZZ0tIUjVjR1Z2WmlCaGNtY2dQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNibHgwWEhSY2RGeDBYSFJoY21kekxuQjFjMmdvS0daMWJtTjBhVzl1SUNoZmFHRnVaR3hsY2lrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwY21WMGRYSnVJR1oxYm1OMGFXOXVJQ2dwSUhzZ2NtVjBkWEp1SUY5b1lXNWtiR1Z5TG1Gd2NHeDVLRjl6WTI5d1pTd2dZWEpuZFcxbGJuUnpLVHQ5TzF4dVhIUmNkRngwWEhSY2RIMG9ZWEpuS1NrcE8xeHVYSFJjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkRngwWld4elpTQjdYRzVjZEZ4MFhIUmNkRngwWVhKbmN5NXdkWE5vS0dGeVp5azdYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwY21WMGRYSnVJR0Z5WjNNN1hHNWNkRngwZlZ4dVhHNWNkRngwY21WMGRYSnVJRjloY21kek8xeHVYSFI5WEc1Y2JseDBMeThnVjJVZ1pHOXVKM1FnZDJGdWRDQnFVWFZsY25rZ2JXVjBhRzlrY3lCdmRtVnljbWxrWkdsdVp5QnZkWElnWW1GelpTQjBlWEJsSjNNZ2JXVjBhRzlrY3k1Y2JseDBaWGhqYkhWa1pTQTlJRnNuWTI5dWMzUnlkV04wYjNJblhTNWpiMjVqWVhRb1QySnFaV04wTG10bGVYTW9RbUZ6YVdNcEtUdGNibHh1WEhSMGFHbHpMbUpoYzJWVWVYQmxJRDBnSjFSWlVFVmZTbEZRVWs5WVdTYzdYRzVjZEhSb2FYTXVKR1ZzY3lBOUlHNTFiR3c3WEc1Y2RIUm9hWE11WlhabGJuUlNaV2RwYzNSeWVTQTlJRzUxYkd3N1hHNWNibHgwWm05eUlDaHRaWFJvYjJRZ2FXNGdKQzVtYmlrZ2UxeHVYSFJjZEdsbUlDZ2hKQzVtYmk1b1lYTlBkMjVRY205d1pYSjBlU2h0WlhSb2IyUXBJSHg4SUg1bGVHTnNkV1JsTG1sdVpHVjRUMllvYldWMGFHOWtLU2tnWTI5dWRHbHVkV1U3WEc1Y2RGeDBkR2hwYzF0dFpYUm9iMlJkSUQwZ1kzSmxZWFJsVUhKdmVIbEdkVzVqZEdsdmJpaHRaWFJvYjJRcE8xeHVYSFI5WEc1Y2JseDBkR2hwY3k1dWIyUmxJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVYSFJjZEhKbGRIVnliaUIwYUdsekxpUmxiSE5iTUYwN1hHNWNkSDA3WEc1Y2JseDBMeThnVkU5RVR6b2diV0ZyWlNCMGFHbHpJSEJ5YVhaaGRHVmNibHgwZEdocGN5NXlaV2RwYzNSbGNraGhibVJzWlhJZ1BTQm1kVzVqZEdsdmJpQW9YMlJsWm1sdWFYUnBiMjRwSUh0Y2JseDBYSFJwWmlBb0lYUm9hWE11YUdGelQzZHVVSEp2Y0dWeWRIa29KMlYyWlc1MFVtVm5hWE4wY25rbktTa2dlMXh1WEhSY2RGeDBhV1lnS0hSb2FYTXVaWFpsYm5SU1pXZHBjM1J5ZVNBbUppQjBhR2x6TG1selRXVnRZbVZ5VTJGbVpTZ25aWFpsYm5SU1pXZHBjM1J5ZVNjcEtTQjdYRzVjZEZ4MFhIUmNkSFJvYVhNdVpYWmxiblJTWldkcGMzUnllU0E5SUhSb2FYTXVaWFpsYm5SU1pXZHBjM1J5ZVM1emJHbGpaU2d3S1R0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MFpXeHpaU0I3WEc1Y2RGeDBYSFJjZEhSb2FYTXVaWFpsYm5SU1pXZHBjM1J5ZVNBOUlGdGRPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHh1WEhSY2RIUm9hWE11WlhabGJuUlNaV2RwYzNSeWVTNXdkWE5vS0Y5a1pXWnBibWwwYVc5dUtUdGNibHgwZlR0Y2JseHVYSFIwYUdsekxtRjBkR0ZqYUVWMlpXNTBjeUE5SUdaMWJtTjBhVzl1SUNncElIdGNibHgwWEhSMllYSWdjMlZzWmp0Y2JseHVYSFJjZEhObGJHWWdQU0IwYUdsek8xeHVYRzVjZEZ4MGFXWWdLSFJvYVhNdVpYWmxiblJTWldkcGMzUnllU0FtSmlCMGFHbHpMbWx6VFdWdFltVnlVMkZtWlNnblpYWmxiblJTWldkcGMzUnllU2NwS1NCN1hHNWNkRngwWEhSMGFHbHpMbVYyWlc1MFVtVm5hWE4wY25rdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb1gyUmxabWx1YVhScGIyNHBJSHRjYmx4MFhIUmNkRngwYzJWc1ppNXZiaTVoY0hCc2VTaHpaV3htTENCZlpHVm1hVzVwZEdsdmJpazdYRzVjZEZ4MFhIUjlLVHRjYmx4MFhIUjlYRzVjZEgwN1hHNWNibHgwTHk4Z1YzSmhjSE1nZVc5MUlHWjFibU4wYVc5dUlDZDBhR2x6SnlCMGJ5QjBhR1VnYzJOdmNHVXVYRzVjZEM4dklGeHVYSFIwYUdsekxtSnBibVFnUFNCbWRXNWpkR2x2YmlBb1gyaGhibVJzWlhJcElIdGNibHgwWEhSMllYSWdjMk52Y0dVc0lHUmhkR0ZCY21kek8xeHVYRzVjZEZ4MGMyTnZjR1VnUFNCMGFHbHpPMXh1WEhSY2RHUmhkR0ZCY21keklEMGdXMTB1YzJ4cFkyVXVZMkZzYkNoaGNtZDFiV1Z1ZEhNc0lERXBPMXh1WEc1Y2RGeDBjbVYwZFhKdUlHWjFibU4wYVc5dUlDZ3BJSHRjYmx4MFhIUmNkSFpoY2lCaGNtZHpPMXh1WEc1Y2RGeDBYSFJoY21keklEMGdXMTB1YzJ4cFkyVXVZMkZzYkNoaGNtZDFiV1Z1ZEhNc0lEQXBPMXh1WEhSY2RGeDBjbVYwZFhKdUlGOW9ZVzVrYkdWeUxtRndjR3g1S0hOamIzQmxMQ0JoY21kekxtTnZibU5oZENoa1lYUmhRWEpuY3lrcE8xeHVYSFJjZEgwN1hHNWNkSDA3WEc1Y2JseDBkR2hwY3k1bWFXNWtUM2R1SUQwZ1puVnVZM1JwYjI0Z0tGOXpaV3hsWTNSdmNpa2dlMXh1WEhSY2RISmxkSFZ5YmlCMGFHbHpMbVpwYm1Rb1gzTmxiR1ZqZEc5eUtTNW1hV3gwWlhJb2RHaHBjeTVpYVc1a0tHWjFibU4wYVc5dUlDaGZhVzVrWlhnc0lGOXViMlJsS1NCN1hHNWNkRngwWEhSMllYSWdKRzV2WkdVN1hHNWNibHgwWEhSY2RDUnViMlJsSUQwZ0pDaGZibTlrWlNrN1hHNWNibHgwWEhSY2RHbG1JQ2drYm05a1pTNW9ZWE5EYkdGemN5Z25jR3d0YzJOdmNHVW5LU2tnZTF4dVhIUmNkRngwWEhSeVpYUjFjbTRnSkc1dlpHVXVjR0Z5Wlc1MEtDa3VjMk52Y0dVb0tTQTlQVDBnZEdocGN6dGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBjbVYwZFhKdUlDUnViMlJsTG5OamIzQmxLQ2tnUFQwOUlIUm9hWE03WEc1Y2RGeDBmU2twTzF4dVhIUjlPMXh1WEc1Y2RIUm9hWE11YVhOTlpXMWlaWEpUWVdabElEMGdablZ1WTNScGIyNGdLRjl1WVcxbEtTQjdYRzVjZEZ4MGRtRnlJRzkzYm1WeUxDQmxiRTkzYm1WeUxDQndjbTkwYjNSNWNHVTdYRzVjYmx4MFhIUnBaaUFvZEdocGN5NW9ZWE5QZDI1UWNtOXdaWEowZVNoZmJtRnRaU2twSUh0Y2JseDBYSFJjZEhKbGRIVnliaUIwY25WbE8xeHVYSFJjZEgxY2JseHVYSFJjZEdWc2MyVWdlMXh1WEhSY2RGeDBjSEp2ZEc5MGVYQmxJRDBnVDJKcVpXTjBMbWRsZEZCeWIzUnZkSGx3WlU5bUtIUm9hWE1wTzF4dVhIUmNkRngwYjNkdVpYSWdQU0IxZEdsc0xtZGxkRTkzYm1WeUtIUm9hWE1zSUhSb2FYTmJYMjVoYldWZEtUdGNibHh1WEhSY2RGeDBhV1lnS0c5M2JtVnlMbTlpYW1WamRDNW9ZWE5QZDI1UWNtOXdaWEowZVNnbkpHVnNjeWNwSUh4OElIQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVNnbkpHVnNjeWNwS1NCeVpYUjFjbTRnWm1Gc2MyVTdYRzVjYmx4MFhIUmNkR2xtSUNod2NtOTBiM1I1Y0dVdUpHVnNjeWtnZTF4dVhIUmNkRngwWEhSbGJFOTNibVZ5SUQwZ2RYUnBiQzVuWlhSUGQyNWxjaWh3Y205MGIzUjVjR1VzSUhCeWIzUnZkSGx3WlM0a1pXeHpLVHRjYmx4dVhIUmNkRngwWEhScFppQW9iM2R1WlhJdWIySnFaV04wTG1selVISnZkRzkwZVhCbFQyWW9aV3hQZDI1bGNpNXZZbXBsWTNRcEtTQjdYRzVjZEZ4MFhIUmNkRngwY21WMGRYSnVJR1poYkhObE8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNibHgwWEhSY2RISmxkSFZ5YmlCMGNuVmxPMXh1WEhSY2RIMWNibHh1WEhSY2RISmxkSFZ5YmlCbVlXeHpaVHRjYmx4MGZUdGNibHh1WEhSMGFHbHpMbWx6SUQwZ1puVnVZM1JwYjI0Z0tGOXZZbW9wSUh0Y2JseDBYSFJwWmlBb0lWOXZZbW9wSUhKbGRIVnliaUJtWVd4elpUdGNibHgwWEhScFppQW9YMjlpYWk0a1pXeHpLU0J5WlhSMWNtNGdkR2hwY3k0a1pXeHpMbWx6S0Y5dlltb3VKR1ZzY3lrN1hHNWNibHgwWEhSeVpYUjFjbTRnZEdocGN5NGtaV3h6TG1sektGOXZZbW9wTzF4dVhIUjlPMXh1ZlNrN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHcFJVSEp2ZUhrN1hHNWNibHh1WEc0dktpb2dWMFZDVUVGRFN5QkdUMDlVUlZJZ0tpcGNiaUFxS2lBdUwzTnZkWEpqWlM5MGVYQmxjeTlxVVZCeWIzaDVMbXB6WEc0Z0tpb3ZJbDBzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XCIpO1xuXG4vKioqLyB9LFxuLyogMjUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdGV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IHsgXFxcImRlZmF1bHRcXFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KSwgX19lc01vZHVsZTogdHJ1ZSB9Oy8vQCBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wySmhZbVZzTFhKMWJuUnBiV1V2WTI5eVpTMXFjeTl2WW1wbFkzUXZhMlY1Y3k1cWN6OW1aVEEySWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHdENRVUZyUWlJc0ltWnBiR1VpT2lJeU5TNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnZXlCY0ltUmxabUYxYkhSY0lqb2djbVZ4ZFdseVpTaGNJbU52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTl2WW1wbFkzUXZhMlY1YzF3aUtTd2dYMTlsYzAxdlpIVnNaVG9nZEhKMVpTQjlPMXh1WEc1Y2JpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJQ29xSUZkRlFsQkJRMHNnUms5UFZFVlNYRzRnS2lvZ0xpOStMMkpoWW1Wc0xYSjFiblJwYldVdlkyOXlaUzFxY3k5dlltcGxZM1F2YTJWNWN5NXFjMXh1SUNvcUlHMXZaSFZzWlNCcFpDQTlJREkxWEc0Z0tpb2diVzlrZFd4bElHTm9kVzVyY3lBOUlEQmNiaUFxS2k4aVhTd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSxcbi8qIDI2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRldmFsKFwiX193ZWJwYWNrX3JlcXVpcmVfXygyNyk7XFxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKS5PYmplY3Qua2V5czsvL0Agc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMMkpoWW1Wc0xYSjFiblJwYldVdmZpOWpiM0psTFdwekwyeHBZbkpoY25rdlptNHZiMkpxWldOMEwydGxlWE11YW5NL01HVXlZaUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJJaXdpWm1sc1pTSTZJakkyTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2ljbVZ4ZFdseVpTZ25MaTR2TGk0dmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtdGxlWE1uS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNnbkxpNHZMaTR2Ylc5a2RXeGxjeThrTG1OdmNtVW5LUzVQWW1wbFkzUXVhMlY1Y3p0Y2JseHVYRzR2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmlBcUtpQlhSVUpRUVVOTElFWlBUMVJGVWx4dUlDb3FJQzR2Zmk5aVlXSmxiQzF5ZFc1MGFXMWxMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDI5aWFtVmpkQzlyWlhsekxtcHpYRzRnS2lvZ2JXOWtkV3hsSUdsa0lEMGdNalpjYmlBcUtpQnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01GeHVJQ29xTHlKZExDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVwiKTtcblxuLyoqKi8gfSxcbi8qIDI3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRldmFsKFwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXFxudmFyIHRvT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCk7XFxuXFxuX193ZWJwYWNrX3JlcXVpcmVfXygzMCkoJ2tleXMnLCBmdW5jdGlvbigka2V5cyl7XFxuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCl7XFxuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xcbiAgfTtcXG59KTsvL0Agc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMMkpoWW1Wc0xYSjFiblJwYldVdmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtdGxlWE11YW5NL1pHWmhOQ0pkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNRMEZCUXlJc0ltWnBiR1VpT2lJeU55NXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4dklERTVMakV1TWk0eE5DQlBZbXBsWTNRdWEyVjVjeWhQS1Z4dWRtRnlJSFJ2VDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk4a0xuUnZMVzlpYW1WamRDY3BPMXh1WEc1eVpYRjFhWEpsS0NjdUx5UXViMkpxWldOMExYTmhjQ2NwS0NkclpYbHpKeXdnWm5WdVkzUnBiMjRvSkd0bGVYTXBlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnYTJWNWN5aHBkQ2w3WEc0Z0lDQWdjbVYwZFhKdUlDUnJaWGx6S0hSdlQySnFaV04wS0dsMEtTazdYRzRnSUgwN1hHNTlLVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNXJaWGx6TG1welhHNGdLaW9nYlc5a2RXeGxJR2xrSUQwZ01qZGNiaUFxS2lCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUZ4dUlDb3FMeUpkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIpO1xuXG4vKioqLyB9LFxuLyogMjggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdGV2YWwoXCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXFxudmFyIGRlZmluZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5KTtcXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcXG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xcbn07Ly9AIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTkrTDJKaFltVnNMWEoxYm5ScGJXVXZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OGtMblJ2TFc5aWFtVmpkQzVxY3o4eVpEbGhJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaU1qZ3Vhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdkx5QTNMakV1TVRNZ1ZHOVBZbXBsWTNRb1lYSm5kVzFsYm5RcFhHNTJZWElnWkdWbWFXNWxaQ0E5SUhKbGNYVnBjbVVvSnk0dkpDNWtaV1pwYm1Wa0p5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwS1h0Y2JpQWdjbVYwZFhKdUlFOWlhbVZqZENoa1pXWnBibVZrS0dsMEtTazdYRzU5TzF4dVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0Z0tpb2dMaTkrTDJKaFltVnNMWEoxYm5ScGJXVXZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OGtMblJ2TFc5aWFtVmpkQzVxYzF4dUlDb3FJRzF2WkhWc1pTQnBaQ0E5SURJNFhHNGdLaW9nYlc5a2RXeGxJR05vZFc1cmN5QTlJREJjYmlBcUtpOGlYU3dpYzI5MWNtTmxVbTl2ZENJNklpSjlcIik7XG5cbi8qKiovIH0sXG4vKiAyOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0ZXZhbChcIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XFxuICBpZihpdCA9PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKFxcXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXFxcIiArIGl0KTtcXG4gIHJldHVybiBpdDtcXG59Oy8vQCBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wySmhZbVZzTFhKMWJuUnBiV1V2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeThrTG1SbFptbHVaV1F1YW5NL1kyTXdZU0pkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2labWxzWlNJNklqSTVMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5OGdOeTR5TGpFZ1VtVnhkV2x5WlU5aWFtVmpkRU52WlhKamFXSnNaU2hoY21kMWJXVnVkQ2xjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvYVhRcGUxeHVJQ0JwWmlocGRDQTlQU0IxYm1SbFptbHVaV1FwZEdoeWIzY2dWSGx3WlVWeWNtOXlLRndpUTJGdUozUWdZMkZzYkNCdFpYUm9iMlFnYjI0Z0lGd2lJQ3NnYVhRcE8xeHVJQ0J5WlhSMWNtNGdhWFE3WEc1OU8xeHVYRzVjYmk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dUlDb3FJRmRGUWxCQlEwc2dSazlQVkVWU1hHNGdLaW9nTGk5K0wySmhZbVZzTFhKMWJuUnBiV1V2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeThrTG1SbFptbHVaV1F1YW5OY2JpQXFLaUJ0YjJSMWJHVWdhV1FnUFNBeU9WeHVJQ29xSUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3WEc0Z0tpb3ZJbDBzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XCIpO1xuXG4vKioqLyB9LFxuLyogMzAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdGV2YWwoXCIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMzEpXFxuICAsIGNvcmUgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKVxcbiAgLCBmYWlscyAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNik7XFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVksIGV4ZWMpe1xcbiAgdmFyIGZuICA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXVxcbiAgICAsIGV4cCA9IHt9O1xcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24oKXsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcXG59Oy8vQCBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wySmhZbVZzTFhKMWJuUnBiV1V2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeThrTG05aWFtVmpkQzF6WVhBdWFuTS9NR1JsTUNKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc09FSkJRVGhDTzBGQlF6bENPMEZCUTBFN1FVRkRRU3h0UkVGQmJVUXNUMEZCVHl4RlFVRkZPMEZCUXpWRUlpd2labWxzWlNJNklqTXdMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5OGdiVzl6ZENCUFltcGxZM1FnYldWMGFHOWtjeUJpZVNCRlV6WWdjMmh2ZFd4a0lHRmpZMlZ3ZENCd2NtbHRhWFJwZG1WelhHNTJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dkpDNWxlSEJ2Y25RbktWeHVJQ0FzSUdOdmNtVWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUx5UXVZMjl5WlNjcFhHNGdJQ3dnWm1GcGJITWdJQ0E5SUhKbGNYVnBjbVVvSnk0dkpDNW1ZV2xzY3ljcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaExSVmtzSUdWNFpXTXBlMXh1SUNCMllYSWdabTRnSUQwZ0tHTnZjbVV1VDJKcVpXTjBJSHg4SUh0OUtWdExSVmxkSUh4OElFOWlhbVZqZEZ0TFJWbGRYRzRnSUNBZ0xDQmxlSEFnUFNCN2ZUdGNiaUFnWlhod1cwdEZXVjBnUFNCbGVHVmpLR1p1S1R0Y2JpQWdKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTWdLeUFrWlhod2IzSjBMa1lnS2lCbVlXbHNjeWhtZFc1amRHbHZiaWdwZXlCbWJpZ3hLVHNnZlNrc0lDZFBZbXBsWTNRbkxDQmxlSEFwTzF4dWZUdGNibHh1WEc0dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQXFLaUJYUlVKUVFVTkxJRVpQVDFSRlVseHVJQ29xSUM0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12SkM1dlltcGxZM1F0YzJGd0xtcHpYRzRnS2lvZ2JXOWtkV3hsSUdsa0lEMGdNekJjYmlBcUtpQnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01GeHVJQ29xTHlKZExDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVwiKTtcblxuLyoqKi8gfSxcbi8qIDMxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRldmFsKFwidmFyIGdsb2JhbCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpXFxuICAsIGNvcmUgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzMpXFxuICAsIGN0eCAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzQpXFxuICAsIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xcblxcbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24odHlwZSwgbmFtZSwgc291cmNlKXtcXG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GXFxuICAgICwgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuR1xcbiAgICAsIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlNcXG4gICAgLCBJU19QUk9UTyAgPSB0eXBlICYgJGV4cG9ydC5QXFxuICAgICwgSVNfQklORCAgID0gdHlwZSAmICRleHBvcnQuQlxcbiAgICAsIElTX1dSQVAgICA9IHR5cGUgJiAkZXhwb3J0LldcXG4gICAgLCBleHBvcnRzICAgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KVxcbiAgICAsIHRhcmdldCAgICA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV1cXG4gICAgLCBrZXksIG93biwgb3V0O1xcbiAgaWYoSVNfR0xPQkFMKXNvdXJjZSA9IG5hbWU7XFxuICBmb3Ioa2V5IGluIHNvdXJjZSl7XFxuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiBrZXkgaW4gdGFyZ2V0O1xcbiAgICBpZihvd24gJiYga2V5IGluIGV4cG9ydHMpY29udGludWU7XFxuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXFxuICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XFxuICAgIC8vIHByZXZlbnQgZ2xvYmFsIHBvbGx1dGlvbiBmb3IgbmFtZXNwYWNlc1xcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxcbiAgICA6IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKVxcbiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxcbiAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uKEMpe1xcbiAgICAgIHZhciBGID0gZnVuY3Rpb24ocGFyYW0pe1xcbiAgICAgICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBDID8gbmV3IEMocGFyYW0pIDogQyhwYXJhbSk7XFxuICAgICAgfTtcXG4gICAgICBGW1BST1RPVFlQRV0gPSBDW1BST1RPVFlQRV07XFxuICAgICAgcmV0dXJuIEY7XFxuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xcbiAgICB9KShvdXQpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XFxuICAgIGlmKElTX1BST1RPKShleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KSlba2V5XSA9IG91dDtcXG4gIH1cXG59O1xcbi8vIHR5cGUgYml0bWFwXFxuJGV4cG9ydC5GID0gMTsgIC8vIGZvcmNlZFxcbiRleHBvcnQuRyA9IDI7ICAvLyBnbG9iYWxcXG4kZXhwb3J0LlMgPSA0OyAgLy8gc3RhdGljXFxuJGV4cG9ydC5QID0gODsgIC8vIHByb3RvXFxuJGV4cG9ydC5CID0gMTY7IC8vIGJpbmRcXG4kZXhwb3J0LlcgPSAzMjsgLy8gd3JhcFxcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDsvL0Agc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMMkpoWW1Wc0xYSjFiblJwYldVdmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k4a0xtVjRjRzl5ZEM1cWN6OHpNbVk0SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNiVVZCUVcxRk8wRkJRMjVGTEhGR1FVRnhSanRCUVVOeVJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1MQ3RFUVVFclJEdEJRVU12UkR0QlFVTkJPMEZCUTBFN1FVRkRRU3hqUVVGak8wRkJRMlFzWTBGQll6dEJRVU5rTEdOQlFXTTdRVUZEWkN4alFVRmpPMEZCUTJRc1pVRkJaVHRCUVVObUxHVkJRV1U3UVVGRFppSXNJbVpwYkdVaU9pSXpNUzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUJuYkc5aVlXd2dJQ0FnUFNCeVpYRjFhWEpsS0NjdUx5UXVaMnh2WW1Gc0p5bGNiaUFnTENCamIzSmxJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMeVF1WTI5eVpTY3BYRzRnSUN3Z1kzUjRJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaThrTG1OMGVDY3BYRzRnSUN3Z1VGSlBWRTlVV1ZCRklEMGdKM0J5YjNSdmRIbHdaU2M3WEc1Y2JuWmhjaUFrWlhod2IzSjBJRDBnWm5WdVkzUnBiMjRvZEhsd1pTd2dibUZ0WlN3Z2MyOTFjbU5sS1h0Y2JpQWdkbUZ5SUVsVFgwWlBVa05GUkNBOUlIUjVjR1VnSmlBa1pYaHdiM0owTGtaY2JpQWdJQ0FzSUVsVFgwZE1UMEpCVENBOUlIUjVjR1VnSmlBa1pYaHdiM0owTGtkY2JpQWdJQ0FzSUVsVFgxTlVRVlJKUXlBOUlIUjVjR1VnSmlBa1pYaHdiM0owTGxOY2JpQWdJQ0FzSUVsVFgxQlNUMVJQSUNBOUlIUjVjR1VnSmlBa1pYaHdiM0owTGxCY2JpQWdJQ0FzSUVsVFgwSkpUa1FnSUNBOUlIUjVjR1VnSmlBa1pYaHdiM0owTGtKY2JpQWdJQ0FzSUVsVFgxZFNRVkFnSUNBOUlIUjVjR1VnSmlBa1pYaHdiM0owTGxkY2JpQWdJQ0FzSUdWNGNHOXlkSE1nSUNBOUlFbFRYMGRNVDBKQlRDQS9JR052Y21VZ09pQmpiM0psVzI1aGJXVmRJSHg4SUNoamIzSmxXMjVoYldWZElEMGdlMzBwWEc0Z0lDQWdMQ0IwWVhKblpYUWdJQ0FnUFNCSlUxOUhURTlDUVV3Z1B5Qm5iRzlpWVd3Z09pQkpVMTlUVkVGVVNVTWdQeUJuYkc5aVlXeGJibUZ0WlYwZ09pQW9aMnh2WW1Gc1cyNWhiV1ZkSUh4OElIdDlLVnRRVWs5VVQxUlpVRVZkWEc0Z0lDQWdMQ0JyWlhrc0lHOTNiaXdnYjNWME8xeHVJQ0JwWmloSlUxOUhURTlDUVV3cGMyOTFjbU5sSUQwZ2JtRnRaVHRjYmlBZ1ptOXlLR3RsZVNCcGJpQnpiM1Z5WTJVcGUxeHVJQ0FnSUM4dklHTnZiblJoYVc1eklHbHVJRzVoZEdsMlpWeHVJQ0FnSUc5M2JpQTlJQ0ZKVTE5R1QxSkRSVVFnSmlZZ2RHRnlaMlYwSUNZbUlHdGxlU0JwYmlCMFlYSm5aWFE3WEc0Z0lDQWdhV1lvYjNkdUlDWW1JR3RsZVNCcGJpQmxlSEJ2Y25SektXTnZiblJwYm5WbE8xeHVJQ0FnSUM4dklHVjRjRzl5ZENCdVlYUnBkbVVnYjNJZ2NHRnpjMlZrWEc0Z0lDQWdiM1YwSUQwZ2IzZHVJRDhnZEdGeVoyVjBXMnRsZVYwZ09pQnpiM1Z5WTJWYmEyVjVYVHRjYmlBZ0lDQXZMeUJ3Y21WMlpXNTBJR2RzYjJKaGJDQndiMnhzZFhScGIyNGdabTl5SUc1aGJXVnpjR0ZqWlhOY2JpQWdJQ0JsZUhCdmNuUnpXMnRsZVYwZ1BTQkpVMTlIVEU5Q1FVd2dKaVlnZEhsd1pXOW1JSFJoY21kbGRGdHJaWGxkSUNFOUlDZG1kVzVqZEdsdmJpY2dQeUJ6YjNWeVkyVmJhMlY1WFZ4dUlDQWdJQzh2SUdKcGJtUWdkR2x0WlhKeklIUnZJR2RzYjJKaGJDQm1iM0lnWTJGc2JDQm1jbTl0SUdWNGNHOXlkQ0JqYjI1MFpYaDBYRzRnSUNBZ09pQkpVMTlDU1U1RUlDWW1JRzkzYmlBL0lHTjBlQ2h2ZFhRc0lHZHNiMkpoYkNsY2JpQWdJQ0F2THlCM2NtRndJR2RzYjJKaGJDQmpiMjV6ZEhKMVkzUnZjbk1nWm05eUlIQnlaWFpsYm5RZ1kyaGhibWRsSUhSb1pXMGdhVzRnYkdsaWNtRnllVnh1SUNBZ0lEb2dTVk5mVjFKQlVDQW1KaUIwWVhKblpYUmJhMlY1WFNBOVBTQnZkWFFnUHlBb1puVnVZM1JwYjI0b1F5bDdYRzRnSUNBZ0lDQjJZWElnUmlBOUlHWjFibU4wYVc5dUtIQmhjbUZ0S1h0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTWdhVzV6ZEdGdVkyVnZaaUJESUQ4Z2JtVjNJRU1vY0dGeVlXMHBJRG9nUXlod1lYSmhiU2s3WEc0Z0lDQWdJQ0I5TzF4dUlDQWdJQ0FnUmx0UVVrOVVUMVJaVUVWZElEMGdRMXRRVWs5VVQxUlpVRVZkTzF4dUlDQWdJQ0FnY21WMGRYSnVJRVk3WEc0Z0lDQWdMeThnYldGclpTQnpkR0YwYVdNZ2RtVnljMmx2Ym5NZ1ptOXlJSEJ5YjNSdmRIbHdaU0J0WlhSb2IyUnpYRzRnSUNBZ2ZTa29iM1YwS1NBNklFbFRYMUJTVDFSUElDWW1JSFI1Y0dWdlppQnZkWFFnUFQwZ0oyWjFibU4wYVc5dUp5QS9JR04wZUNoR2RXNWpkR2x2Ymk1allXeHNMQ0J2ZFhRcElEb2diM1YwTzF4dUlDQWdJR2xtS0VsVFgxQlNUMVJQS1NobGVIQnZjblJ6VzFCU1QxUlBWRmxRUlYwZ2ZId2dLR1Y0Y0c5eWRITmJVRkpQVkU5VVdWQkZYU0E5SUh0OUtTbGJhMlY1WFNBOUlHOTFkRHRjYmlBZ2ZWeHVmVHRjYmk4dklIUjVjR1VnWW1sMGJXRndYRzRrWlhod2IzSjBMa1lnUFNBeE95QWdMeThnWm05eVkyVmtYRzRrWlhod2IzSjBMa2NnUFNBeU95QWdMeThnWjJ4dlltRnNYRzRrWlhod2IzSjBMbE1nUFNBME95QWdMeThnYzNSaGRHbGpYRzRrWlhod2IzSjBMbEFnUFNBNE95QWdMeThnY0hKdmRHOWNiaVJsZUhCdmNuUXVRaUE5SURFMk95QXZMeUJpYVc1a1hHNGtaWGh3YjNKMExsY2dQU0F6TWpzZ0x5OGdkM0poY0Z4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNBa1pYaHdiM0owTzF4dVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0Z0tpb2dMaTkrTDJKaFltVnNMWEoxYm5ScGJXVXZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OGtMbVY0Y0c5eWRDNXFjMXh1SUNvcUlHMXZaSFZzWlNCcFpDQTlJRE14WEc0Z0tpb2diVzlrZFd4bElHTm9kVzVyY3lBOUlEQmNiaUFxS2k4aVhTd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSxcbi8qIDMyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRldmFsKFwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcXG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcXG5pZih0eXBlb2YgX19nID09ICdudW1iZXInKV9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZi8vQCBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wySmhZbVZzTFhKMWJuUnBiV1V2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeThrTG1kc2IySmhiQzVxY3o4eU56QmtJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMSFZEUVVGMVF5SXNJbVpwYkdVaU9pSXpNaTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzk2Ykc5cGNtOWpheTlqYjNKbExXcHpMMmx6YzNWbGN5ODROaU5wYzNOMVpXTnZiVzFsYm5RdE1URTFOelU1TURJNFhHNTJZWElnWjJ4dlltRnNJRDBnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0IwZVhCbGIyWWdkMmx1Wkc5M0lDRTlJQ2QxYm1SbFptbHVaV1FuSUNZbUlIZHBibVJ2ZHk1TllYUm9JRDA5SUUxaGRHaGNiaUFnUHlCM2FXNWtiM2NnT2lCMGVYQmxiMllnYzJWc1ppQWhQU0FuZFc1a1pXWnBibVZrSnlBbUppQnpaV3htTGsxaGRHZ2dQVDBnVFdGMGFDQS9JSE5sYkdZZ09pQkdkVzVqZEdsdmJpZ25jbVYwZFhKdUlIUm9hWE1uS1NncE8xeHVhV1lvZEhsd1pXOW1JRjlmWnlBOVBTQW5iblZ0WW1WeUp5bGZYMmNnUFNCbmJHOWlZV3c3SUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFd4cGJtVWdibTh0ZFc1a1pXWmNibHh1WEc0dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQXFLaUJYUlVKUVFVTkxJRVpQVDFSRlVseHVJQ29xSUM0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12SkM1bmJHOWlZV3d1YW5OY2JpQXFLaUJ0YjJSMWJHVWdhV1FnUFNBek1seHVJQ29xSUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3WEc0Z0tpb3ZJbDBzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XCIpO1xuXG4vKioqLyB9LFxuLyogMzMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdGV2YWwoXCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0ge3ZlcnNpb246ICcxLjIuNid9O1xcbmlmKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZi8vQCBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5K0wySmhZbVZzTFhKMWJuUnBiV1V2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeThrTG1OdmNtVXVhbk0vTmpBNU9TSmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3cyUWtGQk5rSTdRVUZETjBJc2NVTkJRWEZESWl3aVptbHNaU0k2SWpNekxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlHTnZjbVVnUFNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUh0MlpYSnphVzl1T2lBbk1TNHlMalluZlR0Y2JtbG1LSFI1Y0dWdlppQmZYMlVnUFQwZ0oyNTFiV0psY2ljcFgxOWxJRDBnWTI5eVpUc2dMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRiR2x1WlNCdWJ5MTFibVJsWmx4dVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0Z0tpb2dMaTkrTDJKaFltVnNMWEoxYm5ScGJXVXZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OGtMbU52Y21VdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQXpNMXh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWwwc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVwiKTtcblxuLyoqKi8gfSxcbi8qIDM0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRldmFsKFwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXFxudmFyIGFGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpO1xcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4sIHRoYXQsIGxlbmd0aCl7XFxuICBhRnVuY3Rpb24oZm4pO1xcbiAgaWYodGhhdCA9PT0gdW5kZWZpbmVkKXJldHVybiBmbjtcXG4gIHN3aXRjaChsZW5ndGgpe1xcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbihhKXtcXG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcXG4gICAgfTtcXG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24oYSwgYil7XFxuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XFxuICAgIH07XFxuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKGEsIGIsIGMpe1xcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xcbiAgICB9O1xcbiAgfVxcbiAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pe1xcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcXG4gIH07XFxufTsvL0Agc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMMkpoWW1Wc0xYSjFiblJwYldVdmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k4a0xtTjBlQzVxY3o4ek5UWXdJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2lNelF1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZMeUJ2Y0hScGIyNWhiQ0F2SUhOcGJYQnNaU0JqYjI1MFpYaDBJR0pwYm1ScGJtZGNiblpoY2lCaFJuVnVZM1JwYjI0Z1BTQnlaWEYxYVhKbEtDY3VMeVF1WVMxbWRXNWpkR2x2YmljcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaG1iaXdnZEdoaGRDd2diR1Z1WjNSb0tYdGNiaUFnWVVaMWJtTjBhVzl1S0dadUtUdGNiaUFnYVdZb2RHaGhkQ0E5UFQwZ2RXNWtaV1pwYm1Wa0tYSmxkSFZ5YmlCbWJqdGNiaUFnYzNkcGRHTm9LR3hsYm1kMGFDbDdYRzRnSUNBZ1kyRnpaU0F4T2lCeVpYUjFjbTRnWm5WdVkzUnBiMjRvWVNsN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm00dVkyRnNiQ2gwYUdGMExDQmhLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lHTmhjMlVnTWpvZ2NtVjBkWEp1SUdaMWJtTjBhVzl1S0dFc0lHSXBlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWnVMbU5oYkd3b2RHaGhkQ3dnWVN3Z1lpazdYRzRnSUNBZ2ZUdGNiaUFnSUNCallYTmxJRE02SUhKbGRIVnliaUJtZFc1amRHbHZiaWhoTENCaUxDQmpLWHRjYmlBZ0lDQWdJSEpsZEhWeWJpQm1iaTVqWVd4c0tIUm9ZWFFzSUdFc0lHSXNJR01wTzF4dUlDQWdJSDA3WEc0Z0lIMWNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVLQzhxSUM0dUxtRnlaM01nS2k4cGUxeHVJQ0FnSUhKbGRIVnliaUJtYmk1aGNIQnNlU2gwYUdGMExDQmhjbWQxYldWdWRITXBPMXh1SUNCOU8xeHVmVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdkpDNWpkSGd1YW5OY2JpQXFLaUJ0YjJSMWJHVWdhV1FnUFNBek5GeHVJQ29xSUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3WEc0Z0tpb3ZJbDBzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XCIpO1xuXG4vKioqLyB9LFxuLyogMzUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdGV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcXG4gIGlmKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XFxuICByZXR1cm4gaXQ7XFxufTsvL0Agc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMMkpoWW1Wc0xYSjFiblJwYldVdmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k4a0xtRXRablZ1WTNScGIyNHVhbk0vWkRNME5DSmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSXpOUzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCcFppaDBlWEJsYjJZZ2FYUWdJVDBnSjJaMWJtTjBhVzl1SnlsMGFISnZkeUJVZVhCbFJYSnliM0lvYVhRZ0t5QW5JR2x6SUc1dmRDQmhJR1oxYm1OMGFXOXVJU2NwTzF4dUlDQnlaWFIxY200Z2FYUTdYRzU5TzF4dVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUNvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0Z0tpb2dMaTkrTDJKaFltVnNMWEoxYm5ScGJXVXZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OGtMbUV0Wm5WdVkzUnBiMjR1YW5OY2JpQXFLaUJ0YjJSMWJHVWdhV1FnUFNBek5WeHVJQ29xSUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3WEc0Z0tpb3ZJbDBzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XCIpO1xuXG4vKioqLyB9LFxuLyogMzYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdGV2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGV4ZWMpe1xcbiAgdHJ5IHtcXG4gICAgcmV0dXJuICEhZXhlYygpO1xcbiAgfSBjYXRjaChlKXtcXG4gICAgcmV0dXJuIHRydWU7XFxuICB9XFxufTsvL0Agc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOStMMkpoWW1Wc0xYSjFiblJwYldVdmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k4a0xtWmhhV3h6TG1welB6YzFaREFpWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lJek5pNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvWlhobFl5bDdYRzRnSUhSeWVTQjdYRzRnSUNBZ2NtVjBkWEp1SUNFaFpYaGxZeWdwTzF4dUlDQjlJR05oZEdOb0tHVXBlMXh1SUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNCOVhHNTlPMXh1WEc1Y2JpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJQ29xSUZkRlFsQkJRMHNnUms5UFZFVlNYRzRnS2lvZ0xpOStMMkpoWW1Wc0xYSjFiblJwYldVdmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k4a0xtWmhhV3h6TG1welhHNGdLaW9nYlc5a2RXeGxJR2xrSUQwZ016WmNiaUFxS2lCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUZ4dUlDb3FMeUpkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIpO1xuXG4vKioqLyB9LFxuLyogMzcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdGV2YWwoXCJ2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oMilbJ2RlZmF1bHQnXTtcXG5cXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xcbi8qKlxcbiogIFF1ZXVlXFxuKiAgQGRlc2MgQ29udGFpbnMuLi5cXG4qICBAcHJvdG8gQXJyYXksIEV2ZW50cywgQmFzaWNcXG4qL1xcblxcbnZhciBfdXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xcblxcbnZhciBfdXRpbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91dGlsKTtcXG5cXG52YXIgX3R5cGVzQ29sbGVjdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xcblxcbnZhciBfdHlwZXNDb2xsZWN0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVzQ29sbGVjdGlvbik7XFxuXFxudmFyIF90eXBlc0V2ZW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xcblxcbnZhciBfdHlwZXNFdmVudHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZXNFdmVudHMpO1xcblxcbnZhciBRdWV1ZSA9IF90eXBlc0NvbGxlY3Rpb24yWydkZWZhdWx0J10uZXh0ZW5kKGZ1bmN0aW9uICgpIHtcXG5cXG5cXHR0aGlzLmJhc2VUeXBlID0gJ1RZUEVfUVVFVUUnO1xcblxcblxcdHRoaXMucmVhZHkgPSBmdW5jdGlvbiAoX3JlY29yZCkge1xcblxcdFxcdHRoaXMucmVtb3ZlKF9yZWNvcmQpO1xcblxcblxcdFxcdGlmICghdGhpcy5sZW5ndGgpIHtcXG5cXHRcXHRcXHR0aGlzLnRyaWdnZXIoJ2NvbXBsZXRlJyk7XFxuXFx0XFx0fVxcblxcblxcdFxcdHJldHVybiB0aGlzO1xcblxcdH07XFxuXFxuXFx0X3V0aWwyWydkZWZhdWx0J10ubWl4aW4odGhpcywgX3R5cGVzRXZlbnRzMlsnZGVmYXVsdCddKTtcXG5cXG5cXHRyZXR1cm4gdGhpcztcXG59KTtcXG5cXG5leHBvcnRzWydkZWZhdWx0J10gPSBRdWV1ZTtcXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsvL0Agc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOXpiM1Z5WTJVdmRIbHdaWE12VVhWbGRXVXVhbk0vTUROall5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3pzN1owTkJUV2xDTEVWQlFVMDdPenM3TWtOQlEwRXNSVUZCYTBJN096czdkVU5CUTNSQ0xFVkJRV003T3pzN1FVRkZha01zU1VGQlNTeExRVUZMTEVkQlFVY3NOa0pCUVZjc1RVRkJUU3hEUVVGRExGbEJRVms3TzBGQlJYcERMRXRCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzV1VGQldTeERRVUZET3p0QlFVVTNRaXhMUVVGSkxFTkJRVU1zUzBGQlN5eEhRVUZITEZWQlFWVXNUMEZCVHl4RlFVRkZPMEZCUXk5Q0xFMUJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN08wRkJSWEpDTEUxQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRk8wRkJRMnBDTEU5QlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03UjBGRGVrSTdPMEZCUlVRc1UwRkJUeXhKUVVGSkxFTkJRVU03UlVGRFdpeERRVUZET3p0QlFVVkdMRzFDUVVGTExFdEJRVXNzUTBGQlF5eEpRVUZKTERKQ1FVRlRMRU5CUVVNN08wRkJSWHBDTEZGQlFVOHNTVUZCU1N4RFFVRkRPME5CUlZvc1EwRkJReXhEUVVGRE96dHhRa0ZGV1N4TFFVRkxJaXdpWm1sc1pTSTZJak0zTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0cUlDQlJkV1YxWlZ4dUtpQWdRR1JsYzJNZ1EyOXVkR0ZwYm5NdUxpNWNiaW9nSUVCd2NtOTBieUJCY25KaGVTd2dSWFpsYm5SekxDQkNZWE5wWTF4dUtpOWNibHh1YVcxd2IzSjBJSFYwYVd3Z1puSnZiU0FuZFhScGJDYzdYRzVwYlhCdmNuUWdRMjlzYkdWamRHbHZiaUJtY205dElDZDBlWEJsY3k5RGIyeHNaV04wYVc5dUp6dGNibWx0Y0c5eWRDQkZkbVZ1ZEhNZ1puSnZiU0FuZEhsd1pYTXZSWFpsYm5Sekp6dGNibHh1ZG1GeUlGRjFaWFZsSUQwZ1EyOXNiR1ZqZEdsdmJpNWxlSFJsYm1Rb1puVnVZM1JwYjI0Z0tDa2dlMXh1WEc1Y2RIUm9hWE11WW1GelpWUjVjR1VnUFNBblZGbFFSVjlSVlVWVlJTYzdYRzVjYmx4MGRHaHBjeTV5WldGa2VTQTlJR1oxYm1OMGFXOXVJQ2hmY21WamIzSmtLU0I3WEc1Y2RGeDBkR2hwY3k1eVpXMXZkbVVvWDNKbFkyOXlaQ2s3WEc1Y2JseDBYSFJwWmlBb0lYUm9hWE11YkdWdVozUm9LU0I3WEc1Y2RGeDBYSFIwYUdsekxuUnlhV2RuWlhJb0oyTnZiWEJzWlhSbEp5azdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTTdYRzVjZEgwN1hHNWNkRnh1WEhSMWRHbHNMbTFwZUdsdUtIUm9hWE1zSUVWMlpXNTBjeWs3WEc1Y2JseDBjbVYwZFhKdUlIUm9hWE03WEc1Y2JuMHBPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JSZFdWMVpUdGNibHh1WEc0dktpb2dWMFZDVUVGRFN5QkdUMDlVUlZJZ0tpcGNiaUFxS2lBdUwzTnZkWEpqWlM5MGVYQmxjeTlSZFdWMVpTNXFjMXh1SUNvcUx5SmRMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cIik7XG5cbi8qKiovIH0sXG4vKiAzOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0ZXZhbChcImV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XFxuLyoqXFxuICogQG1vZHVsZSBldmFsQWN0aW9uXFxuICovXFxuXFxuLyoqXFxuICogUGVyZm9ybXMgYGV2YWwoKWAgb24gdGhlIHZhbHVlIG9mIGFuIGBhY3Rpb25gIGF0dHJpYnV0ZSBvbiBhbiBIVE1MIGVsZW1lbnQuXFxuICogQGFyZyB7c3RyaW5nfSBfc291cmNlIC0gSmF2YVNjcmlwdCBzb3VyY2UgY29kZS5cXG4gKiBAYXJnIHtTY29wZX0gX3Njb3BlIC0gVGhlIGNvbnRleHQgaW4gd2hpY2ggdG8gcnVuIHRoZSBzb3VyY2UuXFxuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHQgb2YgdGhlIGV2YWx1YXRlZCBzb3VyY2UuXFxuICovXFxuZnVuY3Rpb24gZXZhbEFjdGlvbihfc291cmNlLCBfc2NvcGUpIHtcXG5cXHR2YXIgZXJyb3I7XFxuXFxuXFx0ZnVuY3Rpb24gdGFyZ2V0KF9zZWxlY3Rvcikge1xcblxcdFxcdGlmIChfc2NvcGUuZXZlbnQpIHtcXG5cXHRcXHRcXHRyZXR1cm4gX3NlbGVjdG9yID8gJChfc2NvcGUuZXZlbnQudGFyZ2V0KS5jbG9zZXN0KF9zZWxlY3RvcilbMF0gOiAkKF9zY29wZS5ldmVudC50YXJnZXQpO1xcblxcdFxcdH1cXG5cXHR9XFxuXFxuXFx0Ly8gZXhwb3NlIG1lbWJlcnMgb2YgdGhlIG9iamVjdCBhcyBpZiB0aGV5IHdlcmUgbG9jYWwgdmFyaWFibGVzLlxcblxcdC8vIE5PVEU6IG1ldGhvZHMgc3RpbGwgcmV0YWluIHRoZWlyIFxcXCJ0aGlzXFxcIiBiaW5kaW5nIHRvIHRoZSBvYmplY3QhIDpEXFxuXFx0cmV0dXJuIGV2YWwoXFxcIndpdGggKF9zY29wZSkgeyB0cnkge1xcXCIgKyBfc291cmNlICsgXFxcIjt9IGNhdGNoIChlcnJvcikgeyBjb25zb2xlLmVycm9yKCdFcnJvcjonLCBlcnJvci5tZXNzYWdlLCAnZXZhbHVhdGluZyBhY3Rpb24nLCBfc291cmNlLCAnaW4nLCBfc2NvcGUuaWQoKSB8fCBfc2NvcGUuYWRkcmVzcygpKTsgfSB9XFxcIik7XFxufVxcblxcbmV4cG9ydHNbXFxcImRlZmF1bHRcXFwiXSA9IGV2YWxBY3Rpb247XFxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1xcXCJkZWZhdWx0XFxcIl07Ly9AIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTl6YjNWeVkyVXZaWFpoYkVGamRHbHZiaTVxY3o4elkyWmlJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdPMEZCVlVFc1UwRkJVeXhWUVVGVkxFTkJRVVVzVDBGQlR5eEZRVUZGTEUxQlFVMHNSVUZCUlR0QlFVTnlReXhMUVVGSkxFdEJRVXNzUTBGQlF6czdRVUZGVml4VlFVRlRMRTFCUVUwc1EwRkJSU3hUUVVGVExFVkJRVVU3UVVGRE0wSXNUVUZCU1N4TlFVRk5MRU5CUVVNc1MwRkJTeXhGUVVGRk8wRkJRMnBDTEZWQlFVOHNVMEZCVXl4SFFVRkhMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0SFFVTjZSanRGUVVORU96czdPMEZCU1VRc1VVRkJUeXhKUVVGSkxFTkJRVU1zZFVKQlFYVkNMRWRCUVVNc1QwRkJUeXhIUVVGRExIRkpRVUZ4U1N4RFFVRkRMRU5CUVVNN1EwRkRia3c3TzNGQ1FVVmpMRlZCUVZVaUxDSm1hV3hsSWpvaU16Z3Vhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpcGNiaUFxSUVCdGIyUjFiR1VnWlhaaGJFRmpkR2x2Ymx4dUlDb3ZYRzVjYmk4cUtseHVJQ29nVUdWeVptOXliWE1nWUdWMllXd29LV0FnYjI0Z2RHaGxJSFpoYkhWbElHOW1JR0Z1SUdCaFkzUnBiMjVnSUdGMGRISnBZblYwWlNCdmJpQmhiaUJJVkUxTUlHVnNaVzFsYm5RdVhHNGdLaUJBWVhKbklIdHpkSEpwYm1kOUlGOXpiM1Z5WTJVZ0xTQktZWFpoVTJOeWFYQjBJSE52ZFhKalpTQmpiMlJsTGx4dUlDb2dRR0Z5WnlCN1UyTnZjR1Y5SUY5elkyOXdaU0F0SUZSb1pTQmpiMjUwWlhoMElHbHVJSGRvYVdOb0lIUnZJSEoxYmlCMGFHVWdjMjkxY21ObExseHVJQ29nUUhKbGRIVnlibk1nZXlwOUlGUm9aU0J5WlhOMWJIUWdiMllnZEdobElHVjJZV3gxWVhSbFpDQnpiM1Z5WTJVdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdWMllXeEJZM1JwYjI0Z0tGOXpiM1Z5WTJVc0lGOXpZMjl3WlNrZ2UxeHVYSFIyWVhJZ1pYSnliM0k3WEc1Y2JseDBablZ1WTNScGIyNGdkR0Z5WjJWMElDaGZjMlZzWldOMGIzSXBJSHRjYmx4MFhIUnBaaUFvWDNOamIzQmxMbVYyWlc1MEtTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z1gzTmxiR1ZqZEc5eUlEOGdKQ2hmYzJOdmNHVXVaWFpsYm5RdWRHRnlaMlYwS1M1amJHOXpaWE4wS0Y5elpXeGxZM1J2Y2lsYk1GMGdPaUFrS0Y5elkyOXdaUzVsZG1WdWRDNTBZWEpuWlhRcE8xeHVYSFJjZEgxY2JseDBmVnh1WEhSY2JseDBMeThnWlhod2IzTmxJRzFsYldKbGNuTWdiMllnZEdobElHOWlhbVZqZENCaGN5QnBaaUIwYUdWNUlIZGxjbVVnYkc5allXd2dkbUZ5YVdGaWJHVnpMbHh1WEhRdkx5Qk9UMVJGT2lCdFpYUm9iMlJ6SUhOMGFXeHNJSEpsZEdGcGJpQjBhR1ZwY2lCY0luUm9hWE5jSWlCaWFXNWthVzVuSUhSdklIUm9aU0J2WW1wbFkzUWhJRHBFWEc1Y2RISmxkSFZ5YmlCbGRtRnNLRndpZDJsMGFDQW9YM05qYjNCbEtTQjdJSFJ5ZVNCN1hDSXJYM052ZFhKalpTdGNJanQ5SUdOaGRHTm9JQ2hsY25KdmNpa2dleUJqYjI1emIyeGxMbVZ5Y205eUtDZEZjbkp2Y2pvbkxDQmxjbkp2Y2k1dFpYTnpZV2RsTENBblpYWmhiSFZoZEdsdVp5QmhZM1JwYjI0bkxDQmZjMjkxY21ObExDQW5hVzRuTENCZmMyTnZjR1V1YVdRb0tTQjhmQ0JmYzJOdmNHVXVZV1JrY21WemN5Z3BLVHNnZlNCOVhDSXBPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCbGRtRnNRV04wYVc5dU8xeHVYRzVjYmk4cUtpQlhSVUpRUVVOTElFWlBUMVJGVWlBcUtseHVJQ29xSUM0dmMyOTFjbU5sTDJWMllXeEJZM1JwYjI0dWFuTmNiaUFxS2k4aVhTd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSxcbi8qIDM5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRldmFsKFwidmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpWydkZWZhdWx0J107XFxuXFxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcXG4vKipcXG4gKiBCYXNlIGNsYXNzIGZvciBhIHNjb3BlIGFjdGluZyBhcyBhbiBcXFwiZW50aXR5XFxcIiB3aXRoIFxcXCJzdGF0ZXNcXFwiLCBcXFwiYmVoYXZpb3JzXFxcIiBhbmQgdGhlIGFiaWxpdHkgdG8gcmVzcG9uZCAocmVzcG9uc2liaWxpdGllcykgdG8gYmVoYXZpb3JzLlxcbiAqXFxuICogQG1vZHVsZVxcbiAqL1xcblxcbnZhciBfdXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xcblxcbnZhciBfdXRpbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91dGlsKTtcXG5cXG52YXIgX3R5cGVzR2xvYmFsU2NvcGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKTtcXG5cXG52YXIgX3R5cGVzR2xvYmFsU2NvcGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZXNHbG9iYWxTY29wZSk7XFxuXFxudmFyIF90eXBlc0NvbGxlY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcXG5cXG52YXIgX3R5cGVzQ29sbGVjdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlc0NvbGxlY3Rpb24pO1xcblxcbnZhciBfdHlwZXNEaW1lbnNpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcXG5cXG52YXIgX3R5cGVzUXVldWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3KTtcXG5cXG52YXIgX3R5cGVzUXVldWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZXNRdWV1ZSk7XFxuXFxuZnVuY3Rpb24gaW52b2tlUmVzcG9uc2liaWxpdGllcyhfc2NvcGUsIF9ldmVudCkge1xcblxcdGlmIChfc2NvcGUgJiYgX3Njb3BlLnJlc3BvbnNpYmlsaXRpZXMgJiYgX3Njb3BlLmlzTWVtYmVyU2FmZSgncmVzcG9uc2liaWxpdGllcycpKSB7XFxuXFx0XFx0X3Njb3BlLnJlc3BvbnNpYmlsaXRpZXMuZm9yRWFjaChmdW5jdGlvbiAoX3JlY29yZCkge1xcblxcdFxcdFxcdGlmIChfcmVjb3JkLm5hbWUgPT09IF9ldmVudC5uYW1lKSB7XFxuXFxuXFx0XFx0XFx0XFx0Ly8gY29uc29sZS5sb2coX3Njb3BlLmlkKCksICdyZXNwb25kJywgX3JlY29yZC5uYW1lLCAnZnJvbScsIF9ldmVudC50YXJnZXRTY29wZS5pZCgpKTtcXG5cXHRcXHRcXHRcXHRfcmVjb3JkLmFiaWxpdHkuY2FsbChfc2NvcGUsIF9ldmVudCk7XFxuXFx0XFx0XFx0fVxcblxcdFxcdH0pO1xcblxcdH1cXG59XFxuXFxuLyoqXFxuICogPHNwYW4gY2xhc3M9XFxcIm5vdGUgaW1wb3J0YW50XFxcIj5OT1RFOiBUaGlzIGlzIE5PVCBhIGNvbnN0cnVjdG9yLiBVc2UgYEVudGl0eS5jcmVhdGUoKWAgdG8gZ2V0IGEgbmV3IGluc3RhbmNlLjwvc3Bhbj5cXG4gKiBAY2xhc3NkZXNjIEJhc2UgY2xhc3MgZm9yIGEgc2NvcGUgYWN0aW5nIGFzIGFuIFxcXCJlbnRpdHlcXFwiIHdpdGggXFxcInN0YXRlc1xcXCIsIFxcXCJiZWhhdmlvcnNcXFwiIGFuZCB0aGUgYWJpbGl0eSB0byByZXNwb25kIChyZXNwb25zaWJpbGl0aWVzKSB0byBiZWhhdmlvcnMuIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHRoZXNlIHRlcm1zIHJlYWQgW3RoaXNde0BsaW5rIG1vZHVsZTp0eXBlcy9FbnRpdHl9LlxcbiAqIDxzdHlsZT5cXG4gKiAudGFnIHtcXG4gKiAgIHBhZGRpbmc6IDFweCA0cHg7XFxuICogICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICpcXG4gKiAgIGNvbG9yOiAjZmZmO1xcbiAqICAgYmFja2dyb3VuZC1jb2xvcjogI2FhYTtcXG4gKiB9XFxuICpcXG4gKiAudGFnLmJlaGF2aW9yIHtcXG4gKlxcdCBiYWNrZ3JvdW5kLWNvbG9yOiAjMGJhO1xcbiAqIH1cXG4gKlxcbiAqIC50YWcuc3RhdGUge1xcbiAqXFx0IGJhY2tncm91bmQtY29sb3I6ICNiYTA7XFxuICogfVxcbiAqXFxuICogLm5vdGUge1xcbiAqICAgYm9yZGVyOiBzb2xpZCAxcHg7XFxuICogICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICogICBwYWRkaW5nOiAxcHggNHB4O1xcbiAqICAgY29sb3I6ICNhYWE7XFxuICogICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlO1xcbiAqIH1cXG4gKiBcXG4gKiAubm90ZS5pbXBvcnRhbnQge1xcbiAqICAgY29sb3I6ICNiNTU7XFxuICogICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmVlO1xcbiAqIH1cXG4gKiA8L3N0eWxlPlxcbiAqXFxuICogQGNsYXNzXFxuICogQHByb3Age21vZHVsZTp0eXBlcy9Db2xsZWN0aW9ufkNvbGxlY3Rpb259IHJlc3BvbnNpYmlsaXRpZXMgLSBBIGNvbGxlY3Rpb24gb2YgUmVzcG9uc2liaWxpdHlSZWNvcmRzIGZvciB0aGUgc2NvcGUuXFxuICogQHByb3Age2Jvb2xlYW59IGlzQ29tcGxldGUgLSBNYXJrcyBhIHNjb3BlIGFzIFxcXCJjb21wbGV0ZVxcXCIgdmlhIHRoZSBbYGNvbXBsZXRlKClgXXtAbGluayBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSNjb21wbGV0ZX0gYmVoYXZpb3IuXFxuICogQGV4dGVuZHMgR2xvYmFsU2NvcGVcXG4gKi9cXG52YXIgRW50aXR5ID0gX3R5cGVzR2xvYmFsU2NvcGUyWydkZWZhdWx0J10uZXh0ZW5kKGZ1bmN0aW9uICgpIHtcXG5cXG5cXHRmdW5jdGlvbiByZXNvbHZlVGFyZ2V0KF90YXJnZXQpIHtcXG5cXG5cXHRcXHRzd2l0Y2ggKHR5cGVvZiBfdGFyZ2V0KSB7XFxuXFx0XFx0XFx0Y2FzZSAnc3RyaW5nJzpcXG5cXHRcXHRcXHRcXHRyZXR1cm4gdGhpcy5maW5kT3duKF90YXJnZXQpO1xcblxcdFxcdFxcdGNhc2UgJ29iamVjdCc6XFxuXFx0XFx0XFx0XFx0aWYgKF90YXJnZXQuanF1ZXJ5KSByZXR1cm4gX3RhcmdldDtcXG5cXHRcXHRcXHRcXHRpZiAoRW50aXR5LmlzUHJvdG90eXBlT2YoX3RhcmdldCkpIHJldHVybiBfdGFyZ2V0O1xcblxcdFxcdFxcdFxcdGlmIChfdGFyZ2V0Lm5vZGVUeXBlID09PSBkb2N1bWVudC5FTEVNRU5UX05PREUpIHJldHVybiAkKF90YXJnZXQpO1xcblxcdFxcdH1cXG5cXG5cXHRcXHRyZXR1cm4gdGhpcztcXG5cXHR9XFxuXFxuXFx0ZnVuY3Rpb24gUmVzcG9uc2liaWxpdHlSZWNvcmQoX25hbWUsIF9hYmlsaXR5KSB7XFxuXFx0XFx0dGhpcy5uYW1lID0gX25hbWU7XFxuXFx0XFx0dGhpcy5hYmlsaXR5ID0gX2FiaWxpdHk7XFxuXFx0fVxcblxcblxcdGZ1bmN0aW9uIGRyYWdHcmVldGVyKF9ldmVudCkge1xcblxcdFxcdHN3aXRjaCAoX2V2ZW50LnR5cGUpIHtcXG5cXHRcXHRcXHRjYXNlICdkcmFnLXN0YXJ0JzpcXG5cXHRcXHRcXHRcXHR0aGlzLmdyYWIoX2V2ZW50LnN0YXRlKTtcXG5cXHRcXHRcXHRcXHRicmVhaztcXG5cXG5cXHRcXHRcXHRjYXNlICdkcmFnLW1vdmUnOlxcblxcdFxcdFxcdFxcdHRoaXMuZHJhZ2dpbmcoX2V2ZW50LnN0YXRlKTtcXG5cXHRcXHRcXHRcXHRicmVhaztcXG5cXG5cXHRcXHRcXHRjYXNlICdkcmFnLWVuZCc6XFxuXFx0XFx0XFx0XFx0dGhpcy5yZWxlYXNlKF9ldmVudC5zdGF0ZSk7XFxuXFx0XFx0XFx0XFx0YnJlYWs7XFxuXFx0XFx0fVxcblxcdH1cXG5cXG5cXHRmdW5jdGlvbiBhdHRhY2hEcmFnRXZlbnRzKCkge1xcblxcdFxcdGlmICh0aGlzLmRyYWdnYWJsZXMgJiYgdGhpcy5pc01lbWJlclNhZmUoJ2RyYWdnYWJsZXMnKSAmJiB0aGlzLmRyYWdnYWJsZXMubGVuZ3RoKSB7XFxuXFx0XFx0XFx0dGhpcy5vbignZHJhZy1zdGFydCBkcmFnLW1vdmUgZHJhZy1lbmQnLCBkcmFnR3JlZXRlcik7XFxuXFx0XFx0fVxcblxcdH1cXG5cXG5cXHR0aGlzLmJhc2VUeXBlID0gJ1RZUEVfRU5USVRZJztcXG5cXHR0aGlzLlNUQVRFID0ge1xcblxcdFxcdFBMQVlJTkc6ICdQTEFZSU5HJyxcXG5cXHRcXHRCQUNLR1JPVU5EOiAnQkFDS0dST1VORCcsXFxuXFx0XFx0Vk9JQ0VfT1ZFUjogJ1ZPSUNFLU9WRVInLFxcblxcdFxcdFNGWDogJ1NGWCdcXG5cXHR9O1xcblxcblxcdHRoaXMudGltZW91dElEID0gbnVsbDtcXG5cXHR0aGlzLmludGVydmFsSUQgPSBudWxsO1xcblxcdHRoaXMucmVzcG9uc2liaWxpdGllcyA9IG51bGw7XFxuXFx0dGhpcy5pc0NvbXBsZXRlID0gZmFsc2U7XFxuXFx0dGhpcy5zaG91bGRJbmhlcml0QWJpbGl0aWVzID0gdHJ1ZTtcXG5cXHR0aGlzLmZyYW1lSGFuZGxlcnMgPSBudWxsO1xcblxcdHRoaXMuZnJhbWVSYXRlID0gNjA7IC8vIDYwZnBzXFxuXFx0dGhpcy5kcmFnZ2FibGVzID0gbnVsbDtcXG5cXHR0aGlzLnJlcXVpcmVkUXVldWUgPSBudWxsO1xcblxcblxcdHRoaXMuaGFuZGxlUHJvcGVydHkoZnVuY3Rpb24gKCkge1xcblxcdFxcdHRoaXMuc2l6ZSA9IGZ1bmN0aW9uIChfbm9kZSwgX25hbWUsIF92YWx1ZSwgX3Byb3BlcnR5KSB7XFxuXFx0XFx0XFx0dmFyIHNpemU7XFxuXFxuXFx0XFx0XFx0aWYgKHRoaXMuaXMoX25vZGUpKSB7XFxuXFx0XFx0XFx0XFx0c2l6ZSA9IF92YWx1ZS5zcGxpdCgvXFxcXHMqW3gsXVxcXFxzKi8pO1xcblxcdFxcdFxcdFxcdHRoaXMuY3NzKHtcXG5cXHRcXHRcXHRcXHRcXHR3aWR0aDogc2l6ZVswXSxcXG5cXHRcXHRcXHRcXHRcXHRoZWlnaHQ6IHNpemVbMV0gfHwgc2l6ZVswXVxcblxcdFxcdFxcdFxcdH0pO1xcblxcdFxcdFxcdH1cXG5cXHRcXHR9O1xcblxcblxcdFxcdHRoaXMucG9zaXRpb24gPSBmdW5jdGlvbiAoX25vZGUsIF9uYW1lLCBfdmFsdWUsIF9wcm9wZXJ0eSkge1xcblxcdFxcdFxcdHZhciBzaXplO1xcblxcblxcdFxcdFxcdGlmICh0aGlzLmlzKF9ub2RlKSkge1xcblxcdFxcdFxcdFxcdHNpemUgPSBfdmFsdWUuc3BsaXQoL1xcXFxzKlt4LF1cXFxccyovKTtcXG5cXHRcXHRcXHRcXHR0aGlzLmNzcyh7XFxuXFx0XFx0XFx0XFx0XFx0dG9wOiBzaXplWzFdIHx8IHNpemVbMF0sXFxuXFx0XFx0XFx0XFx0XFx0bGVmdDogc2l6ZVswXVxcblxcdFxcdFxcdFxcdH0pO1xcblxcdFxcdFxcdH1cXG5cXHRcXHR9O1xcblxcblxcdFxcdHRoaXMuZHJhZ2dhYmxlID0gZnVuY3Rpb24gKF9ub2RlLCBfbmFtZSwgX3ZhbHVlLCBfcHJvcGVydHkpIHtcXG5cXHRcXHRcXHRpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoJ2RyYWdnYWJsZXMnKSkge1xcblxcdFxcdFxcdFxcdHRoaXMuZHJhZ2dhYmxlcyA9ICQoKTtcXG5cXHRcXHRcXHR9XFxuXFxuXFx0XFx0XFx0dGhpcy5kcmFnZ2FibGVzLnB1c2goX25vZGUpO1xcblxcdFxcdH07XFxuXFx0fSk7XFxuXFxuXFx0dGhpcy5fX2luaXQgPSBmdW5jdGlvbiAoKSB7XFxuXFx0XFx0dGhpcy5wcm90bygpO1xcblxcdFxcdGF0dGFjaERyYWdFdmVudHMuY2FsbCh0aGlzKTtcXG5cXHRcXHRyZXR1cm4gdGhpcztcXG5cXHR9O1xcblxcblxcdHRoaXMuc2l6ZSA9IGZ1bmN0aW9uICgpIHtcXG5cXHRcXHR2YXIgc2l6ZTtcXG5cXG5cXHRcXHRpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xcblxcdFxcdFxcdHNpemUgPSBfdHlwZXNEaW1lbnNpb25zLlNpemUuY3JlYXRlKGFyZ3VtZW50cyk7XFxuXFx0XFx0XFx0dGhpcy5jc3Moc2l6ZSk7XFxuXFx0XFx0XFx0cmV0dXJuIHNpemU7XFxuXFx0XFx0fVxcblxcblxcdFxcdHJldHVybiBfdHlwZXNEaW1lbnNpb25zLlNpemUuY3JlYXRlKCkuc2V0KHRoaXMud2lkdGgoKSwgdGhpcy5oZWlnaHQoKSk7XFxuXFx0fTtcXG5cXG5cXHR0aGlzLnByb3BhZ2F0ZUJlaGF2aW9yID0gZnVuY3Rpb24gKF9ldmVudCkge1xcblxcdFxcdHZhciBpZHM7XFxuXFxuXFx0XFx0aWRzID0gW107XFxuXFxuXFx0XFx0dGhpcy5maW5kT3duKCcucGwtc2NvcGUnKS5lYWNoKGZ1bmN0aW9uIChfaW5kZXgsIF9ub2RlKSB7XFxuXFx0XFx0XFx0dmFyICRub2RlID0gJChfbm9kZSk7XFxuXFx0XFx0XFx0aWRzLnB1c2goJG5vZGUuaWQoKSB8fCAkbm9kZS5hZGRyZXNzKCkpO1xcblxcdFxcdH0pO1xcblxcblxcdFxcdGlmICh0aGlzLmhhc093blByb3BlcnR5KCdlbnRpdGllcycpICYmIHRoaXMuZW50aXRpZXMubGVuZ3RoKSB7XFxuXFx0XFx0XFx0Ly8gY29uc29sZS5sb2codGhpcy5pZCgpLCAncHJvcGFnYXRlJywgX2V2ZW50Lm5hbWUsICd0bycsIHRoaXMuZW50aXRpZXMubGVuZ3RoLCAnbm9kZXMnLCBpZHMpO1xcblxcblxcdFxcdFxcdHRoaXMuZW50aXRpZXMuZm9yRWFjaChmdW5jdGlvbiAoX3Njb3BlKSB7XFxuXFx0XFx0XFx0XFx0aW52b2tlUmVzcG9uc2liaWxpdGllcyhfc2NvcGUsIF9ldmVudCk7XFxuXFx0XFx0XFx0XFx0X3Njb3BlLnByb3BhZ2F0ZUJlaGF2aW9yKF9ldmVudCk7XFxuXFx0XFx0XFx0fSk7XFxuXFx0XFx0fVxcblxcblxcdFxcdHJldHVybiB0aGlzO1xcblxcdH07XFxuXFxuXFx0dGhpcy5yZXF1aXJlID0gZnVuY3Rpb24gKF9lbnRpdHkpIHtcXG5cXHRcXHRpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoJ3JlcXVpcmVkUXVldWUnKSkge1xcblxcdFxcdFxcdHRoaXMucmVxdWlyZWRRdWV1ZSA9IF90eXBlc1F1ZXVlMlsnZGVmYXVsdCddLmNyZWF0ZSgpO1xcblxcdFxcdFxcdHRoaXMucmVxdWlyZWRRdWV1ZS5vbignY29tcGxldGUnLCB0aGlzLmJpbmQoZnVuY3Rpb24gKCkge1xcblxcdFxcdFxcdFxcdHRoaXMubG9nKCdlbnRpdHkgY29tcGxldGUnKTtcXG5cXHRcXHRcXHRcXHR0aGlzLmNvbXBsZXRlKCk7XFxuXFx0XFx0XFx0fSkpO1xcblxcblxcdFxcdFxcdHRoaXMucmVzcG9uZCgnY29tcGxldGUnLCBmdW5jdGlvbiAoX2V2ZW50KSB7XFxuXFx0XFx0XFx0XFx0aWYgKCF0aGlzLmhhcyhfZXZlbnQudGFyZ2V0KSkgcmV0dXJuO1xcblxcdFxcdFxcdFxcdGlmIChfZXZlbnQudGFyZ2V0U2NvcGUgPT09IHRoaXMpIHJldHVybjtcXG5cXG5cXHRcXHRcXHRcXHR0aGlzLnJlcXVpcmVkUXVldWUucmVhZHkoX2V2ZW50LmJlaGF2aW9yVGFyZ2V0KTtcXG5cXHRcXHRcXHR9KTtcXG5cXHRcXHR9XFxuXFxuXFx0XFx0dGhpcy5yZXF1aXJlZFF1ZXVlLmFkZChfZW50aXR5KTtcXG5cXHRcXHR0aGlzLmdhdGUoKTtcXG5cXG5cXHRcXHRyZXR1cm4gdGhpcztcXG5cXHR9O1xcblxcblxcdHRoaXMuYmVoYXZpb3IgPSBmdW5jdGlvbiAoX25hbWUsIF9iZWhhdmlvcikge1xcblxcdFxcdF9iZWhhdmlvci5tZXRob2QgPSB0aGlzW19uYW1lXSA9IGZ1bmN0aW9uICgpIHtcXG5cXHRcXHRcXHR2YXIgYmVoYXZpb3JFdmVudCwgcmVzdWx0O1xcblxcblxcdFxcdFxcdGJlaGF2aW9yRXZlbnQgPSB7XFxuXFx0XFx0XFx0XFx0bmFtZTogX25hbWUsXFxuXFx0XFx0XFx0XFx0bWVzc2FnZTogJycsXFxuXFx0XFx0XFx0XFx0dGFyZ2V0U2NvcGU6IHRoaXMsXFxuXFx0XFx0XFx0XFx0YmVoYXZpb3JUYXJnZXQ6IHRoaXNcXG5cXHRcXHRcXHR9O1xcblxcblxcdFxcdFxcdHJlc3VsdCA9IF9iZWhhdmlvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcblxcblxcdFxcdFxcdGlmICh0eXBlb2YgcmVzdWx0ID09PSAnb2JqZWN0Jykge1xcblxcdFxcdFxcdFxcdGJlaGF2aW9yRXZlbnQgPSBfdXRpbDJbJ2RlZmF1bHQnXS5taXhpbihiZWhhdmlvckV2ZW50LCByZXN1bHQpO1xcblxcdFxcdFxcdH1cXG5cXG5cXHRcXHRcXHRpZiAocmVzdWx0ICE9PSBmYWxzZSkge1xcblxcdFxcdFxcdFxcdHRoaXMudHJpZ2dlcigkLkV2ZW50KCdiZWhhdmlvcicsIGJlaGF2aW9yRXZlbnQpKTtcXG5cXHRcXHRcXHR9XFxuXFxuXFx0XFx0XFx0cmV0dXJuIHRoaXM7XFxuXFx0XFx0fTtcXG5cXG5cXHRcXHRyZXR1cm4gdGhpcztcXG5cXHR9O1xcblxcblxcdHRoaXMucmVzcG9uZCA9IGZ1bmN0aW9uICgpIHtcXG5cXHRcXHR2YXIgbmFtZSwgYWJpbGl0eSwgcGFyZW50U2NvcGUsIGFiaWxpdGllcywgcHJvdG9BYmlsaXRpZXM7XFxuXFxuXFx0XFx0aWYgKCF0aGlzLmhhc093blByb3BlcnR5KCdyZXNwb25zaWJpbGl0aWVzJykpIHtcXG5cXHRcXHRcXHRhYmlsaXRpZXMgPSBfdHlwZXNDb2xsZWN0aW9uMlsnZGVmYXVsdCddLmNyZWF0ZSgpO1xcblxcdFxcdFxcdHByb3RvQWJpbGl0aWVzID0gdGhpcy5wcm92aWRlQWJsaWxpdHlQb3RvdHlwZSgpO1xcblxcblxcdFxcdFxcdGlmICh0aGlzLnNob3VsZEluaGVyaXRBYmlsaXRpZXMgJiYgcHJvdG9BYmlsaXRpZXMgJiYgcHJvdG9BYmlsaXRpZXMucmVzcG9uc2liaWxpdGllcykge1xcblxcdFxcdFxcdFxcdGFiaWxpdGllcy5wdXNoLmFwcGx5KGFiaWxpdGllcywgcHJvdG9BYmlsaXRpZXMucmVzcG9uc2liaWxpdGllcyk7XFxuXFx0XFx0XFx0fVxcblxcblxcdFxcdFxcdHRoaXMucmVzcG9uc2liaWxpdGllcyA9IGFiaWxpdGllcztcXG5cXHRcXHR9XFxuXFxuXFx0XFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcXG5cXHRcXHRcXHRzd2l0Y2ggKHR5cGVvZiBhcmd1bWVudHNbMF0pIHtcXG5cXHRcXHRcXHRcXHRjYXNlICdzdHJpbmcnOlxcblxcdFxcdFxcdFxcdFxcdG5hbWUgPSBhcmd1bWVudHNbMF07YnJlYWs7XFxuXFxuXFx0XFx0XFx0XFx0Y2FzZSAnZnVuY3Rpb24nOlxcblxcdFxcdFxcdFxcdGNhc2UgJ29iamVjdCc6XFxuXFx0XFx0XFx0XFx0XFx0YWJpbGl0eSA9IGFyZ3VtZW50c1swXTticmVhaztcXG5cXHRcXHRcXHR9XFxuXFx0XFx0fSBlbHNlIHtcXG5cXHRcXHRcXHRuYW1lID0gYXJndW1lbnRzWzBdO1xcblxcdFxcdFxcdGFiaWxpdHkgPSBhcmd1bWVudHNbMV07XFxuXFx0XFx0fVxcblxcblxcdFxcdHN3aXRjaCAodHlwZW9mIGFiaWxpdHkpIHtcXG5cXHRcXHRcXHRjYXNlICdvYmplY3QnOlxcblxcdFxcdFxcdFxcdGZvciAobmFtZSBpbiBhYmlsaXR5KSB7XFxuXFx0XFx0XFx0XFx0XFx0aWYgKCFhYmlsaXR5Lmhhc093blByb3BlcnR5KG5hbWUpKSBjb250aW51ZTtcXG5cXG5cXHRcXHRcXHRcXHRcXHR0aGlzLnJlc3BvbmQobmFtZSwgYWJpbGl0eVtuYW1lXSk7XFxuXFx0XFx0XFx0XFx0fVxcblxcdFxcdFxcdFxcdGJyZWFrO1xcblxcblxcdFxcdFxcdGNhc2UgJ2Z1bmN0aW9uJzpcXG5cXHRcXHRcXHRcXHR0aGlzLnJlc3BvbnNpYmlsaXRpZXMuYWRkKG5ldyBSZXNwb25zaWJpbGl0eVJlY29yZChuYW1lLCBhYmlsaXR5KSk7XFxuXFx0XFx0XFx0XFx0YnJlYWs7XFxuXFx0XFx0fVxcblxcblxcdFxcdHJldHVybiB0aGlzO1xcblxcdH07XFxuXFxuXFx0dGhpcy5kZWxheSA9IGZ1bmN0aW9uIChfdGltZSwgX2NiKSB7XFxuXFx0XFx0dmFyIHNjcmVlbiwgdGltZTtcXG5cXG5cXHRcXHRzY3JlZW4gPSB0aGlzO1xcblxcdFxcdHRpbWUgPSBfdXRpbDJbJ2RlZmF1bHQnXS50b01pbGxpc2VjKF90aW1lKTtcXG5cXG5cXHRcXHR0aGlzLnRpbWVvdXRJRCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xcblxcdFxcdFxcdF9jYi5jYWxsKHNjcmVlbik7XFxuXFx0XFx0fSwgdGltZSk7XFxuXFxuXFx0XFx0cmV0dXJuIHRoaXM7XFxuXFx0fTtcXG5cXG5cXHR0aGlzLnJlcGVhdCA9IGZ1bmN0aW9uIChfdGltZSwgX2NiKSB7XFxuXFx0XFx0dmFyIHNjcmVlbiwgdGltZTtcXG5cXG5cXHRcXHRzY3JlZW4gPSB0aGlzO1xcblxcdFxcdHRpbWUgPSBfdXRpbDJbJ2RlZmF1bHQnXS50b01pbGxpc2VjKF90aW1lKTtcXG5cXG5cXHRcXHR0aGlzLmludGVydmFsSUQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XFxuXFx0XFx0XFx0X2NiLmNhbGwoc2NyZWVuKTtcXG5cXHRcXHR9LCB0aW1lKTtcXG5cXG5cXHRcXHRyZXR1cm4gdGhpcztcXG5cXHR9O1xcblxcblxcdHRoaXMuZWFjaEZyYW1lID0gZnVuY3Rpb24gKF9oYW5kbGVyLCBfb24pIHtcXG5cXHRcXHR2YXIgYmluZGVyLCBmcmFtZSwgbGFzdFRpbWUsIHJhdGUsIGZyYW1lcztcXG5cXG5cXHRcXHRyYXRlID0gdGhpcy5mcmFtZVJhdGUgfHwgMTAwMDtcXG5cXHRcXHRmcmFtZXMgPSAwO1xcblxcdFxcdGxhc3RUaW1lID0gMDtcXG5cXG5cXHRcXHRpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoJ2ZyYW1lSGFuZGxlcnMnKSkge1xcblxcdFxcdFxcdGZyYW1lID0gZnVuY3Rpb24gKF90aW1lKSB7XFxuXFx0XFx0XFx0XFx0dmFyIGksIGhhbmRsZXI7XFxuXFxuXFx0XFx0XFx0XFx0aWYgKHJhdGUpIHtcXG5cXHRcXHRcXHRcXHRcXHRpZiAoX3RpbWUgLSBsYXN0VGltZSA+PSAxMDAwIC8gcmF0ZSkge1xcblxcdFxcdFxcdFxcdFxcdFxcdGZvciAoaSA9IDA7IGhhbmRsZXIgPSB0aGlzLmZyYW1lSGFuZGxlcnNbaV07IGkgKz0gMSkge1xcblxcdFxcdFxcdFxcdFxcdFxcdFxcdGhhbmRsZXIuY2FsbCh0aGlzLCBfdGltZSwgTWF0aC5yb3VuZCgxMDAwIC8gKF90aW1lIC0gbGFzdFRpbWUpKSwgcmF0ZSk7XFxuXFx0XFx0XFx0XFx0XFx0XFx0fVxcblxcblxcdFxcdFxcdFxcdFxcdFxcdGlmIChmcmFtZXMgPT09IHJhdGUpIGZyYW1lcyA9IDA7XFxuXFxuXFx0XFx0XFx0XFx0XFx0XFx0ZnJhbWVzICs9IDE7XFxuXFx0XFx0XFx0XFx0XFx0XFx0bGFzdFRpbWUgPSBfdGltZTtcXG5cXHRcXHRcXHRcXHRcXHR9XFxuXFx0XFx0XFx0XFx0fVxcblxcblxcdFxcdFxcdFxcdGlmICh0aGlzLmZyYW1lSGFuZGxlcnMubGVuZ3RoKSB7XFxuXFx0XFx0XFx0XFx0XFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShiaW5kZXIpO1xcblxcdFxcdFxcdFxcdH1cXG5cXHRcXHRcXHR9O1xcblxcblxcdFxcdFxcdGJpbmRlciA9IHRoaXMuYmluZChmcmFtZSk7XFxuXFxuXFx0XFx0XFx0Ly8gYWxsb3dzIG1ldGhvZHMgcGFzc2VkIGFzIF9oYW5kbGVyJ3MgdG9cXG5cXHRcXHRcXHQvLyBiZSBhYmxlIHRvIHRyYWNlIGJhY2sgZm9yIHByb3RvKCkgY2FsbGJhY2tzLlxcblxcdFxcdFxcdGZyYW1lLm1ldGhvZCA9IHRoaXMuZWFjaEZyYW1lO1xcblxcblxcdFxcdFxcdHRoaXMuZnJhbWVIYW5kbGVycyA9IF90eXBlc0NvbGxlY3Rpb24yWydkZWZhdWx0J10uY3JlYXRlKCk7XFxuXFx0XFx0XFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShiaW5kZXIpO1xcblxcdFxcdH1cXG5cXG5cXHRcXHRpZiAoX29uICE9PSBmYWxzZSkge1xcblxcdFxcdFxcdHRoaXMuZnJhbWVIYW5kbGVycy5hZGQoX2hhbmRsZXIpO1xcblxcdFxcdH0gZWxzZSB7XFxuXFx0XFx0XFx0dGhpcy5mcmFtZUhhbmRsZXJzLnJlbW92ZShfaGFuZGxlcik7XFxuXFx0XFx0fVxcblxcblxcdFxcdHJldHVybiB0aGlzO1xcblxcdH07XFxuXFxuXFx0dGhpcy5raWxsID0gZnVuY3Rpb24gKF90aW1lcikge1xcblxcdFxcdGlmIChfdGltZXIgPT09ICdyZXBlYXQnKSB7XFxuXFx0XFx0XFx0Y2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsSUQpO1xcblxcdFxcdH0gZWxzZSB7XFxuXFx0XFx0XFx0Y2xlYXJUaW1lb3V0KHRoaXMudGltZW91dElEKTtcXG5cXHRcXHR9XFxuXFxuXFx0XFx0cmV0dXJuIHRoaXM7XFxuXFx0fTtcXG5cXG5cXHR0aGlzLnN0YXRlID0gZnVuY3Rpb24gKF9mbGFnLCBfZGVmaW5pdGlvbiwgX2ltcCkge1xcblxcdFxcdHZhciBmbGFnLCB0ZXN0ZXIsIHNldHRlciwgZ2V0dGVyLCBTVEFURSwgZGVmLCBvcHBlcmF0aW9ucywgbmFtZXM7XFxuXFxuXFx0XFx0aWYgKCFfZGVmaW5pdGlvbikge1xcblxcdFxcdFxcdHJldHVybiB0aGlzLnByb3RvKF9mbGFnKTtcXG5cXHRcXHR9XFxuXFxuXFx0XFx0ZGVmID0gX2RlZmluaXRpb24uc3BsaXQoL1xcXFxzKy8pO1xcblxcdFxcdG5hbWVzID0gX2ZsYWcuc3BsaXQoL1xcXFxzKy8pO1xcblxcdFxcdG9wcGVyYXRpb25zID0gW107XFxuXFxuXFx0XFx0ZGVmLmZvckVhY2godGhpcy5iaW5kKGZ1bmN0aW9uIChfb3BwKSB7XFxuXFx0XFx0XFx0dmFyIG1ldGhvZCwgZmxhZztcXG5cXG5cXHRcXHRcXHRtZXRob2QgPSBfb3BwLnNsaWNlKDAsIDEpID09PSAnKycgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJztcXG5cXG5cXHRcXHRcXHRvcHBlcmF0aW9ucy5wdXNoKHtcXG5cXHRcXHRcXHRcXHRtZXRob2Q6IG1ldGhvZCxcXG5cXHRcXHRcXHRcXHRmbGFnOiBfb3BwLnNsaWNlKDEpXFxuXFx0XFx0XFx0fSk7XFxuXFxuXFx0XFx0XFx0aWYgKG1ldGhvZCA9PT0gJ2FkZENsYXNzJykge1xcblxcdFxcdFxcdFxcdGZsYWcgPSBfb3BwLnNsaWNlKDEpO1xcblxcdFxcdFxcdFxcdFNUQVRFID0gX3V0aWwyWydkZWZhdWx0J10udHJhbnNmb3JtSWQoZmxhZyk7XFxuXFx0XFx0XFx0XFx0dGhpcy5TVEFURVtTVEFURV0gPSBmbGFnO1xcblxcdFxcdFxcdH1cXG5cXHRcXHR9KSk7XFxuXFxuXFx0XFx0c2V0dGVyID0gbmFtZXNbMF07XFxuXFx0XFx0dGVzdGVyID0gbmFtZXNbMV07XFxuXFxuXFx0XFx0dGhpc1tzZXR0ZXJdID0gZnVuY3Rpb24gKF90YXJnZXQpIHtcXG5cXHRcXHRcXHR2YXIgdGFyZ2V0LCB1aVN0YXRlRXZlbnQsIG9wcHNQZXJmb3JtZWQ7XFxuXFxuXFx0XFx0XFx0dGFyZ2V0ID0gcmVzb2x2ZVRhcmdldC5jYWxsKHRoaXMsIF90YXJnZXQpO1xcblxcdFxcdFxcdHVpU3RhdGVFdmVudCA9ICQuRXZlbnQoJ3VpLScgKyBzZXR0ZXIsIHtcXG5cXHRcXHRcXHRcXHR0YXJnZXQ6IHRhcmdldC5qcXVlcnkgPyB0YXJnZXRbMF0gOiB0YXJnZXQsXFxuXFx0XFx0XFx0XFx0dGFyZ2V0U2NvcGU6IHRoaXNcXG5cXHRcXHRcXHR9KTtcXG5cXHRcXHRcXHRvcHBzUGVyZm9ybWVkID0gMDtcXG5cXG5cXHRcXHRcXHRpZiAoX2ltcCAmJiBfaW1wLnNob3VsZFNldCAmJiBfaW1wLnNob3VsZFNldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpID09PSBmYWxzZSkge1xcblxcdFxcdFxcdFxcdHJldHVybiAhIShfaW1wICYmIF9pbXAubm90U2V0KSAmJiBfaW1wLm5vdFNldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcblxcdFxcdFxcdH1cXG5cXG5cXHRcXHRcXHRpZiAoX2ltcCAmJiBfaW1wLndpbGxTZXQpIF9pbXAud2lsbFNldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcblxcblxcdFxcdFxcdG9wcGVyYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKF9yZWNvcmQpIHtcXG5cXHRcXHRcXHRcXHQvLyBJZiB3ZSBhcmUgYWRkaW5nIG9yIHJlbW92aW5nIGEgY2xhc3MsIHRlc3QgaWYgdGhlIHRhcmdldCBhbHJlYWR5IGhhcy9yZW1vdmVkIGl0LlxcblxcdFxcdFxcdFxcdC8vIElmIHNvLCB0aGVuIGJ1bXAgXFxcIm9wcHNQZXJmb3JtZWRcXFwiLlxcblxcdFxcdFxcdFxcdG9wcHNQZXJmb3JtZWQgKz0gTnVtYmVyKHRhcmdldC5oYXNDbGFzcyhfcmVjb3JkLmZsYWcpID09PSAhIH5fcmVjb3JkLm1ldGhvZC5pbmRleE9mKCdhZGQnKSk7XFxuXFx0XFx0XFx0XFx0dGFyZ2V0W19yZWNvcmQubWV0aG9kXShfcmVjb3JkLmZsYWcpO1xcblxcdFxcdFxcdH0pO1xcblxcblxcdFxcdFxcdGlmIChfaW1wICYmIF9pbXAuZGlkU2V0KSBfaW1wLmRpZFNldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcblxcblxcdFxcdFxcdGlmIChvcHBzUGVyZm9ybWVkKSB7XFxuXFx0XFx0XFx0XFx0dGhpcy50cmlnZ2VyKHVpU3RhdGVFdmVudCk7XFxuXFx0XFx0XFx0XFx0cmV0dXJuIHRhcmdldDtcXG5cXHRcXHRcXHR9XFxuXFxuXFx0XFx0XFx0cmV0dXJuIGZhbHNlO1xcblxcdFxcdH07XFxuXFxuXFx0XFx0aWYgKHRlc3Rlcikge1xcblxcdFxcdFxcdGdldHRlciA9ICdnZXQnICsgdGVzdGVyLnNsaWNlKDAsIDEpLnRvVXBwZXJDYXNlKCkgKyB0ZXN0ZXIuc2xpY2UoMSk7XFxuXFxuXFx0XFx0XFx0dGhpc1t0ZXN0ZXJdID0gZnVuY3Rpb24gKF90YXJnZXQpIHtcXG5cXHRcXHRcXHRcXHR2YXIgdGFyZ2V0O1xcblxcblxcdFxcdFxcdFxcdHRhcmdldCA9IHJlc29sdmVUYXJnZXQuY2FsbCh0aGlzLCBfdGFyZ2V0KTtcXG5cXG5cXHRcXHRcXHRcXHRyZXR1cm4gdGFyZ2V0Lmhhc0NsYXNzKHRoaXMuU1RBVEVbU1RBVEVdKTtcXG5cXHRcXHRcXHR9O1xcblxcblxcdFxcdFxcdHRoaXNbZ2V0dGVyXSA9IGZ1bmN0aW9uICgpIHtcXG5cXHRcXHRcXHRcXHRyZXR1cm4gdGhpcy5maW5kT3duKCcuJyArIHRoaXMuU1RBVEVbU1RBVEVdKTtcXG5cXHRcXHRcXHR9O1xcblxcdFxcdH1cXG5cXG5cXHRcXHRyZXR1cm4gdGhpcztcXG5cXHR9O1xcblxcblxcdHRoaXMucHJvdmlkZUJlaGF2aW9yRXZlbnRTY29wZSA9IGZ1bmN0aW9uICgpIHtcXG5cXHRcXHRyZXR1cm4gdGhpcztcXG5cXHR9O1xcblxcblxcdHRoaXMucHJvdmlkZUFibGlsaXR5UG90b3R5cGUgPSBmdW5jdGlvbiAoKSB7XFxuXFx0XFx0dmFyIG93bmVyO1xcblxcblxcdFxcdG93bmVyID0gX3V0aWwyWydkZWZhdWx0J10uZ2V0T3duZXIodGhpcywgdGhpcy5iYXNlVHlwZSk7XFxuXFxuXFx0XFx0cmV0dXJuICEhb3duZXIgJiYgb3duZXIub2JqZWN0O1xcblxcdH07XFxuXFxuXFx0dGhpcy5jb21wbGV0ZWQgPSBmdW5jdGlvbiAoKSB7XFxuXFx0XFx0cmV0dXJuIHRoaXMuZ2FtZS5kZW1vTW9kZSB8fCB0aGlzLmhhc093blByb3BlcnR5KCdpc0NvbXBsZXRlJykgJiYgdGhpcy5pc0NvbXBsZXRlIHx8ICF0aGlzLnJlcXVpcmVkUXVldWUgfHwgdGhpcy5yZXF1aXJlZFF1ZXVlLmxlbmd0aCA9PT0gMDtcXG5cXHR9O1xcblxcblxcdC8qKlxcbiAgKiA8c3BhbiBjbGFzcz1cXFwidGFnIGJlaGF2aW9yXFxcIj5CZWhhdmlvcjwvc3Bhbj5cXG4gICogTWFya3MgYSBzY29wZSBcXFwiY29tcGxldGVcXFwiIGJ5IHNldGluZyBgaXNDb21wbGV0ZWAgdG8gYHRydWVgIGFuZCBhZGQgdGhlIGBDT01QTEVURWAgc3RhdGUgZmxhZy5cXG4gICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I2NvbXBsZXRlXFxuICAqIEByZXR1cm5zIHtvYmplY3R9IEEgbWVzc2FnZXMgb2JqZWN0IHdpdGggYGJlaGF2aW9yVGFyZ2V0YCBzZXQgdG8gdGhlIHNjb3BlIHBlcmZvcm1pbmcgdGhlIGJlaGF2aW9yLlxcbiAgKi9cXG5cXHR0aGlzLmJlaGF2aW9yKCdjb21wbGV0ZScsIGZ1bmN0aW9uICgpIHtcXG5cXHRcXHRpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eSgnaXNDb21wbGV0ZScpICYmIHRoaXMuaXNDb21wbGV0ZSkgcmV0dXJuIGZhbHNlO1xcblxcblxcdFxcdHRoaXMuaXNDb21wbGV0ZSA9IHRydWU7XFxuXFx0XFx0dGhpcy5hZGRDbGFzcygnQ09NUExFVEUnKTtcXG5cXG5cXHRcXHRyZXR1cm4ge1xcblxcdFxcdFxcdGJlaGF2aW9yVGFyZ2V0OiB0aGlzXFxuXFx0XFx0fTtcXG5cXHR9KTtcXG5cXG5cXHQvKipcXG4gICogPHNwYW4gY2xhc3M9XFxcInRhZyBiZWhhdmlvclxcXCI+QmVoYXZpb3I8L3NwYW4+XFxuICAqIFJlcG9ydHMgYSBkcmdnYWJsZSBoYXMgYmVlbiBncmFiYmVkIGZvciBkcmFnZ2luZy5cXG4gICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I2dyYWJcXG4gICogQGFyZyB7b2JqZWN0fSBfc3RhdGUgLSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgc3RhdGUgb2YgYSBkcmFnZ2FibGUuXFxuICAqIEByZXR1cm5zIHtvYmplY3R9IEEgbWVzc2FnZXMgb2JqZWN0IHdpdGggYGJlaGF2aW9yVGFyZ2V0YCBzZXQgdG8gdGhlIHNjb3BlIHBlcmZvcm1pbmcgdGhlIGJlaGF2aW9yLlxcbiAgKlxcbiAgKiBAc2VlIG1vZHVsZTpwbGF5fnBsLmdhbWUubWFuYWdlci5kcmFnZ2FibGUgZm9yIG1vcmUgaW5mbyBvbiBkcmFnZ2FibGUgc3RhdGUuXFxuICAqL1xcblxcdHRoaXMuYmVoYXZpb3IoJ2dyYWInLCBmdW5jdGlvbiAoX3N0YXRlKSB7XFxuXFx0XFx0cmV0dXJuIHtcXG5cXHRcXHRcXHRzdGF0ZTogX3N0YXRlLFxcblxcdFxcdFxcdGJlaGF2aW9yVGFyZ2V0OiBfc3RhdGUuJGRyYWdnYWJsZVxcblxcdFxcdH07XFxuXFx0fSk7XFxuXFxuXFx0LyoqXFxuICAqIDxzcGFuIGNsYXNzPVxcXCJ0YWcgYmVoYXZpb3JcXFwiPkJlaGF2aW9yPC9zcGFuPlxcbiAgKiBSZXBvcnRzIGEgZHJhZ2dhYmxlIGFzIGJlaW5nIGRyYWdnZWQuXFxuICAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSNkcmFnZ2luZ1xcbiAgKiBAYXJnIHtvYmplY3R9IF9zdGF0ZSAtIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBzdGF0ZSBvZiBhIGRyYWdnYWJsZS5cXG4gICogQHJldHVybnMge29iamVjdH0gQSBtZXNzYWdlcyBvYmplY3Qgd2l0aCBgYmVoYXZpb3JUYXJnZXRgIHNldCB0byB0aGUgc2NvcGUgcGVyZm9ybWluZyB0aGUgYmVoYXZpb3IuXFxuICAqXFxuICAqIEBzZWUgbW9kdWxlOnBsYXl+cGwuZ2FtZS5tYW5hZ2VyLmRyYWdnYWJsZSBmb3IgbW9yZSBpbmZvIG9uIGRyYWdnYWJsZSBzdGF0ZS5cXG4gICovXFxuXFx0dGhpcy5iZWhhdmlvcignZHJhZ2dpbmcnLCBmdW5jdGlvbiAoX3N0YXRlKSB7XFxuXFx0XFx0cmV0dXJuIHtcXG5cXHRcXHRcXHRzdGF0ZTogX3N0YXRlLFxcblxcdFxcdFxcdGJlaGF2aW9yVGFyZ2V0OiBfc3RhdGUuJGRyYWdnYWJsZVxcblxcdFxcdH07XFxuXFx0fSk7XFxuXFxuXFx0LyoqXFxuICAqIDxzcGFuIGNsYXNzPVxcXCJ0YWcgYmVoYXZpb3JcXFwiPkJlaGF2aW9yPC9zcGFuPlxcbiAgKiBSZXBvcnRzIGEgZHJnZ2FibGUgYXMgcmVsZWFzZWQgb3IgZHJvcGVkLlxcbiAgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjcmVsZWFzZVxcbiAgKiBAYXJnIHtvYmplY3R9IF9zdGF0ZSAtIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBzdGF0ZSBvZiBhIGRyYWdnYWJsZS5cXG4gICogQHJldHVybnMge29iamVjdH0gQSBtZXNzYWdlcyBvYmplY3Qgd2l0aCBgYmVoYXZpb3JUYXJnZXRgIHNldCB0byB0aGUgc2NvcGUgcGVyZm9ybWluZyB0aGUgYmVoYXZpb3IuXFxuICAqXFxuICAqIEBzZWUgbW9kdWxlOnBsYXl+cGwuZ2FtZS5tYW5hZ2VyLmRyYWdnYWJsZSBmb3IgbW9yZSBpbmZvIG9uIGRyYWdnYWJsZSBzdGF0ZS5cXG4gICovXFxuXFx0dGhpcy5iZWhhdmlvcigncmVsZWFzZScsIGZ1bmN0aW9uIChfc3RhdGUpIHtcXG5cXHRcXHRyZXR1cm4ge1xcblxcdFxcdFxcdHN0YXRlOiBfc3RhdGUsXFxuXFx0XFx0XFx0YmVoYXZpb3JUYXJnZXQ6IF9zdGF0ZS4kZHJhZ2dhYmxlXFxuXFx0XFx0fTtcXG5cXHR9KTtcXG5cXG5cXHQvKipcXG4gICogPHNwYW4gY2xhc3M9XFxcInRhZyBzdGF0ZVxcXCI+U3RhdGU8L3NwYW4+XFxuICAqIEFkZHMgYE9QRU5gIGFuZCByZW1vdmVzIHRoZSBgTEVBVkVgIENTUyBjbGFzcyBuYW1lcyBmcm9tIHRoZSBzY29wZSBvciB0aGUgZ2l2ZW4gYF90YXJnZXRgLlxcbiAgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjb3BlblxcbiAgKiBAZmlyZXMgRW50aXR5I3VpLW9wZW5cXG4gICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cXG4gICogQHJldHVybnMgYHRoaXNgXFxuICAqL1xcblxcblxcdC8qKlxcbiAgKiA8c3BhbiBjbGFzcz1cXFwidGFnIHN0YXRlXFxcIj5TdGF0ZTwvc3Bhbj5cXG4gICogVGVzdHMgaWYgdGhlIHNjb3BlIG9yIGdpdmVuIGBfdGFyZ2V0YCBoYXMgdGhlIGBPUEVOYCBjbGFzcyBuYW1lLlxcbiAgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjb3BlbmVkXFxuICAqIEBhcmcge3N0cmluZ3xTY29wZXxqUXVlcnl8SFRNTEVsZW1lbnR9IF90YXJnZXQgLSBBIENTUyBzZWxlY3RvciwgRE9NIG5vZGUgcmVmZXJlbmNlIG9yIGNvbnRleHQgb2JqZWN0IChpLmUuIFNjb3BlL2pRdWVyeSkuXFxuICAqIEByZXR1cm5zIHtCb29sZWFufSBPcGVuJ25lc3MuXFxuICAqL1xcblxcblxcdC8qKlxcbiAgKiA8c3BhbiBjbGFzcz1cXFwidGFnIHN0YXRlXFxcIj5TdGF0ZTwvc3Bhbj5cXG4gICogUHJvdmlkZXMgdGhlIGVsZW1lbnRzIHdpdGggdGhlIGBPUEVOYCBjbGFzcyBuYW1lLlxcbiAgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjZ2V0T3BlbmVkXFxuICAqIEByZXR1cm5zIHtqUXVlcnl9IGpRdWVyeSBjb2xsZWN0aW9uIG9mIG1hdGNoZWQgbm9kZXMuXFxuICAqIEB0b2RvIFJldHVybiBzY29wZSBpZiBhdmFpbGFibGUuXFxuICAqL1xcblxcdHRoaXMuc3RhdGUoJ29wZW4gb3BlbmVkJywgJytPUEVOIC1MRUFWRScpO1xcblxcblxcdC8qKlxcbiAgKiA8c3BhbiBjbGFzcz1cXFwidGFnIHN0YXRlXFxcIj5TdGF0ZTwvc3Bhbj5cXG4gICogUmVtb3ZlcyB0aGUgYE9QRU5gIENTUyBjbGFzcyBuYW1lIGZyb20gdGhlIHNjb3BlIG9yIHRoZSBnaXZlbiBgX3RhcmdldGAuXFxuICAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSNjbG9zZVxcbiAgKiBAZmlyZXMgRW50aXR5I3VpLWNsb3NlXFxuICAqIEBhcmcge3N0cmluZ3xTY29wZXxqUXVlcnl8SFRNTEVsZW1lbnR9IF90YXJnZXQgLSBBIENTUyBzZWxlY3RvciwgRE9NIG5vZGUgcmVmZXJlbmNlIG9yIGNvbnRleHQgb2JqZWN0IChpLmUuIFNjb3BlL2pRdWVyeSkuXFxuICAqIEByZXR1cm5zIGB0aGlzYFxcbiAgKi9cXG5cXHR0aGlzLnN0YXRlKCdjbG9zZScsICctT1BFTicpO1xcblxcblxcdC8qKlxcbiAgKiA8c3BhbiBjbGFzcz1cXFwidGFnIHN0YXRlXFxcIj5TdGF0ZTwvc3Bhbj5cXG4gICogQWRkcyB0aGUgYExFQVZFYCBDU1MgY2xhc3MgbmFtZSB0byB0aGUgc2NvcGUgb3IgdGhlIGdpdmVuIGBfdGFyZ2V0YC5cXG4gICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I2xlYXZlXFxuICAqIEBmaXJlcyBFbnRpdHkjdWktbGVhdmVcXG4gICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cXG4gICogQHJldHVybnMgYHRoaXNgXFxuICAqL1xcblxcblxcdC8qKlxcbiAgKiA8c3BhbiBjbGFzcz1cXFwidGFnIHN0YXRlXFxcIj5TdGF0ZTwvc3Bhbj5cXG4gICogVGVzdHMgaWYgdGhlIHNjb3BlIG9yIGdpdmVuIGBfdGFyZ2V0YCBoYXMgdGhlIGBMRUFWRWAgY2xhc3MgbmFtZS5cXG4gICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I2xlZnRcXG4gICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cXG4gICogQHJldHVybnMge0Jvb2xlYW59IExlYXZlJ25lc3MuXFxuICAqL1xcblxcblxcdC8qKlxcbiAgKiA8c3BhbiBjbGFzcz1cXFwidGFnIHN0YXRlXFxcIj5TdGF0ZTwvc3Bhbj5cXG4gICogUHJvdmlkZXMgdGhlIGVsZW1lbnRzIHdpdGggdGhlIGBMRUFWRWAgY2xhc3MgbmFtZS5cXG4gICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I2dldExlZnRcXG4gICogQHJldHVybnMge2pRdWVyeX0galF1ZXJ5IGNvbGxlY3Rpb24gb2YgbWF0Y2hlZCBub2Rlcy5cXG4gICogQHRvZG8gUmV0dXJuIHNjb3BlIGlmIGF2YWlsYWJsZS5cXG4gICovXFxuXFx0dGhpcy5zdGF0ZSgnbGVhdmUgbGVmdCcsICcrTEVBVkUnLCB7XFxuXFx0XFx0d2lsbFNldDogZnVuY3Rpb24gd2lsbFNldChfdGFyZ2V0KSB7XFxuXFx0XFx0XFx0dGhpcy5jbG9zZShfdGFyZ2V0KTtcXG5cXHRcXHR9XFxuXFx0fSk7XFxuXFxuXFx0LyoqXFxuICAqIDxzcGFuIGNsYXNzPVxcXCJ0YWcgc3RhdGVcXFwiPlN0YXRlPC9zcGFuPlxcbiAgKiBBZGRzIGBFTkFCTEVEYCBhbmQgcmVtb3ZlcyB0aGUgYERJU0FCTEVEYCBDU1MgY2xhc3MgbmFtZXMgZnJvbSB0aGUgc2NvcGUgb3IgdGhlIGdpdmVuIGBfdGFyZ2V0YC5cXG4gICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I2VuYWJsZVxcbiAgKiBAZmlyZXMgRW50aXR5I3VpLWVuYWJsZVxcbiAgKiBAYXJnIHtzdHJpbmd8U2NvcGV8alF1ZXJ5fEhUTUxFbGVtZW50fSBfdGFyZ2V0IC0gQSBDU1Mgc2VsZWN0b3IsIERPTSBub2RlIHJlZmVyZW5jZSBvciBjb250ZXh0IG9iamVjdCAoaS5lLiBTY29wZS9qUXVlcnkpLlxcbiAgKiBAcmV0dXJucyBgdGhpc2BcXG4gICovXFxuXFxuXFx0LyoqXFxuICAqIDxzcGFuIGNsYXNzPVxcXCJ0YWcgc3RhdGVcXFwiPlN0YXRlPC9zcGFuPlxcbiAgKiBUZXN0cyBpZiB0aGUgc2NvcGUgb3IgZ2l2ZW4gYF90YXJnZXRgIGhhcyB0aGUgYEVOQUJMRURgIGNsYXNzIG5hbWUuXFxuICAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSNlbmFibGVkXFxuICAqIEBhcmcge3N0cmluZ3xTY29wZXxqUXVlcnl8SFRNTEVsZW1lbnR9IF90YXJnZXQgLSBBIENTUyBzZWxlY3RvciwgRE9NIG5vZGUgcmVmZXJlbmNlIG9yIGNvbnRleHQgb2JqZWN0IChpLmUuIFNjb3BlL2pRdWVyeSkuXFxuICAqIEByZXR1cm5zIHtCb29sZWFufSBFbmFibGVkJ25lc3MuXFxuICAqL1xcblxcblxcdC8qKlxcbiAgKiA8c3BhbiBjbGFzcz1cXFwidGFnIHN0YXRlXFxcIj5TdGF0ZTwvc3Bhbj5cXG4gICogUHJvdmlkZXMgdGhlIGVsZW1lbnRzIHdpdGggdGhlIGBFTkFCTEVEYCBjbGFzcyBuYW1lLlxcbiAgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjZ2V0RW5hYmxlZFxcbiAgKiBAcmV0dXJucyB7alF1ZXJ5fSBqUXVlcnkgY29sbGVjdGlvbiBvZiBtYXRjaGVkIG5vZGVzLlxcbiAgKiBAdG9kbyBSZXR1cm4gc2NvcGUgaWYgYXZhaWxhYmxlLlxcbiAgKi9cXG5cXHR0aGlzLnN0YXRlKCdlbmFibGUgZW5hYmxlZCcsICcrRU5BQkxFRCAtRElTQUJMRUQnKTtcXG5cXG5cXHQvKipcXG4gICogPHNwYW4gY2xhc3M9XFxcInRhZyBzdGF0ZVxcXCI+U3RhdGU8L3NwYW4+XFxuICAqIEFkZHMgYERJU0FCTEVEYCBhbmQgcmVtb3ZlcyB0aGUgYEVOQUJMRURgIENTUyBjbGFzcyBuYW1lcyBmcm9tIHRoZSBzY29wZSBvciB0aGUgZ2l2ZW4gYF90YXJnZXRgLlxcbiAgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjZGlzYWJsZVxcbiAgKiBAZmlyZXMgRW50aXR5I3VpLWRpc2FibGVcXG4gICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cXG4gICogQHJldHVybnMgYHRoaXNgXFxuICAqL1xcblxcblxcdC8qKlxcbiAgKiA8c3BhbiBjbGFzcz1cXFwidGFnIHN0YXRlXFxcIj5TdGF0ZTwvc3Bhbj5cXG4gICogVGVzdHMgaWYgdGhlIHNjb3BlIG9yIGdpdmVuIGBfdGFyZ2V0YCBoYXMgdGhlIGBESVNBQkxFRGAgY2xhc3MgbmFtZS5cXG4gICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I2Rpc2FibGVkXFxuICAqIEBhcmcge3N0cmluZ3xTY29wZXxqUXVlcnl8SFRNTEVsZW1lbnR9IF90YXJnZXQgLSBBIENTUyBzZWxlY3RvciwgRE9NIG5vZGUgcmVmZXJlbmNlIG9yIGNvbnRleHQgb2JqZWN0IChpLmUuIFNjb3BlL2pRdWVyeSkuXFxuICAqIEByZXR1cm5zIHtCb29sZWFufSBEaXNhYmxlZCduZXNzLlxcbiAgKi9cXG5cXG5cXHQvKipcXG4gICogPHNwYW4gY2xhc3M9XFxcInRhZyBzdGF0ZVxcXCI+U3RhdGU8L3NwYW4+XFxuICAqIFByb3ZpZGVzIHRoZSBlbGVtZW50cyB3aXRoIHRoZSBgRElTQUJMRURgIGNsYXNzIG5hbWUuXFxuICAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSNnZXREaXNhYmxlZFxcbiAgKiBAcmV0dXJucyB7alF1ZXJ5fSBqUXVlcnkgY29sbGVjdGlvbiBvZiBtYXRjaGVkIG5vZGVzLlxcbiAgKiBAdG9kbyBSZXR1cm4gc2NvcGUgaWYgYXZhaWxhYmxlLlxcbiAgKi9cXG5cXHR0aGlzLnN0YXRlKCdkaXNhYmxlIGRpc2FibGVkJywgJytESVNBQkxFRCAtRU5BQkxFRCcpO1xcblxcblxcdC8qKlxcbiAgKiA8c3BhbiBjbGFzcz1cXFwidGFnIHN0YXRlXFxcIj5TdGF0ZTwvc3Bhbj5cXG4gICogQWRkcyB0aGUgYFNFTEVDVEVEYCBDU1MgY2xhc3MgbmFtZSB0byB0aGUgc2NvcGUgb3IgdGhlIGdpdmVuIGBfdGFyZ2V0YC5cXG4gICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I3NlbGVjdFxcbiAgKiBAZmlyZXMgRW50aXR5I3VpLXNlbGVjdFxcbiAgKiBAYXJnIHtzdHJpbmd8U2NvcGV8alF1ZXJ5fEhUTUxFbGVtZW50fSBfdGFyZ2V0IC0gQSBDU1Mgc2VsZWN0b3IsIERPTSBub2RlIHJlZmVyZW5jZSBvciBjb250ZXh0IG9iamVjdCAoaS5lLiBTY29wZS9qUXVlcnkpLlxcbiAgKiBAcmV0dXJucyBgdGhpc2BcXG4gICovXFxuXFxuXFx0LyoqXFxuICAqIDxzcGFuIGNsYXNzPVxcXCJ0YWcgc3RhdGVcXFwiPlN0YXRlPC9zcGFuPlxcbiAgKiBUZXN0cyBpZiB0aGUgc2NvcGUgb3IgZ2l2ZW4gYF90YXJnZXRgIGhhcyB0aGUgYFNFTEVDVEVEYCBjbGFzcyBuYW1lLlxcbiAgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjc2VsZWN0ZWRcXG4gICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cXG4gICogQHJldHVybnMge0Jvb2xlYW59IFNlbGVjdGVkJ25lc3MuXFxuICAqL1xcblxcblxcdC8qKlxcbiAgKiA8c3BhbiBjbGFzcz1cXFwidGFnIHN0YXRlXFxcIj5TdGF0ZTwvc3Bhbj5cXG4gICogUHJvdmlkZXMgdGhlIGVsZW1lbnRzIHdpdGggdGhlIGBTRUxFQ1RFRGAgY2xhc3MgbmFtZS5cXG4gICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I2dldERpc2FibGVkXFxuICAqIEByZXR1cm5zIHtqUXVlcnl9IGpRdWVyeSBjb2xsZWN0aW9uIG9mIG1hdGNoZWQgbm9kZXMuXFxuICAqIEB0b2RvIFJldHVybiBzY29wZSBpZiBhdmFpbGFibGUuXFxuICAqL1xcblxcdHRoaXMuc3RhdGUoJ3NlbGVjdCBzZWxlY3RlZCcsICcrU0VMRUNURUQnLCB7XFxuXFx0XFx0d2lsbFNldDogZnVuY3Rpb24gd2lsbFNldChfdGFyZ2V0KSB7XFxuXFx0XFx0XFx0dmFyIHRhcmdldCwgJHBhcmVudDtcXG5cXG5cXHRcXHRcXHR0YXJnZXQgPSByZXNvbHZlVGFyZ2V0LmNhbGwodGhpcywgX3RhcmdldCk7XFxuXFx0XFx0XFx0JHBhcmVudCA9IHRhcmdldC5wYXJlbnQoKTtcXG5cXG5cXHRcXHRcXHQkcGFyZW50LmZpbmQoJz4gLlNFTEVDVEVEJykuZWFjaCh0aGlzLmJpbmQoZnVuY3Rpb24gKF9pbmRleCwgX25vZGUpIHtcXG5cXHRcXHRcXHRcXHR0aGlzLmRlc2VsZWN0KF9ub2RlKTtcXG5cXHRcXHRcXHR9KSk7XFxuXFx0XFx0XFx0JHBhcmVudC5maW5kKCc+IC5ISUdITElHSFRFRCcpLmVhY2godGhpcy5iaW5kKGZ1bmN0aW9uIChfaW5kZXgsIF9ub2RlKSB7XFxuXFx0XFx0XFx0XFx0dGhpcy51bmhpZ2hsaWdodChfbm9kZSk7XFxuXFx0XFx0XFx0fSkpO1xcblxcdFxcdH1cXG5cXHR9KTtcXG5cXG5cXHQvKipcXG4gICogPHNwYW4gY2xhc3M9XFxcInRhZyBzdGF0ZVxcXCI+U3RhdGU8L3NwYW4+XFxuICAqIFJlbW92ZXMgdGhlIGBTRUxFQ1RFRGAgQ1NTIGNsYXNzIG5hbWUgZnJvbSB0aGUgc2NvcGUgb3IgdGhlIGdpdmVuIGBfdGFyZ2V0YC5cXG4gICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I2Rlc2VsZWN0XFxuICAqIEBmaXJlcyBFbnRpdHkjdWktZGVzZWxlY3RcXG4gICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cXG4gICogQHJldHVybnMgYHRoaXNgXFxuICAqL1xcblxcdHRoaXMuc3RhdGUoJ2Rlc2VsZWN0JywgJy1TRUxFQ1RFRCcpO1xcblxcblxcdC8qKlxcbiAgKiA8c3BhbiBjbGFzcz1cXFwidGFnIHN0YXRlXFxcIj5TdGF0ZTwvc3Bhbj5cXG4gICogQWRkcyB0aGUgYEhJR0hMSUdIVEVEYCBDU1MgY2xhc3MgbmFtZSB0byB0aGUgc2NvcGUgb3IgdGhlIGdpdmVuIGBfdGFyZ2V0YC5cXG4gICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I2hpZ2hsaWdodFxcbiAgKiBAZmlyZXMgRW50aXR5I3VpLWhpZ2hsaWdodFxcbiAgKiBAYXJnIHtzdHJpbmd8U2NvcGV8alF1ZXJ5fEhUTUxFbGVtZW50fSBfdGFyZ2V0IC0gQSBDU1Mgc2VsZWN0b3IsIERPTSBub2RlIHJlZmVyZW5jZSBvciBjb250ZXh0IG9iamVjdCAoaS5lLiBTY29wZS9qUXVlcnkpLlxcbiAgKiBAcmV0dXJucyBgdGhpc2BcXG4gICovXFxuXFxuXFx0LyoqXFxuICAqIDxzcGFuIGNsYXNzPVxcXCJ0YWcgc3RhdGVcXFwiPlN0YXRlPC9zcGFuPlxcbiAgKiBUZXN0cyBpZiB0aGUgc2NvcGUgb3IgZ2l2ZW4gYF90YXJnZXRgIGhhcyB0aGUgYEhJR0hMSUdIVEVEYCBjbGFzcyBuYW1lLlxcbiAgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjaGlnaGxpZ2h0ZWRcXG4gICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cXG4gICogQHJldHVybnMge0Jvb2xlYW59IEhpZ2hsaWdodGVkJ25lc3MuXFxuICAqL1xcblxcblxcdC8qKlxcbiAgKiA8c3BhbiBjbGFzcz1cXFwidGFnIHN0YXRlXFxcIj5TdGF0ZTwvc3Bhbj5cXG4gICogUHJvdmlkZXMgdGhlIGVsZW1lbnRzIHdpdGggdGhlIGBISUdITElHSFRFRGAgY2xhc3MgbmFtZS5cXG4gICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I2dldEhpZ2hsaWdodGVkXFxuICAqIEByZXR1cm5zIHtqUXVlcnl9IGpRdWVyeSBjb2xsZWN0aW9uIG9mIG1hdGNoZWQgbm9kZXMuXFxuICAqIEB0b2RvIFJldHVybiBzY29wZSBpZiBhdmFpbGFibGUuXFxuICAqL1xcblxcdHRoaXMuc3RhdGUoJ2hpZ2hsaWdodCBoaWdobGlnaHRlZCcsICcrSElHSExJR0hURUQnKTtcXG5cXG5cXHQvKipcXG4gICogPHNwYW4gY2xhc3M9XFxcInRhZyBzdGF0ZVxcXCI+U3RhdGU8L3NwYW4+XFxuICAqIFJlbW92ZXMgdGhlIGBISUdITElHSFRFRGAgQ1NTIGNsYXNzIG5hbWUgZnJvbSB0aGUgc2NvcGUgb3IgdGhlIGdpdmVuIGBfdGFyZ2V0YC5cXG4gICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I3VuaGlnaGxpZ2h0XFxuICAqIEBmaXJlcyBFbnRpdHkjdWktdW5oaWdobGlnaHRcXG4gICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cXG4gICogQHJldHVybnMgYHRoaXNgXFxuICAqL1xcblxcdHRoaXMuc3RhdGUoJ3VuaGlnaGxpZ2h0JywgJy1ISUdITElHSFRFRCcpO1xcblxcblxcdC8qKlxcbiAgKiA8c3BhbiBjbGFzcz1cXFwidGFnIHN0YXRlXFxcIj5TdGF0ZTwvc3Bhbj5cXG4gICogQWRkcyB0aGUgYERSQUdHQUJMRWAgQ1NTIGNsYXNzIG5hbWUgdG8gdGhlIHNjb3BlIG9yIHRoZSBnaXZlbiBgX3RhcmdldGAuXFxuICAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSNkcmFnZ2FibGVcXG4gICogQGZpcmVzIEVudGl0eSN1aS1kcmFnZ2FibGVcXG4gICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cXG4gICogQHJldHVybnMgYHRoaXNgXFxuICAqL1xcblxcblxcdC8qKlxcbiAgKiA8c3BhbiBjbGFzcz1cXFwidGFnIHN0YXRlXFxcIj5TdGF0ZTwvc3Bhbj5cXG4gICogVGVzdHMgaWYgdGhlIHNjb3BlIG9yIGdpdmVuIGBfdGFyZ2V0YCBoYXMgdGhlIGBEUkFHR0FCTEVgIGNsYXNzIG5hbWUuXFxuICAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSNkcmFnRW5hYmxlZFxcbiAgKiBAYXJnIHtzdHJpbmd8U2NvcGV8alF1ZXJ5fEhUTUxFbGVtZW50fSBfdGFyZ2V0IC0gQSBDU1Mgc2VsZWN0b3IsIERPTSBub2RlIHJlZmVyZW5jZSBvciBjb250ZXh0IG9iamVjdCAoaS5lLiBTY29wZS9qUXVlcnkpLlxcbiAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gRHJhZ2dhYmxlJ25lc3MuXFxuICAqL1xcblxcblxcdC8qKlxcbiAgKiA8c3BhbiBjbGFzcz1cXFwidGFnIHN0YXRlXFxcIj5TdGF0ZTwvc3Bhbj5cXG4gICogUHJvdmlkZXMgdGhlIGVsZW1lbnRzIHdpdGggdGhlIGBEUkFHR0FCTEVgIGNsYXNzIG5hbWUuXFxuICAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSNnZXREcmFnRW5hYmxlZFxcbiAgKiBAcmV0dXJucyB7alF1ZXJ5fSBqUXVlcnkgY29sbGVjdGlvbiBvZiBtYXRjaGVkIG5vZGVzLlxcbiAgKiBAdG9kbyBSZXR1cm4gc2NvcGUgaWYgYXZhaWxhYmxlLlxcbiAgKi9cXG5cXHR0aGlzLnN0YXRlKCdkcmFnZ2FibGUgZHJhZ0VuYWJsZWQnLCAnK0RSQUdHQUJMRScsIHtcXG5cXHRcXHRkaWRTZXQ6IGZ1bmN0aW9uIGRpZFNldChfdGFyZ2V0KSB7XFxuXFx0XFx0XFx0dGhpcy50cmFuc2xhdGUocmVzb2x2ZVRhcmdldC5jYWxsKHRoaXMsIF90YXJnZXQpKTtcXG5cXHRcXHR9XFxuXFx0fSk7XFxuXFxuXFx0LyoqXFxuICAqIDxzcGFuIGNsYXNzPVxcXCJ0YWcgc3RhdGVcXFwiPlN0YXRlPC9zcGFuPlxcbiAgKiBSZW1vdmVzIHRoZSBgRFJBR0dBQkxFYCBDU1MgY2xhc3MgbmFtZSBmcm9tIHRoZSBzY29wZSBvciB0aGUgZ2l2ZW4gYF90YXJnZXRgLlxcbiAgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjdW5kcmFnZ2FibGVcXG4gICogQGZpcmVzIEVudGl0eSN1aS11bmRyYWdnYWJsZVxcbiAgKiBAYXJnIHtzdHJpbmd8U2NvcGV8alF1ZXJ5fEhUTUxFbGVtZW50fSBfdGFyZ2V0IC0gQSBDU1Mgc2VsZWN0b3IsIERPTSBub2RlIHJlZmVyZW5jZSBvciBjb250ZXh0IG9iamVjdCAoaS5lLiBTY29wZS9qUXVlcnkpLlxcbiAgKiBAcmV0dXJucyBgdGhpc2BcXG4gICovXFxuXFx0dGhpcy5zdGF0ZSgndW5kcmFnZ2FibGUnLCAnLURSQUdHQUJMRScpO1xcblxcblxcdC8qKlxcbiAgKiA8c3BhbiBjbGFzcz1cXFwidGFnIHN0YXRlXFxcIj5TdGF0ZTwvc3Bhbj5cXG4gICogQWRkcyB0aGUgYFRSQU5TTEFURURgIENTUyBjbGFzcyBuYW1lIHRvIHRoZSBzY29wZSBvciB0aGUgZ2l2ZW4gYF90YXJnZXRgLiBUaGUgdGFyZ2V0IGFsc28gZ2V0cyBhIDJkIHRyYW5zZm9ybSBhdCB0aGUgZ2l2ZW4gYF9wb2ludGAuXFxuICAqIEBmdW5jdGlvbiBtb2R1bGU6dHlwZXMvRW50aXR5fkVudGl0eSN0cmFuc2xhdGVcXG4gICogQGZpcmVzIEVudGl0eSN1aS10cmFuc2xhdGVcXG4gICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cXG4gICogQGFyZyB7bW9kdWxlOnR5cGVzL0RpbWVuc2lvbnN+UG9pbnR9IF9wb2ludCAtIFBvaW50IG9iamVjdCB3aXRoIGNvb3JkaW5hdGVzIHt4LHl9LlxcbiAgKiBAcmV0dXJucyBgdGhpc2BcXG4gICovXFxuXFxuXFx0LyoqXFxuICAqIDxzcGFuIGNsYXNzPVxcXCJ0YWcgc3RhdGVcXFwiPlN0YXRlPC9zcGFuPlxcbiAgKiBBZGRzIHRoZSBgVFJBTlNMQVRFRGAgQ1NTIGNsYXNzIG5hbWUgdG8gdGhlIHNjb3BlLiBUaGUgc2NvcGUgYWxzbyBnZXRzIGEgMmQgdHJhbnNmb3JtIGF0IHRoZSBnaXZlbiBgX3BvaW50YC5cXG4gICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I3RyYW5zbGF0ZVxcbiAgKiBAZmlyZXMgRW50aXR5I3VpLXRyYW5zbGF0ZVxcbiAgKiBAYXJnIHttb2R1bGU6dHlwZXMvRGltZW5zaW9uc35Qb2ludH0gX3BvaW50IC0gUG9pbnQgb2JqZWN0IHdpdGggY29vcmRpbmF0ZXMge3gseX0uXFxuICAqIEByZXR1cm5zIGB0aGlzYFxcbiAgKi9cXG5cXG5cXHQvKipcXG4gICogPHNwYW4gY2xhc3M9XFxcInRhZyBzdGF0ZVxcXCI+U3RhdGU8L3NwYW4+XFxuICAqIFRlc3RzIGlmIHRoZSBzY29wZSBvciBnaXZlbiBgX3RhcmdldGAgaGFzIHRoZSBgVFJBTlNMQVRFRGAgY2xhc3MgbmFtZS5cXG4gICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I3RyYW5zbGF0ZWRcXG4gICogQGFyZyB7c3RyaW5nfFNjb3BlfGpRdWVyeXxIVE1MRWxlbWVudH0gX3RhcmdldCAtIEEgQ1NTIHNlbGVjdG9yLCBET00gbm9kZSByZWZlcmVuY2Ugb3IgY29udGV4dCBvYmplY3QgKGkuZS4gU2NvcGUvalF1ZXJ5KS5cXG4gICogQHJldHVybnMge0Jvb2xlYW59IFRyYW5zbGF0ZSduZXNzLlxcbiAgKi9cXG5cXG5cXHQvKipcXG4gICogPHNwYW4gY2xhc3M9XFxcInRhZyBzdGF0ZVxcXCI+U3RhdGU8L3NwYW4+XFxuICAqIFByb3ZpZGVzIHRoZSBlbGVtZW50cyB3aXRoIHRoZSBgVFJBTlNMQVRFRGAgY2xhc3MgbmFtZS5cXG4gICogQGZ1bmN0aW9uIG1vZHVsZTp0eXBlcy9FbnRpdHl+RW50aXR5I2dldFRyYW5zbGF0ZWRcXG4gICogQHJldHVybnMge2pRdWVyeX0galF1ZXJ5IGNvbGxlY3Rpb24gb2YgbWF0Y2hlZCBub2Rlcy5cXG4gICogQHRvZG8gUmV0dXJuIHNjb3BlIGlmIGF2YWlsYWJsZS5cXG4gICovXFxuXFx0dGhpcy5zdGF0ZSgndHJhbnNsYXRlIHRyYW5zbGF0ZWQnLCAnK1RSQU5TTEFURUQnLCB7XFxuXFx0XFx0d2lsbFNldDogZnVuY3Rpb24gd2lsbFNldChfdGFyZ2V0X3BvaW50LCBfcG9pbnQpIHtcXG5cXHRcXHRcXHR2YXIgcG9pbnQsIHRhcmdldDtcXG5cXG5cXHRcXHRcXHR0YXJnZXQgPSByZXNvbHZlVGFyZ2V0LmNhbGwodGhpcywgX3RhcmdldF9wb2ludCk7XFxuXFx0XFx0XFx0cG9pbnQgPSAhIH5bX3RhcmdldF9wb2ludC54LCBfdGFyZ2V0X3BvaW50LnldLmluZGV4T2YodW5kZWZpbmVkKSA/IF90YXJnZXRfcG9pbnQgOiBfcG9pbnQ7XFxuXFxuXFx0XFx0XFx0aWYgKHBvaW50KSB7XFxuXFx0XFx0XFx0XFx0dGFyZ2V0LmNzcygndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZVgoJyArIHBvaW50LnggKyAncHgpIHRyYW5zbGF0ZVkoJyArIHBvaW50LnkgKyAncHgpJyk7XFxuXFx0XFx0XFx0fVxcblxcdFxcdH1cXG5cXHR9KTtcXG5cXG5cXHQvKipcXG4gICogPHNwYW4gY2xhc3M9XFxcInRhZyBzdGF0ZVxcXCI+U3RhdGU8L3NwYW4+XFxuICAqIFJlbW92ZXMgdGhlIGBUUkFOU0xBVEVEYCBDU1MgY2xhc3MgbmFtZSBhbmQgQ1NTIHRyYW5zZm9ybSBmcm9tIHRoZSBzY29wZSBvciB0aGUgZ2l2ZW4gYF90YXJnZXRgLlxcbiAgKiBAZnVuY3Rpb24gbW9kdWxlOnR5cGVzL0VudGl0eX5FbnRpdHkjdW50cmFuc2xhdGVcXG4gICogQGZpcmVzIEVudGl0eSN1aS11bnRyYW5zbGF0ZVxcbiAgKiBAYXJnIHtzdHJpbmd8U2NvcGV8alF1ZXJ5fEhUTUxFbGVtZW50fSBfdGFyZ2V0IC0gQSBDU1Mgc2VsZWN0b3IsIERPTSBub2RlIHJlZmVyZW5jZSBvciBjb250ZXh0IG9iamVjdCAoaS5lLiBTY29wZS9qUXVlcnkpLlxcbiAgKiBAcmV0dXJucyBgdGhpc2BcXG4gICovXFxuXFx0dGhpcy5zdGF0ZSgndW50cmFuc2xhdGUnLCAnLVRSQU5TTEFURUQnLCB7XFxuXFx0XFx0d2lsbFNldDogZnVuY3Rpb24gd2lsbFNldCgpIHtcXG5cXHRcXHRcXHR0aGlzLmNzcygndHJhbnNmb3JtJywgJ25vbmUnKTtcXG5cXHRcXHR9XFxuXFx0fSk7XFxuXFxuXFx0dGhpcy5zdGF0ZSgnZ2F0ZSBnYXRlZCcsICcrR0FURUQnKTtcXG59KTtcXG5cXG5leHBvcnRzWydkZWZhdWx0J10gPSB7IEVudGl0eTogRW50aXR5LCBpbnZva2VSZXNwb25zaWJpbGl0aWVzOiBpbnZva2VSZXNwb25zaWJpbGl0aWVzIH07XFxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Ly9AIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTl6YjNWeVkyVXZkSGx3WlhNdlJXNTBhWFI1TG1welB6a3hObVlpWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPMmREUVV0cFFpeEZRVUZOT3pzN096UkRRVU5ETEVWQlFXMUNPenM3T3pKRFFVTndRaXhGUVVGclFqczdPenN5UTBGRFlpeERRVUZyUWpzN2MwTkJRelZDTEVWQlFXRTdPenM3UVVGRkwwSXNVMEZCVXl4elFrRkJjMElzUTBGQlJTeE5RVUZOTEVWQlFVVXNUVUZCVFN4RlFVRkZPMEZCUTJoRUxFdEJRVWtzVFVGQlRTeEpRVUZKTEUxQlFVMHNRMEZCUXl4blFrRkJaMElzU1VGQlNTeE5RVUZOTEVOQlFVTXNXVUZCV1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEVWQlFVVTdRVUZEYWtZc1VVRkJUU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGVkxFOUJRVThzUlVGQlJUdEJRVU5zUkN4UFFVRkpMRTlCUVU4c1EwRkJReXhKUVVGSkxFdEJRVXNzVFVGQlRTeERRVUZETEVsQlFVa3NSVUZCUlRzN08wRkJSMnBETEZkQlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUXp0SlFVTnlRenRIUVVORUxFTkJRVU1zUTBGQlF6dEZRVU5JTzBOQlEwUTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQmVVTkVMRWxCUVVrc1RVRkJUU3hIUVVGSExEaENRVUZaTEUxQlFVMHNRMEZCUXl4WlFVRlpPenRCUVVVelF5eFZRVUZUTEdGQlFXRXNRMEZCUlN4UFFVRlBMRVZCUVVVN08wRkJSV2hETEZWQlFWRXNUMEZCVHl4UFFVRlBPMEZCUTNKQ0xGRkJRVXNzVVVGQlVUdEJRVUZGTEZkQlFVOHNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dEJRVU0xUXl4UlFVRkxMRkZCUVZFN1FVRkRXaXhSUVVGSkxFOUJRVThzUTBGQlF5eE5RVUZOTEVWQlFVVXNUMEZCVHl4UFFVRlBMRU5CUVVNN1FVRkRia01zVVVGQlNTeE5RVUZOTEVOQlFVTXNZVUZCWVN4RFFVRkRMRTlCUVU4c1EwRkJReXhGUVVGRkxFOUJRVThzVDBGQlR5eERRVUZETzBGQlEyeEVMRkZCUVVrc1QwRkJUeXhEUVVGRExGRkJRVkVzUzBGQlN5eFJRVUZSTEVOQlFVTXNXVUZCV1N4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzBGQlFVRXNSMEZEYmtVN08wRkJSVVFzVTBGQlR5eEpRVUZKTEVOQlFVTTdSVUZEV2pzN1FVRkZSQ3hWUVVGVExHOUNRVUZ2UWl4RFFVRkZMRXRCUVVzc1JVRkJSU3hSUVVGUkxFVkJRVVU3UVVGREwwTXNUVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhMUVVGTExFTkJRVU03UVVGRGJFSXNUVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhSUVVGUkxFTkJRVU03UlVGRGVFSTdPMEZCUlVRc1ZVRkJVeXhYUVVGWExFTkJRVVVzVFVGQlRTeEZRVUZGTzBGQlF6ZENMRlZCUVZFc1RVRkJUU3hEUVVGRExFbEJRVWs3UVVGRGJFSXNVVUZCU3l4WlFVRlpPMEZCUTJoQ0xGRkJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wRkJRM2hDTEZWQlFVMDdPMEZCUlZBc1VVRkJTeXhYUVVGWE8wRkJRMllzVVVGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGRE5VSXNWVUZCVFRzN1FVRkZVQ3hSUVVGTExGVkJRVlU3UVVGRFpDeFJRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU16UWl4VlFVRk5PMEZCUVVFc1IwRkRVRHRGUVVORU96dEJRVVZFTEZWQlFWTXNaMEpCUVdkQ0xFZEJRVWs3UVVGRE5VSXNUVUZCU1N4SlFVRkpMRU5CUVVNc1ZVRkJWU3hKUVVGSkxFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWxCUVVrc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eE5RVUZOTEVWQlFVVTdRVUZEYWtZc1QwRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5d3JRa0ZCSzBJc1JVRkJSU3hYUVVGWExFTkJRVU1zUTBGQlF6dEhRVU4wUkR0RlFVTkVPenRCUVVWRUxFdEJRVWtzUTBGQlF5eFJRVUZSTEVkQlFVY3NZVUZCWVN4RFFVRkRPMEZCUXpsQ0xFdEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVYzdRVUZEV2l4VFFVRlBMRVZCUVVVc1UwRkJVenRCUVVOc1FpeFpRVUZWTEVWQlFVVXNXVUZCV1R0QlFVTjRRaXhaUVVGVkxFVkJRVVVzV1VGQldUdEJRVU40UWl4TFFVRkhMRVZCUVVVc1MwRkJTenRGUVVOV0xFTkJRVU03TzBGQlJVWXNTMEZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRGRFSXNTMEZCU1N4RFFVRkRMRlZCUVZVc1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRGRrSXNTMEZCU1N4RFFVRkRMR2RDUVVGblFpeEhRVUZITEVsQlFVa3NRMEZCUXp0QlFVTTNRaXhMUVVGSkxFTkJRVU1zVlVGQlZTeEhRVUZITEV0QlFVc3NRMEZCUXp0QlFVTjRRaXhMUVVGSkxFTkJRVU1zYzBKQlFYTkNMRWRCUVVjc1NVRkJTU3hEUVVGRE8wRkJRMjVETEV0QlFVa3NRMEZCUXl4aFFVRmhMRWRCUVVjc1NVRkJTU3hEUVVGRE8wRkJRekZDTEV0QlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1JVRkJSU3hEUVVGRE8wRkJRM0JDTEV0QlFVa3NRMEZCUXl4VlFVRlZMRWRCUVVjc1NVRkJTU3hEUVVGRE8wRkJRM1pDTEV0QlFVa3NRMEZCUXl4aFFVRmhMRWRCUVVjc1NVRkJTU3hEUVVGRE96dEJRVVV4UWl4TFFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExGbEJRVms3UVVGREwwSXNUVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhWUVVGVkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNUVUZCVFN4RlFVRkZMRk5CUVZNc1JVRkJSVHRCUVVOMFJDeFBRVUZKTEVsQlFVa3NRMEZCUXpzN1FVRkZWQ3hQUVVGSkxFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVN1FVRkRia0lzVVVGQlNTeEhRVUZITEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU03UVVGRGJFTXNVVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJRenRCUVVOU0xGVkJRVXNzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTJRc1YwRkJUU3hGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRE8wdEJRekZDTEVOQlFVTXNRMEZCUXp0SlFVTklPMGRCUTBRc1EwRkJRenM3UVVGRlJpeE5RVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRlZCUVZVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeE5RVUZOTEVWQlFVVXNVMEZCVXl4RlFVRkZPMEZCUXpGRUxFOUJRVWtzU1VGQlNTeERRVUZET3p0QlFVVlVMRTlCUVVrc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNSVUZCUlR0QlFVTnVRaXhSUVVGSkxFZEJRVWNzVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJRenRCUVVOc1F5eFJRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRPMEZCUTFJc1VVRkJSeXhGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRM1pDTEZOQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRE8wdEJRMklzUTBGQlF5eERRVUZETzBsQlEwZzdSMEZEUkN4RFFVRkRPenRCUVVWR0xFMUJRVWtzUTBGQlF5eFRRVUZUTEVkQlFVY3NWVUZCVlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFMUJRVTBzUlVGQlJTeFRRVUZUTEVWQlFVVTdRVUZETTBRc1QwRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNXVUZCV1N4RFFVRkRMRVZCUVVVN1FVRkRka01zVVVGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJRenRKUVVOMFFqczdRVUZGUkN4UFFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0SFFVTTFRaXhEUVVGRE8wVkJRMFlzUTBGQlF5eERRVUZET3p0QlFVVklMRXRCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzV1VGQldUdEJRVU42UWl4TlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRk8wRkJRMW9zYTBKQlFXZENMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlF6VkNMRk5CUVU4c1NVRkJTU3hEUVVGRE8wVkJRMW9zUTBGQlF6czdRVUZGUml4TFFVRkpMRU5CUVVNc1NVRkJTU3hIUVVGSExGbEJRVms3UVVGRGRrSXNUVUZCU1N4SlFVRkpMRU5CUVVNN08wRkJSVlFzVFVGQlNTeFRRVUZUTEVOQlFVTXNUVUZCVFN4RlFVRkZPMEZCUTNKQ0xFOUJRVWtzUjBGQlJ5eHpRa0ZCU3l4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03UVVGRE9VSXNUMEZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU5tTEZWQlFVOHNTVUZCU1N4RFFVRkRPMGRCUTFvN08wRkJSVVFzVTBGQlR5eHpRa0ZCU3l4TlFVRk5MRVZCUVVVc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlN4RlFVRkZMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eERRVUZETzBWQlEzUkVMRU5CUVVNN08wRkJSVVlzUzBGQlNTeERRVUZETEdsQ1FVRnBRaXhIUVVGSExGVkJRVlVzVFVGQlRTeEZRVUZGTzBGQlF6RkRMRTFCUVVrc1IwRkJSeXhEUVVGRE96dEJRVVZTTEV0QlFVY3NSMEZCUnl4RlFVRkZMRU5CUVVNN08wRkJSVlFzVFVGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeE5RVUZOTEVWQlFVVXNTMEZCU3l4RlFVRkZPMEZCUTNaRUxFOUJRVWtzUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVOeVFpeE5RVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGRkxFVkJRVVVzU1VGQlNTeExRVUZMTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNc1EwRkJRenRIUVVONFF5eERRVUZETEVOQlFVTTdPMEZCUlVnc1RVRkJTU3hKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEZWQlFWVXNRMEZCUXl4SlFVRkpMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zVFVGQlRTeEZRVUZGT3pzN1FVRkhOVVFzVDBGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJWU3hOUVVGTkxFVkJRVVU3UVVGRGRrTXNNRUpCUVhOQ0xFTkJRVU1zVFVGQlRTeEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRPMEZCUTNaRExGVkJRVTBzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dEpRVU5xUXl4RFFVRkRMRU5CUVVNN1IwRkRTRHM3UVVGRlJDeFRRVUZQTEVsQlFVa3NRMEZCUXp0RlFVTmFMRU5CUVVNN08wRkJSVVlzUzBGQlNTeERRVUZETEU5QlFVOHNSMEZCUnl4VlFVRlZMRTlCUVU4c1JVRkJSVHRCUVVOcVF5eE5RVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhsUVVGbExFTkJRVU1zUlVGQlJUdEJRVU14UXl4UFFVRkpMRU5CUVVNc1lVRkJZU3hIUVVGSExIZENRVUZOTEUxQlFVMHNSVUZCUlN4RFFVRkRPMEZCUTNCRExFOUJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNSVUZCUlN4RFFVRkRMRlZCUVZVc1JVRkJSU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZsQlFWazdRVUZEZGtRc1VVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhEUVVGRE8wRkJRelZDTEZGQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJRenRKUVVOb1FpeERRVUZETEVOQlFVTXNRMEZCUXpzN1FVRkZTaXhQUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFWVXNSVUZCUlN4VlFVRlZMRTFCUVUwc1JVRkJSVHRCUVVNeFF5eFJRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVWQlFVVXNUMEZCVHp0QlFVTnlReXhSUVVGSkxFMUJRVTBzUTBGQlF5eFhRVUZYTEV0QlFVc3NTVUZCU1N4RlFVRkZMRTlCUVU4N08wRkJSWGhETEZGQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eGpRVUZqTEVOQlFVTXNRMEZCUXp0SlFVTm9SQ3hEUVVGRExFTkJRVU03UjBGRFNEczdRVUZGUkN4TlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExFZEJRVWNzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0QlFVTm9ReXhOUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTTdPMEZCUlZvc1UwRkJUeXhKUVVGSkxFTkJRVU03UlVGRFdpeERRVUZET3p0QlFVVkdMRXRCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzVlVGQlZTeExRVUZMTEVWQlFVVXNVMEZCVXl4RlFVRkZPMEZCUXpORExGZEJRVk1zUTBGQlF5eE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExGbEJRVms3UVVGRE5VTXNUMEZCU1N4aFFVRmhMRVZCUVVVc1RVRkJUU3hEUVVGRE96dEJRVVV4UWl4blFrRkJZU3hIUVVGSE8wRkJRMllzVVVGQlNTeEZRVUZGTEV0QlFVczdRVUZEV0N4WFFVRlBMRVZCUVVVc1JVRkJSVHRCUVVOWUxHVkJRVmNzUlVGQlJTeEpRVUZKTzBGQlEycENMR3RDUVVGakxFVkJRVVVzU1VGQlNUdEpRVU53UWl4RFFVRkRPenRCUVVWR0xGTkJRVTBzUjBGQlJ5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1JVRkJSU3hUUVVGVExFTkJRVU1zUTBGQlF6czdRVUZGTVVNc1QwRkJTU3hQUVVGUExFMUJRVTBzUzBGQlN5eFJRVUZSTEVWQlFVVTdRVUZETDBJc2FVSkJRV0VzUjBGQlJ5eHJRa0ZCU3l4TFFVRkxMRU5CUVVNc1lVRkJZU3hGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzBsQlEyeEVPenRCUVVWRUxFOUJRVWtzVFVGQlRTeExRVUZMTEV0QlFVc3NSVUZCUlR0QlFVTnlRaXhSUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1ZVRkJWU3hGUVVGRkxHRkJRV0VzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEYWtRN08wRkJSVVFzVlVGQlR5eEpRVUZKTEVOQlFVTTdSMEZEV2l4RFFVRkRPenRCUVVWR0xGTkJRVThzU1VGQlNTeERRVUZETzBWQlExb3NRMEZCUXpzN1FVRkZSaXhMUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEZsQlFWazdRVUZETVVJc1RVRkJTU3hKUVVGSkxFVkJRVVVzVDBGQlR5eEZRVUZGTEZkQlFWY3NSVUZCUlN4VFFVRlRMRVZCUVVVc1kwRkJZeXhEUVVGRE96dEJRVVV4UkN4TlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhGUVVGRk8wRkJRemRETEZsQlFWTXNSMEZCUnl3MlFrRkJWeXhOUVVGTkxFVkJRVVVzUTBGQlF6dEJRVU5vUXl4cFFrRkJZeXhIUVVGSExFbEJRVWtzUTBGQlF5eDFRa0ZCZFVJc1JVRkJSU3hEUVVGRE96dEJRVVZvUkN4UFFVRkpMRWxCUVVrc1EwRkJReXh6UWtGQmMwSXNTVUZCU3l4alFVRmpMRWxCUVVrc1kwRkJZeXhEUVVGRExHZENRVUZwUWl4RlFVRkZPMEZCUTNaR0xHRkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1JVRkJSU3hqUVVGakxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1EwRkJRenRKUVVOcVJUczdRVUZGUkN4UFFVRkpMRU5CUVVNc1owSkJRV2RDTEVkQlFVY3NVMEZCVXl4RFFVRkRPMGRCUTJ4RE96dEJRVVZFTEUxQlFVa3NVMEZCVXl4RFFVRkRMRTFCUVUwc1MwRkJTeXhEUVVGRExFVkJRVVU3UVVGRE0wSXNWMEZCVVN4UFFVRlBMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRE1VSXNVMEZCU3l4UlFVRlJPMEZCUVVVc1UwRkJTU3hIUVVGSExGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUlN4TlFVRk5PenRCUVVVeFF5eFRRVUZMTEZWQlFWVXNRMEZCUXp0QlFVTm9RaXhUUVVGTExGRkJRVkU3UVVGQlJTeFpRVUZQTEVkQlFVY3NVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRkxFMUJRVTA3UVVGQlFTeEpRVU0zUXp0SFFVTkVMRTFCUlVrN1FVRkRTaXhQUVVGSkxFZEJRVWNzVTBGQlV5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTNCQ0xGVkJRVThzUjBGQlJ5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1IwRkRka0k3TzBGQlJVUXNWVUZCVVN4UFFVRlBMRTlCUVU4N1FVRkRja0lzVVVGQlN5eFJRVUZSTzBGQlExb3NVMEZCU3l4SlFVRkpMRWxCUVVrc1QwRkJUeXhGUVVGRk8wRkJRM0pDTEZOQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1kwRkJZeXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEZOQlFWTTdPMEZCUlRWRExGTkJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RlFVRkZMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzB0QlEyeERPMEZCUTBRc1ZVRkJUVHM3UVVGRlVDeFJRVUZMTEZWQlFWVTdRVUZEWkN4UlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc2IwSkJRVzlDTEVOQlFVTXNTVUZCU1N4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU03UVVGRGJrVXNWVUZCVFR0QlFVRkJMRWRCUTFBN08wRkJSVVFzVTBGQlR5eEpRVUZKTEVOQlFVTTdSVUZEV2l4RFFVRkRPenRCUVVWR0xFdEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NWVUZCVlN4TFFVRkxMRVZCUVVVc1IwRkJSeXhGUVVGRk8wRkJRMnhETEUxQlFVa3NUVUZCVFN4RlFVRkZMRWxCUVVrc1EwRkJRenM3UVVGRmFrSXNVVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJRenRCUVVOa0xFMUJRVWtzUjBGQlJ5eHJRa0ZCU3l4VlFVRlZMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03TzBGQlJUbENMRTFCUVVrc1EwRkJReXhUUVVGVExFZEJRVWNzVlVGQlZTeERRVUZETEZsQlFWYzdRVUZEZEVNc1RVRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0SFFVTnFRaXhGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZET3p0QlFVVlVMRk5CUVU4c1NVRkJTU3hEUVVGRE8wVkJRMW9zUTBGQlF6czdRVUZGUml4TFFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExGVkJRVlVzUzBGQlN5eEZRVUZGTEVkQlFVY3NSVUZCUlR0QlFVTnVReXhOUVVGSkxFMUJRVTBzUlVGQlJTeEpRVUZKTEVOQlFVTTdPMEZCUldwQ0xGRkJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTTdRVUZEWkN4TlFVRkpMRWRCUVVjc2EwSkJRVXNzVlVGQlZTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPenRCUVVVNVFpeE5RVUZKTEVOQlFVTXNWVUZCVlN4SFFVRkhMRmRCUVZjc1EwRkJReXhaUVVGWE8wRkJRM2hETEUxQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03UjBGRGFrSXNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenM3UVVGRlZDeFRRVUZQTEVsQlFVa3NRMEZCUXp0RlFVTmFMRU5CUVVNN08wRkJSVVlzUzBGQlNTeERRVUZETEZOQlFWTXNSMEZCUnl4VlFVRlZMRkZCUVZFc1JVRkJSU3hIUVVGSExFVkJRVVU3UVVGRGVrTXNUVUZCU1N4TlFVRk5MRVZCUVVVc1MwRkJTeXhGUVVGRkxGRkJRVkVzUlVGQlJTeEpRVUZKTEVWQlFVVXNUVUZCVFN4RFFVRkRPenRCUVVVeFF5eE5RVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRMRk5CUVZNc1NVRkJTU3hKUVVGSkxFTkJRVU03UVVGRE9VSXNVVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVOWUxGVkJRVkVzUjBGQlJ5eERRVUZETEVOQlFVTTdPMEZCUldJc1RVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNaVUZCWlN4RFFVRkRMRVZCUVVVN1FVRkRNVU1zVVVGQlN5eEhRVUZITEZWQlFWVXNTMEZCU3l4RlFVRkZPMEZCUTNoQ0xGRkJRVWtzUTBGQlF5eEZRVUZGTEU5QlFVOHNRMEZCUXpzN1FVRkZaaXhSUVVGSkxFbEJRVWtzUlVGQlJUdEJRVU5VTEZOQlFVa3NTMEZCU3l4SFFVRkhMRkZCUVZFc1NVRkJTeXhKUVVGSkxFZEJRVU1zU1VGQlN5eEZRVUZGTzBGQlEzQkRMRmRCUVVzc1EwRkJReXhIUVVGRExFTkJRVU1zUlVGQlJTeFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVsQlFVVXNRMEZCUXl4RlFVRkZPMEZCUTJoRUxHTkJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZMRXRCUVVzc1JVRkJSU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NTVUZCUlN4TFFVRkxMRWRCUVVjc1VVRkJVU3hEUVVGRExFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0UFFVTnlSVHM3UVVGRlJDeFZRVUZKTEUxQlFVMHNTMEZCU3l4SlFVRkpMRVZCUVVVc1RVRkJUU3hIUVVGSExFTkJRVU1zUTBGQlF6czdRVUZGYUVNc1dVRkJUU3hKUVVGRkxFTkJRVU1zUTBGQlF6dEJRVU5XTEdOQlFWRXNSMEZCUnl4TFFVRkxMRU5CUVVNN1RVRkRha0k3UzBGRFJEczdRVUZGUkN4UlFVRkpMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU1zVFVGQlRTeEZRVUZGTzBGQlF6bENMRmRCUVUwc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRMUVVOeVF6dEpRVU5FTEVOQlFVTTdPMEZCUlVZc1UwRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN096czdRVUZKTVVJc1VVRkJTeXhEUVVGRExFMUJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRPenRCUVVVNVFpeFBRVUZKTEVOQlFVTXNZVUZCWVN4SFFVRkhMRFpDUVVGWExFMUJRVTBzUlVGQlJTeERRVUZETzBGQlEzcERMRk5CUVUwc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRIUVVOeVF6czdRVUZGUkN4TlFVRkpMRWRCUVVjc1MwRkJTeXhMUVVGTExFVkJRVVU3UVVGRGJFSXNUMEZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhIUVVGSExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdSMEZEYWtNc1RVRkZTVHRCUVVOS0xFOUJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wZEJRM0JET3p0QlFVVkVMRk5CUVU4c1NVRkJTU3hEUVVGRE8wVkJRMW9zUTBGQlF6czdRVUZGUml4TFFVRkpMRU5CUVVNc1NVRkJTU3hIUVVGSExGVkJRVlVzVFVGQlRTeEZRVUZGTzBGQlF6ZENMRTFCUVVrc1RVRkJUU3hMUVVGTExGRkJRVkVzUlVGQlJUdEJRVU40UWl4blFrRkJZU3hEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0SFFVTXZRaXhOUVVWSk8wRkJRMG9zWlVGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRIUVVNM1FqczdRVUZGUkN4VFFVRlBMRWxCUVVrc1EwRkJRenRGUVVOYUxFTkJRVU03TzBGQlJVWXNTMEZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhWUVVGVkxFdEJRVXNzUlVGQlJTeFhRVUZYTEVWQlFVVXNTVUZCU1N4RlFVRkZPMEZCUTJoRUxFMUJRVWtzU1VGQlNTeEZRVUZGTEUxQlFVMHNSVUZCUlN4TlFVRk5MRVZCUVVVc1RVRkJUU3hGUVVGRkxFdEJRVXNzUlVGQlJTeEhRVUZITEVWQlFVVXNWMEZCVnl4RlFVRkZMRXRCUVVzc1EwRkJRenM3UVVGRmFrVXNUVUZCU1N4RFFVRkRMRmRCUVZjc1JVRkJSVHRCUVVOcVFpeFZRVUZQTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03UjBGRGVrSTdPMEZCUlVRc1MwRkJSeXhIUVVGSExGZEJRVmNzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRMMElzVDBGQlN5eEhRVUZITEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGRE0wSXNZVUZCVnl4SFFVRkhMRVZCUVVVc1EwRkJRenM3UVVGRmFrSXNTMEZCUnl4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVXNTVUZCU1N4RlFVRkZPMEZCUTNKRExFOUJRVWtzVFVGQlRTeEZRVUZGTEVsQlFVa3NRMEZCUXpzN1FVRkZha0lzVTBGQlRTeEhRVUZKTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eExRVUZMTEVkQlFVY3NSMEZCU1N4VlFVRlZMRWRCUVVjc1lVRkJZU3hEUVVGRE96dEJRVVZxUlN4alFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRE8wRkJRMmhDTEZWQlFVMHNSVUZCUlN4TlFVRk5PMEZCUTJRc1VVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTI1Q0xFTkJRVU1zUTBGQlF6czdRVUZGU0N4UFFVRkpMRTFCUVUwc1MwRkJTeXhWUVVGVkxFVkJRVVU3UVVGRE1VSXNVVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEY2tJc1UwRkJTeXhIUVVGSExHdENRVUZMTEZkQlFWY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRCUVVNdlFpeFJRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF6dEpRVU42UWp0SFFVTkVMRU5CUVVNc1EwRkJReXhEUVVGRE96dEJRVVZLTEZGQlFVMHNSMEZCUnl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRGJFSXNVVUZCVFN4SFFVRkhMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6czdRVUZGYkVJc1RVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEZWQlFWVXNUMEZCVHl4RlFVRkZPMEZCUTJwRExFOUJRVWtzVFVGQlRTeEZRVUZGTEZsQlFWa3NSVUZCUlN4aFFVRmhMRU5CUVVNN08wRkJSWGhETEZOQlFVMHNSMEZCUnl4aFFVRmhMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXp0QlFVTXpReXhsUVVGWkxFZEJRVWNzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRWRCUVVNc1RVRkJUU3hGUVVGRk8wRkJRM0JETEZWQlFVMHNSVUZCUlN4TlFVRk5MRU5CUVVNc1RVRkJUU3hIUVVGSExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4TlFVRk5PMEZCUXpGRExHVkJRVmNzUlVGQlJTeEpRVUZKTzBsQlEycENMRU5CUVVNc1EwRkJRenRCUVVOSUxHZENRVUZoTEVkQlFVY3NRMEZCUXl4RFFVRkRPenRCUVVWc1FpeFBRVUZKTEVsQlFVa3NTVUZCU1N4SlFVRkpMRU5CUVVNc1UwRkJVeXhKUVVGSkxFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1JVRkJSU3hUUVVGVExFTkJRVU1zUzBGQlN5eExRVUZMTEVWQlFVVTdRVUZET1VVc1YwRkJUeXhEUVVGRExFVkJRVVVzU1VGQlNTeEpRVUZKTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRVZCUVVVc1UwRkJVeXhEUVVGRExFTkJRVU03U1VGRGNrVTdPMEZCUlVRc1QwRkJTU3hKUVVGSkxFbEJRVWtzU1VGQlNTeERRVUZETEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN08wRkJSVGxFTEdOQlFWY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJWU3hQUVVGUExFVkJRVVU3T3p0QlFVZDBReXhwUWtGQllTeEpRVUZKTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVNelJpeFZRVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0SlFVTnlReXhEUVVGRExFTkJRVU03TzBGQlJVZ3NUMEZCU1N4SlFVRkpMRWxCUVVrc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFVkJRVVVzVTBGQlV5eERRVUZETEVOQlFVTTdPMEZCUnpWRUxFOUJRVWtzWVVGQllTeEZRVUZGTzBGQlEyeENMRkZCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTTdRVUZETTBJc1YwRkJUeXhOUVVGTkxFTkJRVU03U1VGRFpEczdRVUZGUkN4VlFVRlBMRXRCUVVzc1EwRkJRenRIUVVOaUxFTkJRVU03TzBGQlJVWXNUVUZCU1N4TlFVRk5MRVZCUVVVN1FVRkRXQ3hUUVVGTkxFZEJRVWNzUzBGQlN5eEhRVUZITEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEZkQlFWY3NSVUZCUlN4SFFVRkhMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdPMEZCUlhCRkxFOUJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4VlFVRlZMRTlCUVU4c1JVRkJSVHRCUVVOcVF5eFJRVUZKTEUxQlFVMHNRMEZCUXpzN1FVRkZXQ3hWUVVGTkxFZEJRVWNzWVVGQllTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03TzBGQlJUTkRMRmRCUVU4c1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRE1VTXNRMEZCUXpzN1FVRkZSaXhQUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NXVUZCV1R0QlFVTXhRaXhYUVVGUExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4SFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTXpReXhEUVVGRE8wZEJRMFk3TzBGQlJVUXNVMEZCVHl4SlFVRkpMRU5CUVVNN1JVRkRXaXhEUVVGRE96dEJRVVZHTEV0QlFVa3NRMEZCUXl4NVFrRkJlVUlzUjBGQlJ5eFpRVUZaTzBGQlF6VkRMRk5CUVU4c1NVRkJTU3hEUVVGRE8wVkJRMW9zUTBGQlF6czdRVUZGUml4TFFVRkpMRU5CUVVNc2RVSkJRWFZDTEVkQlFVY3NXVUZCV1R0QlFVTXhReXhOUVVGSkxFdEJRVXNzUTBGQlF6czdRVUZGVml4UFFVRkxMRWRCUVVjc2EwSkJRVXNzVVVGQlVTeERRVUZETEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03TzBGQlJUTkRMRk5CUVU4c1EwRkJReXhEUVVGRExFdEJRVXNzU1VGQlNTeExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRPMFZCUXk5Q0xFTkJRVU03TzBGQlJVWXNTMEZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhaUVVGWk8wRkJRelZDTEZOQlFVOHNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFbEJRVXNzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4WlFVRlpMRU5CUVVNc1NVRkJTU3hKUVVGSkxFTkJRVU1zVlVGQlZ5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1NVRkJTU3hKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEUxQlFVMHNTMEZCU3l4RFFVRkRMRU5CUVVNN1JVRkRPVWtzUTBGQlF6czdPenM3T3pzN1FVRlJSaXhMUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEZWQlFWVXNSVUZCUlN4WlFVRlpPMEZCUTNKRExFMUJRVWtzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4WlFVRlpMRU5CUVVNc1NVRkJTU3hKUVVGSkxFTkJRVU1zVlVGQlZTeEZRVUZGTEU5QlFVOHNTMEZCU3l4RFFVRkRPenRCUVVWMlJTeE5RVUZKTEVOQlFVTXNWVUZCVlN4SFFVRkhMRWxCUVVrc1EwRkJRenRCUVVOMlFpeE5RVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE96dEJRVVV4UWl4VFFVRlBPMEZCUTA0c2FVSkJRV01zUlVGQlJTeEpRVUZKTzBkQlEzQkNMRU5CUVVNN1JVRkRSaXhEUVVGRExFTkJRVU03T3pzN096czdPenM3TzBGQlYwZ3NTMEZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFVkJRVVVzVlVGQlZTeE5RVUZOTEVWQlFVVTdRVUZEZGtNc1UwRkJUenRCUVVOT0xGRkJRVXNzUlVGQlJTeE5RVUZOTzBGQlEySXNhVUpCUVdNc1JVRkJSU3hOUVVGTkxFTkJRVU1zVlVGQlZUdEhRVU5xUXl4RFFVRkRPMFZCUTBZc1EwRkJReXhEUVVGRE96czdPenM3T3pzN096dEJRVmRJTEV0QlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1ZVRkJWU3hGUVVGRkxGVkJRVlVzVFVGQlRTeEZRVUZGTzBGQlF6TkRMRk5CUVU4N1FVRkRUaXhSUVVGTExFVkJRVVVzVFVGQlRUdEJRVU5pTEdsQ1FVRmpMRVZCUVVVc1RVRkJUU3hEUVVGRExGVkJRVlU3UjBGRGFrTXNRMEZCUXp0RlFVTkdMRU5CUVVNc1EwRkJRenM3T3pzN096czdPenM3UVVGWFNDeExRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRk5CUVZNc1JVRkJSU3hWUVVGVkxFMUJRVTBzUlVGQlJUdEJRVU14UXl4VFFVRlBPMEZCUTA0c1VVRkJTeXhGUVVGRkxFMUJRVTA3UVVGRFlpeHBRa0ZCWXl4RlFVRkZMRTFCUVUwc1EwRkJReXhWUVVGVk8wZEJRMnBETEVOQlFVTTdSVUZEUml4RFFVRkRMRU5CUVVNN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQk1FSklMRXRCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zWVVGQllTeEZRVUZGTEdOQlFXTXNRMEZCUXl4RFFVRkRPenM3T3pzN096czdPMEZCVlRGRExFdEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRE96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFUQkNOMElzUzBGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4WlFVRlpMRVZCUVVVc1VVRkJVU3hGUVVGRk8wRkJRMnhETEZOQlFVOHNSVUZCUlN4cFFrRkJWU3hQUVVGUExFVkJRVVU3UVVGRE0wSXNUMEZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dEhRVU53UWp0RlFVTkVMRU5CUVVNc1EwRkJRenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVUV3UWtnc1MwRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3h2UWtGQmIwSXNRMEZCUXl4RFFVRkRPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRVEJDYmtRc1MwRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eHJRa0ZCYTBJc1JVRkJSU3h2UWtGQmIwSXNRMEZCUXl4RFFVRkRPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRVEJDY2tRc1MwRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eHBRa0ZCYVVJc1JVRkJSU3hYUVVGWExFVkJRVVU3UVVGRE1VTXNVMEZCVHl4RlFVRkZMR2xDUVVGVkxFOUJRVThzUlVGQlJUdEJRVU16UWl4UFFVRkpMRTFCUVUwc1JVRkJSU3hQUVVGUExFTkJRVU03TzBGQlJYQkNMRk5CUVUwc1IwRkJSeXhoUVVGaExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRenRCUVVNelF5eFZRVUZQTEVkQlFVY3NUVUZCVFN4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRE96dEJRVVV4UWl4VlFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzVFVGQlRTeEZRVUZGTEV0QlFVc3NSVUZCUlR0QlFVTnVSU3hSUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMGxCUTNKQ0xFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEwb3NWVUZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVXNUVUZCVFN4RlFVRkZMRXRCUVVzc1JVRkJSVHRCUVVOMFJTeFJRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wbEJRM2hDTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGRCUTBvN1JVRkRSQ3hEUVVGRExFTkJRVU03T3pzN096czdPenM3UVVGVlNDeExRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRlZCUVZVc1JVRkJSU3hYUVVGWExFTkJRVU1zUTBGQlF6czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRXdRbkJETEV0QlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc2RVSkJRWFZDTEVWQlFVVXNZMEZCWXl4RFFVRkRMRU5CUVVNN096czdPenM3T3pzN1FVRlZjRVFzUzBGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4aFFVRmhMRVZCUVVVc1kwRkJZeXhEUVVGRExFTkJRVU03T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZCTUVJeFF5eExRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMSFZDUVVGMVFpeEZRVUZGTEZsQlFWa3NSVUZCUlR0QlFVTnFSQ3hSUVVGTkxFVkJRVVVzWjBKQlFWVXNUMEZCVHl4RlFVRkZPMEZCUXpGQ0xFOUJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVVXNZVUZCWVN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVVXNRMEZCUXp0SFFVTndSRHRGUVVORUxFTkJRVU1zUTBGQlF6czdPenM3T3pzN096dEJRVlZJTEV0QlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1lVRkJZU3hGUVVGRkxGbEJRVmtzUTBGQlF5eERRVUZET3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVGdlEzaERMRXRCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zYzBKQlFYTkNMRVZCUVVVc1lVRkJZU3hGUVVGRk8wRkJRMnBFTEZOQlFVOHNSVUZCUlN4cFFrRkJWU3hoUVVGaExFVkJRVVVzVFVGQlRTeEZRVUZGTzBGQlEzcERMRTlCUVVrc1MwRkJTeXhGUVVGRkxFMUJRVTBzUTBGQlF6czdRVUZGYkVJc1UwRkJUU3hIUVVGSExHRkJRV0VzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZMR0ZCUVdFc1EwRkJReXhEUVVGRE8wRkJRMnBFTEZGQlFVc3NSMEZCU1N4RlFVRkRMRU5CUVVNc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlF5eEZRVUZGTEdGQlFXRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVa3NZVUZCWVN4SFFVRkhMRTFCUVUwc1EwRkJRenM3UVVGRk0wWXNUMEZCU1N4TFFVRkxMRVZCUVVVN1FVRkRWaXhWUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEZkQlFWY3NSVUZCUlN4aFFVRmhMRWRCUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUjBGQlF5eHBRa0ZCYVVJc1IwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eEhRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMGxCUXk5Rk8wZEJRMFE3UlVGRFJDeERRVUZETEVOQlFVTTdPenM3T3pzN096czdRVUZWU0N4TFFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExHRkJRV0VzUlVGQlJTeGhRVUZoTEVWQlFVVTdRVUZEZUVNc1UwRkJUeXhGUVVGRkxHMUNRVUZaTzBGQlEzQkNMRTlCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zVjBGQlZ5eEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRPMGRCUXpsQ08wVkJRMFFzUTBGQlF5eERRVUZET3p0QlFVVklMRXRCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zV1VGQldTeEZRVUZGTEZGQlFWRXNRMEZCUXl4RFFVRkRPME5CUlc1RExFTkJRVU1zUTBGQlF6czdjVUpCUlZrc1JVRkJSU3hOUVVGTkxFVkJRVTRzVFVGQlRTeEZRVUZGTEhOQ1FVRnpRaXhGUVVGMFFpeHpRa0ZCYzBJc1JVRkJSU0lzSW1acGJHVWlPaUl6T1M1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dRbUZ6WlNCamJHRnpjeUJtYjNJZ1lTQnpZMjl3WlNCaFkzUnBibWNnWVhNZ1lXNGdYQ0psYm5ScGRIbGNJaUIzYVhSb0lGd2ljM1JoZEdWelhDSXNJRndpWW1Wb1lYWnBiM0p6WENJZ1lXNWtJSFJvWlNCaFltbHNhWFI1SUhSdklISmxjM0J2Ym1RZ0tISmxjM0J2Ym5OcFltbHNhWFJwWlhNcElIUnZJR0psYUdGMmFXOXljeTVjYmlBcVhHNGdLaUJBYlc5a2RXeGxYRzRnS2k5Y2JtbHRjRzl5ZENCMWRHbHNJR1p5YjIwZ0ozVjBhV3duTzF4dWFXMXdiM0owSUVkc2IySmhiRk5qYjNCbElHWnliMjBnSjNSNWNHVnpMMGRzYjJKaGJGTmpiM0JsSnp0Y2JtbHRjRzl5ZENCRGIyeHNaV04wYVc5dUlHWnliMjBnSjNSNWNHVnpMME52Ykd4bFkzUnBiMjRuTzF4dWFXMXdiM0owSUhzZ1VHOXBiblFzSUZOcGVtVWdmU0JtY205dElDZDBlWEJsY3k5RWFXMWxibk5wYjI1ekp6dGNibWx0Y0c5eWRDQlJkV1YxWlNCbWNtOXRJQ2QwZVhCbGN5OVJkV1YxWlNjN1hHNWNkRnh1Wm5WdVkzUnBiMjRnYVc1MmIydGxVbVZ6Y0c5dWMybGlhV3hwZEdsbGN5QW9YM05qYjNCbExDQmZaWFpsYm5RcElIdGNibHgwYVdZZ0tGOXpZMjl3WlNBbUppQmZjMk52Y0dVdWNtVnpjRzl1YzJsaWFXeHBkR2xsY3lBbUppQmZjMk52Y0dVdWFYTk5aVzFpWlhKVFlXWmxLQ2R5WlhOd2IyNXphV0pwYkdsMGFXVnpKeWtwSUh0Y2JseDBYSFJmYzJOdmNHVXVjbVZ6Y0c5dWMybGlhV3hwZEdsbGN5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUlDaGZjbVZqYjNKa0tTQjdYRzVjZEZ4MFhIUnBaaUFvWDNKbFkyOXlaQzV1WVcxbElEMDlQU0JmWlhabGJuUXVibUZ0WlNrZ2UxeHVYRzVjZEZ4MFhIUmNkQzh2SUdOdmJuTnZiR1V1Ykc5bktGOXpZMjl3WlM1cFpDZ3BMQ0FuY21WemNHOXVaQ2NzSUY5eVpXTnZjbVF1Ym1GdFpTd2dKMlp5YjIwbkxDQmZaWFpsYm5RdWRHRnlaMlYwVTJOdmNHVXVhV1FvS1NrN1hHNWNkRngwWEhSY2RGOXlaV052Y21RdVlXSnBiR2wwZVM1allXeHNLRjl6WTI5d1pTd2dYMlYyWlc1MEtUdGNibHgwWEhSY2RIMWNibHgwWEhSOUtUdGNibHgwZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRHh6Y0dGdUlHTnNZWE56UFZ3aWJtOTBaU0JwYlhCdmNuUmhiblJjSWo1T1QxUkZPaUJVYUdseklHbHpJRTVQVkNCaElHTnZibk4wY25WamRHOXlMaUJWYzJVZ1lFVnVkR2wwZVM1amNtVmhkR1VvS1dBZ2RHOGdaMlYwSUdFZ2JtVjNJR2x1YzNSaGJtTmxMand2YzNCaGJqNWNiaUFxSUVCamJHRnpjMlJsYzJNZ1FtRnpaU0JqYkdGemN5Qm1iM0lnWVNCelkyOXdaU0JoWTNScGJtY2dZWE1nWVc0Z1hDSmxiblJwZEhsY0lpQjNhWFJvSUZ3aWMzUmhkR1Z6WENJc0lGd2lZbVZvWVhacGIzSnpYQ0lnWVc1a0lIUm9aU0JoWW1sc2FYUjVJSFJ2SUhKbGMzQnZibVFnS0hKbGMzQnZibk5wWW1sc2FYUnBaWE1wSUhSdklHSmxhR0YyYVc5eWN5NGdSbTl5SUcxdmNtVWdhVzVtYjNKdFlYUnBiMjRnYjI0Z2RHaGxjMlVnZEdWeWJYTWdjbVZoWkNCYmRHaHBjMTE3UUd4cGJtc2diVzlrZFd4bE9uUjVjR1Z6TDBWdWRHbDBlWDB1WEc0Z0tpQThjM1I1YkdVK1hHNGdLaUF1ZEdGbklIdGNiaUFxSUNBZ2NHRmtaR2x1WnpvZ01YQjRJRFJ3ZUR0Y2JpQXFJQ0FnWW05eVpHVnlMWEpoWkdsMWN6b2dOSEI0TzF4dUlDcGNiaUFxSUNBZ1kyOXNiM0k2SUNObVptWTdYRzRnS2lBZ0lHSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTmhZV0U3WEc0Z0tpQjlYRzRnS2x4dUlDb2dMblJoWnk1aVpXaGhkbWx2Y2lCN1hHNGdLbHgwSUdKaFkydG5jbTkxYm1RdFkyOXNiM0k2SUNNd1ltRTdYRzRnS2lCOVhHNGdLbHh1SUNvZ0xuUmhaeTV6ZEdGMFpTQjdYRzRnS2x4MElHSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTmlZVEE3WEc0Z0tpQjlYRzRnS2x4dUlDb2dMbTV2ZEdVZ2UxeHVJQ29nSUNCaWIzSmtaWEk2SUhOdmJHbGtJREZ3ZUR0Y2JpQXFJQ0FnWW05eVpHVnlMWEpoWkdsMWN6b2dOSEI0TzF4dUlDb2dJQ0J3WVdSa2FXNW5PaUF4Y0hnZ05IQjRPMXh1SUNvZ0lDQmpiMnh2Y2pvZ0kyRmhZVHRjYmlBcUlDQWdZbUZqYTJkeWIzVnVaQzFqYjJ4dmNqb2dJMlZsWlR0Y2JpQXFJSDFjYmlBcUlGeHVJQ29nTG01dmRHVXVhVzF3YjNKMFlXNTBJSHRjYmlBcUlDQWdZMjlzYjNJNklDTmlOVFU3WEc0Z0tpQWdJR0poWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ05tWldVN1hHNGdLaUI5WEc0Z0tpQThMM04wZVd4bFBseHVJQ3BjYmlBcUlFQmpiR0Z6YzF4dUlDb2dRSEJ5YjNBZ2UyMXZaSFZzWlRwMGVYQmxjeTlEYjJ4c1pXTjBhVzl1ZmtOdmJHeGxZM1JwYjI1OUlISmxjM0J2Ym5OcFltbHNhWFJwWlhNZ0xTQkJJR052Ykd4bFkzUnBiMjRnYjJZZ1VtVnpjRzl1YzJsaWFXeHBkSGxTWldOdmNtUnpJR1p2Y2lCMGFHVWdjMk52Y0dVdVhHNGdLaUJBY0hKdmNDQjdZbTl2YkdWaGJuMGdhWE5EYjIxd2JHVjBaU0F0SUUxaGNtdHpJR0VnYzJOdmNHVWdZWE1nWENKamIyMXdiR1YwWlZ3aUlIWnBZU0IwYUdVZ1cyQmpiMjF3YkdWMFpTZ3BZRjE3UUd4cGJtc2diVzlrZFd4bE9uUjVjR1Z6TDBWdWRHbDBlWDVGYm5ScGRIa2pZMjl0Y0d4bGRHVjlJR0psYUdGMmFXOXlMbHh1SUNvZ1FHVjRkR1Z1WkhNZ1IyeHZZbUZzVTJOdmNHVmNiaUFxTDF4dWRtRnlJRVZ1ZEdsMGVTQTlJRWRzYjJKaGJGTmpiM0JsTG1WNGRHVnVaQ2htZFc1amRHbHZiaUFvS1NCN1hHNWNibHgwWm5WdVkzUnBiMjRnY21WemIyeDJaVlJoY21kbGRDQW9YM1JoY21kbGRDa2dlMXh1WEhSY2RGeHVYSFJjZEhOM2FYUmphQ0FvZEhsd1pXOW1JRjkwWVhKblpYUXBJSHRjYmx4MFhIUmNkR05oYzJVZ0ozTjBjbWx1WnljNklISmxkSFZ5YmlCMGFHbHpMbVpwYm1SUGQyNG9YM1JoY21kbGRDazdYRzVjZEZ4MFhIUmpZWE5sSUNkdlltcGxZM1FuT2x4dVhIUmNkRngwWEhScFppQW9YM1JoY21kbGRDNXFjWFZsY25rcElISmxkSFZ5YmlCZmRHRnlaMlYwTzF4dVhIUmNkRngwWEhScFppQW9SVzUwYVhSNUxtbHpVSEp2ZEc5MGVYQmxUMllvWDNSaGNtZGxkQ2twSUhKbGRIVnliaUJmZEdGeVoyVjBPMXh1WEhSY2RGeDBYSFJwWmlBb1gzUmhjbWRsZEM1dWIyUmxWSGx3WlNBOVBUMGdaRzlqZFcxbGJuUXVSVXhGVFVWT1ZGOU9UMFJGS1NCeVpYUjFjbTRnSkNoZmRHRnlaMlYwS1R0Y2JseDBYSFI5WEc1Y2JseDBYSFJ5WlhSMWNtNGdkR2hwY3p0Y2JseDBmVnh1WEc1Y2RHWjFibU4wYVc5dUlGSmxjM0J2Ym5OcFltbHNhWFI1VW1WamIzSmtJQ2hmYm1GdFpTd2dYMkZpYVd4cGRIa3BJSHRjYmx4MFhIUjBhR2x6TG01aGJXVWdQU0JmYm1GdFpUdGNibHgwWEhSMGFHbHpMbUZpYVd4cGRIa2dQU0JmWVdKcGJHbDBlVHRjYmx4MGZWeHVYRzVjZEdaMWJtTjBhVzl1SUdSeVlXZEhjbVZsZEdWeUlDaGZaWFpsYm5RcElIdGNibHgwWEhSemQybDBZMmdnS0Y5bGRtVnVkQzUwZVhCbEtTQjdYRzVjZEZ4MFhIUmpZWE5sSUNka2NtRm5MWE4wWVhKMEp6cGNibHgwWEhSY2RGeDBkR2hwY3k1bmNtRmlLRjlsZG1WdWRDNXpkR0YwWlNrN1hHNWNkRngwWEhSY2RHSnlaV0ZyTzF4dVhHNWNkRngwWEhSallYTmxJQ2RrY21GbkxXMXZkbVVuT2x4dVhIUmNkRngwWEhSMGFHbHpMbVJ5WVdkbmFXNW5LRjlsZG1WdWRDNXpkR0YwWlNrN1hHNWNkRngwWEhSY2RHSnlaV0ZyTzF4dVhHNWNkRngwWEhSallYTmxJQ2RrY21GbkxXVnVaQ2M2WEc1Y2RGeDBYSFJjZEhSb2FYTXVjbVZzWldGelpTaGZaWFpsYm5RdWMzUmhkR1VwTzF4dVhIUmNkRngwWEhSaWNtVmhhenRjYmx4MFhIUjlYRzVjZEgxY2JseHVYSFJtZFc1amRHbHZiaUJoZEhSaFkyaEVjbUZuUlhabGJuUnpJQ2dwSUh0Y2JseDBYSFJwWmlBb2RHaHBjeTVrY21GbloyRmliR1Z6SUNZbUlIUm9hWE11YVhOTlpXMWlaWEpUWVdabEtDZGtjbUZuWjJGaWJHVnpKeWtnSmlZZ2RHaHBjeTVrY21GbloyRmliR1Z6TG14bGJtZDBhQ2tnZTF4dVhIUmNkRngwZEdocGN5NXZiaWduWkhKaFp5MXpkR0Z5ZENCa2NtRm5MVzF2ZG1VZ1pISmhaeTFsYm1RbkxDQmtjbUZuUjNKbFpYUmxjaWs3WEc1Y2RGeDBmVnh1WEhSOVhHNWNibHgwZEdocGN5NWlZWE5sVkhsd1pTQTlJQ2RVV1ZCRlgwVk9WRWxVV1NjN1hHNWNkSFJvYVhNdVUxUkJWRVVnUFNCN1hHNWNkRngwVUV4QldVbE9Sem9nSjFCTVFWbEpUa2NuTEZ4dVhIUmNkRUpCUTB0SFVrOVZUa1E2SUNkQ1FVTkxSMUpQVlU1RUp5eGNibHgwWEhSV1QwbERSVjlQVmtWU09pQW5WazlKUTBVdFQxWkZVaWNzWEc1Y2RGeDBVMFpZT2lBblUwWllKMXh1WEhSOU8xeHVYRzVjZEhSb2FYTXVkR2x0Wlc5MWRFbEVJRDBnYm5Wc2JEdGNibHgwZEdocGN5NXBiblJsY25aaGJFbEVJRDBnYm5Wc2JEdGNibHgwZEdocGN5NXlaWE53YjI1emFXSnBiR2wwYVdWeklEMGdiblZzYkR0Y2JseDBkR2hwY3k1cGMwTnZiWEJzWlhSbElEMGdabUZzYzJVN1hHNWNkSFJvYVhNdWMyaHZkV3hrU1c1b1pYSnBkRUZpYVd4cGRHbGxjeUE5SUhSeWRXVTdYRzVjZEhSb2FYTXVabkpoYldWSVlXNWtiR1Z5Y3lBOUlHNTFiR3c3WEc1Y2RIUm9hWE11Wm5KaGJXVlNZWFJsSUQwZ05qQTdJQzh2SURZd1puQnpYRzVjZEhSb2FYTXVaSEpoWjJkaFlteGxjeUE5SUc1MWJHdzdYRzVjZEhSb2FYTXVjbVZ4ZFdseVpXUlJkV1YxWlNBOUlHNTFiR3c3WEc1Y2JseDBkR2hwY3k1b1lXNWtiR1ZRY205d1pYSjBlU2htZFc1amRHbHZiaUFvS1NCN1hHNWNkRngwZEdocGN5NXphWHBsSUQwZ1puVnVZM1JwYjI0Z0tGOXViMlJsTENCZmJtRnRaU3dnWDNaaGJIVmxMQ0JmY0hKdmNHVnlkSGtwSUh0Y2JseDBYSFJjZEhaaGNpQnphWHBsTzF4dVhHNWNkRngwWEhScFppQW9kR2hwY3k1cGN5aGZibTlrWlNrcElIdGNibHgwWEhSY2RGeDBjMmw2WlNBOUlGOTJZV3gxWlM1emNHeHBkQ2d2WEZ4ektsdDRMRjFjWEhNcUx5azdYRzVjZEZ4MFhIUmNkSFJvYVhNdVkzTnpLSHRjYmx4MFhIUmNkRngwWEhSM2FXUjBhRG9nYzJsNlpWc3dYU3hjYmx4MFhIUmNkRngwWEhSb1pXbG5hSFE2SUhOcGVtVmJNVjBnZkh3Z2MybDZaVnN3WFZ4dVhIUmNkRngwWEhSOUtUdGNibHgwWEhSY2RIMWNibHgwWEhSOU8xeHVYRzVjZEZ4MGRHaHBjeTV3YjNOcGRHbHZiaUE5SUdaMWJtTjBhVzl1SUNoZmJtOWtaU3dnWDI1aGJXVXNJRjkyWVd4MVpTd2dYM0J5YjNCbGNuUjVLU0I3WEc1Y2RGeDBYSFIyWVhJZ2MybDZaVHRjYmx4dVhIUmNkRngwYVdZZ0tIUm9hWE11YVhNb1gyNXZaR1VwS1NCN1hHNWNkRngwWEhSY2RITnBlbVVnUFNCZmRtRnNkV1V1YzNCc2FYUW9MMXhjY3lwYmVDeGRYRnh6S2k4cE8xeHVYSFJjZEZ4MFhIUjBhR2x6TG1OemN5aDdYRzVjZEZ4MFhIUmNkRngwZEc5d09pQnphWHBsV3pGZElIeDhJSE5wZW1WYk1GMHNYRzVjZEZ4MFhIUmNkRngwYkdWbWREb2djMmw2WlZzd1hWeHVYSFJjZEZ4MFhIUjlLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlPMXh1WEc1Y2RGeDBkR2hwY3k1a2NtRm5aMkZpYkdVZ1BTQm1kVzVqZEdsdmJpQW9YMjV2WkdVc0lGOXVZVzFsTENCZmRtRnNkV1VzSUY5d2NtOXdaWEowZVNrZ2UxeHVYSFJjZEZ4MGFXWWdLQ0YwYUdsekxtaGhjMDkzYmxCeWIzQmxjblI1S0Nka2NtRm5aMkZpYkdWekp5a3BJSHRjYmx4MFhIUmNkRngwZEdocGN5NWtjbUZuWjJGaWJHVnpJRDBnSkNncE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUjBhR2x6TG1SeVlXZG5ZV0pzWlhNdWNIVnphQ2hmYm05a1pTazdYRzVjZEZ4MGZUdGNibHgwZlNrN1hHNWNibHgwZEdocGN5NWZYMmx1YVhRZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc1Y2RGeDBkR2hwY3k1d2NtOTBieWdwWEc1Y2RGeDBZWFIwWVdOb1JISmhaMFYyWlc1MGN5NWpZV3hzS0hSb2FYTXBPMXh1WEhSY2RISmxkSFZ5YmlCMGFHbHpPMXh1WEhSOU8xeHVYRzVjZEhSb2FYTXVjMmw2WlNBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmx4MFhIUjJZWElnYzJsNlpUdGNibHh1WEhSY2RHbG1JQ2hoY21kMWJXVnVkSE11YkdWdVozUm9LU0I3WEc1Y2RGeDBYSFJ6YVhwbElEMGdVMmw2WlM1amNtVmhkR1VvWVhKbmRXMWxiblJ6S1R0Y2JseDBYSFJjZEhSb2FYTXVZM056S0hOcGVtVXBPMXh1WEhSY2RGeDBjbVYwZFhKdUlITnBlbVU3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBjbVYwZFhKdUlGTnBlbVV1WTNKbFlYUmxLQ2t1YzJWMEtIUm9hWE11ZDJsa2RHZ29LU3dnZEdocGN5NW9aV2xuYUhRb0tTazdYRzVjZEgwN1hHNWNibHgwZEdocGN5NXdjbTl3WVdkaGRHVkNaV2hoZG1sdmNpQTlJR1oxYm1OMGFXOXVJQ2hmWlhabGJuUXBJSHRjYmx4MFhIUjJZWElnYVdSek8xeHVYRzVjZEZ4MGFXUnpJRDBnVzEwN1hHNWNibHgwWEhSMGFHbHpMbVpwYm1SUGQyNG9KeTV3YkMxelkyOXdaU2NwTG1WaFkyZ29ablZ1WTNScGIyNGdLRjlwYm1SbGVDd2dYMjV2WkdVcElIdGNibHgwWEhSY2RIWmhjaUFrYm05a1pTQTlJQ1FvWDI1dlpHVXBPeUJjYmx4MFhIUmNkR2xrY3k1d2RYTm9LQ1J1YjJSbExtbGtLQ2tnZkh3Z0pHNXZaR1V1WVdSa2NtVnpjeWdwS1R0Y2JseDBYSFI5S1R0Y2JseHVYSFJjZEdsbUlDaDBhR2x6TG1oaGMwOTNibEJ5YjNCbGNuUjVLQ2RsYm5ScGRHbGxjeWNwSUNZbUlIUm9hWE11Wlc1MGFYUnBaWE11YkdWdVozUm9LU0I3WEc1Y2RGeDBYSFF2THlCamIyNXpiMnhsTG14dlp5aDBhR2x6TG1sa0tDa3NJQ2R3Y205d1lXZGhkR1VuTENCZlpYWmxiblF1Ym1GdFpTd2dKM1J2Snl3Z2RHaHBjeTVsYm5ScGRHbGxjeTVzWlc1bmRHZ3NJQ2R1YjJSbGN5Y3NJR2xrY3lrN1hHNWNibHgwWEhSY2RIUm9hWE11Wlc1MGFYUnBaWE11Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvWDNOamIzQmxLU0I3WEc1Y2RGeDBYSFJjZEdsdWRtOXJaVkpsYzNCdmJuTnBZbWxzYVhScFpYTW9YM05qYjNCbExDQmZaWFpsYm5RcE8xeHVYSFJjZEZ4MFhIUmZjMk52Y0dVdWNISnZjR0ZuWVhSbFFtVm9ZWFpwYjNJb1gyVjJaVzUwS1R0Y2JseDBYSFJjZEgwcE8xeHVYSFJjZEgxY2JseHVYSFJjZEhKbGRIVnliaUIwYUdsek8xeHVYSFI5TzF4dVhHNWNkSFJvYVhNdWNtVnhkV2x5WlNBOUlHWjFibU4wYVc5dUlDaGZaVzUwYVhSNUtTQjdYRzVjZEZ4MGFXWWdLQ0YwYUdsekxtaGhjMDkzYmxCeWIzQmxjblI1S0NkeVpYRjFhWEpsWkZGMVpYVmxKeWtwSUh0Y2JseDBYSFJjZEhSb2FYTXVjbVZ4ZFdseVpXUlJkV1YxWlNBOUlGRjFaWFZsTG1OeVpXRjBaU2dwTzF4dVhIUmNkRngwZEdocGN5NXlaWEYxYVhKbFpGRjFaWFZsTG05dUtDZGpiMjF3YkdWMFpTY3NJSFJvYVhNdVltbHVaQ2htZFc1amRHbHZiaUFvS1NCN1hHNWNkRngwWEhSY2RIUm9hWE11Ykc5bktDZGxiblJwZEhrZ1kyOXRjR3hsZEdVbktUdGNibHgwWEhSY2RGeDBkR2hwY3k1amIyMXdiR1YwWlNncE8xeHVYSFJjZEZ4MGZTa3BPMXh1WEc1Y2RGeDBYSFIwYUdsekxuSmxjM0J2Ym1Rb0oyTnZiWEJzWlhSbEp5d2dablZ1WTNScGIyNGdLRjlsZG1WdWRDa2dlMXh1WEhSY2RGeDBYSFJwWmlBb0lYUm9hWE11YUdGektGOWxkbVZ1ZEM1MFlYSm5aWFFwS1NCeVpYUjFjbTQ3WEc1Y2RGeDBYSFJjZEdsbUlDaGZaWFpsYm5RdWRHRnlaMlYwVTJOdmNHVWdQVDA5SUhSb2FYTXBJSEpsZEhWeWJqdGNibHh1WEhSY2RGeDBYSFIwYUdsekxuSmxjWFZwY21Wa1VYVmxkV1V1Y21WaFpIa29YMlYyWlc1MExtSmxhR0YyYVc5eVZHRnlaMlYwS1R0Y2JseDBYSFJjZEgwcE8xeHVYSFJjZEgxY2JseHVYSFJjZEhSb2FYTXVjbVZ4ZFdseVpXUlJkV1YxWlM1aFpHUW9YMlZ1ZEdsMGVTazdYRzVjZEZ4MGRHaHBjeTVuWVhSbEtDazdYRzVjYmx4MFhIUnlaWFIxY200Z2RHaHBjenRjYmx4MGZUdGNibHh1WEhSMGFHbHpMbUpsYUdGMmFXOXlJRDBnWm5WdVkzUnBiMjRnS0Y5dVlXMWxMQ0JmWW1Wb1lYWnBiM0lwSUh0Y2JseDBYSFJmWW1Wb1lYWnBiM0l1YldWMGFHOWtJRDBnZEdocGMxdGZibUZ0WlYwZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc1Y2RGeDBYSFIyWVhJZ1ltVm9ZWFpwYjNKRmRtVnVkQ3dnY21WemRXeDBPMXh1WEc1Y2RGeDBYSFJpWldoaGRtbHZja1YyWlc1MElEMGdlMXh1WEhSY2RGeDBYSFJ1WVcxbE9pQmZibUZ0WlN4Y2JseDBYSFJjZEZ4MGJXVnpjMkZuWlRvZ0p5Y3NYRzVjZEZ4MFhIUmNkSFJoY21kbGRGTmpiM0JsT2lCMGFHbHpMRnh1WEhSY2RGeDBYSFJpWldoaGRtbHZjbFJoY21kbGREb2dkR2hwYzF4dVhIUmNkRngwZlR0Y2JseHVYSFJjZEZ4MGNtVnpkV3gwSUQwZ1gySmxhR0YyYVc5eUxtRndjR3g1S0hSb2FYTXNJR0Z5WjNWdFpXNTBjeWs3WEc1Y2JseDBYSFJjZEdsbUlDaDBlWEJsYjJZZ2NtVnpkV3gwSUQwOVBTQW5iMkpxWldOMEp5a2dlMXh1WEhSY2RGeDBYSFJpWldoaGRtbHZja1YyWlc1MElEMGdkWFJwYkM1dGFYaHBiaWhpWldoaGRtbHZja1YyWlc1MExDQnlaWE4xYkhRcE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUnBaaUFvY21WemRXeDBJQ0U5UFNCbVlXeHpaU2tnZTF4dVhIUmNkRngwWEhSMGFHbHpMblJ5YVdkblpYSW9KQzVGZG1WdWRDZ25ZbVZvWVhacGIzSW5MQ0JpWldoaGRtbHZja1YyWlc1MEtTazdYSFJjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwY21WMGRYSnVJSFJvYVhNN1hHNWNkRngwZlR0Y2JseHVYSFJjZEhKbGRIVnliaUIwYUdsek8xeHVYSFI5TzF4dVhHNWNkSFJvYVhNdWNtVnpjRzl1WkNBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmx4MFhIUjJZWElnYm1GdFpTd2dZV0pwYkdsMGVTd2djR0Z5Wlc1MFUyTnZjR1VzSUdGaWFXeHBkR2xsY3l3Z2NISnZkRzlCWW1sc2FYUnBaWE03WEc1Y2JseDBYSFJwWmlBb0lYUm9hWE11YUdGelQzZHVVSEp2Y0dWeWRIa29KM0psYzNCdmJuTnBZbWxzYVhScFpYTW5LU2tnZTF4dVhIUmNkRngwWVdKcGJHbDBhV1Z6SUQwZ1EyOXNiR1ZqZEdsdmJpNWpjbVZoZEdVb0tUdGNibHgwWEhSY2RIQnliM1J2UVdKcGJHbDBhV1Z6SUQwZ2RHaHBjeTV3Y205MmFXUmxRV0pzYVd4cGRIbFFiM1J2ZEhsd1pTZ3BPMXh1WEc1Y2RGeDBYSFJwWmlBb2RHaHBjeTV6YUc5MWJHUkpibWhsY21sMFFXSnBiR2wwYVdWeklDWW1JQ2h3Y205MGIwRmlhV3hwZEdsbGN5QW1KaUJ3Y205MGIwRmlhV3hwZEdsbGN5NXlaWE53YjI1emFXSnBiR2wwYVdWektTa2dlMXh1WEhSY2RGeDBYSFJoWW1sc2FYUnBaWE11Y0hWemFDNWhjSEJzZVNoaFltbHNhWFJwWlhNc0lIQnliM1J2UVdKcGJHbDBhV1Z6TG5KbGMzQnZibk5wWW1sc2FYUnBaWE1wTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhSMGFHbHpMbkpsYzNCdmJuTnBZbWxzYVhScFpYTWdQU0JoWW1sc2FYUnBaWE03WEc1Y2RGeDBmVnh1WEc1Y2RGeDBhV1lnS0dGeVozVnRaVzUwY3k1c1pXNW5kR2dnUFQwOUlERXBJSHRjYmx4MFhIUmNkSE4zYVhSamFDQW9kSGx3Wlc5bUlHRnlaM1Z0Wlc1MGMxc3dYU2tnZTF4dVhIUmNkRngwWEhSallYTmxJQ2R6ZEhKcGJtY25PaUJ1WVcxbElEMGdZWEpuZFcxbGJuUnpXekJkT3lCaWNtVmhhenRjYmx4dVhIUmNkRngwWEhSallYTmxJQ2RtZFc1amRHbHZiaWM2WEc1Y2RGeDBYSFJjZEdOaGMyVWdKMjlpYW1WamRDYzZJR0ZpYVd4cGRIa2dQU0JoY21kMWJXVnVkSE5iTUYwN0lHSnlaV0ZyTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4dVhIUmNkR1ZzYzJVZ2UxeHVYSFJjZEZ4MGJtRnRaU0E5SUdGeVozVnRaVzUwYzFzd1hUdGNibHgwWEhSY2RHRmlhV3hwZEhrZ1BTQmhjbWQxYldWdWRITmJNVjA3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBjM2RwZEdOb0lDaDBlWEJsYjJZZ1lXSnBiR2wwZVNrZ2UxeHVYSFJjZEZ4MFkyRnpaU0FuYjJKcVpXTjBKenBjYmx4MFhIUmNkRngwWm05eUlDaHVZVzFsSUdsdUlHRmlhV3hwZEhrcElIdGNibHgwWEhSY2RGeDBYSFJwWmlBb0lXRmlhV3hwZEhrdWFHRnpUM2R1VUhKdmNHVnlkSGtvYm1GdFpTa3BJR052Ym5ScGJuVmxPMXh1WEc1Y2RGeDBYSFJjZEZ4MGRHaHBjeTV5WlhOd2IyNWtLRzVoYldVc0lHRmlhV3hwZEhsYmJtRnRaVjBwTzF4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RHSnlaV0ZyTzF4dVhHNWNkRngwWEhSallYTmxJQ2RtZFc1amRHbHZiaWM2WEc1Y2RGeDBYSFJjZEhSb2FYTXVjbVZ6Y0c5dWMybGlhV3hwZEdsbGN5NWhaR1FvYm1WM0lGSmxjM0J2Ym5OcFltbHNhWFI1VW1WamIzSmtLRzVoYldVc0lHRmlhV3hwZEhrcEtUdGNibHgwWEhSY2RGeDBZbkpsWVdzN1hHNWNkRngwZlZ4dVhHNWNkRngwY21WMGRYSnVJSFJvYVhNN1hHNWNkSDA3WEc1Y2JseDBkR2hwY3k1a1pXeGhlU0E5SUdaMWJtTjBhVzl1SUNoZmRHbHRaU3dnWDJOaUtTQjdYRzVjZEZ4MGRtRnlJSE5qY21WbGJpd2dkR2x0WlR0Y2JseHVYSFJjZEhOamNtVmxiaUE5SUhSb2FYTTdYRzVjZEZ4MGRHbHRaU0E5SUhWMGFXd3VkRzlOYVd4c2FYTmxZeWhmZEdsdFpTazdYRzVjYmx4MFhIUjBhR2x6TG5ScGJXVnZkWFJKUkNBOUlITmxkRlJwYldWdmRYUW9ablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBYSFJmWTJJdVkyRnNiQ2h6WTNKbFpXNHBPMXh1WEhSY2RIMHNJSFJwYldVcE8xeHVYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTTdYRzVjZEgwN1hHNWNibHgwZEdocGN5NXlaWEJsWVhRZ1BTQm1kVzVqZEdsdmJpQW9YM1JwYldVc0lGOWpZaWtnZTF4dVhIUmNkSFpoY2lCelkzSmxaVzRzSUhScGJXVTdYRzVjYmx4MFhIUnpZM0psWlc0Z1BTQjBhR2x6TzF4dVhIUmNkSFJwYldVZ1BTQjFkR2xzTG5SdlRXbHNiR2x6WldNb1gzUnBiV1VwTzF4dVhHNWNkRngwZEdocGN5NXBiblJsY25aaGJFbEVJRDBnYzJWMFNXNTBaWEoyWVd3b1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUmZZMkl1WTJGc2JDaHpZM0psWlc0cE8xeHVYSFJjZEgwc0lIUnBiV1VwTzF4dVhHNWNkRngwY21WMGRYSnVJSFJvYVhNN1hHNWNkSDA3WEc1Y2JseDBkR2hwY3k1bFlXTm9SbkpoYldVZ1BTQm1kVzVqZEdsdmJpQW9YMmhoYm1Sc1pYSXNJRjl2YmlrZ2UxeHVYSFJjZEhaaGNpQmlhVzVrWlhJc0lHWnlZVzFsTENCc1lYTjBWR2x0WlN3Z2NtRjBaU3dnWm5KaGJXVnpPMXh1WEc1Y2RGeDBjbUYwWlNBOUlIUm9hWE11Wm5KaGJXVlNZWFJsSUh4OElERXdNREE3WEc1Y2RGeDBabkpoYldWeklEMGdNRHRjYmx4MFhIUnNZWE4wVkdsdFpTQTlJREE3WEc1Y2JseDBYSFJwWmlBb0lYUm9hWE11YUdGelQzZHVVSEp2Y0dWeWRIa29KMlp5WVcxbFNHRnVaR3hsY25NbktTa2dlMXh1WEhSY2RGeDBabkpoYldVZ1BTQm1kVzVqZEdsdmJpQW9YM1JwYldVcElIdGNibHgwWEhSY2RGeDBkbUZ5SUdrc0lHaGhibVJzWlhJN1hHNWNibHgwWEhSY2RGeDBhV1lnS0hKaGRHVXBJSHRjYmx4MFhIUmNkRngwWEhScFppQW9YM1JwYldVZ0xTQnNZWE4wVkdsdFpTQStQU0FvTVRBd01DOXlZWFJsS1NrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWm05eUlDaHBQVEE3SUdoaGJtUnNaWElnUFNCMGFHbHpMbVp5WVcxbFNHRnVaR3hsY25OYmFWMDdJR2tyUFRFcElIdGNibHgwWEhSY2RGeDBYSFJjZEZ4MGFHRnVaR3hsY2k1allXeHNLSFJvYVhNc0lGOTBhVzFsTENCTllYUm9Mbkp2ZFc1a0tERXdNREF2S0Y5MGFXMWxJQzBnYkdGemRGUnBiV1VwS1N3Z2NtRjBaU2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkRngwWEhSY2RHbG1JQ2htY21GdFpYTWdQVDA5SUhKaGRHVXBJR1p5WVcxbGN5QTlJREE3WEc1Y2JseDBYSFJjZEZ4MFhIUmNkR1p5WVcxbGN5czlNVHRjYmx4MFhIUmNkRngwWEhSY2RHeGhjM1JVYVcxbElEMGdYM1JwYldVN1hHNWNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MGFXWWdLSFJvYVhNdVpuSmhiV1ZJWVc1a2JHVnljeTVzWlc1bmRHZ3BJSHRjYmx4MFhIUmNkRngwWEhSM2FXNWtiM2N1Y21WeGRXVnpkRUZ1YVcxaGRHbHZia1p5WVcxbEtHSnBibVJsY2lrN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMDdYRzVjYmx4MFhIUmNkR0pwYm1SbGNpQTlJSFJvYVhNdVltbHVaQ2htY21GdFpTazdYRzVjYmx4MFhIUmNkQzh2SUdGc2JHOTNjeUJ0WlhSb2IyUnpJSEJoYzNObFpDQmhjeUJmYUdGdVpHeGxjaWR6SUhSdlhHNWNkRngwWEhRdkx5QmlaU0JoWW14bElIUnZJSFJ5WVdObElHSmhZMnNnWm05eUlIQnliM1J2S0NrZ1kyRnNiR0poWTJ0ekxseHVYSFJjZEZ4MFpuSmhiV1V1YldWMGFHOWtJRDBnZEdocGN5NWxZV05vUm5KaGJXVTdYRzVjYmx4MFhIUmNkSFJvYVhNdVpuSmhiV1ZJWVc1a2JHVnljeUE5SUVOdmJHeGxZM1JwYjI0dVkzSmxZWFJsS0NrN1hHNWNkRngwWEhSM2FXNWtiM2N1Y21WeGRXVnpkRUZ1YVcxaGRHbHZia1p5WVcxbEtHSnBibVJsY2lrN1hHNWNkRngwZlZ4dVhHNWNkRngwYVdZZ0tGOXZiaUFoUFQwZ1ptRnNjMlVwSUh0Y2JseDBYSFJjZEhSb2FYTXVabkpoYldWSVlXNWtiR1Z5Y3k1aFpHUW9YMmhoYm1Sc1pYSXBPMXh1WEhSY2RIMWNibHh1WEhSY2RHVnNjMlVnZTF4dVhIUmNkRngwZEdocGN5NW1jbUZ0WlVoaGJtUnNaWEp6TG5KbGJXOTJaU2hmYUdGdVpHeGxjaWs3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBjbVYwZFhKdUlIUm9hWE03WEc1Y2RIMDdYRzVjYmx4MGRHaHBjeTVyYVd4c0lEMGdablZ1WTNScGIyNGdLRjkwYVcxbGNpa2dlMXh1WEhSY2RHbG1JQ2hmZEdsdFpYSWdQVDA5SUNkeVpYQmxZWFFuS1NCN1hHNWNkRngwWEhSamJHVmhja2x1ZEdWeWRtRnNLSFJvYVhNdWFXNTBaWEoyWVd4SlJDazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MFpXeHpaU0I3WEc1Y2RGeDBYSFJqYkdWaGNsUnBiV1Z2ZFhRb2RHaHBjeTUwYVcxbGIzVjBTVVFwTzF4dVhIUmNkSDFjYmx4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TzF4dVhIUjlPMXh1WEc1Y2RIUm9hWE11YzNSaGRHVWdQU0JtZFc1amRHbHZiaUFvWDJac1lXY3NJRjlrWldacGJtbDBhVzl1TENCZmFXMXdLU0I3WEc1Y2RGeDBkbUZ5SUdac1lXY3NJSFJsYzNSbGNpd2djMlYwZEdWeUxDQm5aWFIwWlhJc0lGTlVRVlJGTENCa1pXWXNJRzl3Y0dWeVlYUnBiMjV6TENCdVlXMWxjenRjYmx4dVhIUmNkR2xtSUNnaFgyUmxabWx1YVhScGIyNHBJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQjBhR2x6TG5CeWIzUnZLRjltYkdGbktUdGNibHgwWEhSOVhHNWNibHgwWEhSa1pXWWdQU0JmWkdWbWFXNXBkR2x2Ymk1emNHeHBkQ2d2WEZ4ekt5OHBPMXh1WEhSY2RHNWhiV1Z6SUQwZ1gyWnNZV2N1YzNCc2FYUW9MMXhjY3lzdktUdGNibHgwWEhSdmNIQmxjbUYwYVc5dWN5QTlJRnRkTzF4dVhHNWNkRngwWkdWbUxtWnZja1ZoWTJnb2RHaHBjeTVpYVc1a0tHWjFibU4wYVc5dUlDaGZiM0J3S1NCN1hHNWNkRngwWEhSMllYSWdiV1YwYUc5a0xDQm1iR0ZuTzF4dVhHNWNkRngwWEhSdFpYUm9iMlFnUFNBb1gyOXdjQzV6YkdsalpTZ3dMQ0F4S1NBOVBUMGdKeXNuS1NBL0lDZGhaR1JEYkdGemN5Y2dPaUFuY21WdGIzWmxRMnhoYzNNbk8xeHVYRzVjZEZ4MFhIUnZjSEJsY21GMGFXOXVjeTV3ZFhOb0tIdGNibHgwWEhSY2RGeDBiV1YwYUc5a09pQnRaWFJvYjJRc1hHNWNkRngwWEhSY2RHWnNZV2M2SUY5dmNIQXVjMnhwWTJVb01TbGNibHgwWEhSY2RIMHBPMXh1WEc1Y2RGeDBYSFJwWmlBb2JXVjBhRzlrSUQwOVBTQW5ZV1JrUTJ4aGMzTW5LU0I3WEc1Y2RGeDBYSFJjZEdac1lXY2dQU0JmYjNCd0xuTnNhV05sS0RFcE8xeHVYSFJjZEZ4MFhIUlRWRUZVUlNBOUlIVjBhV3d1ZEhKaGJuTm1iM0p0U1dRb1pteGhaeWs3WEc1Y2RGeDBYSFJjZEhSb2FYTXVVMVJCVkVWYlUxUkJWRVZkSUQwZ1pteGhaenRjYmx4MFhIUmNkSDFjYmx4MFhIUjlLU2s3WEc1Y2JseDBYSFJ6WlhSMFpYSWdQU0J1WVcxbGMxc3dYVHRjYmx4MFhIUjBaWE4wWlhJZ1BTQnVZVzFsYzFzeFhUdGNibHh1WEhSY2RIUm9hWE5iYzJWMGRHVnlYU0E5SUdaMWJtTjBhVzl1SUNoZmRHRnlaMlYwS1NCN1hHNWNkRngwWEhSMllYSWdkR0Z5WjJWMExDQjFhVk4wWVhSbFJYWmxiblFzSUc5d2NITlFaWEptYjNKdFpXUTdYRzVjYmx4MFhIUmNkSFJoY21kbGRDQTlJSEpsYzI5c2RtVlVZWEpuWlhRdVkyRnNiQ2gwYUdsekxDQmZkR0Z5WjJWMEtUdGNibHgwWEhSY2RIVnBVM1JoZEdWRmRtVnVkQ0E5SUNRdVJYWmxiblFvSjNWcExTY3JjMlYwZEdWeUxDQjdYRzVjZEZ4MFhIUmNkSFJoY21kbGREb2dkR0Z5WjJWMExtcHhkV1Z5ZVNBL0lIUmhjbWRsZEZzd1hTQTZJSFJoY21kbGRDeGNibHgwWEhSY2RGeDBkR0Z5WjJWMFUyTnZjR1U2SUhSb2FYTmNibHgwWEhSY2RIMHBPMXh1WEhSY2RGeDBiM0J3YzFCbGNtWnZjbTFsWkNBOUlEQTdYRzVjYmx4MFhIUmNkR2xtSUNoZmFXMXdJQ1ltSUY5cGJYQXVjMmh2ZFd4a1UyVjBJQ1ltSUY5cGJYQXVjMmh2ZFd4a1UyVjBMbUZ3Y0d4NUtIUm9hWE1zSUdGeVozVnRaVzUwY3lrZ1BUMDlJR1poYkhObEtTQjdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQWhJU2hmYVcxd0lDWW1JRjlwYlhBdWJtOTBVMlYwS1NBbUppQmZhVzF3TG01dmRGTmxkQzVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhNcE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUnBaaUFvWDJsdGNDQW1KaUJmYVcxd0xuZHBiR3hUWlhRcElGOXBiWEF1ZDJsc2JGTmxkQzVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhNcE8xeHVYRzVjZEZ4MFhIUnZjSEJsY21GMGFXOXVjeTVtYjNKRllXTm9LR1oxYm1OMGFXOXVJQ2hmY21WamIzSmtLU0I3WEc1Y2RGeDBYSFJjZEM4dklFbG1JSGRsSUdGeVpTQmhaR1JwYm1jZ2IzSWdjbVZ0YjNacGJtY2dZU0JqYkdGemN5d2dkR1Z6ZENCcFppQjBhR1VnZEdGeVoyVjBJR0ZzY21WaFpIa2dhR0Z6TDNKbGJXOTJaV1FnYVhRdVhHNWNkRngwWEhSY2RDOHZJRWxtSUhOdkxDQjBhR1Z1SUdKMWJYQWdYQ0p2Y0hCelVHVnlabTl5YldWa1hDSXVYRzVjZEZ4MFhIUmNkRzl3Y0hOUVpYSm1iM0p0WldRZ0t6MGdUblZ0WW1WeUtIUmhjbWRsZEM1b1lYTkRiR0Z6Y3loZmNtVmpiM0prTG1ac1lXY3BJRDA5UFNBaGZsOXlaV052Y21RdWJXVjBhRzlrTG1sdVpHVjRUMllvSjJGa1pDY3BLVHRjYmx4MFhIUmNkRngwZEdGeVoyVjBXMTl5WldOdmNtUXViV1YwYUc5a1hTaGZjbVZqYjNKa0xtWnNZV2NwTzF4dVhIUmNkRngwZlNrN1hHNWNibHgwWEhSY2RHbG1JQ2hmYVcxd0lDWW1JRjlwYlhBdVpHbGtVMlYwS1NCZmFXMXdMbVJwWkZObGRDNWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wTzF4dVhHNWNibHgwWEhSY2RHbG1JQ2h2Y0hCelVHVnlabTl5YldWa0tTQjdYRzVjZEZ4MFhIUmNkSFJvYVhNdWRISnBaMmRsY2loMWFWTjBZWFJsUlhabGJuUXBPMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdkR0Z5WjJWME8xeHVYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhHNWNkRngwWEhSeVpYUjFjbTRnWm1Gc2MyVTdYRzVjZEZ4MGZUdGNibHh1WEhSY2RHbG1JQ2gwWlhOMFpYSXBJSHRjYmx4MFhIUmNkR2RsZEhSbGNpQTlJQ2RuWlhRbklDc2dkR1Z6ZEdWeUxuTnNhV05sS0RBc0lERXBMblJ2VlhCd1pYSkRZWE5sS0NrZ0t5QjBaWE4wWlhJdWMyeHBZMlVvTVNrN1hHNWNibHgwWEhSY2RIUm9hWE5iZEdWemRHVnlYU0E5SUdaMWJtTjBhVzl1SUNoZmRHRnlaMlYwS1NCN1hHNWNkRngwWEhSY2RIWmhjaUIwWVhKblpYUTdYRzVjYmx4MFhIUmNkRngwZEdGeVoyVjBJRDBnY21WemIyeDJaVlJoY21kbGRDNWpZV3hzS0hSb2FYTXNJRjkwWVhKblpYUXBPMXh1WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUIwWVhKblpYUXVhR0Z6UTJ4aGMzTW9kR2hwY3k1VFZFRlVSVnRUVkVGVVJWMHBPMXh1WEhSY2RGeDBmVHRjYmx4dVhIUmNkRngwZEdocGMxdG5aWFIwWlhKZElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dVhIUmNkRngwWEhSeVpYUjFjbTRnZEdocGN5NW1hVzVrVDNkdUtDY3VKeXQwYUdsekxsTlVRVlJGVzFOVVFWUkZYU2s3WEc1Y2RGeDBYSFI5TzF4dVhIUmNkSDFjYmx4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TzF4dVhIUjlPMXh1WEc1Y2RIUm9hWE11Y0hKdmRtbGtaVUpsYUdGMmFXOXlSWFpsYm5SVFkyOXdaU0E5SUdaMWJtTjBhVzl1SUNncElIdGNibHgwWEhSeVpYUjFjbTRnZEdocGN6dGNibHgwZlR0Y2JseHVYSFIwYUdsekxuQnliM1pwWkdWQllteHBiR2wwZVZCdmRHOTBlWEJsSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1WEhSY2RIWmhjaUJ2ZDI1bGNqdGNibHh1WEhSY2RHOTNibVZ5SUQwZ2RYUnBiQzVuWlhSUGQyNWxjaWgwYUdsekxDQjBhR2x6TG1KaGMyVlVlWEJsS1R0Y2JseHVYSFJjZEhKbGRIVnliaUFoSVc5M2JtVnlJQ1ltSUc5M2JtVnlMbTlpYW1WamREdGNibHgwZlR0Y2JseHVYSFIwYUdsekxtTnZiWEJzWlhSbFpDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseDBYSFJ5WlhSMWNtNGdkR2hwY3k1bllXMWxMbVJsYlc5TmIyUmxJSHg4SUNoMGFHbHpMbWhoYzA5M2JsQnliM0JsY25SNUtDZHBjME52YlhCc1pYUmxKeWtnSmlZZ2RHaHBjeTVwYzBOdmJYQnNaWFJsS1NCOGZDQWhkR2hwY3k1eVpYRjFhWEpsWkZGMVpYVmxJSHg4SUhSb2FYTXVjbVZ4ZFdseVpXUlJkV1YxWlM1c1pXNW5kR2dnUFQwOUlEQTdYRzVjZEgwN1hHNWNibHgwTHlvcVhHNWNkQ0FxSUR4emNHRnVJR05zWVhOelBWd2lkR0ZuSUdKbGFHRjJhVzl5WENJK1FtVm9ZWFpwYjNJOEwzTndZVzQrWEc1Y2RDQXFJRTFoY210eklHRWdjMk52Y0dVZ1hDSmpiMjF3YkdWMFpWd2lJR0o1SUhObGRHbHVaeUJnYVhORGIyMXdiR1YwWldBZ2RHOGdZSFJ5ZFdWZ0lHRnVaQ0JoWkdRZ2RHaGxJR0JEVDAxUVRFVlVSV0FnYzNSaGRHVWdabXhoWnk1Y2JseDBJQ29nUUdaMWJtTjBhVzl1SUcxdlpIVnNaVHAwZVhCbGN5OUZiblJwZEhsK1JXNTBhWFI1STJOdmJYQnNaWFJsWEc1Y2RDQXFJRUJ5WlhSMWNtNXpJSHR2WW1wbFkzUjlJRUVnYldWemMyRm5aWE1nYjJKcVpXTjBJSGRwZEdnZ1lHSmxhR0YyYVc5eVZHRnlaMlYwWUNCelpYUWdkRzhnZEdobElITmpiM0JsSUhCbGNtWnZjbTFwYm1jZ2RHaGxJR0psYUdGMmFXOXlMbHh1WEhRZ0tpOWNibHgwZEdocGN5NWlaV2hoZG1sdmNpZ25ZMjl0Y0d4bGRHVW5MQ0JtZFc1amRHbHZiaUFvS1NCN1hHNWNkRngwYVdZZ0tIUm9hWE11YUdGelQzZHVVSEp2Y0dWeWRIa29KMmx6UTI5dGNHeGxkR1VuS1NBbUppQjBhR2x6TG1selEyOXRjR3hsZEdVcElISmxkSFZ5YmlCbVlXeHpaVHRjYmx4dVhIUmNkSFJvYVhNdWFYTkRiMjF3YkdWMFpTQTlJSFJ5ZFdVN1hHNWNkRngwZEdocGN5NWhaR1JEYkdGemN5Z25RMDlOVUV4RlZFVW5LVHRjYmx4dVhIUmNkSEpsZEhWeWJpQjdYRzVjZEZ4MFhIUmlaV2hoZG1sdmNsUmhjbWRsZERvZ2RHaHBjMXh1WEhSY2RIMDdYRzVjZEgwcE8xeHVYRzVjZEM4cUtseHVYSFFnS2lBOGMzQmhiaUJqYkdGemN6MWNJblJoWnlCaVpXaGhkbWx2Y2x3aVBrSmxhR0YyYVc5eVBDOXpjR0Z1UGx4dVhIUWdLaUJTWlhCdmNuUnpJR0VnWkhKbloyRmliR1VnYUdGeklHSmxaVzRnWjNKaFltSmxaQ0JtYjNJZ1pISmhaMmRwYm1jdVhHNWNkQ0FxSUVCbWRXNWpkR2x2YmlCdGIyUjFiR1U2ZEhsd1pYTXZSVzUwYVhSNWZrVnVkR2wwZVNObmNtRmlYRzVjZENBcUlFQmhjbWNnZTI5aWFtVmpkSDBnWDNOMFlYUmxJQzBnUVc0Z2IySnFaV04wSUdOdmJuUmhhVzVwYm1jZ2RHaGxJSE4wWVhSbElHOW1JR0VnWkhKaFoyZGhZbXhsTGx4dVhIUWdLaUJBY21WMGRYSnVjeUI3YjJKcVpXTjBmU0JCSUcxbGMzTmhaMlZ6SUc5aWFtVmpkQ0IzYVhSb0lHQmlaV2hoZG1sdmNsUmhjbWRsZEdBZ2MyVjBJSFJ2SUhSb1pTQnpZMjl3WlNCd1pYSm1iM0p0YVc1bklIUm9aU0JpWldoaGRtbHZjaTVjYmx4MElDcGNibHgwSUNvZ1FITmxaU0J0YjJSMWJHVTZjR3hoZVg1d2JDNW5ZVzFsTG0xaGJtRm5aWEl1WkhKaFoyZGhZbXhsSUdadmNpQnRiM0psSUdsdVptOGdiMjRnWkhKaFoyZGhZbXhsSUhOMFlYUmxMbHh1WEhRZ0tpOWNibHgwZEdocGN5NWlaV2hoZG1sdmNpZ25aM0poWWljc0lHWjFibU4wYVc5dUlDaGZjM1JoZEdVcElIdGNibHgwWEhSeVpYUjFjbTRnZTF4dVhIUmNkRngwYzNSaGRHVTZJRjl6ZEdGMFpTeGNibHgwWEhSY2RHSmxhR0YyYVc5eVZHRnlaMlYwT2lCZmMzUmhkR1V1SkdSeVlXZG5ZV0pzWlZ4dVhIUmNkSDA3WEc1Y2RIMHBPMXh1WEc1Y2RDOHFLbHh1WEhRZ0tpQThjM0JoYmlCamJHRnpjejFjSW5SaFp5QmlaV2hoZG1sdmNsd2lQa0psYUdGMmFXOXlQQzl6Y0dGdVBseHVYSFFnS2lCU1pYQnZjblJ6SUdFZ1pISmhaMmRoWW14bElHRnpJR0psYVc1bklHUnlZV2RuWldRdVhHNWNkQ0FxSUVCbWRXNWpkR2x2YmlCdGIyUjFiR1U2ZEhsd1pYTXZSVzUwYVhSNWZrVnVkR2wwZVNOa2NtRm5aMmx1WjF4dVhIUWdLaUJBWVhKbklIdHZZbXBsWTNSOUlGOXpkR0YwWlNBdElFRnVJRzlpYW1WamRDQmpiMjUwWVdsdWFXNW5JSFJvWlNCemRHRjBaU0J2WmlCaElHUnlZV2RuWVdKc1pTNWNibHgwSUNvZ1FISmxkSFZ5Ym5NZ2UyOWlhbVZqZEgwZ1FTQnRaWE56WVdkbGN5QnZZbXBsWTNRZ2QybDBhQ0JnWW1Wb1lYWnBiM0pVWVhKblpYUmdJSE5sZENCMGJ5QjBhR1VnYzJOdmNHVWdjR1Z5Wm05eWJXbHVaeUIwYUdVZ1ltVm9ZWFpwYjNJdVhHNWNkQ0FxWEc1Y2RDQXFJRUJ6WldVZ2JXOWtkV3hsT25Cc1lYbCtjR3d1WjJGdFpTNXRZVzVoWjJWeUxtUnlZV2RuWVdKc1pTQm1iM0lnYlc5eVpTQnBibVp2SUc5dUlHUnlZV2RuWVdKc1pTQnpkR0YwWlM1Y2JseDBJQ292WEc1Y2RIUm9hWE11WW1Wb1lYWnBiM0lvSjJSeVlXZG5hVzVuSnl3Z1puVnVZM1JwYjI0Z0tGOXpkR0YwWlNrZ2UxeHVYSFJjZEhKbGRIVnliaUI3WEc1Y2RGeDBYSFJ6ZEdGMFpUb2dYM04wWVhSbExGeHVYSFJjZEZ4MFltVm9ZWFpwYjNKVVlYSm5aWFE2SUY5emRHRjBaUzRrWkhKaFoyZGhZbXhsWEc1Y2RGeDBmVHRjYmx4MGZTazdYRzVjYmx4MEx5b3FYRzVjZENBcUlEeHpjR0Z1SUdOc1lYTnpQVndpZEdGbklHSmxhR0YyYVc5eVhDSStRbVZvWVhacGIzSThMM053WVc0K1hHNWNkQ0FxSUZKbGNHOXlkSE1nWVNCa2NtZG5ZV0pzWlNCaGN5QnlaV3hsWVhObFpDQnZjaUJrY205d1pXUXVYRzVjZENBcUlFQm1kVzVqZEdsdmJpQnRiMlIxYkdVNmRIbHdaWE12Ulc1MGFYUjVma1Z1ZEdsMGVTTnlaV3hsWVhObFhHNWNkQ0FxSUVCaGNtY2dlMjlpYW1WamRIMGdYM04wWVhSbElDMGdRVzRnYjJKcVpXTjBJR052Ym5SaGFXNXBibWNnZEdobElITjBZWFJsSUc5bUlHRWdaSEpoWjJkaFlteGxMbHh1WEhRZ0tpQkFjbVYwZFhKdWN5QjdiMkpxWldOMGZTQkJJRzFsYzNOaFoyVnpJRzlpYW1WamRDQjNhWFJvSUdCaVpXaGhkbWx2Y2xSaGNtZGxkR0FnYzJWMElIUnZJSFJvWlNCelkyOXdaU0J3WlhKbWIzSnRhVzVuSUhSb1pTQmlaV2hoZG1sdmNpNWNibHgwSUNwY2JseDBJQ29nUUhObFpTQnRiMlIxYkdVNmNHeGhlWDV3YkM1bllXMWxMbTFoYm1GblpYSXVaSEpoWjJkaFlteGxJR1p2Y2lCdGIzSmxJR2x1Wm04Z2IyNGdaSEpoWjJkaFlteGxJSE4wWVhSbExseHVYSFFnS2k5Y2JseDBkR2hwY3k1aVpXaGhkbWx2Y2lnbmNtVnNaV0Z6WlNjc0lHWjFibU4wYVc5dUlDaGZjM1JoZEdVcElIdGNibHgwWEhSeVpYUjFjbTRnZTF4dVhIUmNkRngwYzNSaGRHVTZJRjl6ZEdGMFpTeGNibHgwWEhSY2RHSmxhR0YyYVc5eVZHRnlaMlYwT2lCZmMzUmhkR1V1SkdSeVlXZG5ZV0pzWlZ4dVhIUmNkSDA3WEc1Y2RIMHBPMXh1WEc1Y2RDOHFLbHh1WEhRZ0tpQThjM0JoYmlCamJHRnpjejFjSW5SaFp5QnpkR0YwWlZ3aVBsTjBZWFJsUEM5emNHRnVQbHh1WEhRZ0tpQkJaR1J6SUdCUFVFVk9ZQ0JoYm1RZ2NtVnRiM1psY3lCMGFHVWdZRXhGUVZaRllDQkRVMU1nWTJ4aGMzTWdibUZ0WlhNZ1puSnZiU0IwYUdVZ2MyTnZjR1VnYjNJZ2RHaGxJR2RwZG1WdUlHQmZkR0Z5WjJWMFlDNWNibHgwSUNvZ1FHWjFibU4wYVc5dUlHMXZaSFZzWlRwMGVYQmxjeTlGYm5ScGRIbCtSVzUwYVhSNUkyOXdaVzVjYmx4MElDb2dRR1pwY21WeklFVnVkR2wwZVNOMWFTMXZjR1Z1WEc1Y2RDQXFJRUJoY21jZ2UzTjBjbWx1WjN4VFkyOXdaWHhxVVhWbGNubDhTRlJOVEVWc1pXMWxiblI5SUY5MFlYSm5aWFFnTFNCQklFTlRVeUJ6Wld4bFkzUnZjaXdnUkU5TklHNXZaR1VnY21WbVpYSmxibU5sSUc5eUlHTnZiblJsZUhRZ2IySnFaV04wSUNocExtVXVJRk5qYjNCbEwycFJkV1Z5ZVNrdVhHNWNkQ0FxSUVCeVpYUjFjbTV6SUdCMGFHbHpZRnh1WEhRZ0tpOWNibHh1WEhRdktpcGNibHgwSUNvZ1BITndZVzRnWTJ4aGMzTTlYQ0owWVdjZ2MzUmhkR1ZjSWo1VGRHRjBaVHd2YzNCaGJqNWNibHgwSUNvZ1ZHVnpkSE1nYVdZZ2RHaGxJSE5qYjNCbElHOXlJR2RwZG1WdUlHQmZkR0Z5WjJWMFlDQm9ZWE1nZEdobElHQlBVRVZPWUNCamJHRnpjeUJ1WVcxbExseHVYSFFnS2lCQVpuVnVZM1JwYjI0Z2JXOWtkV3hsT25SNWNHVnpMMFZ1ZEdsMGVYNUZiblJwZEhramIzQmxibVZrWEc1Y2RDQXFJRUJoY21jZ2UzTjBjbWx1WjN4VFkyOXdaWHhxVVhWbGNubDhTRlJOVEVWc1pXMWxiblI5SUY5MFlYSm5aWFFnTFNCQklFTlRVeUJ6Wld4bFkzUnZjaXdnUkU5TklHNXZaR1VnY21WbVpYSmxibU5sSUc5eUlHTnZiblJsZUhRZ2IySnFaV04wSUNocExtVXVJRk5qYjNCbEwycFJkV1Z5ZVNrdVhHNWNkQ0FxSUVCeVpYUjFjbTV6SUh0Q2IyOXNaV0Z1ZlNCUGNHVnVKMjVsYzNNdVhHNWNkQ0FxTDF4dVhHNWNkQzhxS2x4dVhIUWdLaUE4YzNCaGJpQmpiR0Z6Y3oxY0luUmhaeUJ6ZEdGMFpWd2lQbE4wWVhSbFBDOXpjR0Z1UGx4dVhIUWdLaUJRY205MmFXUmxjeUIwYUdVZ1pXeGxiV1Z1ZEhNZ2QybDBhQ0IwYUdVZ1lFOVFSVTVnSUdOc1lYTnpJRzVoYldVdVhHNWNkQ0FxSUVCbWRXNWpkR2x2YmlCdGIyUjFiR1U2ZEhsd1pYTXZSVzUwYVhSNWZrVnVkR2wwZVNOblpYUlBjR1Z1WldSY2JseDBJQ29nUUhKbGRIVnlibk1nZTJwUmRXVnllWDBnYWxGMVpYSjVJR052Ykd4bFkzUnBiMjRnYjJZZ2JXRjBZMmhsWkNCdWIyUmxjeTVjYmx4MElDb2dRSFJ2Wkc4Z1VtVjBkWEp1SUhOamIzQmxJR2xtSUdGMllXbHNZV0pzWlM1Y2JseDBJQ292WEc1Y2RIUm9hWE11YzNSaGRHVW9KMjl3Wlc0Z2IzQmxibVZrSnl3Z0p5dFBVRVZPSUMxTVJVRldSU2NwTzF4dVhHNWNkQzhxS2x4dVhIUWdLaUE4YzNCaGJpQmpiR0Z6Y3oxY0luUmhaeUJ6ZEdGMFpWd2lQbE4wWVhSbFBDOXpjR0Z1UGx4dVhIUWdLaUJTWlcxdmRtVnpJSFJvWlNCZ1QxQkZUbUFnUTFOVElHTnNZWE56SUc1aGJXVWdabkp2YlNCMGFHVWdjMk52Y0dVZ2IzSWdkR2hsSUdkcGRtVnVJR0JmZEdGeVoyVjBZQzVjYmx4MElDb2dRR1oxYm1OMGFXOXVJRzF2WkhWc1pUcDBlWEJsY3k5RmJuUnBkSGwrUlc1MGFYUjVJMk5zYjNObFhHNWNkQ0FxSUVCbWFYSmxjeUJGYm5ScGRIa2pkV2t0WTJ4dmMyVmNibHgwSUNvZ1FHRnlaeUI3YzNSeWFXNW5mRk5qYjNCbGZHcFJkV1Z5ZVh4SVZFMU1SV3hsYldWdWRIMGdYM1JoY21kbGRDQXRJRUVnUTFOVElITmxiR1ZqZEc5eUxDQkVUMDBnYm05a1pTQnlaV1psY21WdVkyVWdiM0lnWTI5dWRHVjRkQ0J2WW1wbFkzUWdLR2t1WlM0Z1UyTnZjR1V2YWxGMVpYSjVLUzVjYmx4MElDb2dRSEpsZEhWeWJuTWdZSFJvYVhOZ1hHNWNkQ0FxTDF4dVhIUjBhR2x6TG5OMFlYUmxLQ2RqYkc5elpTY3NJQ2N0VDFCRlRpY3BPMXh1WEc1Y2RDOHFLbHh1WEhRZ0tpQThjM0JoYmlCamJHRnpjejFjSW5SaFp5QnpkR0YwWlZ3aVBsTjBZWFJsUEM5emNHRnVQbHh1WEhRZ0tpQkJaR1J6SUhSb1pTQmdURVZCVmtWZ0lFTlRVeUJqYkdGemN5QnVZVzFsSUhSdklIUm9aU0J6WTI5d1pTQnZjaUIwYUdVZ1oybDJaVzRnWUY5MFlYSm5aWFJnTGx4dVhIUWdLaUJBWm5WdVkzUnBiMjRnYlc5a2RXeGxPblI1Y0dWekwwVnVkR2wwZVg1RmJuUnBkSGtqYkdWaGRtVmNibHgwSUNvZ1FHWnBjbVZ6SUVWdWRHbDBlU04xYVMxc1pXRjJaVnh1WEhRZ0tpQkFZWEpuSUh0emRISnBibWQ4VTJOdmNHVjhhbEYxWlhKNWZFaFVUVXhGYkdWdFpXNTBmU0JmZEdGeVoyVjBJQzBnUVNCRFUxTWdjMlZzWldOMGIzSXNJRVJQVFNCdWIyUmxJSEpsWm1WeVpXNWpaU0J2Y2lCamIyNTBaWGgwSUc5aWFtVmpkQ0FvYVM1bExpQlRZMjl3WlM5cVVYVmxjbmtwTGx4dVhIUWdLaUJBY21WMGRYSnVjeUJnZEdocGMyQmNibHgwSUNvdlhHNWNibHgwTHlvcVhHNWNkQ0FxSUR4emNHRnVJR05zWVhOelBWd2lkR0ZuSUhOMFlYUmxYQ0krVTNSaGRHVThMM053WVc0K1hHNWNkQ0FxSUZSbGMzUnpJR2xtSUhSb1pTQnpZMjl3WlNCdmNpQm5hWFpsYmlCZ1gzUmhjbWRsZEdBZ2FHRnpJSFJvWlNCZ1RFVkJWa1ZnSUdOc1lYTnpJRzVoYldVdVhHNWNkQ0FxSUVCbWRXNWpkR2x2YmlCdGIyUjFiR1U2ZEhsd1pYTXZSVzUwYVhSNWZrVnVkR2wwZVNOc1pXWjBYRzVjZENBcUlFQmhjbWNnZTNOMGNtbHVaM3hUWTI5d1pYeHFVWFZsY25sOFNGUk5URVZzWlcxbGJuUjlJRjkwWVhKblpYUWdMU0JCSUVOVFV5QnpaV3hsWTNSdmNpd2dSRTlOSUc1dlpHVWdjbVZtWlhKbGJtTmxJRzl5SUdOdmJuUmxlSFFnYjJKcVpXTjBJQ2hwTG1VdUlGTmpiM0JsTDJwUmRXVnllU2t1WEc1Y2RDQXFJRUJ5WlhSMWNtNXpJSHRDYjI5c1pXRnVmU0JNWldGMlpTZHVaWE56TGx4dVhIUWdLaTljYmx4dVhIUXZLaXBjYmx4MElDb2dQSE53WVc0Z1kyeGhjM005WENKMFlXY2djM1JoZEdWY0lqNVRkR0YwWlR3dmMzQmhiajVjYmx4MElDb2dVSEp2ZG1sa1pYTWdkR2hsSUdWc1pXMWxiblJ6SUhkcGRHZ2dkR2hsSUdCTVJVRldSV0FnWTJ4aGMzTWdibUZ0WlM1Y2JseDBJQ29nUUdaMWJtTjBhVzl1SUcxdlpIVnNaVHAwZVhCbGN5OUZiblJwZEhsK1JXNTBhWFI1STJkbGRFeGxablJjYmx4MElDb2dRSEpsZEhWeWJuTWdlMnBSZFdWeWVYMGdhbEYxWlhKNUlHTnZiR3hsWTNScGIyNGdiMllnYldGMFkyaGxaQ0J1YjJSbGN5NWNibHgwSUNvZ1FIUnZaRzhnVW1WMGRYSnVJSE5qYjNCbElHbG1JR0YyWVdsc1lXSnNaUzVjYmx4MElDb3ZYRzVjZEhSb2FYTXVjM1JoZEdVb0oyeGxZWFpsSUd4bFpuUW5MQ0FuSzB4RlFWWkZKeXdnZTF4dVhIUmNkSGRwYkd4VFpYUTZJR1oxYm1OMGFXOXVJQ2hmZEdGeVoyVjBLU0I3WEc1Y2RGeDBYSFIwYUdsekxtTnNiM05sS0Y5MFlYSm5aWFFwTzF4dVhIUmNkSDFjYmx4MGZTazdYRzVjYmx4MEx5b3FYRzVjZENBcUlEeHpjR0Z1SUdOc1lYTnpQVndpZEdGbklITjBZWFJsWENJK1UzUmhkR1U4TDNOd1lXNCtYRzVjZENBcUlFRmtaSE1nWUVWT1FVSk1SVVJnSUdGdVpDQnlaVzF2ZG1WeklIUm9aU0JnUkVsVFFVSk1SVVJnSUVOVFV5QmpiR0Z6Y3lCdVlXMWxjeUJtY205dElIUm9aU0J6WTI5d1pTQnZjaUIwYUdVZ1oybDJaVzRnWUY5MFlYSm5aWFJnTGx4dVhIUWdLaUJBWm5WdVkzUnBiMjRnYlc5a2RXeGxPblI1Y0dWekwwVnVkR2wwZVg1RmJuUnBkSGtqWlc1aFlteGxYRzVjZENBcUlFQm1hWEpsY3lCRmJuUnBkSGtqZFdrdFpXNWhZbXhsWEc1Y2RDQXFJRUJoY21jZ2UzTjBjbWx1WjN4VFkyOXdaWHhxVVhWbGNubDhTRlJOVEVWc1pXMWxiblI5SUY5MFlYSm5aWFFnTFNCQklFTlRVeUJ6Wld4bFkzUnZjaXdnUkU5TklHNXZaR1VnY21WbVpYSmxibU5sSUc5eUlHTnZiblJsZUhRZ2IySnFaV04wSUNocExtVXVJRk5qYjNCbEwycFJkV1Z5ZVNrdVhHNWNkQ0FxSUVCeVpYUjFjbTV6SUdCMGFHbHpZRnh1WEhRZ0tpOWNibHh1WEhRdktpcGNibHgwSUNvZ1BITndZVzRnWTJ4aGMzTTlYQ0owWVdjZ2MzUmhkR1ZjSWo1VGRHRjBaVHd2YzNCaGJqNWNibHgwSUNvZ1ZHVnpkSE1nYVdZZ2RHaGxJSE5qYjNCbElHOXlJR2RwZG1WdUlHQmZkR0Z5WjJWMFlDQm9ZWE1nZEdobElHQkZUa0ZDVEVWRVlDQmpiR0Z6Y3lCdVlXMWxMbHh1WEhRZ0tpQkFablZ1WTNScGIyNGdiVzlrZFd4bE9uUjVjR1Z6TDBWdWRHbDBlWDVGYm5ScGRIa2paVzVoWW14bFpGeHVYSFFnS2lCQVlYSm5JSHR6ZEhKcGJtZDhVMk52Y0dWOGFsRjFaWEo1ZkVoVVRVeEZiR1Z0Wlc1MGZTQmZkR0Z5WjJWMElDMGdRU0JEVTFNZ2MyVnNaV04wYjNJc0lFUlBUU0J1YjJSbElISmxabVZ5Wlc1alpTQnZjaUJqYjI1MFpYaDBJRzlpYW1WamRDQW9hUzVsTGlCVFkyOXdaUzlxVVhWbGNua3BMbHh1WEhRZ0tpQkFjbVYwZFhKdWN5QjdRbTl2YkdWaGJuMGdSVzVoWW14bFpDZHVaWE56TGx4dVhIUWdLaTljYmx4dVhIUXZLaXBjYmx4MElDb2dQSE53WVc0Z1kyeGhjM005WENKMFlXY2djM1JoZEdWY0lqNVRkR0YwWlR3dmMzQmhiajVjYmx4MElDb2dVSEp2ZG1sa1pYTWdkR2hsSUdWc1pXMWxiblJ6SUhkcGRHZ2dkR2hsSUdCRlRrRkNURVZFWUNCamJHRnpjeUJ1WVcxbExseHVYSFFnS2lCQVpuVnVZM1JwYjI0Z2JXOWtkV3hsT25SNWNHVnpMMFZ1ZEdsMGVYNUZiblJwZEhraloyVjBSVzVoWW14bFpGeHVYSFFnS2lCQWNtVjBkWEp1Y3lCN2FsRjFaWEo1ZlNCcVVYVmxjbmtnWTI5c2JHVmpkR2x2YmlCdlppQnRZWFJqYUdWa0lHNXZaR1Z6TGx4dVhIUWdLaUJBZEc5a2J5QlNaWFIxY200Z2MyTnZjR1VnYVdZZ1lYWmhhV3hoWW14bExseHVYSFFnS2k5Y2JseDBkR2hwY3k1emRHRjBaU2duWlc1aFlteGxJR1Z1WVdKc1pXUW5MQ0FuSzBWT1FVSk1SVVFnTFVSSlUwRkNURVZFSnlrN1hHNWNibHgwTHlvcVhHNWNkQ0FxSUR4emNHRnVJR05zWVhOelBWd2lkR0ZuSUhOMFlYUmxYQ0krVTNSaGRHVThMM053WVc0K1hHNWNkQ0FxSUVGa1pITWdZRVJKVTBGQ1RFVkVZQ0JoYm1RZ2NtVnRiM1psY3lCMGFHVWdZRVZPUVVKTVJVUmdJRU5UVXlCamJHRnpjeUJ1WVcxbGN5Qm1jbTl0SUhSb1pTQnpZMjl3WlNCdmNpQjBhR1VnWjJsMlpXNGdZRjkwWVhKblpYUmdMbHh1WEhRZ0tpQkFablZ1WTNScGIyNGdiVzlrZFd4bE9uUjVjR1Z6TDBWdWRHbDBlWDVGYm5ScGRIa2paR2x6WVdKc1pWeHVYSFFnS2lCQVptbHlaWE1nUlc1MGFYUjVJM1ZwTFdScGMyRmliR1ZjYmx4MElDb2dRR0Z5WnlCN2MzUnlhVzVuZkZOamIzQmxmR3BSZFdWeWVYeElWRTFNUld4bGJXVnVkSDBnWDNSaGNtZGxkQ0F0SUVFZ1ExTlRJSE5sYkdWamRHOXlMQ0JFVDAwZ2JtOWtaU0J5WldabGNtVnVZMlVnYjNJZ1kyOXVkR1Y0ZENCdlltcGxZM1FnS0drdVpTNGdVMk52Y0dVdmFsRjFaWEo1S1M1Y2JseDBJQ29nUUhKbGRIVnlibk1nWUhSb2FYTmdYRzVjZENBcUwxeHVYRzVjZEM4cUtseHVYSFFnS2lBOGMzQmhiaUJqYkdGemN6MWNJblJoWnlCemRHRjBaVndpUGxOMFlYUmxQQzl6Y0dGdVBseHVYSFFnS2lCVVpYTjBjeUJwWmlCMGFHVWdjMk52Y0dVZ2IzSWdaMmwyWlc0Z1lGOTBZWEpuWlhSZ0lHaGhjeUIwYUdVZ1lFUkpVMEZDVEVWRVlDQmpiR0Z6Y3lCdVlXMWxMbHh1WEhRZ0tpQkFablZ1WTNScGIyNGdiVzlrZFd4bE9uUjVjR1Z6TDBWdWRHbDBlWDVGYm5ScGRIa2paR2x6WVdKc1pXUmNibHgwSUNvZ1FHRnlaeUI3YzNSeWFXNW5mRk5qYjNCbGZHcFJkV1Z5ZVh4SVZFMU1SV3hsYldWdWRIMGdYM1JoY21kbGRDQXRJRUVnUTFOVElITmxiR1ZqZEc5eUxDQkVUMDBnYm05a1pTQnlaV1psY21WdVkyVWdiM0lnWTI5dWRHVjRkQ0J2WW1wbFkzUWdLR2t1WlM0Z1UyTnZjR1V2YWxGMVpYSjVLUzVjYmx4MElDb2dRSEpsZEhWeWJuTWdlMEp2YjJ4bFlXNTlJRVJwYzJGaWJHVmtKMjVsYzNNdVhHNWNkQ0FxTDF4dVhHNWNkQzhxS2x4dVhIUWdLaUE4YzNCaGJpQmpiR0Z6Y3oxY0luUmhaeUJ6ZEdGMFpWd2lQbE4wWVhSbFBDOXpjR0Z1UGx4dVhIUWdLaUJRY205MmFXUmxjeUIwYUdVZ1pXeGxiV1Z1ZEhNZ2QybDBhQ0IwYUdVZ1lFUkpVMEZDVEVWRVlDQmpiR0Z6Y3lCdVlXMWxMbHh1WEhRZ0tpQkFablZ1WTNScGIyNGdiVzlrZFd4bE9uUjVjR1Z6TDBWdWRHbDBlWDVGYm5ScGRIa2paMlYwUkdsellXSnNaV1JjYmx4MElDb2dRSEpsZEhWeWJuTWdlMnBSZFdWeWVYMGdhbEYxWlhKNUlHTnZiR3hsWTNScGIyNGdiMllnYldGMFkyaGxaQ0J1YjJSbGN5NWNibHgwSUNvZ1FIUnZaRzhnVW1WMGRYSnVJSE5qYjNCbElHbG1JR0YyWVdsc1lXSnNaUzVjYmx4MElDb3ZYRzVjZEhSb2FYTXVjM1JoZEdVb0oyUnBjMkZpYkdVZ1pHbHpZV0pzWldRbkxDQW5LMFJKVTBGQ1RFVkVJQzFGVGtGQ1RFVkVKeWs3WEc1Y2JseDBMeW9xWEc1Y2RDQXFJRHh6Y0dGdUlHTnNZWE56UFZ3aWRHRm5JSE4wWVhSbFhDSStVM1JoZEdVOEwzTndZVzQrWEc1Y2RDQXFJRUZrWkhNZ2RHaGxJR0JUUlV4RlExUkZSR0FnUTFOVElHTnNZWE56SUc1aGJXVWdkRzhnZEdobElITmpiM0JsSUc5eUlIUm9aU0JuYVhabGJpQmdYM1JoY21kbGRHQXVYRzVjZENBcUlFQm1kVzVqZEdsdmJpQnRiMlIxYkdVNmRIbHdaWE12Ulc1MGFYUjVma1Z1ZEdsMGVTTnpaV3hsWTNSY2JseDBJQ29nUUdacGNtVnpJRVZ1ZEdsMGVTTjFhUzF6Wld4bFkzUmNibHgwSUNvZ1FHRnlaeUI3YzNSeWFXNW5mRk5qYjNCbGZHcFJkV1Z5ZVh4SVZFMU1SV3hsYldWdWRIMGdYM1JoY21kbGRDQXRJRUVnUTFOVElITmxiR1ZqZEc5eUxDQkVUMDBnYm05a1pTQnlaV1psY21WdVkyVWdiM0lnWTI5dWRHVjRkQ0J2WW1wbFkzUWdLR2t1WlM0Z1UyTnZjR1V2YWxGMVpYSjVLUzVjYmx4MElDb2dRSEpsZEhWeWJuTWdZSFJvYVhOZ1hHNWNkQ0FxTDF4dVhHNWNkQzhxS2x4dVhIUWdLaUE4YzNCaGJpQmpiR0Z6Y3oxY0luUmhaeUJ6ZEdGMFpWd2lQbE4wWVhSbFBDOXpjR0Z1UGx4dVhIUWdLaUJVWlhOMGN5QnBaaUIwYUdVZ2MyTnZjR1VnYjNJZ1oybDJaVzRnWUY5MFlYSm5aWFJnSUdoaGN5QjBhR1VnWUZORlRFVkRWRVZFWUNCamJHRnpjeUJ1WVcxbExseHVYSFFnS2lCQVpuVnVZM1JwYjI0Z2JXOWtkV3hsT25SNWNHVnpMMFZ1ZEdsMGVYNUZiblJwZEhramMyVnNaV04wWldSY2JseDBJQ29nUUdGeVp5QjdjM1J5YVc1bmZGTmpiM0JsZkdwUmRXVnllWHhJVkUxTVJXeGxiV1Z1ZEgwZ1gzUmhjbWRsZENBdElFRWdRMU5USUhObGJHVmpkRzl5TENCRVQwMGdibTlrWlNCeVpXWmxjbVZ1WTJVZ2IzSWdZMjl1ZEdWNGRDQnZZbXBsWTNRZ0tHa3VaUzRnVTJOdmNHVXZhbEYxWlhKNUtTNWNibHgwSUNvZ1FISmxkSFZ5Ym5NZ2UwSnZiMnhsWVc1OUlGTmxiR1ZqZEdWa0oyNWxjM011WEc1Y2RDQXFMMXh1WEc1Y2RDOHFLbHh1WEhRZ0tpQThjM0JoYmlCamJHRnpjejFjSW5SaFp5QnpkR0YwWlZ3aVBsTjBZWFJsUEM5emNHRnVQbHh1WEhRZ0tpQlFjbTkyYVdSbGN5QjBhR1VnWld4bGJXVnVkSE1nZDJsMGFDQjBhR1VnWUZORlRFVkRWRVZFWUNCamJHRnpjeUJ1WVcxbExseHVYSFFnS2lCQVpuVnVZM1JwYjI0Z2JXOWtkV3hsT25SNWNHVnpMMFZ1ZEdsMGVYNUZiblJwZEhraloyVjBSR2x6WVdKc1pXUmNibHgwSUNvZ1FISmxkSFZ5Ym5NZ2UycFJkV1Z5ZVgwZ2FsRjFaWEo1SUdOdmJHeGxZM1JwYjI0Z2IyWWdiV0YwWTJobFpDQnViMlJsY3k1Y2JseDBJQ29nUUhSdlpHOGdVbVYwZFhKdUlITmpiM0JsSUdsbUlHRjJZV2xzWVdKc1pTNWNibHgwSUNvdlhHNWNkSFJvYVhNdWMzUmhkR1VvSjNObGJHVmpkQ0J6Wld4bFkzUmxaQ2NzSUNjclUwVk1SVU5VUlVRbkxDQjdYRzVjZEZ4MGQybHNiRk5sZERvZ1puVnVZM1JwYjI0Z0tGOTBZWEpuWlhRcElIdGNibHgwWEhSY2RIWmhjaUIwWVhKblpYUXNJQ1J3WVhKbGJuUTdYRzVjZEZ4MFhIUmNibHgwWEhSY2RIUmhjbWRsZENBOUlISmxjMjlzZG1WVVlYSm5aWFF1WTJGc2JDaDBhR2x6TENCZmRHRnlaMlYwS1R0Y2JseDBYSFJjZENSd1lYSmxiblFnUFNCMFlYSm5aWFF1Y0dGeVpXNTBLQ2s3WEc1Y2JseDBYSFJjZENSd1lYSmxiblF1Wm1sdVpDZ25QaUF1VTBWTVJVTlVSVVFuS1M1bFlXTm9LSFJvYVhNdVltbHVaQ2htZFc1amRHbHZiaUFvWDJsdVpHVjRMQ0JmYm05a1pTa2dlMXh1WEhSY2RGeDBYSFIwYUdsekxtUmxjMlZzWldOMEtGOXViMlJsS1R0Y2JseDBYSFJjZEgwcEtUdGNibHgwWEhSY2RDUndZWEpsYm5RdVptbHVaQ2duUGlBdVNFbEhTRXhKUjBoVVJVUW5LUzVsWVdOb0tIUm9hWE11WW1sdVpDaG1kVzVqZEdsdmJpQW9YMmx1WkdWNExDQmZibTlrWlNrZ2UxeHVYSFJjZEZ4MFhIUjBhR2x6TG5WdWFHbG5hR3hwWjJoMEtGOXViMlJsS1R0Y2JseDBYSFJjZEgwcEtUdGNibHgwWEhSOVhHNWNkSDBwTzF4dVhHNWNkQzhxS2x4dVhIUWdLaUE4YzNCaGJpQmpiR0Z6Y3oxY0luUmhaeUJ6ZEdGMFpWd2lQbE4wWVhSbFBDOXpjR0Z1UGx4dVhIUWdLaUJTWlcxdmRtVnpJSFJvWlNCZ1UwVk1SVU5VUlVSZ0lFTlRVeUJqYkdGemN5QnVZVzFsSUdaeWIyMGdkR2hsSUhOamIzQmxJRzl5SUhSb1pTQm5hWFpsYmlCZ1gzUmhjbWRsZEdBdVhHNWNkQ0FxSUVCbWRXNWpkR2x2YmlCdGIyUjFiR1U2ZEhsd1pYTXZSVzUwYVhSNWZrVnVkR2wwZVNOa1pYTmxiR1ZqZEZ4dVhIUWdLaUJBWm1seVpYTWdSVzUwYVhSNUkzVnBMV1JsYzJWc1pXTjBYRzVjZENBcUlFQmhjbWNnZTNOMGNtbHVaM3hUWTI5d1pYeHFVWFZsY25sOFNGUk5URVZzWlcxbGJuUjlJRjkwWVhKblpYUWdMU0JCSUVOVFV5QnpaV3hsWTNSdmNpd2dSRTlOSUc1dlpHVWdjbVZtWlhKbGJtTmxJRzl5SUdOdmJuUmxlSFFnYjJKcVpXTjBJQ2hwTG1VdUlGTmpiM0JsTDJwUmRXVnllU2t1WEc1Y2RDQXFJRUJ5WlhSMWNtNXpJR0IwYUdsellGeHVYSFFnS2k5Y2JseDBkR2hwY3k1emRHRjBaU2duWkdWelpXeGxZM1FuTENBbkxWTkZURVZEVkVWRUp5azdYRzVjYmx4MEx5b3FYRzVjZENBcUlEeHpjR0Z1SUdOc1lYTnpQVndpZEdGbklITjBZWFJsWENJK1UzUmhkR1U4TDNOd1lXNCtYRzVjZENBcUlFRmtaSE1nZEdobElHQklTVWRJVEVsSFNGUkZSR0FnUTFOVElHTnNZWE56SUc1aGJXVWdkRzhnZEdobElITmpiM0JsSUc5eUlIUm9aU0JuYVhabGJpQmdYM1JoY21kbGRHQXVYRzVjZENBcUlFQm1kVzVqZEdsdmJpQnRiMlIxYkdVNmRIbHdaWE12Ulc1MGFYUjVma1Z1ZEdsMGVTTm9hV2RvYkdsbmFIUmNibHgwSUNvZ1FHWnBjbVZ6SUVWdWRHbDBlU04xYVMxb2FXZG9iR2xuYUhSY2JseDBJQ29nUUdGeVp5QjdjM1J5YVc1bmZGTmpiM0JsZkdwUmRXVnllWHhJVkUxTVJXeGxiV1Z1ZEgwZ1gzUmhjbWRsZENBdElFRWdRMU5USUhObGJHVmpkRzl5TENCRVQwMGdibTlrWlNCeVpXWmxjbVZ1WTJVZ2IzSWdZMjl1ZEdWNGRDQnZZbXBsWTNRZ0tHa3VaUzRnVTJOdmNHVXZhbEYxWlhKNUtTNWNibHgwSUNvZ1FISmxkSFZ5Ym5NZ1lIUm9hWE5nWEc1Y2RDQXFMMXh1WEc1Y2RDOHFLbHh1WEhRZ0tpQThjM0JoYmlCamJHRnpjejFjSW5SaFp5QnpkR0YwWlZ3aVBsTjBZWFJsUEM5emNHRnVQbHh1WEhRZ0tpQlVaWE4wY3lCcFppQjBhR1VnYzJOdmNHVWdiM0lnWjJsMlpXNGdZRjkwWVhKblpYUmdJR2hoY3lCMGFHVWdZRWhKUjBoTVNVZElWRVZFWUNCamJHRnpjeUJ1WVcxbExseHVYSFFnS2lCQVpuVnVZM1JwYjI0Z2JXOWtkV3hsT25SNWNHVnpMMFZ1ZEdsMGVYNUZiblJwZEhramFHbG5hR3hwWjJoMFpXUmNibHgwSUNvZ1FHRnlaeUI3YzNSeWFXNW5mRk5qYjNCbGZHcFJkV1Z5ZVh4SVZFMU1SV3hsYldWdWRIMGdYM1JoY21kbGRDQXRJRUVnUTFOVElITmxiR1ZqZEc5eUxDQkVUMDBnYm05a1pTQnlaV1psY21WdVkyVWdiM0lnWTI5dWRHVjRkQ0J2WW1wbFkzUWdLR2t1WlM0Z1UyTnZjR1V2YWxGMVpYSjVLUzVjYmx4MElDb2dRSEpsZEhWeWJuTWdlMEp2YjJ4bFlXNTlJRWhwWjJoc2FXZG9kR1ZrSjI1bGMzTXVYRzVjZENBcUwxeHVYRzVjZEM4cUtseHVYSFFnS2lBOGMzQmhiaUJqYkdGemN6MWNJblJoWnlCemRHRjBaVndpUGxOMFlYUmxQQzl6Y0dGdVBseHVYSFFnS2lCUWNtOTJhV1JsY3lCMGFHVWdaV3hsYldWdWRITWdkMmwwYUNCMGFHVWdZRWhKUjBoTVNVZElWRVZFWUNCamJHRnpjeUJ1WVcxbExseHVYSFFnS2lCQVpuVnVZM1JwYjI0Z2JXOWtkV3hsT25SNWNHVnpMMFZ1ZEdsMGVYNUZiblJwZEhraloyVjBTR2xuYUd4cFoyaDBaV1JjYmx4MElDb2dRSEpsZEhWeWJuTWdlMnBSZFdWeWVYMGdhbEYxWlhKNUlHTnZiR3hsWTNScGIyNGdiMllnYldGMFkyaGxaQ0J1YjJSbGN5NWNibHgwSUNvZ1FIUnZaRzhnVW1WMGRYSnVJSE5qYjNCbElHbG1JR0YyWVdsc1lXSnNaUzVjYmx4MElDb3ZYRzVjZEhSb2FYTXVjM1JoZEdVb0oyaHBaMmhzYVdkb2RDQm9hV2RvYkdsbmFIUmxaQ2NzSUNjclNFbEhTRXhKUjBoVVJVUW5LVHRjYmx4dVhIUXZLaXBjYmx4MElDb2dQSE53WVc0Z1kyeGhjM005WENKMFlXY2djM1JoZEdWY0lqNVRkR0YwWlR3dmMzQmhiajVjYmx4MElDb2dVbVZ0YjNabGN5QjBhR1VnWUVoSlIwaE1TVWRJVkVWRVlDQkRVMU1nWTJ4aGMzTWdibUZ0WlNCbWNtOXRJSFJvWlNCelkyOXdaU0J2Y2lCMGFHVWdaMmwyWlc0Z1lGOTBZWEpuWlhSZ0xseHVYSFFnS2lCQVpuVnVZM1JwYjI0Z2JXOWtkV3hsT25SNWNHVnpMMFZ1ZEdsMGVYNUZiblJwZEhramRXNW9hV2RvYkdsbmFIUmNibHgwSUNvZ1FHWnBjbVZ6SUVWdWRHbDBlU04xYVMxMWJtaHBaMmhzYVdkb2RGeHVYSFFnS2lCQVlYSm5JSHR6ZEhKcGJtZDhVMk52Y0dWOGFsRjFaWEo1ZkVoVVRVeEZiR1Z0Wlc1MGZTQmZkR0Z5WjJWMElDMGdRU0JEVTFNZ2MyVnNaV04wYjNJc0lFUlBUU0J1YjJSbElISmxabVZ5Wlc1alpTQnZjaUJqYjI1MFpYaDBJRzlpYW1WamRDQW9hUzVsTGlCVFkyOXdaUzlxVVhWbGNua3BMbHh1WEhRZ0tpQkFjbVYwZFhKdWN5QmdkR2hwYzJCY2JseDBJQ292WEc1Y2RIUm9hWE11YzNSaGRHVW9KM1Z1YUdsbmFHeHBaMmgwSnl3Z0p5MUlTVWRJVEVsSFNGUkZSQ2NwTzF4dVhHNWNkQzhxS2x4dVhIUWdLaUE4YzNCaGJpQmpiR0Z6Y3oxY0luUmhaeUJ6ZEdGMFpWd2lQbE4wWVhSbFBDOXpjR0Z1UGx4dVhIUWdLaUJCWkdSeklIUm9aU0JnUkZKQlIwZEJRa3hGWUNCRFUxTWdZMnhoYzNNZ2JtRnRaU0IwYnlCMGFHVWdjMk52Y0dVZ2IzSWdkR2hsSUdkcGRtVnVJR0JmZEdGeVoyVjBZQzVjYmx4MElDb2dRR1oxYm1OMGFXOXVJRzF2WkhWc1pUcDBlWEJsY3k5RmJuUnBkSGwrUlc1MGFYUjVJMlJ5WVdkbllXSnNaVnh1WEhRZ0tpQkFabWx5WlhNZ1JXNTBhWFI1STNWcExXUnlZV2RuWVdKc1pWeHVYSFFnS2lCQVlYSm5JSHR6ZEhKcGJtZDhVMk52Y0dWOGFsRjFaWEo1ZkVoVVRVeEZiR1Z0Wlc1MGZTQmZkR0Z5WjJWMElDMGdRU0JEVTFNZ2MyVnNaV04wYjNJc0lFUlBUU0J1YjJSbElISmxabVZ5Wlc1alpTQnZjaUJqYjI1MFpYaDBJRzlpYW1WamRDQW9hUzVsTGlCVFkyOXdaUzlxVVhWbGNua3BMbHh1WEhRZ0tpQkFjbVYwZFhKdWN5QmdkR2hwYzJCY2JseDBJQ292WEc1Y2JseDBMeW9xWEc1Y2RDQXFJRHh6Y0dGdUlHTnNZWE56UFZ3aWRHRm5JSE4wWVhSbFhDSStVM1JoZEdVOEwzTndZVzQrWEc1Y2RDQXFJRlJsYzNSeklHbG1JSFJvWlNCelkyOXdaU0J2Y2lCbmFYWmxiaUJnWDNSaGNtZGxkR0FnYUdGeklIUm9aU0JnUkZKQlIwZEJRa3hGWUNCamJHRnpjeUJ1WVcxbExseHVYSFFnS2lCQVpuVnVZM1JwYjI0Z2JXOWtkV3hsT25SNWNHVnpMMFZ1ZEdsMGVYNUZiblJwZEhralpISmhaMFZ1WVdKc1pXUmNibHgwSUNvZ1FHRnlaeUI3YzNSeWFXNW5mRk5qYjNCbGZHcFJkV1Z5ZVh4SVZFMU1SV3hsYldWdWRIMGdYM1JoY21kbGRDQXRJRUVnUTFOVElITmxiR1ZqZEc5eUxDQkVUMDBnYm05a1pTQnlaV1psY21WdVkyVWdiM0lnWTI5dWRHVjRkQ0J2WW1wbFkzUWdLR2t1WlM0Z1UyTnZjR1V2YWxGMVpYSjVLUzVjYmx4MElDb2dRSEpsZEhWeWJuTWdlMEp2YjJ4bFlXNTlJRVJ5WVdkbllXSnNaU2R1WlhOekxseHVYSFFnS2k5Y2JseHVYSFF2S2lwY2JseDBJQ29nUEhOd1lXNGdZMnhoYzNNOVhDSjBZV2NnYzNSaGRHVmNJajVUZEdGMFpUd3ZjM0JoYmo1Y2JseDBJQ29nVUhKdmRtbGtaWE1nZEdobElHVnNaVzFsYm5SeklIZHBkR2dnZEdobElHQkVVa0ZIUjBGQ1RFVmdJR05zWVhOeklHNWhiV1V1WEc1Y2RDQXFJRUJtZFc1amRHbHZiaUJ0YjJSMWJHVTZkSGx3WlhNdlJXNTBhWFI1ZmtWdWRHbDBlU05uWlhSRWNtRm5SVzVoWW14bFpGeHVYSFFnS2lCQWNtVjBkWEp1Y3lCN2FsRjFaWEo1ZlNCcVVYVmxjbmtnWTI5c2JHVmpkR2x2YmlCdlppQnRZWFJqYUdWa0lHNXZaR1Z6TGx4dVhIUWdLaUJBZEc5a2J5QlNaWFIxY200Z2MyTnZjR1VnYVdZZ1lYWmhhV3hoWW14bExseHVYSFFnS2k5Y2JseDBkR2hwY3k1emRHRjBaU2duWkhKaFoyZGhZbXhsSUdSeVlXZEZibUZpYkdWa0p5d2dKeXRFVWtGSFIwRkNURVVuTENCN1hHNWNkRngwWkdsa1UyVjBPaUJtZFc1amRHbHZiaUFvWDNSaGNtZGxkQ2tnZTF4dVhIUmNkRngwZEdocGN5NTBjbUZ1YzJ4aGRHVW9JSEpsYzI5c2RtVlVZWEpuWlhRdVkyRnNiQ2gwYUdsekxDQmZkR0Z5WjJWMEtTQXBPMXh1WEhSY2RIMWNibHgwZlNrN1hHNWNibHgwTHlvcVhHNWNkQ0FxSUR4emNHRnVJR05zWVhOelBWd2lkR0ZuSUhOMFlYUmxYQ0krVTNSaGRHVThMM053WVc0K1hHNWNkQ0FxSUZKbGJXOTJaWE1nZEdobElHQkVVa0ZIUjBGQ1RFVmdJRU5UVXlCamJHRnpjeUJ1WVcxbElHWnliMjBnZEdobElITmpiM0JsSUc5eUlIUm9aU0JuYVhabGJpQmdYM1JoY21kbGRHQXVYRzVjZENBcUlFQm1kVzVqZEdsdmJpQnRiMlIxYkdVNmRIbHdaWE12Ulc1MGFYUjVma1Z1ZEdsMGVTTjFibVJ5WVdkbllXSnNaVnh1WEhRZ0tpQkFabWx5WlhNZ1JXNTBhWFI1STNWcExYVnVaSEpoWjJkaFlteGxYRzVjZENBcUlFQmhjbWNnZTNOMGNtbHVaM3hUWTI5d1pYeHFVWFZsY25sOFNGUk5URVZzWlcxbGJuUjlJRjkwWVhKblpYUWdMU0JCSUVOVFV5QnpaV3hsWTNSdmNpd2dSRTlOSUc1dlpHVWdjbVZtWlhKbGJtTmxJRzl5SUdOdmJuUmxlSFFnYjJKcVpXTjBJQ2hwTG1VdUlGTmpiM0JsTDJwUmRXVnllU2t1WEc1Y2RDQXFJRUJ5WlhSMWNtNXpJR0IwYUdsellGeHVYSFFnS2k5Y2JseDBkR2hwY3k1emRHRjBaU2duZFc1a2NtRm5aMkZpYkdVbkxDQW5MVVJTUVVkSFFVSk1SU2NwTzF4dVhHNWNkQzhxS2x4dVhIUWdLaUE4YzNCaGJpQmpiR0Z6Y3oxY0luUmhaeUJ6ZEdGMFpWd2lQbE4wWVhSbFBDOXpjR0Z1UGx4dVhIUWdLaUJCWkdSeklIUm9aU0JnVkZKQlRsTk1RVlJGUkdBZ1ExTlRJR05zWVhOeklHNWhiV1VnZEc4Z2RHaGxJSE5qYjNCbElHOXlJSFJvWlNCbmFYWmxiaUJnWDNSaGNtZGxkR0F1SUZSb1pTQjBZWEpuWlhRZ1lXeHpieUJuWlhSeklHRWdNbVFnZEhKaGJuTm1iM0p0SUdGMElIUm9aU0JuYVhabGJpQmdYM0J2YVc1MFlDNWNibHgwSUNvZ1FHWjFibU4wYVc5dUlHMXZaSFZzWlRwMGVYQmxjeTlGYm5ScGRIbCtSVzUwYVhSNUkzUnlZVzV6YkdGMFpWeHVYSFFnS2lCQVptbHlaWE1nUlc1MGFYUjVJM1ZwTFhSeVlXNXpiR0YwWlZ4dVhIUWdLaUJBWVhKbklIdHpkSEpwYm1kOFUyTnZjR1Y4YWxGMVpYSjVmRWhVVFV4RmJHVnRaVzUwZlNCZmRHRnlaMlYwSUMwZ1FTQkRVMU1nYzJWc1pXTjBiM0lzSUVSUFRTQnViMlJsSUhKbFptVnlaVzVqWlNCdmNpQmpiMjUwWlhoMElHOWlhbVZqZENBb2FTNWxMaUJUWTI5d1pTOXFVWFZsY25rcExseHVYSFFnS2lCQVlYSm5JSHR0YjJSMWJHVTZkSGx3WlhNdlJHbHRaVzV6YVc5dWMzNVFiMmx1ZEgwZ1gzQnZhVzUwSUMwZ1VHOXBiblFnYjJKcVpXTjBJSGRwZEdnZ1kyOXZjbVJwYm1GMFpYTWdlM2dzZVgwdVhHNWNkQ0FxSUVCeVpYUjFjbTV6SUdCMGFHbHpZRnh1WEhRZ0tpOWNibHh1WEhRdktpcGNibHgwSUNvZ1BITndZVzRnWTJ4aGMzTTlYQ0owWVdjZ2MzUmhkR1ZjSWo1VGRHRjBaVHd2YzNCaGJqNWNibHgwSUNvZ1FXUmtjeUIwYUdVZ1lGUlNRVTVUVEVGVVJVUmdJRU5UVXlCamJHRnpjeUJ1WVcxbElIUnZJSFJvWlNCelkyOXdaUzRnVkdobElITmpiM0JsSUdGc2MyOGdaMlYwY3lCaElESmtJSFJ5WVc1elptOXliU0JoZENCMGFHVWdaMmwyWlc0Z1lGOXdiMmx1ZEdBdVhHNWNkQ0FxSUVCbWRXNWpkR2x2YmlCdGIyUjFiR1U2ZEhsd1pYTXZSVzUwYVhSNWZrVnVkR2wwZVNOMGNtRnVjMnhoZEdWY2JseDBJQ29nUUdacGNtVnpJRVZ1ZEdsMGVTTjFhUzEwY21GdWMyeGhkR1ZjYmx4MElDb2dRR0Z5WnlCN2JXOWtkV3hsT25SNWNHVnpMMFJwYldWdWMybHZibk4rVUc5cGJuUjlJRjl3YjJsdWRDQXRJRkJ2YVc1MElHOWlhbVZqZENCM2FYUm9JR052YjNKa2FXNWhkR1Z6SUh0NExIbDlMbHh1WEhRZ0tpQkFjbVYwZFhKdWN5QmdkR2hwYzJCY2JseDBJQ292WEc1Y2JseDBMeW9xWEc1Y2RDQXFJRHh6Y0dGdUlHTnNZWE56UFZ3aWRHRm5JSE4wWVhSbFhDSStVM1JoZEdVOEwzTndZVzQrWEc1Y2RDQXFJRlJsYzNSeklHbG1JSFJvWlNCelkyOXdaU0J2Y2lCbmFYWmxiaUJnWDNSaGNtZGxkR0FnYUdGeklIUm9aU0JnVkZKQlRsTk1RVlJGUkdBZ1kyeGhjM01nYm1GdFpTNWNibHgwSUNvZ1FHWjFibU4wYVc5dUlHMXZaSFZzWlRwMGVYQmxjeTlGYm5ScGRIbCtSVzUwYVhSNUkzUnlZVzV6YkdGMFpXUmNibHgwSUNvZ1FHRnlaeUI3YzNSeWFXNW5mRk5qYjNCbGZHcFJkV1Z5ZVh4SVZFMU1SV3hsYldWdWRIMGdYM1JoY21kbGRDQXRJRUVnUTFOVElITmxiR1ZqZEc5eUxDQkVUMDBnYm05a1pTQnlaV1psY21WdVkyVWdiM0lnWTI5dWRHVjRkQ0J2WW1wbFkzUWdLR2t1WlM0Z1UyTnZjR1V2YWxGMVpYSjVLUzVjYmx4MElDb2dRSEpsZEhWeWJuTWdlMEp2YjJ4bFlXNTlJRlJ5WVc1emJHRjBaU2R1WlhOekxseHVYSFFnS2k5Y2JseHVYSFF2S2lwY2JseDBJQ29nUEhOd1lXNGdZMnhoYzNNOVhDSjBZV2NnYzNSaGRHVmNJajVUZEdGMFpUd3ZjM0JoYmo1Y2JseDBJQ29nVUhKdmRtbGtaWE1nZEdobElHVnNaVzFsYm5SeklIZHBkR2dnZEdobElHQlVVa0ZPVTB4QlZFVkVZQ0JqYkdGemN5QnVZVzFsTGx4dVhIUWdLaUJBWm5WdVkzUnBiMjRnYlc5a2RXeGxPblI1Y0dWekwwVnVkR2wwZVg1RmJuUnBkSGtqWjJWMFZISmhibk5zWVhSbFpGeHVYSFFnS2lCQWNtVjBkWEp1Y3lCN2FsRjFaWEo1ZlNCcVVYVmxjbmtnWTI5c2JHVmpkR2x2YmlCdlppQnRZWFJqYUdWa0lHNXZaR1Z6TGx4dVhIUWdLaUJBZEc5a2J5QlNaWFIxY200Z2MyTnZjR1VnYVdZZ1lYWmhhV3hoWW14bExseHVYSFFnS2k5Y2JseDBkR2hwY3k1emRHRjBaU2duZEhKaGJuTnNZWFJsSUhSeVlXNXpiR0YwWldRbkxDQW5LMVJTUVU1VFRFRlVSVVFuTENCN1hHNWNkRngwZDJsc2JGTmxkRG9nWm5WdVkzUnBiMjRnS0Y5MFlYSm5aWFJmY0c5cGJuUXNJRjl3YjJsdWRDa2dlMXh1WEhSY2RGeDBkbUZ5SUhCdmFXNTBMQ0IwWVhKblpYUTdYRzVjZEZ4MFhIUmNibHgwWEhSY2RIUmhjbWRsZENBOUlISmxjMjlzZG1WVVlYSm5aWFF1WTJGc2JDaDBhR2x6TENCZmRHRnlaMlYwWDNCdmFXNTBLVHRjYmx4MFhIUmNkSEJ2YVc1MElEMGdLQ0YrVzE5MFlYSm5aWFJmY0c5cGJuUXVlQ3dnWDNSaGNtZGxkRjl3YjJsdWRDNTVYUzVwYm1SbGVFOW1LSFZ1WkdWbWFXNWxaQ2twSUQ4Z1gzUmhjbWRsZEY5d2IybHVkQ0E2SUY5d2IybHVkRHRjYmx4dVhIUmNkRngwYVdZZ0tIQnZhVzUwS1NCN1hHNWNkRngwWEhSY2RIUmhjbWRsZEM1amMzTW9KM1J5WVc1elptOXliU2NzSUNkMGNtRnVjMnhoZEdWWUtDY3JjRzlwYm5RdWVDc25jSGdwSUhSeVlXNXpiR0YwWlZrb0p5dHdiMmx1ZEM1NUt5ZHdlQ2tuS1R0Y2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2RIMHBPMXh1WEc1Y2RDOHFLbHh1WEhRZ0tpQThjM0JoYmlCamJHRnpjejFjSW5SaFp5QnpkR0YwWlZ3aVBsTjBZWFJsUEM5emNHRnVQbHh1WEhRZ0tpQlNaVzF2ZG1WeklIUm9aU0JnVkZKQlRsTk1RVlJGUkdBZ1ExTlRJR05zWVhOeklHNWhiV1VnWVc1a0lFTlRVeUIwY21GdWMyWnZjbTBnWm5KdmJTQjBhR1VnYzJOdmNHVWdiM0lnZEdobElHZHBkbVZ1SUdCZmRHRnlaMlYwWUM1Y2JseDBJQ29nUUdaMWJtTjBhVzl1SUcxdlpIVnNaVHAwZVhCbGN5OUZiblJwZEhsK1JXNTBhWFI1STNWdWRISmhibk5zWVhSbFhHNWNkQ0FxSUVCbWFYSmxjeUJGYm5ScGRIa2pkV2t0ZFc1MGNtRnVjMnhoZEdWY2JseDBJQ29nUUdGeVp5QjdjM1J5YVc1bmZGTmpiM0JsZkdwUmRXVnllWHhJVkUxTVJXeGxiV1Z1ZEgwZ1gzUmhjbWRsZENBdElFRWdRMU5USUhObGJHVmpkRzl5TENCRVQwMGdibTlrWlNCeVpXWmxjbVZ1WTJVZ2IzSWdZMjl1ZEdWNGRDQnZZbXBsWTNRZ0tHa3VaUzRnVTJOdmNHVXZhbEYxWlhKNUtTNWNibHgwSUNvZ1FISmxkSFZ5Ym5NZ1lIUm9hWE5nWEc1Y2RDQXFMMXh1WEhSMGFHbHpMbk4wWVhSbEtDZDFiblJ5WVc1emJHRjBaU2NzSUNjdFZGSkJUbE5NUVZSRlJDY3NJSHRjYmx4MFhIUjNhV3hzVTJWME9pQm1kVzVqZEdsdmJpQW9LU0I3WEc1Y2RGeDBYSFIwYUdsekxtTnpjeWduZEhKaGJuTm1iM0p0Snl3Z0oyNXZibVVuS1R0Y2JseDBYSFI5WEc1Y2RIMHBPMXh1WEc1Y2RIUm9hWE11YzNSaGRHVW9KMmRoZEdVZ1oyRjBaV1FuTENBbkswZEJWRVZFSnlrN1hHNWNibjBwTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCN0lFVnVkR2wwZVN3Z2FXNTJiMnRsVW1WemNHOXVjMmxpYVd4cGRHbGxjeUI5TzF4dVhHNWNibHh1THlvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTSUNvcVhHNGdLaW9nTGk5emIzVnlZMlV2ZEhsd1pYTXZSVzUwYVhSNUxtcHpYRzRnS2lvdklsMHNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cIik7XG5cbi8qKiovIH0sXG4vKiA0MCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0ZXZhbChcImV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XFxuLyoqXFxuKiAgU2NyZWVuXFxuKiAgQGRlc2MgQ29udGFpbnMuLi5cXG4qICBAcHJvdG8gRW50aXR5XFxuKi9cXG5cXG52YXIgX3R5cGVzRW50aXR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOSk7XFxuXFxudmFyIFNjcmVlbiA9IF90eXBlc0VudGl0eS5FbnRpdHkuZXh0ZW5kKGZ1bmN0aW9uICgpIHtcXG5cXG5cXHRmdW5jdGlvbiBhdHRhY2hCZWhhdmlvckV2ZW50KCkge1xcblxcdFxcdHRoaXMub24oJ2JlaGF2aW9yJywgZnVuY3Rpb24gKF9ldmVudCkge1xcblxcdFxcdFxcdC8vIGNvbnNvbGUubG9nKCdTQ1JFRU4gR09UJywgX2V2ZW50LnRhcmdldFNjb3BlLmlkKCksIF9ldmVudC5uYW1lKTtcXG5cXG5cXHRcXHRcXHRpZiAodGhpcyAhPT0gX2V2ZW50LnRhcmdldFNjb3BlKSB7XFxuXFx0XFx0XFx0XFx0X3R5cGVzRW50aXR5Lmludm9rZVJlc3BvbnNpYmlsaXRpZXModGhpcywgX2V2ZW50KTtcXG5cXHRcXHRcXHR9XFxuXFxuXFx0XFx0XFx0dGhpcy5wcm9wYWdhdGVCZWhhdmlvcihfZXZlbnQpO1xcblxcdFxcdH0pO1xcblxcdH1cXG5cXG5cXHR0aGlzLmJhc2VUeXBlID0gJ1RZUEVfU0NSRUVOJztcXG5cXHR0aGlzLmdhbWUgPSBudWxsO1xcblxcdHRoaXMuc2NyZWVuID0gbnVsbDtcXG5cXG5cXHR0aGlzLl9faW5pdCA9IGZ1bmN0aW9uICgpIHtcXG5cXHRcXHR0aGlzLnByb3RvKCk7XFxuXFxuXFx0XFx0aWYgKHRoaXMuaGFzQ2xhc3MoJ3NjcmVlbicpKSB7XFxuXFx0XFx0XFx0YXR0YWNoQmVoYXZpb3JFdmVudC5jYWxsKHRoaXMpO1xcblxcdFxcdH1cXG5cXHR9O1xcblxcblxcdHRoaXMuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XFxuXFx0XFx0cmV0dXJuIHRoaXM7XFxuXFx0fTtcXG5cXG5cXHR0aGlzLnN0b3AgPSBmdW5jdGlvbiAoKSB7XFxuXFx0XFx0cmV0dXJuIHRoaXM7XFxuXFx0fTtcXG5cXG5cXHR0aGlzLmluZGV4ID0gZnVuY3Rpb24gKCkge1xcblxcdFxcdGlmICh0aGlzID09PSB0aGlzLnNjcmVlbikgcmV0dXJuIHRoaXMuZ2FtZS5zY3JlZW5zLmluZGV4T2YodGhpcyk7XFxuXFx0XFx0cmV0dXJuIHRoaXMuJGVscy5pbmRleCgpO1xcblxcdH07XFxuXFxuXFx0dGhpcy5uZXh0ID0gZnVuY3Rpb24gKCkge1xcblxcdFxcdGlmICghdGhpcy5jb21wbGV0ZWQoKSkgcmV0dXJuIGZhbHNlO1xcblxcdFxcdHJldHVybiB0aGlzLmdhbWUuc2NyZWVuc1t0aGlzLnNjcmVlbi5pbmRleCgpICsgMV07XFxuXFx0fTtcXG5cXG5cXHR0aGlzLnByZXYgPSBmdW5jdGlvbiAoKSB7XFxuXFx0XFx0cmV0dXJuIHRoaXMuZ2FtZS5zY3JlZW5zW3RoaXMuc2NyZWVuLmluZGV4KCkgLSAxXTtcXG5cXHR9O1xcblxcblxcdHRoaXMucXVpdCA9IGZ1bmN0aW9uICgpIHtcXG5cXHRcXHR0aGlzLmdhbWUucXVpdC5vcGVuKCk7XFxuXFx0fTtcXG5cXG5cXHR0aGlzLm5leHRTaWIgPSBmdW5jdGlvbiAoKSB7XFxuXFx0XFx0cmV0dXJuICQuZm4ubmV4dC5hcHBseSh0aGlzLiRlbHMsIGFyZ3VtZW50cyk7XFxuXFx0fTtcXG5cXG5cXHR0aGlzLnByZXZTaWIgPSBmdW5jdGlvbiAoKSB7XFxuXFx0XFx0cmV0dXJuICQuZm4ucHJldi5hcHBseSh0aGlzLiRlbHMsIGFyZ3VtZW50cyk7XFxuXFx0fTtcXG5cXG5cXHR0aGlzLmlzTGFzdCA9IGZ1bmN0aW9uICgpIHtcXG5cXHRcXHRyZXR1cm4gdGhpcy5nYW1lLnNjcmVlbnMuaW5kZXhPZih0aGlzLnNjcmVlbikgPT09IHRoaXMuZ2FtZS5zY3JlZW5zLmxlbmd0aCAtIDE7XFxuXFx0fTtcXG59KTtcXG5cXG5leHBvcnRzWydkZWZhdWx0J10gPSBTY3JlZW47XFxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Ly9AIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTl6YjNWeVkyVXZkSGx3WlhNdlUyTnlaV1Z1TG1welAyVTBNVGNpWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096dDFRMEZOSzBNc1JVRkJZenM3UVVGRk4wUXNTVUZCU1N4TlFVRk5MRWRCUVVjc2IwSkJRVThzVFVGQlRTeERRVUZETEZsQlFWazdPMEZCUlhSRExGVkJRVk1zYlVKQlFXMUNMRWRCUVVrN1FVRkRMMElzVFVGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4VlFVRlZMRVZCUVVVc1ZVRkJWU3hOUVVGTkxFVkJRVVU3T3p0QlFVZHlReXhQUVVGSkxFbEJRVWtzUzBGQlN5eE5RVUZOTEVOQlFVTXNWMEZCVnl4RlFVRkZPMEZCUTJoRExIZERRVUYxUWl4SlFVRkpMRVZCUVVjc1RVRkJUU3hEUVVGRExFTkJRVU03U1VGRGRFTTdPMEZCUlVRc1QwRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8wZEJReTlDTEVOQlFVTXNRMEZCUXp0RlFVTklPenRCUVVWRUxFdEJRVWtzUTBGQlF5eFJRVUZSTEVkQlFVY3NZVUZCWVN4RFFVRkRPMEZCUXpsQ0xFdEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRPMEZCUTJwQ0xFdEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRPenRCUVVWdVFpeExRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRmxCUVZrN1FVRkRla0lzVFVGQlNTeERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRPenRCUVVWaUxFMUJRVWtzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1JVRkJSVHRCUVVNMVFpeHpRa0ZCYlVJc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdSMEZETDBJN1JVRkRSQ3hEUVVGRE96dEJRVVZHTEV0QlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1dVRkJXVHRCUVVONFFpeFRRVUZQTEVsQlFVa3NRMEZCUXp0RlFVTmFMRU5CUVVNN08wRkJSVVlzUzBGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4WlFVRlpPMEZCUTNaQ0xGTkJRVThzU1VGQlNTeERRVUZETzBWQlExb3NRMEZCUXpzN1FVRkZSaXhMUVVGSkxFTkJRVU1zUzBGQlN5eEhRVUZITEZsQlFWazdRVUZEZUVJc1RVRkJTU3hKUVVGSkxFdEJRVXNzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4UFFVRlBMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRCUVVOcVJTeFRRVUZQTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03UlVGRGVrSXNRMEZCUXpzN1FVRkZSaXhMUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEZsQlFWazdRVUZEZGtJc1RVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlFVVXNSVUZCUlN4UFFVRlBMRXRCUVVzc1EwRkJRenRCUVVOd1F5eFRRVUZQTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RlFVRkZMRWRCUVVNc1EwRkJReXhEUVVGRExFTkJRVU03UlVGRGFFUXNRMEZCUXpzN1FVRkZSaXhMUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEZsQlFWazdRVUZEZGtJc1UwRkJUeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUlVGQlJTeEhRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMFZCUTJoRUxFTkJRVU03TzBGQlJVWXNTMEZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhaUVVGWk8wRkJRM1pDTEUxQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETzBWQlEzUkNMRU5CUVVNN08wRkJSVVlzUzBGQlNTeERRVUZETEU5QlFVOHNSMEZCUnl4WlFVRlpPMEZCUXpGQ0xGTkJRVThzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN1JVRkROME1zUTBGQlF6czdRVUZGUml4TFFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExGbEJRVms3UVVGRE1VSXNVMEZCVHl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hUUVVGVExFTkJRVU1zUTBGQlF6dEZRVU0zUXl4RFFVRkRPenRCUVVWR0xFdEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NXVUZCV1R0QlFVTjZRaXhUUVVGUExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVFVGQlRTeEhRVUZETEVOQlFVTXNRMEZCUXp0RlFVTTNSU3hEUVVGRE8wTkJSVVlzUTBGQlF5eERRVUZET3p0eFFrRkZXU3hOUVVGTklpd2labWxzWlNJNklqUXdMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FYRzRxSUNCVFkzSmxaVzVjYmlvZ0lFQmtaWE5qSUVOdmJuUmhhVzV6TGk0dVhHNHFJQ0JBY0hKdmRHOGdSVzUwYVhSNVhHNHFMMXh1WEc1cGJYQnZjblFnZXlCRmJuUnBkSGtzSUdsdWRtOXJaVkpsYzNCdmJuTnBZbWxzYVhScFpYTWdmU0JtY205dElDZDBlWEJsY3k5RmJuUnBkSGtuTzF4dVhHNTJZWElnVTJOeVpXVnVJRDBnUlc1MGFYUjVMbVY0ZEdWdVpDaG1kVzVqZEdsdmJpQW9LU0I3WEc1Y2JseDBablZ1WTNScGIyNGdZWFIwWVdOb1FtVm9ZWFpwYjNKRmRtVnVkQ0FvS1NCN1hHNWNkRngwZEdocGN5NXZiaWduWW1Wb1lYWnBiM0luTENCbWRXNWpkR2x2YmlBb1gyVjJaVzUwS1NCN1hHNWNkRngwWEhRdkx5QmpiMjV6YjJ4bExteHZaeWduVTBOU1JVVk9JRWRQVkNjc0lGOWxkbVZ1ZEM1MFlYSm5aWFJUWTI5d1pTNXBaQ2dwTENCZlpYWmxiblF1Ym1GdFpTazdYRzVjYmx4MFhIUmNkR2xtSUNoMGFHbHpJQ0U5UFNCZlpYWmxiblF1ZEdGeVoyVjBVMk52Y0dVcElIdGNibHgwWEhSY2RGeDBhVzUyYjJ0bFVtVnpjRzl1YzJsaWFXeHBkR2xsY3loMGFHbHpMQ0FnWDJWMlpXNTBLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUmNkRnh1WEhSY2RGeDBkR2hwY3k1d2NtOXdZV2RoZEdWQ1pXaGhkbWx2Y2loZlpYWmxiblFwTzF4dVhIUmNkSDBwTzF4dVhIUjlYRzVjZEZ4dVhIUjBhR2x6TG1KaGMyVlVlWEJsSUQwZ0oxUlpVRVZmVTBOU1JVVk9KenRjYmx4MGRHaHBjeTVuWVcxbElEMGdiblZzYkR0Y2JseDBkR2hwY3k1elkzSmxaVzRnUFNCdWRXeHNPMXh1WEc1Y2RIUm9hWE11WDE5cGJtbDBJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVYSFJjZEhSb2FYTXVjSEp2ZEc4b0tUdGNibHh1WEhSY2RHbG1JQ2gwYUdsekxtaGhjME5zWVhOektDZHpZM0psWlc0bktTa2dlMXh1WEhSY2RGeDBZWFIwWVdOb1FtVm9ZWFpwYjNKRmRtVnVkQzVqWVd4c0tIUm9hWE1wTzF4dVhIUmNkSDFjYmx4MGZUdGNibHh1WEhSMGFHbHpMbk4wWVhKMElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TzF4dVhIUjlPMXh1WEc1Y2RIUm9hWE11YzNSdmNDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseDBYSFJ5WlhSMWNtNGdkR2hwY3p0Y2JseDBmVHRjYmx4dVhIUjBhR2x6TG1sdVpHVjRJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVYSFJjZEdsbUlDaDBhR2x6SUQwOVBTQjBhR2x6TG5OamNtVmxiaWtnY21WMGRYSnVJSFJvYVhNdVoyRnRaUzV6WTNKbFpXNXpMbWx1WkdWNFQyWW9kR2hwY3lrN1hHNWNkRngwY21WMGRYSnVJSFJvYVhNdUpHVnNjeTVwYm1SbGVDZ3BPMXh1WEhSOU8xeHVYRzVjZEhSb2FYTXVibVY0ZENBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmx4MFhIUnBaaUFvSVhSb2FYTXVZMjl0Y0d4bGRHVmtLQ2twSUhKbGRIVnliaUJtWVd4elpUdGNibHgwWEhSeVpYUjFjbTRnZEdocGN5NW5ZVzFsTG5OamNtVmxibk5iZEdocGN5NXpZM0psWlc0dWFXNWtaWGdvS1NzeFhUdGNibHgwZlR0Y2JseHVYSFIwYUdsekxuQnlaWFlnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTXVaMkZ0WlM1elkzSmxaVzV6VzNSb2FYTXVjMk55WldWdUxtbHVaR1Y0S0NrdE1WMDdYRzVjZEgwN1hHNWNibHgwZEdocGN5NXhkV2wwSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1WEhSY2RIUm9hWE11WjJGdFpTNXhkV2wwTG05d1pXNG9LVHRjYmx4MGZUdGNibHh1WEhSMGFHbHpMbTVsZUhSVGFXSWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNWNkRngwY21WMGRYSnVJQ1F1Wm00dWJtVjRkQzVoY0hCc2VTaDBhR2x6TGlSbGJITXNJR0Z5WjNWdFpXNTBjeWs3WEc1Y2RIMDdYRzVjYmx4MGRHaHBjeTV3Y21WMlUybGlJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVYSFJjZEhKbGRIVnliaUFrTG1adUxuQnlaWFl1WVhCd2JIa29kR2hwY3k0a1pXeHpMQ0JoY21kMWJXVnVkSE1wTzF4dVhIUjlPMXh1WEc1Y2RIUm9hWE11YVhOTVlYTjBJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVYSFJjZEhKbGRIVnliaUIwYUdsekxtZGhiV1V1YzJOeVpXVnVjeTVwYm1SbGVFOW1LSFJvYVhNdWMyTnlaV1Z1S1NBOVBUMGdkR2hwY3k1bllXMWxMbk5qY21WbGJuTXViR1Z1WjNSb0xURTdYRzVjZEgwN1hHNWNibjBwTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCVFkzSmxaVzQ3WEc1Y2JseHVYRzR2S2lvZ1YwVkNVRUZEU3lCR1QwOVVSVklnS2lwY2JpQXFLaUF1TDNOdmRYSmpaUzkwZVhCbGN5OVRZM0psWlc0dWFuTmNiaUFxS2k4aVhTd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSxcbi8qIDQxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRldmFsKFwidmFyIF9PYmplY3QkZGVmaW5lUHJvcGVydGllcyA9IF9fd2VicGFja19yZXF1aXJlX18oNilbJ2RlZmF1bHQnXTtcXG5cXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oMilbJ2RlZmF1bHQnXTtcXG5cXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xcbi8qKlxcbiAqIE5vZGUgc2NvcGUgZm9yIHRoZSB0b3AgbGV2ZWwgZ2FtZSBub2RlLlxcbiAqL1xcblxcbnZhciBfdXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xcblxcbnZhciBfdXRpbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91dGlsKTtcXG5cXG52YXIgX3BsYXlHYW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XFxuXFxudmFyIF9wbGF5R2FtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wbGF5R2FtZSk7XFxuXFxudmFyIF90eXBlc0dsb2JhbFNjb3BlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XFxuXFxudmFyIF90eXBlc0dsb2JhbFNjb3BlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVzR2xvYmFsU2NvcGUpO1xcblxcbnZhciBfdHlwZXNTY3JlZW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwKTtcXG5cXG52YXIgX3R5cGVzU2NyZWVuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVzU2NyZWVuKTtcXG5cXG52YXIgX3R5cGVzQ29sbGVjdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xcblxcbnZhciBfdHlwZXNDb2xsZWN0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVzQ29sbGVjdGlvbik7XFxuXFxudmFyIF90eXBlc1Njb3BlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XFxuXFxudmFyIF90eXBlc0RpbWVuc2lvbnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xcblxcbnZhciBHYW1lID0gX3R5cGVzR2xvYmFsU2NvcGUyWydkZWZhdWx0J10uZXh0ZW5kKGZ1bmN0aW9uICgpIHtcXG5cXG5cXHR2YXIgVmlld3BvcnQsIHNjcmVlblByb3RvdHlwZTtcXG5cXG5cXHQvKipcXG4gICogU2NhbGVzIHRoZSBnYW1lIHZpZXcgdG8gZmlsbCB0aGUgYnJvd3NlciB3aW5kb3cuXFxuICAqL1xcblxcdGZ1bmN0aW9uIHNjYWxlR2FtZSgpIHtcXG5cXHRcXHR2YXIgdnBTaXplLCBnYW1lRGltZW5zaW9ucywgd2lkdGgsIGhlaWdodCwgem9vbTtcXG5cXG5cXHRcXHR2cFNpemUgPSB0aGlzLnZpZXdwb3J0LnNpemUoKTtcXG5cXHRcXHRnYW1lRGltZW5zaW9ucyA9IF9wbGF5R2FtZTJbJ2RlZmF1bHQnXS5jb25maWcoJ2RpbWVuc2lvbnMnKTtcXG5cXHRcXHR3aWR0aCA9IGdhbWVEaW1lbnNpb25zLndpZHRoIHx8IHRoaXMud2lkdGgoKTtcXG5cXHRcXHRoZWlnaHQgPSBNYXRoLnJvdW5kKGdhbWVEaW1lbnNpb25zLndpZHRoIC8gZ2FtZURpbWVuc2lvbnMucmF0aW8pO1xcblxcdFxcdHpvb20gPSB0aGlzLnZpZXdwb3J0LndpZHRoIC8gd2lkdGg7XFxuXFxuXFx0XFx0aWYgKE1hdGgucm91bmQoaGVpZ2h0ICogem9vbSkgPiB0aGlzLnZpZXdwb3J0LmhlaWdodCkge1xcblxcdFxcdFxcdHpvb20gPSB0aGlzLnZpZXdwb3J0LmhlaWdodCAvIGhlaWdodDtcXG5cXHRcXHR9XFxuXFxuXFx0XFx0dGhpcy5jc3Moe1xcblxcdFxcdFxcdHdpZHRoOiB3aWR0aCxcXG5cXHRcXHRcXHR6b29tOiB6b29tXFxuXFx0XFx0fSk7XFxuXFxuXFx0XFx0dGhpcy56b29tID0gem9vbTtcXG5cXHR9XFxuXFxuXFx0c2NyZWVuUHJvdG90eXBlID0gX3R5cGVzU2NyZWVuMlsnZGVmYXVsdCddO1xcblxcblxcdHRoaXMuYmFzZVR5cGUgPSAnVFlQRV9HQU1FJztcXG5cXHR0aGlzLnNjcmVlbnMgPSBudWxsO1xcblxcdHRoaXMuem9vbSA9IDE7XFxuXFx0dGhpcy5rZXlDb21tYW5kcyA9IG51bGw7XFxuXFx0dGhpcy5kZW1vTW9kZSA9IGZhbHNlO1xcblxcdHRoaXMudmlld3BvcnQgPSBuZXcgZnVuY3Rpb24gKCkge1xcblxcdFxcdHZhciB2cCwgJGh0bWwsIFJFU0laRV9IQU5ETEVSUztcXG5cXG5cXHRcXHR2cCA9IHRoaXM7XFxuXFx0XFx0UkVTSVpFX0hBTkRMRVJTID0gW107XFxuXFx0XFx0JGh0bWwgPSAkKCdodG1sJyk7XFxuXFx0XFx0JGh0bWwuYWRkQ2xhc3ModGhpcy5vcmllbnRhdGlvbik7XFxuXFxuXFx0XFx0JCh3aW5kb3cpLm9uKCdyZXNpemUnLCBmdW5jdGlvbiAoX2V2ZW50KSB7XFxuXFx0XFx0XFx0aWYgKCEkaHRtbC5oYXNDbGFzcyh2cC5vcmllbnRhdGlvbikpIHtcXG5cXHRcXHRcXHRcXHQkaHRtbC5yZW1vdmVDbGFzcygnc3F1YXJlaXNoIGxhbmRzY2FwZSBwcm90cmFpdCcpLmFkZENsYXNzKHZwLm9yaWVudGF0aW9uKTtcXG5cXHRcXHRcXHR9XFxuXFxuXFx0XFx0XFx0UkVTSVpFX0hBTkRMRVJTLmZvckVhY2goZnVuY3Rpb24gKF9oYW5kbGVyKSB7XFxuXFx0XFx0XFx0XFx0X2hhbmRsZXIoX2V2ZW50KTtcXG5cXHRcXHRcXHR9KTtcXG5cXHRcXHR9KTtcXG5cXG5cXHRcXHR0aGlzLkxBTkRTQ0FQRSA9ICdsYW5kc2NhcGUnO1xcblxcdFxcdHRoaXMuUFJPVFJBSVQgPSAncHJvdHJhaXQnO1xcblxcdFxcdHRoaXMuU1FVQVJFSVNIID0gJ3NxdWFyZWlzaCc7XFxuXFxuXFx0XFx0dGhpcy5zaXplID0gZnVuY3Rpb24gKCkge1xcblxcdFxcdFxcdHJldHVybiBfdHlwZXNEaW1lbnNpb25zLlNpemUuY3JlYXRlKCkuc2V0KHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xcblxcdFxcdH07XFxuXFxuXFx0XFx0X09iamVjdCRkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcXG5cXHRcXHRcXHR3aWR0aDoge1xcblxcdFxcdFxcdFxcdGdldDogZnVuY3Rpb24gZ2V0KCkge1xcblxcdFxcdFxcdFxcdFxcdHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aDtcXG5cXHRcXHRcXHRcXHR9LFxcblxcblxcdFxcdFxcdFxcdGNvbmZpZ3VyYWJsZTogZmFsc2VcXG5cXHRcXHRcXHR9LFxcblxcblxcdFxcdFxcdGhlaWdodDoge1xcblxcdFxcdFxcdFxcdGdldDogZnVuY3Rpb24gZ2V0KCkge1xcblxcdFxcdFxcdFxcdFxcdHJldHVybiB3aW5kb3cuaW5uZXJIZWlnaHQ7XFxuXFx0XFx0XFx0XFx0fSxcXG5cXG5cXHRcXHRcXHRcXHRjb25maWd1cmFibGU6IGZhbHNlXFxuXFx0XFx0XFx0fSxcXG5cXG5cXHRcXHRcXHRvcmllbnRhdGlvbjoge1xcblxcdFxcdFxcdFxcdGdldDogZnVuY3Rpb24gZ2V0KCkge1xcblxcdFxcdFxcdFxcdFxcdHZhciByYXRpbyA9IHRoaXMuc2l6ZSgpLnJhdGlvKCk7XFxuXFxuXFx0XFx0XFx0XFx0XFx0c3dpdGNoICh0cnVlKSB7XFxuXFx0XFx0XFx0XFx0XFx0XFx0Y2FzZSByYXRpbyA+IDAuOSAmJiByYXRpbyA8IDEuMTpcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRyZXR1cm4gJ3NxdWFyZWlzaCc7XFxuXFx0XFx0XFx0XFx0XFx0XFx0Y2FzZSByYXRpbyA+IDEuMTpcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRyZXR1cm4gJ2xhbmRzY2FwZSc7XFxuXFx0XFx0XFx0XFx0XFx0XFx0Y2FzZSByYXRpbyA8IDAuOTpcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRyZXR1cm4gJ3Byb3RyYWl0JztcXG5cXHRcXHRcXHRcXHRcXHR9XFxuXFx0XFx0XFx0XFx0fVxcblxcdFxcdFxcdH1cXG5cXHRcXHR9KTtcXG5cXG5cXHRcXHR0aGlzLm9uUmVzaXplID0gZnVuY3Rpb24gKF9oYW5kbGVyKSB7XFxuXFx0XFx0XFx0UkVTSVpFX0hBTkRMRVJTLnB1c2goX2hhbmRsZXIpO1xcblxcdFxcdH07XFxuXFx0fSgpOztcXG5cXG5cXHR0aGlzLndpbGxJbml0ID0gZnVuY3Rpb24gKCkge1xcblxcdFxcdHRoaXMuYWRkQ2xhc3MoJ3BsLWdhbWUnKTtcXG5cXG5cXHRcXHRzY2FsZUdhbWUuY2FsbCh0aGlzKTtcXG5cXHRcXHR0aGlzLmNhcHR1cmVTY3JlZW5zKCk7XFxuXFx0XFx0dGhpcy53YXRjaEF1ZGlvKCk7XFxuXFxuXFx0XFx0dGhpcy52aWV3cG9ydC5vblJlc2l6ZSh0aGlzLmJpbmQoc2NhbGVHYW1lKSk7XFxuXFxuXFx0XFx0cmV0dXJuIHRoaXM7XFxuXFx0fTtcXG5cXG5cXHQvKipcXG4gICogV2F0Y2ggZm9yIHNwZWNpZmljIGtleXMgb3IgY29tYmluYXRpb24gb2Yga2V5cy4gTk9URTogbWV0YSBrZXkgY29tbWFuZHMgRE8gTk9UIHN1cHBvcnQgY2hvcmRzIChpLmUuIG1ldGErSyxCKS5cXG4gICogIyMjIEtleSBOYW1lc1xcbiAgKiAtICptZXRhKjogQ29tbWFuZCAoYWthIEFwcGxlIOKMmCBvciB3aW4pXFxuICAqIC0gKmFsdCo6IEFsdCAoYWthIE9wdGlvbiDijKUpXFxuICAqIC0gKnNoaWZ0KjogU2hpZnQg4oeqXFxuICAqIC0gKmN0cmwqOiBDb250cm9sIF5cXG4gICogLSAqZW50ZXIqOiBFbnRlciBvciBSZXR1cm5cXG4gICogLSAqZXNjKjogRXNjYXBlXFxuICAqIC0gKmxlZnQqOiBMZWZ0IGFycm93XFxuICAqIC0gKnVwKjogVXAgYXJyb3dcXG4gICogLSAqcmlnaHQqOiBSaWdodCBhcnJvd1xcbiAgKiAtICpkb3duKjogRG93biBhcnJvd1xcbiAgKlxcbiAgKiAjIyMgRXhhbXBsZVxcbiAgKiBgYGBqYXZhc2NyaXB0XFxuICAqIC8vIE92ZXJyaWRpbmcgcHJpbnQuXFxuICAqIHRoaXMuZ2FtZS5vbktleXMoJ2NtZCtQJywgcHJpbnRIYW5kbGVyKTtcXG4gICpcXG4gICogLy8gSG9sZGluZyBDb250cm9sIGFuZCBwcmVzc2luZyBcXFwiS1xcXCIgdGhlbiBcXFwiQlxcXCJcXG4gICogdGhpcy5nYW1lLm9uS2V5cygnY3RybCtLLEInLCBoYW5kbGVyKTtcXG4gICogYGBgXFxuICAqIEBhcmcge3N0cmluZ30gX2NvbW1hbmRzIC0gVGhlIGtleSBvciBzZXF1ZW5jZSBvZiBrZXlzLlxcbiAgKiBAYXJnIHtmdW5jdGlvbn0gX2hhbmRsZXIgLSBZb3VyIGV2ZW50IGhhbmRsZXIgZm9yIHdoZW4geW91IGtleSBwYXR0ZXJuIGlzIG1hdGNoZWQuXFxuICAqIEByZXR1cm5zIGB0aGlzYFxcbiAgKi9cXG5cXHR0aGlzLm9uS2V5cyA9IGZ1bmN0aW9uIChfY29tbWFuZHMsIF9oYW5kbGVyKSB7XFxuXFx0XFx0dmFyIHNlcXVlbmNlLCBjaG9yZHMsIG1vZGlmaWVycywgbWFwO1xcblxcblxcdFxcdGlmICghdGhpcy5rZXlDb21tYW5kcykge1xcblxcdFxcdFxcdHRoaXMua2V5Q29tbWFuZHMgPSB7fTtcXG5cXG5cXHRcXHRcXHRtYXAgPSB7XFxuXFx0XFx0XFx0XFx0MTM6ICdlbnRlcicsXFxuXFx0XFx0XFx0XFx0MTY6ICdzaGlmdCcsXFxuXFx0XFx0XFx0XFx0MTc6ICdjdHJsJyxcXG5cXHRcXHRcXHRcXHQxODogJ2FsdCcsXFxuXFx0XFx0XFx0XFx0Mjc6ICdlc2MnLFxcblxcdFxcdFxcdFxcdDM3OiAnbGVmdCcsXFxuXFx0XFx0XFx0XFx0Mzg6ICd1cCcsXFxuXFx0XFx0XFx0XFx0Mzk6ICdyaWdodCcsXFxuXFx0XFx0XFx0XFx0NDA6ICdkb3duJyxcXG5cXHRcXHRcXHRcXHQ5MTogJ21ldGEnLFxcblxcdFxcdFxcdFxcdGVudGVyOiAxMyxcXG5cXHRcXHRcXHRcXHRzaGlmdDogMTYsXFxuXFx0XFx0XFx0XFx0Y3RybDogMTcsXFxuXFx0XFx0XFx0XFx0YWx0OiAxOCxcXG5cXHRcXHRcXHRcXHRlc2M6IDI3LFxcblxcdFxcdFxcdFxcdGxlZnQ6IDM3LFxcblxcdFxcdFxcdFxcdHVwOiAzOCxcXG5cXHRcXHRcXHRcXHRyaWdodDogMzksXFxuXFx0XFx0XFx0XFx0ZG93bjogNDAsXFxuXFx0XFx0XFx0XFx0bWV0YTogOTFcXG5cXHRcXHRcXHR9O1xcblxcblxcdFxcdFxcdG1vZGlmaWVycyA9IFsxNiwgMTcsIDE4LCA5MV07XFxuXFx0XFx0XFx0c2VxdWVuY2UgPSBbXTtcXG5cXHRcXHRcXHRjaG9yZHMgPSBbXTtcXG5cXG5cXHRcXHRcXHR0aGlzLm9uKCdrZXlkb3duJywgZnVuY3Rpb24gKF9ldmVudCkge1xcblxcdFxcdFxcdFxcdHZhciBtb2RpZmllciwga2V5LCBldmVudE1vZHMsIGN1cnJlbnRNb2RzLCBjb21tYW5kLCBoYW5kbGVyO1xcblxcblxcdFxcdFxcdFxcdG1vZGlmaWVyID0gISEgfm1vZGlmaWVycy5pbmRleE9mKF9ldmVudC5rZXlDb2RlKSAmJiBtYXBbX2V2ZW50LmtleUNvZGVdO1xcblxcdFxcdFxcdFxcdGtleSA9IG1vZGlmaWVyID8gbW9kaWZpZXIgOiBtYXBbX2V2ZW50LmtleUNvZGVdIHx8IFN0cmluZy5mcm9tQ2hhckNvZGUoX2V2ZW50LmtleUNvZGUpO1xcblxcdFxcdFxcdFxcdGV2ZW50TW9kcyA9IFtfZXZlbnQuc2hpZnRLZXksIF9ldmVudC5jdHJsS2V5LCBfZXZlbnQuYWx0S2V5LCBfZXZlbnQubWV0YUtleV07XFxuXFx0XFx0XFx0XFx0Y3VycmVudE1vZHMgPSBbXTtcXG5cXG5cXHRcXHRcXHRcXHQvLyBDb2xsZWN0IHRoZSBtb2RpZmllcnMgdGhlIGV2ZW50IHNheXMgYXJlIHN0aWxsIGRvd24uXFxuXFx0XFx0XFx0XFx0ZXZlbnRNb2RzLmZvckVhY2goZnVuY3Rpb24gKF9tb2RpZmllckRvd24sIF9pbmRleCkge1xcblxcdFxcdFxcdFxcdFxcdC8vIHVzZSB0aGUgbW9kaWZpZXIgbmFtZVxcblxcdFxcdFxcdFxcdFxcdGlmIChfbW9kaWZpZXJEb3duKSBjdXJyZW50TW9kcy5wdXNoKG1hcFttb2RpZmllcnNbX2luZGV4XV0pO1xcblxcdFxcdFxcdFxcdH0pO1xcblxcblxcdFxcdFxcdFxcdC8vIERvbid0IGFkZCBrZXlzIHdlIGFscmVhZHkgaGF2ZSBkdXJpbmcgcmFwaWQtZmlyZSBldmVudHNcXG5cXHRcXHRcXHRcXHRpZiAofmNob3Jkcy5pbmRleE9mKGtleSkgfHwgfnNlcXVlbmNlLmluZGV4T2Yoa2V5KSkgcmV0dXJuO1xcblxcblxcdFxcdFxcdFxcdC8vIENvbnN0cnVjdCB0aGUgY29tbWFuZFxcblxcdFxcdFxcdFxcdGNvbW1hbmQgPSBjaG9yZHMubGVuZ3RoID8gKGNob3Jkcy5wdXNoKGtleSksIGNob3Jkcy5qb2luKCcsJykpIDogKHNlcXVlbmNlLnB1c2goa2V5KSwgc2VxdWVuY2Uuam9pbignKycpKTtcXG5cXG5cXHRcXHRcXHRcXHRoYW5kbGVyID0gdGhpcy5rZXlDb21tYW5kc1tjb21tYW5kXTtcXG5cXG5cXHRcXHRcXHRcXHRpZiAoaGFuZGxlcikge1xcblxcdFxcdFxcdFxcdFxcdGhhbmRsZXIuY2FsbCh0aGlzLCBfZXZlbnQsIGNvbW1hbmQpO1xcblxcdFxcdFxcdFxcdFxcdC8vIEtlZXAgY3VycmVudCBtb2RpZmllcnMuXFxuXFx0XFx0XFx0XFx0XFx0c2VxdWVuY2UgPSBjdXJyZW50TW9kcy5tYXAoZnVuY3Rpb24gKF9rZXksIF9pbmRleCkge1xcblxcdFxcdFxcdFxcdFxcdFxcdHZhciBrZXkgPSBzZXF1ZW5jZVtfaW5kZXhdO1xcblxcdFxcdFxcdFxcdFxcdFxcdHJldHVybiBjdXJyZW50TW9kc1tjdXJyZW50TW9kcy5pbmRleE9mKGtleSldO1xcblxcdFxcdFxcdFxcdFxcdH0pO1xcblxcdFxcdFxcdFxcdFxcdGNob3JkcyA9IFtdO1xcblxcblxcdFxcdFxcdFxcdFxcdC8vIE92ZXJyaWRlIG9yaWdpbmFsIGtleSBjb21tYW5kIChpLmUuIG1ldGErUSkuXFxuXFx0XFx0XFx0XFx0XFx0X2V2ZW50LnByZXZlbnREZWZhdWx0KCk7XFxuXFx0XFx0XFx0XFx0fVxcblxcdFxcdFxcdH0pO1xcblxcblxcdFxcdFxcdHRoaXMub24oJ2tleXVwJywgZnVuY3Rpb24gKF9ldmVudCkge1xcblxcdFxcdFxcdFxcdHZhciBrZXksIGluZGV4LCBtb2RpZmllciwgZXZlbnRNb2RzLCBjdXJyZW50TW9kcztcXG5cXG5cXHRcXHRcXHRcXHRrZXkgPSBtb2RpZmllciA/IG1vZGlmaWVyIDogbWFwW19ldmVudC5rZXlDb2RlXSB8fCBTdHJpbmcuZnJvbUNoYXJDb2RlKF9ldmVudC5rZXlDb2RlKTtcXG5cXHRcXHRcXHRcXHRpbmRleCA9IHNlcXVlbmNlLmluZGV4T2Yoa2V5KTtcXG5cXHRcXHRcXHRcXHRtb2RpZmllciA9ICEhIH5tb2RpZmllcnMuaW5kZXhPZihfZXZlbnQua2V5Q29kZSkgJiYgbWFwW19ldmVudC5rZXlDb2RlXTtcXG5cXHRcXHRcXHRcXHQvLyBGb2xsb3dzIHRoZSBzYW1lIGluZGV4IG9yZGVyIGFzIFxcXCJtb2RpZmllcnNcXFwiIFsxNiwgMTcsIDE4LCA5MV1cXG5cXHRcXHRcXHRcXHRldmVudE1vZHMgPSBbX2V2ZW50LnNoaWZ0S2V5LCBfZXZlbnQuY3RybEtleSwgX2V2ZW50LmFsdEtleSwgX2V2ZW50Lm1ldGFLZXldO1xcblxcdFxcdFxcdFxcdGN1cnJlbnRNb2RzID0gW107XFxuXFxuXFx0XFx0XFx0XFx0Ly8gQ29sbGVjdCB0aGUgbW9kaWZpZXJzIHRoZSBldmVudCBzYXlzIGFyZSBzdGlsbCBkb3duLlxcblxcdFxcdFxcdFxcdGV2ZW50TW9kcy5mb3JFYWNoKGZ1bmN0aW9uIChfbW9kaWZpZXJEb3duLCBfaW5kZXgpIHtcXG5cXHRcXHRcXHRcXHRcXHQvLyB1c2UgdGhlIG1vZGlmaWVyIG5hbWVcXG5cXHRcXHRcXHRcXHRcXHRpZiAoX21vZGlmaWVyRG93bikgY3VycmVudE1vZHMucHVzaChtYXBbbW9kaWZpZXJzW19pbmRleF1dKTtcXG5cXHRcXHRcXHRcXHR9KTtcXG5cXG5cXHRcXHRcXHRcXHQvLyBJZiB0aGUga2V5IHJlbGVhc2VkIGlzIGEgbW9kaWZpZXIuLi5cXG5cXHRcXHRcXHRcXHRpZiAoa2V5ID09PSBtb2RpZmllcikge1xcblxcdFxcdFxcdFxcdFxcdC8vIC4uLmtlZXAgY3VycmVudCBtb2RpZmllcnMuLi5cXG5cXHRcXHRcXHRcXHRcXHRzZXF1ZW5jZSA9IGN1cnJlbnRNb2RzLm1hcChmdW5jdGlvbiAoX2tleSwgX2luZGV4KSB7XFxuXFx0XFx0XFx0XFx0XFx0XFx0dmFyIGtleSA9IHNlcXVlbmNlW19pbmRleF07XFxuXFx0XFx0XFx0XFx0XFx0XFx0cmV0dXJuIGN1cnJlbnRNb2RzW2N1cnJlbnRNb2RzLmluZGV4T2Yoa2V5KV07XFxuXFx0XFx0XFx0XFx0XFx0fSk7XFxuXFx0XFx0XFx0XFx0XFx0Ly8gLi4uY2xlYXIgcmVnaXN0ZXJlZCBjaG9yZHMuXFxuXFx0XFx0XFx0XFx0XFx0Y2hvcmRzID0gW107XFxuXFx0XFx0XFx0XFx0fSBlbHNlIHtcXG5cXHRcXHRcXHRcXHRcXHQvLyBJZiB3ZSBoYWQgcHJlc3NlZCBtb3JlIHRoYW4gb25lIGtleS4uLlxcblxcdFxcdFxcdFxcdFxcdGlmIChzZXF1ZW5jZS5sZW5ndGggPiAxKSB7XFxuXFx0XFx0XFx0XFx0XFx0XFx0Ly8gQ2hlY2sgaWYgdGhlIGZpcnN0IGlzIGEgbW9kaWZpZXIgdGhlbiBzd2l0Y2ggdG8gY2hvcmQgY2FwdHVyaW5nXFxuXFx0XFx0XFx0XFx0XFx0XFx0aWYgKH5tb2RpZmllcnMuaW5kZXhPZihtYXBbc2VxdWVuY2VbMF1dKSkge1xcblxcdFxcdFxcdFxcdFxcdFxcdFxcdGNob3Jkcy5wdXNoKHNlcXVlbmNlLmpvaW4oJysnKSk7XFxuXFx0XFx0XFx0XFx0XFx0XFx0fVxcblxcdFxcdFxcdFxcdFxcdH1cXG5cXG5cXHRcXHRcXHRcXHRcXHRpZiAofmluZGV4KSBzZXF1ZW5jZS5zcGxpY2UoaW5kZXgsIDEpO1xcblxcdFxcdFxcdFxcdFxcdGlmICghc2VxdWVuY2UubGVuZ3RoKSBjaG9yZHMgPSBbXTtcXG5cXHRcXHRcXHRcXHR9XFxuXFx0XFx0XFx0fSk7XFxuXFx0XFx0fVxcblxcblxcdFxcdHRoaXMua2V5Q29tbWFuZHNbX2NvbW1hbmRzXSA9IF9oYW5kbGVyO1xcblxcblxcdFxcdHJldHVybiB0aGlzO1xcblxcdH07XFxuXFxuXFx0dGhpcy5zY3JlZW4gPSBmdW5jdGlvbiAoX2lkLCBfaW1wbGVtZW50YXRpb24pIHtcXG5cXHRcXHR2YXIgcHJvdG90eXBlLCBzZWxlY3Rvciwgc2NyZWVuU2VsZWN0b3IsIGluc3RhbmNlO1xcblxcblxcdFxcdGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBfaWQgPT09ICdmdW5jdGlvbicpIHtcXG5cXHRcXHRcXHRzY3JlZW5Qcm90b3R5cGUgPSBfdHlwZXNTY3JlZW4yWydkZWZhdWx0J10uZXh0ZW5kKF9pZCk7XFxuXFx0XFx0XFx0cmV0dXJuIHRoaXM7XFxuXFx0XFx0fVxcblxcblxcdFxcdGlmICghdGhpcy5oYXNPd25Qcm9wZXJ0eSgnc2NyZWVucycpKSB0aGlzLnNjcmVlbnMgPSBfdHlwZXNDb2xsZWN0aW9uMlsnZGVmYXVsdCddLmNyZWF0ZSgpO1xcblxcblxcdFxcdGlmICh0aGlzLmhhc093blByb3BlcnR5KCckZWxzJykpIHtcXG5cXHRcXHRcXHRkZWJ1Z2dlcjtcXG5cXHRcXHRcXHRzY3JlZW5TZWxlY3RvciA9IHBsLmdhbWUuY29uZmlnKCdzY3JlZW5TZWxlY3RvcicpO1xcblxcdFxcdFxcdHByb3RvdHlwZSA9IHNjcmVlblByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKHRoaXMpID8gdGhpcyA6IHNjcmVlblByb3RvdHlwZTtcXG5cXHRcXHRcXHRzZWxlY3RvciA9IHR5cGVvZiBfaWQgPT09ICdudW1iZXInID8gc2NyZWVuU2VsZWN0b3IgKyAnOm50aC1jaGlsZCgnICsgKF9pZCArIDEpICsgJyknIDogJyMnICsgX2lkO1xcblxcdFxcdFxcdGluc3RhbmNlID0gcHJvdG90eXBlLmV4dGVuZChfaW1wbGVtZW50YXRpb24pLmluaXRpYWxpemUodGhpcy5maW5kKHNlbGVjdG9yKSk7XFxuXFxuXFx0XFx0XFx0aW5zdGFuY2Uuc2NyZWVuID0gaW5zdGFuY2U7XFxuXFx0XFx0XFx0aWYgKCFpbnN0YW5jZS5nYW1lKSB7XFxuXFx0XFx0XFx0XFx0aW5zdGFuY2UuZ2FtZSA9IGluc3RhbmNlLmNsb3Nlc3QoJy5wbC1nYW1lJykuc2NvcGUoKTtcXG5cXHRcXHRcXHR9XFxuXFx0XFx0fSBlbHNlIHtcXG5cXHRcXHRcXHR0aGlzLnNjcmVlbnMucHVzaCh7XFxuXFx0XFx0XFx0XFx0aW5kZXg6IHR5cGVvZiBfaWQgPT09ICdudW1iZXInID8gX2lkIDogbnVsbCxcXG5cXHRcXHRcXHRcXHRuYW1lOiB0eXBlb2YgX2lkID09PSAnc3RyaW5nJyA/IF9pZCA6IG51bGwsXFxuXFx0XFx0XFx0XFx0aW1wbGVtZW50YXRpb246IF9pbXBsZW1lbnRhdGlvblxcblxcdFxcdFxcdH0pO1xcblxcdFxcdH1cXG5cXG5cXHRcXHRyZXR1cm4gdGhpcztcXG5cXHR9O1xcblxcblxcdHRoaXMuY2FwdHVyZVNjcmVlbnMgPSBmdW5jdGlvbiAoKSB7XFxuXFx0XFx0dmFyIHNjcmVlblNlbGVjdG9yLCBwcm90b3R5cGUsIGNvbGxlY3Rpb247XFxuXFxuXFx0XFx0aWYgKCF0aGlzLmhhc093blByb3BlcnR5KCdzY3JlZW5zJykpIHJldHVybiB0aGlzO1xcblxcblxcdFxcdHNjcmVlblNlbGVjdG9yID0gcGwuZ2FtZS5jb25maWcoJ3NjcmVlblNlbGVjdG9yJyk7XFxuXFx0XFx0cHJvdG90eXBlID0gc2NyZWVuUHJvdG90eXBlLmlzUHJvdG90eXBlT2YodGhpcykgPyB0aGlzIDogc2NyZWVuUHJvdG90eXBlO1xcblxcdFxcdGNvbGxlY3Rpb24gPSBbXTtcXG5cXG5cXHRcXHR0aGlzLmZpbmRPd24oc2NyZWVuU2VsZWN0b3IpLmVhY2godGhpcy5iaW5kKGZ1bmN0aW9uIChfaW5kZXgsIF9ub2RlKSB7XFxuXFx0XFx0XFx0dmFyICRub2RlLCBzY3JlZW4sIHJlY29yZCwga2V5LCBpZCwgaW5kZXgsIGNvbXBvbmVudDtcXG5cXG5cXHRcXHRcXHQkbm9kZSA9ICQoX25vZGUpO1xcblxcdFxcdFxcdGlkID0gJG5vZGUuaWQoKTtcXG5cXHRcXHRcXHRrZXkgPSBpZCA/ICduYW1lJyA6IChpZCA9IF9pbmRleCwgJ2luZGV4Jyk7XFxuXFx0XFx0XFx0cmVjb3JkID0gdGhpcy5zY3JlZW5zLmdldChpZCwga2V5KTtcXG5cXHRcXHRcXHRjb21wb25lbnQgPSAkbm9kZS5hdHRyKCdwbC1jb21wb25lbnQnKTtcXG5cXHRcXHRcXHRzY3JlZW4gPSBfdHlwZXNTY29wZS5jcmVhdGVFbnRpdHkuY2FsbChwcm90b3R5cGUsICRub2RlLCByZWNvcmQgJiYgcmVjb3JkLmltcGxlbWVudGF0aW9uKTtcXG5cXHRcXHRcXHRzY3JlZW4uc2NyZWVuID0gc2NyZWVuO1xcblxcdFxcdFxcdHNjcmVlbi5nYW1lID0gdGhpcztcXG5cXG5cXHRcXHRcXHRpZiAoJG5vZGUuYXR0cigncGwtc2tpcCcpID09IG51bGwpIGNvbGxlY3Rpb24ucHVzaChzY3JlZW4pO1xcblxcblxcdFxcdFxcdGlmIChrZXkgPT09ICduYW1lJyB8fCBjb21wb25lbnQpIHtcXG5cXHRcXHRcXHRcXHRfdXRpbDJbJ2RlZmF1bHQnXS5hc3NpZ25SZWYodGhpcywgX3V0aWwyWydkZWZhdWx0J10udHJhbnNmb3JtSWQoa2V5ID09PSAnbmFtZScgJiYgaWQgfHwgY29tcG9uZW50LCB0cnVlKSwgc2NyZWVuKTtcXG5cXHRcXHRcXHR9XFxuXFx0XFx0fSkpO1xcblxcblxcdFxcdGlmIChjb2xsZWN0aW9uLmxlbmd0aCkgdGhpcy5zY3JlZW5zID0gY29sbGVjdGlvbjtcXG5cXG5cXHRcXHRyZXR1cm4gdGhpcztcXG5cXHR9O1xcblxcblxcdHRoaXMud2F0Y2hBdWRpbyA9IGZ1bmN0aW9uICgpIHtcXG5cXHRcXHR2YXIgcGxheWluZztcXG5cXG5cXHRcXHRmdW5jdGlvbiBkZVF1ZXVlKF9zY29wZSwgX2l0ZW0pIHtcXG5cXHRcXHRcXHRbX3Njb3BlLCBfc2NvcGUuc2NyZWVuXS5mb3JFYWNoKGZ1bmN0aW9uIChfc2NvcGUpIHtcXG5cXHRcXHRcXHRcXHRpZiAoX3Njb3BlLnJlcXVpcmVkUXVldWUgJiYgX3Njb3BlLmlzTWVtYmVyU2FmZSgncmVxdWlyZWRRdWV1ZScpICYmIF9zY29wZS5yZXF1aXJlZFF1ZXVlLmhhcyhfaXRlbSkpIHtcXG5cXHRcXHRcXHRcXHRcXHRfc2NvcGUucmVxdWlyZWRRdWV1ZS5yZWFkeShfaXRlbSk7XFxuXFx0XFx0XFx0XFx0fVxcblxcdFxcdFxcdH0pO1xcblxcdFxcdH1cXG5cXG5cXHRcXHRwbGF5aW5nID0gX3R5cGVzQ29sbGVjdGlvbjJbJ2RlZmF1bHQnXS5jcmVhdGUoKTtcXG5cXG5cXHRcXHR0aGlzLm9uKCdhdWRpby1wbGF5JywgZnVuY3Rpb24gKF9ldmVudCkge1xcblxcdFxcdFxcdHZhciBjdXJyZW50LCBiZ011c2ljO1xcblxcblxcdFxcdFxcdGlmIChfZXZlbnQuYXVkaW9UeXBlICE9PSAnc2Z4Jykge1xcblxcdFxcdFxcdFxcdGN1cnJlbnQgPSBwbGF5aW5nLmZpbHRlcihfZXZlbnQuYXVkaW9UeXBlLCAndHlwZScpO1xcblxcdFxcdFxcdFxcdGJnTXVzaWMgPSBwbGF5aW5nLmZpbHRlcignYmFja2dyb3VuZCcsICd0eXBlJyk7XFxuXFxuXFx0XFx0XFx0XFx0aWYgKGN1cnJlbnQpIHtcXG5cXHRcXHRcXHRcXHRcXHRjdXJyZW50LmZvckVhY2goZnVuY3Rpb24gKF9yZWNvcmQpIHtcXG5cXHRcXHRcXHRcXHRcXHRcXHRfcmVjb3JkLmF1ZGlvLnBhdXNlKCk7XFxuXFx0XFx0XFx0XFx0XFx0XFx0X3JlY29yZC5hdWRpby5jdXJyZW50VGltZSA9IDA7XFxuXFx0XFx0XFx0XFx0XFx0fSk7XFxuXFx0XFx0XFx0XFx0fVxcblxcblxcdFxcdFxcdFxcdGlmIChfZXZlbnQuYXVkaW9UeXBlID09PSAndm9pY2Utb3ZlcicpIHtcXG5cXHRcXHRcXHRcXHRcXHRpZiAoYmdNdXNpYykgYmdNdXNpYy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVjb3JkKSB7XFxuXFx0XFx0XFx0XFx0XFx0XFx0X3JlY29yZC5hdWRpby52b2x1bWUgPSAwLjI7XFxuXFx0XFx0XFx0XFx0XFx0fSk7XFxuXFx0XFx0XFx0XFx0fVxcblxcdFxcdFxcdH1cXG5cXG5cXHRcXHRcXHRwbGF5aW5nLnB1c2goe1xcblxcdFxcdFxcdFxcdGF1ZGlvOiBfZXZlbnQudGFyZ2V0LFxcblxcdFxcdFxcdFxcdHR5cGU6IF9ldmVudC5hdWRpb1R5cGVcXG5cXHRcXHRcXHR9KTtcXG5cXHRcXHR9KTtcXG5cXG5cXHRcXHR0aGlzLm9uKCdhdWRpby1lbmRlZCBhdWRpby1wYXVzZScsIGZ1bmN0aW9uIChfZXZlbnQpIHtcXG5cXHRcXHRcXHR2YXIgY3VycmVudCwgc2NvcGUsIGJnTXVzaWM7XFxuXFxuXFx0XFx0XFx0Y3VycmVudCA9IHBsYXlpbmcuZ2V0KF9ldmVudC50YXJnZXQsICdhdWRpbycpO1xcblxcdFxcdFxcdHNjb3BlID0gJChfZXZlbnQudGFyZ2V0KS5zY29wZSgpO1xcblxcdFxcdFxcdGJnTXVzaWMgPSBwbGF5aW5nLmZpbHRlcignYmFja2dyb3VuZCcsICd0eXBlJyk7XFxuXFxuXFx0XFx0XFx0cGxheWluZy5yZW1vdmUoY3VycmVudCk7XFxuXFx0XFx0XFx0ZGVRdWV1ZShzY29wZSwgX2V2ZW50LnRhcmdldCk7XFxuXFxuXFx0XFx0XFx0aWYgKF9ldmVudC5hdWRpb1R5cGUgPT09ICd2b2ljZS1vdmVyJyAmJiAhcGxheWluZy5nZXQoJ3ZvaWNlLW92ZXInLCAndHlwZScpKSB7XFxuXFx0XFx0XFx0XFx0aWYgKGJnTXVzaWMpIGJnTXVzaWMuZm9yRWFjaChmdW5jdGlvbiAoX3JlY29yZCkge1xcblxcdFxcdFxcdFxcdFxcdF9yZWNvcmQuYXVkaW8udm9sdW1lID0gMTtcXG5cXHRcXHRcXHRcXHR9KTtcXG5cXHRcXHRcXHR9XFxuXFx0XFx0fSk7XFxuXFx0fTtcXG5cXG5cXHR0aGlzLnByb2dyZXNzID0gZnVuY3Rpb24gKCkge1xcblxcdFxcdHJldHVybiB7XFxuXFx0XFx0XFx0Y3VycmVudFNjcmVlbjogdGhpcy5jdXJyZW50U2NyZWVuKCkuaW5kZXgoKVxcblxcdFxcdH07XFxuXFx0fTtcXG5cXG5cXHR0aGlzLmN1cnJlbnRTY3JlZW4gPSBmdW5jdGlvbiAoKSB7XFxuXFx0XFx0cmV0dXJuIHRoaXMuZmluZE93bignLnNjcmVlbi5PUEVOJykubm90KCcjcXVpdCcpLnNjb3BlKCk7XFxuXFx0fTtcXG5cXG5cXHR0aGlzLmZsaXAgPSBmdW5jdGlvbiAoKSB7XFxuXFx0XFx0Y29uc29sZS5sb2coJ1RIQVRTIEEgRkxJUCEnKTtcXG5cXHRcXHRfcGxheUdhbWUyWydkZWZhdWx0J10ucmVwb3J0LmZsaXAodGhpcyk7XFxuXFx0fTtcXG5cXG5cXHR0aGlzLmV4aXQgPSBmdW5jdGlvbiAoKSB7XFxuXFx0XFx0Y29uc29sZS5sb2coJ0dPT0RCWUUhJyk7XFxuXFx0XFx0X3BsYXlHYW1lMlsnZGVmYXVsdCddLnJlcG9ydC5leGl0KHRoaXMpO1xcblxcdH07XFxuXFxuXFx0LyoqXFxuICAqIERlbW8gbW9kZSBrZXkgY29tbWFuZFxcbiAgKi9cXG5cXHR0aGlzLm9uS2V5cygnY3RybCtELE0nLCBmdW5jdGlvbiAoKSB7XFxuXFx0XFx0Ly8gdG9nZ2xlXFxuXFx0XFx0dGhpcy5kZW1vTW9kZSA9ICF0aGlzLmRlbW9Nb2RlO1xcblxcdFxcdHRoaXNbdGhpcy5kZW1vTW9kZSA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXSgnREVNTycpO1xcblxcblxcdFxcdGNvbnNvbGUuaW5mbyh0aGlzLmlkKCksICdpcyBub3cgJyArICh0aGlzLmRlbW9Nb2RlID8gJ2luJyA6ICdvdXQgb2YnKSArICcgRGVtbyBNb2RlLicpO1xcblxcdH0pO1xcblxcblxcdC8qKlxcbiAgKiBLZXlib2FyZCBzY3JlZW4gbmF2aWdhdGlvblxcbiAgKi9cXG5cXHR0aGlzLm9uS2V5cygnbGVmdCcsIGZ1bmN0aW9uICgpIHtcXG5cXHRcXHR2YXIgY3VycmVudDtcXG5cXG5cXHRcXHRjdXJyZW50ID0gdGhpcy5jdXJyZW50U2NyZWVuKCk7XFxuXFxuXFx0XFx0aWYgKGN1cnJlbnQpIGN1cnJlbnQucHJldigpO1xcblxcdH0pO1xcblxcblxcdHRoaXMub25LZXlzKCdyaWdodCcsIGZ1bmN0aW9uICgpIHtcXG5cXHRcXHR2YXIgY3VycmVudDtcXG5cXG5cXHRcXHRjdXJyZW50ID0gdGhpcy5jdXJyZW50U2NyZWVuKCk7XFxuXFxuXFx0XFx0aWYgKGN1cnJlbnQpIGN1cnJlbnQubmV4dCgpO1xcblxcdH0pO1xcbn0pO1xcblxcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IEdhbWU7XFxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Ly9AIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTl6YjNWeVkyVXZkSGx3WlhNdlIyRnRaUzVxY3o5aE9UYzFJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096dG5RMEZIYVVJc1JVRkJUVHM3T3p0dlEwRkRUaXhGUVVGWE96czdPelJEUVVOS0xFVkJRVzFDT3pzN08zVkRRVU40UWl4RlFVRmpPenM3T3pKRFFVTldMRVZCUVd0Q096czdPM05EUVVOYUxFVkJRV0U3T3pKRFFVTnlRaXhEUVVGclFqczdRVUZGZGtNc1NVRkJTU3hKUVVGSkxFZEJRVWNzT0VKQlFWa3NUVUZCVFN4RFFVRkRMRmxCUVZrN08wRkJSWHBETEV0QlFVa3NVVUZCVVN4RlFVRkZMR1ZCUVdVc1EwRkJRenM3T3pzN1FVRkxPVUlzVlVGQlV5eFRRVUZUTEVkQlFVazdRVUZEY2tJc1RVRkJTU3hOUVVGTkxFVkJRVVVzWTBGQll5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TlFVRk5MRVZCUVVVc1NVRkJTU3hEUVVGRE96dEJRVVZvUkN4UlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0QlFVTTVRaXhuUWtGQll5eEhRVUZITEhOQ1FVRkxMRTFCUVUwc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF6dEJRVU16UXl4UFFVRkxMRWRCUVVjc1kwRkJZeXhEUVVGRExFdEJRVXNzU1VGQlNTeEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNN1FVRkROME1zVVVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1kwRkJZeXhEUVVGRExFdEJRVXNzUjBGQlJ5eGpRVUZqTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRha1VzVFVGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF6czdRVUZGYmtNc1RVRkJTU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEUxQlFVMHNSVUZCUlR0QlFVTnlSQ3hQUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4TlFVRk5MRWRCUVVjc1RVRkJUU3hEUVVGRE8wZEJRM0pET3p0QlFVVkVMRTFCUVVrc1EwRkJReXhIUVVGSExFTkJRVU03UVVGRFVpeFJRVUZMTEVWQlFVVXNTMEZCU3p0QlFVTmFMRTlCUVVrc1JVRkJSU3hKUVVGSk8wZEJRMVlzUTBGQlF5eERRVUZET3p0QlFVVklMRTFCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETzBWQlEycENPenRCUVVWRUxHZENRVUZsTERKQ1FVRlRMRU5CUVVNN08wRkJSWHBDTEV0QlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1YwRkJWeXhEUVVGRE8wRkJRelZDTEV0QlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRE8wRkJRM0JDTEV0QlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRMlFzUzBGQlNTeERRVUZETEZkQlFWY3NSMEZCUnl4SlFVRkpMRU5CUVVNN1FVRkRlRUlzUzBGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4TFFVRkxMRU5CUVVNN1FVRkRkRUlzUzBGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4SlFVRkxMRmxCUVZrN1FVRkRhRU1zVFVGQlNTeEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMR1ZCUVdVc1EwRkJRenM3UVVGRkwwSXNTVUZCUlN4SFFVRkhMRWxCUVVrc1EwRkJRenRCUVVOV0xHbENRVUZsTEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUTNKQ0xFOUJRVXNzUjBGQlJ5eERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkRiRUlzVDBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03TzBGQlJXcERMRWRCUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNVVUZCVVN4RlFVRkZMRlZCUVZVc1RVRkJUU3hGUVVGRk8wRkJRM2hETEU5QlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRVVVzUTBGQlF5eFhRVUZYTEVOQlFVTXNSVUZCUlR0QlFVTndReXhUUVVGTExFTkJRMGdzVjBGQlZ5eERRVUZETERoQ1FVRTRRaXhEUVVGRExFTkJRek5ETEZGQlFWRXNRMEZCUXl4RlFVRkZMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03U1VGRE0wSTdPMEZCUlVRc2EwSkJRV1VzUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCVlN4UlFVRlJMRVZCUVVVN1FVRkRNME1zV1VGQlVTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMGxCUTJwQ0xFTkJRVU1zUTBGQlF6dEhRVU5JTEVOQlFVTXNRMEZCUXpzN1FVRkZTQ3hOUVVGSkxFTkJRVU1zVTBGQlV5eEhRVUZITEZkQlFWY3NRMEZCUXp0QlFVTTNRaXhOUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEZWQlFWVXNRMEZCUXp0QlFVTXpRaXhOUVVGSkxFTkJRVU1zVTBGQlV5eEhRVUZITEZkQlFWY3NRMEZCUXpzN1FVRkZOMElzVFVGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4WlFVRlpPMEZCUTNaQ0xGVkJRVThzYzBKQlFVc3NUVUZCVFN4RlFVRkZMRU5CUVVNc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eFZRVUZWTEVWQlFVVXNUVUZCVFN4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRE8wZEJRMmhGTEVOQlFVTTdPMEZCUlVZc01rSkJRWGRDTEVsQlFVa3NSVUZCUlR0QlFVTTNRaXhSUVVGTExFVkJRVVU3UVVGRFRpeFBRVUZITEVWQlFVVXNaVUZCV1R0QlFVTm9RaXhaUVVGUExFMUJRVTBzUTBGQlF5eFZRVUZWTEVOQlFVTTdTMEZEZWtJN08wRkJSVVFzWjBKQlFWa3NSVUZCUlN4TFFVRkxPMGxCUTI1Q096dEJRVVZFTEZOQlFVMHNSVUZCUlR0QlFVTlFMRTlCUVVjc1JVRkJSU3hsUVVGWk8wRkJRMmhDTEZsQlFVOHNUVUZCVFN4RFFVRkRMRmRCUVZjc1EwRkJRenRMUVVNeFFqczdRVUZGUkN4blFrRkJXU3hGUVVGRkxFdEJRVXM3U1VGRGJrSTdPMEZCUlVRc1kwRkJWeXhGUVVGRk8wRkJRMW9zVDBGQlJ5eEZRVUZGTEdWQlFWazdRVUZEYUVJc1UwRkJTU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRE96dEJRVVZvUXl4aFFVRlJMRWxCUVVrN1FVRkRXQ3hYUVVGTExFdEJRVXNzUjBGQlJ5eEhRVUZITEVsQlFVa3NTMEZCU3l4SFFVRkhMRWRCUVVjN1FVRkJSU3hqUVVGUExGZEJRVmNzUTBGQlF6dEJRVU53UkN4WFFVRkxMRXRCUVVzc1IwRkJSeXhIUVVGSE8wRkJRVVVzWTBGQlR5eFhRVUZYTEVOQlFVTTdRVUZEY2tNc1YwRkJTeXhMUVVGTExFZEJRVWNzUjBGQlJ6dEJRVUZGTEdOQlFVOHNWVUZCVlN4RFFVRkRPMEZCUVVFc1RVRkRjRU03UzBGRFJEdEpRVU5FTzBkQlEwUXNRMEZCUXl4RFFVRkRPenRCUVVWSUxFMUJRVWtzUTBGQlF5eFJRVUZSTEVkQlFVY3NWVUZCVlN4UlFVRlJMRVZCUVVVN1FVRkRia01zYTBKQlFXVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03UjBGREwwSXNRMEZCUXp0RlFVVkdMRVZCUVVNc1EwRkJReXhEUVVGRE96dEJRVVZLTEV0QlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1dVRkJXVHRCUVVNelFpeE5RVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE96dEJRVVY2UWl4WFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEzSkNMRTFCUVVrc1EwRkJReXhqUVVGakxFVkJRVVVzUTBGQlF6dEJRVU4wUWl4TlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFTkJRVU03TzBGQlJXeENMRTFCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF6czdRVUZGTjBNc1UwRkJUeXhKUVVGSkxFTkJRVU03UlVGRFdpeERRVUZET3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQk5FSkdMRXRCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzVlVGQlZTeFRRVUZUTEVWQlFVVXNVVUZCVVN4RlFVRkZPMEZCUXpWRExFMUJRVWtzVVVGQlVTeEZRVUZGTEUxQlFVMHNSVUZCUlN4VFFVRlRMRVZCUVVVc1IwRkJSeXhEUVVGRE96dEJRVVZ5UXl4TlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUlVGQlJUdEJRVU4wUWl4UFFVRkpMRU5CUVVNc1YwRkJWeXhIUVVGSExFVkJRVVVzUTBGQlF6czdRVUZGZEVJc1RVRkJSeXhIUVVGSE8wRkJRMHdzVFVGQlJTeEZRVUZGTEU5QlFVODdRVUZEV0N4TlFVRkZMRVZCUVVVc1QwRkJUenRCUVVOWUxFMUJRVVVzUlVGQlJTeE5RVUZOTzBGQlExWXNUVUZCUlN4RlFVRkZMRXRCUVVzN1FVRkRWQ3hOUVVGRkxFVkJRVVVzUzBGQlN6dEJRVU5VTEUxQlFVVXNSVUZCUlN4TlFVRk5PMEZCUTFZc1RVRkJSU3hGUVVGRkxFbEJRVWs3UVVGRFVpeE5RVUZGTEVWQlFVVXNUMEZCVHp0QlFVTllMRTFCUVVVc1JVRkJSU3hOUVVGTk8wRkJRMVlzVFVGQlJTeEZRVUZGTEUxQlFVMDdRVUZEVml4VFFVRkxMRVZCUVVVc1JVRkJSVHRCUVVOVUxGTkJRVXNzUlVGQlJTeEZRVUZGTzBGQlExUXNVVUZCU1N4RlFVRkhMRVZCUVVVN1FVRkRWQ3hQUVVGSExFVkJRVWtzUlVGQlJUdEJRVU5VTEU5QlFVY3NSVUZCU1N4RlFVRkZPMEZCUTFRc1VVRkJTU3hGUVVGSExFVkJRVVU3UVVGRFZDeE5RVUZGTEVWQlFVc3NSVUZCUlR0QlFVTlVMRk5CUVVzc1JVRkJSU3hGUVVGRk8wRkJRMVFzVVVGQlNTeEZRVUZITEVWQlFVVTdRVUZEVkN4UlFVRkpMRVZCUVVjc1JVRkJSVHRKUVVOVUxFTkJRVU03TzBGQlJVWXNXVUZCVXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hGUVVGRkxFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkROMElzVjBGQlVTeEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTmtMRk5CUVUwc1IwRkJSeXhGUVVGRkxFTkJRVU03TzBGQlJWb3NUMEZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhUUVVGVExFVkJRVVVzVlVGQlZTeE5RVUZOTEVWQlFVVTdRVUZEY0VNc1VVRkJTU3hSUVVGUkxFVkJRVVVzUjBGQlJ5eEZRVUZGTEZOQlFWTXNSVUZCUlN4WFFVRlhMRVZCUVVVc1QwRkJUeXhGUVVGRkxFOUJRVThzUTBGQlF6czdRVUZGTlVRc1dVRkJVU3hIUVVGSkxFTkJRVU1zUlVGQlF5eERRVUZETEZOQlFWTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZMTEVkQlFVY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03UVVGRGVrVXNUMEZCUnl4SFFVRkpMRkZCUVZFc1IwRkJTU3hSUVVGUkxFZEJRVWNzUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hOUVVGTkxFTkJRVU1zV1VGQldTeERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRCUVVONlJpeGhRVUZUTEVkQlFVY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hGUVVGRkxFMUJRVTBzUTBGQlF5eFBRVUZQTEVWQlFVVXNUVUZCVFN4RFFVRkRMRTFCUVUwc1JVRkJSU3hOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdRVUZETjBVc1pVRkJWeXhIUVVGSExFVkJRVVVzUTBGQlF6czdPMEZCUjJwQ0xHRkJRVk1zUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCVlN4aFFVRmhMRVZCUVVVc1RVRkJUU3hGUVVGRk96dEJRVVZzUkN4VFFVRkpMR0ZCUVdFc1JVRkJSU3hYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzB0QlF6VkVMRU5CUVVNc1EwRkJRenM3TzBGQlIwZ3NVVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEU5QlFVODdPenRCUVVjelJDeFhRVUZQTEVkQlFVY3NUVUZCVFN4RFFVRkRMRTFCUVUwc1NVRkRja0lzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4TFFVTnNReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXpzN1FVRkZNVU1zVjBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03TzBGQlJYQkRMRkZCUVVrc1QwRkJUeXhGUVVGRk8wRkJRMW9zV1VGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1RVRkJUU3hGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZET3p0QlFVVndReXhoUVVGUkxFZEJRVWNzVjBGQlZ5eERRVUZETEVkQlFVY3NRMEZCUXl4VlFVRlZMRWxCUVVrc1JVRkJSU3hOUVVGTkxFVkJRVVU3UVVGRGJFUXNWVUZCU1N4SFFVRkhMRWRCUVVjc1VVRkJVU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzBGQlF6TkNMR0ZCUVU4c1YwRkJWeXhEUVVGRExGZEJRVmNzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenROUVVNM1F5eERRVUZETEVOQlFVTTdRVUZEU0N4WFFVRk5MRWRCUVVjc1JVRkJSU3hEUVVGRE96czdRVUZIV2l4WFFVRk5MRU5CUVVNc1kwRkJZeXhGUVVGRkxFTkJRVU03UzBGRGVFSTdTVUZEUkN4RFFVRkRMRU5CUVVNN08wRkJSVWdzVDBGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4UFFVRlBMRVZCUVVVc1ZVRkJWU3hOUVVGTkxFVkJRVVU3UVVGRGJFTXNVVUZCU1N4SFFVRkhMRVZCUVVVc1MwRkJTeXhGUVVGRkxGRkJRVkVzUlVGQlJTeFRRVUZUTEVWQlFVVXNWMEZCVnl4RFFVRkRPenRCUVVWcVJDeFBRVUZITEVkQlFVa3NVVUZCVVN4SFFVRkpMRkZCUVZFc1IwRkJSeXhIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRTFCUVUwc1EwRkJReXhaUVVGWkxFTkJRVU1zVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMEZCUTNwR0xGTkJRVXNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRemxDTEZsQlFWRXNSMEZCU1N4RFFVRkRMRVZCUVVNc1EwRkJReXhUUVVGVExFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTeXhIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPenRCUVVWNlJTeGhRVUZUTEVkQlFVY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hGUVVGRkxFMUJRVTBzUTBGQlF5eFBRVUZQTEVWQlFVVXNUVUZCVFN4RFFVRkRMRTFCUVUwc1JVRkJSU3hOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdRVUZETjBVc1pVRkJWeXhIUVVGSExFVkJRVVVzUTBGQlF6czdPMEZCUjJwQ0xHRkJRVk1zUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCVlN4aFFVRmhMRVZCUVVVc1RVRkJUU3hGUVVGRk96dEJRVVZzUkN4VFFVRkpMR0ZCUVdFc1JVRkJSU3hYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzB0QlF6VkVMRU5CUVVNc1EwRkJRenM3TzBGQlIwZ3NVVUZCU1N4SFFVRkhMRXRCUVVzc1VVRkJVU3hGUVVGRk96dEJRVVZ5UWl4aFFVRlJMRWRCUVVjc1YwRkJWeXhEUVVGRExFZEJRVWNzUTBGQlF5eFZRVUZWTEVsQlFVa3NSVUZCUlN4TlFVRk5MRVZCUVVVN1FVRkRiRVFzVlVGQlNTeEhRVUZITEVkQlFVY3NVVUZCVVN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8wRkJRek5DTEdGQlFVOHNWMEZCVnl4RFFVRkRMRmRCUVZjc1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0TlFVTTNReXhEUVVGRExFTkJRVU03TzBGQlJVZ3NWMEZCVFN4SFFVRkhMRVZCUVVVc1EwRkJRenRMUVVOYUxFMUJSVWs3TzBGQlJVb3NVMEZCU1N4UlFVRlJMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUlVGQlJUczdRVUZGZUVJc1ZVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVTdRVUZEZWtNc1lVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03VDBGRGFFTTdUVUZEUkRzN1FVRkZSQ3hUUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZGTEZGQlFWRXNRMEZCUXl4TlFVRk5MRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEzUkRMRk5CUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zVFVGQlRTeEZRVUZGTEUxQlFVMHNSMEZCUnl4RlFVRkZMRU5CUVVNN1MwRkRiRU03U1VGRFJDeERRVUZETEVOQlFVTTdSMEZEU0RzN1FVRkZSQ3hOUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRkZCUVZFc1EwRkJRenM3UVVGRmRrTXNVMEZCVHl4SlFVRkpMRU5CUVVNN1JVRkRXaXhEUVVGRE96dEJRVVZHTEV0QlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1ZVRkJWU3hIUVVGSExFVkJRVVVzWlVGQlpTeEZRVUZGTzBGQlF6ZERMRTFCUVVrc1UwRkJVeXhGUVVGRkxGRkJRVkVzUlVGQlJTeGpRVUZqTEVWQlFVVXNVVUZCVVN4RFFVRkRPenRCUVVWc1JDeE5RVUZKTEZOQlFWTXNRMEZCUXl4TlFVRk5MRXRCUVVzc1EwRkJReXhKUVVGSkxFOUJRVThzUjBGQlJ5eExRVUZMTEZWQlFWVXNSVUZCUlR0QlFVTjRSQ3hyUWtGQlpTeEhRVUZITEhsQ1FVRlBMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU55UXl4VlFVRlBMRWxCUVVrc1EwRkJRenRIUVVOYU96dEJRVVZFTEUxQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExGTkJRVk1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc05rSkJRVmNzVFVGQlRTeEZRVUZGTEVOQlFVTTdPMEZCUlhoRkxFMUJRVWtzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1JVRkJSVHRCUVVOb1F5eFpRVUZUTzBGQlExUXNhVUpCUVdNc1IwRkJSeXhGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eERRVUZETzBGQlEyeEVMRmxCUVZNc1IwRkJTU3hsUVVGbExFTkJRVU1zWVVGQllTeERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkpMRWxCUVVrc1IwRkJSeXhsUVVGbExFTkJRVU03UVVGRE0wVXNWMEZCVVN4SFFVRkpMRTlCUVU4c1IwRkJSeXhMUVVGTExGRkJRVkVzUjBGQlNTeGpRVUZqTEVkQlFVTXNZVUZCWVN4SlFVRkZMRWRCUVVjc1IwRkJReXhEUVVGRExFTkJRVU1zUjBGQlF5eEhRVUZITEVkQlFVY3NSMEZCUnl4SFFVRkRMRWRCUVVjc1EwRkJRenRCUVVNeFJpeFhRVUZSTEVkQlFVY3NVMEZCVXl4RFFVRkRMRTFCUVUwc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF5eFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZET3p0QlFVVTNSU3hYUVVGUkxFTkJRVU1zVFVGQlRTeEhRVUZITEZGQlFWRXNRMEZCUXp0QlFVTXpRaXhQUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NSVUZCUlR0QlFVTnVRaXhaUVVGUkxFTkJRVU1zU1VGQlNTeEhRVUZITEZGQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVTTdTVUZEY2tRN1IwRkRSQ3hOUVVWSk8wRkJRMG9zVDBGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNN1FVRkRha0lzVTBGQlN5eEZRVUZITEU5QlFVOHNSMEZCUnl4TFFVRkxMRkZCUVZFc1IwRkJTU3hIUVVGSExFZEJRVWNzU1VGQlNUdEJRVU0zUXl4UlFVRkpMRVZCUVVjc1QwRkJUeXhIUVVGSExFdEJRVXNzVVVGQlVTeEhRVUZKTEVkQlFVY3NSMEZCUnl4SlFVRkpPMEZCUXpWRExHdENRVUZqTEVWQlFVVXNaVUZCWlR0SlFVTXZRaXhEUVVGRExFTkJRVU03UjBGRFNEczdRVUZGUkN4VFFVRlBMRWxCUVVrc1EwRkJRenRGUVVOYUxFTkJRVU03TzBGQlJVWXNTMEZCU1N4RFFVRkRMR05CUVdNc1IwRkJSeXhaUVVGWk8wRkJRMnBETEUxQlFVa3NZMEZCWXl4RlFVRkZMRk5CUVZNc1JVRkJSU3hWUVVGVkxFTkJRVU03TzBGQlJURkRMRTFCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEZOQlFWTXNRMEZCUXl4RlFVRkZMRTlCUVU4c1NVRkJTU3hEUVVGRE96dEJRVVZxUkN4blFrRkJZeXhIUVVGSExFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMR2RDUVVGblFpeERRVUZETEVOQlFVTTdRVUZEYkVRc1YwRkJVeXhIUVVGSkxHVkJRV1VzUTBGQlF5eGhRVUZoTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVrc1NVRkJTU3hIUVVGSExHVkJRV1VzUTBGQlF6dEJRVU16UlN4WlFVRlZMRWRCUVVjc1JVRkJSU3hEUVVGRE96dEJRVVZvUWl4TlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExHTkJRV01zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzVFVGQlRTeEZRVUZGTEV0QlFVc3NSVUZCUlR0QlFVTndSU3hQUVVGSkxFdEJRVXNzUlVGQlJTeE5RVUZOTEVWQlFVVXNUVUZCVFN4RlFVRkZMRWRCUVVjc1JVRkJSU3hGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEZOQlFWTXNRMEZCUXpzN1FVRkZja1FzVVVGQlN5eEhRVUZITEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVOcVFpeExRVUZGTEVkQlFVY3NTMEZCU3l4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRE8wRkJRMmhDTEUxQlFVY3NSMEZCU1N4RlFVRkZMRWRCUVVrc1RVRkJUU3hKUVVGSkxFVkJRVVVzUjBGQlJ5eE5RVUZOTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNN1FVRkROME1zVTBGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTnVReXhaUVVGVExFZEJRVWNzUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJRenRCUVVOMlF5eFRRVUZOTEVkQlFVY3NlVUpCUVdFc1NVRkJTU3hEUVVGRExGTkJRVk1zUlVGQlJTeExRVUZMTEVWQlFVVXNUVUZCVFN4SlFVRkpMRTFCUVUwc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF6dEJRVU01UlN4VFFVRk5MRU5CUVVNc1RVRkJUU3hIUVVGSExFMUJRVTBzUTBGQlF6dEJRVU4yUWl4VFFVRk5MRU5CUVVNc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF6czdRVUZGYmtJc1QwRkJTU3hMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRWxCUVVrc1JVRkJSU3hWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPenRCUVVVelJDeFBRVUZKTEVkQlFVY3NTMEZCU3l4TlFVRk5MRWxCUVVrc1UwRkJVeXhGUVVGRk8wRkJRMmhETEhOQ1FVRkxMRk5CUVZNc1EwRkJReXhKUVVGSkxFVkJRVVVzYTBKQlFVc3NWMEZCVnl4RFFVRkZMRWRCUVVjc1MwRkJTeXhOUVVGTkxFbEJRVWtzUlVGQlJTeEpRVUZMTEZOQlFWTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF6dEpRVU14Ump0SFFVTkVMRU5CUVVNc1EwRkJReXhEUVVGRE96dEJRVVZLTEUxQlFVa3NWVUZCVlN4RFFVRkRMRTFCUVUwc1JVRkJSU3hKUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEZWQlFWVXNRMEZCUXpzN1FVRkZha1FzVTBGQlR5eEpRVUZKTEVOQlFVTTdSVUZEV2l4RFFVRkRPenRCUVVWR0xFdEJRVWtzUTBGQlF5eFZRVUZWTEVkQlFVY3NXVUZCV1R0QlFVTTNRaXhOUVVGSkxFOUJRVThzUTBGQlF6czdRVUZGV2l4WFFVRlRMRTlCUVU4c1EwRkJSU3hOUVVGTkxFVkJRVVVzUzBGQlN5eEZRVUZGTzBGQlEyaERMRWxCUVVNc1RVRkJUU3hGUVVGRkxFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJWU3hOUVVGTkxFVkJRVVU3UVVGRGFrUXNVVUZCU1N4TlFVRk5MRU5CUVVNc1lVRkJZU3hKUVVGSkxFMUJRVTBzUTBGQlF5eFpRVUZaTEVOQlFVTXNaVUZCWlN4RFFVRkRMRWxCUVVrc1RVRkJUU3hEUVVGRExHRkJRV0VzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVN1FVRkRjRWNzVjBGQlRTeERRVUZETEdGQlFXRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03UzBGRGJFTTdTVUZEUkN4RFFVRkRMRU5CUVVNN1IwRkRTRHM3UVVGRlJDeFRRVUZQTEVkQlFVY3NOa0pCUVZjc1RVRkJUU3hGUVVGRkxFTkJRVU03TzBGQlJUbENMRTFCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zV1VGQldTeEZRVUZGTEZWQlFWVXNUVUZCVFN4RlFVRkZPMEZCUTNaRExFOUJRVWtzVDBGQlR5eEZRVUZGTEU5QlFVOHNRMEZCUXpzN1FVRkZja0lzVDBGQlNTeE5RVUZOTEVOQlFVTXNVMEZCVXl4TFFVRkxMRXRCUVVzc1JVRkJSVHRCUVVNdlFpeFhRVUZQTEVkQlFVY3NUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zVTBGQlV5eEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRPMEZCUTI1RUxGZEJRVThzUjBGQlJ5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RFFVRkRMRmxCUVZrc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF6czdRVUZGTDBNc1VVRkJTU3hQUVVGUExFVkJRVVU3UVVGRFdpeFpRVUZQTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVZVc1QwRkJUeXhGUVVGRk8wRkJRMnhETEdGQlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03UVVGRGRFSXNZVUZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhYUVVGWExFZEJRVWNzUTBGQlF5eERRVUZETzAxQlF6bENMRU5CUVVNc1EwRkJRenRMUVVOSU96dEJRVVZFTEZGQlFVa3NUVUZCVFN4RFFVRkRMRk5CUVZNc1MwRkJTeXhaUVVGWkxFVkJRVVU3UVVGRGRFTXNVMEZCU1N4UFFVRlBMRVZCUVVVc1QwRkJUeXhEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZWTEU5QlFVOHNSVUZCUlR0QlFVTXZReXhoUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNSMEZCUnl4SFFVRkhMRU5CUVVNN1RVRkRNMElzUTBGQlF5eERRVUZETzB0QlEwZzdTVUZEUkRzN1FVRkZSQ3hWUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETzBGQlExb3NVMEZCU3l4RlFVRkZMRTFCUVUwc1EwRkJReXhOUVVGTk8wRkJRM0JDTEZGQlFVa3NSVUZCUlN4TlFVRk5MRU5CUVVNc1UwRkJVenRKUVVOMFFpeERRVUZETEVOQlFVTTdSMEZEU0N4RFFVRkRMRU5CUVVNN08wRkJSVWdzVFVGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4NVFrRkJlVUlzUlVGQlJTeFZRVUZWTEUxQlFVMHNSVUZCUlR0QlFVTndSQ3hQUVVGSkxFOUJRVThzUlVGQlJTeExRVUZMTEVWQlFVVXNUMEZCVHl4RFFVRkRPenRCUVVVMVFpeFZRVUZQTEVkQlFVY3NUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zVFVGQlRTeEZRVUZGTEU5QlFVOHNRMEZCUXp0QlFVTTNReXhSUVVGTExFZEJRVWNzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF6dEJRVU5xUXl4VlFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eFpRVUZaTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN08wRkJSUzlETEZWQlFVOHNRMEZCUXl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03UVVGRGVFSXNWVUZCVHl4RFFVRkRMRXRCUVVzc1JVRkJSU3hOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdPMEZCUlRsQ0xFOUJRVWtzVFVGQlRTeERRVUZETEZOQlFWTXNTMEZCU3l4WlFVRlpMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEZsQlFWa3NSVUZCUlN4TlFVRk5MRU5CUVVNc1JVRkJSVHRCUVVNMVJTeFJRVUZKTEU5QlFVOHNSVUZCUlN4UFFVRlBMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVlVzVDBGQlR5eEZRVUZGTzBGQlF5OURMRmxCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXp0TFFVTjZRaXhEUVVGRExFTkJRVU03U1VGRFNEdEhRVU5FTEVOQlFVTXNRMEZCUXp0RlFVTklMRU5CUVVNN08wRkJSVVlzUzBGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4WlFVRlpPMEZCUXpOQ0xGTkJRVTg3UVVGRFRpeG5Ra0ZCWVN4RlFVRkZMRWxCUVVrc1EwRkJReXhoUVVGaExFVkJRVVVzUTBGQlF5eExRVUZMTEVWQlFVVTdSMEZETTBNc1EwRkJRenRGUVVOR0xFTkJRVU03TzBGQlJVWXNTMEZCU1N4RFFVRkRMR0ZCUVdFc1IwRkJSeXhaUVVGWk8wRkJRMmhETEZOQlFVOHNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03UlVGRGVrUXNRMEZCUXpzN1FVRkZSaXhMUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEZsQlFWazdRVUZEZGtJc1UwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eGxRVUZsTEVOQlFVTXNRMEZCUXp0QlFVTTNRaXgzUWtGQlN5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wVkJRM1pDTEVOQlFVTTdPMEZCUlVZc1MwRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eFpRVUZaTzBGQlEzWkNMRk5CUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdRVUZEZUVJc2QwSkJRVXNzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRGUVVOMlFpeERRVUZET3pzN096dEJRVXRHTEV0QlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1ZVRkJWU3hGUVVGRkxGbEJRVms3TzBGQlJXNURMRTFCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRPMEZCUXk5Q0xFMUJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRlZCUVZVc1IwRkJSeXhoUVVGaExFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXpzN1FVRkZla1FzVTBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hGUVVGRkxFVkJRVVVzVTBGQlV5eEpRVUZGTEVsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1NVRkJTU3hIUVVGSExGRkJRVkVzUTBGQlF5eEhRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkRPMFZCUTI1R0xFTkJRVU1zUTBGQlF6czdPenM3UVVGTFNDeExRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTFCUVUwc1JVRkJSU3haUVVGWk8wRkJReTlDTEUxQlFVa3NUMEZCVHl4RFFVRkRPenRCUVVWYUxGTkJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTXNZVUZCWVN4RlFVRkZMRU5CUVVNN08wRkJSUzlDTEUxQlFVa3NUMEZCVHl4RlFVRkZMRTlCUVU4c1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF6dEZRVU0xUWl4RFFVRkRMRU5CUVVNN08wRkJSVWdzUzBGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRVZCUVVVc1dVRkJXVHRCUVVOb1F5eE5RVUZKTEU5QlFVOHNRMEZCUXpzN1FVRkZXaXhUUVVGUExFZEJRVWNzU1VGQlNTeERRVUZETEdGQlFXRXNSVUZCUlN4RFFVRkRPenRCUVVVdlFpeE5RVUZKTEU5QlFVOHNSVUZCUlN4UFFVRlBMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU03UlVGRE5VSXNRMEZCUXl4RFFVRkRPME5CUlVnc1EwRkJReXhEUVVGRE96dHhRa0ZGV1N4SlFVRkpJaXdpWm1sc1pTSTZJalF4TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQk9iMlJsSUhOamIzQmxJR1p2Y2lCMGFHVWdkRzl3SUd4bGRtVnNJR2RoYldVZ2JtOWtaUzVjYmlBcUwxeHVhVzF3YjNKMElIVjBhV3dnWm5KdmJTQW5kWFJwYkNjN1hHNXBiWEJ2Y25RZ1oyRnRaU0JtY205dElDZHdiR0Y1TG1kaGJXVW5PMXh1YVcxd2IzSjBJRWRzYjJKaGJGTmpiM0JsSUdaeWIyMGdKM1I1Y0dWekwwZHNiMkpoYkZOamIzQmxKenRjYm1sdGNHOXlkQ0JUWTNKbFpXNGdabkp2YlNBbmRIbHdaWE12VTJOeVpXVnVKenRjYm1sdGNHOXlkQ0JEYjJ4c1pXTjBhVzl1SUdaeWIyMGdKM1I1Y0dWekwwTnZiR3hsWTNScGIyNG5PMXh1YVcxd2IzSjBJSHNnWTNKbFlYUmxSVzUwYVhSNUlIMGdabkp2YlNBbmRIbHdaWE12VTJOdmNHVW5PMXh1YVcxd2IzSjBJSHNnVTJsNlpTQjlJR1p5YjIwZ0ozUjVjR1Z6TDBScGJXVnVjMmx2Ym5Nbk8xeHVYRzUyWVhJZ1IyRnRaU0E5SUVkc2IySmhiRk5qYjNCbExtVjRkR1Z1WkNobWRXNWpkR2x2YmlBb0tTQjdYRzVjYmx4MGRtRnlJRlpwWlhkd2IzSjBMQ0J6WTNKbFpXNVFjbTkwYjNSNWNHVTdYRzVjYmx4MEx5b3FYRzVjZENBcUlGTmpZV3hsY3lCMGFHVWdaMkZ0WlNCMmFXVjNJSFJ2SUdacGJHd2dkR2hsSUdKeWIzZHpaWElnZDJsdVpHOTNMbHh1WEhRZ0tpOWNibHgwWm5WdVkzUnBiMjRnYzJOaGJHVkhZVzFsSUNncElIdGNibHgwWEhSMllYSWdkbkJUYVhwbExDQm5ZVzFsUkdsdFpXNXphVzl1Y3l3Z2QybGtkR2dzSUdobGFXZG9kQ3dnZW05dmJUdGNibHh1WEhSY2RIWndVMmw2WlNBOUlIUm9hWE11ZG1sbGQzQnZjblF1YzJsNlpTZ3BPMXh1WEhSY2RHZGhiV1ZFYVcxbGJuTnBiMjV6SUQwZ1oyRnRaUzVqYjI1bWFXY29KMlJwYldWdWMybHZibk1uS1R0Y2JseDBYSFIzYVdSMGFDQTlJR2RoYldWRWFXMWxibk5wYjI1ekxuZHBaSFJvSUh4OElIUm9hWE11ZDJsa2RHZ29LVHRjYmx4MFhIUm9aV2xuYUhRZ1BTQk5ZWFJvTG5KdmRXNWtLR2RoYldWRWFXMWxibk5wYjI1ekxuZHBaSFJvSUM4Z1oyRnRaVVJwYldWdWMybHZibk11Y21GMGFXOHBPMXh1WEhSY2RIcHZiMjBnUFNCMGFHbHpMblpwWlhkd2IzSjBMbmRwWkhSb0lDOGdkMmxrZEdnN1hHNWNibHgwWEhScFppQW9UV0YwYUM1eWIzVnVaQ2hvWldsbmFIUWdLaUI2YjI5dEtTQStJSFJvYVhNdWRtbGxkM0J2Y25RdWFHVnBaMmgwS1NCN1hHNWNkRngwWEhSNmIyOXRJRDBnZEdocGN5NTJhV1YzY0c5eWRDNW9aV2xuYUhRZ0x5Qm9aV2xuYUhRN1hHNWNkRngwZlZ4dVhHNWNkRngwZEdocGN5NWpjM01vZTF4dVhIUmNkRngwZDJsa2RHZzZJSGRwWkhSb0xGeHVYSFJjZEZ4MGVtOXZiVG9nZW05dmJWeHVYSFJjZEgwcE8xeHVYRzVjZEZ4MGRHaHBjeTU2YjI5dElEMGdlbTl2YlR0Y2JseDBmVnh1WEc1Y2RITmpjbVZsYmxCeWIzUnZkSGx3WlNBOUlGTmpjbVZsYmp0Y2JseHVYSFIwYUdsekxtSmhjMlZVZVhCbElEMGdKMVJaVUVWZlIwRk5SU2M3WEc1Y2RIUm9hWE11YzJOeVpXVnVjeUE5SUc1MWJHdzdYRzVjZEhSb2FYTXVlbTl2YlNBOUlERTdYRzVjZEhSb2FYTXVhMlY1UTI5dGJXRnVaSE1nUFNCdWRXeHNPMXh1WEhSMGFHbHpMbVJsYlc5TmIyUmxJRDBnWm1Gc2MyVTdYRzVjZEhSb2FYTXVkbWxsZDNCdmNuUWdQU0J1WlhjZ0tHWjFibU4wYVc5dUlDZ3BJSHRjYmx4MFhIUjJZWElnZG5Bc0lDUm9kRzFzTENCU1JWTkpXa1ZmU0VGT1JFeEZVbE03WEc1Y2JseDBYSFIyY0NBOUlIUm9hWE03WEc1Y2RGeDBVa1ZUU1ZwRlgwaEJUa1JNUlZKVElEMGdXMTA3WEc1Y2RGeDBKR2gwYld3Z1BTQWtLQ2RvZEcxc0p5azdYRzVjZEZ4MEpHaDBiV3d1WVdSa1EyeGhjM01vZEdocGN5NXZjbWxsYm5SaGRHbHZiaWs3WEc1Y2JseDBYSFFrS0hkcGJtUnZkeWt1YjI0b0ozSmxjMmw2WlNjc0lHWjFibU4wYVc5dUlDaGZaWFpsYm5RcElIdGNibHgwWEhSY2RHbG1JQ2doSkdoMGJXd3VhR0Z6UTJ4aGMzTW9kbkF1YjNKcFpXNTBZWFJwYjI0cEtTQjdYRzVjZEZ4MFhIUmNkQ1JvZEcxc1hHNWNkRngwWEhSY2RGeDBMbkpsYlc5MlpVTnNZWE56S0NkemNYVmhjbVZwYzJnZ2JHRnVaSE5qWVhCbElIQnliM1J5WVdsMEp5bGNibHgwWEhSY2RGeDBYSFF1WVdSa1EyeGhjM01vZG5BdWIzSnBaVzUwWVhScGIyNHBPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJTUlZOSldrVmZTRUZPUkV4RlVsTXVabTl5UldGamFDaG1kVzVqZEdsdmJpQW9YMmhoYm1Sc1pYSXBJSHRjYmx4MFhIUmNkRngwWDJoaGJtUnNaWElvWDJWMlpXNTBLVHRjYmx4MFhIUmNkSDBwTzF4dVhIUmNkSDBwTzF4dVhHNWNkRngwZEdocGN5NU1RVTVFVTBOQlVFVWdQU0FuYkdGdVpITmpZWEJsSnp0Y2JseDBYSFIwYUdsekxsQlNUMVJTUVVsVUlEMGdKM0J5YjNSeVlXbDBKenRjYmx4MFhIUjBhR2x6TGxOUlZVRlNSVWxUU0NBOUlDZHpjWFZoY21WcGMyZ25PMXh1WEhSY2RGeHVYSFJjZEhSb2FYTXVjMmw2WlNBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQlRhWHBsTG1OeVpXRjBaU2dwTG5ObGRDaDNhVzVrYjNjdWFXNXVaWEpYYVdSMGFDd2dkMmx1Wkc5M0xtbHVibVZ5U0dWcFoyaDBLVHRjYmx4MFhIUjlPMXh1WEc1Y2RGeDBUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblJwWlhNb2RHaHBjeXdnZTF4dVhIUmNkRngwZDJsa2RHZzZJSHRjYmx4MFhIUmNkRngwWjJWME9pQm1kVzVqZEdsdmJpQW9LU0I3WEc1Y2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUhkcGJtUnZkeTVwYm01bGNsZHBaSFJvTzF4dVhIUmNkRngwWEhSOUxGeHVYRzVjZEZ4MFhIUmNkR052Ym1acFozVnlZV0pzWlRvZ1ptRnNjMlZjYmx4MFhIUmNkSDBzWEc1Y2JseDBYSFJjZEdobGFXZG9kRG9nZTF4dVhIUmNkRngwWEhSblpYUTZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseDBYSFJjZEZ4MFhIUnlaWFIxY200Z2QybHVaRzkzTG1sdWJtVnlTR1ZwWjJoME8xeHVYSFJjZEZ4MFhIUjlMRnh1WEc1Y2RGeDBYSFJjZEdOdmJtWnBaM1Z5WVdKc1pUb2dabUZzYzJWY2JseDBYSFJjZEgwc1hHNWNibHgwWEhSY2RHOXlhV1Z1ZEdGMGFXOXVPaUI3WEc1Y2RGeDBYSFJjZEdkbGREb2dablZ1WTNScGIyNGdLQ2tnZTF4dVhIUmNkRngwWEhSY2RIWmhjaUJ5WVhScGJ5QTlJSFJvYVhNdWMybDZaU2dwTG5KaGRHbHZLQ2s3WEc1Y2JseDBYSFJjZEZ4MFhIUnpkMmwwWTJnZ0tIUnlkV1VwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkR05oYzJVZ2NtRjBhVzhnUGlBd0xqa2dKaVlnY21GMGFXOGdQQ0F4TGpFNklISmxkSFZ5YmlBbmMzRjFZWEpsYVhOb0p6dGNibHgwWEhSY2RGeDBYSFJjZEdOaGMyVWdjbUYwYVc4Z1BpQXhMakU2SUhKbGRIVnliaUFuYkdGdVpITmpZWEJsSnp0Y2JseDBYSFJjZEZ4MFhIUmNkR05oYzJVZ2NtRjBhVzhnUENBd0xqazZJSEpsZEhWeWJpQW5jSEp2ZEhKaGFYUW5PMXh1WEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MGZWeHVYSFJjZEgwcE8xeHVYRzVjZEZ4MGRHaHBjeTV2YmxKbGMybDZaU0E5SUdaMWJtTjBhVzl1SUNoZmFHRnVaR3hsY2lrZ2UxeHVYSFJjZEZ4MFVrVlRTVnBGWDBoQlRrUk1SVkpUTG5CMWMyZ29YMmhoYm1Sc1pYSXBPMXh1WEhSY2RIMDdYRzVjYmx4MGZTazdPMXh1WEc1Y2RIUm9hWE11ZDJsc2JFbHVhWFFnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzVjZEZ4MGRHaHBjeTVoWkdSRGJHRnpjeWduY0d3dFoyRnRaU2NwTzF4dVhHNWNkRngwYzJOaGJHVkhZVzFsTG1OaGJHd29kR2hwY3lrN1hHNWNkRngwZEdocGN5NWpZWEIwZFhKbFUyTnlaV1Z1Y3lncE8xeHVYSFJjZEhSb2FYTXVkMkYwWTJoQmRXUnBieWdwTzF4dVhHNWNkRngwZEdocGN5NTJhV1YzY0c5eWRDNXZibEpsYzJsNlpTaDBhR2x6TG1KcGJtUW9jMk5oYkdWSFlXMWxLU2s3WEc1Y2JseDBYSFJ5WlhSMWNtNGdkR2hwY3p0Y2JseDBmVHRjYmx4dVhIUXZLaXBjYmx4MElDb2dWMkYwWTJnZ1ptOXlJSE53WldOcFptbGpJR3RsZVhNZ2IzSWdZMjl0WW1sdVlYUnBiMjRnYjJZZ2EyVjVjeTRnVGs5VVJUb2diV1YwWVNCclpYa2dZMjl0YldGdVpITWdSRThnVGs5VUlITjFjSEJ2Y25RZ1kyaHZjbVJ6SUNocExtVXVJRzFsZEdFclN5eENLUzVjYmx4MElDb2dJeU1qSUV0bGVTQk9ZVzFsYzF4dVhIUWdLaUF0SUNwdFpYUmhLam9nUTI5dGJXRnVaQ0FvWVd0aElFRndjR3hsSU9LTW1DQnZjaUIzYVc0cFhHNWNkQ0FxSUMwZ0ttRnNkQ282SUVGc2RDQW9ZV3RoSUU5d2RHbHZiaURpaktVcFhHNWNkQ0FxSUMwZ0tuTm9hV1owS2pvZ1UyaHBablFnNG9lcVhHNWNkQ0FxSUMwZ0ttTjBjbXdxT2lCRGIyNTBjbTlzSUY1Y2JseDBJQ29nTFNBcVpXNTBaWElxT2lCRmJuUmxjaUJ2Y2lCU1pYUjFjbTVjYmx4MElDb2dMU0FxWlhOaktqb2dSWE5qWVhCbFhHNWNkQ0FxSUMwZ0tteGxablFxT2lCTVpXWjBJR0Z5Y205M1hHNWNkQ0FxSUMwZ0tuVndLam9nVlhBZ1lYSnliM2RjYmx4MElDb2dMU0FxY21sbmFIUXFPaUJTYVdkb2RDQmhjbkp2ZDF4dVhIUWdLaUF0SUNwa2IzZHVLam9nUkc5M2JpQmhjbkp2ZDF4dVhIUWdLbHh1WEhRZ0tpQWpJeU1nUlhoaGJYQnNaVnh1WEhRZ0tpQmdZR0JxWVhaaGMyTnlhWEIwWEc1Y2RDQXFJQzh2SUU5MlpYSnlhV1JwYm1jZ2NISnBiblF1WEc1Y2RDQXFJSFJvYVhNdVoyRnRaUzV2Ymt0bGVYTW9KMk50WkN0UUp5d2djSEpwYm5SSVlXNWtiR1Z5S1R0Y2JseDBJQ3BjYmx4MElDb2dMeThnU0c5c1pHbHVaeUJEYjI1MGNtOXNJR0Z1WkNCd2NtVnpjMmx1WnlCY0lrdGNJaUIwYUdWdUlGd2lRbHdpWEc1Y2RDQXFJSFJvYVhNdVoyRnRaUzV2Ymt0bGVYTW9KMk4wY213clN5eENKeXdnYUdGdVpHeGxjaWs3WEc1Y2RDQXFJR0JnWUZ4dVhIUWdLaUJBWVhKbklIdHpkSEpwYm1kOUlGOWpiMjF0WVc1a2N5QXRJRlJvWlNCclpYa2diM0lnYzJWeGRXVnVZMlVnYjJZZ2EyVjVjeTVjYmx4MElDb2dRR0Z5WnlCN1puVnVZM1JwYjI1OUlGOW9ZVzVrYkdWeUlDMGdXVzkxY2lCbGRtVnVkQ0JvWVc1a2JHVnlJR1p2Y2lCM2FHVnVJSGx2ZFNCclpYa2djR0YwZEdWeWJpQnBjeUJ0WVhSamFHVmtMbHh1WEhRZ0tpQkFjbVYwZFhKdWN5QmdkR2hwYzJCY2JseDBJQ292WEc1Y2RIUm9hWE11YjI1TFpYbHpJRDBnWm5WdVkzUnBiMjRnS0Y5amIyMXRZVzVrY3l3Z1gyaGhibVJzWlhJcElIdGNibHgwWEhSMllYSWdjMlZ4ZFdWdVkyVXNJR05vYjNKa2N5d2diVzlrYVdacFpYSnpMQ0J0WVhBN1hHNWNibHgwWEhScFppQW9JWFJvYVhNdWEyVjVRMjl0YldGdVpITXBJSHRjYmx4MFhIUmNkSFJvYVhNdWEyVjVRMjl0YldGdVpITWdQU0I3ZlR0Y2JseHVYSFJjZEZ4MGJXRndJRDBnZTF4dVhIUmNkRngwWEhReE16b2dKMlZ1ZEdWeUp5eGNibHgwWEhSY2RGeDBNVFk2SUNkemFHbG1kQ2NzWEc1Y2RGeDBYSFJjZERFM09pQW5ZM1J5YkNjc1hHNWNkRngwWEhSY2RERTRPaUFuWVd4MEp5eGNibHgwWEhSY2RGeDBNamM2SUNkbGMyTW5MRnh1WEhSY2RGeDBYSFF6TnpvZ0oyeGxablFuTEZ4dVhIUmNkRngwWEhRek9Eb2dKM1Z3Snl4Y2JseDBYSFJjZEZ4ME16azZJQ2R5YVdkb2RDY3NYRzVjZEZ4MFhIUmNkRFF3T2lBblpHOTNiaWNzWEc1Y2RGeDBYSFJjZERreE9pQW5iV1YwWVNjc1hHNWNkRngwWEhSY2RHVnVkR1Z5T2lBeE15eGNibHgwWEhSY2RGeDBjMmhwWm5RNklERTJMRnh1WEhSY2RGeDBYSFJqZEhKc0lEb2dNVGNzWEc1Y2RGeDBYSFJjZEdGc2RDQWdPaUF4T0N4Y2JseDBYSFJjZEZ4MFpYTmpJQ0E2SURJM0xGeHVYSFJjZEZ4MFhIUnNaV1owSURvZ016Y3NYRzVjZEZ4MFhIUmNkSFZ3SUNBZ09pQXpPQ3hjYmx4MFhIUmNkRngwY21sbmFIUTZJRE01TEZ4dVhIUmNkRngwWEhSa2IzZHVJRG9nTkRBc1hHNWNkRngwWEhSY2RHMWxkR0VnT2lBNU1WeHVYSFJjZEZ4MGZUdGNibHh1WEhSY2RGeDBiVzlrYVdacFpYSnpJRDBnV3pFMkxDQXhOeXdnTVRnc0lEa3hYVHRjYmx4MFhIUmNkSE5sY1hWbGJtTmxJRDBnVzEwN1hHNWNkRngwWEhSamFHOXlaSE1nUFNCYlhUdGNibHh1WEhSY2RGeDBkR2hwY3k1dmJpZ25hMlY1Wkc5M2JpY3NJR1oxYm1OMGFXOXVJQ2hmWlhabGJuUXBJSHRjYmx4MFhIUmNkRngwZG1GeUlHMXZaR2xtYVdWeUxDQnJaWGtzSUdWMlpXNTBUVzlrY3l3Z1kzVnljbVZ1ZEUxdlpITXNJR052YlcxaGJtUXNJR2hoYm1Sc1pYSTdYRzVjYmx4MFhIUmNkRngwYlc5a2FXWnBaWElnUFNBb0lTRitiVzlrYVdacFpYSnpMbWx1WkdWNFQyWW9YMlYyWlc1MExtdGxlVU52WkdVcEtTQW1KaUJ0WVhCYlgyVjJaVzUwTG10bGVVTnZaR1ZkTzF4dVhIUmNkRngwWEhSclpYa2dQU0FvYlc5a2FXWnBaWElwSUQ4Z2JXOWthV1pwWlhJZ09pQnRZWEJiWDJWMlpXNTBMbXRsZVVOdlpHVmRJSHg4SUZOMGNtbHVaeTVtY205dFEyaGhja052WkdVb1gyVjJaVzUwTG10bGVVTnZaR1VwTzF4dVhIUmNkRngwWEhSbGRtVnVkRTF2WkhNZ1BTQmJYMlYyWlc1MExuTm9hV1owUzJWNUxDQmZaWFpsYm5RdVkzUnliRXRsZVN3Z1gyVjJaVzUwTG1Gc2RFdGxlU3dnWDJWMlpXNTBMbTFsZEdGTFpYbGRPMXh1WEhSY2RGeDBYSFJqZFhKeVpXNTBUVzlrY3lBOUlGdGRPMXh1WEc1Y2RGeDBYSFJjZEM4dklFTnZiR3hsWTNRZ2RHaGxJRzF2WkdsbWFXVnljeUIwYUdVZ1pYWmxiblFnYzJGNWN5QmhjbVVnYzNScGJHd2daRzkzYmk1Y2JseDBYSFJjZEZ4MFpYWmxiblJOYjJSekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tGOXRiMlJwWm1sbGNrUnZkMjRzSUY5cGJtUmxlQ2tnZTF4dVhIUmNkRngwWEhSY2RDOHZJSFZ6WlNCMGFHVWdiVzlrYVdacFpYSWdibUZ0WlZ4dVhIUmNkRngwWEhSY2RHbG1JQ2hmYlc5a2FXWnBaWEpFYjNkdUtTQmpkWEp5Wlc1MFRXOWtjeTV3ZFhOb0tHMWhjRnR0YjJScFptbGxjbk5iWDJsdVpHVjRYVjBwTzF4dVhIUmNkRngwWEhSOUtUdGNibHh1WEhSY2RGeDBYSFF2THlCRWIyNG5kQ0JoWkdRZ2EyVjVjeUIzWlNCaGJISmxZV1I1SUdoaGRtVWdaSFZ5YVc1bklISmhjR2xrTFdacGNtVWdaWFpsYm5SelhHNWNkRngwWEhSY2RHbG1JQ2grWTJodmNtUnpMbWx1WkdWNFQyWW9hMlY1S1NCOGZDQitjMlZ4ZFdWdVkyVXVhVzVrWlhoUFppaHJaWGtwS1NCeVpYUjFjbTQ3WEc1Y2JseDBYSFJjZEZ4MEx5OGdRMjl1YzNSeWRXTjBJSFJvWlNCamIyMXRZVzVrWEc1Y2RGeDBYSFJjZEdOdmJXMWhibVFnUFNCamFHOXlaSE11YkdWdVozUm9JRDljYmx4MFhIUmNkRngwWEhRb1kyaHZjbVJ6TG5CMWMyZ29hMlY1S1N3Z1kyaHZjbVJ6TG1wdmFXNG9KeXduS1NrZ09seHVYSFJjZEZ4MFhIUmNkQ2h6WlhGMVpXNWpaUzV3ZFhOb0tHdGxlU2tzSUhObGNYVmxibU5sTG1wdmFXNG9KeXNuS1NrN1hHNWNibHgwWEhSY2RGeDBhR0Z1Wkd4bGNpQTlJSFJvYVhNdWEyVjVRMjl0YldGdVpITmJZMjl0YldGdVpGMDdYRzVjYmx4MFhIUmNkRngwYVdZZ0tHaGhibVJzWlhJcElIdGNibHgwWEhSY2RGeDBYSFJvWVc1a2JHVnlMbU5oYkd3b2RHaHBjeXdnWDJWMlpXNTBMQ0JqYjIxdFlXNWtLVHRjYmx4MFhIUmNkRngwWEhRdkx5QkxaV1Z3SUdOMWNuSmxiblFnYlc5a2FXWnBaWEp6TGx4dVhIUmNkRngwWEhSY2RITmxjWFZsYm1ObElEMGdZM1Z5Y21WdWRFMXZaSE11YldGd0tHWjFibU4wYVc5dUlDaGZhMlY1TENCZmFXNWtaWGdwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkSFpoY2lCclpYa2dQU0J6WlhGMVpXNWpaVnRmYVc1a1pYaGRPMXh1WEhSY2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUdOMWNuSmxiblJOYjJSelcyTjFjbkpsYm5STmIyUnpMbWx1WkdWNFQyWW9hMlY1S1YwN1hHNWNkRngwWEhSY2RGeDBmU2s3WEc1Y2RGeDBYSFJjZEZ4MFkyaHZjbVJ6SUQwZ1cxMDdYRzVjYmx4MFhIUmNkRngwWEhRdkx5QlBkbVZ5Y21sa1pTQnZjbWxuYVc1aGJDQnJaWGtnWTI5dGJXRnVaQ0FvYVM1bExpQnRaWFJoSzFFcExseHVYSFJjZEZ4MFhIUmNkRjlsZG1WdWRDNXdjbVYyWlc1MFJHVm1ZWFZzZENncE8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlLVHRjYmx4dVhIUmNkRngwZEdocGN5NXZiaWduYTJWNWRYQW5MQ0JtZFc1amRHbHZiaUFvWDJWMlpXNTBLU0I3WEc1Y2RGeDBYSFJjZEhaaGNpQnJaWGtzSUdsdVpHVjRMQ0J0YjJScFptbGxjaXdnWlhabGJuUk5iMlJ6TENCamRYSnlaVzUwVFc5a2N6dGNibHh1WEhSY2RGeDBYSFJyWlhrZ1BTQW9iVzlrYVdacFpYSXBJRDhnYlc5a2FXWnBaWElnT2lCdFlYQmJYMlYyWlc1MExtdGxlVU52WkdWZElIeDhJRk4wY21sdVp5NW1jbTl0UTJoaGNrTnZaR1VvWDJWMlpXNTBMbXRsZVVOdlpHVXBPMXh1WEhSY2RGeDBYSFJwYm1SbGVDQTlJSE5sY1hWbGJtTmxMbWx1WkdWNFQyWW9hMlY1S1R0Y2JseDBYSFJjZEZ4MGJXOWthV1pwWlhJZ1BTQW9JU0YrYlc5a2FXWnBaWEp6TG1sdVpHVjRUMllvWDJWMlpXNTBMbXRsZVVOdlpHVXBLU0FtSmlCdFlYQmJYMlYyWlc1MExtdGxlVU52WkdWZE8xeHVYSFJjZEZ4MFhIUXZMeUJHYjJ4c2IzZHpJSFJvWlNCellXMWxJR2x1WkdWNElHOXlaR1Z5SUdGeklGd2liVzlrYVdacFpYSnpYQ0lnV3pFMkxDQXhOeXdnTVRnc0lEa3hYVnh1WEhSY2RGeDBYSFJsZG1WdWRFMXZaSE1nUFNCYlgyVjJaVzUwTG5Ob2FXWjBTMlY1TENCZlpYWmxiblF1WTNSeWJFdGxlU3dnWDJWMlpXNTBMbUZzZEV0bGVTd2dYMlYyWlc1MExtMWxkR0ZMWlhsZE8xeHVYSFJjZEZ4MFhIUmpkWEp5Wlc1MFRXOWtjeUE5SUZ0ZE8xeHVYRzVjZEZ4MFhIUmNkQzh2SUVOdmJHeGxZM1FnZEdobElHMXZaR2xtYVdWeWN5QjBhR1VnWlhabGJuUWdjMkY1Y3lCaGNtVWdjM1JwYkd3Z1pHOTNiaTVjYmx4MFhIUmNkRngwWlhabGJuUk5iMlJ6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0Y5dGIyUnBabWxsY2tSdmQyNHNJRjlwYm1SbGVDa2dlMXh1WEhSY2RGeDBYSFJjZEM4dklIVnpaU0IwYUdVZ2JXOWthV1pwWlhJZ2JtRnRaVnh1WEhSY2RGeDBYSFJjZEdsbUlDaGZiVzlrYVdacFpYSkViM2R1S1NCamRYSnlaVzUwVFc5a2N5NXdkWE5vS0cxaGNGdHRiMlJwWm1sbGNuTmJYMmx1WkdWNFhWMHBPMXh1WEhSY2RGeDBYSFI5S1R0Y2JseHVYSFJjZEZ4MFhIUXZMeUJKWmlCMGFHVWdhMlY1SUhKbGJHVmhjMlZrSUdseklHRWdiVzlrYVdacFpYSXVMaTVjYmx4MFhIUmNkRngwYVdZZ0tHdGxlU0E5UFQwZ2JXOWthV1pwWlhJcElIdGNibHgwWEhSY2RGeDBYSFF2THlBdUxpNXJaV1Z3SUdOMWNuSmxiblFnYlc5a2FXWnBaWEp6TGk0dVhHNWNkRngwWEhSY2RGeDBjMlZ4ZFdWdVkyVWdQU0JqZFhKeVpXNTBUVzlrY3k1dFlYQW9ablZ1WTNScGIyNGdLRjlyWlhrc0lGOXBibVJsZUNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwZG1GeUlHdGxlU0E5SUhObGNYVmxibU5sVzE5cGJtUmxlRjA3WEc1Y2RGeDBYSFJjZEZ4MFhIUnlaWFIxY200Z1kzVnljbVZ1ZEUxdlpITmJZM1Z5Y21WdWRFMXZaSE11YVc1a1pYaFBaaWhyWlhrcFhUdGNibHgwWEhSY2RGeDBYSFI5S1R0Y2JseDBYSFJjZEZ4MFhIUXZMeUF1TGk1amJHVmhjaUJ5WldkcGMzUmxjbVZrSUdOb2IzSmtjeTVjYmx4MFhIUmNkRngwWEhSamFHOXlaSE1nUFNCYlhUdGNibHgwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEdWc2MyVWdlMXh1WEhSY2RGeDBYSFJjZEM4dklFbG1JSGRsSUdoaFpDQndjbVZ6YzJWa0lHMXZjbVVnZEdoaGJpQnZibVVnYTJWNUxpNHVYRzVjZEZ4MFhIUmNkRngwYVdZZ0tITmxjWFZsYm1ObExteGxibWQwYUNBK0lERXBJSHRjYmx4MFhIUmNkRngwWEhSY2RDOHZJRU5vWldOcklHbG1JSFJvWlNCbWFYSnpkQ0JwY3lCaElHMXZaR2xtYVdWeUlIUm9aVzRnYzNkcGRHTm9JSFJ2SUdOb2IzSmtJR05oY0hSMWNtbHVaMXh1WEhSY2RGeDBYSFJjZEZ4MGFXWWdLSDV0YjJScFptbGxjbk11YVc1a1pYaFBaaWh0WVhCYmMyVnhkV1Z1WTJWYk1GMWRLU2tnZTF4dVhIUmNkRngwWEhSY2RGeDBYSFJqYUc5eVpITXVjSFZ6YUNoelpYRjFaVzVqWlM1cWIybHVLQ2NySnlrcE8xeHVYSFJjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBYSFJjYmx4MFhIUmNkRngwWEhScFppQW9mbWx1WkdWNEtTQnpaWEYxWlc1alpTNXpjR3hwWTJVb2FXNWtaWGdzSURFcE8xeHVYSFJjZEZ4MFhIUmNkR2xtSUNnaGMyVnhkV1Z1WTJVdWJHVnVaM1JvS1NCamFHOXlaSE1nUFNCYlhUdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmU2s3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBkR2hwY3k1clpYbERiMjF0WVc1a2MxdGZZMjl0YldGdVpITmRJRDBnWDJoaGJtUnNaWEk3WEc1Y2JseDBYSFJ5WlhSMWNtNGdkR2hwY3p0Y2JseDBmVHRjYmx4dVhIUjBhR2x6TG5OamNtVmxiaUE5SUdaMWJtTjBhVzl1SUNoZmFXUXNJRjlwYlhCc1pXMWxiblJoZEdsdmJpa2dlMXh1WEhSY2RIWmhjaUJ3Y205MGIzUjVjR1VzSUhObGJHVmpkRzl5TENCelkzSmxaVzVUWld4bFkzUnZjaXdnYVc1emRHRnVZMlU3WEc1Y2JseDBYSFJwWmlBb1lYSm5kVzFsYm5SekxteGxibWQwYUNBOVBUMGdNU0FtSmlCMGVYQmxiMllnWDJsa0lEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNWNkRngwWEhSelkzSmxaVzVRY205MGIzUjVjR1VnUFNCVFkzSmxaVzR1WlhoMFpXNWtLRjlwWkNrN1hHNWNkRngwWEhSeVpYUjFjbTRnZEdocGN6dGNibHgwWEhSOVhHNWNibHgwWEhScFppQW9JWFJvYVhNdWFHRnpUM2R1VUhKdmNHVnlkSGtvSjNOamNtVmxibk1uS1NrZ2RHaHBjeTV6WTNKbFpXNXpJRDBnUTI5c2JHVmpkR2x2Ymk1amNtVmhkR1VvS1R0Y2JseHVYSFJjZEdsbUlDaDBhR2x6TG1oaGMwOTNibEJ5YjNCbGNuUjVLQ2NrWld4ekp5a3BJSHRjYmx4MFhIUmNkR1JsWW5WbloyVnlPMXh1WEhSY2RGeDBjMk55WldWdVUyVnNaV04wYjNJZ1BTQndiQzVuWVcxbExtTnZibVpwWnlnbmMyTnlaV1Z1VTJWc1pXTjBiM0luS1R0Y2JseDBYSFJjZEhCeWIzUnZkSGx3WlNBOUlDaHpZM0psWlc1UWNtOTBiM1I1Y0dVdWFYTlFjbTkwYjNSNWNHVlBaaWgwYUdsektTa2dQeUIwYUdseklEb2djMk55WldWdVVISnZkRzkwZVhCbE8xeHVYSFJjZEZ4MGMyVnNaV04wYjNJZ1BTQW9kSGx3Wlc5bUlGOXBaQ0E5UFQwZ0oyNTFiV0psY2ljcElEOGdjMk55WldWdVUyVnNaV04wYjNJckp6cHVkR2d0WTJocGJHUW9KeXNvWDJsa0t6RXBLeWNwSnlBNklDY2pKeXRmYVdRN1hHNWNkRngwWEhScGJuTjBZVzVqWlNBOUlIQnliM1J2ZEhsd1pTNWxlSFJsYm1Rb1gybHRjR3hsYldWdWRHRjBhVzl1S1M1cGJtbDBhV0ZzYVhwbEtIUm9hWE11Wm1sdVpDaHpaV3hsWTNSdmNpa3BPMXh1WEc1Y2RGeDBYSFJwYm5OMFlXNWpaUzV6WTNKbFpXNGdQU0JwYm5OMFlXNWpaVHRjYmx4MFhIUmNkR2xtSUNnaGFXNXpkR0Z1WTJVdVoyRnRaU2tnZTF4dVhIUmNkRngwWEhScGJuTjBZVzVqWlM1bllXMWxJRDBnYVc1emRHRnVZMlV1WTJ4dmMyVnpkQ2duTG5Cc0xXZGhiV1VuS1M1elkyOXdaU2dwTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4dVhIUmNkR1ZzYzJVZ2UxeHVYSFJjZEZ4MGRHaHBjeTV6WTNKbFpXNXpMbkIxYzJnb2UxeHVYSFJjZEZ4MFhIUnBibVJsZURvZ0tIUjVjR1Z2WmlCZmFXUWdQVDA5SUNkdWRXMWlaWEluS1NBL0lGOXBaQ0E2SUc1MWJHd3NYRzVjZEZ4MFhIUmNkRzVoYldVNklDaDBlWEJsYjJZZ1gybGtJRDA5UFNBbmMzUnlhVzVuSnlrZ1B5QmZhV1FnT2lCdWRXeHNMRnh1WEhSY2RGeDBYSFJwYlhCc1pXMWxiblJoZEdsdmJqb2dYMmx0Y0d4bGJXVnVkR0YwYVc5dVhHNWNkRngwWEhSOUtUdGNibHgwWEhSOVhHNWNibHgwWEhSeVpYUjFjbTRnZEdocGN6dGNibHgwZlR0Y2JseHVYSFIwYUdsekxtTmhjSFIxY21WVFkzSmxaVzV6SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1WEhSY2RIWmhjaUJ6WTNKbFpXNVRaV3hsWTNSdmNpd2djSEp2ZEc5MGVYQmxMQ0JqYjJ4c1pXTjBhVzl1TzF4dVhHNWNkRngwYVdZZ0tDRjBhR2x6TG1oaGMwOTNibEJ5YjNCbGNuUjVLQ2R6WTNKbFpXNXpKeWtwSUhKbGRIVnliaUIwYUdsek8xeHVYRzVjZEZ4MGMyTnlaV1Z1VTJWc1pXTjBiM0lnUFNCd2JDNW5ZVzFsTG1OdmJtWnBaeWduYzJOeVpXVnVVMlZzWldOMGIzSW5LVHRjYmx4MFhIUndjbTkwYjNSNWNHVWdQU0FvYzJOeVpXVnVVSEp2ZEc5MGVYQmxMbWx6VUhKdmRHOTBlWEJsVDJZb2RHaHBjeWtwSUQ4Z2RHaHBjeUE2SUhOamNtVmxibEJ5YjNSdmRIbHdaVHRjYmx4MFhIUmpiMnhzWldOMGFXOXVJRDBnVzEwN1hHNWNkRngwWEc1Y2RGeDBkR2hwY3k1bWFXNWtUM2R1S0hOamNtVmxibE5sYkdWamRHOXlLUzVsWVdOb0tIUm9hWE11WW1sdVpDaG1kVzVqZEdsdmJpQW9YMmx1WkdWNExDQmZibTlrWlNrZ2UxeHVYSFJjZEZ4MGRtRnlJQ1J1YjJSbExDQnpZM0psWlc0c0lISmxZMjl5WkN3Z2EyVjVMQ0JwWkN3Z2FXNWtaWGdzSUdOdmJYQnZibVZ1ZER0Y2JseHVYSFJjZEZ4MEpHNXZaR1VnUFNBa0tGOXViMlJsS1R0Y2JseDBYSFJjZEdsa0lEMGdKRzV2WkdVdWFXUW9LVHRjYmx4MFhIUmNkR3RsZVNBOUlDaHBaQ2tnUHlBbmJtRnRaU2NnT2lBb2FXUWdQU0JmYVc1a1pYZ3NJQ2RwYm1SbGVDY3BPMXh1WEhSY2RGeDBjbVZqYjNKa0lEMGdkR2hwY3k1elkzSmxaVzV6TG1kbGRDaHBaQ3dnYTJWNUtUdGNibHgwWEhSY2RHTnZiWEJ2Ym1WdWRDQTlJQ1J1YjJSbExtRjBkSElvSjNCc0xXTnZiWEJ2Ym1WdWRDY3BPMXh1WEhSY2RGeDBjMk55WldWdUlEMGdZM0psWVhSbFJXNTBhWFI1TG1OaGJHd29jSEp2ZEc5MGVYQmxMQ0FrYm05a1pTd2djbVZqYjNKa0lDWW1JSEpsWTI5eVpDNXBiWEJzWlcxbGJuUmhkR2x2YmlrN1hHNWNkRngwWEhSelkzSmxaVzR1YzJOeVpXVnVJRDBnYzJOeVpXVnVPMXh1WEhSY2RGeDBjMk55WldWdUxtZGhiV1VnUFNCMGFHbHpPMXh1WEc1Y2RGeDBYSFJwWmlBb0pHNXZaR1V1WVhSMGNpZ25jR3d0YzJ0cGNDY3BJRDA5SUc1MWJHd3BJR052Ykd4bFkzUnBiMjR1Y0hWemFDaHpZM0psWlc0cE8xeHVYSFJjZEZ4MFhHNWNkRngwWEhScFppQW9hMlY1SUQwOVBTQW5ibUZ0WlNjZ2ZId2dZMjl0Y0c5dVpXNTBLU0I3WEc1Y2RGeDBYSFJjZEhWMGFXd3VZWE56YVdkdVVtVm1LSFJvYVhNc0lIVjBhV3d1ZEhKaGJuTm1iM0p0U1dRb0tHdGxlU0E5UFQwZ0oyNWhiV1VuSUNZbUlHbGtLU0I4ZkNCamIyMXdiMjVsYm5Rc0lIUnlkV1VwTENCelkzSmxaVzRwTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDBwS1R0Y2JseHVYSFJjZEdsbUlDaGpiMnhzWldOMGFXOXVMbXhsYm1kMGFDa2dkR2hwY3k1elkzSmxaVzV6SUQwZ1kyOXNiR1ZqZEdsdmJqdGNibHh1WEhSY2RISmxkSFZ5YmlCMGFHbHpPMXh1WEhSOU8xeHVYRzVjZEhSb2FYTXVkMkYwWTJoQmRXUnBieUE5SUdaMWJtTjBhVzl1SUNncElIdGNibHgwWEhSMllYSWdjR3hoZVdsdVp6dGNibHh1WEhSY2RHWjFibU4wYVc5dUlHUmxVWFZsZFdVZ0tGOXpZMjl3WlN3Z1gybDBaVzBwSUh0Y2JseDBYSFJjZEZ0ZmMyTnZjR1VzSUY5elkyOXdaUzV6WTNKbFpXNWRMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNGdLRjl6WTI5d1pTa2dlMXh1WEhSY2RGeDBYSFJwWmlBb1gzTmpiM0JsTG5KbGNYVnBjbVZrVVhWbGRXVWdKaVlnWDNOamIzQmxMbWx6VFdWdFltVnlVMkZtWlNnbmNtVnhkV2x5WldSUmRXVjFaU2NwSUNZbUlGOXpZMjl3WlM1eVpYRjFhWEpsWkZGMVpYVmxMbWhoY3loZmFYUmxiU2twSUh0Y2JseDBYSFJjZEZ4MFhIUmZjMk52Y0dVdWNtVnhkV2x5WldSUmRXVjFaUzV5WldGa2VTaGZhWFJsYlNrN1hHNWNkRngwWEhSY2RIMWNkRngwWEhSY2RGeHVYSFJjZEZ4MGZTazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGNHeGhlV2x1WnlBOUlFTnZiR3hsWTNScGIyNHVZM0psWVhSbEtDazdYRzVjYmx4MFhIUjBhR2x6TG05dUtDZGhkV1JwYnkxd2JHRjVKeXdnWm5WdVkzUnBiMjRnS0Y5bGRtVnVkQ2tnZTF4dVhIUmNkRngwZG1GeUlHTjFjbkpsYm5Rc0lHSm5UWFZ6YVdNN1hHNWNibHgwWEhSY2RHbG1JQ2hmWlhabGJuUXVZWFZrYVc5VWVYQmxJQ0U5UFNBbmMyWjRKeWtnZTF4dVhIUmNkRngwWEhSamRYSnlaVzUwSUQwZ2NHeGhlV2x1Wnk1bWFXeDBaWElvWDJWMlpXNTBMbUYxWkdsdlZIbHdaU3dnSjNSNWNHVW5LVHRjYmx4MFhIUmNkRngwWW1kTmRYTnBZeUE5SUhCc1lYbHBibWN1Wm1sc2RHVnlLQ2RpWVdOclozSnZkVzVrSnl3Z0ozUjVjR1VuS1R0Y2JseHVYSFJjZEZ4MFhIUnBaaUFvWTNWeWNtVnVkQ2tnZTF4dVhIUmNkRngwWEhSY2RHTjFjbkpsYm5RdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb1gzSmxZMjl5WkNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWDNKbFkyOXlaQzVoZFdScGJ5NXdZWFZ6WlNncE8xeHVYSFJjZEZ4MFhIUmNkRngwWDNKbFkyOXlaQzVoZFdScGJ5NWpkWEp5Wlc1MFZHbHRaU0E5SURBN1hHNWNkRngwWEhSY2RGeDBmU2s3WEc1Y2RGeDBYSFJjZEgxY2JseHVYSFJjZEZ4MFhIUnBaaUFvWDJWMlpXNTBMbUYxWkdsdlZIbHdaU0E5UFQwZ0ozWnZhV05sTFc5MlpYSW5LU0I3WEc1Y2RGeDBYSFJjZEZ4MGFXWWdLR0puVFhWemFXTXBJR0puVFhWemFXTXVabTl5UldGamFDaG1kVzVqZEdsdmJpQW9YM0psWTI5eVpDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MFgzSmxZMjl5WkM1aGRXUnBieTUyYjJ4MWJXVWdQU0F3TGpJN1hHNWNkRngwWEhSY2RGeDBmU2s3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MGNHeGhlV2x1Wnk1d2RYTm9LSHRjYmx4MFhIUmNkRngwWVhWa2FXODZJRjlsZG1WdWRDNTBZWEpuWlhRc1hHNWNkRngwWEhSY2RIUjVjR1U2SUY5bGRtVnVkQzVoZFdScGIxUjVjR1ZjYmx4MFhIUmNkSDBwTzF4dVhIUmNkSDBwTzF4dVhHNWNkRngwZEdocGN5NXZiaWduWVhWa2FXOHRaVzVrWldRZ1lYVmthVzh0Y0dGMWMyVW5MQ0JtZFc1amRHbHZiaUFvWDJWMlpXNTBLU0I3WEc1Y2RGeDBYSFIyWVhJZ1kzVnljbVZ1ZEN3Z2MyTnZjR1VzSUdKblRYVnphV003WEc1Y2JseDBYSFJjZEdOMWNuSmxiblFnUFNCd2JHRjVhVzVuTG1kbGRDaGZaWFpsYm5RdWRHRnlaMlYwTENBbllYVmthVzhuS1Z4dVhIUmNkRngwYzJOdmNHVWdQU0FrS0Y5bGRtVnVkQzUwWVhKblpYUXBMbk5qYjNCbEtDazdYRzVjZEZ4MFhIUmlaMDExYzJsaklEMGdjR3hoZVdsdVp5NW1hV3gwWlhJb0oySmhZMnRuY205MWJtUW5MQ0FuZEhsd1pTY3BPMXh1WEc1Y2RGeDBYSFJ3YkdGNWFXNW5MbkpsYlc5MlpTaGpkWEp5Wlc1MEtUdGNibHgwWEhSY2RHUmxVWFZsZFdVb2MyTnZjR1VzSUY5bGRtVnVkQzUwWVhKblpYUXBPMXh1WEc1Y2RGeDBYSFJwWmlBb1gyVjJaVzUwTG1GMVpHbHZWSGx3WlNBOVBUMGdKM1p2YVdObExXOTJaWEluSUNZbUlDRndiR0Y1YVc1bkxtZGxkQ2duZG05cFkyVXRiM1psY2ljc0lDZDBlWEJsSnlrcElIdGNibHgwWEhSY2RGeDBhV1lnS0dKblRYVnphV01wSUdKblRYVnphV011Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvWDNKbFkyOXlaQ2tnZTF4dVhIUmNkRngwWEhSY2RGOXlaV052Y21RdVlYVmthVzh1ZG05c2RXMWxJRDBnTVR0Y2JseDBYSFJjZEZ4MGZTazdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZTazdYRzVjZEgwN1hHNWNibHgwZEdocGN5NXdjbTluY21WemN5QTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseDBYSFJ5WlhSMWNtNGdlMXh1WEhSY2RGeDBZM1Z5Y21WdWRGTmpjbVZsYmpvZ2RHaHBjeTVqZFhKeVpXNTBVMk55WldWdUtDa3VhVzVrWlhnb0tWeHVYSFJjZEgwN1hHNWNkSDA3WEc1Y2JseDBkR2hwY3k1amRYSnlaVzUwVTJOeVpXVnVJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVYSFJjZEhKbGRIVnliaUIwYUdsekxtWnBibVJQZDI0b0p5NXpZM0psWlc0dVQxQkZUaWNwTG01dmRDZ25JM0YxYVhRbktTNXpZMjl3WlNncE8xeHVYSFI5TzF4dVhHNWNkSFJvYVhNdVpteHBjQ0E5SUdaMWJtTjBhVzl1SUNncElIdGNibHgwWEhSamIyNXpiMnhsTG14dlp5Z25WRWhCVkZNZ1FTQkdURWxRSVNjcE8xeHVYSFJjZEdkaGJXVXVjbVZ3YjNKMExtWnNhWEFvZEdocGN5azdYRzVjZEgwN1hHNWNibHgwZEdocGN5NWxlR2wwSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1WEhSY2RHTnZibk52YkdVdWJHOW5LQ2RIVDA5RVFsbEZJU2NwTzF4dVhIUmNkR2RoYldVdWNtVndiM0owTG1WNGFYUW9kR2hwY3lrN1hHNWNkSDA3WEc1Y2JseDBMeW9xWEc1Y2RDQXFJRVJsYlc4Z2JXOWtaU0JyWlhrZ1kyOXRiV0Z1WkZ4dVhIUWdLaTljYmx4MGRHaHBjeTV2Ymt0bGVYTW9KMk4wY213clJDeE5KeXdnWm5WdVkzUnBiMjRnS0NrZ2UxeHVYSFJjZEM4dklIUnZaMmRzWlZ4dVhIUmNkSFJvYVhNdVpHVnRiMDF2WkdVZ1BTQWhkR2hwY3k1a1pXMXZUVzlrWlR0Y2JseDBYSFIwYUdselczUm9hWE11WkdWdGIwMXZaR1VnUHlBbllXUmtRMnhoYzNNbklEb2dKM0psYlc5MlpVTnNZWE56SjEwb0owUkZUVThuS1R0Y2JseHVYSFJjZEdOdmJuTnZiR1V1YVc1bWJ5aDBhR2x6TG1sa0tDa3NJQ2RwY3lCdWIzY2dKeXNvZEdocGN5NWtaVzF2VFc5a1pTQS9JQ2RwYmljZ09pQW5iM1YwSUc5bUp5a3JKeUJFWlcxdklFMXZaR1V1SnlrN1hHNWNkSDBwTzF4dVhHNWNkQzhxS2x4dVhIUWdLaUJMWlhsaWIyRnlaQ0J6WTNKbFpXNGdibUYyYVdkaGRHbHZibHh1WEhRZ0tpOWNibHgwZEdocGN5NXZia3RsZVhNb0oyeGxablFuTENCbWRXNWpkR2x2YmlBb0tTQjdYRzVjZEZ4MGRtRnlJR04xY25KbGJuUTdYRzVjYmx4MFhIUmpkWEp5Wlc1MElEMGdkR2hwY3k1amRYSnlaVzUwVTJOeVpXVnVLQ2s3WEc1Y2JseDBYSFJwWmlBb1kzVnljbVZ1ZENrZ1kzVnljbVZ1ZEM1d2NtVjJLQ2s3WEc1Y2RIMHBPMXh1WEc1Y2RIUm9hWE11YjI1TFpYbHpLQ2R5YVdkb2RDY3NJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseDBYSFIyWVhJZ1kzVnljbVZ1ZER0Y2JseHVYSFJjZEdOMWNuSmxiblFnUFNCMGFHbHpMbU4xY25KbGJuUlRZM0psWlc0b0tUdGNibHgwWEhSY2JseDBYSFJwWmlBb1kzVnljbVZ1ZENrZ1kzVnljbVZ1ZEM1dVpYaDBLQ2s3WEc1Y2RIMHBPMXh1WEc1OUtUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdSMkZ0WlR0Y2JseHVYRzVjYmk4cUtpQlhSVUpRUVVOTElFWlBUMVJGVWlBcUtseHVJQ29xSUM0dmMyOTFjbU5sTDNSNWNHVnpMMGRoYldVdWFuTmNiaUFxS2k4aVhTd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfSxcbi8qIDQyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRldmFsKFwidmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpWydkZWZhdWx0J107XFxuXFxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcXG4vKipcXG4gKiBBUEkgZm9yIGNvbW11bmljYWlvbiBiZXR3ZWVuIGEgZ2FtZSBhbmQgdGhlIHBsYXRmb3JtLlxcbiAqXFxuICogQG1vZHVsZVxcbiAqL1xcblxcbnZhciBfdXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xcblxcbnZhciBfdXRpbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91dGlsKTtcXG5cXG52YXIgcGxhdGZvcm0gPSBuZXcgZnVuY3Rpb24gKCkge1xcblxcblxcdGZ1bmN0aW9uIGNyZWF0ZUV2ZW50KF9uYW1lLCBfcHJvcHMpIHtcXG5cXHRcXHR2YXIgZXZlbnRPYmplY3Q7XFxuXFxuXFx0XFx0ZXZlbnRPYmplY3QgPSBfdXRpbDJbJ2RlZmF1bHQnXS5taXhpbihuZXcgRXZlbnQoJ2dhbWUtZXZlbnQnLCB7IGJ1YmJsZXM6IHRydWUsIGNhbmNlbGFibGU6IGZhbHNlIH0pLCB7XFxuXFx0XFx0XFx0bmFtZTogX25hbWUsXFxuXFx0XFx0XFx0cmVzcG9uZDogZnVuY3Rpb24gcmVzcG9uZChfZGF0YSkge1xcblxcdFxcdFxcdFxcdHZhciBwbGF0Zm9ybUV2ZW50O1xcblxcblxcdFxcdFxcdFxcdHBsYXRmb3JtRXZlbnQgPSAkLkV2ZW50KCdwbGF0Zm9ybS1ldmVudCcsIHtcXG5cXHRcXHRcXHRcXHRcXHRuYW1lOiBfbmFtZSxcXG5cXHRcXHRcXHRcXHRcXHRnYW1lRGF0YTogX2RhdGFcXG5cXHRcXHRcXHRcXHR9KTtcXG5cXG5cXHRcXHRcXHRcXHRwbC5nYW1lLnRyaWdnZXIocGxhdGZvcm1FdmVudCk7XFxuXFx0XFx0XFx0fVxcblxcdFxcdH0sIF9wcm9wcyk7XFxuXFxuXFx0XFx0cmV0dXJuIGV2ZW50T2JqZWN0O1xcblxcdH1cXG5cXG5cXHR0aGlzLkVWRU5UX0lOSVQgPSAnaW5pdCc7XFxuXFx0dGhpcy5FVkVOVF9TQVZFID0gJ3NhdmUnO1xcblxcdHRoaXMuRVZFTlRfRVhJVCA9ICdleGl0JztcXG5cXHR0aGlzLkVWRU5UX0ZMSVBQRUQgPSAnZmxpcHBlZCc7XFxuXFxuXFx0dGhpcy5lbWl0ID0gZnVuY3Rpb24gKF9uYW1lKSB7XFxuXFx0XFx0d2luZG93LmZyYW1lRWxlbWVudC5kaXNwYXRjaEV2ZW50KGNyZWF0ZUV2ZW50KF9uYW1lKSk7XFxuXFx0fTtcXG5cXG5cXHR0aGlzLnNhdmVHYW1lU3RhdGUgPSBmdW5jdGlvbiAoX2RhdGEpIHtcXG5cXHRcXHR3aW5kb3cuZnJhbWVFbGVtZW50LmRpc3BhdGNoRXZlbnQoY3JlYXRlRXZlbnQodGhpcy5FVkVOVF9TQVZFLCB7XFxuXFx0XFx0XFx0Z2FtZURhdGE6IF9kYXRhXFxuXFx0XFx0fSkpO1xcblxcdH07XFxufSgpO1xcblxcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHBsYXRmb3JtO1xcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOy8vQCBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5emIzVnlZMlV2Y0d4aGRHWnZjbTB1YW5NL05XUXhPU0pkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096czdaME5CUzJsQ0xFVkJRVTA3T3pzN1FVRkZka0lzU1VGQlNTeFJRVUZSTEVkQlFVY3NTVUZCU3l4WlFVRlpPenRCUVVVdlFpeFZRVUZUTEZkQlFWY3NRMEZCUlN4TFFVRkxMRVZCUVVVc1RVRkJUU3hGUVVGRk8wRkJRM0JETEUxQlFVa3NWMEZCVnl4RFFVRkRPenRCUVVWb1FpeGhRVUZYTEVkQlFVY3NhMEpCUVVzc1MwRkJTeXhEUVVGRExFbEJRVWtzUzBGQlN5eERRVUZETEZsQlFWa3NSVUZCUlN4RlFVRkRMRTlCUVU4c1JVRkJReXhKUVVGSkxFVkJRVVVzVlVGQlZTeEZRVUZETEV0QlFVc3NSVUZCUXl4RFFVRkRMRVZCUVVVN1FVRkRia1lzVDBGQlNTeEZRVUZGTEV0QlFVczdRVUZEV0N4VlFVRlBMRVZCUVVVc2FVSkJRVlVzUzBGQlN5eEZRVUZGTzBGQlEzcENMRkZCUVVrc1lVRkJZU3hEUVVGRE96dEJRVVZzUWl4cFFrRkJZU3hIUVVGSExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNaMEpCUVdkQ0xFVkJRVVU3UVVGRGVrTXNVMEZCU1N4RlFVRkZMRXRCUVVzN1FVRkRXQ3hoUVVGUkxFVkJRVVVzUzBGQlN6dExRVU5tTEVOQlFVTXNRMEZCUXpzN1FVRkZTQ3hOUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRenRKUVVNdlFqdEhRVU5FTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN08wRkJSVmdzVTBGQlR5eFhRVUZYTEVOQlFVTTdSVUZEYmtJN08wRkJSVVFzUzBGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4TlFVRk5MRU5CUVVNN1FVRkRla0lzUzBGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4TlFVRk5MRU5CUVVNN1FVRkRla0lzUzBGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4TlFVRk5MRU5CUVVNN1FVRkRla0lzUzBGQlNTeERRVUZETEdGQlFXRXNSMEZCUnl4VFFVRlRMRU5CUVVNN08wRkJSUzlDTEV0QlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1ZVRkJWU3hMUVVGTExFVkJRVVU3UVVGRE5VSXNVVUZCVFN4RFFVRkRMRmxCUVZrc1EwRkJReXhoUVVGaExFTkJRVU1zVjBGQlZ5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNN1JVRkRkRVFzUTBGQlF6czdRVUZGUml4TFFVRkpMRU5CUVVNc1lVRkJZU3hIUVVGSExGVkJRVlVzUzBGQlN5eEZRVUZGTzBGQlEzSkRMRkZCUVUwc1EwRkJReXhaUVVGWkxFTkJRVU1zWVVGQllTeERRVUZETEZkQlFWY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRk8wRkJRemxFTEZkQlFWRXNSVUZCUlN4TFFVRkxPMGRCUTJZc1EwRkJReXhEUVVGRExFTkJRVU03UlVGRFNpeERRVUZETzBOQlJVWXNSVUZCUXl4RFFVRkRPenR4UWtGRldTeFJRVUZSSWl3aVptbHNaU0k2SWpReUxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcVhHNGdLaUJCVUVrZ1ptOXlJR052YlcxMWJtbGpZV2x2YmlCaVpYUjNaV1Z1SUdFZ1oyRnRaU0JoYm1RZ2RHaGxJSEJzWVhSbWIzSnRMbHh1SUNwY2JpQXFJRUJ0YjJSMWJHVmNiaUFxTDF4dWFXMXdiM0owSUhWMGFXd2dabkp2YlNBbmRYUnBiQ2M3WEc1Y2JuWmhjaUJ3YkdGMFptOXliU0E5SUc1bGR5QW9ablZ1WTNScGIyNGdLQ2tnZTF4dVhHNWNkR1oxYm1OMGFXOXVJR055WldGMFpVVjJaVzUwSUNoZmJtRnRaU3dnWDNCeWIzQnpLU0I3WEc1Y2RGeDBkbUZ5SUdWMlpXNTBUMkpxWldOME8xeHVYRzVjZEZ4MFpYWmxiblJQWW1wbFkzUWdQU0IxZEdsc0xtMXBlR2x1S0c1bGR5QkZkbVZ1ZENnbloyRnRaUzFsZG1WdWRDY3NJSHRpZFdKaWJHVnpPblJ5ZFdVc0lHTmhibU5sYkdGaWJHVTZabUZzYzJWOUtTd2dlMXh1WEhSY2RGeDBibUZ0WlRvZ1gyNWhiV1VzWEc1Y2RGeDBYSFJ5WlhOd2IyNWtPaUJtZFc1amRHbHZiaUFvWDJSaGRHRXBJSHRjYmx4MFhIUmNkRngwZG1GeUlIQnNZWFJtYjNKdFJYWmxiblE3WEc1Y2JseDBYSFJjZEZ4MGNHeGhkR1p2Y20xRmRtVnVkQ0E5SUNRdVJYWmxiblFvSjNCc1lYUm1iM0p0TFdWMlpXNTBKeXdnZTF4dVhIUmNkRngwWEhSY2RHNWhiV1U2SUY5dVlXMWxMRnh1WEhSY2RGeDBYSFJjZEdkaGJXVkVZWFJoT2lCZlpHRjBZVnh1WEhSY2RGeDBYSFI5S1R0Y2JseDBYSFJjZEZ4MFhHNWNkRngwWEhSY2RIQnNMbWRoYldVdWRISnBaMmRsY2lod2JHRjBabTl5YlVWMlpXNTBLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlMQ0JmY0hKdmNITXBPMXh1WEc1Y2RGeDBjbVYwZFhKdUlHVjJaVzUwVDJKcVpXTjBPMXh1WEhSOVhHNWNibHgwZEdocGN5NUZWa1ZPVkY5SlRrbFVJRDBnSjJsdWFYUW5PMXh1WEhSMGFHbHpMa1ZXUlU1VVgxTkJWa1VnUFNBbmMyRjJaU2M3WEc1Y2RIUm9hWE11UlZaRlRsUmZSVmhKVkNBOUlDZGxlR2wwSnp0Y2JseDBkR2hwY3k1RlZrVk9WRjlHVEVsUVVFVkVJRDBnSjJac2FYQndaV1FuTzF4dVhHNWNkSFJvYVhNdVpXMXBkQ0E5SUdaMWJtTjBhVzl1SUNoZmJtRnRaU2tnZTF4dVhIUmNkSGRwYm1SdmR5NW1jbUZ0WlVWc1pXMWxiblF1WkdsemNHRjBZMmhGZG1WdWRDaGpjbVZoZEdWRmRtVnVkQ2hmYm1GdFpTa3BPMXh1WEhSOU8xeHVYRzVjZEhSb2FYTXVjMkYyWlVkaGJXVlRkR0YwWlNBOUlHWjFibU4wYVc5dUlDaGZaR0YwWVNrZ2UxeHVYSFJjZEhkcGJtUnZkeTVtY21GdFpVVnNaVzFsYm5RdVpHbHpjR0YwWTJoRmRtVnVkQ2hqY21WaGRHVkZkbVZ1ZENoMGFHbHpMa1ZXUlU1VVgxTkJWa1VzSUh0Y2JseDBYSFJjZEdkaGJXVkVZWFJoT2lCZlpHRjBZVnh1WEhSY2RIMHBLVHRjYmx4MGZUdGNibHh1ZlNrN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElIQnNZWFJtYjNKdE8xeHVYRzVjYmx4dUx5b3FJRmRGUWxCQlEwc2dSazlQVkVWU0lDb3FYRzRnS2lvZ0xpOXpiM1Z5WTJVdmNHeGhkR1p2Y20wdWFuTmNiaUFxS2k4aVhTd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVwiKTtcblxuLyoqKi8gfVxuLyoqKioqKi8gXSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9+L2pzLWludGVyYWN0aXZlLWxpYnJhcnkvYnVpbGQvcGxheS5qc1xuICoqIG1vZHVsZSBpZCA9IDNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 4 */
/***/ function(module, exports) {

	eval("pl.game.config({\n\tscreenSelector: '.screen',\n\tcomponentDirectory: 'components/',\n\tdimensions: {\n\t\twidth: 960,\n\t\tratio: 16 / 9\n\t},\n\tshouldLoadComponentStyles: false\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hbmltYWwtaWQvc291cmNlL2pzL2NvbmZpZy5nYW1lLmpzP2ZhMmQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDZCxlQUFjLEVBQUUsU0FBUztBQUN6QixtQkFBa0IsRUFBRSxhQUFhO0FBQ2pDLFdBQVUsRUFBRTtBQUNYLE9BQUssRUFBRSxHQUFHO0FBQ1YsT0FBSyxFQUFFLEVBQUUsR0FBQyxDQUFDO0VBQ1g7QUFDRCwwQkFBeUIsRUFBRSxLQUFLO0NBQ2hDLENBQUMiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbInBsLmdhbWUuY29uZmlnKHtcblx0c2NyZWVuU2VsZWN0b3I6ICcuc2NyZWVuJyxcblx0Y29tcG9uZW50RGlyZWN0b3J5OiAnY29tcG9uZW50cy8nLFxuXHRkaW1lbnNpb25zOiB7XG5cdFx0d2lkdGg6IDk2MCxcblx0XHRyYXRpbzogMTYvOVxuXHR9LFxuXHRzaG91bGRMb2FkQ29tcG9uZW50U3R5bGVzOiBmYWxzZVxufSk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FuaW1hbC1pZC9zb3VyY2UvanMvY29uZmlnLmdhbWUuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 5 */
/***/ function(module, exports) {

	eval("pl.game.component('screen-basic', function () {\n\n\tthis.SELECTOR = {\n\t\tCORRECT: '[pl-correct]',\n\t\tINCORRECT: '[pl-incorrect]'\n\t};\n\n\tthis.ready = function () {\n\t\tif (this.isMemberSafe('requiredQueue') && this.requiredQueue) {\n\t\t\tthis.requiredQueue.on('complete', this.bind(function () {\n\t\t\t\tvar sfx;\n\n\t\t\t\tsfx = pl.util.resolvePath(this, 'game.audio.sfx.screenComplete');\n\n\t\t\t\tif (sfx) sfx.play();\n\t\t\t}));\n\t\t}\n\t};\n\n\tthis.next = function () {\n\t\tvar nextScreen, buttonSound;\n\n\t\tnextScreen = this.proto();\n\t\tbuttonSound = pl.util.resolvePath(this, 'game.audio.sfx.button');\n\n\t\tif (nextScreen) {\n\t\t\tthis.screen.leave();\n\t\t\tnextScreen.open();\n\t\t\tif (buttonSound) buttonSound.play();\n\t\t}\n\n\t\treturn nextScreen;\n\t};\n\n\tthis.prev = function () {\n\t\tvar prevScreen, buttonSound;\n\n\t\tprevScreen = this.proto();\n\t\tbuttonSound = pl.util.resolvePath(this, 'game.audio.sfx.button');\n\n\t\tif (prevScreen) {\n\t\t\tthis.screen.close();\n\t\t\tprevScreen.open();\n\t\t\tif (buttonSound) buttonSound.play();\n\t\t}\n\n\t\treturn prevScreen;\n\t};\n\n\tthis.start = function () {\n\t\tvar bgSound, voSound;\n\n\t\tbgSound = pl.util.resolvePath(this, 'audio.background[0]?');\n\t\tvoSound = pl.util.resolvePath(this, 'audio.voiceOver[0]?');\n\n\t\tif (bgSound) bgSound.play();\n\t\tif (voSound) voSound.play();\n\n\t\tif (this.hasOwnProperty('entities') && this.entities[0]) this.entities[0].start();\n\n\t\treturn this;\n\t};\n\n\tthis.on('ui-open', function (_event) {\n\t\tif (this !== _event.targetScope) return;\n\n\t\tif (this.isReady) {\n\t\t\tthis.start();\n\t\t}\n\n\t\tif (!this.isComplete) {\n\t\t\tif (!this.requiredQueue || this.isMemberSafe('requiredQueue') && !this.requiredQueue.length) {\n\t\t\t\tthis.complete();\n\t\t\t}\n\t\t}\n\n\t\tif (this.screen.isLast()) {\n\t\t\tthis.addClass('last');\n\t\t}\n\t});\n\n\tthis.on('ui-leave', function (_event) {\n\t\tif (this.isReady && this === _event.targetScope) {\n\t\t\tthis.stop();\n\t\t}\n\t});\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hbmltYWwtaWQvc291cmNlL2pzL2NvbXBvbmVudHMvc2NyZWVuLWJhc2ljL2JlaGF2aW9yLmpzP2FjMzgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLFlBQVk7O0FBRTdDLEtBQUksQ0FBQyxRQUFRLEdBQUc7QUFDZixTQUFPLEVBQUUsY0FBYztBQUN2QixXQUFTLEVBQUUsZ0JBQWdCO0VBQzNCLENBQUM7O0FBRUYsS0FBSSxDQUFDLEtBQUssR0FBRyxZQUFZO0FBQ3hCLE1BQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO0FBQzdELE9BQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVk7QUFDdkQsUUFBSSxHQUFHLENBQUM7O0FBRVIsT0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSwrQkFBK0IsQ0FBQyxDQUFDOztBQUVqRSxRQUFJLEdBQUcsRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDcEIsQ0FBQyxDQUFDLENBQUM7R0FDSjtFQUNELENBQUM7O0FBRUYsS0FBSSxDQUFDLElBQUksR0FBRyxZQUFZO0FBQ3ZCLE1BQUksVUFBVSxFQUFFLFdBQVcsQ0FBQzs7QUFFNUIsWUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUMxQixhQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLHVCQUF1QixDQUFDLENBQUM7O0FBRWpFLE1BQUksVUFBVSxFQUFFO0FBQ2YsT0FBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNwQixhQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbEIsT0FBSSxXQUFXLEVBQUUsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0dBQ3BDOztBQUVELFNBQU8sVUFBVSxDQUFDO0VBQ2xCLENBQUM7O0FBRUYsS0FBSSxDQUFDLElBQUksR0FBRyxZQUFZO0FBQ3ZCLE1BQUksVUFBVSxFQUFFLFdBQVcsQ0FBQzs7QUFFNUIsWUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUMxQixhQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLHVCQUF1QixDQUFDLENBQUM7O0FBRWpFLE1BQUksVUFBVSxFQUFFO0FBQ2YsT0FBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNwQixhQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbEIsT0FBSSxXQUFXLEVBQUUsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0dBQ3BDOztBQUVELFNBQU8sVUFBVSxDQUFDO0VBQ2xCLENBQUM7O0FBRUYsS0FBSSxDQUFDLEtBQUssR0FBRyxZQUFZO0FBQ3hCLE1BQUksT0FBTyxFQUFFLE9BQU8sQ0FBQzs7QUFFckIsU0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO0FBQzVELFNBQU8sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUscUJBQXFCLENBQUMsQ0FBQzs7QUFFM0QsTUFBSSxPQUFPLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzVCLE1BQUksT0FBTyxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQzs7QUFFNUIsTUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7QUFFbEYsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDOztBQUVGLEtBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLFVBQVUsTUFBTSxFQUFFO0FBQ3BDLE1BQUksSUFBSSxLQUFLLE1BQU0sQ0FBQyxXQUFXLEVBQUUsT0FBTzs7QUFFeEMsTUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO0FBQ2pCLE9BQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztHQUNiOztBQUVELE1BQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO0FBQ3JCLE9BQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxJQUFLLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU8sRUFBRTtBQUM5RixRQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDaEI7R0FDRDs7QUFFRCxNQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUU7QUFDekIsT0FBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUN0QjtFQUNELENBQUMsQ0FBQzs7QUFFSCxLQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxVQUFVLE1BQU0sRUFBRTtBQUNyQyxNQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxLQUFLLE1BQU0sQ0FBQyxXQUFXLEVBQUU7QUFDaEQsT0FBSSxDQUFDLElBQUksRUFBRSxDQUFDO0dBQ1o7RUFDRCxDQUFDLENBQUM7Q0FFSCxDQUFDIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJwbC5nYW1lLmNvbXBvbmVudCgnc2NyZWVuLWJhc2ljJywgZnVuY3Rpb24gKCkge1xuXG5cdHRoaXMuU0VMRUNUT1IgPSB7XG5cdFx0Q09SUkVDVDogJ1twbC1jb3JyZWN0XScsXG5cdFx0SU5DT1JSRUNUOiAnW3BsLWluY29ycmVjdF0nXG5cdH07XG5cblx0dGhpcy5yZWFkeSA9IGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodGhpcy5pc01lbWJlclNhZmUoJ3JlcXVpcmVkUXVldWUnKSAmJiB0aGlzLnJlcXVpcmVkUXVldWUpIHtcblx0XHRcdHRoaXMucmVxdWlyZWRRdWV1ZS5vbignY29tcGxldGUnLCB0aGlzLmJpbmQoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR2YXIgc2Z4O1xuXG5cdFx0XHRcdHNmeCA9IHBsLnV0aWwucmVzb2x2ZVBhdGgodGhpcywgJ2dhbWUuYXVkaW8uc2Z4LnNjcmVlbkNvbXBsZXRlJyk7XG5cblx0XHRcdFx0aWYgKHNmeCkgc2Z4LnBsYXkoKTtcblx0XHRcdH0pKTtcblx0XHR9XG5cdH07XG5cdFxuXHR0aGlzLm5leHQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIG5leHRTY3JlZW4sIGJ1dHRvblNvdW5kO1xuXG5cdFx0bmV4dFNjcmVlbiA9IHRoaXMucHJvdG8oKTtcblx0XHRidXR0b25Tb3VuZCA9IHBsLnV0aWwucmVzb2x2ZVBhdGgodGhpcywgJ2dhbWUuYXVkaW8uc2Z4LmJ1dHRvbicpO1xuXG5cdFx0aWYgKG5leHRTY3JlZW4pIHtcblx0XHRcdHRoaXMuc2NyZWVuLmxlYXZlKCk7XG5cdFx0XHRuZXh0U2NyZWVuLm9wZW4oKTtcblx0XHRcdGlmIChidXR0b25Tb3VuZCkgYnV0dG9uU291bmQucGxheSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiBuZXh0U2NyZWVuO1xuXHR9O1xuXG5cdHRoaXMucHJldiA9IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgcHJldlNjcmVlbiwgYnV0dG9uU291bmQ7XG5cblx0XHRwcmV2U2NyZWVuID0gdGhpcy5wcm90bygpO1xuXHRcdGJ1dHRvblNvdW5kID0gcGwudXRpbC5yZXNvbHZlUGF0aCh0aGlzLCAnZ2FtZS5hdWRpby5zZnguYnV0dG9uJyk7XG5cblx0XHRpZiAocHJldlNjcmVlbikge1xuXHRcdFx0dGhpcy5zY3JlZW4uY2xvc2UoKTtcblx0XHRcdHByZXZTY3JlZW4ub3BlbigpO1xuXHRcdFx0aWYgKGJ1dHRvblNvdW5kKSBidXR0b25Tb3VuZC5wbGF5KCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHByZXZTY3JlZW47XG5cdH07XG5cblx0dGhpcy5zdGFydCA9IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgYmdTb3VuZCwgdm9Tb3VuZDtcblxuXHRcdGJnU291bmQgPSBwbC51dGlsLnJlc29sdmVQYXRoKHRoaXMsICdhdWRpby5iYWNrZ3JvdW5kWzBdPycpO1xuXHRcdHZvU291bmQgPSBwbC51dGlsLnJlc29sdmVQYXRoKHRoaXMsICdhdWRpby52b2ljZU92ZXJbMF0/Jyk7XG5cblx0XHRpZiAoYmdTb3VuZCkgYmdTb3VuZC5wbGF5KCk7XG5cdFx0aWYgKHZvU291bmQpIHZvU291bmQucGxheSgpO1xuXG5cdFx0aWYgKHRoaXMuaGFzT3duUHJvcGVydHkoJ2VudGl0aWVzJykgJiYgdGhpcy5lbnRpdGllc1swXSkgdGhpcy5lbnRpdGllc1swXS5zdGFydCgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0dGhpcy5vbigndWktb3BlbicsIGZ1bmN0aW9uIChfZXZlbnQpIHtcblx0XHRpZiAodGhpcyAhPT0gX2V2ZW50LnRhcmdldFNjb3BlKSByZXR1cm47XG5cblx0XHRpZiAodGhpcy5pc1JlYWR5KSB7XG5cdFx0XHR0aGlzLnN0YXJ0KCk7XG5cdFx0fVxuXG5cdFx0aWYgKCF0aGlzLmlzQ29tcGxldGUpIHtcblx0XHRcdGlmICghdGhpcy5yZXF1aXJlZFF1ZXVlIHx8ICh0aGlzLmlzTWVtYmVyU2FmZSgncmVxdWlyZWRRdWV1ZScpICYmICF0aGlzLnJlcXVpcmVkUXVldWUubGVuZ3RoKSkge1xuXHRcdFx0XHR0aGlzLmNvbXBsZXRlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuc2NyZWVuLmlzTGFzdCgpKSB7XG5cdFx0XHR0aGlzLmFkZENsYXNzKCdsYXN0Jyk7XG5cdFx0fVxuXHR9KTtcblxuXHR0aGlzLm9uKCd1aS1sZWF2ZScsIGZ1bmN0aW9uIChfZXZlbnQpIHtcblx0XHRpZiAodGhpcy5pc1JlYWR5ICYmIHRoaXMgPT09IF9ldmVudC50YXJnZXRTY29wZSkge1xuXHRcdFx0dGhpcy5zdG9wKCk7XG5cdFx0fVxuXHR9KTtcblxufSk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FuaW1hbC1pZC9zb3VyY2UvanMvY29tcG9uZW50cy9zY3JlZW4tYmFzaWMvYmVoYXZpb3IuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 6 */
/***/ function(module, exports) {

	eval("pl.game.component('screen-quit', function () {\n\n\t// TODO: Make an automated way to handle this\n\tthis.on('transitionend', function (_event) {\n\t\tif (this.state(this.STATE.LEAVE)) {\n\t\t\tthis.addClass('LEAVE-END');\n\t\t}\n\t});\n\n\tthis.on('ui-open', function (_event) {\n\t\tthis.game.addClass('QUIT-SCREEN');\n\t\tthis.removeClass('LEAVE-END');\n\t});\n\n\tthis.on('ui-leave', function () {\n\t\tthis.game.removeClass('QUIT-SCREEN');\n\t});\n\n\tthis.okay = function () {\n\t\tthis.screen.audio.sfx.play();\n\t\tthis.game.exit();\n\t};\n\n\tthis.cancel = function () {\n\t\tthis.screen.audio.sfx.play();\n\t\tthis.leave();\n\t};\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hbmltYWwtaWQvc291cmNlL2pzL2NvbXBvbmVudHMvc2NyZWVuLXF1aXQvYmVoYXZpb3IuanM/MmY0NyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsWUFBWTs7O0FBRzVDLEtBQUksQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLFVBQVUsTUFBTSxFQUFFO0FBQzFDLE1BQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ2pDLE9BQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7R0FDM0I7RUFDRCxDQUFDLENBQUM7O0FBRUgsS0FBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsVUFBVSxNQUFNLEVBQUU7QUFDcEMsTUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDbEMsTUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztFQUM5QixDQUFDLENBQUM7O0FBRUgsS0FBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsWUFBWTtBQUMvQixNQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQztFQUNyQyxDQUFDLENBQUM7O0FBRUgsS0FBSSxDQUFDLElBQUksR0FBRyxZQUFZO0FBQ3ZCLE1BQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUM3QixNQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0VBQ2pCLENBQUM7O0FBRUYsS0FBSSxDQUFDLE1BQU0sR0FBRyxZQUFZO0FBQ3pCLE1BQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUM3QixNQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7RUFDYixDQUFDO0NBRUYsQ0FBQyIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsicGwuZ2FtZS5jb21wb25lbnQoJ3NjcmVlbi1xdWl0JywgZnVuY3Rpb24gKCkge1xuXG5cdC8vIFRPRE86IE1ha2UgYW4gYXV0b21hdGVkIHdheSB0byBoYW5kbGUgdGhpc1xuXHR0aGlzLm9uKCd0cmFuc2l0aW9uZW5kJywgZnVuY3Rpb24gKF9ldmVudCkge1xuXHRcdGlmICh0aGlzLnN0YXRlKHRoaXMuU1RBVEUuTEVBVkUpKSB7XG5cdFx0XHR0aGlzLmFkZENsYXNzKCdMRUFWRS1FTkQnKTtcdFxuXHRcdH1cblx0fSk7XG5cdFxuXHR0aGlzLm9uKCd1aS1vcGVuJywgZnVuY3Rpb24gKF9ldmVudCkge1xuXHRcdHRoaXMuZ2FtZS5hZGRDbGFzcygnUVVJVC1TQ1JFRU4nKTtcblx0XHR0aGlzLnJlbW92ZUNsYXNzKCdMRUFWRS1FTkQnKTtcblx0fSk7XG5cblx0dGhpcy5vbigndWktbGVhdmUnLCBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5nYW1lLnJlbW92ZUNsYXNzKCdRVUlULVNDUkVFTicpO1xuXHR9KTtcblx0XG5cdHRoaXMub2theSA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLnNjcmVlbi5hdWRpby5zZngucGxheSgpO1xuXHRcdHRoaXMuZ2FtZS5leGl0KCk7XG5cdH07XG5cblx0dGhpcy5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5zY3JlZW4uYXVkaW8uc2Z4LnBsYXkoKTtcblx0XHR0aGlzLmxlYXZlKCk7XG5cdH07XG5cbn0pO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYW5pbWFsLWlkL3NvdXJjZS9qcy9jb21wb25lbnRzL3NjcmVlbi1xdWl0L2JlaGF2aW9yLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 7 */
/***/ function(module, exports) {

	eval("pl.game.component('title', function () {\n\n\tthis.ready = function () {\n\t\tthis.open();\n\t\tthis.audio.background.play();\n\t\tthis.delay(1500, function () {\n\t\t\tthis.image.addClass('animated ' + this.image.attr('pl-animation'));\n\t\t\tthis.complete();\n\t\t});\n\t};\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hbmltYWwtaWQvc291cmNlL2pzL2NvbXBvbmVudHMvdGl0bGUvYmVoYXZpb3IuanM/MGM1NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsWUFBWTs7QUFFdEMsS0FBSSxDQUFDLEtBQUssR0FBRyxZQUFZO0FBQ3hCLE1BQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNaLE1BQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzdCLE1BQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFlBQVk7QUFDNUIsT0FBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsV0FBVyxHQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7QUFDakUsT0FBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0dBQ2hCLENBQUMsQ0FBQztFQUNILENBQUM7Q0FFRixDQUFDIiwiZmlsZSI6IjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJwbC5nYW1lLmNvbXBvbmVudCgndGl0bGUnLCBmdW5jdGlvbiAoKSB7XG5cblx0dGhpcy5yZWFkeSA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLm9wZW4oKTtcblx0XHR0aGlzLmF1ZGlvLmJhY2tncm91bmQucGxheSgpO1xuXHRcdHRoaXMuZGVsYXkoMTUwMCwgZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhpcy5pbWFnZS5hZGRDbGFzcygnYW5pbWF0ZWQgJyt0aGlzLmltYWdlLmF0dHIoJ3BsLWFuaW1hdGlvbicpKTtcblx0XHRcdHRoaXMuY29tcGxldGUoKTtcblx0XHR9KTtcblx0fTtcblxufSk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hbmltYWwtaWQvc291cmNlL2pzL2NvbXBvbmVudHMvdGl0bGUvYmVoYXZpb3IuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 8 */
/***/ function(module, exports) {

	eval("pl.game.component('frame', function () {\n\n\tthis.start = function () {\n\t\tvar bgSound, voSound;\n\n\t\tbgSound = pl.util.resolvePath(this, 'audio.background[0]?');\n\t\tvoSound = pl.util.resolvePath(this, 'audio.voiceOver[0]?');\n\n\t\tif (bgSound) bgSound.play();\n\t\tif (voSound && !voSound.hasAttribute(\"pl-dontautoplay\")) voSound.play();\n\n\t\tif (this.hasOwnProperty('entities') && this.entities[0]) this.entities[0].start();\n\n\t\treturn this;\n\t};\n\n\tthis.handleProperty({\n\t\ttitle: function title(_node, _name, _value) {\n\t\t\tif (this.is(_node)) {\n\t\t\t\tthis.find('.frame').addClass('title');\n\t\t\t\tthis.game.defineRule('.experiment:nth-of-type(' + (this.screen.index() + 1) + ') .frame-component .frame.title::before', {\n\t\t\t\t\tbackgroundImage: 'url(' + _value + ')'\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\tthis.on('ui-open', function (_event) {\n\t\tif (this.isReady) {\n\t\t\tthis.start();\n\t\t}\n\n\t\tif (this === _event.targetScope) {\n\t\t\tif (!(this.hasOwnProperty('isComplete') && this.isComplete) && !(this.hasOwnProperty('requiredQueue') && this.requiredQueue && this.requiredQueue.length)) {\n\t\t\t\tthis.complete();\n\t\t\t}\n\t\t}\n\t});\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hbmltYWwtaWQvc291cmNlL2pzL2NvbXBvbmVudHMvZnJhbWUvYmVoYXZpb3IuanM/ZjA5OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsWUFBWTs7QUFFdEMsS0FBSSxDQUFDLEtBQUssR0FBRyxZQUFZO0FBQ3hCLE1BQUksT0FBTyxFQUFFLE9BQU8sQ0FBQzs7QUFFckIsU0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO0FBQzVELFNBQU8sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUscUJBQXFCLENBQUMsQ0FBQzs7QUFFM0QsTUFBSSxPQUFPLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzVCLE1BQUksT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQzs7QUFFeEUsTUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7QUFFbEYsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDOztBQUVGLEtBQUksQ0FBQyxjQUFjLENBQUM7QUFDbkIsT0FBSyxFQUFFLGVBQVUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUU7QUFDdEMsT0FBSSxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ25CLFFBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3RDLFFBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLDBCQUEwQixJQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEdBQUMseUNBQXlDLEVBQUU7QUFDbEgsb0JBQWUsRUFBRSxNQUFNLEdBQUUsTUFBTSxHQUFFLEdBQUc7S0FDcEMsQ0FBQyxDQUFDO0lBQ0g7R0FDRDtFQUNELENBQUMsQ0FBQzs7QUFFSCxLQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxVQUFVLE1BQU0sRUFBRTtBQUNwQyxNQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7QUFDakIsT0FBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0dBQ2I7O0FBRUQsTUFBSSxJQUFJLEtBQUssTUFBTSxDQUFDLFdBQVcsRUFBRTtBQUNoQyxPQUFJLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxJQUFLLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUUsRUFBRTtBQUM1SixRQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDaEI7R0FDRDtFQUNELENBQUMsQ0FBQztDQUVILENBQUMiLCJmaWxlIjoiOC5qcyIsInNvdXJjZXNDb250ZW50IjpbInBsLmdhbWUuY29tcG9uZW50KCdmcmFtZScsIGZ1bmN0aW9uICgpIHtcblx0XG5cdHRoaXMuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIGJnU291bmQsIHZvU291bmQ7XG5cblx0XHRiZ1NvdW5kID0gcGwudXRpbC5yZXNvbHZlUGF0aCh0aGlzLCAnYXVkaW8uYmFja2dyb3VuZFswXT8nKTtcblx0XHR2b1NvdW5kID0gcGwudXRpbC5yZXNvbHZlUGF0aCh0aGlzLCAnYXVkaW8udm9pY2VPdmVyWzBdPycpO1xuXG5cdFx0aWYgKGJnU291bmQpIGJnU291bmQucGxheSgpO1xuXHRcdGlmICh2b1NvdW5kICYmICF2b1NvdW5kLmhhc0F0dHJpYnV0ZShcInBsLWRvbnRhdXRvcGxheVwiKSkgdm9Tb3VuZC5wbGF5KCk7XG5cblx0XHRpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eSgnZW50aXRpZXMnKSAmJiB0aGlzLmVudGl0aWVzWzBdKSB0aGlzLmVudGl0aWVzWzBdLnN0YXJ0KCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHR0aGlzLmhhbmRsZVByb3BlcnR5KHtcblx0XHR0aXRsZTogZnVuY3Rpb24gKF9ub2RlLCBfbmFtZSwgX3ZhbHVlKSB7XG5cdFx0XHRpZiAodGhpcy5pcyhfbm9kZSkpIHtcblx0XHRcdFx0dGhpcy5maW5kKCcuZnJhbWUnKS5hZGRDbGFzcygndGl0bGUnKTtcblx0XHRcdFx0dGhpcy5nYW1lLmRlZmluZVJ1bGUoJy5leHBlcmltZW50Om50aC1vZi10eXBlKCcrKHRoaXMuc2NyZWVuLmluZGV4KCkrMSkrJykgLmZyYW1lLWNvbXBvbmVudCAuZnJhbWUudGl0bGU6OmJlZm9yZScsIHtcblx0XHRcdFx0XHRiYWNrZ3JvdW5kSW1hZ2U6ICd1cmwoJysgX3ZhbHVlICsnKSdcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHR0aGlzLm9uKCd1aS1vcGVuJywgZnVuY3Rpb24gKF9ldmVudCkge1xuXHRcdGlmICh0aGlzLmlzUmVhZHkpIHtcblx0XHRcdHRoaXMuc3RhcnQoKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcyA9PT0gX2V2ZW50LnRhcmdldFNjb3BlKSB7XG5cdFx0XHRpZiAoISh0aGlzLmhhc093blByb3BlcnR5KCdpc0NvbXBsZXRlJykgJiYgdGhpcy5pc0NvbXBsZXRlKSAmJiAhKHRoaXMuaGFzT3duUHJvcGVydHkoJ3JlcXVpcmVkUXVldWUnKSAmJiAodGhpcy5yZXF1aXJlZFF1ZXVlICYmIHRoaXMucmVxdWlyZWRRdWV1ZS5sZW5ndGgpKSkge1xuXHRcdFx0XHR0aGlzLmNvbXBsZXRlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxufSk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FuaW1hbC1pZC9zb3VyY2UvanMvY29tcG9uZW50cy9mcmFtZS9iZWhhdmlvci5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 9 */
/***/ function(module, exports) {

	eval("pl.game.component('score', function () {\n\n\tthis.value = 0;\n\n\tthis.entity('.board', function () {\n\n\t\tthis.template = null;\n\n\t\tthis.ready = function () {\n\t\t\tthis.template = this.html();\n\t\t};\n\n\t\tthis.render = function () {\n\t\t\tthis.html(this.template.replace('{{score}}', this.value));\n\t\t\treturn this;\n\t\t};\n\t});\n\n\tthis.init = function () {\n\t\tthis.screen.require(this);\n\t};\n\n\tthis.ready = function () {\n\t\tthis.board.render();\n\t};\n\n\tthis.up = function (_count) {\n\t\tthis.value += _count || 1;\n\n\t\tthis.board.render();\n\n\t\tconsole.log('score', this.value, this.properties.max);\n\n\t\tif (this.value == this.properties.max) {\n\t\t\tconsole.log('oh word');\n\t\t\tthis.complete();\n\t\t}\n\n\t\treturn this;\n\t};\n\n\tthis.down = function (_count) {\n\t\tthis.value -= _count || 1;\n\n\t\tthis.board.render();\n\n\t\tif (this.value == this.properties.max) {\n\t\t\tthis.complete();\n\t\t}\n\n\t\treturn this;\n\t};\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hbmltYWwtaWQvc291cmNlL2pzL2NvbXBvbmVudHMvc2NvcmUvYmVoYXZpb3IuanM/NGY0YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsWUFBWTs7QUFFdEMsS0FBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7O0FBRWYsS0FBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsWUFBWTs7QUFFakMsTUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7O0FBRXJCLE1BQUksQ0FBQyxLQUFLLEdBQUcsWUFBWTtBQUN4QixPQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztHQUM1QixDQUFDOztBQUVGLE1BQUksQ0FBQyxNQUFNLEdBQUcsWUFBWTtBQUN6QixPQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUMxRCxVQUFPLElBQUksQ0FBQztHQUNaLENBQUM7RUFFRixDQUFDLENBQUM7O0FBRUgsS0FBSSxDQUFDLElBQUksR0FBRyxZQUFZO0FBQ3ZCLE1BQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0VBQzFCLENBQUM7O0FBRUYsS0FBSSxDQUFDLEtBQUssR0FBRyxZQUFZO0FBQ3hCLE1BQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7RUFDcEIsQ0FBQzs7QUFFRixLQUFJLENBQUMsRUFBRSxHQUFHLFVBQVUsTUFBTSxFQUFFO0FBQzNCLE1BQUksQ0FBQyxLQUFLLElBQUcsTUFBTSxJQUFJLENBQUMsQ0FBQzs7QUFFekIsTUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQzs7QUFFcEIsU0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQzs7QUFFckQsTUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFO0FBQ3RDLFVBQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDdkIsT0FBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0dBQ2hCOztBQUVELFNBQU8sSUFBSSxDQUFDO0VBQ1osQ0FBQzs7QUFFRixLQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsTUFBTSxFQUFFO0FBQzdCLE1BQUksQ0FBQyxLQUFLLElBQUcsTUFBTSxJQUFJLENBQUMsQ0FBQzs7QUFFekIsTUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQzs7QUFFcEIsTUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFO0FBQ3RDLE9BQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztHQUNoQjs7QUFFRCxTQUFPLElBQUksQ0FBQztFQUNaLENBQUM7Q0FFRixDQUFDIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJwbC5nYW1lLmNvbXBvbmVudCgnc2NvcmUnLCBmdW5jdGlvbiAoKSB7XG5cblx0dGhpcy52YWx1ZSA9IDA7XG5cblx0dGhpcy5lbnRpdHkoJy5ib2FyZCcsIGZ1bmN0aW9uICgpIHtcblx0XHRcblx0XHR0aGlzLnRlbXBsYXRlID0gbnVsbDtcblxuXHRcdHRoaXMucmVhZHkgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aGlzLnRlbXBsYXRlID0gdGhpcy5odG1sKCk7XG5cdFx0fTtcblxuXHRcdHRoaXMucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhpcy5odG1sKHRoaXMudGVtcGxhdGUucmVwbGFjZSgne3tzY29yZX19JywgdGhpcy52YWx1ZSkpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fTtcblxuXHR9KTtcblxuXHR0aGlzLmluaXQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5zY3JlZW4ucmVxdWlyZSh0aGlzKTtcblx0fTtcblxuXHR0aGlzLnJlYWR5ID0gZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMuYm9hcmQucmVuZGVyKCk7XG5cdH07XG5cblx0dGhpcy51cCA9IGZ1bmN0aW9uIChfY291bnQpIHtcblx0XHR0aGlzLnZhbHVlKz0gX2NvdW50IHx8IDE7XG5cblx0XHR0aGlzLmJvYXJkLnJlbmRlcigpO1xuXG5cdFx0Y29uc29sZS5sb2coJ3Njb3JlJywgdGhpcy52YWx1ZSwgdGhpcy5wcm9wZXJ0aWVzLm1heClcblxuXHRcdGlmICh0aGlzLnZhbHVlID09IHRoaXMucHJvcGVydGllcy5tYXgpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdvaCB3b3JkJyk7XG5cdFx0XHR0aGlzLmNvbXBsZXRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0dGhpcy5kb3duID0gZnVuY3Rpb24gKF9jb3VudCkge1xuXHRcdHRoaXMudmFsdWUtPSBfY291bnQgfHwgMTtcblxuXHRcdHRoaXMuYm9hcmQucmVuZGVyKCk7XG5cdFx0XG5cdFx0aWYgKHRoaXMudmFsdWUgPT0gdGhpcy5wcm9wZXJ0aWVzLm1heCkge1xuXHRcdFx0dGhpcy5jb21wbGV0ZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG59KTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FuaW1hbC1pZC9zb3VyY2UvanMvY29tcG9uZW50cy9zY29yZS9iZWhhdmlvci5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 10 */
/***/ function(module, exports) {

	eval("pl.game.component('reveal', function () {\n\n\tthis.respond('select', function (_event) {\n\t\tvar vo, index;\n\n\t\tindex = _event.message;\n\t\tthis.closeAll();\n\n\t\tif (typeof index !== 'undefined') {\n\t\t\tif (typeof index === 'number') {\n\t\t\t\tthis.open(this.find('li').eq(index));\n\t\t\t\tthis.audio.voiceOver[index].play();\n\t\t\t} else if (typeof index === 'string') {\n\t\t\t\tif (this[index]) {\n\t\t\t\t\tthis.open(this[index]);\n\t\t\t\t\tthis.items.correct.ready(index);\n\n\t\t\t\t\tif (this.audio) {\n\t\t\t\t\t\tindex = this[index].index();\n\t\t\t\t\t\tvo = this.audio.voiceOver ? this.audio.voiceOver[index] : null;\n\n\t\t\t\t\t\tif (vo) vo.play();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tthis.item = function (_id) {\n\t\tvar vo, index;\n\n\t\tthis.closeAll();\n\n\t\tif (typeof _id !== 'undefined') {\n\t\t\tif (typeof _id === 'number') {\n\t\t\t\tthis.open('li:nth-child(' + _id + ')');\n\t\t\t\tthis.audio.voiceOver[_id].play();\n\t\t\t} else if (typeof _id === 'string') {\n\t\t\t\tif (this[_id]) {\n\t\t\t\t\tthis.open(this[_id]);\n\n\t\t\t\t\tif (this.audio) {\n\t\t\t\t\t\tindex = this[_id].index();\n\t\t\t\t\t\tvo = this.audio.voiceOver ? this.audio.voiceOver[index] : null;\n\n\t\t\t\t\t\tif (vo) vo.play();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.closeAll = function () {\n\t\tif (!this.screen.state(this.screen.STATE.VOICE_OVER)) {\n\t\t\tthis.close(this.find('li.OPEN'));\n\t\t}\n\t};\n\n\tthis.handleCloseClick = function () {\n\t\tthis.closeAll();\n\t\tthis.screen.next();\n\t};\n\n\tthis.ready = function () {\n\t\tvar correct;\n\n\t\tcorrect = pl.Queue.create();\n\n\t\tcorrect.on('complete', this.bind(function () {\n\t\t\tthis.screen.complete();\n\t\t}));\n\n\t\tthis.items = this.find('[pl-required]').map(function (_index, _node) {\n\t\t\tcorrect.add(_node.getAttribute(\"pl-id\"));\n\t\t\treturn _node;\n\t\t}).toArray();\n\n\t\tthis.items.correct = correct;\n\t};\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hbmltYWwtaWQvc291cmNlL2pzL2NvbXBvbmVudHMvcmV2ZWFsL2JlaGF2aW9yLmpzPzUxODUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLFlBQVk7O0FBRXZDLEtBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFVBQVUsTUFBTSxFQUFFO0FBQ3hDLE1BQUksRUFBRSxFQUFFLEtBQUssQ0FBQzs7QUFFZCxPQUFLLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztBQUN2QixNQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7O0FBRWhCLE1BQUcsT0FBTyxLQUFLLEtBQUssV0FBVyxFQUFFO0FBQ2hDLE9BQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO0FBQzlCLFFBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNyQyxRQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNuQyxNQUVJLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO0FBQ25DLFFBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ2hCLFNBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDdkIsU0FBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDOztBQUVoQyxTQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7QUFDZixXQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQzVCLFFBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUM7O0FBRS9ELFVBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztNQUNsQjtLQUNEO0lBQ0Q7R0FDRDtFQUNELENBQUMsQ0FBQzs7QUFFSCxLQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsR0FBRyxFQUFFO0FBQzFCLE1BQUksRUFBRSxFQUFFLEtBQUssQ0FBQzs7QUFFZCxNQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7O0FBRWhCLE1BQUcsT0FBTyxHQUFHLEtBQUssV0FBVyxFQUFFO0FBQzlCLE9BQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO0FBQzVCLFFBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxHQUFDLEdBQUcsR0FBQyxHQUFHLENBQUMsQ0FBQztBQUNuQyxRQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNqQyxNQUVJLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO0FBQ2pDLFFBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQ2QsU0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzs7QUFFckIsU0FBSSxJQUFJLENBQUMsS0FBSyxFQUFFO0FBQ2YsV0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUMxQixRQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDOztBQUUvRCxVQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7TUFDbEI7S0FDRDtJQUNEO0dBQ0Q7RUFDRCxDQUFDOztBQUVGLEtBQUksQ0FBQyxRQUFRLEdBQUcsWUFBVztBQUMxQixNQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUU7QUFDcEQsT0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7R0FDakM7RUFDRCxDQUFDOztBQUVGLEtBQUksQ0FBQyxnQkFBZ0IsR0FBRyxZQUFXO0FBQ2xDLE1BQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNoQixNQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0VBQ25CLENBQUM7O0FBRUYsS0FBSSxDQUFDLEtBQUssR0FBRyxZQUFZO0FBQ3hCLE1BQUksT0FBTyxDQUFDOztBQUVaLFNBQU8sR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDOztBQUU1QixTQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVk7QUFDNUMsT0FBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztHQUN2QixDQUFDLENBQUMsQ0FBQzs7QUFFSixNQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FDZixJQUFJLENBQUMsZUFBZSxDQUFDLENBQ3JCLEdBQUcsQ0FBQyxVQUFVLE1BQU0sRUFBRSxLQUFLLEVBQUU7QUFDN0IsVUFBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDekMsVUFBTyxLQUFLLENBQUM7R0FDYixDQUFDLENBQ0QsT0FBTyxFQUFFLENBQUM7O0FBRVosTUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0VBQzdCLENBQUM7Q0FFRixDQUFDIiwiZmlsZSI6IjEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsicGwuZ2FtZS5jb21wb25lbnQoJ3JldmVhbCcsIGZ1bmN0aW9uICgpIHtcblxuXHR0aGlzLnJlc3BvbmQoJ3NlbGVjdCcsIGZ1bmN0aW9uIChfZXZlbnQpIHtcblx0XHR2YXIgdm8sIGluZGV4O1xuXG5cdFx0aW5kZXggPSBfZXZlbnQubWVzc2FnZTtcblx0XHR0aGlzLmNsb3NlQWxsKCk7XG5cblx0XHRpZih0eXBlb2YgaW5kZXggIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRpZiAodHlwZW9mIGluZGV4ID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHR0aGlzLm9wZW4odGhpcy5maW5kKCdsaScpLmVxKGluZGV4KSk7XG5cdFx0XHRcdHRoaXMuYXVkaW8udm9pY2VPdmVyW2luZGV4XS5wbGF5KCk7XG5cdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0ZWxzZSBpZiAodHlwZW9mIGluZGV4ID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRpZiAodGhpc1tpbmRleF0pIHtcblx0XHRcdFx0XHR0aGlzLm9wZW4odGhpc1tpbmRleF0pO1xuXHRcdFx0XHRcdHRoaXMuaXRlbXMuY29ycmVjdC5yZWFkeShpbmRleCk7XG5cblx0XHRcdFx0XHRpZiAodGhpcy5hdWRpbykge1xuXHRcdFx0XHRcdFx0aW5kZXggPSB0aGlzW2luZGV4XS5pbmRleCgpO1xuXHRcdFx0XHRcdFx0dm8gPSB0aGlzLmF1ZGlvLnZvaWNlT3ZlciA/IHRoaXMuYXVkaW8udm9pY2VPdmVyW2luZGV4XSA6IG51bGw7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGlmICh2bykgdm8ucGxheSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0dGhpcy5pdGVtID0gZnVuY3Rpb24gKF9pZCkge1xuXHRcdHZhciB2bywgaW5kZXg7XG5cblx0XHR0aGlzLmNsb3NlQWxsKCk7XG5cblx0XHRpZih0eXBlb2YgX2lkICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0aWYgKHR5cGVvZiBfaWQgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdHRoaXMub3BlbignbGk6bnRoLWNoaWxkKCcrX2lkKycpJyk7XG5cdFx0XHRcdHRoaXMuYXVkaW8udm9pY2VPdmVyW19pZF0ucGxheSgpO1xuXHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBfaWQgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdGlmICh0aGlzW19pZF0pIHtcblx0XHRcdFx0XHR0aGlzLm9wZW4odGhpc1tfaWRdKTtcblxuXHRcdFx0XHRcdGlmICh0aGlzLmF1ZGlvKSB7XG5cdFx0XHRcdFx0XHRpbmRleCA9IHRoaXNbX2lkXS5pbmRleCgpO1xuXHRcdFx0XHRcdFx0dm8gPSB0aGlzLmF1ZGlvLnZvaWNlT3ZlciA/IHRoaXMuYXVkaW8udm9pY2VPdmVyW2luZGV4XSA6IG51bGw7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGlmICh2bykgdm8ucGxheSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHR0aGlzLmNsb3NlQWxsID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYoIXRoaXMuc2NyZWVuLnN0YXRlKHRoaXMuc2NyZWVuLlNUQVRFLlZPSUNFX09WRVIpKSB7XG5cdFx0XHR0aGlzLmNsb3NlKHRoaXMuZmluZCgnbGkuT1BFTicpKTtcblx0XHR9XG5cdH07XG5cblx0dGhpcy5oYW5kbGVDbG9zZUNsaWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5jbG9zZUFsbCgpO1xuXHRcdHRoaXMuc2NyZWVuLm5leHQoKTtcblx0fTtcblxuXHR0aGlzLnJlYWR5ID0gZnVuY3Rpb24gKCkge1xuXHRcdHZhciBjb3JyZWN0O1xuXG5cdFx0Y29ycmVjdCA9IHBsLlF1ZXVlLmNyZWF0ZSgpO1xuXG5cdFx0Y29ycmVjdC5vbignY29tcGxldGUnLCB0aGlzLmJpbmQoZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhpcy5zY3JlZW4uY29tcGxldGUoKTtcblx0XHR9KSk7XG5cblx0XHR0aGlzLml0ZW1zID0gdGhpc1xuXHRcdFx0LmZpbmQoJ1twbC1yZXF1aXJlZF0nKVxuXHRcdFx0Lm1hcChmdW5jdGlvbiAoX2luZGV4LCBfbm9kZSkge1xuXHRcdFx0XHRjb3JyZWN0LmFkZChfbm9kZS5nZXRBdHRyaWJ1dGUoXCJwbC1pZFwiKSk7XG5cdFx0XHRcdHJldHVybiBfbm9kZTtcblx0XHRcdH0pXG5cdFx0XHQudG9BcnJheSgpO1xuXG5cdFx0dGhpcy5pdGVtcy5jb3JyZWN0ID0gY29ycmVjdDtcblx0fTtcblxufSk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hbmltYWwtaWQvc291cmNlL2pzL2NvbXBvbmVudHMvcmV2ZWFsL2JlaGF2aW9yLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 11 */
/***/ function(module, exports) {

	eval("pl.game.component('multiple-choice', function () {\n\n\tfunction validateAnswer(_scope) {\n\t\tvar answers;\n\n\t\tif (_scope.properties.correct) {\n\t\t\tanswers = _scope.properties.correct.split(/\\s*,\\s*/);\n\n\t\t\tif (~answers.indexOf(String(_scope.getSelected().index()))) {\n\t\t\t\t_scope.complete();\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tthis.answer = function () {\n\t\tif (this.event) {\n\t\t\t$li = $(this.event.target).closest('li');\n\n\t\t\tif (!this.isComplete && this.select($li)) {\n\t\t\t\tvalidateAnswer(this);\n\t\t\t}\n\t\t}\n\t};\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hbmltYWwtaWQvc291cmNlL2pzL2NvbXBvbmVudHMvbXVsdGlwbGUtY2hvaWNlL2JlaGF2aW9yLmpzPzFjYzciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEVBQUUsWUFBWTs7QUFFaEQsVUFBUyxjQUFjLENBQUUsTUFBTSxFQUFFO0FBQ2hDLE1BQUksT0FBTyxDQUFDOztBQUVaLE1BQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUU7QUFDOUIsVUFBTyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQzs7QUFFckQsT0FBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUU7QUFDM0QsVUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2xCO0dBQ0Q7O0FBRUQsU0FBTyxLQUFLLENBQUM7RUFDYjs7QUFFRCxLQUFJLENBQUMsTUFBTSxHQUFHLFlBQVk7QUFDekIsTUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO0FBQ2YsTUFBRyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQzs7QUFFekMsT0FBSSxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUN6QyxrQkFBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JCO0dBQ0Q7RUFDRCxDQUFDO0NBRUYsQ0FBQyIsImZpbGUiOiIxMS5qcyIsInNvdXJjZXNDb250ZW50IjpbInBsLmdhbWUuY29tcG9uZW50KCdtdWx0aXBsZS1jaG9pY2UnLCBmdW5jdGlvbiAoKSB7XG5cblx0ZnVuY3Rpb24gdmFsaWRhdGVBbnN3ZXIgKF9zY29wZSkge1xuXHRcdHZhciBhbnN3ZXJzO1xuXG5cdFx0aWYgKF9zY29wZS5wcm9wZXJ0aWVzLmNvcnJlY3QpIHtcblx0XHRcdGFuc3dlcnMgPSBfc2NvcGUucHJvcGVydGllcy5jb3JyZWN0LnNwbGl0KC9cXHMqLFxccyovKTtcblxuXHRcdFx0aWYgKH5hbnN3ZXJzLmluZGV4T2YoU3RyaW5nKF9zY29wZS5nZXRTZWxlY3RlZCgpLmluZGV4KCkpKSkge1xuXHRcdFx0XHRfc2NvcGUuY29tcGxldGUoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHR0aGlzLmFuc3dlciA9IGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodGhpcy5ldmVudCkge1xuXHRcdFx0JGxpID0gJCh0aGlzLmV2ZW50LnRhcmdldCkuY2xvc2VzdCgnbGknKTtcblxuXHRcdFx0aWYgKCF0aGlzLmlzQ29tcGxldGUgJiYgdGhpcy5zZWxlY3QoJGxpKSkge1xuXHRcdFx0XHR2YWxpZGF0ZUFuc3dlcih0aGlzKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cbn0pO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYW5pbWFsLWlkL3NvdXJjZS9qcy9jb21wb25lbnRzL211bHRpcGxlLWNob2ljZS9iZWhhdmlvci5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 12 */
/***/ function(module, exports) {

	eval("pl.game.component('selectable', function () {\n\n\tthis.behavior('select', function (_target) {\n\t\tvar $target;\n\n\t\tif (this.event && !_target) {\n\t\t\t$target = $(this.event.target).closest('li');\n\n\t\t\tif (this.shouldSelect($target) !== false) {\n\t\t\t\t$target.is('li') && this.audio.sfx.correct.play();\n\t\t\t\tif (this.showSelect($target)) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage: $target.id(),\n\t\t\t\t\t\tbehaviorTarget: $target\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this.audio.sfx.incorrect) this.audio.sfx.incorrect.play();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.proto(_target);\n\t\t}\n\n\t\treturn false;\n\t});\n\n\tthis.shouldSelect = function (_$target) {\n\t\treturn _$target.is(this.screen.SELECTOR.CORRECT);\n\t};\n\n\tthis.showSelect = function (_$target) {\n\t\tvar stateMethod;\n\n\t\tstateMethod = this.properties.selectState || 'select';\n\n\t\tif (_$target) {\n\t\t\tthis[stateMethod](_$target);\n\t\t\tthis.items.correct.ready(_$target.id());\n\t\t}\n\n\t\treturn true;\n\t};\n\n\tthis.populateList = function (_$bin) {\n\t\tvar $items, $bin, random;\n\n\t\t$items = this.find(\".items\");\n\t\t$bin = _$bin;\n\n\t\twhile ($bin.length) {\n\t\t\trandom = Math.floor(_$bin.length * Math.random());\n\t\t\t$bin.eq(random).remove().appendTo($items);\n\t\t\t$bin = this.find('.bin li');\n\t\t}\n\t};\n\n\tthis.ready = function () {\n\t\tvar correct, $bin;\n\n\t\tcorrect = pl.Queue.create();\n\n\t\tcorrect.on('complete', this.bind(function () {\n\t\t\tthis.screen.complete();\n\t\t}));\n\n\t\tthis.items = this.find('.items li[pl-correct]').map(function (_index, _node) {\n\t\t\tcorrect.add(_node.getAttribute(\"pl-id\"));\n\t\t\treturn _node;\n\t\t}).toArray();\n\n\t\tthis.items.correct = correct;\n\n\t\t$bin = this.find('.bin li');\n\n\t\tif ($bin.length) this.populateList($bin);\n\t};\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hbmltYWwtaWQvc291cmNlL2pzL2NvbXBvbmVudHMvc2VsZWN0YWJsZS9iZWhhdmlvci5qcz9hZWFhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxZQUFZOztBQUUzQyxLQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxVQUFVLE9BQU8sRUFBRTtBQUMxQyxNQUFJLE9BQU8sQ0FBQzs7QUFFWixNQUFJLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxPQUFPLEVBQUU7QUFDM0IsVUFBTyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQzs7QUFFN0MsT0FBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEtBQUssRUFBRTtBQUN6QyxXQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNsRCxRQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDNUIsWUFBTztBQUNOLGFBQU8sRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFO0FBQ3JCLG9CQUFjLEVBQUUsT0FBTztNQUN2QixDQUFDO0tBQ0Y7SUFDRCxNQUVJO0FBQ0osUUFBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzdEO0dBQ0QsTUFFSTtBQUNKLE9BQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7R0FDcEI7O0FBRUQsU0FBTyxLQUFLLENBQUM7RUFDYixDQUFDLENBQUM7O0FBRUgsS0FBSSxDQUFDLFlBQVksR0FBRyxVQUFVLFFBQVEsRUFBRTtBQUN2QyxTQUFPLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7RUFDakQsQ0FBQzs7QUFFRixLQUFJLENBQUMsVUFBVSxHQUFHLFVBQVMsUUFBUSxFQUFFO0FBQ3BDLE1BQUksV0FBVyxDQUFDOztBQUVoQixhQUFXLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLElBQUksUUFBUSxDQUFDOztBQUV0RCxNQUFJLFFBQVEsRUFBRTtBQUNiLE9BQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixPQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDeEM7O0FBRUQsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDOztBQUVGLEtBQUksQ0FBQyxZQUFZLEdBQUcsVUFBUyxLQUFLLEVBQUU7QUFDbkMsTUFBSSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQzs7QUFFekIsUUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDN0IsTUFBSSxHQUFHLEtBQUssQ0FBQzs7QUFFYixTQUFNLElBQUksQ0FBQyxNQUFNLEVBQUU7QUFDbEIsU0FBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUNoRCxPQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMxQyxPQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztHQUM1QjtFQUNELENBQUM7O0FBRUYsS0FBSSxDQUFDLEtBQUssR0FBRyxZQUFZO0FBQ3hCLE1BQUksT0FBTyxFQUFFLElBQUksQ0FBQzs7QUFFbEIsU0FBTyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7O0FBRTVCLFNBQU8sQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWTtBQUM1QyxPQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0dBQ3ZCLENBQUMsQ0FBQyxDQUFDOztBQUVKLE1BQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUNmLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUM3QixHQUFHLENBQUMsVUFBVSxNQUFNLEVBQUUsS0FBSyxFQUFFO0FBQzdCLFVBQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ3pDLFVBQU8sS0FBSyxDQUFDO0dBQ2IsQ0FBQyxDQUNELE9BQU8sRUFBRSxDQUFDOztBQUVaLE1BQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQzs7QUFFN0IsTUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7O0FBRTVCLE1BQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0VBQ3hDLENBQUM7Q0FFRixDQUFDIiwiZmlsZSI6IjEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsicGwuZ2FtZS5jb21wb25lbnQoJ3NlbGVjdGFibGUnLCBmdW5jdGlvbiAoKSB7XG5cblx0dGhpcy5iZWhhdmlvcignc2VsZWN0JywgZnVuY3Rpb24gKF90YXJnZXQpIHtcblx0XHR2YXIgJHRhcmdldDtcblxuXHRcdGlmICh0aGlzLmV2ZW50ICYmICFfdGFyZ2V0KSB7XG5cdFx0XHQkdGFyZ2V0ID0gJCh0aGlzLmV2ZW50LnRhcmdldCkuY2xvc2VzdCgnbGknKTtcblxuXHRcdFx0aWYgKHRoaXMuc2hvdWxkU2VsZWN0KCR0YXJnZXQpICE9PSBmYWxzZSkge1xuXHRcdFx0XHQkdGFyZ2V0LmlzKCdsaScpICYmIHRoaXMuYXVkaW8uc2Z4LmNvcnJlY3QucGxheSgpO1xuXHRcdFx0XHRpZih0aGlzLnNob3dTZWxlY3QoJHRhcmdldCkpIHtcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0bWVzc2FnZTogJHRhcmdldC5pZCgpLFxuXHRcdFx0XHRcdFx0YmVoYXZpb3JUYXJnZXQ6ICR0YXJnZXRcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRpZih0aGlzLmF1ZGlvLnNmeC5pbmNvcnJlY3QpIHRoaXMuYXVkaW8uc2Z4LmluY29ycmVjdC5wbGF5KCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZWxzZSB7XG5cdFx0XHR0aGlzLnByb3RvKF90YXJnZXQpO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fSk7XG5cblx0dGhpcy5zaG91bGRTZWxlY3QgPSBmdW5jdGlvbiAoXyR0YXJnZXQpIHtcblx0XHRyZXR1cm4gXyR0YXJnZXQuaXModGhpcy5zY3JlZW4uU0VMRUNUT1IuQ09SUkVDVCk7XG5cdH07XG5cblx0dGhpcy5zaG93U2VsZWN0ID0gZnVuY3Rpb24oXyR0YXJnZXQpIHtcblx0XHR2YXIgc3RhdGVNZXRob2Q7XG5cblx0XHRzdGF0ZU1ldGhvZCA9IHRoaXMucHJvcGVydGllcy5zZWxlY3RTdGF0ZSB8fCAnc2VsZWN0JztcblxuXHRcdGlmIChfJHRhcmdldCkge1xuXHRcdFx0dGhpc1tzdGF0ZU1ldGhvZF0oXyR0YXJnZXQpO1xuXHRcdFx0dGhpcy5pdGVtcy5jb3JyZWN0LnJlYWR5KF8kdGFyZ2V0LmlkKCkpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9O1xuXG5cdHRoaXMucG9wdWxhdGVMaXN0ID0gZnVuY3Rpb24oXyRiaW4pIHtcblx0XHR2YXIgJGl0ZW1zLCAkYmluLCByYW5kb207XG5cblx0XHQkaXRlbXMgPSB0aGlzLmZpbmQoXCIuaXRlbXNcIik7XG5cdFx0JGJpbiA9IF8kYmluO1xuXG5cdFx0d2hpbGUoJGJpbi5sZW5ndGgpIHtcblx0XHRcdHJhbmRvbSA9IE1hdGguZmxvb3IoXyRiaW4ubGVuZ3RoKk1hdGgucmFuZG9tKCkpO1xuXHRcdFx0JGJpbi5lcShyYW5kb20pLnJlbW92ZSgpLmFwcGVuZFRvKCRpdGVtcyk7XG5cdFx0XHQkYmluID0gdGhpcy5maW5kKCcuYmluIGxpJyk7XG5cdFx0fVxuXHR9O1xuXG5cdHRoaXMucmVhZHkgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIGNvcnJlY3QsICRiaW47XG5cblx0XHRjb3JyZWN0ID0gcGwuUXVldWUuY3JlYXRlKCk7XG5cblx0XHRjb3JyZWN0Lm9uKCdjb21wbGV0ZScsIHRoaXMuYmluZChmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aGlzLnNjcmVlbi5jb21wbGV0ZSgpO1xuXHRcdH0pKTtcblxuXHRcdHRoaXMuaXRlbXMgPSB0aGlzXG5cdFx0XHQuZmluZCgnLml0ZW1zIGxpW3BsLWNvcnJlY3RdJylcblx0XHRcdC5tYXAoZnVuY3Rpb24gKF9pbmRleCwgX25vZGUpIHtcblx0XHRcdFx0Y29ycmVjdC5hZGQoX25vZGUuZ2V0QXR0cmlidXRlKFwicGwtaWRcIikpO1xuXHRcdFx0XHRyZXR1cm4gX25vZGU7XG5cdFx0XHR9KVxuXHRcdFx0LnRvQXJyYXkoKTtcblxuXHRcdHRoaXMuaXRlbXMuY29ycmVjdCA9IGNvcnJlY3Q7XG5cblx0XHQkYmluID0gdGhpcy5maW5kKCcuYmluIGxpJyk7XG5cblx0XHRpZigkYmluLmxlbmd0aCkgdGhpcy5wb3B1bGF0ZUxpc3QoJGJpbik7XG5cdH07XG5cbn0pO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYW5pbWFsLWlkL3NvdXJjZS9qcy9jb21wb25lbnRzL3NlbGVjdGFibGUvYmVoYXZpb3IuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 13 */
/***/ function(module, exports) {

	eval("pl.game.component('selectable-all', function () {\n\n\tvar Column;\n\n\tfunction populateViewport() {\n\t\tvar width, item, i, columns;\n\n\t\t// width of the first item\n\t\twidth = this.$bin.width();\n\t\tcolumns = Math.floor(this.$viewport.width() / width);\n\n\t\tfor (i = 0; i < columns; i += 1) {\n\t\t\tthis.columns.push(Column.create().init(this.$bin, this.$viewport));\n\t\t}\n\t}\n\n\tColumn = pl.Basic.extend(function () {\n\n\t\tthis.$el = null;\n\t\tthis.$collection = null;\n\t\tthis.$viewport = null;\n\t\tthis.shouldRecycel = true;\n\n\t\tthis.init = function (_$collection, _$viewport) {\n\t\t\tthis.$collection = _$collection;\n\t\t\tthis.$viewport = _$viewport;\n\t\t\tthis.$el = $(pl.util.random(_$collection)).clone();\n\n\t\t\tthis.$el.css({\n\t\t\t\ttransitionDuration: pl.util.random(5, 10) * (1 + Math.random()) + 's'\n\t\t\t});\n\n\t\t\tthis.$viewport.append(this.$el);\n\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.recycle = function () {\n\t\t\tvar $clone;\n\n\t\t\tif (!this.shouldRecycel) return;\n\n\t\t\t$clone = $(pl.util.random(this.$collection)).clone();\n\t\t\t$clone.css({\n\t\t\t\ttransitionDuration: pl.util.random(7, 15) * (1 + Math.random()) + 's'\n\t\t\t});\n\n\t\t\tthis.$el.replaceWith($clone);\n\t\t\tthis.$el = $clone;\n\n\t\t\tsetTimeout(this.bind(function () {\n\t\t\t\tthis.launch();\n\t\t\t}), 0);\n\n\t\t\treturn $clone;\n\t\t};\n\n\t\tthis.launch = function () {\n\t\t\tthis.$el.on('transitionend', this.bind(function () {\n\t\t\t\tif (!this.recycle()) {\n\t\t\t\t\tthis.$el.off();\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tthis.$el.addClass('LAUNCHED');\n\t\t};\n\n\t\tthis.bind = function (_fun) {\n\t\t\tvar self = this;\n\t\t\treturn function () {\n\t\t\t\treturn _fun.apply(self, arguments);\n\t\t\t};\n\t\t};\n\t});\n\n\tthis.$viewport = null;\n\tthis.$bin = null;\n\tthis.columns = null;\n\n\tthis.init = function () {\n\t\tthis.$viewport = this.find('.viewport');\n\t\tthis.$bin = this.find('.bin li');\n\t\tthis.columns = [];\n\n\t\tthis.$bin.each(this.bind(function (_index, _node) {\n\t\t\tvar $node, message;\n\n\t\t\t$node = $(_node);\n\t\t\tmessage = $node.attr('pl-message');\n\n\t\t\tif ($node.attr('pl-correct') != null) {\n\t\t\t\tthis.screen.require(message);\n\t\t\t}\n\t\t}));\n\n\t\tpopulateViewport.call(this);\n\n\t\treturn this;\n\t};\n\n\tthis.start = function () {\n\t\tthis.columns.forEach(function (_item) {\n\t\t\t_item.launch();\n\t\t});\n\t};\n\n\tthis.stop = function () {\n\t\tthis.columns.forEach(function (_item) {\n\t\t\t_item.shouldRecycel = false;\n\t\t\t_item.$el.removeClass('LAUNCHED').css('transition', 'none');\n\t\t});\n\t};\n\n\tthis.behavior('pick', function (_$target) {\n\t\tvar message = _$target.attr('pl-message');\n\n\t\tconsole.log(this.event.target);\n\n\t\tif (_$target.attr('pl-correct') == null) return;\n\n\t\tthis.screen.requiredQueue.ready(message);\n\n\t\tthis.highlight(_$target);\n\n\t\treturn {\n\t\t\tmessage: message,\n\t\t\tbehaviorTarget: _$target\n\t\t};\n\t});\n});//@ sourceMappingURL=data:application/json;base64,");

/***/ },
/* 14 */
/***/ function(module, exports) {

	eval("pl.game.component('selectable-reveal', function () {\n\n\tthis.respond('select', function (_event) {\n\t\tvar index, stateMethod;\n\n\t\tindex = _event.message;\n\t\tstateMethod = this.properties.select_state || 'select';\n\n\t\tif (~index) {\n\t\t\tthis[stateMethod](_event.behaviorTarget);\n\t\t\tthis.reveal.item(index);\n\t\t}\n\t});\n\n\tthis.entity('selectable', function () {\n\n\t\tthis.shouldSelect = function (_$target) {\n\t\t\tif (_$target.prev().hasClass(this.STATE.HIGHLIGHTED) || _$target.index() === 0) {\n\t\t\t\treturn !this.screen.state(this.STATE.VOICE_OVER);\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\t});\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hbmltYWwtaWQvc291cmNlL2pzL2NvbXBvbmVudHMvc2VsZWN0YWJsZS1yZXZlYWwvYmVoYXZpb3IuanM/MTJmNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSxZQUFZOztBQUVsRCxLQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxVQUFVLE1BQU0sRUFBRTtBQUN4QyxNQUFJLEtBQUssRUFBRSxXQUFXLENBQUM7O0FBRXZCLE9BQUssR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO0FBQ3ZCLGFBQVcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksSUFBSSxRQUFRLENBQUM7O0FBRXZELE1BQUksQ0FBQyxLQUFLLEVBQUU7QUFDWCxPQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3pDLE9BQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQ3hCO0VBQ0QsQ0FBQyxDQUFDOztBQUVILEtBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLFlBQVk7O0FBRXJDLE1BQUksQ0FBQyxZQUFZLEdBQUcsVUFBVSxRQUFRLEVBQUU7QUFDdkMsT0FBSSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRTtBQUMvRSxXQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNqRDs7QUFFRCxVQUFPLEtBQUssQ0FBQztHQUNiLENBQUM7RUFFRixDQUFDLENBQUM7Q0FFSCxDQUFDIiwiZmlsZSI6IjE0LmpzIiwic291cmNlc0NvbnRlbnQiOlsicGwuZ2FtZS5jb21wb25lbnQoJ3NlbGVjdGFibGUtcmV2ZWFsJywgZnVuY3Rpb24gKCkge1xuXHRcblx0dGhpcy5yZXNwb25kKCdzZWxlY3QnLCBmdW5jdGlvbiAoX2V2ZW50KSB7XG5cdFx0dmFyIGluZGV4LCBzdGF0ZU1ldGhvZDtcblxuXHRcdGluZGV4ID0gX2V2ZW50Lm1lc3NhZ2U7XG5cdFx0c3RhdGVNZXRob2QgPSB0aGlzLnByb3BlcnRpZXMuc2VsZWN0X3N0YXRlIHx8ICdzZWxlY3QnO1xuXG5cdFx0aWYgKH5pbmRleCkge1xuXHRcdFx0dGhpc1tzdGF0ZU1ldGhvZF0oX2V2ZW50LmJlaGF2aW9yVGFyZ2V0KTtcblx0XHRcdHRoaXMucmV2ZWFsLml0ZW0oaW5kZXgpO1xuXHRcdH1cblx0fSk7XG5cblx0dGhpcy5lbnRpdHkoJ3NlbGVjdGFibGUnLCBmdW5jdGlvbiAoKSB7XG5cdFx0XG5cdFx0dGhpcy5zaG91bGRTZWxlY3QgPSBmdW5jdGlvbiAoXyR0YXJnZXQpIHtcblx0XHRcdGlmIChfJHRhcmdldC5wcmV2KCkuaGFzQ2xhc3ModGhpcy5TVEFURS5ISUdITElHSFRFRCkgfHwgXyR0YXJnZXQuaW5kZXgoKSA9PT0gMCkge1xuXHRcdFx0XHRyZXR1cm4gIXRoaXMuc2NyZWVuLnN0YXRlKHRoaXMuU1RBVEUuVk9JQ0VfT1ZFUik7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmYWxzZTsgXG5cdFx0fTtcblxuXHR9KTtcblxufSk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9hbmltYWwtaWQvc291cmNlL2pzL2NvbXBvbmVudHMvc2VsZWN0YWJsZS1yZXZlYWwvYmVoYXZpb3IuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 15 */
/***/ function(module, exports) {

	eval("pl.game.component('class-switcher', function () {\n\n\tthis.start = function () {\n\t\tvar target, add, remove;\n\n\t\ttarget = this.properties.target || \"body\";\n\t\tadd = this.properties.add || \"\";\n\t\tremove = this.properties.remove || \"\";\n\n\t\t$(target).addClass(add).removeClass(remove);\n\t};\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hbmltYWwtaWQvc291cmNlL2pzL2NvbXBvbmVudHMvY2xhc3Mtc3dpdGNoZXIvYmVoYXZpb3IuanM/ZTZmOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxZQUFZOztBQUUvQyxLQUFJLENBQUMsS0FBSyxHQUFHLFlBQVc7QUFDdkIsTUFBSSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQzs7QUFFeEIsUUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQztBQUMxQyxLQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDO0FBQ2hDLFFBQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUM7O0FBRXRDLEdBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0VBQzVDLENBQUM7Q0FFRixDQUFDIiwiZmlsZSI6IjE1LmpzIiwic291cmNlc0NvbnRlbnQiOlsicGwuZ2FtZS5jb21wb25lbnQoJ2NsYXNzLXN3aXRjaGVyJywgZnVuY3Rpb24gKCkge1xuXG5cdHRoaXMuc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgdGFyZ2V0LCBhZGQsIHJlbW92ZTtcblxuXHRcdHRhcmdldCA9IHRoaXMucHJvcGVydGllcy50YXJnZXQgfHwgXCJib2R5XCI7XG5cdFx0YWRkID0gdGhpcy5wcm9wZXJ0aWVzLmFkZCB8fCBcIlwiO1xuXHRcdHJlbW92ZSA9IHRoaXMucHJvcGVydGllcy5yZW1vdmUgfHwgXCJcIjtcblxuXHRcdCQodGFyZ2V0KS5hZGRDbGFzcyhhZGQpLnJlbW92ZUNsYXNzKHJlbW92ZSk7XG5cdH07XG5cbn0pO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vYW5pbWFsLWlkL3NvdXJjZS9qcy9jb21wb25lbnRzL2NsYXNzLXN3aXRjaGVyL2JlaGF2aW9yLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 16 */
/***/ function(module, exports) {

	eval("pl.game.component('match-game', function () {\n\n\tthis.behavior('select', function (_target) {\n\t\tvar $target;\n\n\t\tif (this.event && !_target) {\n\t\t\t$target = $(this.event.target).closest('li');\n\n\t\t\tif (this.shouldSelect($target) !== false) {\n\t\t\t\t$target.is('li') && this.audio.sfx.correct.play();\n\t\t\t\tif (this.showSelect($target)) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage: $target.id(),\n\t\t\t\t\t\tbehaviorTarget: $target\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this.audio.sfx.incorrect) this.audio.sfx.incorrect.play();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.proto(_target);\n\t\t}\n\n\t\treturn false;\n\t});\n\n\tthis.shouldSelect = function (_$target) {\n\t\treturn !_$target.hasClass(this.STATE.HIGHLIGHTED) && !_$target.parent().hasClass('show-all');\n\t};\n\n\tthis.start = function () {\n\t\tvar $items,\n\t\t    self = this;\n\n\t\t$items = this.find('.items').addClass('show-all');\n\n\t\tsetTimeout(function () {\n\t\t\t$items.removeClass('show-all');\n\t\t}, 5000);\n\n\t\tthis.$currentCard = null;\n\n\t\tthis.find('li').each(function () {\n\t\t\tself.unhighlight($(this));\n\t\t});\n\t};\n\n\tthis.showSelect = function (_$target) {\n\t\tvar stateMethod, undoStateMethod;\n\n\t\tstateMethod = this.properties.selectState || 'select';\n\t\tif (stateMethod === 'select') undoStateMethod = 'deselect';\n\t\tif (stateMethod === 'highlight') undoStateMethod = 'unhighlight';\n\n\t\tif (_$target) {\n\t\t\tthis[stateMethod](_$target);\n\n\t\t\tif (!this.$currentCard) {\n\t\t\t\tthis.$currentCard = _$target;\n\t\t\t} else if (this.$currentCard.id() === _$target.id()) {\n\t\t\t\tthis.$currentCard = null;\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tsetTimeout((function () {\n\t\t\t\t\tthis[undoStateMethod](_$target);\n\t\t\t\t\tthis[undoStateMethod](this.$currentCard);\n\t\t\t\t\tthis.$currentCard = null;\n\t\t\t\t}).bind(this), 1000);\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t};\n\n\tthis.populateList = function (_$bin) {\n\t\tvar $items, $bin, random;\n\n\t\t$items = this.find(\".items\");\n\t\t$bin = _$bin;\n\n\t\twhile ($bin.length) {\n\t\t\trandom = Math.floor(_$bin.length * Math.random());\n\t\t\t$bin.eq(random).remove().appendTo($items);\n\t\t\t$bin = this.find('.bin li');\n\t\t}\n\t};\n\n\tthis.ready = function () {\n\t\tvar correct, $bin;\n\n\t\tcorrect = pl.Queue.create();\n\n\t\tcorrect.on('complete', this.bind(function () {\n\t\t\tthis.screen.complete();\n\t\t}));\n\n\t\tthis.items = this.find('.items li[pl-correct]').map(function (_index, _node) {\n\t\t\tcorrect.add(_node.getAttribute(\"pl-id\"));\n\t\t\treturn _node;\n\t\t}).toArray();\n\n\t\tthis.items.correct = correct;\n\n\t\t$bin = this.find('.bin li');\n\n\t\tif ($bin.length) this.populateList($bin);\n\t};\n});//@ sourceMappingURL=data:application/json;base64,");

/***/ }
/******/ ]);