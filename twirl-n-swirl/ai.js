/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	eval("function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * Defines the game scope and imports used component behaviors.\n */\n\n__webpack_require__(2);\n\n// Use when doing local changes to the library\n// import '../../../../../js-interactive-library/build/play.js';\n\n__webpack_require__(3);\n\n__webpack_require__(4);\n\n// SCREENS\n\nvar _screensInfoQuestion = __webpack_require__(5);\n\nvar _screensInfoQuestion2 = _interopRequireDefault(_screensInfoQuestion);\n\nvar _screensFlushIt = __webpack_require__(6);\n\nvar _screensFlushIt2 = _interopRequireDefault(_screensFlushIt);\n\n// INCLUDE USED COMPONENT BEHAVIORS HERE\n\n__webpack_require__(7);\n\n__webpack_require__(8);\n\n__webpack_require__(9);\n\n__webpack_require__(10);\n\n__webpack_require__(11);\n\n/**\n * Define the game behavior.\n * Here we define all the screen behaviors.\n */\npl.game('twirl-n-swirl', function () {\n\t/**\n  * Interface for changing the game background image.\n  */\n\tthis.setWallpaper = function (_paper) {\n\t\t// I would have defined a state method for this but for some reason\n\t\t// I didnt make Game objects inherit from Entities.\n\t\tif (_paper) this.removeClass('DEFAULT TITLE PLANT').addClass(_paper.toUpperCase());\n\t};\n\n\t/**\n  * When the game exits submit a GA (Google Analytics) event.\n  * @override\n  */\n\tthis.exit = function () {\n\t\tvar screen, eventCategory;\n\n\t\tscreen = this.findOwn(pl.game.config('screenSelector') + '.OPEN:not(#quit)').scope();\n\t\teventCategory = ['game', this.id(), screen.id() + '(' + (screen.index() + 1) + ')'].join(' ');\n\n\t\tga('send', 'event', eventCategory, 'quit');\n\n\t\treturn this.proto();\n\t};\n\n\t// Define Screen Behaviors\n\tthis.screen('info-question', _screensInfoQuestion2['default']);\n\tthis.screen('flush-it', _screensFlushIt2['default']);\n\t/**\n  * Adds Flip screen behavior to send game completion to GA.\n  */\n\tthis.screen('flip', function () {\n\t\t/**\n   * @override\n   */\n\t\tthis.complete = function (_event) {\n\t\t\tvar eventCategory = ['game', this.game.id(), this.id() + '(' + (this.index() + 1) + ')'].join(' ');\n\n\t\t\tga('send', 'event', eventCategory, 'complete');\n\n\t\t\treturn this.proto();\n\t\t};\n\t});\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90d2lybC1uLXN3aXJsL3NvdXJjZS9qcy9pbmRleC5qcz9mZDM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztvQkFHTyxDQUF3Qjs7Ozs7b0JBSXhCLENBQTJCOztvQkFDM0IsQ0FBZTs7OzsrQ0FHRyxDQUF5Qjs7OzswQ0FDOUIsQ0FBb0I7Ozs7OztvQkFHakMsQ0FBb0M7O29CQUNwQyxDQUFvQzs7b0JBQ3BDLENBQW1DOztvQkFDbkMsRUFBZ0M7O29CQUNoQyxFQUE4Qjs7Ozs7O0FBTXJDLEVBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLFlBQVk7Ozs7QUFJcEMsS0FBSSxDQUFDLFlBQVksR0FBRyxVQUFVLE1BQU0sRUFBRTs7O0FBR3JDLE1BQUksTUFBTSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMscUJBQXFCLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7RUFDbkYsQ0FBQzs7Ozs7O0FBTUYsS0FBSSxDQUFDLElBQUksR0FBRyxZQUFZO0FBQ3ZCLE1BQUksTUFBTSxFQUFFLGFBQWEsQ0FBQzs7QUFFMUIsUUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsR0FBQyxrQkFBa0IsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ25GLGVBQWEsR0FBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLEVBQUUsRUFBRSxHQUFDLEdBQUcsSUFBRSxNQUFNLENBQUMsS0FBSyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEdBQUMsR0FBRyxDQUFDLENBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDOztBQUV4RixJQUFFLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7O0FBRTNDLFNBQU8sSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0VBQ3BCLENBQUM7OztBQUdGLEtBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxtQ0FBZSxDQUFDO0FBQzNDLEtBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSw4QkFBVSxDQUFDOzs7O0FBSWpDLEtBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLFlBQVk7Ozs7QUFJL0IsTUFBSSxDQUFDLFFBQVEsR0FBRyxVQUFVLE1BQU0sRUFBRTtBQUNqQyxPQUFJLGFBQWEsR0FBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsR0FBQyxHQUFHLElBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsQ0FBQyxDQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzs7QUFFN0YsS0FBRSxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDOztBQUUvQyxVQUFPLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztHQUNwQixDQUFDO0VBQ0YsQ0FBQyxDQUFDO0NBQ0gsQ0FBQyIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEZWZpbmVzIHRoZSBnYW1lIHNjb3BlIGFuZCBpbXBvcnRzIHVzZWQgY29tcG9uZW50IGJlaGF2aW9ycy5cbiAqL1xuaW1wb3J0ICdqcy1pbnRlcmFjdGl2ZS1saWJyYXJ5Jztcbi8vIFVzZSB3aGVuIGRvaW5nIGxvY2FsIGNoYW5nZXMgdG8gdGhlIGxpYnJhcnlcbi8vIGltcG9ydCAnLi4vLi4vLi4vLi4vLi4vanMtaW50ZXJhY3RpdmUtbGlicmFyeS9idWlsZC9wbGF5LmpzJztcblxuaW1wb3J0ICcuL3Rlc3RQbGF0Zm9ybUludGVncmF0aW9uJztcbmltcG9ydCAnLi9jb25maWcuZ2FtZSc7XG5cbi8vIFNDUkVFTlNcbmltcG9ydCBpbmZvUXVlc3Rpb24gZnJvbSAnLi9zY3JlZW5zL2luZm8tcXVlc3Rpb24nO1xuaW1wb3J0IGZsdXNoSXQgZnJvbSAnLi9zY3JlZW5zL2ZsdXNoLWl0JztcblxuLy8gSU5DTFVERSBVU0VEIENPTVBPTkVOVCBCRUhBVklPUlMgSEVSRVxuaW1wb3J0ICcuL2NvbXBvbmVudHMvc2NyZWVuLWJhc2ljL2JlaGF2aW9yJztcbmltcG9ydCAnLi9jb21wb25lbnRzL3NjcmVlbi10aXRsZS9iZWhhdmlvcic7XG5pbXBvcnQgJy4vY29tcG9uZW50cy9zY3JlZW4tcXVpdC9iZWhhdmlvcic7XG5pbXBvcnQgJy4vY29tcG9uZW50cy9kcm9wem9uZS9iZWhhdmlvcic7XG5pbXBvcnQgJy4vY29tcG9uZW50cy9yZXZlYWwvYmVoYXZpb3InO1xuXG4vKipcbiAqIERlZmluZSB0aGUgZ2FtZSBiZWhhdmlvci5cbiAqIEhlcmUgd2UgZGVmaW5lIGFsbCB0aGUgc2NyZWVuIGJlaGF2aW9ycy5cbiAqL1xucGwuZ2FtZSgndHdpcmwtbi1zd2lybCcsIGZ1bmN0aW9uICgpIHtcblx0LyoqXG5cdCAqIEludGVyZmFjZSBmb3IgY2hhbmdpbmcgdGhlIGdhbWUgYmFja2dyb3VuZCBpbWFnZS5cblx0ICovXG5cdHRoaXMuc2V0V2FsbHBhcGVyID0gZnVuY3Rpb24gKF9wYXBlcikge1xuXHRcdC8vIEkgd291bGQgaGF2ZSBkZWZpbmVkIGEgc3RhdGUgbWV0aG9kIGZvciB0aGlzIGJ1dCBmb3Igc29tZSByZWFzb25cblx0XHQvLyBJIGRpZG50IG1ha2UgR2FtZSBvYmplY3RzIGluaGVyaXQgZnJvbSBFbnRpdGllcy5cblx0XHRpZiAoX3BhcGVyKSB0aGlzLnJlbW92ZUNsYXNzKCdERUZBVUxUIFRJVExFIFBMQU5UJykuYWRkQ2xhc3MoX3BhcGVyLnRvVXBwZXJDYXNlKCkpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBXaGVuIHRoZSBnYW1lIGV4aXRzIHN1Ym1pdCBhIEdBIChHb29nbGUgQW5hbHl0aWNzKSBldmVudC5cblx0ICogQG92ZXJyaWRlXG5cdCAqL1xuXHR0aGlzLmV4aXQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHNjcmVlbiwgZXZlbnRDYXRlZ29yeTtcblxuXHRcdHNjcmVlbiA9IHRoaXMuZmluZE93bihwbC5nYW1lLmNvbmZpZygnc2NyZWVuU2VsZWN0b3InKSsnLk9QRU46bm90KCNxdWl0KScpLnNjb3BlKCk7XG5cdFx0ZXZlbnRDYXRlZ29yeSA9IChbJ2dhbWUnLCB0aGlzLmlkKCksIHNjcmVlbi5pZCgpKycoJysoc2NyZWVuLmluZGV4KCkrMSkrJyknXSkuam9pbignICcpO1xuXG5cdFx0Z2EoJ3NlbmQnLCAnZXZlbnQnLCBldmVudENhdGVnb3J5LCAncXVpdCcpO1xuXG5cdFx0cmV0dXJuIHRoaXMucHJvdG8oKTtcblx0fTtcblxuXHQvLyBEZWZpbmUgU2NyZWVuIEJlaGF2aW9yc1xuXHR0aGlzLnNjcmVlbignaW5mby1xdWVzdGlvbicsIGluZm9RdWVzdGlvbik7XG5cdHRoaXMuc2NyZWVuKCdmbHVzaC1pdCcsIGZsdXNoSXQpO1xuXHQvKipcblx0ICogQWRkcyBGbGlwIHNjcmVlbiBiZWhhdmlvciB0byBzZW5kIGdhbWUgY29tcGxldGlvbiB0byBHQS5cblx0ICovXG5cdHRoaXMuc2NyZWVuKCdmbGlwJywgZnVuY3Rpb24gKCkge1xuXHRcdC8qKlxuXHRcdCAqIEBvdmVycmlkZVxuXHRcdCAqL1xuXHRcdHRoaXMuY29tcGxldGUgPSBmdW5jdGlvbiAoX2V2ZW50KSB7XG5cdFx0XHR2YXIgZXZlbnRDYXRlZ29yeSA9IChbJ2dhbWUnLCB0aGlzLmdhbWUuaWQoKSwgdGhpcy5pZCgpKycoJysodGhpcy5pbmRleCgpKzEpKycpJ10pLmpvaW4oJyAnKTtcblxuXHRcdFx0Z2EoJ3NlbmQnLCAnZXZlbnQnLCBldmVudENhdGVnb3J5LCAnY29tcGxldGUnKTtcblxuXHRcdFx0cmV0dXJuIHRoaXMucHJvdG8oKTtcblx0XHR9O1xuXHR9KTtcbn0pO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi90d2lybC1uLXN3aXJsL3NvdXJjZS9qcy9pbmRleC5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 2 */
/***/ function(module, exports) {

	eval("/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/build/\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\n/**\\n * Boot file for the Play library.\\n *\\n * @module\\n *\\n * @author Micah Rolon <micah@ginasink.com>\\n *\\n * @requires jQExtentions\\n * @requires play\\n */\\n\\n__webpack_require__(4);\\n\\nvar _play = __webpack_require__(58);\\n\\nvar _play2 = _interopRequireDefault(_play);\\n\\n/**\\n * Begin running the library\\n */\\nfunction run() {\\n  _play2['default'].game.run();\\n}\\n\\n// export namespace to global object.\\nwindow.play = window.pl = _play2['default'];\\n\\n// Invoke 'run' when DOM has finished loading.\\ndocument.addEventListener('DOMContentLoaded', run, false);//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvbWFpbi5qcz82NDgwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7b0JBVU8sQ0FBYzs7Z0NBQ0osRUFBTTs7Ozs7OztBQUt2QixTQUFTLEdBQUcsR0FBSTtBQUNmLG9CQUFLLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztDQUNoQjs7O0FBR0QsTUFBTSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsRUFBRSxvQkFBTyxDQUFDOzs7QUFHL0IsUUFBUSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQm9vdCBmaWxlIGZvciB0aGUgUGxheSBsaWJyYXJ5LlxuICpcbiAqIEBtb2R1bGVcbiAqXG4gKiBAYXV0aG9yIE1pY2FoIFJvbG9uIDxtaWNhaEBnaW5hc2luay5jb20+XG4gKlxuICogQHJlcXVpcmVzIGpRRXh0ZW50aW9uc1xuICogQHJlcXVpcmVzIHBsYXlcbiAqL1xuaW1wb3J0ICdqUUV4dGVudGlvbnMnO1xuaW1wb3J0IHBsYXkgZnJvbSAncGxheSc7XG5cbi8qKlxuICogQmVnaW4gcnVubmluZyB0aGUgbGlicmFyeVxuICovXG5mdW5jdGlvbiBydW4gKCkge1xuXHRwbGF5LmdhbWUucnVuKCk7XG59XG5cbi8vIGV4cG9ydCBuYW1lc3BhY2UgdG8gZ2xvYmFsIG9iamVjdC5cbndpbmRvdy5wbGF5ID0gd2luZG93LnBsID0gcGxheTtcblxuLy8gSW52b2tlICdydW4nIHdoZW4gRE9NIGhhcyBmaW5pc2hlZCBsb2FkaW5nLlxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIHJ1biwgZmFsc2UpO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zb3VyY2UvbWFpbi5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"module.exports = __webpack_require__(3);//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9oZWxwZXJzL2ludGVyb3AtcmVxdWlyZS1kZWZhdWx0LmpzP2U0ZGEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzXCIpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9oZWxwZXJzL2ludGVyb3AtcmVxdWlyZS1kZWZhdWx0LmpzXG4gKiogbW9kdWxlIGlkID0gMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\teval(\"\\\"use strict\\\";\\n\\nexports.__esModule = true;\\n\\nexports.default = function (obj) {\\n  return obj && obj.__esModule ? obj : {\\n    default: obj\\n  };\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcz83ZDI1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgZGVmYXVsdDogb2JqXG4gIH07XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qc1xuICoqIG1vZHVsZSBpZCA9IDNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _Array$forEach = __webpack_require__(5)['default'];\\n\\nvar _interopRequireDefault = __webpack_require__(2)['default'];\\n\\n/**\\n * Extentions to jQuery used by the library.\\n * \\n * @module\\n * @author Micah Rolon <micah@ginasink.com>\\n *\\n * @requires types/Dimensions\\n * @requires Matrix\\n */\\n\\nvar _typesDimensions = __webpack_require__(36);\\n\\nvar _libMatrix = __webpack_require__(57);\\n\\nvar _libMatrix2 = _interopRequireDefault(_libMatrix);\\n\\n/**\\n * jQuery's prototype\\n * @external jQuery\\n * @see {@link http://api.jquery.com/}\\n */\\n\\n(function () {\\n\\tvar original;\\n\\n\\toriginal = {\\n\\t\\tposition: this.position\\n\\t};\\n\\n\\t/**\\n  * Resolves the scope for each of the set of matched nodes.\\n  * @function external:jQuery#scope\\n  * @returns {Scope|array} Scope - for 1 result. array - for multiple.\\n  */\\n\\tthis.scope = function () {\\n\\t\\tvar result;\\n\\n\\t\\tresult = [];\\n\\n\\t\\tthis.each(function () {\\n\\t\\t\\tvar $node, scope;\\n\\n\\t\\t\\t$node = $(this);\\n\\t\\t\\tscope = $node.data('pl-scope');\\n\\n\\t\\t\\tif (!scope) {\\n\\t\\t\\t\\tscope = $node.closest('.pl-scope').data('pl-scope');\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (scope) result.push(scope);\\n\\t\\t});\\n\\n\\t\\treturn result.length > 1 ? result : result[0];\\n\\t};\\n\\n\\t/**\\n  * Resolves the id on the first node in the collection. The id can be sourced from a node's 'id', 'pl-id' or 'pl-component' arguments.\\n  * @function external:jQuery#id\\n  * @arg {string} [_set] Name to set as the node's id.\\n  * @returns {string} The resolved id.\\n  */\\n\\tthis.id = function (_set) {\\n\\t\\tif (_set !== undefined) {\\n\\t\\t\\t// Remove attribute.\\n\\t\\t\\tif (~['', null].indexOf(_set)) {\\n\\t\\t\\t\\tthis.attr('id', null);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If document already has the id defined then set as a unique library id.\\n\\t\\t\\tif ($('#' + _set).length) {\\n\\t\\t\\t\\tthis.attr('pl-id', _set);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.attr('id', _set);\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this;\\n\\t\\t}\\n\\n\\t\\treturn this.attr('id') || this.attr('pl-id') || this.attr('pl-component');\\n\\t};\\n\\n\\t/**\\n  * Provides the 'relative' CSS selector for the first node in the collection.\\n  * @function external:jQuery#address\\n  * @returns {string}\\n  *\\n  * @example\\n  * // HTML: <div id=\\\"sweater\\\" class=\\\"wide\\\"></div>\\n  * $('#sweater').address() // div#sweater.wide\\n  */\\n\\tthis.address = function () {\\n\\t\\tvar tag, id, classes;\\n\\n\\t\\ttag = this[0].nodeName.toLowerCase();\\n\\t\\tid = this.attr('id');\\n\\t\\tclasses = this.attr('class') ? '.' + this.attr('class').split(' ').join('.') : '';\\n\\n\\t\\treturn tag + (id ? '#' + id : '') + classes;\\n\\t};\\n\\n\\t/**\\n  * Provides a node's UPPER CASE class names. Given '_test' it will check if the node has the class.\\n  * @function external:jQuery#state\\n  * @arg {string} [_test] The UPPER CASE class name to test on the first node in the collection.\\n  * @returns {string|array|boolean} string - for one result. array - for multiple. boolean - for tests.\\n  */\\n\\tthis.state = function (_test) {\\n\\t\\tvar classes;\\n\\n\\t\\tif (_test) return this.hasClass(_test.toUpperCase());\\n\\n\\t\\tclasses = (this.attr('class') || '').match(/[0-9A-Z]+(?:-[0-9A-Z]+)?/g);\\n\\n\\t\\treturn classes && (classes.length === 1 ? classes[0] : classes);\\n\\t};\\n\\n\\tthis.size = function () {\\n\\t\\tvar size;\\n\\n\\t\\tif (!arguments.length) {\\n\\t\\t\\tsize = _typesDimensions.Size.create().set(this.width(), this.height());\\n\\t\\t} else {\\n\\t\\t\\tsize = _typesDimensions.Size.create(arguments);\\n\\t\\t\\tthis.css(size);\\n\\t\\t}\\n\\n\\t\\treturn size;\\n\\t};\\n\\n\\tthis.position = function () {\\n\\t\\tvar pos;\\n\\n\\t\\tif (!arguments.length) {\\n\\t\\t\\tpos = original.position.call(this);\\n\\t\\t\\tpos = _typesDimensions.Point.create().set(pos.left, pos.top);\\n\\t\\t} else {\\n\\t\\t\\tpos = _typesDimensions.Point.create(arguments);\\n\\n\\t\\t\\tthis.css({\\n\\t\\t\\t\\tposition: 'relative',\\n\\t\\t\\t\\tleft: pos.x,\\n\\t\\t\\t\\ttop: pos.y\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn pos;\\n\\t};\\n\\n\\t/**\\n  * Provides the jQuery offset for the first node in the collection.\\n  * Given a point, all nodes in the collection will get {position: absolute;} to the corrdinates.\\n  * @function external:jQuery#absolutePosition\\n  * @returns {Point}\\n  */\\n\\tthis.absolutePosition = function () {\\n\\t\\tvar offset;\\n\\n\\t\\tif (!arguments.length) {\\n\\t\\t\\toffset = this.offset();\\n\\n\\t\\t\\treturn _typesDimensions.Point.create().set(offset.left, offset.top);\\n\\t\\t} else {\\n\\t\\t\\toffset = _typesDimensions.Point.create(arguments);\\n\\n\\t\\t\\tthis.css({\\n\\t\\t\\t\\tposition: 'absolute',\\n\\t\\t\\t\\ttop: offset.y,\\n\\t\\t\\t\\tleft: offset.x\\n\\t\\t\\t});\\n\\n\\t\\t\\treturn offset;\\n\\t\\t}\\n\\t};\\n\\n\\t/**\\n  * Sets a CSS matrix transform on all nodes in the collection. (overloaded)\\n  * @function external:jQuery#transform\\n  * @arg {number} [_scaleX] - scale x\\n  * @arg {number} [_shearY] - shear y\\n  * @arg {number} [_shearX] - shear x\\n  * @arg {number} [_scaleY] - scale y\\n  * @arg {number} [_translateX] - translate x\\n  * @arg {number} [_translateY] - translate y\\n  * @returns {Matrix}\\n  */\\n\\n\\t/**\\n  * Provides the CSS matrix transform for the first node in the collection.\\n  * @function external:jQuery#transform\\n  * @returns {Matrix}\\n  */\\n\\tthis.transform = function () {\\n\\t\\tvar t, matrix, is3d;\\n\\n\\t\\tmatrix = new _libMatrix2['default']();\\n\\n\\t\\tif (!arguments.length) {\\n\\t\\t\\tt = this.css('transform');\\n\\t\\t\\tis3d = !! ~t.indexOf('matrix3d');\\n\\n\\t\\t\\tif (t !== 'none') {\\n\\t\\t\\t\\tt = ((t.match(/\\\\(([,\\\\d\\\\.\\\\s\\\\-]+)\\\\)/) || [])[1] || '').split(/\\\\s*,\\\\s*/);\\n\\t\\t\\t\\tif (is3d) {\\n\\t\\t\\t\\t\\tt = (function (_matrix) {\\n\\t\\t\\t\\t\\t\\tvar i, result;\\n\\n\\t\\t\\t\\t\\t\\tresult = [];\\n\\n\\t\\t\\t\\t\\t\\tfor (i = 0; i < _matrix.length; i += 4) {\\n\\t\\t\\t\\t\\t\\t\\tresult = result.concat(_matrix.slice(i, i + 2));\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\treturn result;\\n\\t\\t\\t\\t\\t})(t);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tt = t.map(parseFloat);\\n\\n\\t\\t\\t\\tmatrix.setTransform.apply(matrix, t);\\n\\n\\t\\t\\t\\treturn matrix;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn t;\\n\\t\\t}\\n\\n\\t\\tmatrix.setTransform.apply(matrix, arguments);\\n\\n\\t\\tthis.css('transform', matrix.toCSS());\\n\\n\\t\\treturn matrix;\\n\\t};\\n\\n\\t/**\\n  * Getter/Setter for the CSS transform translation. (overloaded)\\n  * @function external:jQuery#transformPosition\\n  * @arg {Point} _point - A point object {x,y}\\n  * @returns {Point}\\n  */\\n\\n\\t/**\\n  * Getter/Setter for the CSS transform translation.\\n  * @function external:jQuery#transformPosition\\n  * @arg {number} _x - x coordinate\\n  * @arg {number} _y - y coordinate\\n  * @returns {Point}\\n  */\\n\\tthis.transformPosition = function () {\\n\\t\\tvar matrix, point;\\n\\n\\t\\tmatrix = this.transform();\\n\\t\\tpoint = _typesDimensions.Point.create().set(0, 0);\\n\\n\\t\\tif (!arguments.length) {\\n\\t\\t\\tif (matrix !== 'none') point.set(matrix.e, matrix.f);\\n\\t\\t} else {\\n\\t\\t\\tif (matrix === 'none') matrix = new _libMatrix2['default']();\\n\\n\\t\\t\\tpoint.set.apply(point, arguments);\\n\\t\\t\\tmatrix.translate(point.x, point.y);\\n\\t\\t\\tthis.css('transform', matrix.toCSS());\\n\\t\\t}\\n\\n\\t\\treturn point;\\n\\t};\\n\\n\\t/**\\n  * Getter for the CSS transform scale. (overloaded)\\n  * @function external:jQuery#transformPosition\\n  * @returns {Point}\\n  */\\n\\n\\t/**\\n  * Setter for the CSS transform scale. (overloaded)\\n  * @function external:jQuery#transformPosition\\n  * @arg {Point} _point - A point object {x,y}\\n  * @returns {Point}\\n  */\\n\\n\\t/**\\n  * Setter for the CSS transform scale.\\n  * @function external:jQuery#transformPosition\\n  * @arg {number} _x - x coordinate\\n  * @arg {number} _y - y coordinate\\n  * @returns {Point}\\n  */\\n\\tthis.transformScale = function () {\\n\\t\\tvar matrix, scale;\\n\\n\\t\\tmatrix = this.transform();\\n\\t\\tscale = _typesDimensions.Point.create().set(1, 1);\\n\\n\\t\\tif (!arguments.length) {\\n\\t\\t\\tif (matrix !== 'none') scale.set(matrix.a, matrix.d);\\n\\t\\t} else {\\n\\t\\t\\tif (matrix === 'none') matrix = new _libMatrix2['default']();\\n\\n\\t\\t\\tscale.set.apply(scale, arguments);\\n\\t\\t\\tmatrix.scale(scale.x, scale.y);\\n\\t\\t\\tthis.css('transform', matrix.toCSS());\\n\\t\\t}\\n\\n\\t\\treturn scale;\\n\\t};\\n\\n\\t/**\\n  * Accessor method for `pl` attributes.\\n  */\\n\\tthis.pl = function (_name, _value) {\\n\\t\\tvar args, result;\\n\\n\\t\\tif (!_name) {\\n\\t\\t\\tresult = {};\\n\\t\\t\\tthis.each(function () {\\n\\t\\t\\t\\t_Array$forEach(this.attributes, function (_attr) {\\n\\t\\t\\t\\t\\tif (_attr.name.indexOf('pl-') === 0) {\\n\\t\\t\\t\\t\\t\\tresult[_attr.name.slice(3)] = _attr.value;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t});\\n\\t\\t\\treturn result;\\n\\t\\t}\\n\\n\\t\\targs = ['pl-' + _name];\\n\\t\\tif (typeof _value !== 'undefined') args.push(_value);\\n\\n\\t\\tif (_value === null) {\\n\\t\\t\\tthis.removeAttr('pl-' + _name);\\n\\t\\t\\treturn this;\\n\\t\\t}\\n\\n\\t\\treturn this.attr.apply(this, args);\\n\\t};\\n}).call($.fn);//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"module.exports = { \\\"default\\\": __webpack_require__(6), __esModule: true };//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9jb3JlLWpzL2FycmF5L2Zvci1lYWNoLmpzPzc3NTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vYXJyYXkvZm9yLWVhY2hcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9hcnJheS9mb3ItZWFjaC5qc1xuICoqIG1vZHVsZSBpZCA9IDVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"__webpack_require__(7);\\nmodule.exports = __webpack_require__(10).Array.forEach;//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9mbi9hcnJheS9mb3ItZWFjaC5qcz9kNGM3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5BcnJheS5mb3JFYWNoO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9mbi9hcnJheS9mb3ItZWFjaC5qc1xuICoqIG1vZHVsZSBpZCA9IDZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"'use strict';\\r\\nvar $export  = __webpack_require__(8)\\r\\n  , $forEach = __webpack_require__(23)(0)\\r\\n  , STRICT   = __webpack_require__(35)([].forEach, true);\\r\\n\\r\\n$export($export.P + $export.F * !STRICT, 'Array', {\\r\\n  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])\\r\\n  forEach: function forEach(callbackfn /* , thisArg */){\\r\\n    return $forEach(this, callbackfn, arguments[1]);\\r\\n  }\\r\\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaC5qcz8wZWFmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwiZmlsZSI6IjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXHJcbiAgLCAkZm9yRWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKVxyXG4gICwgU1RSSUNUICAgPSByZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZm9yRWFjaCwgdHJ1ZSk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFTVFJJQ1QsICdBcnJheScsIHtcclxuICAvLyAyMi4xLjMuMTAgLyAxNS40LjQuMTggQXJyYXkucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcclxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKXtcclxuICAgIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xyXG4gIH1cclxufSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoLmpzXG4gKiogbW9kdWxlIGlkID0gN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var global    = __webpack_require__(9)\\n  , core      = __webpack_require__(10)\\n  , ctx       = __webpack_require__(11)\\n  , hide      = __webpack_require__(13)\\n  , PROTOTYPE = 'prototype';\\n\\nvar $export = function(type, name, source){\\n  var IS_FORCED = type & $export.F\\n    , IS_GLOBAL = type & $export.G\\n    , IS_STATIC = type & $export.S\\n    , IS_PROTO  = type & $export.P\\n    , IS_BIND   = type & $export.B\\n    , IS_WRAP   = type & $export.W\\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\\n    , expProto  = exports[PROTOTYPE]\\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\\n    , key, own, out;\\n  if(IS_GLOBAL)source = name;\\n  for(key in source){\\n    // contains in native\\n    own = !IS_FORCED && target && target[key] !== undefined;\\n    if(own && key in exports)continue;\\n    // export native or passed\\n    out = own ? target[key] : source[key];\\n    // prevent global pollution for namespaces\\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\\n    // bind timers to global for call from export context\\n    : IS_BIND && own ? ctx(out, global)\\n    // wrap global constructors for prevent change them in library\\n    : IS_WRAP && target[key] == out ? (function(C){\\n      var F = function(a, b, c){\\n        if(this instanceof C){\\n          switch(arguments.length){\\n            case 0: return new C;\\n            case 1: return new C(a);\\n            case 2: return new C(a, b);\\n          } return new C(a, b, c);\\n        } return C.apply(this, arguments);\\n      };\\n      F[PROTOTYPE] = C[PROTOTYPE];\\n      return F;\\n    // make static versions for prototype methods\\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\\n    if(IS_PROTO){\\n      (exports.virtual || (exports.virtual = {}))[key] = out;\\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\\n      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);\\n    }\\n  }\\n};\\n// type bitmap\\n$export.F = 1;   // forced\\n$export.G = 2;   // global\\n$export.S = 4;   // static\\n$export.P = 8;   // proto\\n$export.B = 16;  // bind\\n$export.W = 32;  // wrap\\n$export.U = 64;  // safe\\n$export.R = 128; // real proto method for `library` \\nmodule.exports = $export;//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19leHBvcnQuanM/NjcwNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0EscUZBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSwrQ0FBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLGNBQWM7QUFDZCxjQUFjO0FBQ2QsY0FBYztBQUNkLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGdCQUFnQjtBQUNoQiIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgY29yZSAgICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgY3R4ICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCBoaWRlICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbih0eXBlLCBuYW1lLCBzb3VyY2Upe1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRlxuICAgICwgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuR1xuICAgICwgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuU1xuICAgICwgSVNfUFJPVE8gID0gdHlwZSAmICRleHBvcnQuUFxuICAgICwgSVNfQklORCAgID0gdHlwZSAmICRleHBvcnQuQlxuICAgICwgSVNfV1JBUCAgID0gdHlwZSAmICRleHBvcnQuV1xuICAgICwgZXhwb3J0cyAgID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSlcbiAgICAsIGV4cFByb3RvICA9IGV4cG9ydHNbUFJPVE9UWVBFXVxuICAgICwgdGFyZ2V0ICAgID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXVxuICAgICwga2V5LCBvd24sIG91dDtcbiAgaWYoSVNfR0xPQkFMKXNvdXJjZSA9IG5hbWU7XG4gIGZvcihrZXkgaW4gc291cmNlKXtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmKG93biAmJiBrZXkgaW4gZXhwb3J0cyljb250aW51ZTtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG4gICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzXG4gICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV1cbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpXG4gICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnlcbiAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uKEMpe1xuICAgICAgdmFyIEYgPSBmdW5jdGlvbihhLCBiLCBjKXtcbiAgICAgICAgaWYodGhpcyBpbnN0YW5jZW9mIEMpe1xuICAgICAgICAgIHN3aXRjaChhcmd1bWVudHMubGVuZ3RoKXtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDO1xuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEMoYSk7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcbiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTtcbiAgICAgICAgfSByZXR1cm4gQy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSVcbiAgICBpZihJU19QUk9UTyl7XG4gICAgICAoZXhwb3J0cy52aXJ0dWFsIHx8IChleHBvcnRzLnZpcnR1YWwgPSB7fSkpW2tleV0gPSBvdXQ7XG4gICAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUucHJvdG90eXBlLiVOQU1FJVxuICAgICAgaWYodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSloaWRlKGV4cFByb3RvLCBrZXksIG91dCk7XG4gICAgfVxuICB9XG59O1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YCBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzXG4gKiogbW9kdWxlIGlkID0gOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\teval(\"// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19nbG9iYWwuanM/YjQ0YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYodHlwZW9mIF9fZyA9PSAnbnVtYmVyJylfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZ2xvYmFsLmpzXG4gKiogbW9kdWxlIGlkID0gOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\teval(\"var core = module.exports = {version: '2.1.5'};\\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb3JlLmpzPzRkOGIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkJBQTZCO0FBQzdCLHFDQUFxQyIsImZpbGUiOiIxMC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7dmVyc2lvbjogJzIuMS41J307XG5pZih0eXBlb2YgX19lID09ICdudW1iZXInKV9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qc1xuICoqIG1vZHVsZSBpZCA9IDEwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// optional / simple context binding\\nvar aFunction = __webpack_require__(12);\\nmodule.exports = function(fn, that, length){\\n  aFunction(fn);\\n  if(that === undefined)return fn;\\n  switch(length){\\n    case 1: return function(a){\\n      return fn.call(that, a);\\n    };\\n    case 2: return function(a, b){\\n      return fn.call(that, a, b);\\n    };\\n    case 3: return function(a, b, c){\\n      return fn.call(that, a, b, c);\\n    };\\n  }\\n  return function(/* ...args */){\\n    return fn.apply(that, arguments);\\n  };\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jdHguanM/YjJhNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjExLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgdGhhdCwgbGVuZ3RoKXtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYodGhhdCA9PT0gdW5kZWZpbmVkKXJldHVybiBmbjtcbiAgc3dpdGNoKGxlbmd0aCl7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24oYSl7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uKGEsIGIpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbihhLCBiLCBjKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pe1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzXG4gKiogbW9kdWxlIGlkID0gMTFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\teval(\"module.exports = function(it){\\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\\n  return it;\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzPzgwNzYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qc1xuICoqIG1vZHVsZSBpZCA9IDEyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var dP         = __webpack_require__(14)\\n  , createDesc = __webpack_require__(22);\\nmodule.exports = __webpack_require__(18) ? function(object, key, value){\\n  return dP.f(object, key, createDesc(1, value));\\n} : function(object, key, value){\\n  object[key] = value;\\n  return object;\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzPzJmOGMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBIiwiZmlsZSI6IjEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGRQICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzXG4gKiogbW9kdWxlIGlkID0gMTNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var anObject       = __webpack_require__(15)\\n  , IE8_DOM_DEFINE = __webpack_require__(17)\\n  , toPrimitive    = __webpack_require__(21)\\n  , dP             = Object.defineProperty;\\n\\nexports.f = __webpack_require__(18) ? Object.defineProperty : function defineProperty(O, P, Attributes){\\n  anObject(O);\\n  P = toPrimitive(P, true);\\n  anObject(Attributes);\\n  if(IE8_DOM_DEFINE)try {\\n    return dP(O, P, Attributes);\\n  } catch(e){ /* empty */ }\\n  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');\\n  if('value' in Attributes)O[P] = Attributes.value;\\n  return O;\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanM/ZGY1MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLFVBQVU7QUFDYjtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxNC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpXG4gICwgdG9QcmltaXRpdmUgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIGRQICAgICAgICAgICAgID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyl7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZihJRThfRE9NX0RFRklORSl0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuICBpZignZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKU9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcC5qc1xuICoqIG1vZHVsZSBpZCA9IDE0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var isObject = __webpack_require__(16);\\nmodule.exports = function(it){\\n  if(!isObject(it))throw TypeError(it + ' is not an object!');\\n  return it;\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanM/ZmVhNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjE1LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoIWlzT2JqZWN0KGl0KSl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLW9iamVjdC5qc1xuICoqIG1vZHVsZSBpZCA9IDE1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n\teval(\"module.exports = function(it){\\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanM/MjlhMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qc1xuICoqIG1vZHVsZSBpZCA9IDE2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"module.exports = !__webpack_require__(18) && !__webpack_require__(19)(function(){\\r\\n  return Object.defineProperty(__webpack_require__(20)('div'), 'a', {get: function(){ return 7; }}).a != 7;\\r\\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcz82NDQ4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EscUVBQXNFLGdCQUFnQixVQUFVLEdBQUc7QUFDbkcsQ0FBQyIsImZpbGUiOiIxNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcclxuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIDc7IH19KS5hICE9IDc7XHJcbn0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qc1xuICoqIG1vZHVsZSBpZCA9IDE3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// Thank's IE8 for his funny defineProperty\\nmodule.exports = !__webpack_require__(19)(function(){\\n  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;\\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcz8wYWY4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxpQ0FBaUMsUUFBUSxnQkFBZ0IsVUFBVSxHQUFHO0FBQ3RFLENBQUMiLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIDc7IH19KS5hICE9IDc7XG59KTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanNcbiAqKiBtb2R1bGUgaWQgPSAxOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\teval(\"module.exports = function(exec){\\n  try {\\n    return !!exec();\\n  } catch(e){\\n    return true;\\n  }\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qcz81ODhiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EiLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGV4ZWMpe1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZmFpbHMuanNcbiAqKiBtb2R1bGUgaWQgPSAxOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var isObject = __webpack_require__(16)\\n  , document = __webpack_require__(9).document\\n  // in old IE typeof document.createElement is 'object'\\n  , is = isObject(document) && isObject(document.createElement);\\nmodule.exports = function(it){\\n  return is ? document.createElement(it) : {};\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzPzQ5M2YiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnRcbiAgLy8gaW4gb2xkIElFIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnXG4gICwgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RvbS1jcmVhdGUuanNcbiAqKiBtb2R1bGUgaWQgPSAyMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// 7.1.1 ToPrimitive(input [, PreferredType])\\nvar isObject = __webpack_require__(16);\\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\\n// and the second argument - flag - preferred type is a string\\nmodule.exports = function(it, S){\\n  if(!isObject(it))return it;\\n  var fn, val;\\n  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\\n  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;\\n  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\\n  throw TypeError(\\\"Can't convert object to primitive value\\\");\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1wcmltaXRpdmUuanM/NWEzZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBTKXtcbiAgaWYoIWlzT2JqZWN0KGl0KSlyZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZihTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIGlmKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDtcbiAgaWYoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzXG4gKiogbW9kdWxlIGlkID0gMjFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 22 */\n/***/ function(module, exports) {\n\n\teval(\"module.exports = function(bitmap, value){\\n  return {\\n    enumerable  : !(bitmap & 1),\\n    configurable: !(bitmap & 2),\\n    writable    : !(bitmap & 4),\\n    value       : value\\n  };\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzP2JmZjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYml0bWFwLCB2YWx1ZSl7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZSAgOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZSAgICA6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWUgICAgICAgOiB2YWx1ZVxuICB9O1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qc1xuICoqIG1vZHVsZSBpZCA9IDIyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// 0 -> Array#forEach\\n// 1 -> Array#map\\n// 2 -> Array#filter\\n// 3 -> Array#some\\n// 4 -> Array#every\\n// 5 -> Array#find\\n// 6 -> Array#findIndex\\nvar ctx      = __webpack_require__(11)\\n  , IObject  = __webpack_require__(24)\\n  , toObject = __webpack_require__(26)\\n  , toLength = __webpack_require__(28)\\n  , asc      = __webpack_require__(30);\\nmodule.exports = function(TYPE, $create){\\n  var IS_MAP        = TYPE == 1\\n    , IS_FILTER     = TYPE == 2\\n    , IS_SOME       = TYPE == 3\\n    , IS_EVERY      = TYPE == 4\\n    , IS_FIND_INDEX = TYPE == 6\\n    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX\\n    , create        = $create || asc;\\n  return function($this, callbackfn, that){\\n    var O      = toObject($this)\\n      , self   = IObject(O)\\n      , f      = ctx(callbackfn, that, 3)\\n      , length = toLength(self.length)\\n      , index  = 0\\n      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined\\n      , val, res;\\n    for(;length > index; index++)if(NO_HOLES || index in self){\\n      val = self[index];\\n      res = f(val, index, O);\\n      if(TYPE){\\n        if(IS_MAP)result[index] = res;            // map\\n        else if(res)switch(TYPE){\\n          case 3: return true;                    // some\\n          case 5: return val;                     // find\\n          case 6: return index;                   // findIndex\\n          case 2: result.push(val);               // filter\\n        } else if(IS_EVERY)return false;          // every\\n      }\\n    }\\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\\n  };\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzP2JkMjYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGVBQWU7QUFDeEI7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0EsOEJBQThCO0FBQzlCLDZCQUE2QjtBQUM3QiwrQkFBK0I7QUFDL0IsbUNBQW1DO0FBQ25DLFNBQVMsK0JBQStCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIElPYmplY3QgID0gcmVxdWlyZSgnLi9faW9iamVjdCcpXG4gICwgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBhc2MgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFRZUEUsICRjcmVhdGUpe1xuICB2YXIgSVNfTUFQICAgICAgICA9IFRZUEUgPT0gMVxuICAgICwgSVNfRklMVEVSICAgICA9IFRZUEUgPT0gMlxuICAgICwgSVNfU09NRSAgICAgICA9IFRZUEUgPT0gM1xuICAgICwgSVNfRVZFUlkgICAgICA9IFRZUEUgPT0gNFxuICAgICwgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNlxuICAgICwgTk9fSE9MRVMgICAgICA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYXG4gICAgLCBjcmVhdGUgICAgICAgID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbigkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCl7XG4gICAgdmFyIE8gICAgICA9IHRvT2JqZWN0KCR0aGlzKVxuICAgICAgLCBzZWxmICAgPSBJT2JqZWN0KE8pXG4gICAgICAsIGYgICAgICA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKVxuICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aClcbiAgICAgICwgaW5kZXggID0gMFxuICAgICAgLCByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkXG4gICAgICAsIHZhbCwgcmVzO1xuICAgIGZvcig7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspaWYoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZil7XG4gICAgICB2YWwgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlcyA9IGYodmFsLCBpbmRleCwgTyk7XG4gICAgICBpZihUWVBFKXtcbiAgICAgICAgaWYoSVNfTUFQKXJlc3VsdFtpbmRleF0gPSByZXM7ICAgICAgICAgICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYocmVzKXN3aXRjaChUWVBFKXtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmKElTX0VWRVJZKXJldHVybiBmYWxzZTsgICAgICAgICAgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHJlc3VsdDtcbiAgfTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanNcbiAqKiBtb2R1bGUgaWQgPSAyM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// fallback for non-array-like ES3 and non-enumerable old V8 strings\\nvar cof = __webpack_require__(25);\\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){\\n  return cof(it) == 'String' ? it.split('') : Object(it);\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pb2JqZWN0LmpzPzBkMTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pb2JqZWN0LmpzXG4gKiogbW9kdWxlIGlkID0gMjRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 25 */\n/***/ function(module, exports) {\n\n\teval(\"var toString = {}.toString;\\n\\nmodule.exports = function(it){\\n  return toString.call(it).slice(8, -1);\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2YuanM/MDlkNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQSIsImZpbGUiOiIyNS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvZi5qc1xuICoqIG1vZHVsZSBpZCA9IDI1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// 7.1.13 ToObject(argument)\\nvar defined = __webpack_require__(27);\\nmodule.exports = function(it){\\n  return Object(defined(it));\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanM/ZmU5YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanNcbiAqKiBtb2R1bGUgaWQgPSAyNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 27 */\n/***/ function(module, exports) {\n\n\teval(\"// 7.2.1 RequireObjectCoercible(argument)\\nmodule.exports = function(it){\\n  if(it == undefined)throw TypeError(\\\"Can't call method on  \\\" + it);\\n  return it;\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZWZpbmVkLmpzPzg0ZjgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoaXQgPT0gdW5kZWZpbmVkKXRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVmaW5lZC5qc1xuICoqIG1vZHVsZSBpZCA9IDI3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// 7.1.15 ToLength\\nvar toInteger = __webpack_require__(29)\\n  , min       = Math.min;\\nmodule.exports = function(it){\\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1sZW5ndGguanM/ZmZiNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRDtBQUMzRCIsImZpbGUiOiIyOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIG1pbiAgICAgICA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1sZW5ndGguanNcbiAqKiBtb2R1bGUgaWQgPSAyOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 29 */\n/***/ function(module, exports) {\n\n\teval(\"// 7.1.4 ToInteger\\nvar ceil  = Math.ceil\\n  , floor = Math.floor;\\nmodule.exports = function(it){\\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pbnRlZ2VyLmpzPzJjMjgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCAgPSBNYXRoLmNlaWxcbiAgLCBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pbnRlZ2VyLmpzXG4gKiogbW9kdWxlIGlkID0gMjlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\\nvar isObject = __webpack_require__(16)\\n  , isArray  = __webpack_require__(31)\\n  , SPECIES  = __webpack_require__(32)('species');\\nmodule.exports = function(original, length){\\n  var C;\\n  if(isArray(original)){\\n    C = original.constructor;\\n    // cross-realm fallback\\n    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;\\n    if(isObject(C)){\\n      C = C[SPECIES];\\n      if(C === null)C = undefined;\\n    }\\n  } return new (C === undefined ? Array : C)(length);\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcz9jZDFhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0giLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGlzQXJyYXkgID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKVxuICAsIFNQRUNJRVMgID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWwsIGxlbmd0aCl7XG4gIHZhciBDO1xuICBpZihpc0FycmF5KG9yaWdpbmFsKSl7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKUMgPSB1bmRlZmluZWQ7XG4gICAgaWYoaXNPYmplY3QoQykpe1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZihDID09PSBudWxsKUMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBuZXcgKEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQykobGVuZ3RoKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzXG4gKiogbW9kdWxlIGlkID0gMzBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// 7.2.2 IsArray(argument)\\nvar cof = __webpack_require__(25);\\nmodule.exports = Array.isArray || function isArray(arg){\\n  return cof(arg) == 'Array';\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS5qcz8wZmRmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKXtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS5qc1xuICoqIG1vZHVsZSBpZCA9IDMxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var store      = __webpack_require__(33)('wks')\\n  , uid        = __webpack_require__(34)\\n  , Symbol     = __webpack_require__(9).Symbol\\n  , USE_SYMBOL = typeof Symbol == 'function';\\nmodule.exports = function(name){\\n  return store[name] || (store[name] =\\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MuanM/OWM5YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjMyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHN0b3JlICAgICAgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJylcbiAgLCB1aWQgICAgICAgID0gcmVxdWlyZSgnLi9fdWlkJylcbiAgLCBTeW1ib2wgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sXG4gICwgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obmFtZSl7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MuanNcbiAqKiBtb2R1bGUgaWQgPSAzMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var global = __webpack_require__(9)\\n  , SHARED = '__core-js_shared__'\\n  , store  = global[SHARED] || (global[SHARED] = {});\\nmodule.exports = function(key){\\n  return store[key] || (store[key] = {});\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQuanM/MDE3MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsbURBQW1EO0FBQ25EO0FBQ0EsdUNBQXVDO0FBQ3ZDIiwiZmlsZSI6IjMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXydcbiAgLCBzdG9yZSAgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0ge30pO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLmpzXG4gKiogbW9kdWxlIGlkID0gMzNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 34 */\n/***/ function(module, exports) {\n\n\teval(\"var id = 0\\n  , px = Math.random();\\nmodule.exports = function(key){\\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL191aWQuanM/YzkzOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjM0LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGlkID0gMFxuICAsIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3VpZC5qc1xuICoqIG1vZHVsZSBpZCA9IDM0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var fails = __webpack_require__(19);\\r\\n\\r\\nmodule.exports = function(method, arg){\\r\\n  return !!method && fails(function(){\\r\\n    arg ? method.call(null, function(){}, 1) : method.call(null);\\r\\n  });\\r\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zdHJpY3QtbWV0aG9kLmpzPzAxYWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBLHdDQUF3QztBQUN4QyxHQUFHO0FBQ0giLCJmaWxlIjoiMzUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtZXRob2QsIGFyZyl7XHJcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uKCl7XHJcbiAgICBhcmcgPyBtZXRob2QuY2FsbChudWxsLCBmdW5jdGlvbigpe30sIDEpIDogbWV0aG9kLmNhbGwobnVsbCk7XHJcbiAgfSk7XHJcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3N0cmljdC1tZXRob2QuanNcbiAqKiBtb2R1bGUgaWQgPSAzNVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _Object$defineProperties = __webpack_require__(37)['default'];\\n\\nvar _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * \\n * @module\\n * @version 1.1\\n * @author Micah Rolon <functionmicah@gmail.com>\\n * @requires module:types/BasicArray~BasicArray\\n *\\n * @desc *Created: 11/12/14*\\n *\\n * This file contains objects for containing values about a plane. i.e. x or width.\\n * Adds the convenience of keeping these values paired to passed around your application.\\n * It also includes methods which you perform on the values and returns a new object\\n * so the original values are maintained.\\n *\\n * #### Usage\\n *\\n * New instances can be created by calling the create method.\\n * ```\\n * cursorLocation = Point.create();\\n * ```\\n *\\n * Then call `set()` to apply your values.\\n * ```\\n * cursorLocation.set(event.clientX, event.clientY);\\n * ```\\n *\\n * Then you can use the calculation methods to perform transformations.\\n * ```\\n * relativeCursor = cursorLocation.scale(zoom);\\n * ```\\n *\\n * #### Developer Notes\\n *\\n * When adding new methods make sure you are returning a new instance.\\n * Dimensional objects are meant to be immutable.\\n *\\n * Follow this pattern:\\n * ```\\n * this.method = function () {\\n *     // set with your calculated values.\\n *     return this.create().set( ... )\\n * }\\n * ```\\n *\\n * #### Change Log\\n * *v1.1 - 12/13/15*\\n * - Defined setter/getter properties for unique planes keys. You can now do `point.width = 10`.\\n */\\n\\n/*jslint browser: true, eqeq: true, nomen: true, sloppy: true, white: true */\\n\\nvar _typesBasicArray = __webpack_require__(49);\\n\\nvar _typesBasicArray2 = _interopRequireDefault(_typesBasicArray);\\n\\nvar Dimension, Size, Point;\\n\\n/**\\n * The native Array\\n * @external Array\\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array}\\n */\\n\\n/**\\n * Array prototype extension\\n * Creates an instance of `_Thing` and passes the array to its set function as its arguments.\\n * @function external:Array#to\\n * @arg {Point|Size|string} _Thing - A Dimension object or one the strings 'point'/'size'\\n * @example\\n * somePoint = [10, 10].to(Point);\\n * somePoint = [10, 10].to('point');\\n */\\nArray.prototype.to = function (_Thing) {\\n\\tvar map;\\n\\n\\tmap = {\\n\\t\\tpoint: Point,\\n\\t\\tsize: Size\\n\\t};\\n\\n\\tif (typeof _Thing === 'string') {\\n\\t\\treturn map[_Thing.toLowerCase()].create().set(this);\\n\\t} else if (typeof _Thing === 'object' && ~[Point.set, Size.set].indexOf(_Thing.set)) {\\n\\t\\tif (!_Thing.isPrototypeOf(this)) {\\n\\t\\t\\treturn _Thing.set.apply(_Thing.create(), this);\\n\\t\\t}\\n\\t}\\n\\n\\treturn this;\\n};\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. use `Dimension.create()` to get a new instance.\\n * @class\\n * @classdesc Base class for dimensional objects consisting of 2 planes.<br>\\n * <span class=\\\"important\\\">NOTE:</span> This is an immutable class. Methods return a new object with the original as its prototype.\\n * @extends module:types/BasicArray~BasicArray\\n */\\nDimension = _typesBasicArray2['default'].extend(function () {\\n\\tvar originalMap;\\n\\n\\toriginalMap = this.map;\\n\\n\\tthis[0] = this[1] = 0;\\n\\tthis.planeMap = null, this.length = 2;\\n\\n\\t/**\\n  * Provides a new instance.\\n  * @arg {array} _argumentsArray - Create a new instace with an arguments array.\\n  * @returns {Dimension}\\n  */\\n\\tthis.create = function (_argumentsArray) {\\n\\t\\tvar instance;\\n\\n\\t\\tinstance = this.proto();\\n\\n\\t\\tif (_argumentsArray) instance.set.apply(instance, _argumentsArray);\\n\\n\\t\\treturn instance;\\n\\t};\\n\\n\\t/**\\n  * Incerement each plane by a value or specify each plane.\\n  * @arg {number} _val - plane a of (a,b)\\n  * @arg {number} [_plane2] - plane b of (a,b)\\n  * @returns {Dimension}\\n  */\\n\\tthis.inc = function (_val, _plane2) {\\n\\t\\tvar a, b;\\n\\n\\t\\tif (_val.length === 2) {\\n\\t\\t\\ta = _val[0];\\n\\t\\t\\tb = _val[1];\\n\\t\\t} else if (_plane2 != null) {\\n\\t\\t\\ta = _val;\\n\\t\\t\\tb = _plane2;\\n\\t\\t} else {\\n\\t\\t\\ta = b = _val;\\n\\t\\t}\\n\\n\\t\\treturn this.create().set(this[0] + a, this[1] + b);\\n\\t};\\n\\n\\t/**\\n  * Decerement each plane by a value or specify each plane.\\n  * @arg {number} _val - plane a of (a,b)\\n  * @arg {number} [_plane2] - plane b of (a,b)\\n  * @returns {Dimension}\\n  */\\n\\tthis.dec = function (_val, _plane2) {\\n\\t\\tvar a, b;\\n\\n\\t\\tif (_val.length === 2) {\\n\\t\\t\\ta = _val[0];\\n\\t\\t\\tb = _val[1];\\n\\t\\t} else if (_plane2 != null) {\\n\\t\\t\\ta = _val;\\n\\t\\t\\tb = _plane2;\\n\\t\\t} else {\\n\\t\\t\\ta = b = _val;\\n\\t\\t}\\n\\n\\t\\treturn this.create().set(this[0] - a, this[1] - b);\\n\\t};\\n\\n\\t/**\\n  * Multiply each plane by a value or specify each plane.\\n  * @arg {number} _scale - plane a of (a,b)\\n  * @arg {number} [_plane2] - plane b of (a,b)\\n  * @returns {Dimension}\\n  */\\n\\tthis.scale = function (_scale, _plane2) {\\n\\t\\treturn this.create().set(this[0] * _scale, this[1] * (_plane2 != null ? _plane2 : _scale));\\n\\t};\\n\\n\\t/**\\n  * Perfom a Math function on each plane\\n  * @arg {string} _fun - a string of the function name in the JS Math object,\\n  * followed by the whatever arguments the function takes after its first\\n  * since the first argument is the plane value.\\n  * @returns {Dimension}\\n  */\\n\\tthis.math = function (_fun) {\\n\\t\\tvar args = [].slice.call(arguments, 1);\\n\\n\\t\\treturn this.create().set(Math[_fun].apply(Math, [this[0]].concat(args)), Math[_fun].apply(Math, [this[1]].concat(args)));\\n\\t};\\n\\n\\t/**\\n  * Takes each plane value and passes it to parseInt().\\n  * @returns {Dimension}\\n  */\\n\\tthis.parseInt = function () {\\n\\t\\treturn this.create().set(parseInt(this[0]), parseInt(this[1]));\\n\\t};\\n\\n\\t/**\\n  * Takes each plane value and passes it to parseFloat().\\n  * @returns {Dimension}\\n  */\\n\\tthis.parseFloat = function () {\\n\\t\\treturn this.create().set(parseFloat(this[0]), parseFloat(this[1]));\\n\\t};\\n\\n\\t/**\\n  * Resolves the name of the plane at the given index.\\n  * @arg {number} _index - The index of the plane.\\n  * @returns {string}\\n  */\\n\\tthis.planeOf = function (_index) {\\n\\t\\tif (isNaN(parseInt(_index))) return null;\\n\\t\\treturn this.planeMap[_index];\\n\\t};\\n\\n\\t/**\\n  * Make a new array by iterating over each plane.<br>\\n  * See [`Array.prototype.map()`]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map}\\n  * @arg {function} _handler - handler for each index.\\n  * @override\\n  * @returns {Dimension}\\n  */\\n\\tthis.map = function (_handler) {\\n\\t\\treturn originalMap.call(this, _handler).to(Object.getPrototypeOf(this));\\n\\t};\\n\\n\\t/**\\n  * Multiplies the planes.\\n  * @returns {number}\\n  */\\n\\tthis.product = function () {\\n\\t\\treturn this[0] * this[1];\\n\\t};\\n\\n\\t/**\\n  * Divides the planes.\\n  * @returns {number}\\n  */\\n\\tthis.ratio = function () {\\n\\t\\treturn this[0] / this[1];\\n\\t};\\n\\n\\tthis.quotient = function () {\\n\\t\\treturn Math.floor(this[0] / this[1]);\\n\\t};\\n\\n\\tthis.remainder = function () {\\n\\t\\treturn this[0] % this[1];\\n\\t};\\n});\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. use `Size.create()` to get a new instance.\\n * @class\\n * @extends module:types/Dimensions~Dimension\\n * @classdesc 2 Dimensional object containing width and height.<br>\\n * <span class=\\\"important\\\">NOTE:</span> This is an immutable class. Methods return a new object with the original as its prototype.\\n * @prop {number} width - The width.\\n * @prop {number} height - The height.\\n */\\nSize = Dimension.extend(function () {\\n\\t/**\\n  * Maps the names of the indexes.<br>\\n  * See [Dimension#planeOf]{@link module:types/Dimensions~Dimension#planeOf} for resolving plane name.\\n  * @protected\\n  * @default ['width', 'height']\\n  */\\n\\tthis.planeMap = ['width', 'height'];\\n\\n\\t_Object$defineProperties(this, {\\n\\t\\twidth: {\\n\\t\\t\\tget: function get() {\\n\\t\\t\\t\\treturn this[0];\\n\\t\\t\\t},\\n\\n\\t\\t\\tset: function set(_val) {\\n\\t\\t\\t\\tthis[0] = Number(_val);\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\theight: {\\n\\t\\t\\tget: function get() {\\n\\t\\t\\t\\treturn this[1];\\n\\t\\t\\t},\\n\\n\\t\\t\\tset: function set(_val) {\\n\\t\\t\\t\\tthis[1] = Number(_val);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\n\\t/**\\n  * Define the size with an object. (overloaded)\\n  * @function module:types/Dimensions~Size#set\\n  * @arg {object} _size - A size object {width, height}.\\n  * @returns {Size}\\n  */\\n\\n\\t/**\\n  * Define the size with an array. (overloaded)\\n  * @function module:types/Dimensions~Size#set\\n  * @arg {array} _size - A size array [width, height].\\n  * @returns {Size}\\n  */\\n\\n\\t/**\\n  * Define the size.\\n  * @arg {number} _width - The width.\\n  * @arg {number} _height - The height.\\n  * @returns {Size}\\n  */\\n\\tthis.set = function (_width, _height) {\\n\\t\\tif (arguments.length === 1) {\\n\\t\\t\\tif (_width.width !== undefined && _width.height !== undefined) {\\n\\t\\t\\t\\tthis[0] = Number(_width.width);\\n\\t\\t\\t\\tthis[1] = Number(_width.height);\\n\\t\\t\\t} else if (_width.length === 2) {\\n\\t\\t\\t\\tthis[0] = Number(_width[0]);\\n\\t\\t\\t\\tthis[1] = Number(_width[1]);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tthis[0] = Number(_width);\\n\\t\\t\\tthis[1] = Number(_height);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * Calculates the hypotenuse.\\n  * @see {@link https://en.wikipedia.org/wiki/Hypotenuse}\\n  * @returns {number}\\n  */\\n\\tthis.hypotenuse = function () {\\n\\t\\treturn Math.sqrt(Math.pow(this.width, 2) + Math.pow(this.height, 2));\\n\\t};\\n\\n\\t/**\\n  * Sets width and height properties on the given object. If the object is an HTML node then it will be set on the nodes style object.\\n  * @arg {object|HTMLElement} - The object or DOM node.\\n  * @returns {this}\\n  */\\n\\tthis.applyTo = function (_object) {\\n\\t\\tif (_object.nodeType === document.ELEMENT_NODE) {\\n\\t\\t\\tif (!(_object.width !== undefined || _object.height !== undefined)) {\\n\\t\\t\\t\\t_object.style.width = this.width;\\n\\t\\t\\t\\t_object.style.height = this.height;\\n\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t_object.width = this.width;\\n\\t\\t_object.height = this.height;\\n\\n\\t\\treturn this;\\n\\t};\\n});\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. use `Point.create()` to get a new instance.\\n * @class\\n * @extends module:types/Dimensions~Dimension\\n * @classdesc Object containing coordinates on a 2-dimensional cartesian plane.<br>\\n * <span class=\\\"important\\\">NOTE:</span> This is an immutable class. Methods return a new object with the original as its prototype.\\n * @prop {number} x - The x coordinate.\\n * @prop {number} y - The y coordinate.\\n */\\nPoint = Dimension.extend(function () {\\n\\t/**\\n  * Maps the names of the indexes.<br>\\n  * See [Dimension#planeOf]{@link module:types/Dimensions~Dimension#planeOf} for resolving plane name.\\n  * @protected\\n  * @default ['x', 'y']\\n  */\\n\\tthis.planeMap = ['x', 'y'];\\n\\n\\t_Object$defineProperties(this, {\\n\\t\\tx: {\\n\\t\\t\\tget: function get() {\\n\\t\\t\\t\\treturn this[0];\\n\\t\\t\\t},\\n\\n\\t\\t\\tset: function set(_val) {\\n\\t\\t\\t\\tthis[0] = Number(_val);\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\ty: {\\n\\t\\t\\tget: function get() {\\n\\t\\t\\t\\treturn this[1];\\n\\t\\t\\t},\\n\\n\\t\\t\\tset: function set(_val) {\\n\\t\\t\\t\\tthis[1] = Number(_val);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\n\\t/**\\n  * Define the point with an object. (overloaded)\\n  * @function module:types/Dimensions~Point#set\\n  * @arg {object} _point - A point object {x, y}.\\n  * @returns {Point}\\n  */\\n\\n\\t/**\\n  * Define the point with an array. (overloaded)\\n  * @function module:types/Dimensions~Point#set\\n  * @arg {array} _point - A point array [x, y].\\n  * @returns {Point}\\n  */\\n\\n\\t/**\\n  * Define the point.\\n  * @arg {number} _x - The x.\\n  * @arg {number} _y - The y.\\n  * @returns {Point}\\n  */\\n\\tthis.set = function (_x, _y) {\\n\\t\\tif (arguments.length === 1) {\\n\\t\\t\\tif (_x.x !== undefined && _x.y !== undefined) {\\n\\t\\t\\t\\tthis[0] = Number(_x.x);\\n\\t\\t\\t\\tthis[1] = Number(_x.y);\\n\\t\\t\\t} else if (_x.length === 2) {\\n\\t\\t\\t\\tthis[0] = Number(_x[0]);\\n\\t\\t\\t\\tthis[1] = Number(_x[1]);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tthis[0] = Number(_x);\\n\\t\\t\\tthis[1] = Number(_y);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * Calculates the distance between the insatnce and a point object.\\n  * @arg {Point} _point - A point object {x,y}.\\n  * @returns {Size}\\n  */\\n\\tthis.distance = function (_point) {\\n\\t\\tif (_point.x !== undefined && _point.y !== undefined) {\\n\\t\\t\\treturn Size.create().set(_point.x - this.x, _point.y - this.y);\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t};\\n\\n\\t/**\\n  * Sets x and y properties on the given object. If the object is an HTML node then the left and top properties will be set on the nodes style object.\\n  * @arg {object|HTMLElement} - The object or DOM node.\\n  * @returns {this}\\n  */\\n\\tthis.applyTo = function (_object) {\\n\\t\\tif (_object.nodeType === document.ELEMENT_NODE) {\\n\\t\\t\\t_object.style.left = this.x;\\n\\t\\t\\t_object.style.top = this.y;\\n\\t\\t} else {\\n\\t\\t\\t_object.x = this.x;\\n\\t\\t\\t_object.y = this.y;\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * Rotate the point based on an origin point and an angle in degrees.\\n  * @arg {Point} _origin - A point object {x,y}.\\n  * @arg {number} _angle - The angle of rotation in degrees.\\n  * @returns {this}\\n  */\\n\\tthis.rotate = function (_origin, _angle) {\\n\\t\\tvar x, y, rad;\\n\\n\\t\\trad = _angle * (Math.PI / 180);\\n\\n\\t\\tx = this.x - _origin.x;\\n\\t\\ty = this.y - _origin.y;\\n\\n\\t\\treturn this.create().set(Math.sin(rad) * x - Math.cos(rad) * y + _origin.x, Math.cos(rad) * x + Math.sin(rad) * y + _origin.y);\\n\\t};\\n});\\n\\nexports['default'] = { Dimension: Dimension, Size: Size, Point: Point };\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"module.exports = { \\\"default\\\": __webpack_require__(38), __esModule: true };//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydGllcy5qcz9iMzg1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQiIsImZpbGUiOiIzNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnRpZXNcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnRpZXMuanNcbiAqKiBtb2R1bGUgaWQgPSAzN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"__webpack_require__(39);\\nvar $Object = __webpack_require__(10).Object;\\nmodule.exports = function defineProperties(T, D){\\n  return $Object.defineProperties(T, D);\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnRpZXMuanM/ZDk4NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjM4LmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoVCwgRCl7XG4gIHJldHVybiAkT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoVCwgRCk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnRpZXMuanNcbiAqKiBtb2R1bGUgaWQgPSAzOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var $export = __webpack_require__(8);\\r\\n// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)\\r\\n$export($export.S + $export.F * !__webpack_require__(18), 'Object', {defineProperties: __webpack_require__(40)});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanM/ZjYwYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EscUVBQXVFLDBDQUEyQyIsImZpbGUiOiIzOS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcclxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHtkZWZpbmVQcm9wZXJ0aWVzOiByZXF1aXJlKCcuL19vYmplY3QtZHBzJyl9KTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzLmpzXG4gKiogbW9kdWxlIGlkID0gMzlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var dP       = __webpack_require__(14)\\r\\n  , anObject = __webpack_require__(15)\\r\\n  , getKeys  = __webpack_require__(41);\\r\\n\\r\\nmodule.exports = __webpack_require__(18) ? Object.defineProperties : function defineProperties(O, Properties){\\r\\n  anObject(O);\\r\\n  var keys   = getKeys(Properties)\\r\\n    , length = keys.length\\r\\n    , i = 0\\r\\n    , P;\\r\\n  while(length > i)dP.f(O, P = keys[i++], Properties[P]);\\r\\n  return O;\\r\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHBzLmpzP2FlNzMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI0MC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBkUCAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXHJcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXHJcbiAgLCBnZXRLZXlzICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcyl7XHJcbiAgYW5PYmplY3QoTyk7XHJcbiAgdmFyIGtleXMgICA9IGdldEtleXMoUHJvcGVydGllcylcclxuICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcclxuICAgICwgaSA9IDBcclxuICAgICwgUDtcclxuICB3aGlsZShsZW5ndGggPiBpKWRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XHJcbiAgcmV0dXJuIE87XHJcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcHMuanNcbiAqKiBtb2R1bGUgaWQgPSA0MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// 19.1.2.14 / 15.2.3.14 Object.keys(O)\\r\\nvar $keys       = __webpack_require__(42)\\r\\n  , enumBugKeys = __webpack_require__(48);\\r\\n\\r\\nmodule.exports = Object.keys || function keys(O){\\r\\n  return $keys(O, enumBugKeys);\\r\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy5qcz9jOTljIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNDEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcclxudmFyICRrZXlzICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKVxyXG4gICwgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTyl7XHJcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcclxufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMuanNcbiAqKiBtb2R1bGUgaWQgPSA0MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var has          = __webpack_require__(43)\\r\\n  , toIObject    = __webpack_require__(44)\\r\\n  , arrayIndexOf = __webpack_require__(45)(false)\\r\\n  , IE_PROTO     = __webpack_require__(47)('IE_PROTO');\\r\\n\\r\\nmodule.exports = function(object, names){\\r\\n  var O      = toIObject(object)\\r\\n    , i      = 0\\r\\n    , result = []\\r\\n    , key;\\r\\n  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);\\r\\n  // Don't enum bug & hidden keys\\r\\n  while(names.length > i)if(has(O, key = names[i++])){\\r\\n    ~arrayIndexOf(result, key) || result.push(key);\\r\\n  }\\r\\n  return result;\\r\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcz83NjM1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI0Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBoYXMgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxyXG4gICwgdG9JT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXHJcbiAgLCBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKVxyXG4gICwgSUVfUFJPVE8gICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QsIG5hbWVzKXtcclxuICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KG9iamVjdClcclxuICAgICwgaSAgICAgID0gMFxyXG4gICAgLCByZXN1bHQgPSBbXVxyXG4gICAgLCBrZXk7XHJcbiAgZm9yKGtleSBpbiBPKWlmKGtleSAhPSBJRV9QUk9UTyloYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xyXG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcclxuICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKWlmKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSl7XHJcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xyXG4gIH1cclxuICByZXR1cm4gcmVzdWx0O1xyXG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qc1xuICoqIG1vZHVsZSBpZCA9IDQyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 43 */\n/***/ function(module, exports) {\n\n\teval(\"var hasOwnProperty = {}.hasOwnProperty;\\nmodule.exports = function(it, key){\\n  return hasOwnProperty.call(it, key);\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oYXMuanM/YThjOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBIiwiZmlsZSI6IjQzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBrZXkpe1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hhcy5qc1xuICoqIG1vZHVsZSBpZCA9IDQzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// to indexed object, toObject with fallback for non-array-like ES3 strings\\nvar IObject = __webpack_require__(24)\\n  , defined = __webpack_require__(27);\\nmodule.exports = function(it){\\n  return IObject(defined(it));\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pb2JqZWN0LmpzPzBiMTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjQ0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKVxuICAsIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW9iamVjdC5qc1xuICoqIG1vZHVsZSBpZCA9IDQ0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// false -> Array#indexOf\\n// true  -> Array#includes\\nvar toIObject = __webpack_require__(44)\\n  , toLength  = __webpack_require__(28)\\n  , toIndex   = __webpack_require__(46);\\nmodule.exports = function(IS_INCLUDES){\\n  return function($this, el, fromIndex){\\n    var O      = toIObject($this)\\n      , length = toLength(O.length)\\n      , index  = toIndex(fromIndex, length)\\n      , value;\\n    // Array#includes uses SameValueZero equality algorithm\\n    if(IS_INCLUDES && el != el)while(length > index){\\n      value = O[index++];\\n      if(value != value)return true;\\n    // Array#toIndex ignores holes, Array#includes - not\\n    } else for(;length > index; index++)if(IS_INCLUDES || index in O){\\n      if(O[index] === el)return IS_INCLUDES || index;\\n    } return !IS_INCLUDES && -1;\\n  };\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcz9jOGZhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxXQUFXLGVBQWU7QUFDL0I7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsImZpbGUiOiI0NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgdG9MZW5ndGggID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCB0b0luZGV4ICAgPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihJU19JTkNMVURFUyl7XG4gIHJldHVybiBmdW5jdGlvbigkdGhpcywgZWwsIGZyb21JbmRleCl7XG4gICAgdmFyIE8gICAgICA9IHRvSU9iamVjdCgkdGhpcylcbiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9IHRvSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpXG4gICAgICAsIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICBpZihJU19JTkNMVURFUyAmJiBlbCAhPSBlbCl3aGlsZShsZW5ndGggPiBpbmRleCl7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICBpZih2YWx1ZSAhPSB2YWx1ZSlyZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSN0b0luZGV4IGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvcig7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspaWYoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTyl7XG4gICAgICBpZihPW2luZGV4XSA9PT0gZWwpcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4O1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzXG4gKiogbW9kdWxlIGlkID0gNDVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var toInteger = __webpack_require__(29)\\n  , max       = Math.max\\n  , min       = Math.min;\\nmodule.exports = function(index, length){\\n  index = toInteger(index);\\n  return index < 0 ? max(index + length, 0) : min(index, length);\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pbmRleC5qcz9lMTU3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjQ2LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIG1heCAgICAgICA9IE1hdGgubWF4XG4gICwgbWluICAgICAgID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGluZGV4LCBsZW5ndGgpe1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW5kZXguanNcbiAqKiBtb2R1bGUgaWQgPSA0NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var shared = __webpack_require__(33)('keys')\\r\\n  , uid    = __webpack_require__(34);\\r\\nmodule.exports = function(key){\\r\\n  return shared[key] || (shared[key] = uid(key));\\r\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQta2V5LmpzPzNiZjgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI0Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpXHJcbiAgLCB1aWQgICAgPSByZXF1aXJlKCcuL191aWQnKTtcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xyXG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XHJcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC1rZXkuanNcbiAqKiBtb2R1bGUgaWQgPSA0N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 48 */\n/***/ function(module, exports) {\n\n\teval(\"// IE 8- don't enum bug keys\\r\\nmodule.exports = (\\r\\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\\r\\n).split(',');//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzP2Y4NmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNDguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXHJcbm1vZHVsZS5leHBvcnRzID0gKFxyXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXHJcbikuc3BsaXQoJywnKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qc1xuICoqIG1vZHVsZSBpZCA9IDQ4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Base object type for 'array like' objects.\\n * @module\\n * @requires module:util\\n * @requires module:types/Basic\\n */\\n\\nvar _util = __webpack_require__(50);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesBasic = __webpack_require__(51);\\n\\nvar _typesBasic2 = _interopRequireDefault(_typesBasic);\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. use `BasicArray.create()` to get a new instance.\\n * @classdesc A base object type for 'array like' object.\\n * @class\\n * @extends external:Array\\n * @extends module:types/Basic~Basic\\n * @mixes module:types/Basic~Basic\\n */\\nvar BasicArray = (function () {\\n  /**\\n   * Objects with this as an own property will be identified as the root object.\\n   * @memberof module:types/BasicArray~BasicArray\\n   * @readonly\\n   * @default\\n   */\\n  this.baseType = 'TYPE_BASIC_ARRAY';\\n\\n  _util2['default'].mixin(this, _typesBasic2['default']);\\n\\n  return this;\\n}).call([]);\\n\\nexports['default'] = BasicArray;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvQmFzaWNBcnJheS5qcz9lZjNmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Z0NBTWlCLEVBQU07Ozs7c0NBQ0wsRUFBYTs7Ozs7Ozs7Ozs7O0FBVS9CLElBQUksVUFBVSxHQUFHLENBQUMsWUFBWTs7Ozs7OztBQU83QixNQUFJLENBQUMsUUFBUSxHQUFHLGtCQUFrQixDQUFDOztBQUVuQyxvQkFBSyxLQUFLLENBQUMsSUFBSSwwQkFBUSxDQUFDOztBQUV4QixTQUFPLElBQUksQ0FBQztDQUVaLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDOztxQkFFRyxVQUFVIiwiZmlsZSI6IjQ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBCYXNlIG9iamVjdCB0eXBlIGZvciAnYXJyYXkgbGlrZScgb2JqZWN0cy5cbiAqIEBtb2R1bGVcbiAqIEByZXF1aXJlcyBtb2R1bGU6dXRpbFxuICogQHJlcXVpcmVzIG1vZHVsZTp0eXBlcy9CYXNpY1xuICovXG5pbXBvcnQgdXRpbCBmcm9tICd1dGlsJztcbmltcG9ydCBCYXNpYyBmcm9tICd0eXBlcy9CYXNpYyc7XG5cbi8qKlxuICogPHNwYW4gY2xhc3M9XCJpbXBvcnRhbnRcIj5OT1RFOjwvc3Bhbj4gVGhpcyBpcyBOT1QgYSBjb25zdHJ1Y3Rvci4gdXNlIGBCYXNpY0FycmF5LmNyZWF0ZSgpYCB0byBnZXQgYSBuZXcgaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIEEgYmFzZSBvYmplY3QgdHlwZSBmb3IgJ2FycmF5IGxpa2UnIG9iamVjdC5cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgZXh0ZXJuYWw6QXJyYXlcbiAqIEBleHRlbmRzIG1vZHVsZTp0eXBlcy9CYXNpY35CYXNpY1xuICogQG1peGVzIG1vZHVsZTp0eXBlcy9CYXNpY35CYXNpY1xuICovXG52YXIgQmFzaWNBcnJheSA9IChmdW5jdGlvbiAoKSB7XG5cdC8qKlxuXHQgKiBPYmplY3RzIHdpdGggdGhpcyBhcyBhbiBvd24gcHJvcGVydHkgd2lsbCBiZSBpZGVudGlmaWVkIGFzIHRoZSByb290IG9iamVjdC5cblx0ICogQG1lbWJlcm9mIG1vZHVsZTp0eXBlcy9CYXNpY0FycmF5fkJhc2ljQXJyYXlcblx0ICogQHJlYWRvbmx5XG5cdCAqIEBkZWZhdWx0XG5cdCAqL1xuXHR0aGlzLmJhc2VUeXBlID0gJ1RZUEVfQkFTSUNfQVJSQVknO1xuXHRcblx0dXRpbC5taXhpbih0aGlzLCBCYXNpYyk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn0pLmNhbGwoW10pO1xuXG5leHBvcnQgZGVmYXVsdCBCYXNpY0FycmF5O1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc291cmNlL3R5cGVzL0Jhc2ljQXJyYXkuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 50 */\n/***/ function(module, exports) {\n\n\teval(\"exports.__esModule = true;\\n/**\\n * Utility functions.\\n * @namespace\\n * @author Micah Rolon <micah@ginasink.com>\\n * @memberof module:play~pl\\n */\\nvar util = new function () {\\n\\n\\t/**\\n  * Accepts one or more objects to combine their own properties to single object.\\n  * @arg {object} _target - The object that will recieve all members.\\n  * @arg {object} _sources... - The object(s) to join with the '_target'.\\n  * @returns {object} _target\\n  */\\n\\tthis.mixin = function () {\\n\\t\\tvar member, i, target, objs;\\n\\n\\t\\ttarget = arguments[0];\\n\\t\\tobjs = [].slice.call(arguments, 1);\\n\\n\\t\\tfor (i = 0; i < objs.length; i += 1) {\\n\\t\\t\\tfor (member in objs[i]) {\\n\\t\\t\\t\\tif (!objs[i].hasOwnProperty(member)) continue;\\n\\t\\t\\t\\ttarget[member] = objs[i][member];\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn target;\\n\\t};\\n\\n\\t/**\\n  * Matches the name of the key which references the given pointer inside an object. Like indexOf() for objects.\\n  * @arg {object} _obj - Object to search in.\\n  * @arg {*} _member - The reference which is expected to be in the object as a property.\\n  * @returns {string} The name of the key in the object matching '_member'.\\n  */\\n\\tthis.keyOf = function (_obj, _member) {\\n\\t\\tvar member;\\n\\n\\t\\tfor (member in _obj) {\\n\\t\\t\\tif (!_obj.hasOwnProperty(member)) continue;\\n\\t\\t\\tif (_obj[member] === _member) return member;\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t};\\n\\n\\t/**\\n  * Matches the object, deep in the prototype chain, which is the owner of the property referencing the given pointer.\\n  * @arg {object} _obj - The object to search.\\n  * @arg {*} _member - The reference which is expected to be a property in the prototype chain.\\n  * @return {object} An object containing the name of the property and the owning object. {name, object}\\n  */\\n\\tthis.getOwner = function (_obj, _member) {\\n\\t\\tvar prototype, name;\\n\\n\\t\\tprototype = Object.getPrototypeOf(_obj);\\n\\n\\t\\t// keep searching until we go as deep as we can go.\\n\\t\\twhile (prototype) {\\n\\t\\t\\t// search for the key in the prototype\\n\\t\\t\\tname = util.keyOf(prototype, _member);\\n\\n\\t\\t\\t// If we found the key in the prototype then we found\\n\\t\\t\\t// our match and we can break out of the loop.\\n\\t\\t\\tif (name) break;\\n\\n\\t\\t\\t// Otherwise go deeper (thats what she said ;p)\\n\\t\\t\\tprototype = Object.getPrototypeOf(prototype);\\n\\t\\t}\\n\\n\\t\\treturn {\\n\\t\\t\\tname: name,\\n\\t\\t\\tobject: prototype\\n\\t\\t};\\n\\t};\\n\\n\\t/**\\n  * Given a range; provides a random number in that range.\\n  * @function play~pl.util.random\\n  * @arg {number} _rangeA - A number for the low end of the range.\\n  * @arg {number} _rangeB - The top end of the range.\\n  * @returns {number|*} The resulting number in range or the member found at random.\\n  */\\n\\n\\t/**\\n  * Given an iterable; provides a random item.\\n  * @arg {array} _collection - The iterable.\\n  * @returns {number|*} The member found at random.\\n  */\\n\\tthis.random = function (_collection_rangeA, _rangeB) {\\n\\t\\tvar index, val;\\n\\n\\t\\tindex = Math.floor(Math.random() * _collection_rangeA.length);\\n\\n\\t\\tif (arguments.length === 2) {\\n\\t\\t\\tval = Math.round(Math.random() * _rangeB);\\n\\n\\t\\t\\treturn val < _collection_rangeA ? _collection_rangeA : val;\\n\\t\\t}\\n\\n\\t\\tif (index === _collection_rangeA.length) index = _collection_rangeA.length - 1;\\n\\n\\t\\treturn _collection_rangeA && _collection_rangeA[index];\\n\\t};\\n\\n\\t/**\\n  * Take string and makes it dot notation friendly.\\n  * @arg {string} _id - The string to transform.\\n  * @arg {boolean} _camelCase - Transform with camel case.\\n  * @returns {string}\\n  */\\n\\tthis.transformId = function (_id, _camelCase) {\\n\\t\\tif (_id && _camelCase) {\\n\\t\\t\\treturn _id.replace(/[-\\\\s]+([\\\\w\\\\d]?)/g, function (_match) {\\n\\t\\t\\t\\treturn RegExp.$1.toUpperCase();\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn _id && _id.replace(/[-\\\\s]+/g, '_');\\n\\t};\\n\\n\\t/**\\n  * Test all arguments for != null\\n  * @return {boolean}\\n  */\\n\\tthis.isSet = function () {\\n\\t\\treturn [].every.call(arguments, function (_arg) {\\n\\t\\t\\treturn _arg != null;\\n\\t\\t});\\n\\t};\\n\\n\\t/**\\n  * Parses a formated string and calculates it in milliseconds.\\n  * @arg {string} _source - The formated string for calculation in the pattern '1d 1h 1m 1s'.\\n  * @return {number}\\n  */\\n\\tthis.toMillisec = function (_source) {\\n\\t\\tvar tokens, time, units;\\n\\n\\t\\tif (!_source) return;\\n\\t\\tif (typeof _source === 'number') return _source;\\n\\n\\t\\ttokens = _source.split(/\\\\s+/);\\n\\t\\ttime = 0;\\n\\t\\tunits = {\\n\\t\\t\\td: 24 * 60 * 60 * 1000,\\n\\t\\t\\th: 60 * 60 * 1000,\\n\\t\\t\\tm: 60 * 1000,\\n\\t\\t\\ts: 1000\\n\\t\\t};\\n\\n\\t\\ttokens.forEach(function (_token) {\\n\\t\\t\\tvar unit, value;\\n\\n\\t\\t\\tunit = (_token.match(/[dhms]/) || [])[0];\\n\\n\\t\\t\\tif (unit) {\\n\\t\\t\\t\\tvalue = Number(_token.slice(0, -1));\\n\\t\\t\\t\\ttime += value * units[unit];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttime += Number(_token);\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\treturn time;\\n\\t};\\n\\n\\t/**\\n  * Needs no introduction\\n  * @arg {iterable} _collection - iterable.\\n  * @return {array}\\n  */\\n\\tthis.toArray = function (_collection) {\\n\\t\\treturn Array.prototype.map.call(_collection, function (i) {\\n\\t\\t\\treturn i;\\n\\t\\t});\\n\\t};\\n\\n\\t/**\\n  * Resolves the value in the object at the given path.\\n  * @arg {object} _obj - The object to query.\\n  * @arg {string} _path - The path to the desired reference.\\n  * @returns {*} The resulting reference value.\\n  * @example\\n  * var user = {\\n  *   name: 'John',\\n  *   family: {\\n  *\\t   guardians: {David}, // property could be an array of multiple guardians.\\n  *     siblings: [{Jane}, {Thomas}] // collection of user objects.\\n  *   }\\n  * };\\n  *\\n  * pl.util.resolvePath(user, 'family.sliblings[2].name');\\n  * // Matches the `guardians` propery if `guardians[0]` is undefined when `?` is used.\\n  * pl.util.resolvePath(user, 'family.guardians[0]?.name'); \\n  */\\n\\tthis.resolvePath = function (_obj, _path) {\\n\\t\\tvar path, obj, i, name, index, testArray;\\n\\n\\t\\tpath = _path.split('.');\\n\\t\\tobj = _obj;\\n\\t\\ti = 0;\\n\\n\\t\\twhile (obj) {\\n\\t\\t\\ttestArray = /\\\\?$/.test(path[i]);\\n\\t\\t\\tindex = (path[i].match(/\\\\[(\\\\d+)\\\\]/) || [])[1] || -1;\\n\\t\\t\\tname = ~index ? path[i].slice(0, path[i].indexOf('[')) : path[i];\\n\\t\\t\\tobj = obj[name];\\n\\n\\t\\t\\tif (~index && obj) {\\n\\t\\t\\t\\tobj = testArray ? obj[index] || obj : obj[index];\\n\\t\\t\\t}\\n\\n\\t\\t\\ti += 1;\\n\\n\\t\\t\\tif (path.length === i) break;\\n\\t\\t}\\n\\n\\t\\treturn obj;\\n\\t};\\n\\n\\tthis.assignRef = function (_obj, _name, _ref) {\\n\\t\\tvar name;\\n\\n\\t\\tname = util.transformId(_name, true);\\n\\n\\t\\tif (_obj[name] === _ref) return _ref;\\n\\n\\t\\tif (_obj[name]) {\\n\\t\\t\\tif (!_obj[name].__refCollction__) {\\n\\t\\t\\t\\t_obj[name] = [_obj[name]];\\n\\n\\t\\t\\t\\tObject.defineProperty(_obj[name], '__refCollction__', {\\n\\t\\t\\t\\t\\tvalue: true,\\n\\t\\t\\t\\t\\tenumerable: false,\\n\\t\\t\\t\\t\\twriteable: false,\\n\\t\\t\\t\\t\\tconfigureable: false\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\t_obj[name].push(_ref);\\n\\t\\t} else {\\n\\t\\t\\t_obj[name] = _ref;\\n\\t\\t}\\n\\n\\t\\treturn _obj[name];\\n\\t};\\n\\n\\t/**\\n  * N0 OPeration.\\n  */\\n\\tthis.noop = function () {};\\n\\n\\t/**\\n  * Get the file name out of a simple file path.\\n  * @arg {string} _path - The file path. \\n  * @returns {string} The extracted name.\\n  */\\n\\tthis.resolveFileName = function (_path) {\\n\\t\\treturn _path.slice(_path.lastIndexOf('/') + 1);\\n\\t};\\n\\n\\t/**\\n  * Produces a string following the specied pattern. Which is a mix of x, y, z and - characters.\\n  * - x; produces a letter a-f.\\n  * - y; produces a digit 0-9.\\n  * - z; produces a 4 character hex value derived from the now time stamp.\\n  * @arg {string} _pattern - The xyz pattern.\\n  * @returns {string} The generated ID.\\n  */\\n\\tthis.createId = function (_pattern) {\\n\\t\\treturn (_pattern || 'xy-z').replace(/[xyz]/g, function (_token) {\\n\\t\\t\\tif (_token === 'x') return (Math.floor(Math.random() * 5) + 10).toString(16);\\n\\t\\t\\tif (_token === 'y') return Math.floor(Math.random() * 10).toString(16);\\n\\t\\t\\treturn Math.floor(Math.random() * Date.now()).toString(16).slice(0, 4);\\n\\t\\t});\\n\\t};\\n}();\\n\\nexports['default'] = util;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _Object$create = __webpack_require__(52)['default'];\\n\\nvar _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Base object type for 'classes' implementing methods for extention and super callbacks.\\n * @module\\n * @requires module:play~pl.util\\n */\\n\\nvar _util = __webpack_require__(50);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. use `Basic.create()` to get a new instance.\\n * @classdesc The base type for all objects which will act as prototypes.\\n * @class\\n */\\nvar Basic = {\\n\\t/**\\n  * Objects with this as an own property will be identified as the root object.\\n  * @readonly\\n  * @default\\n  */\\n\\tbaseType: 'TYPE_BASIC',\\n\\n\\t/**\\n  * Creates a new object with the current object as its prototype.\\n  * @instance\\n  * @returns {Basic} The new instance.\\n  */\\n\\tcreate: function create() {\\n\\t\\treturn _Object$create(this);\\n\\t},\\n\\n\\t/**\\n  * Creates a new object using a constructor function or object with the current object as its prototype.\\n  * @instance\\n  * @arg {Function|Object} _implementation - The implementation of the new type as either a constructor function or object to mixin.\\n  * @returns {Basic} The new instance.\\n  *\\n  * @todo define constructor property\\n  */\\n\\textend: function extend(_implementation) {\\n\\t\\tvar instance;\\n\\n\\t\\tif (!_implementation) return null;\\n\\n\\t\\tswitch (typeof _implementation) {\\n\\t\\t\\tcase 'function':\\n\\t\\t\\t\\t_implementation.prototype = this;\\n\\t\\t\\t\\tinstance = new _implementation();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'object':\\n\\t\\t\\t\\tinstance = this.create();\\n\\t\\t\\t\\tinstance.mixin(_implementation);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tconsole.error('TypeError: Invalid type given for object extention.', typeof _implementation);\\n\\t\\t}\\n\\n\\t\\treturn instance;\\n\\t},\\n\\n\\t/**\\n  * Accepts one or more objects to combine their own properties to the instance.\\n  * @instance\\n  * @arg {object} _sources... - The object(s) to join with the instance.\\n  * @returns this\\n  */\\n\\tmixin: function mixin() {\\n\\t\\treturn _util2['default'].mixin.apply(null, [this].concat([].slice.call(arguments, 0)));\\n\\t},\\n\\n\\t/**\\n  * Matches the name of the key which references the given pointer inside the instance. Like indexOf() for objects.\\n  * @instance\\n  * @arg {*} _member - The reference which is expected to be in the object as a property.\\n  * @returns {string} The name of the key in the object matching '_member'.\\n  */\\n\\tkeyOf: function keyOf(_member) {\\n\\t\\treturn _util2['default'].keyOf(this, _member);\\n\\t},\\n\\n\\t/**\\n  * Performs a super callback of the function which called it. Allowing you to still invoke a method which was overridden.\\n  * @instance\\n  * @arg {*} _args... - Whatever amount of arguments the caller takes.\\n  * @returns {*} Whatever the caller returns.\\n  */\\n\\tproto: function proto() {\\n\\t\\tvar method, name, owner, prototype;\\n\\n\\t\\t// Get the function which invoked proto() in the call stack.\\n\\t\\t// If the caller is a behavior then we retrieve the method.\\n\\t\\tmethod = this.proto.caller.method || this.proto.caller;\\n\\n\\t\\t// Check to see if 'this' owns the method.\\n\\t\\t// NOTE: We may want to move this logic into getOwner().\\n\\t\\tif (name = this.keyOf(method)) {\\n\\t\\t\\tprototype = Object.getPrototypeOf(this);\\n\\t\\t}\\n\\n\\t\\t// Otherwise find the object which owns the caller function.\\n\\t\\telse {\\n\\t\\t\\t\\towner = _util2['default'].getOwner(this, method);\\n\\t\\t\\t\\tname = owner.name;\\n\\t\\t\\t\\tprototype = Object.getPrototypeOf(owner.object);\\n\\t\\t\\t}\\n\\n\\t\\tmethod = prototype[name];\\n\\n\\t\\tif (!method) {\\n\\t\\t\\tconsole.error('ReferenceError: Unable to locate prototype method.', this.proto.caller);\\n\\t\\t\\tdebugger;\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\treturn method.apply(this, arguments);\\n\\t},\\n\\n\\t/**\\n  * Performs a super callback of the function which called it. Unlike `proto()` which looks for the overidden method, sup looks for the base class' implementation.\\n  * @instance\\n  * @arg {*} _args... - Whatever amount of arguments the caller takes.\\n  * @returns {*} Whatever the caller returns.\\n  */\\n\\tsup: function sup() {\\n\\t\\tvar method, name, owner, prototype;\\n\\n\\t\\t// Get the function which invoked sup() in the call stack.\\n\\t\\tmethod = this.sup.caller;\\n\\t\\towner = _util2['default'].getOwner(this, this.baseType);\\n\\t\\tprototype = owner.object;\\n\\t\\tname = this.keyOf(method);\\n\\n\\t\\t// Check to see if 'this' owns the method.\\n\\t\\t// NOTE: We may want to move this logic into getOwner().\\n\\t\\t//\\n\\t\\tif (!name) {\\n\\t\\t\\towner = _util2['default'].getOwner(this, method);\\n\\t\\t\\tname = owner.name;\\n\\t\\t}\\n\\n\\t\\tmethod = prototype[name];\\n\\n\\t\\tif (!method) {\\n\\t\\t\\tconsole.error('ReferenceError: Unable to locate prototype method.', this.sup.caller);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\treturn method.apply(this, arguments);\\n\\t},\\n\\n\\t/**\\n  * Provides the object type.\\n  * @instance\\n  */\\n\\ttoString: function toString() {\\n\\t\\tvar type;\\n\\n\\t\\tif (this.baseType) {\\n\\t\\t\\ttype = this.baseType.replace('TYPE_', '');\\n\\t\\t\\ttype = type.slice(0, 1) + type.slice(1).toLowerCase();\\n\\t\\t} else {\\n\\t\\t\\ttype = this.constructor.name || 'Object';\\n\\t\\t}\\n\\n\\t\\treturn '[object ' + type + ']';\\n\\t}\\n\\n};\\n\\nexports['default'] = Basic;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"module.exports = { \\\"default\\\": __webpack_require__(53), __esModule: true };//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9jcmVhdGUuanM/MzFiZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0IiLCJmaWxlIjoiNTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9jcmVhdGUuanNcbiAqKiBtb2R1bGUgaWQgPSA1MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 53 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"__webpack_require__(54);\\nvar $Object = __webpack_require__(10).Object;\\nmodule.exports = function create(P, D){\\n  return $Object.create(P, D);\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlLmpzPzI1YTkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI1My5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTtcbnZhciAkT2JqZWN0ID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlKFAsIEQpe1xuICByZXR1cm4gJE9iamVjdC5jcmVhdGUoUCwgRCk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlLmpzXG4gKiogbW9kdWxlIGlkID0gNTNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 54 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var $export = __webpack_require__(8)\\r\\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\\r\\n$export($export.S, 'Object', {create: __webpack_require__(55)});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzPzliYTYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLDhCQUE4QixnQ0FBb0MiLCJmaWxlIjoiNTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXHJcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKX0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzXG4gKiogbW9kdWxlIGlkID0gNTRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 55 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\\r\\nvar anObject    = __webpack_require__(15)\\r\\n  , dPs         = __webpack_require__(40)\\r\\n  , enumBugKeys = __webpack_require__(48)\\r\\n  , IE_PROTO    = __webpack_require__(47)('IE_PROTO')\\r\\n  , Empty       = function(){ /* empty */ }\\r\\n  , PROTOTYPE   = 'prototype';\\r\\n\\r\\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\\r\\nvar createDict = function(){\\r\\n  // Thrash, waste and sodomy: IE GC bug\\r\\n  var iframe = __webpack_require__(20)('iframe')\\r\\n    , i      = enumBugKeys.length\\r\\n    , gt     = '>'\\r\\n    , iframeDocument;\\r\\n  iframe.style.display = 'none';\\r\\n  __webpack_require__(56).appendChild(iframe);\\r\\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\\r\\n  // createDict = iframe.contentWindow.Object;\\r\\n  // html.removeChild(iframe);\\r\\n  iframeDocument = iframe.contentWindow.document;\\r\\n  iframeDocument.open();\\r\\n  iframeDocument.write('<script>document.F=Object</script' + gt);\\r\\n  iframeDocument.close();\\r\\n  createDict = iframeDocument.F;\\r\\n  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];\\r\\n  return createDict();\\r\\n};\\r\\n\\r\\nmodule.exports = Object.create || function create(O, Properties){\\r\\n  var result;\\r\\n  if(O !== null){\\r\\n    Empty[PROTOTYPE] = anObject(O);\\r\\n    result = new Empty;\\r\\n    Empty[PROTOTYPE] = null;\\r\\n    // add \\\"__proto__\\\" for Object.getPrototypeOf polyfill\\r\\n    result[IE_PROTO] = O;\\r\\n  } else result = createDict();\\r\\n  return Properties === undefined ? result : dPs(result, Properties);\\r\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzPzg4ZDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBIiwiZmlsZSI6IjU1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXHJcbnZhciBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXHJcbiAgLCBkUHMgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKVxyXG4gICwgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJylcclxuICAsIElFX1BST1RPICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpXHJcbiAgLCBFbXB0eSAgICAgICA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH1cclxuICAsIFBST1RPVFlQRSAgID0gJ3Byb3RvdHlwZSc7XHJcblxyXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXHJcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24oKXtcclxuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xyXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpXHJcbiAgICAsIGkgICAgICA9IGVudW1CdWdLZXlzLmxlbmd0aFxyXG4gICAgLCBndCAgICAgPSAnPidcclxuICAgICwgaWZyYW1lRG9jdW1lbnQ7XHJcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XHJcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxyXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XHJcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xyXG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XHJcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xyXG4gIGlmcmFtZURvY3VtZW50LndyaXRlKCc8c2NyaXB0PmRvY3VtZW50LkY9T2JqZWN0PC9zY3JpcHQnICsgZ3QpO1xyXG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XHJcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XHJcbiAgd2hpbGUoaS0tKWRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xyXG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpe1xyXG4gIHZhciByZXN1bHQ7XHJcbiAgaWYoTyAhPT0gbnVsbCl7XHJcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XHJcbiAgICByZXN1bHQgPSBuZXcgRW1wdHk7XHJcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcclxuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcclxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xyXG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XHJcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xyXG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzXG4gKiogbW9kdWxlIGlkID0gNTVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 56 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"module.exports = __webpack_require__(9).document && document.documentElement;//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19odG1sLmpzPzJhMTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faHRtbC5qc1xuICoqIG1vZHVsZSBpZCA9IDU2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 57 */\n/***/ function(module, exports) {\n\n\teval(\"exports.__esModule = true;\\n/**\\r\\n *\\r\\n * Copy of the deleted repository epistemex/transformation-matrix-js.\\r\\n * All rights are reserved to Epistemex.\\r\\n *\\r\\n * 2D transformation matrix object initialized with identity matrix.\\r\\n *\\r\\n * The matrix can synchronize a canvas context by supplying the context\\r\\n * as an argument, or later apply current absolute transform to an\\r\\n * existing context.\\r\\n *\\r\\n * All values are handled as floating point values.\\r\\n *\\r\\n * @param {CanvasRenderingContext2D} [context] - Optional context to sync with Matrix\\r\\n * @prop {number} a - scale x\\r\\n * @prop {number} b - shear y\\r\\n * @prop {number} c - shear x\\r\\n * @prop {number} d - scale y\\r\\n * @prop {number} e - translate x\\r\\n * @prop {number} f - translate y\\r\\n * @prop {CanvasRenderingContext2D|null} [context=null] - set or get current canvas context\\r\\n * @constructor\\r\\n */\\nfunction Matrix(context) {\\n\\n    var me = this;\\n    me._t = me.transform;\\n\\n    me.a = me.d = 1;\\n    me.b = me.c = me.e = me.f = 0;\\n\\n    me.context = context;\\n\\n    // reset canvas transformations (if any) to enable 100% sync.\\n    if (context) context.setTransform(1, 0, 0, 1, 0, 0);\\n}\\n\\nMatrix.prototype = {\\n\\n    /**\\r\\n     * Concatenates transforms of this matrix onto the given child matrix and\\r\\n     * returns a new matrix. This instance is used on left side.\\r\\n     *\\r\\n     * @param {Matrix} cm - child matrix to apply concatenation to\\r\\n     * @returns {Matrix}\\r\\n     */\\n    concat: function concat(cm) {\\n        return this.clone()._t(cm.a, cm.b, cm.c, cm.d, cm.e, cm.f);\\n    },\\n\\n    /**\\r\\n     * Flips the horizontal values.\\r\\n     */\\n    flipX: function flipX() {\\n        return this._t(-1, 0, 0, 1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Flips the vertical values.\\r\\n     */\\n    flipY: function flipY() {\\n        return this._t(1, 0, 0, -1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Reflects incoming (velocity) vector on the normal which will be the\\r\\n     * current transformed x axis. Call when a trigger condition is met.\\r\\n     *\\r\\n     * NOTE: BETA, simple implementation\\r\\n     *\\r\\n     * @param {number} x - vector end point for x (start = 0)\\r\\n     * @param {number} y - vector end point for y (start = 0)\\r\\n     * @returns {{x: number, y: number}}\\r\\n     */\\n    reflectVector: function reflectVector(x, y) {\\n\\n        var v = this.applyToPoint(0, 1),\\n            d = 2 * (v.x * x + v.y * y);\\n\\n        x -= d * v.x;\\n        y -= d * v.y;\\n\\n        return { x: x, y: y };\\n    },\\n\\n    /**\\r\\n     * Short-hand to reset current matrix to an identity matrix.\\r\\n     */\\n    reset: function reset() {\\n        return this.setTransform(1, 0, 0, 1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Rotates current matrix accumulative by angle.\\r\\n     * @param {number} angle - angle in radians\\r\\n     */\\n    rotate: function rotate(angle) {\\n        var cos = Math.cos(angle),\\n            sin = Math.sin(angle);\\n        return this._t(cos, sin, -sin, cos, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Converts a vector given as x and y to angle, and\\r\\n     * rotates (accumulative).\\r\\n     * @param x\\r\\n     * @param y\\r\\n     * @returns {*}\\r\\n     */\\n    rotateFromVector: function rotateFromVector(x, y) {\\n        return this.rotate(Math.atan2(y, x));\\n    },\\n\\n    /**\\r\\n     * Helper method to make a rotation based on an angle in degrees.\\r\\n     * @param {number} angle - angle in degrees\\r\\n     */\\n    rotateDeg: function rotateDeg(angle) {\\n        return this.rotate(angle * Math.PI / 180);\\n    },\\n\\n    /**\\r\\n     * Scales current matrix uniformly and accumulative.\\r\\n     * @param {number} f - scale factor for both x and y (1 does nothing)\\r\\n     */\\n    scaleU: function scaleU(f) {\\n        return this._t(f, 0, 0, f, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Scales current matrix accumulative.\\r\\n     * @param {number} sx - scale factor x (1 does nothing)\\r\\n     * @param {number} sy - scale factor y (1 does nothing)\\r\\n     */\\n    scale: function scale(sx, sy) {\\n        return this._t(sx, 0, 0, sy, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Scales current matrix on x axis accumulative.\\r\\n     * @param {number} sx - scale factor x (1 does nothing)\\r\\n     */\\n    scaleX: function scaleX(sx) {\\n        return this._t(sx, 0, 0, 1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Scales current matrix on y axis accumulative.\\r\\n     * @param {number} sy - scale factor y (1 does nothing)\\r\\n     */\\n    scaleY: function scaleY(sy) {\\n        return this._t(1, 0, 0, sy, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Apply shear to the current matrix accumulative.\\r\\n     * @param {number} sx - amount of shear for x\\r\\n     * @param {number} sy - amount of shear for y\\r\\n     */\\n    shear: function shear(sx, sy) {\\n        return this._t(1, sy, sx, 1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Apply shear for x to the current matrix accumulative.\\r\\n     * @param {number} sx - amount of shear for x\\r\\n     */\\n    shearX: function shearX(sx) {\\n        return this._t(1, 0, sx, 1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Apply shear for y to the current matrix accumulative.\\r\\n     * @param {number} sy - amount of shear for y\\r\\n     */\\n    shearY: function shearY(sy) {\\n        return this._t(1, sy, 0, 1, 0, 0);\\n    },\\n\\n    /**\\r\\n     * Apply skew to the current matrix accumulative.\\r\\n     * @param {number} ax - angle of skew for x\\r\\n     * @param {number} ay - angle of skew for y\\r\\n     */\\n    skew: function skew(ax, ay) {\\n        return this.shear(Math.tan(ax), Math.tan(ay));\\n    },\\n\\n    /**\\r\\n     * Apply skew for x to the current matrix accumulative.\\r\\n     * @param {number} ax - angle of skew for x\\r\\n     */\\n    skewX: function skewX(ax) {\\n        return this.shearX(Math.tan(ax));\\n    },\\n\\n    /**\\r\\n     * Apply skew for y to the current matrix accumulative.\\r\\n     * @param {number} ay - angle of skew for y\\r\\n     */\\n    skewY: function skewY(ay) {\\n        return this.shearY(Math.tan(ay));\\n    },\\n\\n    /**\\r\\n     * Set current matrix to new absolute matrix.\\r\\n     * @param {number} a - scale x\\r\\n     * @param {number} b - shear y\\r\\n     * @param {number} c - shear x\\r\\n     * @param {number} d - scale y\\r\\n     * @param {number} e - translate x\\r\\n     * @param {number} f - translate y\\r\\n     */\\n    setTransform: function setTransform(a, b, c, d, e, f) {\\n        var me = this;\\n        me.a = a;\\n        me.b = b;\\n        me.c = c;\\n        me.d = d;\\n        me.e = e;\\n        me.f = f;\\n        return me._x();\\n    },\\n\\n    /**\\r\\n     * Translate current matrix accumulative.\\r\\n     * @param {number} tx - translation for x\\r\\n     * @param {number} ty - translation for y\\r\\n     */\\n    translate: function translate(tx, ty) {\\n        return this._t(1, 0, 0, 1, tx, ty);\\n    },\\n\\n    /**\\r\\n     * Translate current matrix on x axis accumulative.\\r\\n     * @param {number} tx - translation for x\\r\\n     */\\n    translateX: function translateX(tx) {\\n        return this._t(1, 0, 0, 1, tx, 0);\\n    },\\n\\n    /**\\r\\n     * Translate current matrix on y axis accumulative.\\r\\n     * @param {number} ty - translation for y\\r\\n     */\\n    translateY: function translateY(ty) {\\n        return this._t(1, 0, 0, 1, 0, ty);\\n    },\\n\\n    /**\\r\\n     * Multiplies current matrix with new matrix values.\\r\\n     * @param {number} a2 - scale x\\r\\n     * @param {number} b2 - shear y\\r\\n     * @param {number} c2 - shear x\\r\\n     * @param {number} d2 - scale y\\r\\n     * @param {number} e2 - translate x\\r\\n     * @param {number} f2 - translate y\\r\\n     */\\n    transform: function transform(a2, b2, c2, d2, e2, f2) {\\n\\n        var me = this,\\n            a1 = me.a,\\n            b1 = me.b,\\n            c1 = me.c,\\n            d1 = me.d,\\n            e1 = me.e,\\n            f1 = me.f;\\n\\n        /* matrix order (canvas compatible):\\r\\n         * ace\\r\\n         * bdf\\r\\n         * 001\\r\\n         */\\n        me.a = a1 * a2 + c1 * b2;\\n        me.b = b1 * a2 + d1 * b2;\\n        me.c = a1 * c2 + c1 * d2;\\n        me.d = b1 * c2 + d1 * d2;\\n        me.e = a1 * e2 + c1 * f2 + e1;\\n        me.f = b1 * e2 + d1 * f2 + f1;\\n\\n        return me._x();\\n    },\\n\\n    /**\\r\\n     * Divide this matrix on input matrix which must be invertible.\\r\\n     * @param {Matrix} m - matrix to divide on (divisor)\\r\\n     * @returns {Matrix}\\r\\n     */\\n    divide: function divide(m) {\\n\\n        if (!m.isInvertible()) throw \\\"Input matrix is not invertible\\\";\\n\\n        var im = m.inverse();\\n\\n        return this._t(im.a, im.b, im.c, im.d, im.e, im.f);\\n    },\\n\\n    /**\\r\\n     * Divide current matrix on scalar value != 0.\\r\\n     * @param {number} d - divisor (can not be 0)\\r\\n     * @returns {Matrix}\\r\\n     */\\n    divideScalar: function divideScalar(d) {\\n\\n        var me = this;\\n        me.a /= d;\\n        me.b /= d;\\n        me.c /= d;\\n        me.d /= d;\\n        me.e /= d;\\n        me.f /= d;\\n\\n        return me._x();\\n    },\\n\\n    /**\\r\\n     * Get an inverse matrix of current matrix. The method returns a new\\r\\n     * matrix with values you need to use to get to an identity matrix.\\r\\n     * Context from parent matrix is not applied to the returned matrix.\\r\\n     * @returns {Matrix}\\r\\n     */\\n    inverse: function inverse() {\\n\\n        if (this.isIdentity()) {\\n            return new Matrix();\\n        } else if (!this.isInvertible()) {\\n            throw \\\"Matrix is not invertible.\\\";\\n        } else {\\n            var me = this,\\n                a = me.a,\\n                b = me.b,\\n                c = me.c,\\n                d = me.d,\\n                e = me.e,\\n                f = me.f,\\n                m = new Matrix(),\\n                dt = a * d - b * c; // determinant(), skip DRY here...\\n\\n            m.a = d / dt;\\n            m.b = -b / dt;\\n            m.c = -c / dt;\\n            m.d = a / dt;\\n            m.e = (c * f - d * e) / dt;\\n            m.f = -(a * f - b * e) / dt;\\n\\n            return m;\\n        }\\n    },\\n\\n    /**\\r\\n     * Interpolate this matrix with another and produce a new matrix.\\r\\n     * t is a value in the range [0.0, 1.0] where 0 is this instance and\\r\\n     * 1 is equal to the second matrix. The t value is not constrained.\\r\\n     *\\r\\n     * Context from parent matrix is not applied to the returned matrix.\\r\\n     *\\r\\n     * Note: this interpolation is naive. For animation use the\\r\\n     * intrpolateAnim() method instead.\\r\\n     *\\r\\n     * @param {Matrix} m2 - the matrix to interpolate with.\\r\\n     * @param {number} t - interpolation [0.0, 1.0]\\r\\n     * @param {CanvasRenderingContext2D} [context] - optional context to affect\\r\\n     * @returns {Matrix} - new instance with the interpolated result\\r\\n     */\\n    interpolate: function interpolate(m2, t, context) {\\n\\n        var me = this,\\n            m = context ? new Matrix(context) : new Matrix();\\n\\n        m.a = me.a + (m2.a - me.a) * t;\\n        m.b = me.b + (m2.b - me.b) * t;\\n        m.c = me.c + (m2.c - me.c) * t;\\n        m.d = me.d + (m2.d - me.d) * t;\\n        m.e = me.e + (m2.e - me.e) * t;\\n        m.f = me.f + (m2.f - me.f) * t;\\n\\n        return m._x();\\n    },\\n\\n    /**\\r\\n     * Interpolate this matrix with another and produce a new matrix.\\r\\n     * t is a value in the range [0.0, 1.0] where 0 is this instance and\\r\\n     * 1 is equal to the second matrix. The t value is not constrained.\\r\\n     *\\r\\n     * Context from parent matrix is not applied to the returned matrix.\\r\\n     *\\r\\n     * Note: this interpolation method uses decomposition which makes\\r\\n     * it suitable for animations (in particular where rotation takes\\r\\n     * places).\\r\\n     *\\r\\n     * @param {Matrix} m2 - the matrix to interpolate with.\\r\\n     * @param {number} t - interpolation [0.0, 1.0]\\r\\n     * @param {CanvasRenderingContext2D} [context] - optional context to affect\\r\\n     * @returns {Matrix} - new instance with the interpolated result\\r\\n     */\\n    interpolateAnim: function interpolateAnim(m2, t, context) {\\n\\n        var me = this,\\n            m = context ? new Matrix(context) : new Matrix(),\\n            d1 = me.decompose(),\\n            d2 = m2.decompose(),\\n            rotation = d1.rotation + (d2.rotation - d1.rotation) * t,\\n            translateX = d1.translate.x + (d2.translate.x - d1.translate.x) * t,\\n            translateY = d1.translate.y + (d2.translate.y - d1.translate.y) * t,\\n            scaleX = d1.scale.x + (d2.scale.x - d1.scale.x) * t,\\n            scaleY = d1.scale.y + (d2.scale.y - d1.scale.y) * t;\\n\\n        m.translate(translateX, translateY);\\n        m.rotate(rotation);\\n        m.scale(scaleX, scaleY);\\n\\n        return m._x();\\n    },\\n\\n    /**\\r\\n     * Decompose the current matrix into simple transforms using either\\r\\n     * QR (default) or LU decomposition. Code adapted from\\r\\n     * http://www.maths-informatique-jeux.com/blog/frederic/?post/2013/12/01/Decomposition-of-2D-transform-matrices\\r\\n     *\\r\\n     * The result must be applied in the following order to reproduce the current matrix:\\r\\n     *\\r\\n     *     QR: translate -> rotate -> scale -> skewX\\r\\n     *     LU: translate -> skewY  -> scale -> skewX\\r\\n     *\\r\\n     * @param {boolean} [useLU=false] - set to true to use LU rather than QR algorithm\\r\\n     * @returns {*} - an object containing current decomposed values (rotate, skew, scale, translate)\\r\\n     */\\n    decompose: function decompose(useLU) {\\n\\n        var me = this,\\n            a = me.a,\\n            b = me.b,\\n            c = me.c,\\n            d = me.d,\\n            acos = Math.acos,\\n            atan = Math.atan,\\n            sqrt = Math.sqrt,\\n            pi = Math.PI,\\n            translate = { x: me.e, y: me.f },\\n            rotation = 0,\\n            scale = { x: 1, y: 1 },\\n            skew = { x: 0, y: 0 },\\n            determ = a * d - b * c; // determinant(), skip DRY here...\\n\\n        if (useLU) {\\n            if (a) {\\n                skew = { x: atan(c / a), y: atan(b / a) };\\n                scale = { x: a, y: determ / a };\\n            } else if (b) {\\n                rotation = pi * 0.5;\\n                scale = { x: b, y: determ / b };\\n                skew.x = atan(d / b);\\n            } else {\\n                // a = b = 0\\n                scale = { x: c, y: d };\\n                skew.x = pi * 0.25;\\n            }\\n        } else {\\n            // Apply the QR-like decomposition.\\n            if (a || b) {\\n                var r = sqrt(a * a + b * b);\\n                rotation = b > 0 ? acos(a / r) : -acos(a / r);\\n                scale = { x: r, y: determ / r };\\n                skew.x = atan((a * c + b * d) / (r * r));\\n            } else if (c || d) {\\n                var s = sqrt(c * c + d * d);\\n                rotation = pi * 0.5 - (d > 0 ? acos(-c / s) : -acos(c / s));\\n                scale = { x: determ / s, y: s };\\n                skew.y = atan((a * c + b * d) / (s * s));\\n            } else {\\n                // a = b = c = d = 0\\n                scale = { x: 0, y: 0 }; // = invalid matrix\\n            }\\n        }\\n\\n        return {\\n            scale: scale,\\n            translate: translate,\\n            rotation: rotation,\\n            skew: skew\\n        };\\n    },\\n\\n    /**\\r\\n     * Returns the determinant of the current matrix.\\r\\n     * @returns {number}\\r\\n     */\\n    determinant: function determinant() {\\n        return this.a * this.d - this.b * this.c;\\n    },\\n\\n    /**\\r\\n     * Apply current matrix to x and y point.\\r\\n     * Returns a point object.\\r\\n     *\\r\\n     * @param {number} x - value for x\\r\\n     * @param {number} y - value for y\\r\\n     * @returns {{x: number, y: number}} A new transformed point object\\r\\n     */\\n    applyToPoint: function applyToPoint(x, y) {\\n\\n        var me = this;\\n\\n        return {\\n            x: x * me.a + y * me.c + me.e,\\n            y: x * me.b + y * me.d + me.f\\n        };\\n    },\\n\\n    /**\\r\\n     * Apply current matrix to array with point objects or point pairs.\\r\\n     * Returns a new array with points in the same format as the input array.\\r\\n     *\\r\\n     * A point object is an object literal:\\r\\n     *\\r\\n     * {x: x, y: y}\\r\\n     *\\r\\n     * so an array would contain either:\\r\\n     *\\r\\n     * [{x: x1, y: y1}, {x: x2, y: y2}, ... {x: xn, y: yn}]\\r\\n     *\\r\\n     * or\\r\\n     * [x1, y1, x2, y2, ... xn, yn]\\r\\n     *\\r\\n     * @param {Array} points - array with point objects or pairs\\r\\n     * @returns {Array} A new array with transformed points\\r\\n     */\\n    applyToArray: function applyToArray(points) {\\n\\n        var i = 0,\\n            p,\\n            l,\\n            mxPoints = [];\\n\\n        if (typeof points[0] === 'number') {\\n\\n            l = points.length;\\n\\n            while (i < l) {\\n                p = this.applyToPoint(points[i++], points[i++]);\\n                mxPoints.push(p.x, p.y);\\n            }\\n        } else {\\n            for (; p = points[i]; i++) {\\n                mxPoints.push(this.applyToPoint(p.x, p.y));\\n            }\\n        }\\n\\n        return mxPoints;\\n    },\\n\\n    /**\\r\\n     * Apply current matrix to a typed array with point pairs. Although\\r\\n     * the input array may be an ordinary array, this method is intended\\r\\n     * for more performant use where typed arrays are used. The returned\\r\\n     * array is regardless always returned as a Float32Array.\\r\\n     *\\r\\n     * @param {*} points - (typed) array with point pairs\\r\\n     * @param {boolean} [use64=false] - use Float64Array instead of Float32Array\\r\\n     * @returns {*} A new typed array with transformed points\\r\\n     */\\n    applyToTypedArray: function applyToTypedArray(points, use64) {\\n\\n        var i = 0,\\n            p,\\n            l = points.length,\\n            mxPoints = use64 ? new Float64Array(l) : new Float32Array(l);\\n\\n        while (i < l) {\\n            p = this.applyToPoint(points[i], points[i + 1]);\\n            mxPoints[i++] = p.x;\\n            mxPoints[i++] = p.y;\\n        }\\n\\n        return mxPoints;\\n    },\\n\\n    /**\\r\\n     * Apply to any canvas 2D context object. This does not affect the\\r\\n     * context that optionally was referenced in constructor unless it is\\r\\n     * the same context.\\r\\n     * @param {CanvasRenderingContext2D} context\\r\\n     */\\n    applyToContext: function applyToContext(context) {\\n        var me = this;\\n        context.setTransform(me.a, me.b, me.c, me.d, me.e, me.f);\\n        return me;\\n    },\\n\\n    /**\\r\\n     * Returns true if matrix is an identity matrix (no transforms applied).\\r\\n     * @returns {boolean} True if identity (not transformed)\\r\\n     */\\n    isIdentity: function isIdentity() {\\n        var me = this;\\n        return me._q(me.a, 1) && me._q(me.b, 0) && me._q(me.c, 0) && me._q(me.d, 1) && me._q(me.e, 0) && me._q(me.f, 0);\\n    },\\n\\n    /**\\r\\n     * Returns true if matrix is invertible\\r\\n     * @returns {boolean}\\r\\n     */\\n    isInvertible: function isInvertible() {\\n        return !this._q(this.determinant(), 0);\\n    },\\n\\n    /**\\r\\n     * Test if matrix is valid.\\r\\n     */\\n    isValid: function isValid() {\\n        return !this._q(this.a * this.d, 0);\\n    },\\n\\n    /**\\r\\n     * Clones current instance and returning a new matrix.\\r\\n     * @param {boolean} [noContext=false] don't clone context reference if true\\r\\n     * @returns {Matrix}\\r\\n     */\\n    clone: function clone(noContext) {\\n        var me = this,\\n            m = new Matrix();\\n        m.a = me.a;\\n        m.b = me.b;\\n        m.c = me.c;\\n        m.d = me.d;\\n        m.e = me.e;\\n        m.f = me.f;\\n        if (!noContext) m.context = me.context;\\n\\n        return m;\\n    },\\n\\n    /**\\r\\n     * Compares current matrix with another matrix. Returns true if equal\\r\\n     * (within epsilon tolerance).\\r\\n     * @param {Matrix} m - matrix to compare this matrix with\\r\\n     * @returns {boolean}\\r\\n     */\\n    isEqual: function isEqual(m) {\\n\\n        var me = this,\\n            q = me._q;\\n\\n        return q(me.a, m.a) && q(me.b, m.b) && q(me.c, m.c) && q(me.d, m.d) && q(me.e, m.e) && q(me.f, m.f);\\n    },\\n\\n    /**\\r\\n     * Returns an array with current matrix values.\\r\\n     * @returns {Array}\\r\\n     */\\n    toArray: function toArray() {\\n        var me = this;\\n        return [me.a, me.b, me.c, me.d, me.e, me.f];\\n    },\\n\\n    /**\\r\\n     * Generates a matrix() string that can be used with CSS transform.\\r\\n     * @returns {string}\\r\\n     */\\n    toCSS: function toCSS() {\\n        return \\\"matrix(\\\" + this.toArray() + \\\")\\\";\\n    },\\n\\n    /**\\r\\n     * Generates a matrix3d() string that can be used with CSS transform.\\r\\n     * @returns {string}\\r\\n     */\\n    toCSS3D: function toCSS3D() {\\n        var me = this;\\n        return \\\"matrix3d(\\\" + me.a + \\\", \\\" + me.b + \\\", 0, 0, \\\" + me.c + \\\", \\\" + me.d + \\\", 0, 0, 0, 0, 1, 0, \\\" + me.e + \\\", \\\" + me.f + \\\", 0, 1)\\\";\\n    },\\n\\n    /**\\r\\n     * Returns a JSON compatible string of current matrix.\\r\\n     * @returns {string}\\r\\n     */\\n    toJSON: function toJSON() {\\n        return JSON.stringify(this.toArray());\\n    },\\n\\n    /**\\r\\n     * Returns a string with current matrix as comma-separated list.\\r\\n     * @returns {string}\\r\\n     */\\n    toString: function toString() {\\n        return \\\"\\\" + this.toArray();\\n    },\\n\\n    /**\\r\\n     * Compares floating point values with some tolerance (epsilon)\\r\\n     * @param {number} f1 - float 1\\r\\n     * @param {number} f2 - float 2\\r\\n     * @returns {boolean}\\r\\n     * @private\\r\\n     */\\n    _q: function _q(f1, f2) {\\n        return Math.abs(f1 - f2) < 1e-14;\\n    },\\n\\n    /**\\r\\n     * Apply current absolute matrix to context if defined, to sync it.\\r\\n     * @private\\r\\n     */\\n    _x: function _x() {\\n        var me = this;\\n        if (me.context) me.context.setTransform(me.a, me.b, me.c, me.d, me.e, me.f);\\n        return me;\\n    }\\n};\\n\\nexports[\\\"default\\\"] = Matrix;\\nmodule.exports = exports[\\\"default\\\"];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvbGliL21hdHJpeC5qcz85YmIxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVCQSxTQUFTLE1BQU0sQ0FBQyxPQUFPLEVBQUU7O0FBRXJCLFFBQUksRUFBRSxHQUFHLElBQUksQ0FBQztBQUNkLE1BQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQzs7QUFFckIsTUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoQixNQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQzs7QUFFOUIsTUFBRSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7OztBQUdyQixRQUFJLE9BQU8sRUFBRSxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDdkQ7O0FBRUQsTUFBTSxDQUFDLFNBQVMsR0FBRzs7Ozs7Ozs7O0FBU2YsVUFBTSxFQUFFLGdCQUFVLEVBQUUsRUFBRTtBQUNsQixlQUFPLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUM5RDs7Ozs7QUFLRCxTQUFLLEVBQUUsaUJBQVk7QUFDZixlQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ3JDOzs7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QyxHQUFHLENBQUMsQ0FBQztBQUNULFVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ1QsVUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDVCxVQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNULGVBQU8sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO0tBQ2xCOzs7Ozs7O0FBT0QsYUFBUyxFQUFFLG1CQUFVLEVBQUUsRUFBRSxFQUFFLEVBQUU7QUFDekIsZUFBTyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDdEM7Ozs7OztBQU1ELGNBQVUsRUFBRSxvQkFBVSxFQUFFLEVBQUU7QUFDdEIsZUFBTyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDckM7Ozs7OztBQU1ELGNBQVUsRUFBRSxvQkFBVSxFQUFFLEVBQUU7QUFDdEIsZUFBTyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDckM7Ozs7Ozs7Ozs7O0FBV0QsYUFBUyxFQUFFLG1CQUFVLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFOztBQUV6QyxZQUFJLEVBQUUsR0FBRyxJQUFJO1lBQ1QsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ1QsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ1QsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ1QsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ1QsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ1QsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7Ozs7Ozs7QUFPZCxVQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUN6QixVQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUN6QixVQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUN6QixVQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUN6QixVQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDOUIsVUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDOztBQUU5QixlQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztLQUNsQjs7Ozs7OztBQU9ELFVBQU0sRUFBRSxnQkFBVSxDQUFDLEVBQUU7O0FBRWpCLFlBQUksQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFFLEVBQ2pCLE1BQU0sZ0NBQWdDLENBQUM7O0FBRTNDLFlBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQzs7QUFFckIsZUFBTyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDdEQ7Ozs7Ozs7QUFPRCxnQkFBWSxFQUFFLHNCQUFVLENBQUMsRUFBRTs7QUFFdkIsWUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBQ2QsVUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDVixVQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNWLFVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ1YsVUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDVixVQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNWLFVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDOztBQUVWLGVBQU8sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO0tBQ2xCOzs7Ozs7OztBQVFELFdBQU8sRUFBRSxtQkFBWTs7QUFFakIsWUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUU7QUFDbkIsbUJBQU8sSUFBSSxNQUFNLEVBQUUsQ0FBQztTQUN2QixNQUNJLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEVBQUU7QUFDM0Isa0JBQU0sMkJBQTJCLENBQUM7U0FDckMsTUFDSTtBQUNELGdCQUFJLEVBQUUsR0FBRyxJQUFJO2dCQUNULENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztnQkFDUixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7Z0JBQ1IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO2dCQUNSLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztnQkFDUixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7Z0JBQ1IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO2dCQUVSLENBQUMsR0FBRyxJQUFJLE1BQU0sRUFBRTtnQkFDaEIsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQzs7QUFFdkIsYUFBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2IsYUFBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDZCxhQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNkLGFBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNiLGFBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzNCLGFBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7O0FBRTVCLG1CQUFPLENBQUMsQ0FBQztTQUNaO0tBQ0o7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJELGVBQVcsRUFBRSxxQkFBVSxFQUFFLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRTs7QUFFbkMsWUFBSSxFQUFFLEdBQUcsSUFBSTtZQUNULENBQUMsR0FBRyxPQUFPLEdBQUcsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQzs7QUFFckQsU0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMvQixTQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQy9CLFNBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0IsU0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMvQixTQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQy9CLFNBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7O0FBRS9CLGVBQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0tBQ2pCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQkQsbUJBQWUsRUFBRSx5QkFBVSxFQUFFLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRTs7QUFFdkMsWUFBSSxFQUFFLEdBQUcsSUFBSTtZQUNULENBQUMsR0FBRyxPQUFPLEdBQUcsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxNQUFNLEVBQUU7WUFDaEQsRUFBRSxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUU7WUFDbkIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUU7WUFDbkIsUUFBUSxHQUFHLEVBQUUsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxRQUFRLElBQUksQ0FBQztZQUN4RCxVQUFVLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ25FLFVBQVUsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDbkUsTUFBTSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNuRCxNQUFNLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQ2xEOztBQUVMLFNBQUMsQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3BDLFNBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDbkIsU0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7O0FBRXhCLGVBQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0tBQ2pCOzs7Ozs7Ozs7Ozs7Ozs7QUFlRCxhQUFTLEVBQUUsbUJBQVUsS0FBSyxFQUFFOztBQUV4QixZQUFJLEVBQUUsR0FBRyxJQUFJO1lBQ1QsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ1IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ1IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ1IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ1IsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJO1lBQ2hCLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSTtZQUNoQixJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUk7WUFDaEIsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFO1lBRVosU0FBUyxHQUFHLEVBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUM7WUFDOUIsUUFBUSxHQUFHLENBQUM7WUFDWixLQUFLLEdBQUcsRUFBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUM7WUFDcEIsSUFBSSxHQUFHLEVBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFDO1lBRW5CLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7O0FBRTNCLFlBQUksS0FBSyxFQUFFO0FBQ1AsZ0JBQUksQ0FBQyxFQUFFO0FBQ0gsb0JBQUksR0FBRyxFQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUM7QUFDeEMscUJBQUssR0FBRyxFQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sR0FBRyxDQUFDLEVBQUMsQ0FBQzthQUNqQyxNQUNJLElBQUksQ0FBQyxFQUFFO0FBQ1Isd0JBQVEsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDO0FBQ3BCLHFCQUFLLEdBQUcsRUFBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLEdBQUcsQ0FBQyxFQUFDLENBQUM7QUFDOUIsb0JBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUN4QixNQUNJOztBQUNELHFCQUFLLEdBQUcsRUFBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQztBQUNyQixvQkFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO2FBQ3RCO1NBQ0osTUFDSTs7QUFFRCxnQkFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQ1Isb0JBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM1Qix3QkFBUSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDOUMscUJBQUssR0FBRyxFQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sR0FBRyxDQUFDLEVBQUMsQ0FBQztBQUM5QixvQkFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDNUMsTUFDSSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDYixvQkFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzVCLHdCQUFRLEdBQUcsRUFBRSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM1RCxxQkFBSyxHQUFHLEVBQUMsQ0FBQyxFQUFFLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDO0FBQzlCLG9CQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM1QyxNQUNJOztBQUNELHFCQUFLLEdBQUcsRUFBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQzthQUN4QjtTQUNKOztBQUVELGVBQU87QUFDSCxpQkFBSyxFQUFFLEtBQUs7QUFDWixxQkFBUyxFQUFFLFNBQVM7QUFDcEIsb0JBQVEsRUFBRSxRQUFRO0FBQ2xCLGdCQUFJLEVBQUUsSUFBSTtTQUNiLENBQUM7S0FDTDs7Ozs7O0FBTUQsZUFBVyxFQUFFLHVCQUFZO0FBQ3JCLGVBQU8sSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztLQUM1Qzs7Ozs7Ozs7OztBQVVELGdCQUFZLEVBQUUsc0JBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTs7QUFFMUIsWUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDOztBQUVkLGVBQU87QUFDSCxhQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDN0IsYUFBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1NBQ2hDLENBQUM7S0FDTDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQkQsZ0JBQVksRUFBRSxzQkFBVSxNQUFNLEVBQUU7O0FBRTVCLFlBQUksQ0FBQyxHQUFHLENBQUM7WUFBRSxDQUFDO1lBQUUsQ0FBQztZQUNYLFFBQVEsR0FBRyxFQUFFLENBQUM7O0FBRWxCLFlBQUksT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxFQUFFOztBQUUvQixhQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQzs7QUFFbEIsbUJBQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUNWLGlCQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2hELHdCQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzNCO1NBQ0osTUFDSTtBQUNELG1CQUFPLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDdkIsd0JBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzlDO1NBQ0o7O0FBRUQsZUFBTyxRQUFRLENBQUM7S0FDbkI7Ozs7Ozs7Ozs7OztBQVlELHFCQUFpQixFQUFFLDJCQUFVLE1BQU0sRUFBRSxLQUFLLEVBQUU7O0FBRXhDLFlBQUksQ0FBQyxHQUFHLENBQUM7WUFBRSxDQUFDO1lBQ1IsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNO1lBQ2pCLFFBQVEsR0FBRyxLQUFLLEdBQUcsSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7O0FBRWpFLGVBQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUNWLGFBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEQsb0JBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEIsb0JBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDdkI7O0FBRUQsZUFBTyxRQUFRLENBQUM7S0FDbkI7Ozs7Ozs7O0FBUUQsa0JBQWMsRUFBRSx3QkFBVSxPQUFPLEVBQUU7QUFDL0IsWUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBQ2QsZUFBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3pELGVBQU8sRUFBRSxDQUFDO0tBQ2I7Ozs7OztBQU1ELGNBQVUsRUFBRSxzQkFBWTtBQUNwQixZQUFJLEVBQUUsR0FBRyxJQUFJLENBQUM7QUFDZCxlQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFDdEIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUNkLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFDZCxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQ2QsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUNkLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBRTtLQUNuQjs7Ozs7O0FBTUQsZ0JBQVksRUFBRSx3QkFBWTtBQUN0QixlQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0tBQ3pDOzs7OztBQUtELFdBQU8sRUFBRSxtQkFBWTtBQUNqQixlQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDdkM7Ozs7Ozs7QUFPRCxTQUFLLEVBQUUsZUFBVSxTQUFTLEVBQUU7QUFDeEIsWUFBSSxFQUFFLEdBQUcsSUFBSTtZQUNULENBQUMsR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO0FBQ3JCLFNBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNYLFNBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNYLFNBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNYLFNBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNYLFNBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNYLFNBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNYLFlBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDOztBQUV2QyxlQUFPLENBQUMsQ0FBQztLQUNaOzs7Ozs7OztBQVFELFdBQU8sRUFBRSxpQkFBVSxDQUFDLEVBQUU7O0FBRWxCLFlBQUksRUFBRSxHQUFHLElBQUk7WUFDVCxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQzs7QUFFZCxlQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFDcEIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUNaLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFDWixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQ1osQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUNaLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBRTtLQUNqQjs7Ozs7O0FBTUQsV0FBTyxFQUFFLG1CQUFZO0FBQ2pCLFlBQUksRUFBRSxHQUFHLElBQUksQ0FBQztBQUNkLGVBQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQy9DOzs7Ozs7QUFNRCxTQUFLLEVBQUUsaUJBQVk7QUFDZixlQUFPLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsR0FBRyxDQUFDO0tBQzNDOzs7Ozs7QUFNRCxXQUFPLEVBQUUsbUJBQVk7QUFDakIsWUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBQ2QsZUFBTyxXQUFXLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxVQUFVLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxzQkFBc0IsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQztLQUN2STs7Ozs7O0FBTUQsVUFBTSxFQUFFLGtCQUFZO0FBQ2hCLGVBQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztLQUN6Qzs7Ozs7O0FBTUQsWUFBUSxFQUFFLG9CQUFZO0FBQ2xCLGVBQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUM5Qjs7Ozs7Ozs7O0FBU0QsTUFBRSxFQUFFLFlBQVUsRUFBRSxFQUFFLEVBQUUsRUFBRTtBQUNsQixlQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQztLQUNwQzs7Ozs7O0FBTUQsTUFBRSxFQUFFLGNBQVk7QUFDWixZQUFJLEVBQUUsR0FBRyxJQUFJLENBQUM7QUFDZCxZQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQ1YsRUFBRSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoRSxlQUFPLEVBQUUsQ0FBQztLQUNiO0NBQ0osQ0FBQzs7cUJBRWEsTUFBTSIsImZpbGUiOiI1Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKlxyXG4gKiBDb3B5IG9mIHRoZSBkZWxldGVkIHJlcG9zaXRvcnkgZXBpc3RlbWV4L3RyYW5zZm9ybWF0aW9uLW1hdHJpeC1qcy5cclxuICogQWxsIHJpZ2h0cyBhcmUgcmVzZXJ2ZWQgdG8gRXBpc3RlbWV4LlxyXG4gKlxyXG4gKiAyRCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggb2JqZWN0IGluaXRpYWxpemVkIHdpdGggaWRlbnRpdHkgbWF0cml4LlxyXG4gKlxyXG4gKiBUaGUgbWF0cml4IGNhbiBzeW5jaHJvbml6ZSBhIGNhbnZhcyBjb250ZXh0IGJ5IHN1cHBseWluZyB0aGUgY29udGV4dFxyXG4gKiBhcyBhbiBhcmd1bWVudCwgb3IgbGF0ZXIgYXBwbHkgY3VycmVudCBhYnNvbHV0ZSB0cmFuc2Zvcm0gdG8gYW5cclxuICogZXhpc3RpbmcgY29udGV4dC5cclxuICpcclxuICogQWxsIHZhbHVlcyBhcmUgaGFuZGxlZCBhcyBmbG9hdGluZyBwb2ludCB2YWx1ZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBbY29udGV4dF0gLSBPcHRpb25hbCBjb250ZXh0IHRvIHN5bmMgd2l0aCBNYXRyaXhcclxuICogQHByb3Age251bWJlcn0gYSAtIHNjYWxlIHhcclxuICogQHByb3Age251bWJlcn0gYiAtIHNoZWFyIHlcclxuICogQHByb3Age251bWJlcn0gYyAtIHNoZWFyIHhcclxuICogQHByb3Age251bWJlcn0gZCAtIHNjYWxlIHlcclxuICogQHByb3Age251bWJlcn0gZSAtIHRyYW5zbGF0ZSB4XHJcbiAqIEBwcm9wIHtudW1iZXJ9IGYgLSB0cmFuc2xhdGUgeVxyXG4gKiBAcHJvcCB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfG51bGx9IFtjb250ZXh0PW51bGxdIC0gc2V0IG9yIGdldCBjdXJyZW50IGNhbnZhcyBjb250ZXh0XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxuZnVuY3Rpb24gTWF0cml4KGNvbnRleHQpIHtcclxuXHJcbiAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgbWUuX3QgPSBtZS50cmFuc2Zvcm07XHJcblxyXG4gICAgbWUuYSA9IG1lLmQgPSAxO1xyXG4gICAgbWUuYiA9IG1lLmMgPSBtZS5lID0gbWUuZiA9IDA7XHJcblxyXG4gICAgbWUuY29udGV4dCA9IGNvbnRleHQ7XHJcblxyXG4gICAgLy8gcmVzZXQgY2FudmFzIHRyYW5zZm9ybWF0aW9ucyAoaWYgYW55KSB0byBlbmFibGUgMTAwJSBzeW5jLlxyXG4gICAgaWYgKGNvbnRleHQpIGNvbnRleHQuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xyXG59XHJcblxyXG5NYXRyaXgucHJvdG90eXBlID0ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uY2F0ZW5hdGVzIHRyYW5zZm9ybXMgb2YgdGhpcyBtYXRyaXggb250byB0aGUgZ2l2ZW4gY2hpbGQgbWF0cml4IGFuZFxyXG4gICAgICogcmV0dXJucyBhIG5ldyBtYXRyaXguIFRoaXMgaW5zdGFuY2UgaXMgdXNlZCBvbiBsZWZ0IHNpZGUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtNYXRyaXh9IGNtIC0gY2hpbGQgbWF0cml4IHRvIGFwcGx5IGNvbmNhdGVuYXRpb24gdG9cclxuICAgICAqIEByZXR1cm5zIHtNYXRyaXh9XHJcbiAgICAgKi9cclxuICAgIGNvbmNhdDogZnVuY3Rpb24gKGNtKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5fdChjbS5hLCBjbS5iLCBjbS5jLCBjbS5kLCBjbS5lLCBjbS5mKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGbGlwcyB0aGUgaG9yaXpvbnRhbCB2YWx1ZXMuXHJcbiAgICAgKi9cclxuICAgIGZsaXBYOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3QoLTEsIDAsIDAsIDEsIDAsIDApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEZsaXBzIHRoZSB2ZXJ0aWNhbCB2YWx1ZXMuXHJcbiAgICAgKi9cclxuICAgIGZsaXBZOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3QoMSwgMCwgMCwgLTEsIDAsIDApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlZmxlY3RzIGluY29taW5nICh2ZWxvY2l0eSkgdmVjdG9yIG9uIHRoZSBub3JtYWwgd2hpY2ggd2lsbCBiZSB0aGVcclxuICAgICAqIGN1cnJlbnQgdHJhbnNmb3JtZWQgeCBheGlzLiBDYWxsIHdoZW4gYSB0cmlnZ2VyIGNvbmRpdGlvbiBpcyBtZXQuXHJcbiAgICAgKlxyXG4gICAgICogTk9URTogQkVUQSwgc2ltcGxlIGltcGxlbWVudGF0aW9uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHggLSB2ZWN0b3IgZW5kIHBvaW50IGZvciB4IChzdGFydCA9IDApXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geSAtIHZlY3RvciBlbmQgcG9pbnQgZm9yIHkgKHN0YXJ0ID0gMClcclxuICAgICAqIEByZXR1cm5zIHt7eDogbnVtYmVyLCB5OiBudW1iZXJ9fVxyXG4gICAgICovXHJcbiAgICByZWZsZWN0VmVjdG9yOiBmdW5jdGlvbiAoeCwgeSkge1xyXG5cclxuICAgICAgICB2YXIgdiA9IHRoaXMuYXBwbHlUb1BvaW50KDAsIDEpLFxyXG4gICAgICAgICAgICBkID0gMiAqICh2LnggKiB4ICsgdi55ICogeSk7XHJcblxyXG4gICAgICAgIHggLT0gZCAqIHYueDtcclxuICAgICAgICB5IC09IGQgKiB2Lnk7XHJcblxyXG4gICAgICAgIHJldHVybiB7eDogeCwgeTogeX07XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2hvcnQtaGFuZCB0byByZXNldCBjdXJyZW50IG1hdHJpeCB0byBhbiBpZGVudGl0eSBtYXRyaXguXHJcbiAgICAgKi9cclxuICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJvdGF0ZXMgY3VycmVudCBtYXRyaXggYWNjdW11bGF0aXZlIGJ5IGFuZ2xlLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlIC0gYW5nbGUgaW4gcmFkaWFuc1xyXG4gICAgICovXHJcbiAgICByb3RhdGU6IGZ1bmN0aW9uIChhbmdsZSkge1xyXG4gICAgICAgIHZhciBjb3MgPSBNYXRoLmNvcyhhbmdsZSksXHJcbiAgICAgICAgICAgIHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdChjb3MsIHNpbiwgLXNpbiwgY29zLCAwLCAwKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb252ZXJ0cyBhIHZlY3RvciBnaXZlbiBhcyB4IGFuZCB5IHRvIGFuZ2xlLCBhbmRcclxuICAgICAqIHJvdGF0ZXMgKGFjY3VtdWxhdGl2ZSkuXHJcbiAgICAgKiBAcGFyYW0geFxyXG4gICAgICogQHBhcmFtIHlcclxuICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICovXHJcbiAgICByb3RhdGVGcm9tVmVjdG9yOiBmdW5jdGlvbiAoeCwgeSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJvdGF0ZShNYXRoLmF0YW4yKHksIHgpKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgbWV0aG9kIHRvIG1ha2UgYSByb3RhdGlvbiBiYXNlZCBvbiBhbiBhbmdsZSBpbiBkZWdyZWVzLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlIC0gYW5nbGUgaW4gZGVncmVlc1xyXG4gICAgICovXHJcbiAgICByb3RhdGVEZWc6IGZ1bmN0aW9uIChhbmdsZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJvdGF0ZShhbmdsZSAqIE1hdGguUEkgLyAxODApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNjYWxlcyBjdXJyZW50IG1hdHJpeCB1bmlmb3JtbHkgYW5kIGFjY3VtdWxhdGl2ZS5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmIC0gc2NhbGUgZmFjdG9yIGZvciBib3RoIHggYW5kIHkgKDEgZG9lcyBub3RoaW5nKVxyXG4gICAgICovXHJcbiAgICBzY2FsZVU6IGZ1bmN0aW9uIChmKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3QoZiwgMCwgMCwgZiwgMCwgMCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2NhbGVzIGN1cnJlbnQgbWF0cml4IGFjY3VtdWxhdGl2ZS5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzeCAtIHNjYWxlIGZhY3RvciB4ICgxIGRvZXMgbm90aGluZylcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzeSAtIHNjYWxlIGZhY3RvciB5ICgxIGRvZXMgbm90aGluZylcclxuICAgICAqL1xyXG4gICAgc2NhbGU6IGZ1bmN0aW9uIChzeCwgc3kpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdChzeCwgMCwgMCwgc3ksIDAsIDApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNjYWxlcyBjdXJyZW50IG1hdHJpeCBvbiB4IGF4aXMgYWNjdW11bGF0aXZlLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN4IC0gc2NhbGUgZmFjdG9yIHggKDEgZG9lcyBub3RoaW5nKVxyXG4gICAgICovXHJcbiAgICBzY2FsZVg6IGZ1bmN0aW9uIChzeCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90KHN4LCAwLCAwLCAxLCAwLCAwKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTY2FsZXMgY3VycmVudCBtYXRyaXggb24geSBheGlzIGFjY3VtdWxhdGl2ZS5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzeSAtIHNjYWxlIGZhY3RvciB5ICgxIGRvZXMgbm90aGluZylcclxuICAgICAqL1xyXG4gICAgc2NhbGVZOiBmdW5jdGlvbiAoc3kpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdCgxLCAwLCAwLCBzeSwgMCwgMCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXBwbHkgc2hlYXIgdG8gdGhlIGN1cnJlbnQgbWF0cml4IGFjY3VtdWxhdGl2ZS5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzeCAtIGFtb3VudCBvZiBzaGVhciBmb3IgeFxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN5IC0gYW1vdW50IG9mIHNoZWFyIGZvciB5XHJcbiAgICAgKi9cclxuICAgIHNoZWFyOiBmdW5jdGlvbiAoc3gsIHN5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3QoMSwgc3ksIHN4LCAxLCAwLCAwKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBseSBzaGVhciBmb3IgeCB0byB0aGUgY3VycmVudCBtYXRyaXggYWNjdW11bGF0aXZlLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN4IC0gYW1vdW50IG9mIHNoZWFyIGZvciB4XHJcbiAgICAgKi9cclxuICAgIHNoZWFyWDogZnVuY3Rpb24gKHN4KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3QoMSwgMCwgc3gsIDEsIDAsIDApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFwcGx5IHNoZWFyIGZvciB5IHRvIHRoZSBjdXJyZW50IG1hdHJpeCBhY2N1bXVsYXRpdmUuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3kgLSBhbW91bnQgb2Ygc2hlYXIgZm9yIHlcclxuICAgICAqL1xyXG4gICAgc2hlYXJZOiBmdW5jdGlvbiAoc3kpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdCgxLCBzeSwgMCwgMSwgMCwgMCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXBwbHkgc2tldyB0byB0aGUgY3VycmVudCBtYXRyaXggYWNjdW11bGF0aXZlLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGF4IC0gYW5nbGUgb2Ygc2tldyBmb3IgeFxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGF5IC0gYW5nbGUgb2Ygc2tldyBmb3IgeVxyXG4gICAgICovXHJcbiAgICBza2V3OiBmdW5jdGlvbiAoYXgsIGF5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2hlYXIoTWF0aC50YW4oYXgpLCBNYXRoLnRhbihheSkpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFwcGx5IHNrZXcgZm9yIHggdG8gdGhlIGN1cnJlbnQgbWF0cml4IGFjY3VtdWxhdGl2ZS5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBheCAtIGFuZ2xlIG9mIHNrZXcgZm9yIHhcclxuICAgICAqL1xyXG4gICAgc2tld1g6IGZ1bmN0aW9uIChheCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNoZWFyWChNYXRoLnRhbihheCkpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFwcGx5IHNrZXcgZm9yIHkgdG8gdGhlIGN1cnJlbnQgbWF0cml4IGFjY3VtdWxhdGl2ZS5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBheSAtIGFuZ2xlIG9mIHNrZXcgZm9yIHlcclxuICAgICAqL1xyXG4gICAgc2tld1k6IGZ1bmN0aW9uIChheSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNoZWFyWShNYXRoLnRhbihheSkpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCBjdXJyZW50IG1hdHJpeCB0byBuZXcgYWJzb2x1dGUgbWF0cml4LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGEgLSBzY2FsZSB4XHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYiAtIHNoZWFyIHlcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjIC0gc2hlYXIgeFxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGQgLSBzY2FsZSB5XHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZSAtIHRyYW5zbGF0ZSB4XHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZiAtIHRyYW5zbGF0ZSB5XHJcbiAgICAgKi9cclxuICAgIHNldFRyYW5zZm9ybTogZnVuY3Rpb24gKGEsIGIsIGMsIGQsIGUsIGYpIHtcclxuICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgICAgIG1lLmEgPSBhO1xyXG4gICAgICAgIG1lLmIgPSBiO1xyXG4gICAgICAgIG1lLmMgPSBjO1xyXG4gICAgICAgIG1lLmQgPSBkO1xyXG4gICAgICAgIG1lLmUgPSBlO1xyXG4gICAgICAgIG1lLmYgPSBmO1xyXG4gICAgICAgIHJldHVybiBtZS5feCgpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRyYW5zbGF0ZSBjdXJyZW50IG1hdHJpeCBhY2N1bXVsYXRpdmUuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdHggLSB0cmFuc2xhdGlvbiBmb3IgeFxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHR5IC0gdHJhbnNsYXRpb24gZm9yIHlcclxuICAgICAqL1xyXG4gICAgdHJhbnNsYXRlOiBmdW5jdGlvbiAodHgsIHR5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3QoMSwgMCwgMCwgMSwgdHgsIHR5KTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmFuc2xhdGUgY3VycmVudCBtYXRyaXggb24geCBheGlzIGFjY3VtdWxhdGl2ZS5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0eCAtIHRyYW5zbGF0aW9uIGZvciB4XHJcbiAgICAgKi9cclxuICAgIHRyYW5zbGF0ZVg6IGZ1bmN0aW9uICh0eCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90KDEsIDAsIDAsIDEsIHR4LCAwKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmFuc2xhdGUgY3VycmVudCBtYXRyaXggb24geSBheGlzIGFjY3VtdWxhdGl2ZS5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0eSAtIHRyYW5zbGF0aW9uIGZvciB5XHJcbiAgICAgKi9cclxuICAgIHRyYW5zbGF0ZVk6IGZ1bmN0aW9uICh0eSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90KDEsIDAsIDAsIDEsIDAsIHR5KTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNdWx0aXBsaWVzIGN1cnJlbnQgbWF0cml4IHdpdGggbmV3IG1hdHJpeCB2YWx1ZXMuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYTIgLSBzY2FsZSB4XHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYjIgLSBzaGVhciB5XHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYzIgLSBzaGVhciB4XHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZDIgLSBzY2FsZSB5XHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZTIgLSB0cmFuc2xhdGUgeFxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGYyIC0gdHJhbnNsYXRlIHlcclxuICAgICAqL1xyXG4gICAgdHJhbnNmb3JtOiBmdW5jdGlvbiAoYTIsIGIyLCBjMiwgZDIsIGUyLCBmMikge1xyXG5cclxuICAgICAgICB2YXIgbWUgPSB0aGlzLFxyXG4gICAgICAgICAgICBhMSA9IG1lLmEsXHJcbiAgICAgICAgICAgIGIxID0gbWUuYixcclxuICAgICAgICAgICAgYzEgPSBtZS5jLFxyXG4gICAgICAgICAgICBkMSA9IG1lLmQsXHJcbiAgICAgICAgICAgIGUxID0gbWUuZSxcclxuICAgICAgICAgICAgZjEgPSBtZS5mO1xyXG5cclxuICAgICAgICAvKiBtYXRyaXggb3JkZXIgKGNhbnZhcyBjb21wYXRpYmxlKTpcclxuICAgICAgICAgKiBhY2VcclxuICAgICAgICAgKiBiZGZcclxuICAgICAgICAgKiAwMDFcclxuICAgICAgICAgKi9cclxuICAgICAgICBtZS5hID0gYTEgKiBhMiArIGMxICogYjI7XHJcbiAgICAgICAgbWUuYiA9IGIxICogYTIgKyBkMSAqIGIyO1xyXG4gICAgICAgIG1lLmMgPSBhMSAqIGMyICsgYzEgKiBkMjtcclxuICAgICAgICBtZS5kID0gYjEgKiBjMiArIGQxICogZDI7XHJcbiAgICAgICAgbWUuZSA9IGExICogZTIgKyBjMSAqIGYyICsgZTE7XHJcbiAgICAgICAgbWUuZiA9IGIxICogZTIgKyBkMSAqIGYyICsgZjE7XHJcblxyXG4gICAgICAgIHJldHVybiBtZS5feCgpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIERpdmlkZSB0aGlzIG1hdHJpeCBvbiBpbnB1dCBtYXRyaXggd2hpY2ggbXVzdCBiZSBpbnZlcnRpYmxlLlxyXG4gICAgICogQHBhcmFtIHtNYXRyaXh9IG0gLSBtYXRyaXggdG8gZGl2aWRlIG9uIChkaXZpc29yKVxyXG4gICAgICogQHJldHVybnMge01hdHJpeH1cclxuICAgICAqL1xyXG4gICAgZGl2aWRlOiBmdW5jdGlvbiAobSkge1xyXG5cclxuICAgICAgICBpZiAoIW0uaXNJbnZlcnRpYmxlKCkpXHJcbiAgICAgICAgICAgIHRocm93IFwiSW5wdXQgbWF0cml4IGlzIG5vdCBpbnZlcnRpYmxlXCI7XHJcblxyXG4gICAgICAgIHZhciBpbSA9IG0uaW52ZXJzZSgpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fdChpbS5hLCBpbS5iLCBpbS5jLCBpbS5kLCBpbS5lLCBpbS5mKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEaXZpZGUgY3VycmVudCBtYXRyaXggb24gc2NhbGFyIHZhbHVlICE9IDAuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZCAtIGRpdmlzb3IgKGNhbiBub3QgYmUgMClcclxuICAgICAqIEByZXR1cm5zIHtNYXRyaXh9XHJcbiAgICAgKi9cclxuICAgIGRpdmlkZVNjYWxhcjogZnVuY3Rpb24gKGQpIHtcclxuXHJcbiAgICAgICAgdmFyIG1lID0gdGhpcztcclxuICAgICAgICBtZS5hIC89IGQ7XHJcbiAgICAgICAgbWUuYiAvPSBkO1xyXG4gICAgICAgIG1lLmMgLz0gZDtcclxuICAgICAgICBtZS5kIC89IGQ7XHJcbiAgICAgICAgbWUuZSAvPSBkO1xyXG4gICAgICAgIG1lLmYgLz0gZDtcclxuXHJcbiAgICAgICAgcmV0dXJuIG1lLl94KCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IGFuIGludmVyc2UgbWF0cml4IG9mIGN1cnJlbnQgbWF0cml4LiBUaGUgbWV0aG9kIHJldHVybnMgYSBuZXdcclxuICAgICAqIG1hdHJpeCB3aXRoIHZhbHVlcyB5b3UgbmVlZCB0byB1c2UgdG8gZ2V0IHRvIGFuIGlkZW50aXR5IG1hdHJpeC5cclxuICAgICAqIENvbnRleHQgZnJvbSBwYXJlbnQgbWF0cml4IGlzIG5vdCBhcHBsaWVkIHRvIHRoZSByZXR1cm5lZCBtYXRyaXguXHJcbiAgICAgKiBAcmV0dXJucyB7TWF0cml4fVxyXG4gICAgICovXHJcbiAgICBpbnZlcnNlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzSWRlbnRpdHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IE1hdHJpeCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICghdGhpcy5pc0ludmVydGlibGUoKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBcIk1hdHJpeCBpcyBub3QgaW52ZXJ0aWJsZS5cIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBtZSA9IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBhID0gbWUuYSxcclxuICAgICAgICAgICAgICAgIGIgPSBtZS5iLFxyXG4gICAgICAgICAgICAgICAgYyA9IG1lLmMsXHJcbiAgICAgICAgICAgICAgICBkID0gbWUuZCxcclxuICAgICAgICAgICAgICAgIGUgPSBtZS5lLFxyXG4gICAgICAgICAgICAgICAgZiA9IG1lLmYsXHJcblxyXG4gICAgICAgICAgICAgICAgbSA9IG5ldyBNYXRyaXgoKSxcclxuICAgICAgICAgICAgICAgIGR0ID0gYSAqIGQgLSBiICogYztcdC8vIGRldGVybWluYW50KCksIHNraXAgRFJZIGhlcmUuLi5cclxuXHJcbiAgICAgICAgICAgIG0uYSA9IGQgLyBkdDtcclxuICAgICAgICAgICAgbS5iID0gLWIgLyBkdDtcclxuICAgICAgICAgICAgbS5jID0gLWMgLyBkdDtcclxuICAgICAgICAgICAgbS5kID0gYSAvIGR0O1xyXG4gICAgICAgICAgICBtLmUgPSAoYyAqIGYgLSBkICogZSkgLyBkdDtcclxuICAgICAgICAgICAgbS5mID0gLShhICogZiAtIGIgKiBlKSAvIGR0O1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG07XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEludGVycG9sYXRlIHRoaXMgbWF0cml4IHdpdGggYW5vdGhlciBhbmQgcHJvZHVjZSBhIG5ldyBtYXRyaXguXHJcbiAgICAgKiB0IGlzIGEgdmFsdWUgaW4gdGhlIHJhbmdlIFswLjAsIDEuMF0gd2hlcmUgMCBpcyB0aGlzIGluc3RhbmNlIGFuZFxyXG4gICAgICogMSBpcyBlcXVhbCB0byB0aGUgc2Vjb25kIG1hdHJpeC4gVGhlIHQgdmFsdWUgaXMgbm90IGNvbnN0cmFpbmVkLlxyXG4gICAgICpcclxuICAgICAqIENvbnRleHQgZnJvbSBwYXJlbnQgbWF0cml4IGlzIG5vdCBhcHBsaWVkIHRvIHRoZSByZXR1cm5lZCBtYXRyaXguXHJcbiAgICAgKlxyXG4gICAgICogTm90ZTogdGhpcyBpbnRlcnBvbGF0aW9uIGlzIG5haXZlLiBGb3IgYW5pbWF0aW9uIHVzZSB0aGVcclxuICAgICAqIGludHJwb2xhdGVBbmltKCkgbWV0aG9kIGluc3RlYWQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtNYXRyaXh9IG0yIC0gdGhlIG1hdHJpeCB0byBpbnRlcnBvbGF0ZSB3aXRoLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHQgLSBpbnRlcnBvbGF0aW9uIFswLjAsIDEuMF1cclxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBbY29udGV4dF0gLSBvcHRpb25hbCBjb250ZXh0IHRvIGFmZmVjdFxyXG4gICAgICogQHJldHVybnMge01hdHJpeH0gLSBuZXcgaW5zdGFuY2Ugd2l0aCB0aGUgaW50ZXJwb2xhdGVkIHJlc3VsdFxyXG4gICAgICovXHJcbiAgICBpbnRlcnBvbGF0ZTogZnVuY3Rpb24gKG0yLCB0LCBjb250ZXh0KSB7XHJcblxyXG4gICAgICAgIHZhciBtZSA9IHRoaXMsXHJcbiAgICAgICAgICAgIG0gPSBjb250ZXh0ID8gbmV3IE1hdHJpeChjb250ZXh0KSA6IG5ldyBNYXRyaXgoKTtcclxuXHJcbiAgICAgICAgbS5hID0gbWUuYSArIChtMi5hIC0gbWUuYSkgKiB0O1xyXG4gICAgICAgIG0uYiA9IG1lLmIgKyAobTIuYiAtIG1lLmIpICogdDtcclxuICAgICAgICBtLmMgPSBtZS5jICsgKG0yLmMgLSBtZS5jKSAqIHQ7XHJcbiAgICAgICAgbS5kID0gbWUuZCArIChtMi5kIC0gbWUuZCkgKiB0O1xyXG4gICAgICAgIG0uZSA9IG1lLmUgKyAobTIuZSAtIG1lLmUpICogdDtcclxuICAgICAgICBtLmYgPSBtZS5mICsgKG0yLmYgLSBtZS5mKSAqIHQ7XHJcblxyXG4gICAgICAgIHJldHVybiBtLl94KCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW50ZXJwb2xhdGUgdGhpcyBtYXRyaXggd2l0aCBhbm90aGVyIGFuZCBwcm9kdWNlIGEgbmV3IG1hdHJpeC5cclxuICAgICAqIHQgaXMgYSB2YWx1ZSBpbiB0aGUgcmFuZ2UgWzAuMCwgMS4wXSB3aGVyZSAwIGlzIHRoaXMgaW5zdGFuY2UgYW5kXHJcbiAgICAgKiAxIGlzIGVxdWFsIHRvIHRoZSBzZWNvbmQgbWF0cml4LiBUaGUgdCB2YWx1ZSBpcyBub3QgY29uc3RyYWluZWQuXHJcbiAgICAgKlxyXG4gICAgICogQ29udGV4dCBmcm9tIHBhcmVudCBtYXRyaXggaXMgbm90IGFwcGxpZWQgdG8gdGhlIHJldHVybmVkIG1hdHJpeC5cclxuICAgICAqXHJcbiAgICAgKiBOb3RlOiB0aGlzIGludGVycG9sYXRpb24gbWV0aG9kIHVzZXMgZGVjb21wb3NpdGlvbiB3aGljaCBtYWtlc1xyXG4gICAgICogaXQgc3VpdGFibGUgZm9yIGFuaW1hdGlvbnMgKGluIHBhcnRpY3VsYXIgd2hlcmUgcm90YXRpb24gdGFrZXNcclxuICAgICAqIHBsYWNlcykuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtNYXRyaXh9IG0yIC0gdGhlIG1hdHJpeCB0byBpbnRlcnBvbGF0ZSB3aXRoLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHQgLSBpbnRlcnBvbGF0aW9uIFswLjAsIDEuMF1cclxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBbY29udGV4dF0gLSBvcHRpb25hbCBjb250ZXh0IHRvIGFmZmVjdFxyXG4gICAgICogQHJldHVybnMge01hdHJpeH0gLSBuZXcgaW5zdGFuY2Ugd2l0aCB0aGUgaW50ZXJwb2xhdGVkIHJlc3VsdFxyXG4gICAgICovXHJcbiAgICBpbnRlcnBvbGF0ZUFuaW06IGZ1bmN0aW9uIChtMiwgdCwgY29udGV4dCkge1xyXG5cclxuICAgICAgICB2YXIgbWUgPSB0aGlzLFxyXG4gICAgICAgICAgICBtID0gY29udGV4dCA/IG5ldyBNYXRyaXgoY29udGV4dCkgOiBuZXcgTWF0cml4KCksXHJcbiAgICAgICAgICAgIGQxID0gbWUuZGVjb21wb3NlKCksXHJcbiAgICAgICAgICAgIGQyID0gbTIuZGVjb21wb3NlKCksXHJcbiAgICAgICAgICAgIHJvdGF0aW9uID0gZDEucm90YXRpb24gKyAoZDIucm90YXRpb24gLSBkMS5yb3RhdGlvbikgKiB0LFxyXG4gICAgICAgICAgICB0cmFuc2xhdGVYID0gZDEudHJhbnNsYXRlLnggKyAoZDIudHJhbnNsYXRlLnggLSBkMS50cmFuc2xhdGUueCkgKiB0LFxyXG4gICAgICAgICAgICB0cmFuc2xhdGVZID0gZDEudHJhbnNsYXRlLnkgKyAoZDIudHJhbnNsYXRlLnkgLSBkMS50cmFuc2xhdGUueSkgKiB0LFxyXG4gICAgICAgICAgICBzY2FsZVggPSBkMS5zY2FsZS54ICsgKGQyLnNjYWxlLnggLSBkMS5zY2FsZS54KSAqIHQsXHJcbiAgICAgICAgICAgIHNjYWxlWSA9IGQxLnNjYWxlLnkgKyAoZDIuc2NhbGUueSAtIGQxLnNjYWxlLnkpICogdFxyXG4gICAgICAgICAgICA7XHJcblxyXG4gICAgICAgIG0udHJhbnNsYXRlKHRyYW5zbGF0ZVgsIHRyYW5zbGF0ZVkpO1xyXG4gICAgICAgIG0ucm90YXRlKHJvdGF0aW9uKTtcclxuICAgICAgICBtLnNjYWxlKHNjYWxlWCwgc2NhbGVZKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG0uX3goKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZWNvbXBvc2UgdGhlIGN1cnJlbnQgbWF0cml4IGludG8gc2ltcGxlIHRyYW5zZm9ybXMgdXNpbmcgZWl0aGVyXHJcbiAgICAgKiBRUiAoZGVmYXVsdCkgb3IgTFUgZGVjb21wb3NpdGlvbi4gQ29kZSBhZGFwdGVkIGZyb21cclxuICAgICAqIGh0dHA6Ly93d3cubWF0aHMtaW5mb3JtYXRpcXVlLWpldXguY29tL2Jsb2cvZnJlZGVyaWMvP3Bvc3QvMjAxMy8xMi8wMS9EZWNvbXBvc2l0aW9uLW9mLTJELXRyYW5zZm9ybS1tYXRyaWNlc1xyXG4gICAgICpcclxuICAgICAqIFRoZSByZXN1bHQgbXVzdCBiZSBhcHBsaWVkIGluIHRoZSBmb2xsb3dpbmcgb3JkZXIgdG8gcmVwcm9kdWNlIHRoZSBjdXJyZW50IG1hdHJpeDpcclxuICAgICAqXHJcbiAgICAgKiAgICAgUVI6IHRyYW5zbGF0ZSAtPiByb3RhdGUgLT4gc2NhbGUgLT4gc2tld1hcclxuICAgICAqICAgICBMVTogdHJhbnNsYXRlIC0+IHNrZXdZICAtPiBzY2FsZSAtPiBza2V3WFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3VzZUxVPWZhbHNlXSAtIHNldCB0byB0cnVlIHRvIHVzZSBMVSByYXRoZXIgdGhhbiBRUiBhbGdvcml0aG1cclxuICAgICAqIEByZXR1cm5zIHsqfSAtIGFuIG9iamVjdCBjb250YWluaW5nIGN1cnJlbnQgZGVjb21wb3NlZCB2YWx1ZXMgKHJvdGF0ZSwgc2tldywgc2NhbGUsIHRyYW5zbGF0ZSlcclxuICAgICAqL1xyXG4gICAgZGVjb21wb3NlOiBmdW5jdGlvbiAodXNlTFUpIHtcclxuXHJcbiAgICAgICAgdmFyIG1lID0gdGhpcyxcclxuICAgICAgICAgICAgYSA9IG1lLmEsXHJcbiAgICAgICAgICAgIGIgPSBtZS5iLFxyXG4gICAgICAgICAgICBjID0gbWUuYyxcclxuICAgICAgICAgICAgZCA9IG1lLmQsXHJcbiAgICAgICAgICAgIGFjb3MgPSBNYXRoLmFjb3MsXHJcbiAgICAgICAgICAgIGF0YW4gPSBNYXRoLmF0YW4sXHJcbiAgICAgICAgICAgIHNxcnQgPSBNYXRoLnNxcnQsXHJcbiAgICAgICAgICAgIHBpID0gTWF0aC5QSSxcclxuXHJcbiAgICAgICAgICAgIHRyYW5zbGF0ZSA9IHt4OiBtZS5lLCB5OiBtZS5mfSxcclxuICAgICAgICAgICAgcm90YXRpb24gPSAwLFxyXG4gICAgICAgICAgICBzY2FsZSA9IHt4OiAxLCB5OiAxfSxcclxuICAgICAgICAgICAgc2tldyA9IHt4OiAwLCB5OiAwfSxcclxuXHJcbiAgICAgICAgICAgIGRldGVybSA9IGEgKiBkIC0gYiAqIGM7XHQvLyBkZXRlcm1pbmFudCgpLCBza2lwIERSWSBoZXJlLi4uXHJcblxyXG4gICAgICAgIGlmICh1c2VMVSkge1xyXG4gICAgICAgICAgICBpZiAoYSkge1xyXG4gICAgICAgICAgICAgICAgc2tldyA9IHt4OiBhdGFuKGMgLyBhKSwgeTogYXRhbihiIC8gYSl9O1xyXG4gICAgICAgICAgICAgICAgc2NhbGUgPSB7eDogYSwgeTogZGV0ZXJtIC8gYX07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoYikge1xyXG4gICAgICAgICAgICAgICAgcm90YXRpb24gPSBwaSAqIDAuNTtcclxuICAgICAgICAgICAgICAgIHNjYWxlID0ge3g6IGIsIHk6IGRldGVybSAvIGJ9O1xyXG4gICAgICAgICAgICAgICAgc2tldy54ID0gYXRhbihkIC8gYik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7IC8vIGEgPSBiID0gMFxyXG4gICAgICAgICAgICAgICAgc2NhbGUgPSB7eDogYywgeTogZH07XHJcbiAgICAgICAgICAgICAgICBza2V3LnggPSBwaSAqIDAuMjU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEFwcGx5IHRoZSBRUi1saWtlIGRlY29tcG9zaXRpb24uXHJcbiAgICAgICAgICAgIGlmIChhIHx8IGIpIHtcclxuICAgICAgICAgICAgICAgIHZhciByID0gc3FydChhICogYSArIGIgKiBiKTtcclxuICAgICAgICAgICAgICAgIHJvdGF0aW9uID0gYiA+IDAgPyBhY29zKGEgLyByKSA6IC1hY29zKGEgLyByKTtcclxuICAgICAgICAgICAgICAgIHNjYWxlID0ge3g6IHIsIHk6IGRldGVybSAvIHJ9O1xyXG4gICAgICAgICAgICAgICAgc2tldy54ID0gYXRhbigoYSAqIGMgKyBiICogZCkgLyAociAqIHIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjIHx8IGQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzID0gc3FydChjICogYyArIGQgKiBkKTtcclxuICAgICAgICAgICAgICAgIHJvdGF0aW9uID0gcGkgKiAwLjUgLSAoZCA+IDAgPyBhY29zKC1jIC8gcykgOiAtYWNvcyhjIC8gcykpO1xyXG4gICAgICAgICAgICAgICAgc2NhbGUgPSB7eDogZGV0ZXJtIC8gcywgeTogc307XHJcbiAgICAgICAgICAgICAgICBza2V3LnkgPSBhdGFuKChhICogYyArIGIgKiBkKSAvIChzICogcykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgeyAvLyBhID0gYiA9IGMgPSBkID0gMFxyXG4gICAgICAgICAgICAgICAgc2NhbGUgPSB7eDogMCwgeTogMH07XHRcdC8vID0gaW52YWxpZCBtYXRyaXhcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc2NhbGU6IHNjYWxlLFxyXG4gICAgICAgICAgICB0cmFuc2xhdGU6IHRyYW5zbGF0ZSxcclxuICAgICAgICAgICAgcm90YXRpb246IHJvdGF0aW9uLFxyXG4gICAgICAgICAgICBza2V3OiBza2V3XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBkZXRlcm1pbmFudCBvZiB0aGUgY3VycmVudCBtYXRyaXguXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gICAgICovXHJcbiAgICBkZXRlcm1pbmFudDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmEgKiB0aGlzLmQgLSB0aGlzLmIgKiB0aGlzLmM7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXBwbHkgY3VycmVudCBtYXRyaXggdG8geCBhbmQgeSBwb2ludC5cclxuICAgICAqIFJldHVybnMgYSBwb2ludCBvYmplY3QuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHggLSB2YWx1ZSBmb3IgeFxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHkgLSB2YWx1ZSBmb3IgeVxyXG4gICAgICogQHJldHVybnMge3t4OiBudW1iZXIsIHk6IG51bWJlcn19IEEgbmV3IHRyYW5zZm9ybWVkIHBvaW50IG9iamVjdFxyXG4gICAgICovXHJcbiAgICBhcHBseVRvUG9pbnQ6IGZ1bmN0aW9uICh4LCB5KSB7XHJcblxyXG4gICAgICAgIHZhciBtZSA9IHRoaXM7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHg6IHggKiBtZS5hICsgeSAqIG1lLmMgKyBtZS5lLFxyXG4gICAgICAgICAgICB5OiB4ICogbWUuYiArIHkgKiBtZS5kICsgbWUuZlxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXBwbHkgY3VycmVudCBtYXRyaXggdG8gYXJyYXkgd2l0aCBwb2ludCBvYmplY3RzIG9yIHBvaW50IHBhaXJzLlxyXG4gICAgICogUmV0dXJucyBhIG5ldyBhcnJheSB3aXRoIHBvaW50cyBpbiB0aGUgc2FtZSBmb3JtYXQgYXMgdGhlIGlucHV0IGFycmF5LlxyXG4gICAgICpcclxuICAgICAqIEEgcG9pbnQgb2JqZWN0IGlzIGFuIG9iamVjdCBsaXRlcmFsOlxyXG4gICAgICpcclxuICAgICAqIHt4OiB4LCB5OiB5fVxyXG4gICAgICpcclxuICAgICAqIHNvIGFuIGFycmF5IHdvdWxkIGNvbnRhaW4gZWl0aGVyOlxyXG4gICAgICpcclxuICAgICAqIFt7eDogeDEsIHk6IHkxfSwge3g6IHgyLCB5OiB5Mn0sIC4uLiB7eDogeG4sIHk6IHlufV1cclxuICAgICAqXHJcbiAgICAgKiBvclxyXG4gICAgICogW3gxLCB5MSwgeDIsIHkyLCAuLi4geG4sIHluXVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBvaW50cyAtIGFycmF5IHdpdGggcG9pbnQgb2JqZWN0cyBvciBwYWlyc1xyXG4gICAgICogQHJldHVybnMge0FycmF5fSBBIG5ldyBhcnJheSB3aXRoIHRyYW5zZm9ybWVkIHBvaW50c1xyXG4gICAgICovXHJcbiAgICBhcHBseVRvQXJyYXk6IGZ1bmN0aW9uIChwb2ludHMpIHtcclxuXHJcbiAgICAgICAgdmFyIGkgPSAwLCBwLCBsLFxyXG4gICAgICAgICAgICBteFBvaW50cyA9IFtdO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHBvaW50c1swXSA9PT0gJ251bWJlcicpIHtcclxuXHJcbiAgICAgICAgICAgIGwgPSBwb2ludHMubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgd2hpbGUgKGkgPCBsKSB7XHJcbiAgICAgICAgICAgICAgICBwID0gdGhpcy5hcHBseVRvUG9pbnQocG9pbnRzW2krK10sIHBvaW50c1tpKytdKTtcclxuICAgICAgICAgICAgICAgIG14UG9pbnRzLnB1c2gocC54LCBwLnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKDsgcCA9IHBvaW50c1tpXTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBteFBvaW50cy5wdXNoKHRoaXMuYXBwbHlUb1BvaW50KHAueCwgcC55KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBteFBvaW50cztcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBseSBjdXJyZW50IG1hdHJpeCB0byBhIHR5cGVkIGFycmF5IHdpdGggcG9pbnQgcGFpcnMuIEFsdGhvdWdoXHJcbiAgICAgKiB0aGUgaW5wdXQgYXJyYXkgbWF5IGJlIGFuIG9yZGluYXJ5IGFycmF5LCB0aGlzIG1ldGhvZCBpcyBpbnRlbmRlZFxyXG4gICAgICogZm9yIG1vcmUgcGVyZm9ybWFudCB1c2Ugd2hlcmUgdHlwZWQgYXJyYXlzIGFyZSB1c2VkLiBUaGUgcmV0dXJuZWRcclxuICAgICAqIGFycmF5IGlzIHJlZ2FyZGxlc3MgYWx3YXlzIHJldHVybmVkIGFzIGEgRmxvYXQzMkFycmF5LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7Kn0gcG9pbnRzIC0gKHR5cGVkKSBhcnJheSB3aXRoIHBvaW50IHBhaXJzXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFt1c2U2ND1mYWxzZV0gLSB1c2UgRmxvYXQ2NEFycmF5IGluc3RlYWQgb2YgRmxvYXQzMkFycmF5XHJcbiAgICAgKiBAcmV0dXJucyB7Kn0gQSBuZXcgdHlwZWQgYXJyYXkgd2l0aCB0cmFuc2Zvcm1lZCBwb2ludHNcclxuICAgICAqL1xyXG4gICAgYXBwbHlUb1R5cGVkQXJyYXk6IGZ1bmN0aW9uIChwb2ludHMsIHVzZTY0KSB7XHJcblxyXG4gICAgICAgIHZhciBpID0gMCwgcCxcclxuICAgICAgICAgICAgbCA9IHBvaW50cy5sZW5ndGgsXHJcbiAgICAgICAgICAgIG14UG9pbnRzID0gdXNlNjQgPyBuZXcgRmxvYXQ2NEFycmF5KGwpIDogbmV3IEZsb2F0MzJBcnJheShsKTtcclxuXHJcbiAgICAgICAgd2hpbGUgKGkgPCBsKSB7XHJcbiAgICAgICAgICAgIHAgPSB0aGlzLmFwcGx5VG9Qb2ludChwb2ludHNbaV0sIHBvaW50c1tpICsgMV0pO1xyXG4gICAgICAgICAgICBteFBvaW50c1tpKytdID0gcC54O1xyXG4gICAgICAgICAgICBteFBvaW50c1tpKytdID0gcC55O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG14UG9pbnRzO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFwcGx5IHRvIGFueSBjYW52YXMgMkQgY29udGV4dCBvYmplY3QuIFRoaXMgZG9lcyBub3QgYWZmZWN0IHRoZVxyXG4gICAgICogY29udGV4dCB0aGF0IG9wdGlvbmFsbHkgd2FzIHJlZmVyZW5jZWQgaW4gY29uc3RydWN0b3IgdW5sZXNzIGl0IGlzXHJcbiAgICAgKiB0aGUgc2FtZSBjb250ZXh0LlxyXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGNvbnRleHRcclxuICAgICAqL1xyXG4gICAgYXBwbHlUb0NvbnRleHQ6IGZ1bmN0aW9uIChjb250ZXh0KSB7XHJcbiAgICAgICAgdmFyIG1lID0gdGhpcztcclxuICAgICAgICBjb250ZXh0LnNldFRyYW5zZm9ybShtZS5hLCBtZS5iLCBtZS5jLCBtZS5kLCBtZS5lLCBtZS5mKTtcclxuICAgICAgICByZXR1cm4gbWU7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0cnVlIGlmIG1hdHJpeCBpcyBhbiBpZGVudGl0eSBtYXRyaXggKG5vIHRyYW5zZm9ybXMgYXBwbGllZCkuXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBpZGVudGl0eSAobm90IHRyYW5zZm9ybWVkKVxyXG4gICAgICovXHJcbiAgICBpc0lkZW50aXR5OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG1lID0gdGhpcztcclxuICAgICAgICByZXR1cm4gKG1lLl9xKG1lLmEsIDEpICYmXHJcbiAgICAgICAgbWUuX3EobWUuYiwgMCkgJiZcclxuICAgICAgICBtZS5fcShtZS5jLCAwKSAmJlxyXG4gICAgICAgIG1lLl9xKG1lLmQsIDEpICYmXHJcbiAgICAgICAgbWUuX3EobWUuZSwgMCkgJiZcclxuICAgICAgICBtZS5fcShtZS5mLCAwKSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0cnVlIGlmIG1hdHJpeCBpcyBpbnZlcnRpYmxlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgaXNJbnZlcnRpYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLl9xKHRoaXMuZGV0ZXJtaW5hbnQoKSwgMClcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0IGlmIG1hdHJpeCBpcyB2YWxpZC5cclxuICAgICAqL1xyXG4gICAgaXNWYWxpZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAhdGhpcy5fcSh0aGlzLmEgKiB0aGlzLmQsIDApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIENsb25lcyBjdXJyZW50IGluc3RhbmNlIGFuZCByZXR1cm5pbmcgYSBuZXcgbWF0cml4LlxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbbm9Db250ZXh0PWZhbHNlXSBkb24ndCBjbG9uZSBjb250ZXh0IHJlZmVyZW5jZSBpZiB0cnVlXHJcbiAgICAgKiBAcmV0dXJucyB7TWF0cml4fVxyXG4gICAgICovXHJcbiAgICBjbG9uZTogZnVuY3Rpb24gKG5vQ29udGV4dCkge1xyXG4gICAgICAgIHZhciBtZSA9IHRoaXMsXHJcbiAgICAgICAgICAgIG0gPSBuZXcgTWF0cml4KCk7XHJcbiAgICAgICAgbS5hID0gbWUuYTtcclxuICAgICAgICBtLmIgPSBtZS5iO1xyXG4gICAgICAgIG0uYyA9IG1lLmM7XHJcbiAgICAgICAgbS5kID0gbWUuZDtcclxuICAgICAgICBtLmUgPSBtZS5lO1xyXG4gICAgICAgIG0uZiA9IG1lLmY7XHJcbiAgICAgICAgaWYgKCFub0NvbnRleHQpIG0uY29udGV4dCA9IG1lLmNvbnRleHQ7XHJcblxyXG4gICAgICAgIHJldHVybiBtO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbXBhcmVzIGN1cnJlbnQgbWF0cml4IHdpdGggYW5vdGhlciBtYXRyaXguIFJldHVybnMgdHJ1ZSBpZiBlcXVhbFxyXG4gICAgICogKHdpdGhpbiBlcHNpbG9uIHRvbGVyYW5jZSkuXHJcbiAgICAgKiBAcGFyYW0ge01hdHJpeH0gbSAtIG1hdHJpeCB0byBjb21wYXJlIHRoaXMgbWF0cml4IHdpdGhcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBpc0VxdWFsOiBmdW5jdGlvbiAobSkge1xyXG5cclxuICAgICAgICB2YXIgbWUgPSB0aGlzLFxyXG4gICAgICAgICAgICBxID0gbWUuX3E7XHJcblxyXG4gICAgICAgIHJldHVybiAocShtZS5hLCBtLmEpICYmXHJcbiAgICAgICAgcShtZS5iLCBtLmIpICYmXHJcbiAgICAgICAgcShtZS5jLCBtLmMpICYmXHJcbiAgICAgICAgcShtZS5kLCBtLmQpICYmXHJcbiAgICAgICAgcShtZS5lLCBtLmUpICYmXHJcbiAgICAgICAgcShtZS5mLCBtLmYpKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IHdpdGggY3VycmVudCBtYXRyaXggdmFsdWVzLlxyXG4gICAgICogQHJldHVybnMge0FycmF5fVxyXG4gICAgICovXHJcbiAgICB0b0FycmF5OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG1lID0gdGhpcztcclxuICAgICAgICByZXR1cm4gW21lLmEsIG1lLmIsIG1lLmMsIG1lLmQsIG1lLmUsIG1lLmZdO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlcyBhIG1hdHJpeCgpIHN0cmluZyB0aGF0IGNhbiBiZSB1c2VkIHdpdGggQ1NTIHRyYW5zZm9ybS5cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHRvQ1NTOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwibWF0cml4KFwiICsgdGhpcy50b0FycmF5KCkgKyBcIilcIjtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZW5lcmF0ZXMgYSBtYXRyaXgzZCgpIHN0cmluZyB0aGF0IGNhbiBiZSB1c2VkIHdpdGggQ1NTIHRyYW5zZm9ybS5cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHRvQ1NTM0Q6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBcIm1hdHJpeDNkKFwiICsgbWUuYSArIFwiLCBcIiArIG1lLmIgKyBcIiwgMCwgMCwgXCIgKyBtZS5jICsgXCIsIFwiICsgbWUuZCArIFwiLCAwLCAwLCAwLCAwLCAxLCAwLCBcIiArIG1lLmUgKyBcIiwgXCIgKyBtZS5mICsgXCIsIDAsIDEpXCI7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIEpTT04gY29tcGF0aWJsZSBzdHJpbmcgb2YgY3VycmVudCBtYXRyaXguXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICB0b0pTT046IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy50b0FycmF5KCkpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBzdHJpbmcgd2l0aCBjdXJyZW50IG1hdHJpeCBhcyBjb21tYS1zZXBhcmF0ZWQgbGlzdC5cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiXCIgKyB0aGlzLnRvQXJyYXkoKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb21wYXJlcyBmbG9hdGluZyBwb2ludCB2YWx1ZXMgd2l0aCBzb21lIHRvbGVyYW5jZSAoZXBzaWxvbilcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmMSAtIGZsb2F0IDFcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmMiAtIGZsb2F0IDJcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX3E6IGZ1bmN0aW9uIChmMSwgZjIpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5hYnMoZjEgLSBmMikgPCAxZS0xNDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBseSBjdXJyZW50IGFic29sdXRlIG1hdHJpeCB0byBjb250ZXh0IGlmIGRlZmluZWQsIHRvIHN5bmMgaXQuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfeDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBtZSA9IHRoaXM7XHJcbiAgICAgICAgaWYgKG1lLmNvbnRleHQpXHJcbiAgICAgICAgICAgIG1lLmNvbnRleHQuc2V0VHJhbnNmb3JtKG1lLmEsIG1lLmIsIG1lLmMsIG1lLmQsIG1lLmUsIG1lLmYpO1xyXG4gICAgICAgIHJldHVybiBtZTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1hdHJpeDtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NvdXJjZS9saWIvbWF0cml4LmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 58 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Defines the global root level namespace for the library.\\n *\\n * @module\\n * @author Micah Rolon <micah@ginasink.com>\\n *\\n * @requires game\\n * @requires module:play~pl.util\\n * @requires types/Basic\\n * @requires types/Dimensions\\n */\\n\\nvar _playGame = __webpack_require__(59);\\n\\nvar _playGame2 = _interopRequireDefault(_playGame);\\n\\nvar _util = __webpack_require__(50);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesBasic = __webpack_require__(51);\\n\\nvar _typesBasic2 = _interopRequireDefault(_typesBasic);\\n\\nvar _typesQueue = __webpack_require__(72);\\n\\nvar _typesQueue2 = _interopRequireDefault(_typesQueue);\\n\\nvar _typesDimensions = __webpack_require__(36);\\n\\nvar pl;\\n/**\\n * Resolves the event type for user interactions.\\n */\\nfunction resolveEventType() {\\n\\tvar resolution;\\n\\n\\tif (_playGame2['default'].feature('touch')) {\\n\\t\\tresolution = {\\n\\t\\t\\tACTION: 'touchend',\\n\\t\\t\\tACTION_DOWN: 'touchstart',\\n\\t\\t\\tACTION_UP: 'touchend',\\n\\t\\t\\tACTION_MOVE: 'touchmove',\\n\\t\\t\\tACTION_OUT: 'touchcancel'\\n\\t\\t};\\n\\t} else {\\n\\t\\tresolution = {\\n\\t\\t\\tACTION: 'click',\\n\\t\\t\\tACTION_DOWN: 'mousedown',\\n\\t\\t\\tACTION_UP: 'mouseup',\\n\\t\\t\\tACTION_MOVE: 'mousemove',\\n\\t\\t\\tACTION_OUT: 'mouseout'\\n\\t\\t};\\n\\t}\\n\\n\\treturn resolution;\\n}\\n\\n/**\\n * Globaly accesable, root level namespace for the library.\\n * @namespace\\n * @prop {object} EVENT - Namespace for noralized event name constants.\\n * @prop {Basic} Basic - Base object type.\\n * @prop {Point} Point - Object type which holds values on a 2D cartesian plane.\\n * @prop {Size} Size - Object type which holds 2-dimentional values for size.\\n * @prop {function} game - Registers a game view implementation. Also a namespace for other methods.\\n * @prop {object} util - Namespace for utility functions.\\n */\\npl = {\\n\\tBasic: _typesBasic2['default'], Point: _typesDimensions.Point, Size: _typesDimensions.Size, Queue: _typesQueue2['default'],\\n\\tgame: _playGame2['default'],\\n\\tutil: _util2['default'],\\n\\n\\t/**\\n  * @namespace\\n  * @prop {string} ACTION - The device normalized `click` event name.\\n  * @prop {string} ACTION_DOWN - The device normalized `mousedown` event name.\\n  * @prop {string} ACTION_UP - The device normalized `mouseup` event name.\\n  * @prop {string} ACTION_MOVE - The device normalized `mousemove` event name.\\n  * @prop {string} ACTION_OUT - The device normalized `mouseout` event name.\\n  */\\n\\tEVENT: resolveEventType()\\n};\\n\\nexports['default'] = pl;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvcGxheS5qcz82ZWUyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztvQ0FXaUIsRUFBVzs7OztnQ0FDWCxFQUFNOzs7O3NDQUNMLEVBQWE7Ozs7c0NBQ2IsRUFBYTs7OzsyQ0FDSCxFQUFrQjs7QUFFOUMsSUFBSSxFQUFFLENBQUM7Ozs7QUFJUCxTQUFTLGdCQUFnQixHQUFJO0FBQzVCLEtBQUksVUFBVSxDQUFDOztBQUVmLEtBQUksc0JBQUssT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQzFCLFlBQVUsR0FBRztBQUNaLFNBQU0sRUFBRSxVQUFVO0FBQ2xCLGNBQVcsRUFBRSxZQUFZO0FBQ3pCLFlBQVMsRUFBRSxVQUFVO0FBQ3JCLGNBQVcsRUFBRSxXQUFXO0FBQ3hCLGFBQVUsRUFBRSxhQUFhO0dBQ3pCLENBQUM7RUFDRixNQUFNO0FBQ04sWUFBVSxHQUFHO0FBQ1osU0FBTSxFQUFFLE9BQU87QUFDZixjQUFXLEVBQUUsV0FBVztBQUN4QixZQUFTLEVBQUUsU0FBUztBQUNwQixjQUFXLEVBQUUsV0FBVztBQUN4QixhQUFVLEVBQUUsVUFBVTtHQUN0QixDQUFDO0VBQ0Y7O0FBRUQsUUFBTyxVQUFVLENBQUM7Q0FDbEI7Ozs7Ozs7Ozs7OztBQVlELEVBQUUsR0FBRztBQUNKLE1BQUssMkJBQUUsS0FBSywwQkFBRSxJQUFJLHlCQUFFLEtBQUs7QUFDekIsS0FBSTtBQUNKLEtBQUk7Ozs7Ozs7Ozs7QUFVSixNQUFLLEVBQUUsZ0JBQWdCLEVBQUU7Q0FDekIsQ0FBQzs7cUJBRWEsRUFBRSIsImZpbGUiOiI1OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRGVmaW5lcyB0aGUgZ2xvYmFsIHJvb3QgbGV2ZWwgbmFtZXNwYWNlIGZvciB0aGUgbGlicmFyeS5cbiAqXG4gKiBAbW9kdWxlXG4gKiBAYXV0aG9yIE1pY2FoIFJvbG9uIDxtaWNhaEBnaW5hc2luay5jb20+XG4gKlxuICogQHJlcXVpcmVzIGdhbWVcbiAqIEByZXF1aXJlcyBtb2R1bGU6cGxheX5wbC51dGlsXG4gKiBAcmVxdWlyZXMgdHlwZXMvQmFzaWNcbiAqIEByZXF1aXJlcyB0eXBlcy9EaW1lbnNpb25zXG4gKi9cbmltcG9ydCBnYW1lIGZyb20gJ3BsYXkuZ2FtZSc7XG5pbXBvcnQgdXRpbCBmcm9tICd1dGlsJztcbmltcG9ydCBCYXNpYyBmcm9tICd0eXBlcy9CYXNpYyc7XG5pbXBvcnQgUXVldWUgZnJvbSAndHlwZXMvUXVldWUnO1xuaW1wb3J0IHsgUG9pbnQsIFNpemUgfSBmcm9tICd0eXBlcy9EaW1lbnNpb25zJztcblxudmFyIHBsO1xuLyoqXG4gKiBSZXNvbHZlcyB0aGUgZXZlbnQgdHlwZSBmb3IgdXNlciBpbnRlcmFjdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVFdmVudFR5cGUgKCkge1xuXHR2YXIgcmVzb2x1dGlvbjtcblxuXHRpZiAoZ2FtZS5mZWF0dXJlKCd0b3VjaCcpKSB7XG5cdFx0cmVzb2x1dGlvbiA9IHtcblx0XHRcdEFDVElPTjogJ3RvdWNoZW5kJyxcblx0XHRcdEFDVElPTl9ET1dOOiAndG91Y2hzdGFydCcsXG5cdFx0XHRBQ1RJT05fVVA6ICd0b3VjaGVuZCcsXG5cdFx0XHRBQ1RJT05fTU9WRTogJ3RvdWNobW92ZScsXG5cdFx0XHRBQ1RJT05fT1VUOiAndG91Y2hjYW5jZWwnXG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRyZXNvbHV0aW9uID0ge1xuXHRcdFx0QUNUSU9OOiAnY2xpY2snLFxuXHRcdFx0QUNUSU9OX0RPV046ICdtb3VzZWRvd24nLFxuXHRcdFx0QUNUSU9OX1VQOiAnbW91c2V1cCcsXG5cdFx0XHRBQ1RJT05fTU9WRTogJ21vdXNlbW92ZScsXG5cdFx0XHRBQ1RJT05fT1VUOiAnbW91c2VvdXQnXG5cdFx0fTtcblx0fVxuXG5cdHJldHVybiByZXNvbHV0aW9uO1xufVxuXG4vKipcbiAqIEdsb2JhbHkgYWNjZXNhYmxlLCByb290IGxldmVsIG5hbWVzcGFjZSBmb3IgdGhlIGxpYnJhcnkuXG4gKiBAbmFtZXNwYWNlXG4gKiBAcHJvcCB7b2JqZWN0fSBFVkVOVCAtIE5hbWVzcGFjZSBmb3Igbm9yYWxpemVkIGV2ZW50IG5hbWUgY29uc3RhbnRzLlxuICogQHByb3Age0Jhc2ljfSBCYXNpYyAtIEJhc2Ugb2JqZWN0IHR5cGUuXG4gKiBAcHJvcCB7UG9pbnR9IFBvaW50IC0gT2JqZWN0IHR5cGUgd2hpY2ggaG9sZHMgdmFsdWVzIG9uIGEgMkQgY2FydGVzaWFuIHBsYW5lLlxuICogQHByb3Age1NpemV9IFNpemUgLSBPYmplY3QgdHlwZSB3aGljaCBob2xkcyAyLWRpbWVudGlvbmFsIHZhbHVlcyBmb3Igc2l6ZS5cbiAqIEBwcm9wIHtmdW5jdGlvbn0gZ2FtZSAtIFJlZ2lzdGVycyBhIGdhbWUgdmlldyBpbXBsZW1lbnRhdGlvbi4gQWxzbyBhIG5hbWVzcGFjZSBmb3Igb3RoZXIgbWV0aG9kcy5cbiAqIEBwcm9wIHtvYmplY3R9IHV0aWwgLSBOYW1lc3BhY2UgZm9yIHV0aWxpdHkgZnVuY3Rpb25zLlxuICovXG5wbCA9IHtcblx0QmFzaWMsIFBvaW50LCBTaXplLCBRdWV1ZSxcblx0Z2FtZSxcblx0dXRpbCxcblx0XG5cdC8qKlxuXHQgKiBAbmFtZXNwYWNlXG5cdCAqIEBwcm9wIHtzdHJpbmd9IEFDVElPTiAtIFRoZSBkZXZpY2Ugbm9ybWFsaXplZCBgY2xpY2tgIGV2ZW50IG5hbWUuXG5cdCAqIEBwcm9wIHtzdHJpbmd9IEFDVElPTl9ET1dOIC0gVGhlIGRldmljZSBub3JtYWxpemVkIGBtb3VzZWRvd25gIGV2ZW50IG5hbWUuXG5cdCAqIEBwcm9wIHtzdHJpbmd9IEFDVElPTl9VUCAtIFRoZSBkZXZpY2Ugbm9ybWFsaXplZCBgbW91c2V1cGAgZXZlbnQgbmFtZS5cblx0ICogQHByb3Age3N0cmluZ30gQUNUSU9OX01PVkUgLSBUaGUgZGV2aWNlIG5vcm1hbGl6ZWQgYG1vdXNlbW92ZWAgZXZlbnQgbmFtZS5cblx0ICogQHByb3Age3N0cmluZ30gQUNUSU9OX09VVCAtIFRoZSBkZXZpY2Ugbm9ybWFsaXplZCBgbW91c2VvdXRgIGV2ZW50IG5hbWUuXG5cdCAqL1xuXHRFVkVOVDogcmVzb2x2ZUV2ZW50VHlwZSgpXG59O1xuXG5leHBvcnQgZGVmYXVsdCBwbDtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc291cmNlL3BsYXkuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 59 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Defines the 'game' method for registration and initialization of game scopes. This method also acts as a namespace for game level functions (See: [pl.game]{@link module:play~pl.game}).\\n *\\n * @module game\\n * @author Micah Rolon <micah@ginasink.com>\\n *\\n * @requires play.game.component\\n * @requires play.game.manager\\n * @requires util\\n * @requires types/Events\\n * @requires types/GlobalScope\\n * @requires types/Entity\\n * @requires types/Screen\\n * @requires types/Game\\n */\\n\\nvar _playGameComponent = __webpack_require__(60);\\n\\nvar _playGameComponent2 = _interopRequireDefault(_playGameComponent);\\n\\nvar _playGameManager = __webpack_require__(62);\\n\\nvar _playGameManager2 = _interopRequireDefault(_playGameManager);\\n\\nvar _util = __webpack_require__(50);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesEvents = __webpack_require__(61);\\n\\nvar _typesEvents2 = _interopRequireDefault(_typesEvents);\\n\\nvar _typesGlobalScope = __webpack_require__(65);\\n\\nvar _typesGlobalScope2 = _interopRequireDefault(_typesGlobalScope);\\n\\nvar _typesEntity = __webpack_require__(112);\\n\\nvar _typesEntity2 = _interopRequireDefault(_typesEntity);\\n\\nvar _typesScreen = __webpack_require__(113);\\n\\nvar _typesScreen2 = _interopRequireDefault(_typesScreen);\\n\\nvar _typesGame = __webpack_require__(114);\\n\\nvar _typesGame2 = _interopRequireDefault(_typesGame);\\n\\nvar _platform = __webpack_require__(115);\\n\\nvar _platform2 = _interopRequireDefault(_platform);\\n\\nvar GAMES, CONFIG, READY_QUEUE;\\n\\n/**\\n * Define a game scope for registration and/or initialization.\\n * This method also acts as a namespace for game level functions (See: [pl.game]{@link module:play~pl.game}).\\n *\\n * @arg {string} _name - The name of the game matched with a DOM nodes 'id' attribute.\\n * @arg {function|object} _implementation - The constructor or object which implements the scope behavior.\\n */\\nfunction game(_name, _implementation) {\\n\\tif (game.isDOMReady) {\\n\\t\\tinitialize(_name, _implementation);\\n\\t} else {\\n\\t\\tregister(_name, _implementation);\\n\\t}\\n}\\n\\nfunction ready(_eventName) {\\n\\tif (READY_QUEUE.length) return false;\\n\\tgame.trigger(_eventName || 'ready');\\n}\\n\\n/**\\n * Registers an implementation of a game scope for initialization.\\n * @protected\\n * @arg {string} _name - The name of the game matched with a DOM nodes 'id' attribute.\\n * @arg {function|object} _implementation - The constructor or object which implements the scope behavior.\\n */\\nfunction register(_name, _implementation) {\\n\\tif (! ~GAMES.indexOf(_name)) {\\n\\t\\tGAMES.push({\\n\\t\\t\\tid: _name,\\n\\t\\t\\timplementation: _implementation\\n\\t\\t});\\n\\t}\\n}\\n\\n/**\\n * Initializes an implementation of a game scope. (overloaded)\\n * @function initialize\\n * @protected\\n * @arg {string} _name - The name of the game matched with a DOM nodes 'id' attribute.\\n * @arg {function|object} _implementation - The constructor or object which implements the scope behavior.\\n */\\n\\n/**\\n * Initializes an implementation of a game scope.\\n * @protected\\n * @arg {array} _collection - The collection of game scope records for initialization.\\n * @arg {function|object} _implementation - The constructor or object which implements the scope behavior.\\n */\\nfunction initialize(_name_collection, _implementation) {\\n\\tswitch (typeof _name_collection) {\\n\\t\\tcase 'string':\\n\\t\\t\\t_typesGlobalScope2['default'][_name_collection] = _typesGame2['default'].extend(_implementation).initialize('#' + _name_collection);\\n\\t\\t\\tbreak;\\n\\n\\t\\tcase 'object':\\n\\t\\t\\t_name_collection.forEach(function (_item, _index) {\\n\\t\\t\\t\\tinitialize(_item.id, _item.implementation);\\n\\t\\t\\t});\\n\\t\\t\\tbreak;\\n\\t}\\n}\\n\\n/** @protected */\\nGAMES = [];\\n/** @protected */\\nCONFIG = {};\\n/** @protected */\\nREADY_QUEUE = [];\\n\\n/**\\n * Interface for game level configuration.\\n * @namespace game\\n * @memberof module:play~pl\\n * @mixes Events\\n */\\n(function () {\\n\\n\\tvar audioContext;\\n\\n\\tthis.component = _playGameComponent2['default'];\\n\\tthis.manager = _playGameManager2['default'];\\n\\n\\t_util2['default'].mixin(game, _typesEvents2['default']);\\n\\n\\tthis.on('platform-event', function (_event) {\\n\\t\\tconsole.log('play.game -', _event.name, _event.gameData);\\n\\t});\\n\\n\\t/**\\n  * Starts the dominos falling\\n  * @function run\\n  * @memberof module:play~pl.game\\n  */\\n\\tthis.run = function () {\\n\\t\\tgame.isDOMReady = true;\\n\\t\\tgame.trigger('dom-ready');\\n\\n\\t\\tgame.component.loadAll(function () {\\n\\t\\t\\t// console.log('** All component sources loaded.');\\n\\t\\t\\tinitialize(GAMES);\\n\\n\\t\\t\\tGAMES = null;\\n\\t\\t});\\n\\n\\t\\t_platform2['default'].emit(_platform2['default'].EVENT_INIT);\\n\\t};\\n\\n\\tthis.report = function (_name) {\\n\\t\\t_platform2['default'].emit(_name);\\n\\n\\t\\treturn this.report;\\n\\t};\\n\\n\\tthis.report.exit = function (_gameScope) {\\n\\t\\t_platform2['default'].saveGameState(_gameScope.progress());\\n\\t\\t_platform2['default'].emit(_platform2['default'].EVENT_EXIT);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.report.flip = function (_gameScope) {\\n\\t\\t_platform2['default'].saveGameState(_gameScope.progress());\\n\\t\\t_platform2['default'].emit(_platform2['default'].EVENT_FLIPPED);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * Getter/Setter for game level configuration.\\n  * @function module:play~pl.game.config\\n  * @arg {string} _key - The key to retrieve\\n  * @returns {this}\\n  */\\n\\n\\t/**\\n  * Getter/Setter for game level configuration.\\n  * @function config\\n  * @memberof module:play~pl.game\\n  * @arg {object} _mixin - Object to set properties on configuration.\\n  * @returns {this}\\n  */\\n\\tthis.config = function (_key_mixin) {\\n\\t\\tswitch (typeof _key_mixin) {\\n\\t\\t\\tcase 'string':\\n\\t\\t\\t\\treturn _util2['default'].resolvePath(CONFIG, _key_mixin);\\n\\t\\t\\tcase 'object':\\n\\t\\t\\t\\tif (_key_mixin) _util2['default'].mixin(CONFIG, _key_mixin);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * @function provideEntityType\\n  * @deprecated\\n  * @memberof module:play~pl.game\\n  */\\n\\tthis.provideEntityType = function () {\\n\\t\\treturn _typesEntity2['default'];\\n\\t};\\n\\n\\t/**\\n  * @function provideScreenType\\n  * @deprecated\\n  * @memberof module:play~pl.game\\n  */\\n\\tthis.provideScreenType = function () {\\n\\t\\treturn _typesScreen2['default'];\\n\\t};\\n\\n\\t/**\\n  * Augments the global scope.\\n  * @function scope\\n  * @arg {function|object} _mixin - Object or constructor to define members.\\n  * @returns {this}\\n  *\\n  * @memberof module:play~pl.game\\n  */\\n\\tthis.scope = function (_mixin) {\\n\\t\\tif (typeof _mixin === 'function') {\\n\\t\\t\\t_mixin.call(_typesGlobalScope2['default']);\\n\\t\\t} else if (_mixin) {\\n\\t\\t\\t_typesGlobalScope2['default'].mixin(_mixin);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * @function queue\\n  * @deprecated\\n  * @memberof module:play~pl.game\\n  */\\n\\tthis.queue = function (_item) {\\n\\t\\tif (! ~READY_QUEUE.indexOf(_item)) READY_QUEUE.push(_item);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.queue.complete = function (_item, _eventName) {\\n\\t\\tvar index;\\n\\n\\t\\tindex = READY_QUEUE.indexOf(_item);\\n\\t\\tREADY_QUEUE.splice(index, 1);\\n\\n\\t\\tready(_eventName);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * Accessor for the detected features supported by the browser.\\n  *\\n  * *Supported Feature Detectors*\\n  * - touch\\n  *\\n  * @function feature;\\n  * @arg {string} _name - The feature which to test for (i.e. `\\\"touch\\\"`)\\n  * @returns {boolean} The support status for the specified feature.\\n  */\\n\\tthis.feature = (function () {\\n\\t\\tvar detect = {\\n\\t\\t\\ttouch: function touch() {\\n\\t\\t\\t\\treturn window.hasOwnProperty('ontouchend');\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\treturn function (_name) {\\n\\t\\t\\tvar tester = detect[_name];\\n\\t\\t\\tif (!tester && console) console.warn('No feature detection for \\\"' + _name + '\\\".');\\n\\t\\t\\treturn tester && tester();\\n\\t\\t};\\n\\t})();\\n\\n\\tthis.getAudioContext = function () {\\n\\t\\tif (!audioContext) {\\n\\t\\t\\taudioContext = new (window.AudioContext || window.webkitAudioContext)();\\n\\t\\t\\twindow.onfocus = function () {\\n\\t\\t\\t\\taudioContext.resume();\\n\\t\\t\\t};\\n\\t\\t\\twindow.onblur = function () {\\n\\t\\t\\t\\taudioContext.suspend();\\n\\t\\t\\t};\\n\\t\\t}\\n\\t\\treturn audioContext;\\n\\t};\\n\\n\\tthis.enableAudioContext = function () {\\n\\t\\tvar ctx, silence;\\n\\n\\t\\tctx = this.getAudioContext();\\n\\t\\tsilence = ctx.createBufferSource();\\n\\n\\t\\tsilence.buffer = ctx.createBuffer(2, 1, 44100);\\n\\t\\tsilence.connect(ctx.destination);\\n\\t\\tsilence.start();\\n\\t\\tsilence.disconnect();\\n\\n\\t\\treturn silence;\\n\\t};\\n}).call(game);\\n\\nexports['default'] = game;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 60 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Defines the `component()` method for component behavior registration. This method is also a namesapce for methods to manage and load component behavior scripts.\\n *\\n * @module\\n * @author Micah Rolon <micah@ginasink.com>\\n *\\n * @requires play~pl.util\\n * @requires types/Events\\n */\\n\\nvar _util = __webpack_require__(50);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesEvents = __webpack_require__(61);\\n\\nvar _typesEvents2 = _interopRequireDefault(_typesEvents);\\n\\n/**\\n * Collection of component behavior records\\n * @const\\n */\\nvar COMPONENTS;\\n\\n/**\\n * Registers a component behavior.\\n * @arg {string} _name - The name for the component.\\n * @arg {function|object} _implementation - Constructor function or object with the behavior's implementation.\\n * @returns {@link module:play~pl.game}\\n */\\nfunction component(_name, _implementation) {\\n\\tif (!component.get(_name)) {\\n\\t\\tCOMPONENTS.push({\\n\\t\\t\\tname: _name,\\n\\t\\t\\timplementation: _implementation,\\n\\t\\t\\tconfig: {}\\n\\t\\t});\\n\\t}\\n\\n\\treturn this;\\n}\\n\\nCOMPONENTS = [];\\n\\n/**\\n * Methods to manage and load component behavior scripts.\\n * @namespace component\\n * @memberof module:play~pl.game\\n * @mixes Events\\n */\\n(function () {\\n\\n\\t_util2['default'].mixin(this, _typesEvents2['default']);\\n\\n\\t/**\\n  * Given a name; provides the component record. `{name, implementation}`\\n  * @memberof module:play~pl.game.component\\n  * @arg {string} _name - The name of the component.\\n  * @returns {object} The record.\\n  */\\n\\tthis.get = function (_name) {\\n\\t\\tvar i, record;\\n\\n\\t\\tfor (i = 0; record = COMPONENTS[i]; i += 1) {\\n\\t\\t\\tif (record.name === _name) return record;\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t};\\n\\n\\t/**\\n  * Loads the script for the component. The HTML and CSS will be loaded when the component scope initalizes.<br>\\n  * The path of the script file is resolved `{pl.game.config.componentDirectory}/{_name}/behavior.js`.\\n  * @memberof module:play~pl.game.component\\n  * @arg {string} _name - The name of the component.\\n  * @arg {function} _callback - Callback for load success.\\n  * @todo Implement Promises.\\n  * @returns `this`\\n  */\\n\\tthis.load = function (_name, _callback) {\\n\\t\\tvar path;\\n\\n\\t\\tif (component.get(_name)) {\\n\\t\\t\\tif (_callback) _callback.call(component, _name);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\tpath = pl.game.config('componentDirectory') + _name + '/behavior.js';\\n\\n\\t\\t$.getScript(path, function () {\\n\\t\\t\\tif (_callback) _callback.call(component, _name);\\n\\t\\t\\tcomponent.trigger('loaded', [_name]);\\n\\t\\t});\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * Loads all the component scripts for HTML elements with `pl-component` attributes.\\n  * @memberof module:play~pl.game.component\\n  * @arg {function} _callback - Callback for load success.\\n  * @todo Implement Promises.\\n  * @returns `this`\\n  */\\n\\tthis.loadAll = function (_callback) {\\n\\t\\tvar $components, queue;\\n\\n\\t\\t$components = $('[pl-component]');\\n\\t\\tqueue = [];\\n\\n\\t\\t$components.each(function (_index) {\\n\\t\\t\\tvar name;\\n\\n\\t\\t\\tname = $(this).attr('pl-component');\\n\\n\\t\\t\\tif (~queue.indexOf(name)) return;\\n\\n\\t\\t\\tqueue.push(name);\\n\\t\\t});\\n\\n\\t\\tqueue.slice(0).forEach(function (_name) {\\n\\t\\t\\tcomponent.load(_name, function () {\\n\\t\\t\\t\\tvar index;\\n\\n\\t\\t\\t\\tindex = queue.indexOf(_name);\\n\\t\\t\\t\\tqueue.splice(index, 1);\\n\\n\\t\\t\\t\\tif (!queue.length && _callback) _callback.apply(component, arguments);\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t// Maybe?\\n\\t// this.config = function () {};\\n}).call(component);\\n\\nexports['default'] = component;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvcGxheS5nYW1lLmNvbXBvbmVudC5qcz9lMTg2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Z0NBU2lCLEVBQU07Ozs7dUNBQ0osRUFBYzs7Ozs7Ozs7QUFNakMsSUFBSSxVQUFVLENBQUM7Ozs7Ozs7O0FBUWYsU0FBUyxTQUFTLENBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRTtBQUMzQyxLQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUMxQixZQUFVLENBQUMsSUFBSSxDQUFDO0FBQ2YsT0FBSSxFQUFFLEtBQUs7QUFDWCxpQkFBYyxFQUFFLGVBQWU7QUFDL0IsU0FBTSxFQUFFLEVBQUU7R0FDVixDQUFDLENBQUM7RUFDSDs7QUFFRCxRQUFPLElBQUksQ0FBQztDQUNaOztBQUVELFVBQVUsR0FBRyxFQUFFLENBQUM7Ozs7Ozs7O0FBUWhCLENBQUMsWUFBWTs7QUFFWixtQkFBSyxLQUFLLENBQUMsSUFBSSwyQkFBUyxDQUFDOzs7Ozs7OztBQVF6QixLQUFJLENBQUMsR0FBRyxHQUFHLFVBQVUsS0FBSyxFQUFFO0FBQzNCLE1BQUksQ0FBQyxFQUFFLE1BQU0sQ0FBQzs7QUFFZCxPQUFLLENBQUMsR0FBQyxDQUFDLEVBQUUsTUFBTSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUUsQ0FBQyxFQUFFO0FBQ3ZDLE9BQUksTUFBTSxDQUFDLElBQUksS0FBSyxLQUFLLEVBQUUsT0FBTyxNQUFNLENBQUM7R0FDekM7O0FBRUQsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDOzs7Ozs7Ozs7OztBQVdGLEtBQUksQ0FBQyxJQUFJLEdBQUcsVUFBVSxLQUFLLEVBQUUsU0FBUyxFQUFFO0FBQ3ZDLE1BQUksSUFBSTs7QUFFUixNQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDekIsT0FBSSxTQUFTLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDaEQsVUFBTyxJQUFJLENBQUM7R0FDWjs7QUFFRCxNQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsR0FBQyxLQUFLLEdBQUMsY0FBYyxDQUFDOztBQUVqRSxHQUFDLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxZQUFZO0FBQzdCLE9BQUksU0FBUyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ2hELFlBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztHQUNyQyxDQUFDLENBQUM7O0FBRUgsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDOzs7Ozs7Ozs7QUFTRixLQUFJLENBQUMsT0FBTyxHQUFHLFVBQVUsU0FBUyxFQUFFO0FBQ25DLE1BQUksV0FBVyxFQUFFLEtBQUssQ0FBQzs7QUFFdkIsYUFBVyxHQUFHLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ2xDLE9BQUssR0FBRyxFQUFFLENBQUM7O0FBRVgsYUFBVyxDQUFDLElBQUksQ0FBQyxVQUFVLE1BQU0sRUFBRTtBQUNsQyxPQUFJLElBQUksQ0FBQzs7QUFFVCxPQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQzs7QUFFcEMsT0FBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTzs7QUFFakMsUUFBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUNqQixDQUFDLENBQUM7O0FBRUgsT0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxLQUFLLEVBQUU7QUFDdkMsWUFBUyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsWUFBWTtBQUNqQyxRQUFJLEtBQUssQ0FBQzs7QUFFVixTQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM3QixTQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQzs7QUFFdkIsUUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksU0FBUyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQztJQUNyRSxDQUFDLENBQUM7R0FDSCxDQUFDLENBQUM7O0FBRUgsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDOzs7O0NBS0YsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7O3FCQUVKLFNBQVMiLCJmaWxlIjoiNjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERlZmluZXMgdGhlIGBjb21wb25lbnQoKWAgbWV0aG9kIGZvciBjb21wb25lbnQgYmVoYXZpb3IgcmVnaXN0cmF0aW9uLiBUaGlzIG1ldGhvZCBpcyBhbHNvIGEgbmFtZXNhcGNlIGZvciBtZXRob2RzIHRvIG1hbmFnZSBhbmQgbG9hZCBjb21wb25lbnQgYmVoYXZpb3Igc2NyaXB0cy5cbiAqXG4gKiBAbW9kdWxlXG4gKiBAYXV0aG9yIE1pY2FoIFJvbG9uIDxtaWNhaEBnaW5hc2luay5jb20+XG4gKlxuICogQHJlcXVpcmVzIHBsYXl+cGwudXRpbFxuICogQHJlcXVpcmVzIHR5cGVzL0V2ZW50c1xuICovXG5pbXBvcnQgdXRpbCBmcm9tICd1dGlsJztcbmltcG9ydCBFdmVudHMgZnJvbSAndHlwZXMvRXZlbnRzJztcblxuLyoqXG4gKiBDb2xsZWN0aW9uIG9mIGNvbXBvbmVudCBiZWhhdmlvciByZWNvcmRzXG4gKiBAY29uc3RcbiAqL1xudmFyIENPTVBPTkVOVFM7XG5cbi8qKlxuICogUmVnaXN0ZXJzIGEgY29tcG9uZW50IGJlaGF2aW9yLlxuICogQGFyZyB7c3RyaW5nfSBfbmFtZSAtIFRoZSBuYW1lIGZvciB0aGUgY29tcG9uZW50LlxuICogQGFyZyB7ZnVuY3Rpb258b2JqZWN0fSBfaW1wbGVtZW50YXRpb24gLSBDb25zdHJ1Y3RvciBmdW5jdGlvbiBvciBvYmplY3Qgd2l0aCB0aGUgYmVoYXZpb3IncyBpbXBsZW1lbnRhdGlvbi5cbiAqIEByZXR1cm5zIHtAbGluayBtb2R1bGU6cGxheX5wbC5nYW1lfVxuICovXG5mdW5jdGlvbiBjb21wb25lbnQgKF9uYW1lLCBfaW1wbGVtZW50YXRpb24pIHtcblx0aWYgKCFjb21wb25lbnQuZ2V0KF9uYW1lKSkge1xuXHRcdENPTVBPTkVOVFMucHVzaCh7XG5cdFx0XHRuYW1lOiBfbmFtZSxcblx0XHRcdGltcGxlbWVudGF0aW9uOiBfaW1wbGVtZW50YXRpb24sXG5cdFx0XHRjb25maWc6IHt9XG5cdFx0fSk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn1cblxuQ09NUE9ORU5UUyA9IFtdO1xuXG4vKipcbiAqIE1ldGhvZHMgdG8gbWFuYWdlIGFuZCBsb2FkIGNvbXBvbmVudCBiZWhhdmlvciBzY3JpcHRzLlxuICogQG5hbWVzcGFjZSBjb21wb25lbnRcbiAqIEBtZW1iZXJvZiBtb2R1bGU6cGxheX5wbC5nYW1lXG4gKiBAbWl4ZXMgRXZlbnRzXG4gKi9cbihmdW5jdGlvbiAoKSB7XG5cdFxuXHR1dGlsLm1peGluKHRoaXMsIEV2ZW50cyk7XG5cblx0LyoqXG5cdCAqIEdpdmVuIGEgbmFtZTsgcHJvdmlkZXMgdGhlIGNvbXBvbmVudCByZWNvcmQuIGB7bmFtZSwgaW1wbGVtZW50YXRpb259YFxuXHQgKiBAbWVtYmVyb2YgbW9kdWxlOnBsYXl+cGwuZ2FtZS5jb21wb25lbnRcblx0ICogQGFyZyB7c3RyaW5nfSBfbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBjb21wb25lbnQuXG5cdCAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSByZWNvcmQuXG5cdCAqL1xuXHR0aGlzLmdldCA9IGZ1bmN0aW9uIChfbmFtZSkge1xuXHRcdHZhciBpLCByZWNvcmQ7XG5cblx0XHRmb3IgKGk9MDsgcmVjb3JkID0gQ09NUE9ORU5UU1tpXTsgaSs9MSkge1xuXHRcdFx0aWYgKHJlY29yZC5uYW1lID09PSBfbmFtZSkgcmV0dXJuIHJlY29yZDtcblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblx0fTtcblxuXHQvKipcblx0ICogTG9hZHMgdGhlIHNjcmlwdCBmb3IgdGhlIGNvbXBvbmVudC4gVGhlIEhUTUwgYW5kIENTUyB3aWxsIGJlIGxvYWRlZCB3aGVuIHRoZSBjb21wb25lbnQgc2NvcGUgaW5pdGFsaXplcy48YnI+XG5cdCAqIFRoZSBwYXRoIG9mIHRoZSBzY3JpcHQgZmlsZSBpcyByZXNvbHZlZCBge3BsLmdhbWUuY29uZmlnLmNvbXBvbmVudERpcmVjdG9yeX0ve19uYW1lfS9iZWhhdmlvci5qc2AuXG5cdCAqIEBtZW1iZXJvZiBtb2R1bGU6cGxheX5wbC5nYW1lLmNvbXBvbmVudFxuXHQgKiBAYXJnIHtzdHJpbmd9IF9uYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGNvbXBvbmVudC5cblx0ICogQGFyZyB7ZnVuY3Rpb259IF9jYWxsYmFjayAtIENhbGxiYWNrIGZvciBsb2FkIHN1Y2Nlc3MuXG5cdCAqIEB0b2RvIEltcGxlbWVudCBQcm9taXNlcy5cblx0ICogQHJldHVybnMgYHRoaXNgXG5cdCAqL1xuXHR0aGlzLmxvYWQgPSBmdW5jdGlvbiAoX25hbWUsIF9jYWxsYmFjaykge1xuXHRcdHZhciBwYXRoXG5cblx0XHRpZiAoY29tcG9uZW50LmdldChfbmFtZSkpIHtcblx0XHRcdGlmIChfY2FsbGJhY2spIF9jYWxsYmFjay5jYWxsKGNvbXBvbmVudCwgX25hbWUpO1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0cGF0aCA9IHBsLmdhbWUuY29uZmlnKCdjb21wb25lbnREaXJlY3RvcnknKStfbmFtZSsnL2JlaGF2aW9yLmpzJztcblxuXHRcdCQuZ2V0U2NyaXB0KHBhdGgsIGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmIChfY2FsbGJhY2spIF9jYWxsYmFjay5jYWxsKGNvbXBvbmVudCwgX25hbWUpO1xuXHRcdFx0Y29tcG9uZW50LnRyaWdnZXIoJ2xvYWRlZCcsIFtfbmFtZV0pO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0LyoqXG5cdCAqIExvYWRzIGFsbCB0aGUgY29tcG9uZW50IHNjcmlwdHMgZm9yIEhUTUwgZWxlbWVudHMgd2l0aCBgcGwtY29tcG9uZW50YCBhdHRyaWJ1dGVzLlxuXHQgKiBAbWVtYmVyb2YgbW9kdWxlOnBsYXl+cGwuZ2FtZS5jb21wb25lbnRcblx0ICogQGFyZyB7ZnVuY3Rpb259IF9jYWxsYmFjayAtIENhbGxiYWNrIGZvciBsb2FkIHN1Y2Nlc3MuXG5cdCAqIEB0b2RvIEltcGxlbWVudCBQcm9taXNlcy5cblx0ICogQHJldHVybnMgYHRoaXNgXG5cdCAqL1xuXHR0aGlzLmxvYWRBbGwgPSBmdW5jdGlvbiAoX2NhbGxiYWNrKSB7XG5cdFx0dmFyICRjb21wb25lbnRzLCBxdWV1ZTtcblxuXHRcdCRjb21wb25lbnRzID0gJCgnW3BsLWNvbXBvbmVudF0nKTtcblx0XHRxdWV1ZSA9IFtdO1xuXG5cdFx0JGNvbXBvbmVudHMuZWFjaChmdW5jdGlvbiAoX2luZGV4KSB7XG5cdFx0XHR2YXIgbmFtZTtcblxuXHRcdFx0bmFtZSA9ICQodGhpcykuYXR0cigncGwtY29tcG9uZW50Jyk7XG5cblx0XHRcdGlmICh+cXVldWUuaW5kZXhPZihuYW1lKSkgcmV0dXJuO1xuXG5cdFx0XHRxdWV1ZS5wdXNoKG5hbWUpO1xuXHRcdH0pO1xuXG5cdFx0cXVldWUuc2xpY2UoMCkuZm9yRWFjaChmdW5jdGlvbiAoX25hbWUpIHtcblx0XHRcdGNvbXBvbmVudC5sb2FkKF9uYW1lLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHZhciBpbmRleDtcblxuXHRcdFx0XHRpbmRleCA9IHF1ZXVlLmluZGV4T2YoX25hbWUpO1xuXHRcdFx0XHRxdWV1ZS5zcGxpY2UoaW5kZXgsIDEpO1xuXG5cdFx0XHRcdGlmICghcXVldWUubGVuZ3RoICYmIF9jYWxsYmFjaykgX2NhbGxiYWNrLmFwcGx5KGNvbXBvbmVudCwgYXJndW1lbnRzKVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvLyBNYXliZT9cblx0Ly8gdGhpcy5jb25maWcgPSBmdW5jdGlvbiAoKSB7fTtcblxufSkuY2FsbChjb21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQ7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NvdXJjZS9wbGF5LmdhbWUuY29tcG9uZW50LmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 61 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n*  Events\\n*  @desc Contains methods for managing and dispatching events from objects.\\n*  @proto Basic\\n*/\\n\\nvar _typesBasic = __webpack_require__(51);\\n\\nvar _typesBasic2 = _interopRequireDefault(_typesBasic);\\n\\nvar Events = _typesBasic2['default'].extend(function () {\\n\\tvar i, method, methods;\\n\\t/**\\n *  @desc Creates a function with a proxy to the jQuery method.\\n *  @param _name (String) The name of the method being proxied.\\n *  @return (jQuery|*) Either a jQuery object or whatever the original method returns.\\n *  @private\\n */\\n\\tfunction createProxyFunction(_name) {\\n\\t\\treturn function () {\\n\\t\\t\\tvar $jq = $();\\n\\t\\t\\t// We must wrap our object in jQuery. If 'typeof this' is a function then we need\\n\\t\\t\\t// to add it in this manner, otherwise jQuery treats it like a ready callback.\\n\\t\\t\\t$jq.push(this);\\n\\n\\t\\t\\treturn $.fn[_name].apply($jq, arguments);\\n\\t\\t};\\n\\t}\\n\\n\\tmethods = ['on', 'off', 'trigger'];\\n\\n\\tthis.baseType = 'TYPE_EVENTS';\\n\\n\\tfor (i = 0; method = methods[i]; i += 1) {\\n\\t\\tthis[method] = createProxyFunction(method);\\n\\t}\\n});\\n\\nexports['default'] = Events;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvRXZlbnRzLmpzP2VlZTMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O3NDQU1rQixFQUFhOzs7O0FBRS9CLElBQUksTUFBTSxHQUFHLHdCQUFNLE1BQU0sQ0FBQyxZQUFZO0FBQ3JDLEtBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUM7Ozs7Ozs7QUFPdkIsVUFBUyxtQkFBbUIsQ0FBRSxLQUFLLEVBQUU7QUFDcEMsU0FBTyxZQUFZO0FBQ2xCLE9BQUksR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDOzs7QUFHZCxNQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDOztBQUVmLFVBQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0dBQ3pDLENBQUM7RUFDRjs7QUFFRCxRQUFPLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDOztBQUVuQyxLQUFJLENBQUMsUUFBUSxHQUFHLGFBQWEsQ0FBQzs7QUFFOUIsTUFBSyxDQUFDLEdBQUMsQ0FBQyxFQUFFLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFFLENBQUMsRUFBRTtBQUNwQyxNQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7RUFDM0M7Q0FDRCxDQUFDLENBQUM7O3FCQUVZLE1BQU0iLCJmaWxlIjoiNjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiogIEV2ZW50c1xuKiAgQGRlc2MgQ29udGFpbnMgbWV0aG9kcyBmb3IgbWFuYWdpbmcgYW5kIGRpc3BhdGNoaW5nIGV2ZW50cyBmcm9tIG9iamVjdHMuXG4qICBAcHJvdG8gQmFzaWNcbiovXG5cbmltcG9ydCBCYXNpYyBmcm9tICd0eXBlcy9CYXNpYyc7XG5cbnZhciBFdmVudHMgPSBCYXNpYy5leHRlbmQoZnVuY3Rpb24gKCkge1xuXHR2YXIgaSwgbWV0aG9kLCBtZXRob2RzO1xuXHQvKipcblx0KiAgQGRlc2MgQ3JlYXRlcyBhIGZ1bmN0aW9uIHdpdGggYSBwcm94eSB0byB0aGUgalF1ZXJ5IG1ldGhvZC5cblx0KiAgQHBhcmFtIF9uYW1lIChTdHJpbmcpIFRoZSBuYW1lIG9mIHRoZSBtZXRob2QgYmVpbmcgcHJveGllZC5cblx0KiAgQHJldHVybiAoalF1ZXJ5fCopIEVpdGhlciBhIGpRdWVyeSBvYmplY3Qgb3Igd2hhdGV2ZXIgdGhlIG9yaWdpbmFsIG1ldGhvZCByZXR1cm5zLlxuXHQqICBAcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBjcmVhdGVQcm94eUZ1bmN0aW9uIChfbmFtZSkge1xuXHRcdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgJGpxID0gJCgpO1xuXHRcdFx0Ly8gV2UgbXVzdCB3cmFwIG91ciBvYmplY3QgaW4galF1ZXJ5LiBJZiAndHlwZW9mIHRoaXMnIGlzIGEgZnVuY3Rpb24gdGhlbiB3ZSBuZWVkXG5cdFx0XHQvLyB0byBhZGQgaXQgaW4gdGhpcyBtYW5uZXIsIG90aGVyd2lzZSBqUXVlcnkgdHJlYXRzIGl0IGxpa2UgYSByZWFkeSBjYWxsYmFjay5cblx0XHRcdCRqcS5wdXNoKHRoaXMpO1xuXG5cdFx0XHRyZXR1cm4gJC5mbltfbmFtZV0uYXBwbHkoJGpxLCBhcmd1bWVudHMpO1xuXHRcdH07XG5cdH1cblxuXHRtZXRob2RzID0gWydvbicsICdvZmYnLCAndHJpZ2dlciddO1xuXG5cdHRoaXMuYmFzZVR5cGUgPSAnVFlQRV9FVkVOVFMnO1xuXG5cdGZvciAoaT0wOyBtZXRob2QgPSBtZXRob2RzW2ldOyBpKz0xKSB7XG5cdFx0dGhpc1ttZXRob2RdID0gY3JlYXRlUHJveHlGdW5jdGlvbihtZXRob2QpO1xuXHR9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgRXZlbnRzO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc291cmNlL3R5cGVzL0V2ZW50cy5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 62 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n\\nvar _playGameManagerDraggable = __webpack_require__(63);\\n\\nvar _playGameManagerDraggable2 = _interopRequireDefault(_playGameManagerDraggable);\\n\\nexports.draggable = _playGameManagerDraggable2['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvcGxheS5nYW1lLm1hbmFnZXIuanM/ODJiNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O29EQUFzQixFQUE2Qjs7OztRQUUxQyxTQUFTIiwiZmlsZSI6IjYyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRyYWdnYWJsZSBmcm9tICdwbGF5LmdhbWUubWFuYWdlci5kcmFnZ2FibGUnO1xuXG5leHBvcnQgeyBkcmFnZ2FibGUgfVxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc291cmNlL3BsYXkuZ2FtZS5tYW5hZ2VyLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 63 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n\\nvar _util = __webpack_require__(50);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesCollection = __webpack_require__(64);\\n\\nvar _typesCollection2 = _interopRequireDefault(_typesCollection);\\n\\nvar _typesDimensions = __webpack_require__(36);\\n\\nvar COLLECTION_DRAGABLES = _typesCollection2['default'].create();\\n\\nvar draggableStyleSheet;\\n\\nfunction boot() {\\n\\tcreateHelperStyleSheet();\\n\\tattachEvents();\\n}\\n\\nfunction attachEvents() {\\n\\tvar state, E;\\n\\n\\tE = pl.EVENT;\\n\\n\\t// Disable scrolling on touchDevices (particularly for iOS elastic scroll).\\n\\tif (E.ACTION_MOVE === 'touchmove') attachEvents.disableTouchScroll();\\n\\n\\t$(document).on(E.ACTION_DOWN, function (_event) {\\n\\t\\tvar $draggable, scope, cursor, mode, game, point, transform, helperID, dragStartEvent;\\n\\n\\t\\t$draggable = $(_event.target).closest('[pl-draggable]');\\n\\n\\t\\tif ($draggable.length) {\\n\\t\\t\\tscope = $draggable.scope();\\n\\t\\t\\tcursor = resolveEventPoint(_event, 1 / scope.game.zoom);\\n\\t\\t\\tmode = $draggable.pl('draggable');\\n\\t\\t\\tgame = {\\n\\t\\t\\t\\tposition: scope.game.absolutePosition(),\\n\\t\\t\\t\\tscale: scope.game.transformScale().x\\n\\t\\t\\t};\\n\\t\\t\\tpoint = $draggable.absolutePosition().dec(game.position);\\n\\t\\t\\ttransform = $draggable.transform();\\n\\t\\t\\thelperID = createID();\\n\\t\\t\\tstate = {\\n\\t\\t\\t\\tmode: mode,\\n\\t\\t\\t\\t$draggable: $draggable,\\n\\t\\t\\t\\tscope: scope,\\n\\t\\t\\t\\t$helper: null,\\n\\n\\t\\t\\t\\tstart: {\\n\\t\\t\\t\\t\\tcursor: cursor,\\n\\t\\t\\t\\t\\tpoint: point,\\n\\t\\t\\t\\t\\ttransform: transform\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\tprogress: {\\n\\t\\t\\t\\t\\tdistance: null,\\n\\t\\t\\t\\t\\tpoint: null,\\n\\t\\t\\t\\t\\ttransform: null\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\n\\t\\t\\t// FireFox has a different scaling implementation than other browsers (transform:scale(); vs. zoom:;)\\n\\t\\t\\t// so we need to account for the game transform scale.\\n\\t\\t\\t//\\n\\t\\t\\tif (game.scale !== 1) point = point.scale(1 / game.scale);\\n\\n\\t\\t\\tdraggableStyleSheet.html(provideSource(helperID, createDraggableRule($draggable)));\\n\\n\\t\\t\\tswitch (mode) {\\n\\t\\t\\t\\tcase 'clone':\\n\\t\\t\\t\\t\\tstate.$helper = $draggable.clone();\\n\\t\\t\\t\\t\\tstate.$helper.id(helperID).pl('draggable', null) // helpers are not to be captured as draggable\\n\\t\\t\\t\\t\\t.addClass('draggable-helper').appendTo(document.body).absolutePosition(point);\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tcase 'pluck':\\n\\t\\t\\t\\t\\t$draggable.addClass('PLUCKED');\\n\\n\\t\\t\\t\\t\\tstate.$helper = $draggable.clone();\\n\\t\\t\\t\\t\\tstate.$helper.id(helperID).pl('draggable', null) // helpers are not to be captured as draggable\\n\\t\\t\\t\\t\\t.addClass('draggable-helper').appendTo(document.body).absolutePosition(point);\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\tstate.$helper = $draggable;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\tstate.$helper.removeClass('DRAG-ENDED').addClass('DRAG-START');\\n\\n\\t\\t\\tdragStartEvent = $.Event('drag-start', {\\n\\t\\t\\t\\tstate: state,\\n\\t\\t\\t\\ttargetScope: scope\\n\\t\\t\\t});\\n\\n\\t\\t\\tscope.trigger(dragStartEvent);\\n\\t\\t}\\n\\t}).on(E.ACTION_MOVE, function (_event) {\\n\\t\\tvar cursor, $draggable, distance, point, transform, dragMoveEvent;\\n\\n\\t\\tif (state) {\\n\\t\\t\\tcursor = resolveEventPoint(_event, 1 / state.scope.game.zoom);\\n\\t\\t\\tdistance = state.start.cursor.distance(cursor);\\n\\t\\t\\tpoint = _typesDimensions.Point.create();\\n\\t\\t\\ttransform = null;\\n\\n\\t\\t\\tif (state.start.transform !== 'none') {\\n\\t\\t\\t\\ttransform = state.start.transform.clone();\\n\\t\\t\\t\\ttransform.translate(distance.width, distance.height);\\n\\t\\t\\t\\tpoint.set(transform.applyToPoint(0, 0));\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tpoint = distance.to('point');\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (state.$helper.hasClass('DRAG-START')) {\\n\\t\\t\\t\\tstate.$helper.removeClass('DRAG-START').addClass('DRAGGING');\\n\\t\\t\\t}\\n\\n\\t\\t\\tdragMoveEvent = $.Event('drag-move', {\\n\\t\\t\\t\\tstate: state,\\n\\t\\t\\t\\ttargetScope: state.scope\\n\\t\\t\\t});\\n\\n\\t\\t\\tstate.progress.distance = distance;\\n\\t\\t\\tstate.progress.point = state.start.point.inc(point);\\n\\t\\t\\tstate.progress.transform = transform;\\n\\n\\t\\t\\tstate.scope.translate(state.$helper, point);\\n\\t\\t\\tstate.scope.trigger(dragMoveEvent);\\n\\t\\t}\\n\\t}).on([E.ACTION_UP, E.ACTION_OUT].join(' '), function (_event) {\\n\\t\\tvar $draggable, dragEndEvent;\\n\\n\\t\\tif (state) {\\n\\t\\t\\t// Do not end dragging if we dont mouse out of the document.\\n\\t\\t\\tif (_event.type === 'mouseout' && ! ~[null, document.documentElement].indexOf(_event.toElement)) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t$draggable = state.$draggable;\\n\\n\\t\\t\\tif (state.$helper.hasClass('draggable-helper')) {\\n\\t\\t\\t\\tstate.$helper.on('transitionend', function () {\\n\\t\\t\\t\\t\\t$draggable.removeClass('PLUCKED');\\n\\t\\t\\t\\t\\t$(this).remove();\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\tstate.$helper.removeClass('DRAG-START DRAGGING').addClass('DRAG-ENDED');\\n\\n\\t\\t\\tdragEndEvent = $.Event('drag-end', {\\n\\t\\t\\t\\tstate: state,\\n\\t\\t\\t\\ttargetScope: state.scope\\n\\t\\t\\t});\\n\\n\\t\\t\\tstate.scope.trigger(dragEndEvent);\\n\\n\\t\\t\\tstate = null;\\n\\t\\t}\\n\\t});\\n}\\n\\nattachEvents.disableTouchScroll = function () {\\n\\tdocument.addEventListener(\\\"touchmove\\\", function (_event) {\\n\\t\\t_event.preventDefault();\\n\\t}, false);\\n};\\n\\nfunction resolveEventPoint(_event, _scale) {\\n\\tvar scale = _scale || 1;\\n\\n\\tif (_event.originalEvent && _event.originalEvent.changedTouches) {\\n\\t\\t/**\\n   * For now, interactions should use the last touch if multiple fingers are captured.\\n   * @todo Maybe invoke action for each touch.\\n   */\\n\\t\\t_event.touch = _event.originalEvent.changedTouches[_event.originalEvent.changedTouches.length - 1];\\n\\t}\\n\\n\\treturn _typesDimensions.Point.create().set(new function () {\\n\\t\\tif (_event.touch) {\\n\\t\\t\\tthis.x = _event.touch.clientX * scale;\\n\\t\\t\\tthis.y = _event.touch.clientY * scale;\\n\\t\\t} else {\\n\\t\\t\\tthis.x = _event.clientX * scale;\\n\\t\\t\\tthis.y = _event.clientY * scale;\\n\\t\\t}\\n\\t}());\\n}\\n\\nfunction createHelperStyleSheet() {\\n\\tdraggableStyleSheet = $('<style id=\\\"draggable-helper-css\\\" type=\\\"text/css\\\"></style>').appendTo(document.body);\\n}\\n\\nfunction createDraggableRule(_$draggable) {\\n\\tvar i, style, blacklist, rule, prop;\\n\\n\\tstyle = window.getComputedStyle(_$draggable[0]);\\n\\trule = {};\\n\\tblacklist = [\\\"zIndex\\\", \\\"opacity\\\", \\\"cursor\\\", \\\"transition\\\", \\\"transitionDelay\\\", \\\"transitionDuration\\\", \\\"transitionProperty\\\", \\\"transitionTimingFunction\\\"];\\n\\n\\tfor (i = 0; i < style.length; i += 1) {\\n\\t\\tprop = _util2['default'].transformId(style[i], true);\\n\\t\\tif (~blacklist.indexOf(prop)) continue;\\n\\t\\tif (prop.indexOf('Webkit') === 0) prop = prop.slice(0, 1).toLowerCase() + prop.slice(1);\\n\\t\\tif (style[prop]) rule[prop] = style[prop];\\n\\t}\\n\\n\\treturn rule;\\n}\\n\\nfunction provideSource(_id, _rule) {\\n\\tvar source, prop, value;\\n\\n\\tsource = '#' + _id + '.draggable-helper {';\\n\\n\\tfor (prop in _rule) {\\n\\t\\tif (!_rule.hasOwnProperty(prop)) continue;\\n\\t\\tvalue = _rule[prop];\\n\\t\\tsource += prop.replace(/([A-Z]+)/g, '-$1').toLowerCase() + ': ' + value + ';';\\n\\t}\\n\\n\\tsource += '}';\\n\\n\\treturn source;\\n};\\n\\nfunction createID() {\\n\\treturn 'xy-xyxy-y'.replace(/x|y/g, function (_token) {\\n\\t\\tif (_token === 'x') return (Math.floor(Math.random() * 5) + 10).toString(16);\\n\\t\\treturn Math.floor(Math.random() * Date.now()).toString(16).slice(2);\\n\\t});\\n}\\n\\nvar draggableManager = {};\\n\\n$(boot);\\n\\nexports['default'] = draggableManager;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 64 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Collections are iterables which hold a consistent interface throughout its indexes.\\n *\\n * @module\\n * @requires module:types/BasicArray\\n */\\n\\nvar _typesBasicArray = __webpack_require__(49);\\n\\nvar _typesBasicArray2 = _interopRequireDefault(_typesBasicArray);\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. use `Collection.create()` to get a new instance.\\n * @classdesc Iterable holding record objects of the same interface.\\n * @class\\n * @extends module:types/BasicArray~BasicArray\\n */\\nvar Collection = _typesBasicArray2['default'].extend(function () {\\n\\t/**\\n  * Gets the record object which has `_member` as a member.\\n  * @instance\\n  * @protected\\n  * @memberof module:types/Collection~Collection\\n  * @arg {*} _member - object reference to search for.\\n  * @arg {string} _key - the target key to test the `_member` against.\\n  * @arg {boolean} _shouldCollect - <span style=\\\"color: blue; font-weight: bold;\\\">`true`</span>: collect all matching elements.<br>\\n  * <span style=\\\"color: blue; font-weight: bold;\\\">`false`</span>: return first result.\\n  */\\n\\tfunction getRecord(_member, _key, _shouldCollect) {\\n\\t\\tvar i, record, member, result;\\n\\n\\t\\tresult = [];\\n\\n\\t\\tfor (i = 0; record = this[i]; i += 1) {\\n\\t\\t\\tif (_key !== undefined) {\\n\\t\\t\\t\\tif (record[_key] === _member) {\\n\\t\\t\\t\\t\\tif (_shouldCollect) {\\n\\t\\t\\t\\t\\t\\tresult.push(record);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\treturn record;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (record instanceof Array) {\\n\\t\\t\\t\\tif (~record.indexOf(_member)) {\\n\\t\\t\\t\\t\\tif (_shouldCollect) {\\n\\t\\t\\t\\t\\t\\tresult.push(record);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\treturn record;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tfor (member in record) {\\n\\t\\t\\t\\t\\tif (!record.hasOwnProperty(member)) continue;\\n\\t\\t\\t\\t\\tif (record[member] === _member) {\\n\\t\\t\\t\\t\\t\\tif (_shouldCollect) {\\n\\t\\t\\t\\t\\t\\t\\tresult.push(record);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\treturn record;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn result.length ? result : null;\\n\\t}\\n\\n\\t/**\\n  * Objects with this as an own property will be identified as the root object.\\n  * @memberof module:types/Collection~Collection\\n  * @readonly\\n  * @default\\n  */\\n\\tthis.baseType = 'TYPE_COLLECTION';\\n\\n\\tthis.add = function (_record) {\\n\\t\\tif (~this.indexOf(_record)) return false;\\n\\t\\tthis.push(_record);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.remove = function (_record) {\\n\\t\\tvar index;\\n\\n\\t\\tindex = this.indexOf(_record);\\n\\t\\tif (~index) this.splice(index, 1);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.has = function (_record) {\\n\\t\\treturn !! ~this.indexOf(_record);\\n\\t};\\n\\n\\tthis.get = function (_member, _key) {\\n\\t\\treturn getRecord.call(this, _member, _key);\\n\\t};\\n\\n\\tthis.filter = function (_member, _key) {\\n\\t\\treturn getRecord.call(this, _member, _key, true);\\n\\t};\\n});\\n\\nexports['default'] = Collection;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvQ29sbGVjdGlvbi5qcz9lN2RjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7MkNBTXVCLEVBQWtCOzs7Ozs7Ozs7O0FBUXpDLElBQUksVUFBVSxHQUFHLDZCQUFXLE1BQU0sQ0FBQyxZQUFZOzs7Ozs7Ozs7OztBQVc5QyxVQUFTLFNBQVMsQ0FBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRTtBQUNsRCxNQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQzs7QUFFOUIsUUFBTSxHQUFHLEVBQUUsQ0FBQzs7QUFFWixPQUFLLENBQUMsR0FBQyxDQUFDLEVBQUUsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUUsQ0FBQyxFQUFFO0FBQ2pDLE9BQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtBQUN2QixRQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxPQUFPLEVBQUU7QUFDN0IsU0FBSSxjQUFjLEVBQUU7QUFDbkIsWUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztNQUNwQixNQUVJO0FBQ0osYUFBTyxNQUFNLENBQUM7TUFDZDtLQUNEO0lBQ0QsTUFFSSxJQUFJLE1BQU0sWUFBWSxLQUFLLEVBQUU7QUFDakMsUUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDN0IsU0FBSSxjQUFjLEVBQUU7QUFDbkIsWUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztNQUNwQixNQUVJO0FBQ0osYUFBTyxNQUFNLENBQUM7TUFDZDtLQUNEO0lBQ0QsTUFFSTtBQUNKLFNBQUssTUFBTSxJQUFJLE1BQU0sRUFBRTtBQUN0QixTQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRSxTQUFTO0FBQzdDLFNBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLE9BQU8sRUFBRTtBQUMvQixVQUFJLGNBQWMsRUFBRTtBQUNuQixhQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO09BQ3BCLE1BRUk7QUFDSixjQUFPLE1BQU0sQ0FBQztPQUNkO01BQ0Q7S0FDRDtJQUNEO0dBQ0Q7O0FBRUQsU0FBTyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUM7RUFDckM7Ozs7Ozs7O0FBUUQsS0FBSSxDQUFDLFFBQVEsR0FBRyxpQkFBaUIsQ0FBQzs7QUFFbEMsS0FBSSxDQUFDLEdBQUcsR0FBRyxVQUFVLE9BQU8sRUFBRTtBQUM3QixNQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxPQUFPLEtBQUssQ0FBQztBQUN6QyxNQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDOztBQUVuQixTQUFPLElBQUksQ0FBQztFQUNaLENBQUM7O0FBRUYsS0FBSSxDQUFDLE1BQU0sR0FBRyxVQUFVLE9BQU8sRUFBRTtBQUNoQyxNQUFJLEtBQUssQ0FBQzs7QUFFVixPQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM5QixNQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDOztBQUVsQyxTQUFPLElBQUksQ0FBQztFQUNaLENBQUM7O0FBRUYsS0FBSSxDQUFDLEdBQUcsR0FBRyxVQUFVLE9BQU8sRUFBRTtBQUM3QixTQUFPLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7RUFDaEMsQ0FBQzs7QUFFRixLQUFJLENBQUMsR0FBRyxHQUFHLFVBQVUsT0FBTyxFQUFFLElBQUksRUFBRTtBQUNuQyxTQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztFQUMzQyxDQUFDOztBQUVGLEtBQUksQ0FBQyxNQUFNLEdBQUcsVUFBVSxPQUFPLEVBQUUsSUFBSSxFQUFFO0FBQ3RDLFNBQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztFQUNqRCxDQUFDO0NBRUYsQ0FBQyxDQUFDOztxQkFFWSxVQUFVIiwiZmlsZSI6IjY0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb2xsZWN0aW9ucyBhcmUgaXRlcmFibGVzIHdoaWNoIGhvbGQgYSBjb25zaXN0ZW50IGludGVyZmFjZSB0aHJvdWdob3V0IGl0cyBpbmRleGVzLlxuICpcbiAqIEBtb2R1bGVcbiAqIEByZXF1aXJlcyBtb2R1bGU6dHlwZXMvQmFzaWNBcnJheVxuICovXG5pbXBvcnQgQmFzaWNBcnJheSBmcm9tICd0eXBlcy9CYXNpY0FycmF5JztcblxuLyoqXG4gKiA8c3BhbiBjbGFzcz1cImltcG9ydGFudFwiPk5PVEU6PC9zcGFuPiBUaGlzIGlzIE5PVCBhIGNvbnN0cnVjdG9yLiB1c2UgYENvbGxlY3Rpb24uY3JlYXRlKClgIHRvIGdldCBhIG5ldyBpbnN0YW5jZS5cbiAqIEBjbGFzc2Rlc2MgSXRlcmFibGUgaG9sZGluZyByZWNvcmQgb2JqZWN0cyBvZiB0aGUgc2FtZSBpbnRlcmZhY2UuXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIG1vZHVsZTp0eXBlcy9CYXNpY0FycmF5fkJhc2ljQXJyYXlcbiAqL1xudmFyIENvbGxlY3Rpb24gPSBCYXNpY0FycmF5LmV4dGVuZChmdW5jdGlvbiAoKSB7XG5cdC8qKlxuXHQgKiBHZXRzIHRoZSByZWNvcmQgb2JqZWN0IHdoaWNoIGhhcyBgX21lbWJlcmAgYXMgYSBtZW1iZXIuXG5cdCAqIEBpbnN0YW5jZVxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBtZW1iZXJvZiBtb2R1bGU6dHlwZXMvQ29sbGVjdGlvbn5Db2xsZWN0aW9uXG5cdCAqIEBhcmcgeyp9IF9tZW1iZXIgLSBvYmplY3QgcmVmZXJlbmNlIHRvIHNlYXJjaCBmb3IuXG5cdCAqIEBhcmcge3N0cmluZ30gX2tleSAtIHRoZSB0YXJnZXQga2V5IHRvIHRlc3QgdGhlIGBfbWVtYmVyYCBhZ2FpbnN0LlxuXHQgKiBAYXJnIHtib29sZWFufSBfc2hvdWxkQ29sbGVjdCAtIDxzcGFuIHN0eWxlPVwiY29sb3I6IGJsdWU7IGZvbnQtd2VpZ2h0OiBib2xkO1wiPmB0cnVlYDwvc3Bhbj46IGNvbGxlY3QgYWxsIG1hdGNoaW5nIGVsZW1lbnRzLjxicj5cblx0ICogPHNwYW4gc3R5bGU9XCJjb2xvcjogYmx1ZTsgZm9udC13ZWlnaHQ6IGJvbGQ7XCI+YGZhbHNlYDwvc3Bhbj46IHJldHVybiBmaXJzdCByZXN1bHQuXG5cdCAqL1xuXHRmdW5jdGlvbiBnZXRSZWNvcmQgKF9tZW1iZXIsIF9rZXksIF9zaG91bGRDb2xsZWN0KSB7XG5cdFx0dmFyIGksIHJlY29yZCwgbWVtYmVyLCByZXN1bHQ7XG5cblx0XHRyZXN1bHQgPSBbXTtcblxuXHRcdGZvciAoaT0wOyByZWNvcmQgPSB0aGlzW2ldOyBpKz0xKSB7XG5cdFx0XHRpZiAoX2tleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGlmIChyZWNvcmRbX2tleV0gPT09IF9tZW1iZXIpIHtcblx0XHRcdFx0XHRpZiAoX3Nob3VsZENvbGxlY3QpIHtcblx0XHRcdFx0XHRcdHJlc3VsdC5wdXNoKHJlY29yZCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVjb3JkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRlbHNlIGlmIChyZWNvcmQgaW5zdGFuY2VvZiBBcnJheSkge1xuXHRcdFx0XHRpZiAofnJlY29yZC5pbmRleE9mKF9tZW1iZXIpKSB7XG5cdFx0XHRcdFx0aWYgKF9zaG91bGRDb2xsZWN0KSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQucHVzaChyZWNvcmQpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlY29yZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdGZvciAobWVtYmVyIGluIHJlY29yZCkge1xuXHRcdFx0XHRcdGlmICghcmVjb3JkLmhhc093blByb3BlcnR5KG1lbWJlcikpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdGlmIChyZWNvcmRbbWVtYmVyXSA9PT0gX21lbWJlcikge1xuXHRcdFx0XHRcdFx0aWYgKF9zaG91bGRDb2xsZWN0KSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdC5wdXNoKHJlY29yZCk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVjb3JkO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQubGVuZ3RoID8gcmVzdWx0IDogbnVsbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBPYmplY3RzIHdpdGggdGhpcyBhcyBhbiBvd24gcHJvcGVydHkgd2lsbCBiZSBpZGVudGlmaWVkIGFzIHRoZSByb290IG9iamVjdC5cblx0ICogQG1lbWJlcm9mIG1vZHVsZTp0eXBlcy9Db2xsZWN0aW9ufkNvbGxlY3Rpb25cblx0ICogQHJlYWRvbmx5XG5cdCAqIEBkZWZhdWx0XG5cdCAqL1xuXHR0aGlzLmJhc2VUeXBlID0gJ1RZUEVfQ09MTEVDVElPTic7XG5cblx0dGhpcy5hZGQgPSBmdW5jdGlvbiAoX3JlY29yZCkge1xuXHRcdGlmICh+dGhpcy5pbmRleE9mKF9yZWNvcmQpKSByZXR1cm4gZmFsc2U7XG5cdFx0dGhpcy5wdXNoKF9yZWNvcmQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0dGhpcy5yZW1vdmUgPSBmdW5jdGlvbiAoX3JlY29yZCkge1xuXHRcdHZhciBpbmRleDtcblxuXHRcdGluZGV4ID0gdGhpcy5pbmRleE9mKF9yZWNvcmQpO1xuXHRcdGlmICh+aW5kZXgpIHRoaXMuc3BsaWNlKGluZGV4LCAxKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdHRoaXMuaGFzID0gZnVuY3Rpb24gKF9yZWNvcmQpIHtcblx0XHRyZXR1cm4gISF+dGhpcy5pbmRleE9mKF9yZWNvcmQpO1xuXHR9O1xuXG5cdHRoaXMuZ2V0ID0gZnVuY3Rpb24gKF9tZW1iZXIsIF9rZXkpIHtcblx0XHRyZXR1cm4gZ2V0UmVjb3JkLmNhbGwodGhpcywgX21lbWJlciwgX2tleSk7XG5cdH07XG5cblx0dGhpcy5maWx0ZXIgPSBmdW5jdGlvbiAoX21lbWJlciwgX2tleSkge1xuXHRcdHJldHVybiBnZXRSZWNvcmQuY2FsbCh0aGlzLCBfbWVtYmVyLCBfa2V5LCB0cnVlKTtcblx0fTtcblxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IENvbGxlY3Rpb247XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NvdXJjZS90eXBlcy9Db2xsZWN0aW9uLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 65 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"exports.__esModule = true;\\n/**\\n*  GlobalScope\\n*/\\n\\nvar _typesScope = __webpack_require__(66);\\n\\nvar GlobalScope = _typesScope.Scope.extend(function () {\\n\\n\\tthis.baseType = 'TYPE_GLOBAL_SCOPE';\\n});\\n\\nexports['default'] = GlobalScope;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvR2xvYmFsU2NvcGUuanM/ZmE3YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztzQ0FJc0IsRUFBYTs7QUFFbkMsSUFBSSxXQUFXLEdBQUcsa0JBQU0sTUFBTSxDQUFDLFlBQVk7O0FBRTFDLEtBQUksQ0FBQyxRQUFRLEdBQUcsbUJBQW1CLENBQUM7Q0FFcEMsQ0FBQyxDQUFDOztxQkFFWSxXQUFXIiwiZmlsZSI6IjY1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4qICBHbG9iYWxTY29wZVxuKi9cblxuaW1wb3J0IHsgU2NvcGUgfSBmcm9tICd0eXBlcy9TY29wZSc7XG5cbnZhciBHbG9iYWxTY29wZSA9IFNjb3BlLmV4dGVuZChmdW5jdGlvbiAoKSB7XG5cdFxuXHR0aGlzLmJhc2VUeXBlID0gJ1RZUEVfR0xPQkFMX1NDT1BFJztcblxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEdsb2JhbFNjb3BlO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc291cmNlL3R5cGVzL0dsb2JhbFNjb3BlLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 66 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Scopes are packages which contain a reference to a DOM element wrapped in a jQuery object.\\n * This enables properties and methods to be in context of the DOM node and its descendants.\\n *\\n * @module\\n * @requires types/jQProxy\\n * @requires types/Basic\\n * @requires types/Queue\\n * @requires play.game\\n * @requires util\\n * @requires evalAction\\n *\\n * @exports createEntity\\n */\\n\\nvar _typesJQProxy = __webpack_require__(67);\\n\\nvar _typesJQProxy2 = _interopRequireDefault(_typesJQProxy);\\n\\nvar _typesBasic = __webpack_require__(51);\\n\\nvar _typesBasic2 = _interopRequireDefault(_typesBasic);\\n\\nvar _typesQueue = __webpack_require__(72);\\n\\nvar _typesQueue2 = _interopRequireDefault(_typesQueue);\\n\\nvar _typesDimensions = __webpack_require__(36);\\n\\nvar _playGame = __webpack_require__(59);\\n\\nvar _playGame2 = _interopRequireDefault(_playGame);\\n\\nvar _util = __webpack_require__(50);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _evalAction = __webpack_require__(73);\\n\\nvar _evalAction2 = _interopRequireDefault(_evalAction);\\n\\nvar _typesAudioManager = __webpack_require__(74);\\n\\n/**\\n * Creates a new Enitiy instance with a context node and implementation.\\n * The instance is prototyped from the parent scope.\\n *\\n * @memberof module:types/Scope~Scope#createEntity\\n * @protected\\n * @arg {jQuery} _$node - jQuery object with a single node in the collection.\\n * @arg {function|object} _implementation - Constructor function or object with the entity behavior.\\n * @returns {module:types/Scope~Scope}\\n */\\nfunction createEntity(_$node, _implementation) {\\n\\tvar component, prototype, componentRecord, instance;\\n\\n\\tcomponent = _$node.attr('pl-component');\\n\\tprototype = this;\\n\\n\\tif (component) {\\n\\t\\tcomponentRecord = _playGame2['default'].component.get(component);\\n\\n\\t\\tif (componentRecord) {\\n\\t\\t\\t// If a scope is being defined as an extention of a component before the component scope\\n\\t\\t\\t// has been allocated, we construct the component first then pass it as the proto.\\n\\t\\t\\t// But we need to make sure we are not allocating the component it self.\\n\\t\\t\\tif (componentRecord.implementation !== _implementation) {\\n\\t\\t\\t\\tprototype = this.extend(componentRecord.implementation);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tthrow new Error('No implementation record for the ' + component + 'component.');\\n\\t\\t}\\n\\t}\\n\\n\\tinstance = typeof _implementation === 'function' ? prototype.extend(_implementation) : prototype.create();\\n\\n\\treturn instance.initialize(_$node, component);\\n}\\n\\n/**\\n * <span class=\\\"important\\\">NOTE:</span> This is NOT a constructor. Use `Scope.create()` to get a new instance.\\n * @classdesc A package which contains a reference to a DOM node wrapped in a jQuery object. For more information on scopes read [this]{@link module:types/Scope}.\\n * @class\\n * @extends module:types/jQProxy~jQProxy\\n */\\nvar Scope = _typesJQProxy2['default'].extend(function () {\\n\\n\\t/**\\n  * Collection of records pairing a node with its action.\\n  * @memberof module:types/Scope~Scope\\n  * @static\\n  * @protected\\n  * @todo Convert to types/Collection\\n  */\\n\\tvar Actionables;\\n\\n\\tfunction attachActionHandler() {\\n\\t\\tthis.on(pl.EVENT.ACTION, function (_event) {\\n\\t\\t\\tvar target, record;\\n\\n\\t\\t\\ttarget = $(_event.target).closest('[pl-action]')[0];\\n\\n\\t\\t\\tif (_event.originalEvent && _event.originalEvent.changedTouches) {\\n\\t\\t\\t\\t/**\\n     * For now, interactions should use the last touch if multiple fingers are captured.\\n     * @todo Maybe invoke action for each touch.\\n     */\\n\\t\\t\\t\\t_event.touch = _event.originalEvent.changedTouches[_event.originalEvent.changedTouches.length - 1];\\n\\t\\t\\t}\\n\\n\\t\\t\\t_event.cursor = _typesDimensions.Point.create().set(new function () {\\n\\t\\t\\t\\tif (_event.touch) {\\n\\t\\t\\t\\t\\tthis.x = _event.touch.clientX;\\n\\t\\t\\t\\t\\tthis.y = _event.touch.clientY;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tthis.x = _event.clientX;\\n\\t\\t\\t\\t\\tthis.y = _event.clientY;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}());\\n\\n\\t\\t\\tif (target) {\\n\\t\\t\\t\\trecord = this.actionables.item(target);\\n\\n\\t\\t\\t\\tif (record) {\\n\\t\\t\\t\\t\\t_event.targetScope = this;\\n\\t\\t\\t\\t\\tthis.event = _event;\\n\\t\\t\\t\\t\\t_evalAction2['default'](record.action, this);\\n\\t\\t\\t\\t\\tthis.event = null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\n\\tfunction getRecordBy(_key, _member, _collection) {\\n\\t\\tvar i, record;\\n\\n\\t\\tif (_collection) {\\n\\t\\t\\tfor (i = 0; record = _collection[i]; i += 1) {\\n\\t\\t\\t\\tif (record[_key] === _member) return record;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t}\\n\\n\\tfunction removeRecord(_record, _collection) {\\n\\t\\tvar index;\\n\\n\\t\\tindex = _collection.indexOf(_record);\\n\\t\\tif (~index) _collection.splice(index, 1);\\n\\t}\\n\\n\\tfunction captureDropables(_scope) {\\n\\t\\tvar collection;\\n\\n\\t\\tcollection = [];\\n\\n\\t\\t_scope.find('> [pl-pluck]').each(function () {\\n\\t\\t\\tvar name;\\n\\n\\t\\t\\tname = $(this).attr('pl-pluck');\\n\\n\\t\\t\\tcollection.push(this);\\n\\t\\t\\tcollection[name] = this;\\n\\t\\t});\\n\\n\\t\\treturn collection;\\n\\t}\\n\\n\\tfunction pluckAndDrop(_dropables, _template) {\\n\\t\\t$(_template).find('[pl-drop]').each(function () {\\n\\t\\t\\tvar $node, name, dropable;\\n\\n\\t\\t\\t$node = $(this);\\n\\t\\t\\tname = $node.attr('pl-drop');\\n\\t\\t\\tdropable = _dropables[name];\\n\\n\\t\\t\\tif (dropable) {\\n\\t\\t\\t\\t$node.replaceWith(dropable.children);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\n\\t// Protected\\n\\tfunction loadComponentAssets(_name, _callback) {\\n\\t\\tvar scope, path, totalRequests, transcludeMode, dropables;\\n\\n\\t\\tfunction ready() {\\n\\t\\t\\tready.status += 1;\\n\\n\\t\\t\\tif (ready.status === totalRequests) {\\n\\t\\t\\t\\tif (_callback) {\\n\\t\\t\\t\\t\\t_callback.call(scope, _name);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\ttotalRequests = 0;\\n\\t\\tscope = this;\\n\\t\\tpath = _playGame2['default'].config('componentDirectory') + _name + '/';\\n\\t\\tdropables = captureDropables(this);\\n\\t\\ttranscludeMode = dropables.length ? this.TRANSCLUDE_PLUCK : this.properties.transclude;\\n\\t\\tready.status = 0;\\n\\n\\t\\tif (!this.children().length || transcludeMode) {\\n\\t\\t\\ttotalRequests += 1;\\n\\t\\t\\t$('<div>').load(path + 'template.html', function () {\\n\\t\\t\\t\\tvar memory;\\n\\n\\t\\t\\t\\tmemory = [];\\n\\n\\t\\t\\t\\tswitch (transcludeMode) {\\n\\t\\t\\t\\t\\tcase scope.TRANSCLUDE_APPEND:\\n\\t\\t\\t\\t\\t\\tscope.append(this.children);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase scope.TRANSCLUDE_PREPEND:\\n\\t\\t\\t\\t\\t\\tscope.prepend(this.children);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase scope.TRANSCLUDE_PLUCK:\\n\\t\\t\\t\\t\\t\\tpluckAndDrop(dropables, this);\\n\\t\\t\\t\\t\\t\\tscope.empty().append(this.children);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase scope.TRANSCLUDE_REPLACE:\\n\\t\\t\\t\\t\\t\\tscope.empty().append(this.children);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\tif (transcludeMode) {\\n\\t\\t\\t\\t\\t\\t\\tpluckAndDrop(new function () {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis[transcludeMode] = scope.node();\\n\\t\\t\\t\\t\\t\\t\\t}(), this);\\n\\t\\t\\t\\t\\t\\t\\tscope.empty().append(this.children);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\tscope.empty().append(this.children);\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tscope.findOwn('[pl-component]').each(function () {\\n\\t\\t\\t\\t\\tvar name;\\n\\n\\t\\t\\t\\t\\tname = $(this).attr('pl-component');\\n\\n\\t\\t\\t\\t\\tif (~memory.indexOf(name)) return;\\n\\n\\t\\t\\t\\t\\tmemory.push(name);\\n\\n\\t\\t\\t\\t\\ttotalRequests += 1;\\n\\n\\t\\t\\t\\t\\t_playGame2['default'].component.load(name, function () {\\n\\t\\t\\t\\t\\t\\tready();\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\tready();\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tif (!$('style[pl-for-component=\\\"' + _name + '\\\"]').length && _playGame2['default'].config('shouldLoadComponentStyles') !== false) {\\n\\t\\t\\ttotalRequests += 1;\\n\\t\\t\\t$('<style type=\\\"text/css\\\" pl-for-component=\\\"' + _name + '\\\">').load(path + 'style.css', ready).appendTo(document.body);\\n\\t\\t}\\n\\n\\t\\tif (!totalRequests) _callback && _callback.call(this, _name);\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\tfunction captureProperties() {\\n\\t\\tvar i, attr, name, collection;\\n\\n\\t\\tcollection = (function () {\\n\\n\\t\\t\\tthis.has = function (_name) {\\n\\t\\t\\t\\treturn !! ~this.indexOf(_name);\\n\\t\\t\\t};\\n\\n\\t\\t\\treturn this;\\n\\t\\t}).call([]);\\n\\n\\t\\tfor (i = 0; attr = this.$els[0].attributes[i]; i += 1) {\\n\\t\\t\\t// I explicitly want it to be at the beginning.\\n\\t\\t\\tif (attr.name.indexOf('pl-') === 0) {\\n\\t\\t\\t\\tname = attr.name.slice(3);\\n\\t\\t\\t\\tcollection[_util2['default'].transformId(name, true)] = attr.value;\\n\\n\\t\\t\\t\\tcollection.push(name);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (collection.length) this.properties = collection;\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\tfunction initializeEntities() {\\n\\t\\tif (!this.hasOwnProperty('entities')) return this;\\n\\n\\t\\tthis.entities.forEach(this.bind(function (_record, _index) {\\n\\t\\t\\tvar $nodes, query, index;\\n\\n\\t\\t\\t$nodes = this.findOwn(_record.selector);\\n\\t\\t\\tquery = ['#' + _record.selector, '[pl-id=' + _record.selector + ']', '[pl-component=' + _record.selector + ']', '[pl-' + _record.selector + ']'];\\n\\t\\t\\tindex = 0;\\n\\n\\t\\t\\twhile (!$nodes.length) {\\n\\t\\t\\t\\tif (index === query.length) {\\n\\t\\t\\t\\t\\tthrow new Error(\\\"Unable to locate entity with selector\\\", _record.selector);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t$nodes = this.findOwn(query[index]);\\n\\t\\t\\t\\tindex += 1;\\n\\t\\t\\t}\\n\\n\\t\\t\\t$nodes.each(this.bind(function (_index, _node) {\\n\\t\\t\\t\\tvar $node, instance, id;\\n\\n\\t\\t\\t\\t$node = $(_node);\\n\\n\\t\\t\\t\\tif (!Scope.isPrototypeOf(_record)) {\\n\\t\\t\\t\\t\\tinstance = createEntity.call(this, $node, _record.implementation);\\n\\t\\t\\t\\t\\tif (!instance.isReady) this.assetQueue.add(instance);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tinstance = _record;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tid = _util2['default'].transformId(instance.id(), true);\\n\\t\\t\\t\\tif (id) _util2['default'].assignRef(this, id, instance);\\n\\t\\t\\t}));\\n\\t\\t}));\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\tfunction handleProperties() {\\n\\t\\tvar scope, property, handler;\\n\\n\\t\\tscope = this;\\n\\n\\t\\tif (this.hasOwnProperty('properties')) {\\n\\t\\t\\tthis.properties.forEach(function (_name) {\\n\\t\\t\\t\\thandler = scope.propertyHandlers[_name];\\n\\t\\t\\t\\tif (handler) handler.call(scope, scope.$els[0], _name, scope.properties[_name]);\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tif (this.propertyHandlers) {\\n\\t\\t\\tfor (property in this.propertyHandlers) {\\n\\t\\t\\t\\t// Only exclide members on the base type.\\n\\t\\t\\t\\tif (_typesBasic2['default'].hasOwnProperty(property)) continue;\\n\\n\\t\\t\\t\\thandler = this.propertyHandlers[property];\\n\\n\\t\\t\\t\\tthis.findOwn('[pl-' + property + ']').each(function () {\\n\\t\\t\\t\\t\\tvar attr;\\n\\n\\t\\t\\t\\t\\tif (scope === $(this).scope()) {\\n\\t\\t\\t\\t\\t\\tattr = this.attributes.getNamedItem('pl-' + property);\\n\\n\\t\\t\\t\\t\\t\\tif (handler) handler.call(scope, this, property, attr.value);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\tfunction invokeLocal(_name) {\\n\\t\\tvar args, owner;\\n\\n\\t\\targs = [].slice.call(arguments, 1);\\n\\n\\t\\tif (this.isMemberSafe(_name)) {\\n\\t\\t\\treturn this[_name].apply(this, arguments);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction init() {\\n\\t\\tvar willInitEvent, initEvent;\\n\\n\\t\\tinitEvent = $.Event('initialize', { targetScope: this });\\n\\t\\twillInitEvent = $.Event('will-initialize', { targetScope: this });\\n\\n\\t\\tinvokeLocal.call(this, 'willInit');\\n\\t\\tthis.trigger(willInitEvent);\\n\\n\\t\\tthis.attachEvents();\\n\\n\\t\\tinitializeEntities.call(this);\\n\\t\\thandleProperties.call(this);\\n\\n\\t\\tthis.watchAssets();\\n\\t\\tthis.captureAudioAssets();\\n\\t\\tthis.captureReferences();\\n\\n\\t\\tthis.__init();\\n\\t\\tinvokeLocal.call(this, 'init');\\n\\n\\t\\tthis.trigger(initEvent);\\n\\n\\t\\tif (!this.isReady) this.assetQueue.ready();\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\tfunction ready() {\\n\\t\\tvar readyEvent, entities;\\n\\n\\t\\treadyEvent = $.Event('ready', { targetScope: this });\\n\\t\\tentities = this.findOwn('.pl-scope').scope();\\n\\n\\t\\tif (entities) {\\n\\t\\t\\tif (entities.length > 0) {\\n\\t\\t\\t\\tthis.entities = entities;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.entities = [entities];\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t/**\\n   * Sort audio into DOM order.\\n   * @todo Consider including this into `AudioManager`. Micah: 2/23/2016.\\n   */\\n\\t\\tif (this.hasOwnProperty('audio')) {\\n\\t\\t\\t(this.game || this).media.addShadow(this.audio);\\n\\t\\t\\tthis.audio.collections().forEach((function (_collection) {\\n\\t\\t\\t\\tvar map = {\\n\\t\\t\\t\\t\\tvoiceOver: 'voice-over',\\n\\t\\t\\t\\t\\tbackground: 'background',\\n\\t\\t\\t\\t\\tsfx: 'sfx'\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\tif (!_collection.length) return;\\n\\n\\t\\t\\t\\tthis.findOwn('audio.' + map[_collection.type]).each(function (_index, _node) {\\n\\t\\t\\t\\t\\tvar id, audio, collection, index;\\n\\n\\t\\t\\t\\t\\tid = $(_node).id();\\n\\t\\t\\t\\t\\taudio = (_collection.find('#' + id) || [])[0];\\n\\t\\t\\t\\t\\tindex = _collection.indexOf(audio);\\n\\n\\t\\t\\t\\t\\tif (index !== _index) {\\n\\t\\t\\t\\t\\t\\t_collection[index] = _collection[_index];\\n\\t\\t\\t\\t\\t\\t_collection[_index] = audio;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t}).bind(this));\\n\\t\\t}\\n\\n\\t\\tthis.isReady = true;\\n\\t\\tthis.addClass('READY');\\n\\n\\t\\tthis.__ready();\\n\\t\\tinvokeLocal.call(this, 'ready');\\n\\n\\t\\tthis.trigger(readyEvent);\\n\\t}\\n\\n\\tActionables = (function () {\\n\\n\\t\\t_util2['default'].mixin(this, _typesBasic2['default']);\\n\\n\\t\\tthis.add = function (_node, _action) {\\n\\t\\t\\tif (!this.has(_node)) {\\n\\t\\t\\t\\tthis.push({\\n\\t\\t\\t\\t\\tnode: _node,\\n\\t\\t\\t\\t\\taction: _action\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this;\\n\\t\\t};\\n\\n\\t\\tthis.remove = function (_node) {\\n\\t\\t\\tvar item, index;\\n\\n\\t\\t\\titem = this.item(_node);\\n\\t\\t\\tindex = this.indexOf(item);\\n\\t\\t\\tif (~index) this.splice(index, 1);\\n\\n\\t\\t\\treturn this;\\n\\t\\t};\\n\\n\\t\\tthis.item = function (_node) {\\n\\t\\t\\tvar i, item;\\n\\n\\t\\t\\tfor (i = 0; item = this[i]; i += 1) {\\n\\t\\t\\t\\tif (item.node === _node) return item;\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\tthis.has = function (_node) {\\n\\t\\t\\treturn !!this.item(_node);\\n\\t\\t};\\n\\n\\t\\treturn this;\\n\\t}).call([]);\\n\\n\\tthis.TRANSCLUDE_REPLACE = 'replace';\\n\\tthis.TRANSCLUDE_PREPEND = 'prepend';\\n\\tthis.TRANSCLUDE_APPEND = 'append';\\n\\tthis.TRANSCLUDE_PLUCK = 'pluck';\\n\\n\\tthis.baseType = 'TYPE_SCOPE';\\n\\tthis.actionables = null;\\n\\tthis.isReady = null;\\n\\tthis.isComponent = false;\\n\\tthis.entities = null;\\n\\tthis.audio = null;\\n\\tthis.properties = null;\\n\\tthis.propertyHandlers = null;\\n\\tthis.assetQueue = null;\\n\\tthis.event = null;\\n\\n\\tthis.initialize = function (_node_selector, _componentName) {\\n\\t\\tvar scope;\\n\\n\\t\\tscope = this;\\n\\n\\t\\tthis.isReady = false;\\n\\t\\tthis.isComponent = !!_componentName;\\n\\t\\tthis.event = null;\\n\\t\\tthis.assetQueue = _typesQueue2['default'].create();\\n\\t\\tthis.$els = _node_selector.jquery ? _node_selector : $(_node_selector);\\n\\n\\t\\tif (!this.$els.length) {\\n\\t\\t\\tthrow new ReferenceError('Unable to locate the element with selector ' + this.$els.selector + '.');\\n\\t\\t}\\n\\n\\t\\tthis.addClass('pl-scope ' + (_componentName ? _componentName + '-component' : ''));\\n\\t\\tthis.data('pl-scope', this);\\n\\t\\tthis.data('pl-isComponent', !!_componentName);\\n\\n\\t\\tcaptureProperties.call(this);\\n\\n\\t\\tif (_componentName) {\\n\\t\\t\\tloadComponentAssets.call(this, _componentName, function () {\\n\\t\\t\\t\\tinit.call(this);\\n\\t\\t\\t});\\n\\t\\t} else {\\n\\t\\t\\tinit.call(this);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t// only for use in base types\\n\\tthis.__init = function () {\\n\\t\\treturn this;\\n\\t};\\n\\tthis.__ready = function () {\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.willInit = function () {\\n\\t\\treturn this;\\n\\t};\\n\\tthis.init = function () {\\n\\t\\treturn this;\\n\\t};\\n\\tthis.ready = function () {\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.watchAssets = function (_nodes) {\\n\\t\\tvar createHandler, watch;\\n\\n\\t\\tcreateHandler = this.bind(function (_node) {\\n\\t\\t\\treturn (function () {\\n\\t\\t\\t\\tvar loadedEvent = $.Event('loaded', { targetScope: this });\\n\\n\\t\\t\\t\\tthis.assetQueue.ready(_node.src);\\n\\t\\t\\t\\tthis.trigger(loadedEvent, [_node]);\\n\\n\\t\\t\\t\\t_node.onload = null;\\n\\t\\t\\t}).bind(this);\\n\\t\\t});\\n\\n\\t\\twatch = this.bind(function (_index, _node) {\\n\\t\\t\\tvar node = typeof _index === 'number' ? _node : _index;\\n\\n\\t\\t\\tif (node.nodeName !== 'IMG' || node.complete) return;\\n\\t\\t\\tif (this.assetQueue.add(node.src)) {\\n\\t\\t\\t\\tnode.onload = createHandler(node);\\n\\t\\t\\t\\tnode.onerror = function () {\\n\\t\\t\\t\\t\\tconsole.error('Image failed to load', node.src);\\n\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tif (_nodes) {\\n\\t\\t\\t_nodes.forEach(watch);\\n\\t\\t\\treturn this;\\n\\t\\t}\\n\\n\\t\\tthis.each(watch);\\n\\t\\tthis.findOwn('img').each(watch);\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.attachEvents = function () {\\n\\n\\t\\tthis.proto();\\n\\n\\t\\tthis.assetQueue.on('complete', this.bind(function () {\\n\\t\\t\\tthis.assetQueue.off();\\n\\t\\t\\tready.call(this);\\n\\t\\t}));\\n\\n\\t\\tthis.on('ready', function (_event) {\\n\\t\\t\\tif (this.has(_event.targetScope) && this.assetQueue.has(_event.targetScope)) {\\n\\t\\t\\t\\tthis.assetQueue.ready(_event.targetScope);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!this.assetQueue.length && this.isReady) this.off('ready');\\n\\t\\t});\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.captureReferences = function () {\\n\\t\\tthis.findOwn('[id], [pl-id]').each(this.bind(function (_index, _node) {\\n\\t\\t\\tvar $node, id;\\n\\n\\t\\t\\tif (_node.nodeName === 'AUDIO') return;\\n\\n\\t\\t\\t$node = $(_node);\\n\\t\\t\\tid = $node.attr('id') || $node.attr('pl-id');\\n\\n\\t\\t\\tif (!this[id]) {\\n\\t\\t\\t\\t_util2['default'].assignRef(this, id, $node.data('pl-scope') || $node);\\n\\t\\t\\t}\\n\\t\\t}));\\n\\t};\\n\\n\\tthis.captureAudioAssets = function () {\\n\\t\\tvar deQ, $audio;\\n\\n\\t\\tif (!($audio = this.findOwn('audio')).length) return false;\\n\\n\\t\\tdeQ = (function (_item) {\\n\\t\\t\\t[this, this.screen].forEach(function (_scope) {\\n\\t\\t\\t\\tif (_scope.requiredQueue && _scope.isMemberSafe('requiredQueue') && _scope.requiredQueue.has(_item)) {\\n\\t\\t\\t\\t\\t_scope.requiredQueue.ready(_item);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}).bind(this);\\n\\n\\t\\tthis.audio = _typesAudioManager.AudioManager.create(this.id());\\n\\n\\t\\t$audio.each((function (_index, _node) {\\n\\t\\t\\tthis.assetQueue.add(_node.src);\\n\\t\\t\\tthis.audio.watch(_node).then((function (_audio) {\\n\\t\\t\\t\\tvar loadedEvent = $.Event('loaded', { target: _node, targetScope: this });\\n\\n\\t\\t\\t\\tif ($(_node).is('[pl-required]')) this.screen.require(_audio);\\n\\n\\t\\t\\t\\tif (this.assetQueue.has(_node.src)) this.assetQueue.ready(_node.src);\\n\\n\\t\\t\\t\\tthis.trigger(loadedEvent);\\n\\t\\t\\t}).bind(this));\\n\\t\\t}).bind(this));\\n\\n\\t\\t// proxy events\\n\\t\\tthis.audio.on('play pause ended stopped', this.bind(function (_event) {\\n\\t\\t\\tvar map = {\\n\\t\\t\\t\\tbackground: 'BACKGROUND',\\n\\t\\t\\t\\tvoiceOver: 'VOICE-OVER',\\n\\t\\t\\t\\tsfx: 'SFX'\\n\\t\\t\\t};\\n\\n\\t\\t\\tswitch (_event.type) {\\n\\t\\t\\t\\tcase 'play':\\n\\t\\t\\t\\t\\t[this, this.screen].forEach(function (_scope, _index, _set) {\\n\\t\\t\\t\\t\\t\\tif (_index === 1 && _scope === _set[0]) return;\\n\\t\\t\\t\\t\\t\\tif (_scope.$els) _scope.addClass('PLAYING ' + map[_event.target.type]);\\n\\t\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\t\\t$(_event.targetNode).addClass('PLAYING');\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tcase 'pause':\\n\\t\\t\\t\\tcase 'stopped':\\n\\t\\t\\t\\tcase 'ended':\\n\\t\\t\\t\\t\\t[this, this.screen].forEach(function (_scope, _index, _set) {\\n\\t\\t\\t\\t\\t\\tvar state;\\n\\n\\t\\t\\t\\t\\t\\tif (_index === 1 && _scope === _set[0]) return;\\n\\n\\t\\t\\t\\t\\t\\tif (_scope.$els) {\\n\\t\\t\\t\\t\\t\\t\\t_scope.removeClass(map[_event.target.type]);\\n\\t\\t\\t\\t\\t\\t\\tstate = _scope.attr('class');\\n\\t\\t\\t\\t\\t\\t\\tif (!/BACKGROUND|VOICE-OVER|SFX/.test(state)) _scope.removeClass('PLAYING');\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\t\\t$(_event.targetNode).removeClass('PLAYING');\\n\\t\\t\\t\\t\\tif (_event.type === 'ended') deQ(_event.target);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar audioEvent = $.Event('audio-' + _event.type, {\\n\\t\\t\\t\\ttarget: _event.target,\\n\\t\\t\\t\\ttargetSource: _event.targetSource,\\n\\t\\t\\t\\ttargetNode: _event.targetNode,\\n\\t\\t\\t\\ttargetScope: this\\n\\t\\t\\t});\\n\\n\\t\\t\\tthis.trigger(audioEvent);\\n\\t\\t}));\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.handleProperty = function (_implementation) {\\n\\t\\tif (this.propertyHandlers) {\\n\\t\\t\\tif (this.hasOwnProperty('propertyHandlers')) {\\n\\t\\t\\t\\tswitch (typeof _implementation) {\\n\\t\\t\\t\\t\\tcase 'function':\\n\\t\\t\\t\\t\\t\\t_implementation.call(this.propertyHandlers);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'object':\\n\\t\\t\\t\\t\\t\\tthis.propertyHandlers.mixin(_implementation);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.propertyHandlers = this.propertyHandlers.extend(_implementation);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tthis.propertyHandlers = _typesBasic2['default'].extend(_implementation);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.entity = function (_selector, _implementation) {\\n\\t\\tvar Entity, prototype, id;\\n\\n\\t\\tEntity = _playGame2['default'].provideEntityType();\\n\\n\\t\\tif (!this.hasOwnProperty('entities')) this.entities = [];\\n\\n\\t\\tif (this.hasOwnProperty('$els')) {\\n\\t\\t\\tthrow new Error('Wait this hasn\\\\'t been tested.');\\n\\t\\t\\tprototype = Entity.isPrototypeOf(this) ? this : Entity;\\n\\t\\t\\tinstance = prototype.extend(_implementation).initialize(this.find(_selector));\\n\\t\\t\\tid = _util2['default'].transformId(instance.id());\\n\\n\\t\\t\\t// this.entities.push(instance);\\n\\t\\t\\tif (id) this[id] = instance;\\n\\t\\t} else {\\n\\t\\t\\tthis.entities.push({\\n\\t\\t\\t\\tselector: _selector,\\n\\t\\t\\t\\timplementation: _implementation\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.has = function (_child) {\\n\\t\\tvar child;\\n\\n\\t\\tchild = Scope.isPrototypeOf(_child) ? _child.$els : _child;\\n\\n\\t\\treturn !!this.$els.has(child).length;\\n\\t};\\n\\n\\tthis.toString = function () {\\n\\t\\tvar type;\\n\\n\\t\\ttype = this.baseType.replace('TYPE_', '');\\n\\t\\ttype = type.slice(0, 1) + type.slice(1).toLowerCase();\\n\\n\\t\\treturn ['[', this.id() || this.address(), ' ', type, ']'].join('');\\n\\t};\\n\\n\\tthis.log = function () {\\n\\t\\tvar args;\\n\\n\\t\\targs = _util2['default'].toArray(arguments);\\n\\n\\t\\tconsole.log.apply(console, [this.id() || this.address(), '-'].concat(args));\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.handleProperty(function () {\\n\\n\\t\\tthis.component = function (_node, _name, _value, _property) {\\n\\t\\t\\tvar $node, record, scope, id;\\n\\n\\t\\t\\t$node = $(_node);\\n\\n\\t\\t\\tif (!$node.data('pl-isComponent')) {\\n\\t\\t\\t\\trecord = _playGame2['default'].component.get(_value);\\n\\n\\t\\t\\t\\tif (record) {\\n\\t\\t\\t\\t\\tscope = createEntity.call(this, $node, record.implementation);\\n\\t\\t\\t\\t\\tid = _util2['default'].transformId(scope.id() || _value, true);\\n\\t\\t\\t\\t\\t_util2['default'].assignRef(this, id, scope);\\n\\n\\t\\t\\t\\t\\tif (!scope.isReady) this.assetQueue.add(scope);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tthrow new Error('Ahh!');\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\tthis.action = function (_node, _name, _value) {\\n\\t\\t\\tif (!this.hasOwnProperty('actionables')) {\\n\\t\\t\\t\\tthis.actionables = Actionables.create();\\n\\t\\t\\t\\tattachActionHandler.call(this);\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.actionables.add(_node, _value);\\n\\t\\t};\\n\\n\\t\\tthis.required = function (_node, _name, _value) {\\n\\t\\t\\tif (this.is(_node)) {\\n\\t\\t\\t\\tthis.screen.require(this);\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\tthis.require = function (_node, _name, _value) {\\n\\t\\t\\tvar query, $node;\\n\\n\\t\\t\\t// if the node with the attribute is the node for this scope\\n\\t\\t\\tif (this.is(_node)) {\\n\\t\\t\\t\\tquery = '#_value, [pl-id=_value], [pl-component=_value]'.replace(/_value/g, _value);\\n\\t\\t\\t\\t$node = this.find(query);\\n\\n\\t\\t\\t\\t$node.on('ready', this.bind(function (_event) {\\n\\t\\t\\t\\t\\tif ($node.is(_event.target)) {\\n\\t\\t\\t\\t\\t\\tthis.require(_event.targetScope);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}));\\n\\t\\t\\t}\\n\\t\\t};\\n\\t});\\n});\\n\\nexports['default'] = { Scope: Scope, createEntity: createEntity };\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 67 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _Object$keys = __webpack_require__(68)['default'];\\n\\nvar _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n*  jQProxy\\n*  @desc Contains all the jQuery methods targeted towards a property which references a jQuery object.\\n*  @proto Basic\\n*  \\n*  NOTE: Custom events may trigger on scopes\\n*  that also targets the same elments. Testing needed.\\n*/\\n\\nvar _util = __webpack_require__(50);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesBasic = __webpack_require__(51);\\n\\nvar _typesBasic2 = _interopRequireDefault(_typesBasic);\\n\\nvar jQProxy = _typesBasic2['default'].extend(function () {\\n\\tvar method, exclude;\\n\\n\\t/**\\n *  @desc Creates a function with a proxy to the jQuery method.\\n *  @param _name (String) The name of the method being proxied.\\n *  @return (jQuery|*) Either a jQuery object or whatever the original method returns.\\n *  @private\\n */\\n\\tfunction createProxyFunction(_name) {\\n\\t\\treturn function () {\\n\\t\\t\\tvar response;\\n\\n\\t\\t\\t// This makes sure your not calling any jQuery methods before initialization.\\n\\t\\t\\tif (!this.hasOwnProperty('$els')) {\\n\\t\\t\\t\\tif (_name === 'on') {\\n\\t\\t\\t\\t\\tregisterHandler.call(this, arguments);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tthrow new ReferenceError('Unable to invoke ' + _name + ' because the scope is not initialized.');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tresponse = $.fn[_name].apply(this.$els, resolveEventHandler(this, _name, arguments));\\n\\n\\t\\t\\tif (response === this.$els || response && response.jquery && response.is(this.$els)) {\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn response;\\n\\t\\t};\\n\\t}\\n\\n\\tfunction resolveEventHandler(_scope, _method, _args) {\\n\\t\\tvar i, arg, args;\\n\\n\\t\\targs = [];\\n\\n\\t\\tif (~['on', 'load'].indexOf(_method)) {\\n\\t\\t\\tfor (i = 0; arg = _args[i]; i += 1) {\\n\\t\\t\\t\\tif (typeof arg === 'function') {\\n\\t\\t\\t\\t\\targs.push((function (_handler) {\\n\\t\\t\\t\\t\\t\\treturn function () {\\n\\t\\t\\t\\t\\t\\t\\treturn _handler.apply(_scope, arguments);\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t})(arg));\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\targs.push(arg);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn args;\\n\\t\\t}\\n\\n\\t\\treturn _args;\\n\\t}\\n\\n\\tfunction registerHandler(_definition) {\\n\\t\\tif (!this.hasOwnProperty('eventRegistry')) {\\n\\t\\t\\tif (this.eventRegistry && this.isMemberSafe('eventRegistry')) {\\n\\t\\t\\t\\tthis.eventRegistry = this.eventRegistry.slice(0);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.eventRegistry = [];\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tthis.eventRegistry.push(_definition);\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// We don't want jQuery methods overridding our base type's methods.\\n\\texclude = ['constructor'].concat(_Object$keys(_typesBasic2['default']));\\n\\n\\tthis.baseType = 'TYPE_JQPROXY';\\n\\tthis.$els = null;\\n\\tthis.eventRegistry = null;\\n\\n\\tfor (method in $.fn) {\\n\\t\\tif (!$.fn.hasOwnProperty(method) || ~exclude.indexOf(method)) continue;\\n\\t\\tthis[method] = createProxyFunction(method);\\n\\t}\\n\\n\\tthis.node = function () {\\n\\t\\treturn this.$els[0];\\n\\t};\\n\\n\\tthis.attachEvents = function () {\\n\\t\\tvar self;\\n\\n\\t\\tself = this;\\n\\n\\t\\tif (this.eventRegistry && this.isMemberSafe('eventRegistry')) {\\n\\t\\t\\tthis.eventRegistry.forEach(function (_definition) {\\n\\t\\t\\t\\tself.on.apply(self, _definition);\\n\\t\\t\\t});\\n\\t\\t}\\n\\t};\\n\\n\\tthis.listen = function (_name, _isCapure_handler, _handler) {\\n\\t\\tvar _isCapture, node, handler;\\n\\n\\t\\t_isCapture = false;\\n\\n\\t\\t// resolve arguments\\n\\t\\ttypeof _isCapure_handler === 'boolean' ? _isCapture = _isCapure_handler : _handler = _isCapure_handler;\\n\\n\\t\\t_handler.cb = _handler.bind(this);\\n\\n\\t\\tif (this.$els) {\\n\\t\\t\\tnode = this.$els[0];\\n\\t\\t\\tif (node) return node.addEventListener(_name, _handler.cb, _isCapture);\\n\\t\\t} else {\\n\\t\\t\\treturn registerHandler([_name, _handler.cb, _isCapture]);\\n\\t\\t}\\n\\n\\t\\treturn false;\\n\\t};\\n\\n\\tthis.ignore = function (_name, _handler) {\\n\\t\\tvar node = this.$els && this.$els[0];\\n\\n\\t\\tif (node) return node.removeEventListener(_name, _handler.cb || _handler);\\n\\n\\t\\treturn false;\\n\\t};\\n\\n\\t// Wraps you function 'this' to the scope.\\n\\t//\\n\\tthis.bind = function (_handler) {\\n\\t\\tvar args;\\n\\n\\t\\targs = [].map.call(arguments, function (m) {\\n\\t\\t\\treturn m;\\n\\t\\t}).slice(1);\\n\\n\\t\\treturn _handler.bind.apply(_handler, [this].concat(args));\\n\\t};\\n\\n\\tthis.findOwn = function (_selector) {\\n\\t\\treturn this.find(_selector).filter(this.bind(function (_index, _node) {\\n\\t\\t\\tvar $node;\\n\\n\\t\\t\\t$node = $(_node);\\n\\n\\t\\t\\tif ($node.hasClass('pl-scope')) {\\n\\t\\t\\t\\treturn $node.parent().scope() === this;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn $node.scope() === this;\\n\\t\\t}));\\n\\t};\\n\\n\\tthis.isMemberSafe = function (_name) {\\n\\t\\tvar owner, elOwner, prototype;\\n\\n\\t\\tif (this.hasOwnProperty(_name)) {\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\tprototype = Object.getPrototypeOf(this);\\n\\t\\t\\towner = _util2['default'].getOwner(this, this[_name]);\\n\\n\\t\\t\\tif (owner.object.hasOwnProperty('$els') || prototype.hasOwnProperty('$els')) return false;\\n\\n\\t\\t\\tif (prototype.$els) {\\n\\t\\t\\t\\telOwner = _util2['default'].getOwner(prototype, prototype.$els);\\n\\n\\t\\t\\t\\tif (owner.object.isPrototypeOf(elOwner.object)) {\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\treturn false;\\n\\t};\\n\\n\\tthis.is = function (_obj) {\\n\\t\\tif (!_obj) return false;\\n\\t\\tif (_obj.$els) return this.$els.is(_obj.$els);\\n\\n\\t\\treturn this.$els.is(_obj);\\n\\t};\\n});\\n\\nexports['default'] = jQProxy;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 68 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"module.exports = { \\\"default\\\": __webpack_require__(69), __esModule: true };//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzLmpzPzkxMzgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCIiwiZmlsZSI6IjY4LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXMuanNcbiAqKiBtb2R1bGUgaWQgPSA2OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 69 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"__webpack_require__(70);\\nmodule.exports = __webpack_require__(10).Object.keys;//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qva2V5cy5qcz8xNmFmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EiLCJmaWxlIjoiNjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmtleXM7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzLmpzXG4gKiogbW9kdWxlIGlkID0gNjlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 70 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// 19.1.2.14 Object.keys(O)\\nvar toObject = __webpack_require__(26)\\n  , $keys    = __webpack_require__(41);\\n\\n__webpack_require__(71)('keys', function(){\\n  return function keys(it){\\n    return $keys(toObject(it));\\n  };\\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcz9mMDFmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJmaWxlIjoiNzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgJGtleXMgICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbigpe1xuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCl7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanNcbiAqKiBtb2R1bGUgaWQgPSA3MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 71 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// most Object methods by ES6 should accept primitives\\nvar $export = __webpack_require__(8)\\n  , core    = __webpack_require__(10)\\n  , fails   = __webpack_require__(19);\\nmodule.exports = function(KEY, exec){\\n  var fn  = (core.Object || {})[KEY] || Object[KEY]\\n    , exp = {};\\n  exp[KEY] = exec(fn);\\n  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qtc2FwLmpzP2Q2MmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0EsbURBQW1ELE9BQU8sRUFBRTtBQUM1RCIsImZpbGUiOiI3MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGNvcmUgICAgPSByZXF1aXJlKCcuL19jb3JlJylcbiAgLCBmYWlscyAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZLCBleGVjKXtcbiAgdmFyIGZuICA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXVxuICAgICwgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24oKXsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1zYXAuanNcbiAqKiBtb2R1bGUgaWQgPSA3MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 72 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n*  Queue\\n*  @desc Contains...\\n*  @proto Array, Events, Basic\\n*/\\n\\nvar _util = __webpack_require__(50);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesCollection = __webpack_require__(64);\\n\\nvar _typesCollection2 = _interopRequireDefault(_typesCollection);\\n\\nvar _typesEvents = __webpack_require__(61);\\n\\nvar _typesEvents2 = _interopRequireDefault(_typesEvents);\\n\\nvar Queue = _typesCollection2['default'].extend(function () {\\n\\n\\tthis.baseType = 'TYPE_QUEUE';\\n\\n\\tthis.ready = function (_record) {\\n\\t\\tif (_record != null) this.remove(_record);\\n\\n\\t\\tif (!this.length) {\\n\\t\\t\\tthis.trigger('complete');\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t_util2['default'].mixin(this, _typesEvents2['default']);\\n\\n\\treturn this;\\n});\\n\\nexports['default'] = Queue;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvUXVldWUuanM/MDNjYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Z0NBTWlCLEVBQU07Ozs7MkNBQ0EsRUFBa0I7Ozs7dUNBQ3RCLEVBQWM7Ozs7QUFFakMsSUFBSSxLQUFLLEdBQUcsNkJBQVcsTUFBTSxDQUFDLFlBQVk7O0FBRXpDLEtBQUksQ0FBQyxRQUFRLEdBQUcsWUFBWSxDQUFDOztBQUU3QixLQUFJLENBQUMsS0FBSyxHQUFHLFVBQVUsT0FBTyxFQUFFO0FBQy9CLE1BQUksT0FBTyxJQUFJLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDOztBQUUxQyxNQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUNqQixPQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0dBQ3pCOztBQUVELFNBQU8sSUFBSSxDQUFDO0VBQ1osQ0FBQzs7QUFFRixtQkFBSyxLQUFLLENBQUMsSUFBSSwyQkFBUyxDQUFDOztBQUV6QixRQUFPLElBQUksQ0FBQztDQUVaLENBQUMsQ0FBQzs7cUJBRVksS0FBSyIsImZpbGUiOiI3Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuKiAgUXVldWVcbiogIEBkZXNjIENvbnRhaW5zLi4uXG4qICBAcHJvdG8gQXJyYXksIEV2ZW50cywgQmFzaWNcbiovXG5cbmltcG9ydCB1dGlsIGZyb20gJ3V0aWwnO1xuaW1wb3J0IENvbGxlY3Rpb24gZnJvbSAndHlwZXMvQ29sbGVjdGlvbic7XG5pbXBvcnQgRXZlbnRzIGZyb20gJ3R5cGVzL0V2ZW50cyc7XG5cbnZhciBRdWV1ZSA9IENvbGxlY3Rpb24uZXh0ZW5kKGZ1bmN0aW9uICgpIHtcblxuXHR0aGlzLmJhc2VUeXBlID0gJ1RZUEVfUVVFVUUnO1xuXG5cdHRoaXMucmVhZHkgPSBmdW5jdGlvbiAoX3JlY29yZCkge1xuXHRcdGlmIChfcmVjb3JkICE9IG51bGwpIHRoaXMucmVtb3ZlKF9yZWNvcmQpO1xuXG5cdFx0aWYgKCF0aGlzLmxlbmd0aCkge1xuXHRcdFx0dGhpcy50cmlnZ2VyKCdjb21wbGV0ZScpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXHRcblx0dXRpbC5taXhpbih0aGlzLCBFdmVudHMpO1xuXG5cdHJldHVybiB0aGlzO1xuXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgUXVldWU7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NvdXJjZS90eXBlcy9RdWV1ZS5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 73 */\n/***/ function(module, exports) {\n\n\teval(\"exports.__esModule = true;\\n/**\\n * @module evalAction\\n */\\n\\n/**\\n * Performs `eval()` on the value of an `action` attribute on an HTML element.\\n * @arg {string} _source - JavaScript source code.\\n * @arg {Scope} _scope - The context in which to run the source.\\n * @returns {*} The result of the evaluated source.\\n */\\nfunction evalAction(_source, _scope) {\\n\\tvar error;\\n\\n\\tfunction target(_selector) {\\n\\t\\tif (_scope.event) {\\n\\t\\t\\treturn _selector ? $(_scope.event.target).closest(_selector) : $(_scope.event.target);\\n\\t\\t}\\n\\t}\\n\\n\\t// expose members of the object as if they were local variables.\\n\\t// NOTE: methods still retain their \\\"this\\\" binding to the object! :D\\n\\treturn eval(\\\"with (_scope) { try {\\\" + _source + \\\";} catch (error) { console.error('Error:', error.message, 'evaluating action', _source, 'in', _scope.id() || _scope.address()); } }\\\");\\n}\\n\\nexports[\\\"default\\\"] = evalAction;\\nmodule.exports = exports[\\\"default\\\"];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvZXZhbEFjdGlvbi5qcz8zY2ZiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBVUEsU0FBUyxVQUFVLENBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRTtBQUNyQyxLQUFJLEtBQUssQ0FBQzs7QUFFVixVQUFTLE1BQU0sQ0FBRSxTQUFTLEVBQUU7QUFDM0IsTUFBSSxNQUFNLENBQUMsS0FBSyxFQUFFO0FBQ2pCLFVBQU8sU0FBUyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUN0RjtFQUNEOzs7O0FBSUQsUUFBTyxJQUFJLENBQUMsdUJBQXVCLEdBQUMsT0FBTyxHQUFDLHFJQUFxSSxDQUFDLENBQUM7Q0FDbkw7O3FCQUVjLFVBQVUiLCJmaWxlIjoiNzMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb2R1bGUgZXZhbEFjdGlvblxuICovXG5cbi8qKlxuICogUGVyZm9ybXMgYGV2YWwoKWAgb24gdGhlIHZhbHVlIG9mIGFuIGBhY3Rpb25gIGF0dHJpYnV0ZSBvbiBhbiBIVE1MIGVsZW1lbnQuXG4gKiBAYXJnIHtzdHJpbmd9IF9zb3VyY2UgLSBKYXZhU2NyaXB0IHNvdXJjZSBjb2RlLlxuICogQGFyZyB7U2NvcGV9IF9zY29wZSAtIFRoZSBjb250ZXh0IGluIHdoaWNoIHRvIHJ1biB0aGUgc291cmNlLlxuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHQgb2YgdGhlIGV2YWx1YXRlZCBzb3VyY2UuXG4gKi9cbmZ1bmN0aW9uIGV2YWxBY3Rpb24gKF9zb3VyY2UsIF9zY29wZSkge1xuXHR2YXIgZXJyb3I7XG5cblx0ZnVuY3Rpb24gdGFyZ2V0IChfc2VsZWN0b3IpIHtcblx0XHRpZiAoX3Njb3BlLmV2ZW50KSB7XG5cdFx0XHRyZXR1cm4gX3NlbGVjdG9yID8gJChfc2NvcGUuZXZlbnQudGFyZ2V0KS5jbG9zZXN0KF9zZWxlY3RvcikgOiAkKF9zY29wZS5ldmVudC50YXJnZXQpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly8gZXhwb3NlIG1lbWJlcnMgb2YgdGhlIG9iamVjdCBhcyBpZiB0aGV5IHdlcmUgbG9jYWwgdmFyaWFibGVzLlxuXHQvLyBOT1RFOiBtZXRob2RzIHN0aWxsIHJldGFpbiB0aGVpciBcInRoaXNcIiBiaW5kaW5nIHRvIHRoZSBvYmplY3QhIDpEXG5cdHJldHVybiBldmFsKFwid2l0aCAoX3Njb3BlKSB7IHRyeSB7XCIrX3NvdXJjZStcIjt9IGNhdGNoIChlcnJvcikgeyBjb25zb2xlLmVycm9yKCdFcnJvcjonLCBlcnJvci5tZXNzYWdlLCAnZXZhbHVhdGluZyBhY3Rpb24nLCBfc291cmNlLCAnaW4nLCBfc2NvcGUuaWQoKSB8fCBfc2NvcGUuYWRkcmVzcygpKTsgfSB9XCIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBldmFsQWN0aW9uO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zb3VyY2UvZXZhbEFjdGlvbi5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 74 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _Promise = __webpack_require__(75)['default'];\\n\\nvar _Object$keys = __webpack_require__(68)['default'];\\n\\nvar _Object$create = __webpack_require__(52)['default'];\\n\\nvar _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n\\n/**\\n * Contains classes for managing different media types.\\n * Providing an API for referencing and control.\\n * @module\\n * @author Micah Rolon <micah@ginasink.com>\\n */\\n\\nvar _typesType = __webpack_require__(108);\\n\\nvar _typesType2 = _interopRequireDefault(_typesType);\\n\\nvar _util = __webpack_require__(50);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesCollection = __webpack_require__(64);\\n\\nvar _typesCollection2 = _interopRequireDefault(_typesCollection);\\n\\n// Object type definitions are using  `$` as the augmentation method for Types.\\n\\\"use strict\\\";var EventTargetInterface,\\n    InspectorInterface,\\n    PlayableInterface,\\n    LegislatorInterface,\\n    StateInterface,\\n    $$ = window.jQuery;\\n\\n/**\\n * <span class=\\\"note important\\\">NOTE: This constructor is used to construct its protoype which we instatiate with `MediaManager.create()`.</span>\\n * Manages any playing media (Audio, Video).\\n * @arg {function} $ - Passed by `type()`, gives you a pritier interface for defining the instance members.\\n * @classdesc Manages any playing media (Audio, Video).\\n * <style>\\n * .note {\\n *   border: solid 1px;\\n *   border-radius: 4px;\\n *   padding: 1px 4px;\\n *   color: #aaa;\\n *   background-color: #eee;\\n * }\\n * \\n * .note.important {\\n *   color: #b55;\\n *   background-color: #fee;\\n * }\\n * </style>\\n *\\n * @class\\n */\\nfunction MediaManager($, sup) {\\n\\t/**\\n  * Duck typed multiple inheritance.\\n  */\\n\\t_util2['default'].mixin(this, EventTargetInterface, InspectorInterface, LegislatorInterface, StateInterface);\\n\\t$('video', function alloc(_id) {\\n\\t\\tsup(this, 'alloc', arguments);\\n\\t\\tthis.video = _typesCollection2['default'].create();\\n\\t\\tthis.initialize(_id, 'media manager');\\n\\t});\\n}\\n\\n/**\\n * The Scopes entry for its audio management interface. This gives access to collections of Audio objects grouped into three types.\\n *\\n * <span class=\\\"note important\\\">NOTE: This constructor is used to construct its protoype which we instatiate with `AudioManager.create()`.</span>\\n * @arg {function} $ - Passed by `type()`, gives you a pritier interface for defining the instance members.\\n * @classdesc The Scopes entry for its audio management interface. This gives access to collections of Audio objects grouped into three types.\\n * - Background\\n * - Voice Over\\n * - SFX (Sound Effects)\\n * These collections are filled by the HTML Audio elements which have classes corresponding to these types.\\n * @class\\n * @prop {type} member - Text.\\n * @extends EventTargetInterface\\n * @extends PlayableInterface\\n * @extends InspectorInterface\\n */\\nfunction AudioManager($) {\\n\\tvar AUDIO_TYPES, BUFFER_CACHE;\\n\\n\\t/**\\n  * A record object for passing the MediaElement which got loaded as an `AudioBuffer`.\\n  * @arg {HTMLAudioElement} _node - The loaded audio element.\\n  * @arg {ArrayBuffer} _buffer - The array buffer loaded from XHR2.\\n  */\\n\\tfunction AudioBufferRecord(_node, _buffer) {\\n\\t\\tthis.node = _node;\\n\\t\\tthis.type = getAudioType(_node);\\n\\t\\tthis.buffer = _buffer;\\n\\t}\\n\\t/**\\n  * Provides the classification an audio element falls into.\\n  * - Background (`background`)\\n  * - Voice Over (`voiceOver`)\\n  * - Sound Effects (`sfx`)\\n  * @protected\\n  * @arg {HTMLAudioElement} _audio - The audio element.\\n  * @returns {string} - The type.\\n  */\\n\\tfunction getAudioType(_audio) {\\n\\t\\treturn _util2['default'].transformId((_audio.className.match(AUDIO_TYPES) || [])[0], true);\\n\\t}\\n\\t/**\\n  * Given an HTMLAudioElement, load its source as an `ArrayBuffer` with XHR2.\\n  * @protected\\n  * @arg {HTMLAudioElement} _audio - The audio element.\\n  * @returns {Promise}\\n  */\\n\\tfunction loadArrayBuffer(_audio) {\\n\\t\\tvar xhr, manager, fileName;\\n\\n\\t\\txhr = new (XMLHttpRequest || _util2['default'].noop)();\\n\\t\\tmanager = this;\\n\\t\\tfileName = _util2['default'].resolveFileName(_audio.src);\\n\\n\\t\\tif (!xhr.open) _Promise.reject('This platfom does not support the XMLHttpRequest API.');\\n\\n\\t\\treturn new _Promise(function (resolve, reject) {\\n\\t\\t\\tvar cache = BUFFER_CACHE[fileName];\\n\\n\\t\\t\\t// Decodes ArrayBuffer into an AudioBuffer.\\n\\t\\t\\tfunction onLoad() {\\n\\t\\t\\t\\tvar ctx, promise;\\n\\n\\t\\t\\t\\tif (xhr.status >= 200 && xhr.status < 300) {\\n\\t\\t\\t\\t\\tif (ctx = pl.game.getAudioContext()) {\\n\\t\\t\\t\\t\\t\\tpromise = new _Promise(function (resolveDecoding, rejectDecoding) {\\n\\t\\t\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\t\\t\\tctx.decodeAudioData(xhr.response, function (_buffer) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tvar audio = manager.collect(new AudioBufferRecord(_audio, _buffer));\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tresolveDecoding(audio);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// Cache the AudioBuffer to resolve duplicates.\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tBUFFER_CACHE[fileName] = _buffer;\\n\\t\\t\\t\\t\\t\\t\\t\\t}, function () {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\trejectDecoding(\\\"Failed to decode ArrayBuffer for \\\" + fileName + \\\".\\\");\\n\\t\\t\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\t\\t} catch (e) {\\n\\t\\t\\t\\t\\t\\t\\t\\trejectDecoding(e);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\t\\t\\tpromise.then(resolve)['catch'](reject);\\n\\n\\t\\t\\t\\t\\t\\treturn promise;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\treject(xhr.statusText);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\txhr.removeEventListener('load', onLoad);\\n\\t\\t\\t\\txhr = null;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction onError() {\\n\\t\\t\\t\\treject(xhr.statusText);\\n\\t\\t\\t\\txhr.removeEventListener('error', onError);\\n\\t\\t\\t\\txhr = null;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (cache && cache !== 'loading') return resolve(manager.collect(new AudioBufferRecord(_audio, cache)));\\n\\n\\t\\t\\tBUFFER_CACHE[fileName] = 'loading';\\n\\n\\t\\t\\txhr.responseType = 'arraybuffer';\\n\\n\\t\\t\\txhr.addEventListener('load', onLoad, false);\\n\\t\\t\\txhr.addEventListener('error', onError, false);\\n\\t\\t\\txhr.open('GET', _audio.src, true);\\n\\t\\t\\txhr.send();\\n\\t\\t});\\n\\t}\\n\\t/**\\n  * The CSS class names reconized as audio types.\\n  */\\n\\tAUDIO_TYPES = /background|voice-over|sfx/i;\\n\\tBUFFER_CACHE = {};\\n\\t/**\\n  * Duck typed multiple inheritance.\\n  */\\n\\t_util2['default'].mixin(this, EventTargetInterface, PlayableInterface, InspectorInterface, LegislatorInterface, StateInterface);\\n\\n\\t// A little ugg but define instance members.\\n\\t$(\\n\\t// Declare properties.\\n\\t'background, voiceOver, sfx, scope',\\n\\n\\t/**\\n  * Define instance properties.\\n  */\\n\\tfunction alloc(_id) {\\n\\t\\tthis.initialize(_id, 'audio manager');\\n\\n\\t\\t['background', 'voiceOver', 'sfx'].forEach((function (_type) {\\n\\t\\t\\tvar collection = this[_type] = AudioCollection.create(_type);\\n\\t\\t\\tthis.addShadow(collection);\\n\\t\\t}).bind(this));\\n\\t},\\n\\n\\t/**\\n  * Given an audio element begin loading the asset.\\n  * @arg {HTMLAudioElement} _audio - The HTML Audio element which to preload and add to the game audio context.\\n  * @returns {Promise}\\n  * @todo Support loading from node source or a string argument. - Micah:2/19/16\\n  */\\n\\tfunction load(_audio) {\\n\\t\\tvar manager, type;\\n\\n\\t\\tmanager = this;\\n\\t\\ttype = getAudioType(_audio);\\n\\n\\t\\tif (!type) return _Promise.reject(\\\"Audio is missing a type. Please classify as 'background', 'voiceOver' or 'sfx'.\\\");\\n\\t\\t// if (~['sfx', 'voiceOver'].indexOf(type))\\n\\t\\treturn loadArrayBuffer.call(this, _audio);\\n\\n\\t\\t// return new Promise(function (resolve, reject) {\\n\\t\\t// \\t_audio.onloadeddata = function () { resolve(manager.collect(this)); };\\n\\t\\t// \\t_audio.onerror = reject;\\n\\t\\t// \\t_audio.load();\\n\\t\\t// });\\n\\t},\\n\\n\\t/**\\n  * Begins loading an AudioElement waits for it to load.\\n  * @arg {HTMLAudioElement} _audio - The HTML Audio element which to preload and add to the game audio context.\\n  * @returns {Promise}\\n  */\\n\\tfunction watch(_audio) {\\n\\t\\tvar promise;\\n\\n\\t\\tif (_audio.nodeName !== 'AUDIO') return _Promise.reject('Invalid type for audio node. ' + typeof _audio + ' [' + _audio.protoype.constructor.name + ' ' + _audio.nodeName + '].');\\n\\n\\t\\tfunction reject(_error) {\\n\\t\\t\\tvar scope = $$(_audio).scope();\\n\\t\\t\\tconsole.warn(scope.id(), '-', _error);\\n\\t\\t}\\n\\n\\t\\t(promise = this.load(_audio))['catch'](reject.bind(this));\\n\\n\\t\\treturn promise;\\n\\t},\\n\\n\\t/**\\n  * Adds a audio to the collection. You may also pass an itterable of items to add.\\n  * @arg {Audio|HTMLAudioElement|AudioBufferRecord|Array} _audio - The HTML Audio element or `AudioBufferRecord` for addition to the collection.\\n  * @returns {Promise}\\n  */\\n\\tfunction collect(_audio) {\\n\\t\\tvar type;\\n\\n\\t\\tif (!_audio) return false;\\n\\n\\t\\tif (_audio.length) {\\n\\t\\t\\treturn _audio.map(collect.bind(this));\\n\\t\\t}\\n\\n\\t\\ttype = _audio.type || getAudioType(_audio);\\n\\n\\t\\tif (type && this[type]) return this[type].add(_audio);\\n\\n\\t\\treturn false;\\n\\t},\\n\\t/**\\n  * Provides a collection of `AudioCollection` objects.\\n  * @returns {array}\\n  */\\n\\tfunction collections() {\\n\\t\\tvar result, types;\\n\\n\\t\\tresult = [];\\n\\t\\ttypes = _Object$keys(this);\\n\\n\\t\\ttypes.forEach((function (_type) {\\n\\t\\t\\tif (this[_type] instanceof AudioCollection) result.push(this[_type]);\\n\\t\\t}).bind(this));\\n\\n\\t\\treturn result;\\n\\t},\\n\\t/**\\n  * Proveds a string representation of the object type.\\n  */\\n\\tfunction toString() {\\n\\t\\treturn '[object ' + (this.constructor.name || 'Object') + ']';\\n\\t});\\n}\\n\\n/**\\n * An itterable with a collection of Audio objects. This interface also exposes methods for working with it members.\\n *\\n * <span class=\\\"note important\\\">NOTE: This constructor is used to construct its protoype which we instatiate with `AudioCollection.create()`.</span>\\n * @arg {function} $ - Passed by `type()`, gives you a pritier interface for defining the instance members.\\n * @classdesc An itterable with a collection of Audio objects. This interface also exposes methods for working with it members.\\n * @extends Collection\\n */\\nfunction AudioCollection($, sup) {\\n\\t/**\\n  * Duck typed multiple inheritance.\\n  */\\n\\t_util2['default'].mixin(this, EventTargetInterface, PlayableInterface, InspectorInterface, StateInterface);\\n\\n\\t$('type', function alloc(_type) {\\n\\t\\tif (_type) this.type = _type;\\n\\t\\tthis.initialize(_type, 'collection');\\n\\t},\\n\\t/**\\n  * Adds an Audio object to the collection.\\n  * @arg {HTMLAudioElement|Audio} _audio - Object to add.\\n  * @override\\n  * @returns {Audio}\\n  */\\n\\tfunction add(_audio) {\\n\\t\\tvar audio;\\n\\n\\t\\tif (!_audio) return false;\\n\\n\\t\\taudio = _audio instanceof Audio ? _audio : Audio.create(_audio, this.type);\\n\\n\\t\\tsup(this, 'add')(audio);\\n\\t\\tthis.addShadow(audio);\\n\\t\\tif (audio.id()) _util2['default'].assignRef(this, audio.id(), audio);\\n\\n\\t\\treturn audio;\\n\\t},\\n\\t/**\\n  * Query a collection for ownership of an audio object.\\n  * @arg {string|Audio|HTMLAudioElement} The validating reference.\\n  * @returns {boolean}\\n  */\\n\\tfunction has(_query) {\\n\\t\\treturn this.some(function (_audio) {\\n\\t\\t\\treturn _audio === _query || _audio.media === _query || _audio.fileName === _query || _audio.id() === _query;\\n\\t\\t});\\n\\t},\\n\\t/**\\n  * Get the owning manager interface for an Audio object.\\n  * @returns {AudioManager}\\n  */\\n\\tfunction manager() {\\n\\t\\treturn this.$el.closest('#man').data('context');\\n\\t},\\n\\t/**\\n  * Proveds a string representation of the object type.\\n  */\\n\\tfunction toString() {\\n\\t\\treturn '[object ' + (this.constructor.name || 'Object') + ']';\\n\\t});\\n}\\n/**\\n * Extend AudioCollection with Collection.\\n */\\nAudioCollection.prototype = _Object$create(_typesCollection2['default'], {\\n\\tconstructor: {\\n\\t\\tvalue: AudioCollection,\\n\\t\\tenumerable: false,\\n\\t\\twriteable: false,\\n\\t\\tconfigureable: false\\n\\t}\\n});\\n/**\\n * <span class=\\\"note important\\\">NOTE: This constructor is used to construct its protoype which we instatiate with `MediaCollection.create()`.</span>\\n * Returned as the result of some collection process.\\n * @arg {function} $ - Passed by `type()`, gives you a pritier interface for defining the instance members.\\n * @classdesc Returned as the result of some collection process.\\n *\\n * @class\\n * @extends AudioCollection\\n * @extends EventTargetInterface\\n * @extends InspectorInterface\\n * @extends LegislatorInterface\\n * @extends StateInterface\\n */\\nfunction MediaCollection($, sup) {\\n\\t$(\\n\\t/**\\n  * @override\\n  */\\n\\tfunction add(_media) {\\n\\t\\tthis.addShadow(_media);\\n\\t\\tif (_media.id()) _util2['default'].assignRef(this, _media.id(), _media);\\n\\t\\treturn _typesCollection2['default'].add.call(this, _media);\\n\\t},\\n\\t/**\\n  * @override\\n  */\\n\\tfunction addShadow(_media) {\\n\\t\\tvar $clone;\\n\\n\\t\\t$clone = _media.$el.clone();\\n\\t\\t$clone.data(_media.$el.data());\\n\\n\\t\\tthis.$el.append($clone);\\n\\t\\treturn this;\\n\\t});\\n}\\n\\n/**\\n * <span class=\\\"note important\\\">NOTE: This constructor is used to construct its protoype which we instatiate with `AudioCollection.create()`.</span>\\n * An interface for controlling a MediaElement or AudioBuffer.\\n * @arg {function} $ - Passed by `type()`, gives you a pritier interface for defining the instance members.\\n * @classdesc An itterable with a collection of Audio objects. This interface also exposes methods for working with it members.\\n */\\nfunction Audio($) {\\n\\n\\tfunction accessConfig(_augment, _val) {\\n\\t\\tif (_val) {\\n\\t\\t\\treturn this[_augment] = _val;\\n\\t\\t} else if (typeof _augment === 'string') {\\n\\t\\t\\treturn this[_augment];\\n\\t\\t} else {\\n\\t\\t\\t_util2['default'].mixin(this, _augment);\\n\\t\\t}\\n\\n\\t\\treturn _augment;\\n\\t}\\n\\n\\t/**\\n  * Duck typed multiple inheritance.\\n  */\\n\\t_util2['default'].mixin(this, EventTargetInterface, PlayableInterface, StateInterface);\\n\\n\\t$('type, media, activeSource, buffer, config, fileName, gain, delay',\\n\\n\\t/**\\n  * Allocates instance props.\\n  * @arg {HTMLAudioElement|AudioBufferRecord} _audio - The object being wrapped.\\n  * @arg {string} _type - The collection type.\\n  */\\n\\tfunction alloc(_audio, _type) {\\n\\t\\tvar $audio, config, ctx, readyEvent, id;\\n\\n\\t\\t$audio = $$(_audio.node || _audio);\\n\\t\\tconfig = $audio.pl();\\n\\t\\tctx = pl.game.getAudioContext();\\n\\t\\treadyEvent = $$.Event('ready', { targetScope: this });\\n\\n\\t\\tif (!(id = $audio.id())) $audio.id(id = _util2['default'].createId());\\n\\n\\t\\tthis.type = _type || null;\\n\\t\\tthis.fileName = _util2['default'].resolveFileName($audio.attr('src'));\\n\\t\\tthis.media = $audio[0];\\n\\t\\tthis.gain = ctx.createGain();\\n\\n\\t\\tthis.gain.connect(ctx.destination);\\n\\n\\t\\t$audio.data('context', this);\\n\\n\\t\\tif (_audio.buffer) this.buffer = _audio.buffer;\\n\\n\\t\\tObject.defineProperty(this, 'config', {\\n\\t\\t\\tvalue: accessConfig.bind(config),\\n\\t\\t\\twriteable: false\\n\\t\\t});\\n\\n\\t\\tthis.initialize(id, 'audio ' + this.type);\\n\\n\\t\\t$$(this.media).trigger(readyEvent);\\n\\t},\\n\\t/**\\n  * Provides an `AudioNode` for a particular audio source.\\n  * @returns\\n  *  - `MediaElementSouceNode` for audio elements.\\n  *  - `AudioBufferSourceNode` for an ArrayBuffer.\\n  */\\n\\tfunction getSource() {\\n\\t\\tvar ctx, src;\\n\\n\\t\\tctx = pl.game.getAudioContext();\\n\\n\\t\\tif (ctx) {\\n\\t\\t\\tif (this.buffer) {\\n\\t\\t\\t\\tsrc = ctx.createBufferSource();\\n\\t\\t\\t\\tsrc.buffer = this.buffer;\\n\\t\\t\\t\\tsrc.loop = this.media.loop;\\n\\n\\t\\t\\t\\treturn src;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\treturn this.activeSource || ctx.createMediaElementSource(this.media);\\n\\t\\t\\t\\t} catch (e) {\\n\\t\\t\\t\\t\\tconsole.warn(e.message, this);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t},\\n\\t/**\\n  * Get the owning collection interface for an Audio object.\\n  * @returns {AudioCollection}\\n  */\\n\\tfunction collection() {\\n\\t\\treturn this.$el.closest('.collection').data('context');\\n\\t},\\n\\t/**\\n  * Get the owning manager interface for an Audio object.\\n  * @returns {AudioManager}\\n  */\\n\\tfunction manager() {\\n\\t\\treturn this.$el.closest('#man').data('context');\\n\\t},\\n\\t/**\\n  * Proveds a string representation of the object type.\\n  */\\n\\tfunction toString() {\\n\\t\\treturn '[audio#' + this.id() + ' ' + this.fileName + ']';\\n\\t});\\n}\\n\\n/**\\n * A virtual DOM to handle navigation and propagation of events through the API interfaces.\\n * For example an Audio object that triggers an event it should bubble up to its collection and on through to the manager.\\n * That way you can listen for an event at any level of the interface.\\n */\\nEventTargetInterface = {\\n\\t/**\\n  * The shadow node.\\n  */\\n\\t$el: null,\\n\\t/**\\n  * Define a node for the shadow DOM.\\n  * @arg {string} _id - Idendifier for the node.\\n  * @arg {string} _class - Classification of the node.\\n  */\\n\\tinitialize: function initialize(_id, _class) {\\n\\t\\tObject.defineProperty(this, '$el', {\\n\\t\\t\\tvalue: $$('<div ' + (_id ? 'id=\\\"' + _id + '\\\"' : '') + ' ' + (_class ? 'class=\\\"' + _class + '\\\"' : '') + '>'),\\n\\t\\t\\twriteable: false,\\n\\t\\t\\tconfigureable: false,\\n\\t\\t\\tenumerable: false\\n\\t\\t});\\n\\n\\t\\tthis.$el.data('context', this);\\n\\t},\\n\\t/**\\n  * Get/set the id of the interface.\\n  * @arg {string} _id - A valid CSS ID.\\n  */\\n\\tid: function id(_id) {\\n\\t\\treturn this.$el.id(_id);\\n\\t},\\n\\t/**\\n  * Add an interface to the shadow DOM.\\n  * @arg {Audio|AudioCollection} _obj - The object to add.\\n  * @returns this\\n  */\\n\\taddShadow: function addShadow(_obj) {\\n\\t\\tthis.$el.append(_obj.$el);\\n\\t\\treturn this;\\n\\t},\\n\\t/**\\n  * Provides the parent level interface.\\n  * @returns {AudioManager|AudioCollection}\\n  */\\n\\tparent: function parent() {\\n\\t\\treturn this.$el.parent().data('context');\\n\\t},\\n\\t/**\\n  * Find an interface in the API tree.\\n  * @arg {string} _selector - A CSS selector to match a node in the shadow DOM API tree.\\n  */\\n\\tfind: function find(_selector) {\\n\\t\\tvar collection = MediaCollection.create();\\n\\n\\t\\tthis.$el.find(_selector).each(function () {\\n\\t\\t\\tcollection.add($$(this).data('context'));\\n\\t\\t});\\n\\n\\t\\treturn collection;\\n\\t},\\n\\t/**\\n  * \\n  */\\n\\tfilter: function filter(_selector) {\\n\\t\\tvar collection;\\n\\n\\t\\tif (!_selector) return this;\\n\\n\\t\\tcollection = MediaCollection.create();\\n\\n\\t\\tthis.$el.children().each(function () {\\n\\t\\t\\tvar $node = $$(this);\\n\\t\\t\\tif ($node.is(_selector)) collection.add($node.data('context'));\\n\\t\\t});\\n\\n\\t\\treturn collection;\\n\\t},\\n\\t/**\\n  * Attach events to a shadow node.\\n  */\\n\\ton: function on() {\\n\\t\\tthis.$el.on.apply(this.$el, arguments);\\n\\t\\treturn this;\\n\\t},\\n\\t/**\\n  * Remove events from a shadow node.\\n  */\\n\\toff: function off() {\\n\\t\\tthis.$el.off.apply(this.$el, arguments);\\n\\t\\treturn this;\\n\\t},\\n\\t/**\\n  * Dispatch a event from a shadow node.\\n  */\\n\\ttrigger: function trigger() {\\n\\t\\tthis.$el.trigger.apply(this.$el, arguments);\\n\\t\\treturn this;\\n\\t}\\n};\\n/**\\n * Interface for inspecting an API level (i.e. manager or collection).\\n */\\nInspectorInterface = {\\n\\tplaying: function playing(_filterSelector) {\\n\\t\\tvar playing = this.find('.PLAYING').filter(_filterSelector);\\n\\t\\treturn !!playing.length && playing;\\n\\t}\\n};\\n\\nLegislatorInterface = {\\n\\trule: function rule(_selector, _event, _handler) {\\n\\t\\tvar handler, args;\\n\\n\\t\\thandler = [typeof _event, typeof _handler].indexOf('function');\\n\\t\\targs = _util2['default'].toArray(arguments).slice(1);\\n\\n\\t\\tif (typeof _event === 'function') _event = 'play pause stopped ended';\\n\\n\\t\\tthis.on(_event, (function (_e) {\\n\\t\\t\\tif (_e.target.$el.is(_selector)) args[handler].apply(this, arguments);\\n\\t\\t}).bind(this));\\n\\t}\\n};\\n\\nStateInterface = {\\n\\tstate: function state() {\\n\\t\\treturn this.$el.state.apply(this.$el, arguments);\\n\\t},\\n\\n\\taddState: function addState(_state) {\\n\\t\\treturn this.$el.addClass(_state.toUpperCase());\\n\\t},\\n\\n\\tremoveState: function removeState(_state) {\\n\\t\\treturn this.$el.removeClass(_state.toUpperCase());\\n\\t}\\n};\\n\\n/**\\n * Interface for methods involving audio control for any API level.\\n */\\nPlayableInterface = {\\n\\t/**\\n  * Play an audio object.\\n  */\\n\\tplay: function play() {\\n\\t\\tvar ctx, src, proxyEvent, dest, delay, shouldPlay;\\n\\n\\t\\tfunction handler(_event) {\\n\\t\\t\\tif (_event.type === 'ended') {\\n\\t\\t\\t\\tsrc.disconnect();\\n\\t\\t\\t\\tsrc = null;\\n\\t\\t\\t}\\n\\t\\t\\tproxyEvent(_event);\\n\\t\\t}\\n\\n\\t\\tfunction playSource() {\\n\\t\\t\\tif (this.buffer) {\\n\\t\\t\\t\\tsrc.start(0);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.media.play();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfunction response(_val) {\\n\\t\\t\\tshouldPlay = _val;\\n\\t\\t}\\n\\n\\t\\tctx = pl.game.getAudioContext();\\n\\t\\tshouldPlay = true;\\n\\n\\t\\tif (ctx.state === 'suspended') return false;\\n\\n\\t\\tif (this.background) return this.background.play();\\n\\t\\tif (this.length != null) return this[0] && this[0].play();\\n\\n\\t\\tif (!(src = this.getSource())) return false;\\n\\t\\tproxyEvent = (function (_event) {\\n\\t\\t\\tvar theEvent = $$.Event(_event.type, { target: this, targetSource: _event.target, targetNode: this.media });\\n\\n\\t\\t\\t// proxy event to shadow DOM only when it has an active source.\\n\\t\\t\\tif (this.activeSource) {\\n\\t\\t\\t\\tthis.trigger(theEvent);\\n\\n\\t\\t\\t\\tif (_event.type === 'ended') {\\n\\t\\t\\t\\t\\tthis.removeState('PLAYING');\\n\\t\\t\\t\\t\\tthis.activeSource = null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t_event.target.removeEventListener(_event.type, handler, false);\\n\\t\\t}).bind(this);\\n\\n\\t\\tsrc.connect(this.gain);\\n\\n\\t\\t(src.mediaElement || src).addEventListener('ended', handler, false);\\n\\n\\t\\tthis.trigger($$.Event('shouldPlay', { target: this, targetSource: src, targetNode: this.media, response: response }));\\n\\n\\t\\tif (shouldPlay) {\\n\\t\\t\\tthis.addState('PLAYING');\\n\\t\\t\\tthis.activeSource = src;\\n\\n\\t\\t\\tif (delay = this.config('delay')) {\\n\\t\\t\\t\\tsetTimeout(playSource.bind(this), _util2['default'].toMillisec(delay));\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tplaySource.call(this);\\n\\t\\t\\t}\\n\\n\\t\\t\\thandler({ target: src.mediaElement || src, type: 'play' });\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t},\\n\\t/**\\n  * Pause an audio object.\\n  */\\n\\tpause: function pause() {\\n\\t\\treturn this;\\n\\t},\\n\\t/**\\n  * Stop an audio object.\\n  */\\n\\tstop: function stop(_filterSelector) {\\n\\t\\tvar stopEvent = $$.Event('stopped', { target: this, targetSource: this.activeSource, targetNode: this.media });\\n\\n\\t\\tif (this.background) return this.background.stop(_filterSelector);\\n\\t\\tif (this.length != null) {\\n\\t\\t\\tif (_filterSelector === '@ALL') {\\n\\t\\t\\t\\tthis.forEach(function (_audio) {\\n\\t\\t\\t\\t\\t_audio.stop();\\n\\t\\t\\t\\t});\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn this[0] && this[0].stop();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!this.activeSource) return false;\\n\\n\\t\\tif (this.buffer) {\\n\\t\\t\\tthis.activeSource.stop();\\n\\t\\t} else {\\n\\t\\t\\tthis.media.pause();\\n\\t\\t\\tthis.media.currentTime = 0;\\n\\t\\t}\\n\\n\\t\\tthis.activeSource = null;\\n\\n\\t\\tthis.removeState('PLAYING');\\n\\t\\tthis.trigger(stopEvent);\\n\\n\\t\\treturn this;\\n\\t},\\n\\t/**\\n  * @todo MGR, 2/9/2016: Pipe audio sources into gain nodes for each level of the API.\\n  */\\n\\tvolume: function volume(_level, _filterSelector) {\\n\\t\\tif (this.background) return this.background.volume(_level);\\n\\t\\tif (this.length != null) {\\n\\t\\t\\tif (_filterSelector === '@ALL') {\\n\\t\\t\\t\\tthis.forEach(function (_audio) {\\n\\t\\t\\t\\t\\t_audio.volume(_level);\\n\\t\\t\\t\\t});\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn this[0] && this[0].volume(_level);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tthis.gain.gain.value = _level;\\n\\t}\\n};\\n\\nexports['default'] = _typesType2['default'](MediaManager, AudioManager, AudioCollection, Audio);\\n\\nAudioCollection.extend(MediaCollection);\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 75 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"module.exports = { \\\"default\\\": __webpack_require__(76), __esModule: true };//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UuanM/YWJkNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0IiLCJmaWxlIjoiNzUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vcHJvbWlzZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UuanNcbiAqKiBtb2R1bGUgaWQgPSA3NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 76 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"__webpack_require__(77);\\n__webpack_require__(78);\\n__webpack_require__(87);\\n__webpack_require__(91);\\nmodule.exports = __webpack_require__(10).Promise;//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9mbi9wcm9taXNlLmpzP2Q0ZWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI3Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5wcm9taXNlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKS5Qcm9taXNlO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9mbi9wcm9taXNlLmpzXG4gKiogbW9kdWxlIGlkID0gNzZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 77 */\n/***/ function(module, exports) {\n\n\teval(\"//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI3Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 78 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"'use strict';\\nvar $at  = __webpack_require__(79)(true);\\n\\n// 21.1.3.27 String.prototype[@@iterator]()\\n__webpack_require__(80)(String, 'String', function(iterated){\\n  this._t = String(iterated); // target\\n  this._i = 0;                // next index\\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\\n}, function(){\\n  var O     = this._t\\n    , index = this._i\\n    , point;\\n  if(index >= O.length)return {value: undefined, done: true};\\n  point = $at(O, index);\\n  this._i += point.length;\\n  return {value: point, done: false};\\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanM/ZDQ0OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IsY0FBYztBQUNkO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0EsVUFBVTtBQUNWLENBQUMiLCJmaWxlIjoiNzguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgJGF0ICA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uKGl0ZXJhdGVkKXtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24oKXtcbiAgdmFyIE8gICAgID0gdGhpcy5fdFxuICAgICwgaW5kZXggPSB0aGlzLl9pXG4gICAgLCBwb2ludDtcbiAgaWYoaW5kZXggPj0gTy5sZW5ndGgpcmV0dXJuIHt2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHt2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlfTtcbn0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanNcbiAqKiBtb2R1bGUgaWQgPSA3OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 79 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var toInteger = __webpack_require__(29)\\n  , defined   = __webpack_require__(27);\\n// true  -> String#at\\n// false -> String#codePointAt\\nmodule.exports = function(TO_STRING){\\n  return function(that, pos){\\n    var s = String(defined(that))\\n      , i = toInteger(pos)\\n      , l = s.length\\n      , a, b;\\n    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;\\n    a = s.charCodeAt(i);\\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\\n      ? TO_STRING ? s.charAt(i) : a\\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\\n  };\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zdHJpbmctYXQuanM/NDhlNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ijc5LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIGRlZmluZWQgICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFRPX1NUUklORyl7XG4gIHJldHVybiBmdW5jdGlvbih0aGF0LCBwb3Mpe1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpXG4gICAgICAsIGkgPSB0b0ludGVnZXIocG9zKVxuICAgICAgLCBsID0gcy5sZW5ndGhcbiAgICAgICwgYSwgYjtcbiAgICBpZihpIDwgMCB8fCBpID49IGwpcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3N0cmluZy1hdC5qc1xuICoqIG1vZHVsZSBpZCA9IDc5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 80 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"'use strict';\\nvar LIBRARY        = __webpack_require__(81)\\n  , $export        = __webpack_require__(8)\\n  , redefine       = __webpack_require__(82)\\n  , hide           = __webpack_require__(13)\\n  , has            = __webpack_require__(43)\\n  , Iterators      = __webpack_require__(83)\\n  , $iterCreate    = __webpack_require__(84)\\n  , setToStringTag = __webpack_require__(85)\\n  , getPrototypeOf = __webpack_require__(86)\\n  , ITERATOR       = __webpack_require__(32)('iterator')\\n  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`\\n  , FF_ITERATOR    = '@@iterator'\\n  , KEYS           = 'keys'\\n  , VALUES         = 'values';\\n\\nvar returnThis = function(){ return this; };\\n\\nmodule.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){\\n  $iterCreate(Constructor, NAME, next);\\n  var getMethod = function(kind){\\n    if(!BUGGY && kind in proto)return proto[kind];\\n    switch(kind){\\n      case KEYS: return function keys(){ return new Constructor(this, kind); };\\n      case VALUES: return function values(){ return new Constructor(this, kind); };\\n    } return function entries(){ return new Constructor(this, kind); };\\n  };\\n  var TAG        = NAME + ' Iterator'\\n    , DEF_VALUES = DEFAULT == VALUES\\n    , VALUES_BUG = false\\n    , proto      = Base.prototype\\n    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]\\n    , $default   = $native || getMethod(DEFAULT)\\n    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined\\n    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native\\n    , methods, key, IteratorPrototype;\\n  // Fix native\\n  if($anyNative){\\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));\\n    if(IteratorPrototype !== Object.prototype){\\n      // Set @@toStringTag to native iterators\\n      setToStringTag(IteratorPrototype, TAG, true);\\n      // fix for some old engines\\n      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);\\n    }\\n  }\\n  // fix Array#{values, @@iterator}.name in V8 / FF\\n  if(DEF_VALUES && $native && $native.name !== VALUES){\\n    VALUES_BUG = true;\\n    $default = function values(){ return $native.call(this); };\\n  }\\n  // Define iterator\\n  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){\\n    hide(proto, ITERATOR, $default);\\n  }\\n  // Plug for library\\n  Iterators[NAME] = $default;\\n  Iterators[TAG]  = returnThis;\\n  if(DEFAULT){\\n    methods = {\\n      values:  DEF_VALUES ? $default : getMethod(VALUES),\\n      keys:    IS_SET     ? $default : getMethod(KEYS),\\n      entries: $entries\\n    };\\n    if(FORCED)for(key in methods){\\n      if(!(key in proto))redefine(proto, key, methods[key]);\\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\\n  }\\n  return methods;\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWRlZmluZS5qcz85ZjNkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEIsYUFBYTs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxvQ0FBb0M7QUFDNUUsNENBQTRDLG9DQUFvQztBQUNoRixLQUFLLDJCQUEyQixvQ0FBb0M7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixtQkFBbUI7QUFDbkM7QUFDQTtBQUNBLGlDQUFpQywyQkFBMkI7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBIiwiZmlsZSI6IjgwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHJlZGVmaW5lICAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIGhpZGUgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIEl0ZXJhdG9ycyAgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgLCAkaXRlckNyZWF0ZSAgICA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJylcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJylcbiAgLCBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIElURVJBVE9SICAgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBCVUdHWSAgICAgICAgICA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKSAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG4gICwgRkZfSVRFUkFUT1IgICAgPSAnQEBpdGVyYXRvcidcbiAgLCBLRVlTICAgICAgICAgICA9ICdrZXlzJ1xuICAsIFZBTFVFUyAgICAgICAgID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKXtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24oa2luZCl7XG4gICAgaWYoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaChraW5kKXtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCl7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHICAgICAgICA9IE5BTUUgKyAnIEl0ZXJhdG9yJ1xuICAgICwgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTXG4gICAgLCBWQUxVRVNfQlVHID0gZmFsc2VcbiAgICAsIHByb3RvICAgICAgPSBCYXNlLnByb3RvdHlwZVxuICAgICwgJG5hdGl2ZSAgICA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXVxuICAgICwgJGRlZmF1bHQgICA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpXG4gICAgLCAkZW50cmllcyAgID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZFxuICAgICwgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmVcbiAgICAsIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYoJGFueU5hdGl2ZSl7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UpKTtcbiAgICBpZihJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSl7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYoIUxJQlJBUlkgJiYgIWhhcyhJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IpKWhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZihERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpe1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCl7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKXtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddICA9IHJldHVyblRoaXM7XG4gIGlmKERFRkFVTFQpe1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6ICBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6ICAgIElTX1NFVCAgICAgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZihGT1JDRUQpZm9yKGtleSBpbiBtZXRob2RzKXtcbiAgICAgIGlmKCEoa2V5IGluIHByb3RvKSlyZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWRlZmluZS5qc1xuICoqIG1vZHVsZSBpZCA9IDgwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 81 */\n/***/ function(module, exports) {\n\n\teval(\"module.exports = true;//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19saWJyYXJ5LmpzPzllYjQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiODEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHRydWU7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2xpYnJhcnkuanNcbiAqKiBtb2R1bGUgaWQgPSA4MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 82 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"module.exports = __webpack_require__(13);//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS5qcz8xYjRhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjgyLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19oaWRlJyk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3JlZGVmaW5lLmpzXG4gKiogbW9kdWxlIGlkID0gODJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 83 */\n/***/ function(module, exports) {\n\n\teval(\"module.exports = {};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyYXRvcnMuanM/OWE0ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI4My5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge307XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXJhdG9ycy5qc1xuICoqIG1vZHVsZSBpZCA9IDgzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 84 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"'use strict';\\nvar create         = __webpack_require__(55)\\n  , descriptor     = __webpack_require__(22)\\n  , setToStringTag = __webpack_require__(85)\\n  , IteratorPrototype = {};\\n\\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\\n__webpack_require__(13)(IteratorPrototype, __webpack_require__(32)('iterator'), function(){ return this; });\\n\\nmodule.exports = function(Constructor, NAME, next){\\n  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});\\n  setToStringTag(Constructor, NAME + ' Iterator');\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcz84NjQzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyRkFBZ0YsYUFBYSxFQUFFOztBQUUvRjtBQUNBLHFEQUFxRCwwQkFBMEI7QUFDL0U7QUFDQSIsImZpbGUiOiI4NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKVxuICAsIGRlc2NyaXB0b3IgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpXG4gICwgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpXG4gICwgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCl7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwge25leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCl9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDg0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 85 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var def = __webpack_require__(14).f\\n  , has = __webpack_require__(43)\\n  , TAG = __webpack_require__(32)('toStringTag');\\n\\nmodule.exports = function(it, tag, stat){\\n  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcz8zMDQ5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtFQUFrRSwrQkFBK0I7QUFDakciLCJmaWxlIjoiODUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIHRhZywgc3RhdCl7XG4gIGlmKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpZGVmKGl0LCBUQUcsIHtjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWd9KTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzXG4gKiogbW9kdWxlIGlkID0gODVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 86 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\\r\\nvar has         = __webpack_require__(43)\\r\\n  , toObject    = __webpack_require__(26)\\r\\n  , IE_PROTO    = __webpack_require__(47)('IE_PROTO')\\r\\n  , ObjectProto = Object.prototype;\\r\\n\\r\\nmodule.exports = Object.getPrototypeOf || function(O){\\r\\n  O = toObject(O);\\r\\n  if(has(O, IE_PROTO))return O[IE_PROTO];\\r\\n  if(typeof O.constructor == 'function' && O instanceof O.constructor){\\r\\n    return O.constructor.prototype;\\r\\n  } return O instanceof Object ? ObjectProto : null;\\r\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ3BvLmpzP2EwODEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIIiwiZmlsZSI6Ijg2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcclxudmFyIGhhcyAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcclxuICAsIHRvT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcclxuICAsIElFX1BST1RPICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpXHJcbiAgLCBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbihPKXtcclxuICBPID0gdG9PYmplY3QoTyk7XHJcbiAgaWYoaGFzKE8sIElFX1BST1RPKSlyZXR1cm4gT1tJRV9QUk9UT107XHJcbiAgaWYodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcil7XHJcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XHJcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcclxufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdwby5qc1xuICoqIG1vZHVsZSBpZCA9IDg2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 87 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"__webpack_require__(88);\\nvar global        = __webpack_require__(9)\\n  , hide          = __webpack_require__(13)\\n  , Iterators     = __webpack_require__(83)\\n  , TO_STRING_TAG = __webpack_require__(32)('toStringTag');\\n\\nfor(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){\\n  var NAME       = collections[i]\\n    , Collection = global[NAME]\\n    , proto      = Collection && Collection.prototype;\\n  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);\\n  Iterators[NAME] = Iterators.Array;\\n}//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanM/OTVkNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdHQUF3RyxPQUFPO0FBQy9HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI4Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2xvYmFsICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgaGlkZSAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIEl0ZXJhdG9ycyAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAsIFRPX1NUUklOR19UQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxuZm9yKHZhciBjb2xsZWN0aW9ucyA9IFsnTm9kZUxpc3QnLCAnRE9NVG9rZW5MaXN0JywgJ01lZGlhTGlzdCcsICdTdHlsZVNoZWV0TGlzdCcsICdDU1NSdWxlTGlzdCddLCBpID0gMDsgaSA8IDU7IGkrKyl7XG4gIHZhciBOQU1FICAgICAgID0gY29sbGVjdGlvbnNbaV1cbiAgICAsIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV1cbiAgICAsIHByb3RvICAgICAgPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICBpZihwcm90byAmJiAhcHJvdG9bVE9fU1RSSU5HX1RBR10paGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IEl0ZXJhdG9ycy5BcnJheTtcbn1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzXG4gKiogbW9kdWxlIGlkID0gODdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 88 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"'use strict';\\nvar addToUnscopables = __webpack_require__(89)\\n  , step             = __webpack_require__(90)\\n  , Iterators        = __webpack_require__(83)\\n  , toIObject        = __webpack_require__(44);\\n\\n// 22.1.3.4 Array.prototype.entries()\\n// 22.1.3.13 Array.prototype.keys()\\n// 22.1.3.29 Array.prototype.values()\\n// 22.1.3.30 Array.prototype[@@iterator]()\\nmodule.exports = __webpack_require__(80)(Array, 'Array', function(iterated, kind){\\n  this._t = toIObject(iterated); // target\\n  this._i = 0;                   // next index\\n  this._k = kind;                // kind\\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\\n}, function(){\\n  var O     = this._t\\n    , kind  = this._k\\n    , index = this._i++;\\n  if(!O || index >= O.length){\\n    this._t = undefined;\\n    return step(1);\\n  }\\n  if(kind == 'keys'  )return step(0, index);\\n  if(kind == 'values')return step(0, O[index]);\\n  return step(0, [index, O[index]]);\\n}, 'values');\\n\\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\\nIterators.Arguments = Iterators.Array;\\n\\naddToUnscopables('keys');\\naddToUnscopables('values');\\naddToUnscopables('entries');//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcz80NGYzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyxjQUFjO0FBQ2QsaUJBQWlCO0FBQ2pCO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsImZpbGUiOiI4OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJylcbiAgLCBzdGVwICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJylcbiAgLCBJdGVyYXRvcnMgICAgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgLCB0b0lPYmplY3QgICAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uKGl0ZXJhdGVkLCBraW5kKXtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbigpe1xuICB2YXIgTyAgICAgPSB0aGlzLl90XG4gICAgLCBraW5kICA9IHRoaXMuX2tcbiAgICAsIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZighTyB8fCBpbmRleCA+PSBPLmxlbmd0aCl7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZihraW5kID09ICdrZXlzJyAgKXJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYoa2luZCA9PSAndmFsdWVzJylyZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzXG4gKiogbW9kdWxlIGlkID0gODhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 89 */\n/***/ function(module, exports) {\n\n\teval(\"module.exports = function(){ /* empty */ };//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanM/NTI5NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw0QkFBNEIiLCJmaWxlIjoiODkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qc1xuICoqIG1vZHVsZSBpZCA9IDg5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 90 */\n/***/ function(module, exports) {\n\n\teval(\"module.exports = function(done, value){\\n  return {value: value, done: !!done};\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLXN0ZXAuanM/NGU0NyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLFVBQVU7QUFDViIsImZpbGUiOiI5MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZG9uZSwgdmFsdWUpe1xuICByZXR1cm4ge3ZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lfTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItc3RlcC5qc1xuICoqIG1vZHVsZSBpZCA9IDkwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 91 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"'use strict';\\nvar LIBRARY            = __webpack_require__(81)\\n  , global             = __webpack_require__(9)\\n  , ctx                = __webpack_require__(11)\\n  , classof            = __webpack_require__(92)\\n  , $export            = __webpack_require__(8)\\n  , isObject           = __webpack_require__(16)\\n  , anObject           = __webpack_require__(15)\\n  , aFunction          = __webpack_require__(12)\\n  , anInstance         = __webpack_require__(93)\\n  , forOf              = __webpack_require__(94)\\n  , setProto           = __webpack_require__(98).set\\n  , speciesConstructor = __webpack_require__(101)\\n  , task               = __webpack_require__(102).set\\n  , microtask          = __webpack_require__(104)\\n  , PROMISE            = 'Promise'\\n  , TypeError          = global.TypeError\\n  , process            = global.process\\n  , $Promise           = global[PROMISE]\\n  , process            = global.process\\n  , isNode             = classof(process) == 'process'\\n  , empty              = function(){ /* empty */ }\\n  , Internal, GenericPromiseCapability, Wrapper;\\n\\nvar USE_NATIVE = !!function(){\\n  try {\\n    // correct subclassing with @@species support\\n    var promise     = $Promise.resolve(1)\\n      , FakePromise = (promise.constructor = {})[__webpack_require__(32)('species')] = function(exec){ exec(empty, empty); };\\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\\n    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;\\n  } catch(e){ /* empty */ }\\n}();\\n\\n// helpers\\nvar sameConstructor = function(a, b){\\n  // with library wrapper special case\\n  return a === b || a === $Promise && b === Wrapper;\\n};\\nvar isThenable = function(it){\\n  var then;\\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\\n};\\nvar newPromiseCapability = function(C){\\n  return sameConstructor($Promise, C)\\n    ? new PromiseCapability(C)\\n    : new GenericPromiseCapability(C);\\n};\\nvar PromiseCapability = GenericPromiseCapability = function(C){\\n  var resolve, reject;\\n  this.promise = new C(function($$resolve, $$reject){\\n    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');\\n    resolve = $$resolve;\\n    reject  = $$reject;\\n  });\\n  this.resolve = aFunction(resolve);\\n  this.reject  = aFunction(reject);\\n};\\nvar perform = function(exec){\\n  try {\\n    exec();\\n  } catch(e){\\n    return {error: e};\\n  }\\n};\\nvar notify = function(promise, isReject){\\n  if(promise._n)return;\\n  promise._n = true;\\n  var chain = promise._c;\\n  microtask(function(){\\n    var value = promise._v\\n      , ok    = promise._s == 1\\n      , i     = 0;\\n    var run = function(reaction){\\n      var handler = ok ? reaction.ok : reaction.fail\\n        , resolve = reaction.resolve\\n        , reject  = reaction.reject\\n        , domain  = reaction.domain\\n        , result, then;\\n      try {\\n        if(handler){\\n          if(!ok){\\n            if(promise._h == 2)onHandleUnhandled(promise);\\n            promise._h = 1;\\n          }\\n          if(handler === true)result = value;\\n          else {\\n            if(domain)domain.enter();\\n            result = handler(value);\\n            if(domain)domain.exit();\\n          }\\n          if(result === reaction.promise){\\n            reject(TypeError('Promise-chain cycle'));\\n          } else if(then = isThenable(result)){\\n            then.call(result, resolve, reject);\\n          } else resolve(result);\\n        } else reject(value);\\n      } catch(e){\\n        reject(e);\\n      }\\n    };\\n    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach\\n    promise._c = [];\\n    promise._n = false;\\n    if(isReject && !promise._h)onUnhandled(promise);\\n  });\\n};\\nvar onUnhandled = function(promise){\\n  task.call(global, function(){\\n    var value = promise._v\\n      , abrupt, handler, console;\\n    if(isUnhandled(promise)){\\n      abrupt = perform(function(){\\n        if(isNode){\\n          process.emit('unhandledRejection', value, promise);\\n        } else if(handler = global.onunhandledrejection){\\n          handler({promise: promise, reason: value});\\n        } else if((console = global.console) && console.error){\\n          console.error('Unhandled promise rejection', value);\\n        }\\n      });\\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\\n    } promise._a = undefined;\\n    if(abrupt)throw abrupt.error;\\n  });\\n};\\nvar isUnhandled = function(promise){\\n  if(promise._h == 1)return false;\\n  var chain = promise._a || promise._c\\n    , i     = 0\\n    , reaction;\\n  while(chain.length > i){\\n    reaction = chain[i++];\\n    if(reaction.fail || !isUnhandled(reaction.promise))return false;\\n  } return true;\\n};\\nvar onHandleUnhandled = function(promise){\\n  task.call(global, function(){\\n    var handler;\\n    if(isNode){\\n      process.emit('rejectionHandled', promise);\\n    } else if(handler = global.onrejectionhandled){\\n      handler({promise: promise, reason: promise._v});\\n    }\\n  });\\n};\\nvar $reject = function(value){\\n  var promise = this;\\n  if(promise._d)return;\\n  promise._d = true;\\n  promise = promise._w || promise; // unwrap\\n  promise._v = value;\\n  promise._s = 2;\\n  if(!promise._a)promise._a = promise._c.slice();\\n  notify(promise, true);\\n};\\nvar $resolve = function(value){\\n  var promise = this\\n    , then;\\n  if(promise._d)return;\\n  promise._d = true;\\n  promise = promise._w || promise; // unwrap\\n  try {\\n    if(promise === value)throw TypeError(\\\"Promise can't be resolved itself\\\");\\n    if(then = isThenable(value)){\\n      microtask(function(){\\n        var wrapper = {_w: promise, _d: false}; // wrap\\n        try {\\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\\n        } catch(e){\\n          $reject.call(wrapper, e);\\n        }\\n      });\\n    } else {\\n      promise._v = value;\\n      promise._s = 1;\\n      notify(promise, false);\\n    }\\n  } catch(e){\\n    $reject.call({_w: promise, _d: false}, e); // wrap\\n  }\\n};\\n\\n// constructor polyfill\\nif(!USE_NATIVE){\\n  // 25.4.3.1 Promise(executor)\\n  $Promise = function Promise(executor){\\n    anInstance(this, $Promise, PROMISE, '_h');\\n    aFunction(executor);\\n    Internal.call(this);\\n    try {\\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\\n    } catch(err){\\n      $reject.call(this, err);\\n    }\\n  };\\n  Internal = function Promise(executor){\\n    this._c = [];             // <- awaiting reactions\\n    this._a = undefined;      // <- checked in isUnhandled reactions\\n    this._s = 0;              // <- state\\n    this._d = false;          // <- done\\n    this._v = undefined;      // <- value\\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\\n    this._n = false;          // <- notify\\n  };\\n  Internal.prototype = __webpack_require__(105)($Promise.prototype, {\\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\\n    then: function then(onFulfilled, onRejected){\\n      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));\\n      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;\\n      reaction.fail   = typeof onRejected == 'function' && onRejected;\\n      reaction.domain = isNode ? process.domain : undefined;\\n      this._c.push(reaction);\\n      if(this._a)this._a.push(reaction);\\n      if(this._s)notify(this, false);\\n      return reaction.promise;\\n    },\\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\\n    'catch': function(onRejected){\\n      return this.then(undefined, onRejected);\\n    }\\n  });\\n  PromiseCapability = function(){\\n    var promise  = new Internal;\\n    this.promise = promise;\\n    this.resolve = ctx($resolve, promise, 1);\\n    this.reject  = ctx($reject, promise, 1);\\n  };\\n}\\n\\n$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});\\n__webpack_require__(85)($Promise, PROMISE);\\n__webpack_require__(106)(PROMISE);\\nWrapper = __webpack_require__(10)[PROMISE];\\n\\n// statics\\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\\n  // 25.4.4.5 Promise.reject(r)\\n  reject: function reject(r){\\n    var capability = newPromiseCapability(this)\\n      , $$reject   = capability.reject;\\n    $$reject(r);\\n    return capability.promise;\\n  }\\n});\\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\\n  // 25.4.4.6 Promise.resolve(x)\\n  resolve: function resolve(x){\\n    // instanceof instead of internal slot check because we should fix it without replacement native Promise core\\n    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;\\n    var capability = newPromiseCapability(this)\\n      , $$resolve  = capability.resolve;\\n    $$resolve(x);\\n    return capability.promise;\\n  }\\n});\\n$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(107)(function(iter){\\n  $Promise.all(iter)['catch'](empty);\\n})), PROMISE, {\\n  // 25.4.4.1 Promise.all(iterable)\\n  all: function all(iterable){\\n    var C          = this\\n      , capability = newPromiseCapability(C)\\n      , resolve    = capability.resolve\\n      , reject     = capability.reject;\\n    var abrupt = perform(function(){\\n      var values    = []\\n        , index     = 0\\n        , remaining = 1;\\n      forOf(iterable, false, function(promise){\\n        var $index        = index++\\n          , alreadyCalled = false;\\n        values.push(undefined);\\n        remaining++;\\n        C.resolve(promise).then(function(value){\\n          if(alreadyCalled)return;\\n          alreadyCalled  = true;\\n          values[$index] = value;\\n          --remaining || resolve(values);\\n        }, reject);\\n      });\\n      --remaining || resolve(values);\\n    });\\n    if(abrupt)reject(abrupt.error);\\n    return capability.promise;\\n  },\\n  // 25.4.4.4 Promise.race(iterable)\\n  race: function race(iterable){\\n    var C          = this\\n      , capability = newPromiseCapability(C)\\n      , reject     = capability.reject;\\n    var abrupt = perform(function(){\\n      forOf(iterable, false, function(promise){\\n        C.resolve(promise).then(capability.resolve, reject);\\n      });\\n    });\\n    if(abrupt)reject(abrupt.error);\\n    return capability.promise;\\n  }\\n});//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 92 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// getting tag from 19.1.3.6 Object.prototype.toString()\\nvar cof = __webpack_require__(25)\\n  , TAG = __webpack_require__(32)('toStringTag')\\n  // ES3 wrong here\\n  , ARG = cof(function(){ return arguments; }()) == 'Arguments';\\n\\n// fallback for IE11 Script Access Denied error\\nvar tryGet = function(it, key){\\n  try {\\n    return it[key];\\n  } catch(e){ /* empty */ }\\n};\\n\\nmodule.exports = function(it){\\n  var O, T, B;\\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\\n    // @@toStringTag case\\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\\n    // builtinTag case\\n    : ARG ? cof(O)\\n    // ES3 arguments fallback\\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jbGFzc29mLmpzPzdjZmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsa0JBQWtCLEVBQUU7O0FBRTdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxVQUFVO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiOTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpXG4gICwgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJylcbiAgLy8gRVMzIHdyb25nIGhlcmVcbiAgLCBBUkcgPSBjb2YoZnVuY3Rpb24oKXsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbihpdCwga2V5KXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jbGFzc29mLmpzXG4gKiogbW9kdWxlIGlkID0gOTJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 93 */\n/***/ function(module, exports) {\n\n\teval(\"module.exports = function(it, Constructor, name, forbiddenField){\\n  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){\\n    throw TypeError(name + ': incorrect invocation!');\\n  } return it;\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcz9lMDRhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCIsImZpbGUiOiI5My5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCl7XG4gIGlmKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKXtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLWluc3RhbmNlLmpzXG4gKiogbW9kdWxlIGlkID0gOTNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 94 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var ctx         = __webpack_require__(11)\\n  , call        = __webpack_require__(95)\\n  , isArrayIter = __webpack_require__(96)\\n  , anObject    = __webpack_require__(15)\\n  , toLength    = __webpack_require__(28)\\n  , getIterFn   = __webpack_require__(97);\\nmodule.exports = function(iterable, entries, fn, that, ITERATOR){\\n  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)\\n    , f      = ctx(fn, that, entries ? 2 : 1)\\n    , index  = 0\\n    , length, step, iterator;\\n  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');\\n  // fast case for arrays with default iterator\\n  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){\\n    entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\\n  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){\\n    call(iterator, f, step.value, entries);\\n  }\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mb3Itb2YuanM/Njc5ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxpQkFBaUIsRUFBRTtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLGdCQUFnQjtBQUNoRjtBQUNBLEdBQUcsMkNBQTJDLGdDQUFnQztBQUM5RTtBQUNBO0FBQ0EiLCJmaWxlIjoiOTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY3R4ICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIGNhbGwgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJylcbiAgLCBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKVxuICAsIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCB0b0xlbmd0aCAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgZ2V0SXRlckZuICAgPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKXtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24oKXsgcmV0dXJuIGl0ZXJhYmxlOyB9IDogZ2V0SXRlckZuKGl0ZXJhYmxlKVxuICAgICwgZiAgICAgID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpXG4gICAgLCBpbmRleCAgPSAwXG4gICAgLCBsZW5ndGgsIHN0ZXAsIGl0ZXJhdG9yO1xuICBpZih0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZihpc0FycmF5SXRlcihpdGVyRm4pKWZvcihsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKyl7XG4gICAgZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICB9IGVsc2UgZm9yKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7ICl7XG4gICAgY2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcyk7XG4gIH1cbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Zvci1vZi5qc1xuICoqIG1vZHVsZSBpZCA9IDk0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 95 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// call something on iterator step with safe closing on error\\nvar anObject = __webpack_require__(15);\\nmodule.exports = function(iterator, fn, value, entries){\\n  try {\\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\\n  // 7.4.6 IteratorClose(iterator, completion)\\n  } catch(e){\\n    var ret = iterator['return'];\\n    if(ret !== undefined)anObject(ret.call(iterator));\\n    throw e;\\n  }\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNhbGwuanM/YzdjMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI5NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoKGUpe1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYocmV0ICE9PSB1bmRlZmluZWQpYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNhbGwuanNcbiAqKiBtb2R1bGUgaWQgPSA5NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 96 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// check on default Array iterator\\nvar Iterators  = __webpack_require__(83)\\n  , ITERATOR   = __webpack_require__(32)('iterator')\\n  , ArrayProto = Array.prototype;\\n\\nmodule.exports = function(it){\\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzP2Y4MzgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwiZmlsZSI6Ijk2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAsIElURVJBVE9SICAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKVxuICAsIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qc1xuICoqIG1vZHVsZSBpZCA9IDk2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 97 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var classof   = __webpack_require__(92)\\n  , ITERATOR  = __webpack_require__(32)('iterator')\\n  , Iterators = __webpack_require__(83);\\nmodule.exports = __webpack_require__(10).getIteratorMethod = function(it){\\n  if(it != undefined)return it[ITERATOR]\\n    || it['@@iterator']\\n    || Iterators[classof(it)];\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcz9hNjRhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiOTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY2xhc3NvZiAgID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpXG4gICwgSVRFUkFUT1IgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24oaXQpe1xuICBpZihpdCAhPSB1bmRlZmluZWQpcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanNcbiAqKiBtb2R1bGUgaWQgPSA5N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 98 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// Works with __proto__ only. Old v8 can't work with null proto objects.\\n/* eslint-disable no-proto */\\nvar isObject = __webpack_require__(16)\\n  , anObject = __webpack_require__(15);\\nvar check = function(O, proto){\\n  anObject(O);\\n  if(!isObject(proto) && proto !== null)throw TypeError(proto + \\\": can't set as prototype!\\\");\\n};\\nmodule.exports = {\\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\\n    function(test, buggy, set){\\n      try {\\n        set = __webpack_require__(11)(Function.call, __webpack_require__(99).f(Object.prototype, '__proto__').set, 2);\\n        set(test, []);\\n        buggy = !(test instanceof Array);\\n      } catch(e){ buggy = true; }\\n      return function setPrototypeOf(O, proto){\\n        check(O, proto);\\n        if(buggy)O.__proto__ = proto;\\n        else set(O, proto);\\n        return O;\\n      };\\n    }({}, false) : undefined),\\n  check: check\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtcHJvdG8uanM/MmZjZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sVUFBVSxjQUFjO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssR0FBRztBQUNSO0FBQ0EiLCJmaWxlIjoiOTguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgY2hlY2sgPSBmdW5jdGlvbihPLCBwcm90byl7XG4gIGFuT2JqZWN0KE8pO1xuICBpZighaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKXRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uKHRlc3QsIGJ1Z2d5LCBzZXQpe1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi9fY3R4JykoRnVuY3Rpb24uY2FsbCwgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgICBzZXQodGVzdCwgW10pO1xuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICAgIH0gY2F0Y2goZSl7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKXtcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICBpZihidWdneSlPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC1wcm90by5qc1xuICoqIG1vZHVsZSBpZCA9IDk4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 99 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var pIE            = __webpack_require__(100)\\r\\n  , createDesc     = __webpack_require__(22)\\r\\n  , toIObject      = __webpack_require__(44)\\r\\n  , toPrimitive    = __webpack_require__(21)\\r\\n  , has            = __webpack_require__(43)\\r\\n  , IE8_DOM_DEFINE = __webpack_require__(17)\\r\\n  , gOPD           = Object.getOwnPropertyDescriptor;\\r\\n\\r\\nexports.f = __webpack_require__(18) ? gOPD : function getOwnPropertyDescriptor(O, P){\\r\\n  O = toIObject(O);\\r\\n  P = toPrimitive(P, true);\\r\\n  if(IE8_DOM_DEFINE)try {\\r\\n    return gOPD(O, P);\\r\\n  } catch(e){ /* empty */ }\\r\\n  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);\\r\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wZC5qcz8zM2FiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLFVBQVU7QUFDYjtBQUNBIiwiZmlsZSI6Ijk5LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHBJRSAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpXHJcbiAgLCBjcmVhdGVEZXNjICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKVxyXG4gICwgdG9JT2JqZWN0ICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcclxuICAsIHRvUHJpbWl0aXZlICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcclxuICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcclxuICAsIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKVxyXG4gICwgZ09QRCAgICAgICAgICAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xyXG5cclxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCl7XHJcbiAgTyA9IHRvSU9iamVjdChPKTtcclxuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XHJcbiAgaWYoSUU4X0RPTV9ERUZJTkUpdHJ5IHtcclxuICAgIHJldHVybiBnT1BEKE8sIFApO1xyXG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cclxuICBpZihoYXMoTywgUCkpcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xyXG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wZC5qc1xuICoqIG1vZHVsZSBpZCA9IDk5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 100 */\n/***/ function(module, exports) {\n\n\teval(\"exports.f = {}.propertyIsEnumerable;//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtcGllLmpzPzRhZjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyIsImZpbGUiOiIxMDAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXBpZS5qc1xuICoqIG1vZHVsZSBpZCA9IDEwMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 101 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"// 7.3.20 SpeciesConstructor(O, defaultConstructor)\\nvar anObject  = __webpack_require__(15)\\n  , aFunction = __webpack_require__(12)\\n  , SPECIES   = __webpack_require__(32)('species');\\nmodule.exports = function(O, D){\\n  var C = anObject(O).constructor, S;\\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzP2ZkNzQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxMDEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIFNQRUNJRVMgICA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE8sIEQpe1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yLCBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzXG4gKiogbW9kdWxlIGlkID0gMTAxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 102 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var ctx                = __webpack_require__(11)\\n  , invoke             = __webpack_require__(103)\\n  , html               = __webpack_require__(56)\\n  , cel                = __webpack_require__(20)\\n  , global             = __webpack_require__(9)\\n  , process            = global.process\\n  , setTask            = global.setImmediate\\n  , clearTask          = global.clearImmediate\\n  , MessageChannel     = global.MessageChannel\\n  , counter            = 0\\n  , queue              = {}\\n  , ONREADYSTATECHANGE = 'onreadystatechange'\\n  , defer, channel, port;\\nvar run = function(){\\n  var id = +this;\\n  if(queue.hasOwnProperty(id)){\\n    var fn = queue[id];\\n    delete queue[id];\\n    fn();\\n  }\\n};\\nvar listener = function(event){\\n  run.call(event.data);\\n};\\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\\nif(!setTask || !clearTask){\\n  setTask = function setImmediate(fn){\\n    var args = [], i = 1;\\n    while(arguments.length > i)args.push(arguments[i++]);\\n    queue[++counter] = function(){\\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\\n    };\\n    defer(counter);\\n    return counter;\\n  };\\n  clearTask = function clearImmediate(id){\\n    delete queue[id];\\n  };\\n  // Node.js 0.8-\\n  if(__webpack_require__(25)(process) == 'process'){\\n    defer = function(id){\\n      process.nextTick(ctx(run, id, 1));\\n    };\\n  // Browsers with MessageChannel, includes WebWorkers\\n  } else if(MessageChannel){\\n    channel = new MessageChannel;\\n    port    = channel.port2;\\n    channel.port1.onmessage = listener;\\n    defer = ctx(port.postMessage, port, 1);\\n  // Browsers with postMessage, skip WebWorkers\\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\\n  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){\\n    defer = function(id){\\n      global.postMessage(id + '', '*');\\n    };\\n    global.addEventListener('message', listener, false);\\n  // IE8-\\n  } else if(ONREADYSTATECHANGE in cel('script')){\\n    defer = function(id){\\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){\\n        html.removeChild(this);\\n        run.call(id);\\n      };\\n    };\\n  // Rest old browsers\\n  } else {\\n    defer = function(id){\\n      setTimeout(ctx(run, id, 1), 0);\\n    };\\n  }\\n}\\nmodule.exports = {\\n  set:   setTask,\\n  clear: clearTask\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190YXNrLmpzPzZlOTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTAyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGN0eCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgaW52b2tlICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faW52b2tlJylcbiAgLCBodG1sICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19odG1sJylcbiAgLCBjZWwgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJylcbiAgLCBnbG9iYWwgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIHByb2Nlc3MgICAgICAgICAgICA9IGdsb2JhbC5wcm9jZXNzXG4gICwgc2V0VGFzayAgICAgICAgICAgID0gZ2xvYmFsLnNldEltbWVkaWF0ZVxuICAsIGNsZWFyVGFzayAgICAgICAgICA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZVxuICAsIE1lc3NhZ2VDaGFubmVsICAgICA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbFxuICAsIGNvdW50ZXIgICAgICAgICAgICA9IDBcbiAgLCBxdWV1ZSAgICAgICAgICAgICAgPSB7fVxuICAsIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnXG4gICwgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24oKXtcbiAgdmFyIGlkID0gK3RoaXM7XG4gIGlmKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSl7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KXtcbiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7XG59O1xuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYoIXNldFRhc2sgfHwgIWNsZWFyVGFzayl7XG4gIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pe1xuICAgIHZhciBhcmdzID0gW10sIGkgPSAxO1xuICAgIHdoaWxlKGFyZ3VtZW50cy5sZW5ndGggPiBpKWFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uKCl7XG4gICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpe1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZihyZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcycpe1xuICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpe1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgfSBlbHNlIGlmKE1lc3NhZ2VDaGFubmVsKXtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsO1xuICAgIHBvcnQgICAgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKXtcbiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXtcbiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xuICAgIH07XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZihPTlJFQURZU1RBVEVDSEFOR0UgaW4gY2VsKCdzY3JpcHQnKSl7XG4gICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNlbCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbigpe1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4uY2FsbChpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogICBzZXRUYXNrLFxuICBjbGVhcjogY2xlYXJUYXNrXG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190YXNrLmpzXG4gKiogbW9kdWxlIGlkID0gMTAyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 103 */\n/***/ function(module, exports) {\n\n\teval(\"// fast apply, http://jsperf.lnkit.com/fast-apply/5\\nmodule.exports = function(fn, args, that){\\n  var un = that === undefined;\\n  switch(args.length){\\n    case 0: return un ? fn()\\n                      : fn.call(that);\\n    case 1: return un ? fn(args[0])\\n                      : fn.call(that, args[0]);\\n    case 2: return un ? fn(args[0], args[1])\\n                      : fn.call(that, args[0], args[1]);\\n    case 3: return un ? fn(args[0], args[1], args[2])\\n                      : fn.call(that, args[0], args[1], args[2]);\\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\\n  } return              fn.apply(that, args);\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pbnZva2UuanM/MTFmYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIIiwiZmlsZSI6IjEwMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgYXJncywgdGhhdCl7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoKGFyZ3MubGVuZ3RoKXtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgfSByZXR1cm4gICAgICAgICAgICAgIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW52b2tlLmpzXG4gKiogbW9kdWxlIGlkID0gMTAzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 104 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var global    = __webpack_require__(9)\\n  , macrotask = __webpack_require__(102).set\\n  , Observer  = global.MutationObserver || global.WebKitMutationObserver\\n  , process   = global.process\\n  , Promise   = global.Promise\\n  , isNode    = __webpack_require__(25)(process) == 'process'\\n  , head, last, notify;\\n\\nvar flush = function(){\\n  var parent, fn;\\n  if(isNode && (parent = process.domain))parent.exit();\\n  while(head){\\n    fn = head.fn;\\n    fn(); // <- currently we use it only for Promise - try / catch not required\\n    head = head.next;\\n  } last = undefined;\\n  if(parent)parent.enter();\\n};\\n\\n// Node.js\\nif(isNode){\\n  notify = function(){\\n    process.nextTick(flush);\\n  };\\n// browsers with MutationObserver\\n} else if(Observer){\\n  var toggle = true\\n    , node   = document.createTextNode('');\\n  new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new\\n  notify = function(){\\n    node.data = toggle = !toggle;\\n  };\\n// environments with maybe non-completely correct, but existent Promise\\n} else if(Promise && Promise.resolve){\\n  notify = function(){\\n    Promise.resolve().then(flush);\\n  };\\n// for other environments - macrotask based on:\\n// - setImmediate\\n// - MessageChannel\\n// - window.postMessag\\n// - onreadystatechange\\n// - setTimeout\\n} else {\\n  notify = function(){\\n    // strange IE + webpack dev server bug - use .call(global)\\n    macrotask.call(global, flush);\\n  };\\n}\\n\\nmodule.exports = function(fn){\\n  var task = {fn: fn, next: undefined};\\n  if(last)last.next = task;\\n  if(!head){\\n    head = task;\\n    notify();\\n  } last = task;\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19taWNyb3Rhc2suanM/MGIxNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxxQ0FBcUMsb0JBQW9CLEVBQUU7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0giLCJmaWxlIjoiMTA0LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldFxuICAsIE9ic2VydmVyICA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyXG4gICwgcHJvY2VzcyAgID0gZ2xvYmFsLnByb2Nlc3NcbiAgLCBQcm9taXNlICAgPSBnbG9iYWwuUHJvbWlzZVxuICAsIGlzTm9kZSAgICA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJ1xuICAsIGhlYWQsIGxhc3QsIG5vdGlmeTtcblxudmFyIGZsdXNoID0gZnVuY3Rpb24oKXtcbiAgdmFyIHBhcmVudCwgZm47XG4gIGlmKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKXBhcmVudC5leGl0KCk7XG4gIHdoaWxlKGhlYWQpe1xuICAgIGZuID0gaGVhZC5mbjtcbiAgICBmbigpOyAvLyA8LSBjdXJyZW50bHkgd2UgdXNlIGl0IG9ubHkgZm9yIFByb21pc2UgLSB0cnkgLyBjYXRjaCBub3QgcmVxdWlyZWRcbiAgICBoZWFkID0gaGVhZC5uZXh0O1xuICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gIGlmKHBhcmVudClwYXJlbnQuZW50ZXIoKTtcbn07XG5cbi8vIE5vZGUuanNcbmlmKGlzTm9kZSl7XG4gIG5vdGlmeSA9IGZ1bmN0aW9uKCl7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gIH07XG4vLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXJcbn0gZWxzZSBpZihPYnNlcnZlcil7XG4gIHZhciB0b2dnbGUgPSB0cnVlXG4gICAgLCBub2RlICAgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7Y2hhcmFjdGVyRGF0YTogdHJ1ZX0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICBub3RpZnkgPSBmdW5jdGlvbigpe1xuICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gIH07XG4vLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxufSBlbHNlIGlmKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKXtcbiAgbm90aWZ5ID0gZnVuY3Rpb24oKXtcbiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZsdXNoKTtcbiAgfTtcbi8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4vLyAtIHNldEltbWVkaWF0ZVxuLy8gLSBNZXNzYWdlQ2hhbm5lbFxuLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2Vcbi8vIC0gc2V0VGltZW91dFxufSBlbHNlIHtcbiAgbm90aWZ5ID0gZnVuY3Rpb24oKXtcbiAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4pe1xuICB2YXIgdGFzayA9IHtmbjogZm4sIG5leHQ6IHVuZGVmaW5lZH07XG4gIGlmKGxhc3QpbGFzdC5uZXh0ID0gdGFzaztcbiAgaWYoIWhlYWQpe1xuICAgIGhlYWQgPSB0YXNrO1xuICAgIG5vdGlmeSgpO1xuICB9IGxhc3QgPSB0YXNrO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbWljcm90YXNrLmpzXG4gKiogbW9kdWxlIGlkID0gMTA0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 105 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var hide = __webpack_require__(13);\\nmodule.exports = function(target, src, safe){\\n  for(var key in src){\\n    if(safe && target[key])target[key] = src[key];\\n    else hide(target, key, src[key]);\\n  } return target;\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS1hbGwuanM/M2NkZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIIiwiZmlsZSI6IjEwNS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0YXJnZXQsIHNyYywgc2FmZSl7XG4gIGZvcih2YXIga2V5IGluIHNyYyl7XG4gICAgaWYoc2FmZSAmJiB0YXJnZXRba2V5XSl0YXJnZXRba2V5XSA9IHNyY1trZXldO1xuICAgIGVsc2UgaGlkZSh0YXJnZXQsIGtleSwgc3JjW2tleV0pO1xuICB9IHJldHVybiB0YXJnZXQ7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS1hbGwuanNcbiAqKiBtb2R1bGUgaWQgPSAxMDVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 106 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"'use strict';\\nvar global      = __webpack_require__(9)\\n  , core        = __webpack_require__(10)\\n  , dP          = __webpack_require__(14)\\n  , DESCRIPTORS = __webpack_require__(18)\\n  , SPECIES     = __webpack_require__(32)('species');\\n\\nmodule.exports = function(KEY){\\n  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];\\n  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {\\n    configurable: true,\\n    get: function(){ return this; }\\n  });\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtc3BlY2llcy5qcz8zMTFhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixhQUFhO0FBQ2pDLEdBQUc7QUFDSCIsImZpbGUiOiIxMDYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGNvcmUgICAgICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgZFAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKVxuICAsIFNQRUNJRVMgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVkpe1xuICB2YXIgQyA9IHR5cGVvZiBjb3JlW0tFWV0gPT0gJ2Z1bmN0aW9uJyA/IGNvcmVbS0VZXSA6IGdsb2JhbFtLRVldO1xuICBpZihERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKWRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXNwZWNpZXMuanNcbiAqKiBtb2R1bGUgaWQgPSAxMDZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 107 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var ITERATOR     = __webpack_require__(32)('iterator')\\n  , SAFE_CLOSING = false;\\n\\ntry {\\n  var riter = [7][ITERATOR]();\\n  riter['return'] = function(){ SAFE_CLOSING = true; };\\n  Array.from(riter, function(){ throw 2; });\\n} catch(e){ /* empty */ }\\n\\nmodule.exports = function(exec, skipClosing){\\n  if(!skipClosing && !SAFE_CLOSING)return false;\\n  var safe = false;\\n  try {\\n    var arr  = [7]\\n      , iter = arr[ITERATOR]();\\n    iter.next = function(){ safe = true; };\\n    arr[ITERATOR] = function(){ return iter; };\\n    exec(arr);\\n  } catch(e){ /* empty */ }\\n  return safe;\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWRldGVjdC5qcz83NWIzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLCtCQUErQixxQkFBcUI7QUFDcEQsK0JBQStCLFNBQVMsRUFBRTtBQUMxQyxDQUFDLFVBQVU7O0FBRVg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGFBQWE7QUFDeEMsK0JBQStCLGFBQWE7QUFDNUM7QUFDQSxHQUFHLFVBQVU7QUFDYjtBQUNBIiwiZmlsZSI6IjEwNy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBJVEVSQVRPUiAgICAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKVxuICAsIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uKCl7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07XG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uKCl7IHRocm93IDI7IH0pO1xufSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGV4ZWMsIHNraXBDbG9zaW5nKXtcbiAgaWYoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpcmV0dXJuIGZhbHNlO1xuICB2YXIgc2FmZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBhcnIgID0gWzddXG4gICAgICAsIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24oKXsgc2FmZSA9IHRydWU7IH07XG4gICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uKCl7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzXG4gKiogbW9kdWxlIGlkID0gMTA3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 108 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"\\\"use strict\\\";\\n/**\\n * Defines an Object type using a named constructor function.\\n * @module\\n */\\n\\n/**\\n * Constructs an object with methods bound to a context.\\n * @arg {object} _from - Object with methods to bind.\\n * @arg {object} _to - Context which methtods should be bound to.\\n */\\n\\nvar _Object$defineProperty = __webpack_require__(109)['default'];\\n\\nvar _Object$keys = __webpack_require__(68)['default'];\\n\\nvar _Object$create = __webpack_require__(52)['default'];\\n\\nexports.__esModule = true;\\nexports['default'] = type;\\nfunction Bindings(_from, _to) {\\n\\tvar method;\\n\\n\\t// pull all methods from the prototype chain.\\n\\tfor (method in _from) {\\n\\t\\tif (typeof _from[method] !== 'function') continue;\\n\\t\\tthis[method] = _from[method].bind(_to);\\n\\t}\\n}\\n\\n/**\\n * Takes an itterable object and convert it into an Array.\\n * @arg {object} _itterable\\n * @returns {array}\\n */\\nfunction toArray(_itterable) {\\n\\treturn [].map.call(_itterable, function (m) {\\n\\t\\treturn m;\\n\\t});\\n}\\n\\n/**\\n * Converts a constructor function into an object \\\"type\\\". Which addapts the constructor with and interface for creating instsances and extension.\\n * @arg {function} _constructor... - any number of constructor functions.\\n * @returns The constructor or an object containing all the defined types.\\n */\\n\\nfunction type() {\\n\\tvar defs, module;\\n\\n\\t/**\\n  * Constructs an interface which is accesed through the constructors arguments.\\n  * These arguments are parsed from the function string and collected into an array.\\n  * @arg {function} _constructor\\n  * @returns {array} The collection of API functions requested by the constructor.\\n  */\\n\\tfunction createApi(_constructor) {\\n\\t\\tvar args, api;\\n\\n\\t\\t// Matches the names of the arguments defined in the source of the function.\\n\\t\\t// [^\\\\(\\\\)\\\\.\\\\s,]+ captures one or more of any character which is NOT a parenthetical, period, white-space character, or comma.\\n\\t\\t// It then takes that rule and looks for multiple intances w/o spaces or commas around it, which would be encased in parenthensies.\\n\\t\\t// NOTE: since this regex is not matching globally, it will not match any argument clusters past the function definition.\\n\\t\\targs = (Function.prototype.toString.call(_constructor).match(/\\\\(((?:\\\\s*[^\\\\(\\\\)\\\\.\\\\s,]+\\\\s*,?)+)\\\\)/) || ['', ''])[1].split(/\\\\s*,\\\\s*/);\\n\\t\\tapi = {\\n\\t\\t\\t/**\\n    * Invokes the specified method closest in the prototype chain. Allowing you to still invoke a method which was overridden.\\n    *\\n    * @arg {object} _obj - The context which to find the parent function.\\n    * @arg {string} _name - The method name.\\n    * @arg {array} _args - A collection of arguments to invoke the method with\\n    * @returns {*} Whatever the caller returns.\\n    *\\n    * @example \\n    * Car.extend(function Ford (proto) {\\n    *     this.drive = function () {\\n    *         proto(this, 'drive', arguments);\\n    *         // do some opps.\\n    *     };\\n    * });\\n    */\\n\\t\\t\\tproto: function proto(_obj, _name, _args) {\\n\\t\\t\\t\\tvar proto, method;\\n\\n\\t\\t\\t\\tproto = Object.getPrototypeOf(this || _obj);\\n\\t\\t\\t\\tmethod = proto[_name];\\n\\n\\t\\t\\t\\tif (typeof _obj[_name] !== 'function') {\\n\\t\\t\\t\\t\\tthrow new TypeError('Member ' + _name + ' is not a function.');\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (method) {\\n\\t\\t\\t\\t\\t// Does _obj's prototype have the method and it's not the same reference as _obj.\\n\\t\\t\\t\\t\\tif (proto.hasOwnProperty(_name) && _obj[_name] !== proto[_name]) {\\n\\t\\t\\t\\t\\t\\treturn _args ? method.apply(_obj, _args) : method.bind(_obj);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Otherwise, walk the prototype chain to find the prototype that has the parent method.\\n\\t\\t\\t\\t\\twhile (proto) {\\n\\t\\t\\t\\t\\t\\tif (proto.hasOwnProperty(_name) && _obj[_name] !== proto[_name]) {\\n\\t\\t\\t\\t\\t\\t\\treturn _args ? method.apply(_obj, _args) : method.bind(_obj);\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tproto = Object.getPrototypeOf(proto);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\treturn new Bindings(proto, _obj);\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\t/**\\n    * Invokes the specified method which lives on the object type's prototype.\\n    * If your instance overrides the object types method, or your many prototype\\n    * levels away from the base prototype, this lets you track back to the original.\\n    *\\n    * @arg {object} _obj - The context which to find the parent function.\\n    * @arg {string} _name - The method name.\\n    * @arg {array} _args - A collection of arguments to invoke the method with\\n    * @returns {*} Whatever the caller returns.\\n    */\\n\\t\\t\\tbase: function base(_obj, _name, _args) {\\n\\t\\t\\t\\tvar proto, method;\\n\\n\\t\\t\\t\\tproto = _constructor.prototype;\\n\\t\\t\\t\\tmethod = proto[_name];\\n\\n\\t\\t\\t\\tif (typeof method !== 'function') {\\n\\t\\t\\t\\t\\tthrow new TypeError('Member ' + _name + ' is not a function.');\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (method) {\\n\\t\\t\\t\\t\\treturn _args ? method.apply(_obj, _args) : method.bind(_obj);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\treturn new Bindings(proto, _obj);\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\t/**\\n    * Invokes the specified method on the object type's super type or parent type (i.e. Ford extending Car).\\n    * @arg {object} _obj - The context which to find the parent function.\\n    * @arg {string} _name - The method name.\\n    * @arg {array} _args - A collection of arguments to invoke the method with\\n    * @returns {*} Whatever the caller returns.\\n    */\\n\\t\\t\\tsup: function sup(_obj, _name, _args) {\\n\\t\\t\\t\\treturn api.proto.apply(_constructor.prototype, arguments);\\n\\t\\t\\t},\\n\\t\\t\\t/**\\n    * Defines a properpty which is configured `{configureable: false, writeable: false}`.\\n    * @arg {object} _obj - The context which to define members.\\n    * @arg {string} _name - The member name.\\n    * @arg {*} _value - The value.\\n    * @returns api\\n    */\\n\\t\\t\\tconstant: function constant(_obj, _name, _value) {\\n\\t\\t\\t\\t_Object$defineProperty(_obj, _name, {\\n\\t\\t\\t\\t\\tvalue: _value,\\n\\t\\t\\t\\t\\tconfigureable: false,\\n\\t\\t\\t\\t\\twriteable: false\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\treturn api;\\n\\t\\t\\t},\\n\\t\\t\\t/**\\n    * Defines members on the constructor.\\n    * @function static\\n    * @overload\\n    * @arg {string} _name - The member name.\\n    * @arg {*} _value - The value.\\n    * @returns api\\n    */\\n\\n\\t\\t\\t/**\\n    * Defines members on the constructor.\\n    * @arg {object} _def - An object with members to mixin.\\n    * @returns api\\n    */\\n\\t\\t\\t'static': function _static(_name_def, _value) {\\n\\t\\t\\t\\tvar member, _name, _def;\\n\\n\\t\\t\\t\\t_value ? _name = _name_def : _def = _name_def;\\n\\n\\t\\t\\t\\tif (_def) {\\n\\t\\t\\t\\t\\tfor (member in _def) {\\n\\t\\t\\t\\t\\t\\tif (!_def.hasOwnProperty(member)) continue;\\n\\t\\t\\t\\t\\t\\t_constructor[member] = _def[member];\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (_name) {\\n\\t\\t\\t\\t\\t_constructor[_name] = _value;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn api;\\n\\t\\t\\t},\\n\\t\\t\\t/**\\n    * A pretty way of define the interface of your object type.\\n    *\\n    * You may pass any number of arguments as functions or strings.\\n    * \\n    * **Example**\\n    * ```javascript\\n    * function Car ($) {$(\\n    *     // Defines a member assigned to `null`.\\n    *     'name',\\n    *     // Defines members with values as a string and number. Keep in mind these are put on the prototype.\\n    *     'engineType = \\\"standard\\\", speed = 0',\\n    *\\n    *     // Define instance members.\\n    *     function alloc (_name) {\\n    *         this.name = _name;\\n    *     },\\n    *\\n    *     function drive () {\\n    *         this.speed += 1;\\n    *     }\\n    * )}\\n    * ```\\n    *\\n    * One benefit to this interface is that all your methods are named so you have easy access for recursive programs.\\n    * @arg {string|function} _def - A string of property definitions or a named function.\\n    * @todo Support property assignment in alloc. Micah: 2/24/2016\\n    */\\n\\t\\t\\t$: function $() {\\n\\t\\t\\t\\tvar args = toArray(arguments);\\n\\n\\t\\t\\t\\targs.forEach(function (_member) {\\n\\t\\t\\t\\t\\tvar memberType, props, key;\\n\\n\\t\\t\\t\\t\\tmemberType = typeof _member;\\n\\n\\t\\t\\t\\t\\tswitch (memberType) {\\n\\t\\t\\t\\t\\t\\tcase 'string':\\n\\t\\t\\t\\t\\t\\t\\tprops = _member.split(/\\\\s*,\\\\s*/);\\n\\n\\t\\t\\t\\t\\t\\t\\tif (props) {\\n\\t\\t\\t\\t\\t\\t\\t\\tprops.forEach(function (_def) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tvar prop, val;\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tprop = _def.split(/\\\\s*[:=]\\\\s*/);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tval = JSON.parse(prop[1]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t} catch (e) {}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t_constructor.prototype[prop[0]] = typeof prop[1] !== 'undefined' ? val || prop[1] : null;\\n\\t\\t\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\tcase 'object':\\n\\t\\t\\t\\t\\t\\t\\tfor (key in _member) {\\n\\t\\t\\t\\t\\t\\t\\t\\tif (!_member.hasOwnProperty(key)) continue;\\n\\t\\t\\t\\t\\t\\t\\t\\t_constructor.prototype[key] = _member[key];\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t\\tcase 'function':\\n\\t\\t\\t\\t\\t\\t\\tif (!_member.name) throw TypeError('Member must be a named function.');\\n\\t\\t\\t\\t\\t\\t\\t_constructor.prototype[_member.name] = _member;\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\treturn api;\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\treturn args.map(function (_call) {\\n\\t\\t\\treturn api[_call] || module[_call];\\n\\t\\t});\\n\\t}\\n\\n\\tdefs = toArray(arguments);\\n\\tmodule = !this ? {} : this;\\n\\n\\tdefs.forEach(function (_constructor) {\\n\\t\\tvar api;\\n\\n\\t\\tif (typeof _constructor === 'object') {\\n\\t\\t\\tvar Super,\\n\\t\\t\\t    keys = _Object$keys(_constructor);\\n\\n\\t\\t\\tif (keys.length === 1 && module[keys[0]]) {\\n\\t\\t\\t\\tSuper = module[keys[0]];\\n\\t\\t\\t\\treturn Super.extend.call(module, _constructor[keys[0]]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tapi = createApi(_constructor);\\n\\n\\t\\t/**\\n   * Creates a new instance of the constructor prototype.\\n   * This also invokes the `alloc()` on the instance so you can define instance props.\\n   * @arg {*} ... - Any number of arguments for `alloc()`.\\n   * @returns instance\\n   */\\n\\t\\t_constructor.create = function () {\\n\\t\\t\\tvar instance = _Object$create(_constructor.prototype);\\n\\t\\t\\tif (typeof instance.alloc === 'function') instance.alloc.apply(instance, arguments);\\n\\t\\t\\treturn instance;\\n\\t\\t};\\n\\n\\t\\t/**\\n   * Extends the provided constructor prototype.\\n   * @arg {function} _definition - Constructor for the object type.\\n   * @returns _constructor\\n   */\\n\\t\\t_constructor.extend = function (_definition) {\\n\\t\\t\\t_definition.prototype = _Object$create(_constructor.prototype, {\\n\\t\\t\\t\\tconstructor: {\\n\\t\\t\\t\\t\\tvalue: _definition,\\n\\t\\t\\t\\t\\tenumerable: false,\\n\\t\\t\\t\\t\\twriteable: false,\\n\\t\\t\\t\\t\\tconfigureable: false\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\n\\t\\t\\treturn type.call(this === _constructor ? null : this, _definition);\\n\\t\\t};\\n\\n\\t\\t_constructor.apply(_constructor.prototype, api);\\n\\n\\t\\tmodule[_constructor.name] = _constructor;\\n\\t});\\n\\n\\treturn defs.length > 1 ? module : defs[0];\\n}\\n\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvdHlwZS5qcz9mNGE3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxQkFtQ1csSUFBSTtBQXhCNUIsU0FBUyxRQUFRLENBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtBQUM5QixLQUFJLE1BQU0sQ0FBQzs7O0FBR1gsTUFBSyxNQUFNLElBQUksS0FBSyxFQUFFO0FBQ3JCLE1BQUksT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssVUFBVSxFQUFFLFNBQVM7QUFDbEQsTUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDdkM7Q0FDRDs7Ozs7OztBQU9ELFNBQVMsT0FBTyxDQUFFLFVBQVUsRUFBRTtBQUM3QixRQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsRUFBRTtBQUFFLFNBQU8sQ0FBQyxDQUFDO0VBQUUsQ0FBQyxDQUFDO0NBQzNEOzs7Ozs7OztBQU9jLFNBQVMsSUFBSSxHQUFJO0FBQy9CLEtBQUksSUFBSSxFQUFFLE1BQU0sQ0FBQzs7Ozs7Ozs7QUFRakIsVUFBUyxTQUFTLENBQUUsWUFBWSxFQUFFO0FBQ2pDLE1BQUksSUFBSSxFQUFFLEdBQUcsQ0FBQzs7Ozs7O0FBTWQsTUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLEtBQUssQ0FBQyxrQ0FBa0MsQ0FBQyxJQUFFLENBQUMsRUFBRSxFQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvSCxLQUFHLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJMLFFBQUssRUFBRSxlQUFVLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFO0FBQ3BDLFFBQUksS0FBSyxFQUFFLE1BQU0sQ0FBQzs7QUFFbEIsU0FBSyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDO0FBQzVDLFVBQU0sR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7O0FBRXRCLFFBQUksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssVUFBVSxFQUFFO0FBQ3RDLFdBQU0sSUFBSSxTQUFTLENBQUMsU0FBUyxHQUFDLEtBQUssR0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0tBQzNEOztBQUVELFFBQUksTUFBTSxFQUFFOztBQUVYLFNBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ2hFLGFBQU8sS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7TUFDN0Q7OztBQUdELFlBQU8sS0FBSyxFQUFFO0FBQ2IsVUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDaEUsY0FBTyxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztPQUM3RDs7QUFFRCxXQUFLLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztNQUNyQztLQUNELE1BQU07QUFDTixZQUFPLElBQUksUUFBUSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztLQUNqQztJQUNEOzs7Ozs7Ozs7OztBQVdELE9BQUksRUFBRSxjQUFVLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFO0FBQ25DLFFBQUksS0FBSyxFQUFFLE1BQU0sQ0FBQzs7QUFFbEIsU0FBSyxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUM7QUFDL0IsVUFBTSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQzs7QUFFdEIsUUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLEVBQUU7QUFDakMsV0FBTSxJQUFJLFNBQVMsQ0FBQyxTQUFTLEdBQUMsS0FBSyxHQUFDLHFCQUFxQixDQUFDLENBQUM7S0FDM0Q7O0FBRUQsUUFBSSxNQUFNLEVBQUU7QUFDWCxZQUFPLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzdELE1BQU07QUFDTixZQUFPLElBQUksUUFBUSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztLQUNqQztJQUNEOzs7Ozs7OztBQVFELE1BQUcsRUFBRSxhQUFVLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFO0FBQ2xDLFdBQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUMxRDs7Ozs7Ozs7QUFRRCxXQUFRLEVBQUUsa0JBQVUsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUU7QUFDeEMsMkJBQXNCLElBQUksRUFBRSxLQUFLLEVBQUU7QUFDbEMsVUFBSyxFQUFFLE1BQU07QUFDYixrQkFBYSxFQUFFLEtBQUs7QUFDcEIsY0FBUyxFQUFFLEtBQUs7S0FDaEIsQ0FBQyxDQUFDOztBQUVILFdBQU8sR0FBRyxDQUFDO0lBQ1g7Ozs7Ozs7Ozs7Ozs7OztBQWVELGFBQVEsaUJBQVUsU0FBUyxFQUFFLE1BQU0sRUFBRTtBQUNwQyxRQUFJLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDOztBQUV4QixVQUFNLEdBQUcsS0FBSyxHQUFHLFNBQVMsR0FBRyxJQUFJLEdBQUcsU0FBUyxDQUFDOztBQUU5QyxRQUFJLElBQUksRUFBRTtBQUNULFVBQUssTUFBTSxJQUFJLElBQUksRUFBRTtBQUNwQixVQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRSxTQUFTO0FBQzNDLGtCQUFZLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO01BQ3BDO0tBQ0Q7O0FBRUQsUUFBSSxLQUFLLEVBQUU7QUFDVixpQkFBWSxDQUFDLEtBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQztLQUM3Qjs7QUFFRCxXQUFPLEdBQUcsQ0FBQztJQUNYOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTZCRCxJQUFDLEVBQUUsYUFBWTtBQUNkLFFBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQzs7QUFFOUIsUUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLE9BQU8sRUFBRTtBQUMvQixTQUFJLFVBQVUsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDOztBQUUzQixlQUFVLEdBQUcsT0FBTyxPQUFPLENBQUM7O0FBRTVCLGFBQVEsVUFBVTtBQUNqQixXQUFLLFFBQVE7QUFDWixZQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQzs7QUFFakMsV0FBSSxLQUFLLEVBQUU7QUFDVixhQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBSSxFQUFFO0FBQzdCLGFBQUksSUFBSSxFQUFFLEdBQUcsQ0FBQzs7QUFFZCxhQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNoQyxhQUFJO0FBQUUsYUFBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1VBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFO0FBQzlDLHFCQUFZLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFJLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFdBQVcsR0FBSSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztTQUMzRixDQUFDLENBQUM7UUFDSDtBQUNELGFBQU07O0FBRVAsV0FBSyxRQUFRO0FBQ1osWUFBSyxHQUFHLElBQUksT0FBTyxFQUFFO0FBQ3BCLFlBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFNBQVM7QUFDM0Msb0JBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNDO0FBQ0QsYUFBTTs7QUFFUCxXQUFLLFVBQVU7QUFDZCxXQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxNQUFNLFNBQVMsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO0FBQ3ZFLG1CQUFZLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUM7QUFDL0MsYUFBTTtBQUFBLE1BQ1A7S0FDRCxDQUFDLENBQUM7O0FBRUgsV0FBTyxHQUFHLENBQUM7SUFDWDtHQUNEOztBQUVELFNBQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEtBQUssRUFBRTtBQUNoQyxVQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDbkMsQ0FBQyxDQUFDO0VBQ0g7O0FBRUQsS0FBSSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMxQixPQUFNLEdBQUksQ0FBQyxJQUFJLEdBQUksRUFBRSxHQUFHLElBQUksQ0FBQzs7QUFFN0IsS0FBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLFlBQVksRUFBRTtBQUNwQyxNQUFJLEdBQUcsQ0FBQzs7QUFFUixNQUFJLE9BQU8sWUFBWSxLQUFLLFFBQVEsRUFBRTtBQUNyQyxPQUFJLEtBQUs7T0FBRSxJQUFJLEdBQUcsYUFBWSxZQUFZLENBQUMsQ0FBQzs7QUFFNUMsT0FBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7QUFDekMsU0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4QixXQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4RDtHQUNEOztBQUVELEtBQUcsR0FBRyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7Ozs7Ozs7O0FBUTlCLGNBQVksQ0FBQyxNQUFNLEdBQUcsWUFBWTtBQUNqQyxPQUFJLFFBQVEsR0FBRyxlQUFjLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNyRCxPQUFJLE9BQU8sUUFBUSxDQUFDLEtBQUssS0FBSyxVQUFVLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3BGLFVBQU8sUUFBUSxDQUFDO0dBQ2hCLENBQUM7Ozs7Ozs7QUFPRixjQUFZLENBQUMsTUFBTSxHQUFHLFVBQVUsV0FBVyxFQUFFO0FBQzVDLGNBQVcsQ0FBQyxTQUFTLEdBQUcsZUFBYyxZQUFZLENBQUMsU0FBUyxFQUFFO0FBQzdELGVBQVcsRUFBRTtBQUNaLFVBQUssRUFBRSxXQUFXO0FBQ2xCLGVBQVUsRUFBRSxLQUFLO0FBQ2pCLGNBQVMsRUFBRSxLQUFLO0FBQ2hCLGtCQUFhLEVBQUUsS0FBSztLQUNwQjtJQUNELENBQUMsQ0FBQzs7QUFFSCxVQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLFlBQVksR0FBRyxJQUFJLEdBQUcsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0dBQ25FOztBQUVELGNBQVksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQzs7QUFFaEQsUUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxZQUFZLENBQUM7RUFDekMsQ0FBQyxDQUFDOztBQUVILFFBQU8sSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUMxQyIsImZpbGUiOiIxMDguanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogRGVmaW5lcyBhbiBPYmplY3QgdHlwZSB1c2luZyBhIG5hbWVkIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICogQG1vZHVsZVxuICovXG5cbi8qKlxuICogQ29uc3RydWN0cyBhbiBvYmplY3Qgd2l0aCBtZXRob2RzIGJvdW5kIHRvIGEgY29udGV4dC5cbiAqIEBhcmcge29iamVjdH0gX2Zyb20gLSBPYmplY3Qgd2l0aCBtZXRob2RzIHRvIGJpbmQuXG4gKiBAYXJnIHtvYmplY3R9IF90byAtIENvbnRleHQgd2hpY2ggbWV0aHRvZHMgc2hvdWxkIGJlIGJvdW5kIHRvLlxuICovXG5mdW5jdGlvbiBCaW5kaW5ncyAoX2Zyb20sIF90bykge1xuXHR2YXIgbWV0aG9kO1xuXG5cdC8vIHB1bGwgYWxsIG1ldGhvZHMgZnJvbSB0aGUgcHJvdG90eXBlIGNoYWluLlxuXHRmb3IgKG1ldGhvZCBpbiBfZnJvbSkge1xuXHRcdGlmICh0eXBlb2YgX2Zyb21bbWV0aG9kXSAhPT0gJ2Z1bmN0aW9uJykgY29udGludWU7XG5cdFx0dGhpc1ttZXRob2RdID0gX2Zyb21bbWV0aG9kXS5iaW5kKF90byk7XG5cdH1cbn1cblxuLyoqXG4gKiBUYWtlcyBhbiBpdHRlcmFibGUgb2JqZWN0IGFuZCBjb252ZXJ0IGl0IGludG8gYW4gQXJyYXkuXG4gKiBAYXJnIHtvYmplY3R9IF9pdHRlcmFibGVcbiAqIEByZXR1cm5zIHthcnJheX1cbiAqL1xuZnVuY3Rpb24gdG9BcnJheSAoX2l0dGVyYWJsZSkge1xuXHRyZXR1cm4gW10ubWFwLmNhbGwoX2l0dGVyYWJsZSwgZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG07IH0pO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgY29uc3RydWN0b3IgZnVuY3Rpb24gaW50byBhbiBvYmplY3QgXCJ0eXBlXCIuIFdoaWNoIGFkZGFwdHMgdGhlIGNvbnN0cnVjdG9yIHdpdGggYW5kIGludGVyZmFjZSBmb3IgY3JlYXRpbmcgaW5zdHNhbmNlcyBhbmQgZXh0ZW5zaW9uLlxuICogQGFyZyB7ZnVuY3Rpb259IF9jb25zdHJ1Y3Rvci4uLiAtIGFueSBudW1iZXIgb2YgY29uc3RydWN0b3IgZnVuY3Rpb25zLlxuICogQHJldHVybnMgVGhlIGNvbnN0cnVjdG9yIG9yIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCB0aGUgZGVmaW5lZCB0eXBlcy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHlwZSAoKSB7XG5cdHZhciBkZWZzLCBtb2R1bGU7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYW4gaW50ZXJmYWNlIHdoaWNoIGlzIGFjY2VzZWQgdGhyb3VnaCB0aGUgY29uc3RydWN0b3JzIGFyZ3VtZW50cy5cblx0ICogVGhlc2UgYXJndW1lbnRzIGFyZSBwYXJzZWQgZnJvbSB0aGUgZnVuY3Rpb24gc3RyaW5nIGFuZCBjb2xsZWN0ZWQgaW50byBhbiBhcnJheS5cblx0ICogQGFyZyB7ZnVuY3Rpb259IF9jb25zdHJ1Y3RvclxuXHQgKiBAcmV0dXJucyB7YXJyYXl9IFRoZSBjb2xsZWN0aW9uIG9mIEFQSSBmdW5jdGlvbnMgcmVxdWVzdGVkIGJ5IHRoZSBjb25zdHJ1Y3Rvci5cblx0ICovXG5cdGZ1bmN0aW9uIGNyZWF0ZUFwaSAoX2NvbnN0cnVjdG9yKSB7XG5cdFx0dmFyIGFyZ3MsIGFwaTtcblxuXHRcdC8vIE1hdGNoZXMgdGhlIG5hbWVzIG9mIHRoZSBhcmd1bWVudHMgZGVmaW5lZCBpbiB0aGUgc291cmNlIG9mIHRoZSBmdW5jdGlvbi5cblx0XHQvLyBbXlxcKFxcKVxcLlxccyxdKyBjYXB0dXJlcyBvbmUgb3IgbW9yZSBvZiBhbnkgY2hhcmFjdGVyIHdoaWNoIGlzIE5PVCBhIHBhcmVudGhldGljYWwsIHBlcmlvZCwgd2hpdGUtc3BhY2UgY2hhcmFjdGVyLCBvciBjb21tYS5cblx0XHQvLyBJdCB0aGVuIHRha2VzIHRoYXQgcnVsZSBhbmQgbG9va3MgZm9yIG11bHRpcGxlIGludGFuY2VzIHcvbyBzcGFjZXMgb3IgY29tbWFzIGFyb3VuZCBpdCwgd2hpY2ggd291bGQgYmUgZW5jYXNlZCBpbiBwYXJlbnRoZW5zaWVzLlxuXHRcdC8vIE5PVEU6IHNpbmNlIHRoaXMgcmVnZXggaXMgbm90IG1hdGNoaW5nIGdsb2JhbGx5LCBpdCB3aWxsIG5vdCBtYXRjaCBhbnkgYXJndW1lbnQgY2x1c3RlcnMgcGFzdCB0aGUgZnVuY3Rpb24gZGVmaW5pdGlvbi5cblx0XHRhcmdzID0gKEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKF9jb25zdHJ1Y3RvcikubWF0Y2goL1xcKCgoPzpcXHMqW15cXChcXClcXC5cXHMsXStcXHMqLD8pKylcXCkvKXx8WycnLCcnXSlbMV0uc3BsaXQoL1xccyosXFxzKi8pO1xuXHRcdGFwaSA9IHtcblx0XHRcdC8qKlxuXHRcdFx0ICogSW52b2tlcyB0aGUgc3BlY2lmaWVkIG1ldGhvZCBjbG9zZXN0IGluIHRoZSBwcm90b3R5cGUgY2hhaW4uIEFsbG93aW5nIHlvdSB0byBzdGlsbCBpbnZva2UgYSBtZXRob2Qgd2hpY2ggd2FzIG92ZXJyaWRkZW4uXG5cdFx0XHQgKlxuXHRcdFx0ICogQGFyZyB7b2JqZWN0fSBfb2JqIC0gVGhlIGNvbnRleHQgd2hpY2ggdG8gZmluZCB0aGUgcGFyZW50IGZ1bmN0aW9uLlxuXHRcdFx0ICogQGFyZyB7c3RyaW5nfSBfbmFtZSAtIFRoZSBtZXRob2QgbmFtZS5cblx0XHRcdCAqIEBhcmcge2FycmF5fSBfYXJncyAtIEEgY29sbGVjdGlvbiBvZiBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aFxuXHRcdFx0ICogQHJldHVybnMgeyp9IFdoYXRldmVyIHRoZSBjYWxsZXIgcmV0dXJucy5cblx0XHRcdCAqXG5cdFx0XHQgKiBAZXhhbXBsZSBcblx0XHRcdCAqIENhci5leHRlbmQoZnVuY3Rpb24gRm9yZCAocHJvdG8pIHtcblx0XHRcdCAqICAgICB0aGlzLmRyaXZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0ICogICAgICAgICBwcm90byh0aGlzLCAnZHJpdmUnLCBhcmd1bWVudHMpO1xuXHRcdFx0ICogICAgICAgICAvLyBkbyBzb21lIG9wcHMuXG5cdFx0XHQgKiAgICAgfTtcblx0XHRcdCAqIH0pO1xuXHRcdFx0ICovXG5cdFx0XHRwcm90bzogZnVuY3Rpb24gKF9vYmosIF9uYW1lLCBfYXJncykge1xuXHRcdFx0XHR2YXIgcHJvdG8sIG1ldGhvZDtcblxuXHRcdFx0XHRwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzIHx8IF9vYmopO1xuXHRcdFx0XHRtZXRob2QgPSBwcm90b1tfbmFtZV07XG5cblx0XHRcdFx0aWYgKHR5cGVvZiBfb2JqW19uYW1lXSAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ01lbWJlciAnK19uYW1lKycgaXMgbm90IGEgZnVuY3Rpb24uJyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAobWV0aG9kKSB7XG5cdFx0XHRcdFx0Ly8gRG9lcyBfb2JqJ3MgcHJvdG90eXBlIGhhdmUgdGhlIG1ldGhvZCBhbmQgaXQncyBub3QgdGhlIHNhbWUgcmVmZXJlbmNlIGFzIF9vYmouXG5cdFx0XHRcdFx0aWYgKHByb3RvLmhhc093blByb3BlcnR5KF9uYW1lKSAmJiBfb2JqW19uYW1lXSAhPT0gcHJvdG9bX25hbWVdKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gX2FyZ3MgPyBtZXRob2QuYXBwbHkoX29iaiwgX2FyZ3MpIDogbWV0aG9kLmJpbmQoX29iaik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB3YWxrIHRoZSBwcm90b3R5cGUgY2hhaW4gdG8gZmluZCB0aGUgcHJvdG90eXBlIHRoYXQgaGFzIHRoZSBwYXJlbnQgbWV0aG9kLlxuXHRcdFx0XHRcdHdoaWxlIChwcm90bykge1xuXHRcdFx0XHRcdFx0aWYgKHByb3RvLmhhc093blByb3BlcnR5KF9uYW1lKSAmJiBfb2JqW19uYW1lXSAhPT0gcHJvdG9bX25hbWVdKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBfYXJncyA/IG1ldGhvZC5hcHBseShfb2JqLCBfYXJncykgOiBtZXRob2QuYmluZChfb2JqKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0cHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXR1cm4gbmV3IEJpbmRpbmdzKHByb3RvLCBfb2JqKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdC8qKlxuXHRcdFx0ICogSW52b2tlcyB0aGUgc3BlY2lmaWVkIG1ldGhvZCB3aGljaCBsaXZlcyBvbiB0aGUgb2JqZWN0IHR5cGUncyBwcm90b3R5cGUuXG5cdFx0XHQgKiBJZiB5b3VyIGluc3RhbmNlIG92ZXJyaWRlcyB0aGUgb2JqZWN0IHR5cGVzIG1ldGhvZCwgb3IgeW91ciBtYW55IHByb3RvdHlwZVxuXHRcdFx0ICogbGV2ZWxzIGF3YXkgZnJvbSB0aGUgYmFzZSBwcm90b3R5cGUsIHRoaXMgbGV0cyB5b3UgdHJhY2sgYmFjayB0byB0aGUgb3JpZ2luYWwuXG5cdFx0XHQgKlxuXHRcdFx0ICogQGFyZyB7b2JqZWN0fSBfb2JqIC0gVGhlIGNvbnRleHQgd2hpY2ggdG8gZmluZCB0aGUgcGFyZW50IGZ1bmN0aW9uLlxuXHRcdFx0ICogQGFyZyB7c3RyaW5nfSBfbmFtZSAtIFRoZSBtZXRob2QgbmFtZS5cblx0XHRcdCAqIEBhcmcge2FycmF5fSBfYXJncyAtIEEgY29sbGVjdGlvbiBvZiBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aFxuXHRcdFx0ICogQHJldHVybnMgeyp9IFdoYXRldmVyIHRoZSBjYWxsZXIgcmV0dXJucy5cblx0XHRcdCAqL1xuXHRcdFx0YmFzZTogZnVuY3Rpb24gKF9vYmosIF9uYW1lLCBfYXJncykge1xuXHRcdFx0XHR2YXIgcHJvdG8sIG1ldGhvZDtcblxuXHRcdFx0XHRwcm90byA9IF9jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cdFx0XHRcdG1ldGhvZCA9IHByb3RvW19uYW1lXTtcblxuXHRcdFx0XHRpZiAodHlwZW9mIG1ldGhvZCAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ01lbWJlciAnK19uYW1lKycgaXMgbm90IGEgZnVuY3Rpb24uJyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAobWV0aG9kKSB7XG5cdFx0XHRcdFx0cmV0dXJuIF9hcmdzID8gbWV0aG9kLmFwcGx5KF9vYmosIF9hcmdzKSA6IG1ldGhvZC5iaW5kKF9vYmopO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiBuZXcgQmluZGluZ3MocHJvdG8sIF9vYmopO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBJbnZva2VzIHRoZSBzcGVjaWZpZWQgbWV0aG9kIG9uIHRoZSBvYmplY3QgdHlwZSdzIHN1cGVyIHR5cGUgb3IgcGFyZW50IHR5cGUgKGkuZS4gRm9yZCBleHRlbmRpbmcgQ2FyKS5cblx0XHRcdCAqIEBhcmcge29iamVjdH0gX29iaiAtIFRoZSBjb250ZXh0IHdoaWNoIHRvIGZpbmQgdGhlIHBhcmVudCBmdW5jdGlvbi5cblx0XHRcdCAqIEBhcmcge3N0cmluZ30gX25hbWUgLSBUaGUgbWV0aG9kIG5hbWUuXG5cdFx0XHQgKiBAYXJnIHthcnJheX0gX2FyZ3MgLSBBIGNvbGxlY3Rpb24gb2YgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGhcblx0XHRcdCAqIEByZXR1cm5zIHsqfSBXaGF0ZXZlciB0aGUgY2FsbGVyIHJldHVybnMuXG5cdFx0XHQgKi9cblx0XHRcdHN1cDogZnVuY3Rpb24gKF9vYmosIF9uYW1lLCBfYXJncykge1xuXHRcdFx0XHRyZXR1cm4gYXBpLnByb3RvLmFwcGx5KF9jb25zdHJ1Y3Rvci5wcm90b3R5cGUsIGFyZ3VtZW50cyk7XG5cdFx0XHR9LFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBEZWZpbmVzIGEgcHJvcGVycHR5IHdoaWNoIGlzIGNvbmZpZ3VyZWQgYHtjb25maWd1cmVhYmxlOiBmYWxzZSwgd3JpdGVhYmxlOiBmYWxzZX1gLlxuXHRcdFx0ICogQGFyZyB7b2JqZWN0fSBfb2JqIC0gVGhlIGNvbnRleHQgd2hpY2ggdG8gZGVmaW5lIG1lbWJlcnMuXG5cdFx0XHQgKiBAYXJnIHtzdHJpbmd9IF9uYW1lIC0gVGhlIG1lbWJlciBuYW1lLlxuXHRcdFx0ICogQGFyZyB7Kn0gX3ZhbHVlIC0gVGhlIHZhbHVlLlxuXHRcdFx0ICogQHJldHVybnMgYXBpXG5cdFx0XHQgKi9cblx0XHRcdGNvbnN0YW50OiBmdW5jdGlvbiAoX29iaiwgX25hbWUsIF92YWx1ZSkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoX29iaiwgX25hbWUsIHtcblx0XHRcdFx0XHR2YWx1ZTogX3ZhbHVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyZWFibGU6IGZhbHNlLFxuXHRcdFx0XHRcdHdyaXRlYWJsZTogZmFsc2Vcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0cmV0dXJuIGFwaTtcblx0XHRcdH0sXG5cdFx0XHQvKipcblx0XHRcdCAqIERlZmluZXMgbWVtYmVycyBvbiB0aGUgY29uc3RydWN0b3IuXG5cdFx0XHQgKiBAZnVuY3Rpb24gc3RhdGljXG5cdFx0XHQgKiBAb3ZlcmxvYWRcblx0XHRcdCAqIEBhcmcge3N0cmluZ30gX25hbWUgLSBUaGUgbWVtYmVyIG5hbWUuXG5cdFx0XHQgKiBAYXJnIHsqfSBfdmFsdWUgLSBUaGUgdmFsdWUuXG5cdFx0XHQgKiBAcmV0dXJucyBhcGlcblx0XHRcdCAqL1xuXG5cdFx0XHQvKipcblx0XHRcdCAqIERlZmluZXMgbWVtYmVycyBvbiB0aGUgY29uc3RydWN0b3IuXG5cdFx0XHQgKiBAYXJnIHtvYmplY3R9IF9kZWYgLSBBbiBvYmplY3Qgd2l0aCBtZW1iZXJzIHRvIG1peGluLlxuXHRcdFx0ICogQHJldHVybnMgYXBpXG5cdFx0XHQgKi9cblx0XHRcdHN0YXRpYzogZnVuY3Rpb24gKF9uYW1lX2RlZiwgX3ZhbHVlKSB7XG5cdFx0XHRcdHZhciBtZW1iZXIsIF9uYW1lLCBfZGVmO1xuXG5cdFx0XHRcdF92YWx1ZSA/IF9uYW1lID0gX25hbWVfZGVmIDogX2RlZiA9IF9uYW1lX2RlZjtcblxuXHRcdFx0XHRpZiAoX2RlZikge1xuXHRcdFx0XHRcdGZvciAobWVtYmVyIGluIF9kZWYpIHtcblx0XHRcdFx0XHRcdGlmICghX2RlZi5oYXNPd25Qcm9wZXJ0eShtZW1iZXIpKSBjb250aW51ZTtcblx0XHRcdFx0XHRcdF9jb25zdHJ1Y3RvclttZW1iZXJdID0gX2RlZlttZW1iZXJdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChfbmFtZSkge1xuXHRcdFx0XHRcdF9jb25zdHJ1Y3RvcltfbmFtZV0gPSBfdmFsdWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gYXBpO1xuXHRcdFx0fSxcblx0XHRcdC8qKlxuXHRcdFx0ICogQSBwcmV0dHkgd2F5IG9mIGRlZmluZSB0aGUgaW50ZXJmYWNlIG9mIHlvdXIgb2JqZWN0IHR5cGUuXG5cdFx0XHQgKlxuXHRcdFx0ICogWW91IG1heSBwYXNzIGFueSBudW1iZXIgb2YgYXJndW1lbnRzIGFzIGZ1bmN0aW9ucyBvciBzdHJpbmdzLlxuXHRcdFx0ICogXG5cdFx0XHQgKiAqKkV4YW1wbGUqKlxuXHRcdFx0ICogYGBgamF2YXNjcmlwdFxuXHRcdFx0ICogZnVuY3Rpb24gQ2FyICgkKSB7JChcblx0XHRcdCAqICAgICAvLyBEZWZpbmVzIGEgbWVtYmVyIGFzc2lnbmVkIHRvIGBudWxsYC5cblx0XHRcdCAqICAgICAnbmFtZScsXG5cdFx0XHQgKiAgICAgLy8gRGVmaW5lcyBtZW1iZXJzIHdpdGggdmFsdWVzIGFzIGEgc3RyaW5nIGFuZCBudW1iZXIuIEtlZXAgaW4gbWluZCB0aGVzZSBhcmUgcHV0IG9uIHRoZSBwcm90b3R5cGUuXG5cdFx0XHQgKiAgICAgJ2VuZ2luZVR5cGUgPSBcInN0YW5kYXJkXCIsIHNwZWVkID0gMCcsXG5cdFx0XHQgKlxuXHRcdFx0ICogICAgIC8vIERlZmluZSBpbnN0YW5jZSBtZW1iZXJzLlxuXHRcdFx0ICogICAgIGZ1bmN0aW9uIGFsbG9jIChfbmFtZSkge1xuXHRcdFx0ICogICAgICAgICB0aGlzLm5hbWUgPSBfbmFtZTtcblx0XHRcdCAqICAgICB9LFxuXHRcdFx0ICpcblx0XHRcdCAqICAgICBmdW5jdGlvbiBkcml2ZSAoKSB7XG5cdFx0XHQgKiAgICAgICAgIHRoaXMuc3BlZWQgKz0gMTtcblx0XHRcdCAqICAgICB9XG5cdFx0XHQgKiApfVxuXHRcdFx0ICogYGBgXG5cdFx0XHQgKlxuXHRcdFx0ICogT25lIGJlbmVmaXQgdG8gdGhpcyBpbnRlcmZhY2UgaXMgdGhhdCBhbGwgeW91ciBtZXRob2RzIGFyZSBuYW1lZCBzbyB5b3UgaGF2ZSBlYXN5IGFjY2VzcyBmb3IgcmVjdXJzaXZlIHByb2dyYW1zLlxuXHRcdFx0ICogQGFyZyB7c3RyaW5nfGZ1bmN0aW9ufSBfZGVmIC0gQSBzdHJpbmcgb2YgcHJvcGVydHkgZGVmaW5pdGlvbnMgb3IgYSBuYW1lZCBmdW5jdGlvbi5cblx0XHRcdCAqIEB0b2RvIFN1cHBvcnQgcHJvcGVydHkgYXNzaWdubWVudCBpbiBhbGxvYy4gTWljYWg6IDIvMjQvMjAxNlxuXHRcdFx0ICovXG5cdFx0XHQkOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMpO1xuXG5cdFx0XHRcdGFyZ3MuZm9yRWFjaChmdW5jdGlvbiAoX21lbWJlcikge1xuXHRcdFx0XHRcdHZhciBtZW1iZXJUeXBlLCBwcm9wcywga2V5O1xuXG5cdFx0XHRcdFx0bWVtYmVyVHlwZSA9IHR5cGVvZiBfbWVtYmVyO1xuXG5cdFx0XHRcdFx0c3dpdGNoIChtZW1iZXJUeXBlKSB7XG5cdFx0XHRcdFx0XHRjYXNlICdzdHJpbmcnOlxuXHRcdFx0XHRcdFx0XHRwcm9wcyA9IF9tZW1iZXIuc3BsaXQoL1xccyosXFxzKi8pO1xuXG5cdFx0XHRcdFx0XHRcdGlmIChwcm9wcykge1xuXHRcdFx0XHRcdFx0XHRcdHByb3BzLmZvckVhY2goZnVuY3Rpb24gKF9kZWYpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciBwcm9wLCB2YWw7XG5cdFx0XHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0XHRcdHByb3AgPSBfZGVmLnNwbGl0KC9cXHMqWzo9XVxccyovKTtcblx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7IHZhbCA9IEpTT04ucGFyc2UocHJvcFsxXSkgfSBjYXRjaCAoZSkge31cblx0XHRcdFx0XHRcdFx0XHRcdF9jb25zdHJ1Y3Rvci5wcm90b3R5cGVbcHJvcFswXV0gPSAodHlwZW9mIHByb3BbMV0gIT09ICd1bmRlZmluZWQnKSA/IHZhbCB8fCBwcm9wWzFdIDogbnVsbDtcblx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSAnb2JqZWN0Jzpcblx0XHRcdFx0XHRcdFx0Zm9yIChrZXkgaW4gX21lbWJlcikge1xuXHRcdFx0XHRcdFx0XHRcdGlmICghX21lbWJlci5oYXNPd25Qcm9wZXJ0eShrZXkpKSBjb250aW51ZTtcblx0XHRcdFx0XHRcdFx0XHRfY29uc3RydWN0b3IucHJvdG90eXBlW2tleV0gPSBfbWVtYmVyW2tleV07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgJ2Z1bmN0aW9uJzpcblx0XHRcdFx0XHRcdFx0aWYgKCFfbWVtYmVyLm5hbWUpIHRocm93IFR5cGVFcnJvcignTWVtYmVyIG11c3QgYmUgYSBuYW1lZCBmdW5jdGlvbi4nKTtcblx0XHRcdFx0XHRcdFx0X2NvbnN0cnVjdG9yLnByb3RvdHlwZVtfbWVtYmVyLm5hbWVdID0gX21lbWJlcjtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRyZXR1cm4gYXBpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBhcmdzLm1hcChmdW5jdGlvbiAoX2NhbGwpIHtcblx0XHRcdHJldHVybiBhcGlbX2NhbGxdIHx8IG1vZHVsZVtfY2FsbF07XG5cdFx0fSk7XG5cdH1cblxuXHRkZWZzID0gdG9BcnJheShhcmd1bWVudHMpO1xuXHRtb2R1bGUgPSAoIXRoaXMpID8ge30gOiB0aGlzO1xuXG5cdGRlZnMuZm9yRWFjaChmdW5jdGlvbiAoX2NvbnN0cnVjdG9yKSB7XG5cdFx0dmFyIGFwaTtcblxuXHRcdGlmICh0eXBlb2YgX2NvbnN0cnVjdG9yID09PSAnb2JqZWN0Jykge1xuXHRcdFx0dmFyIFN1cGVyLCBrZXlzID0gT2JqZWN0LmtleXMoX2NvbnN0cnVjdG9yKTtcblxuXHRcdFx0aWYgKGtleXMubGVuZ3RoID09PSAxICYmIG1vZHVsZVtrZXlzWzBdXSkge1xuXHRcdFx0XHRTdXBlciA9IG1vZHVsZVtrZXlzWzBdXTtcblx0XHRcdFx0cmV0dXJuIFN1cGVyLmV4dGVuZC5jYWxsKG1vZHVsZSwgX2NvbnN0cnVjdG9yW2tleXNbMF1dKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRhcGkgPSBjcmVhdGVBcGkoX2NvbnN0cnVjdG9yKTtcblxuXHRcdC8qKlxuXHRcdCAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGNvbnN0cnVjdG9yIHByb3RvdHlwZS5cblx0XHQgKiBUaGlzIGFsc28gaW52b2tlcyB0aGUgYGFsbG9jKClgIG9uIHRoZSBpbnN0YW5jZSBzbyB5b3UgY2FuIGRlZmluZSBpbnN0YW5jZSBwcm9wcy5cblx0XHQgKiBAYXJnIHsqfSAuLi4gLSBBbnkgbnVtYmVyIG9mIGFyZ3VtZW50cyBmb3IgYGFsbG9jKClgLlxuXHRcdCAqIEByZXR1cm5zIGluc3RhbmNlXG5cdFx0ICovXG5cdFx0X2NvbnN0cnVjdG9yLmNyZWF0ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHZhciBpbnN0YW5jZSA9IE9iamVjdC5jcmVhdGUoX2NvbnN0cnVjdG9yLnByb3RvdHlwZSk7XG5cdFx0XHRpZiAodHlwZW9mIGluc3RhbmNlLmFsbG9jID09PSAnZnVuY3Rpb24nKSBpbnN0YW5jZS5hbGxvYy5hcHBseShpbnN0YW5jZSwgYXJndW1lbnRzKTtcblx0XHRcdHJldHVybiBpbnN0YW5jZTtcblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogRXh0ZW5kcyB0aGUgcHJvdmlkZWQgY29uc3RydWN0b3IgcHJvdG90eXBlLlxuXHRcdCAqIEBhcmcge2Z1bmN0aW9ufSBfZGVmaW5pdGlvbiAtIENvbnN0cnVjdG9yIGZvciB0aGUgb2JqZWN0IHR5cGUuXG5cdFx0ICogQHJldHVybnMgX2NvbnN0cnVjdG9yXG5cdFx0ICovXG5cdFx0X2NvbnN0cnVjdG9yLmV4dGVuZCA9IGZ1bmN0aW9uIChfZGVmaW5pdGlvbikge1xuXHRcdFx0X2RlZmluaXRpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShfY29uc3RydWN0b3IucHJvdG90eXBlLCB7XG5cdFx0XHRcdGNvbnN0cnVjdG9yOiB7XG5cdFx0XHRcdFx0dmFsdWU6IF9kZWZpbml0aW9uLFxuXHRcdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRcdHdyaXRlYWJsZTogZmFsc2UsXG5cdFx0XHRcdFx0Y29uZmlndXJlYWJsZTogZmFsc2Vcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHJldHVybiB0eXBlLmNhbGwodGhpcyA9PT0gX2NvbnN0cnVjdG9yID8gbnVsbCA6IHRoaXMsIF9kZWZpbml0aW9uKTtcblx0XHR9XG5cblx0XHRfY29uc3RydWN0b3IuYXBwbHkoX2NvbnN0cnVjdG9yLnByb3RvdHlwZSwgYXBpKTtcblxuXHRcdG1vZHVsZVtfY29uc3RydWN0b3IubmFtZV0gPSBfY29uc3RydWN0b3I7XG5cdH0pO1xuXG5cdHJldHVybiBkZWZzLmxlbmd0aCA+IDEgPyBtb2R1bGUgOiBkZWZzWzBdO1xufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zb3VyY2UvdHlwZXMvdHlwZS5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 109 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"module.exports = { \\\"default\\\": __webpack_require__(110), __esModule: true };//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHkuanM/MTA0NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0IiLCJmaWxlIjoiMTA5LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzXG4gKiogbW9kdWxlIGlkID0gMTA5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 110 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"__webpack_require__(111);\\nvar $Object = __webpack_require__(10).Object;\\nmodule.exports = function defineProperty(it, key, desc){\\n  return $Object.defineProperty(it, key, desc);\\n};//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzPzZhN2UiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2Mpe1xuICByZXR1cm4gJE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9iYWJlbC1ydW50aW1lL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHkuanNcbiAqKiBtb2R1bGUgaWQgPSAxMTBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ },\n/* 111 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var $export = __webpack_require__(8);\\r\\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\\r\\n$export($export.S + $export.F * !__webpack_require__(18), 'Object', {defineProperty: __webpack_require__(14).f});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzP2NkMzgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLHFFQUF1RSwwQ0FBMEMiLCJmaWxlIjoiMTExLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcclxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHtkZWZpbmVQcm9wZXJ0eTogcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZn0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vYmFiZWwtcnVudGltZS9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzXG4gKiogbW9kdWxlIGlkID0gMTExXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ },\n/* 112 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Base class for a scope acting as an \\\"entity\\\" with \\\"states\\\", \\\"behaviors\\\" and the ability to respond (responsibilities) to behaviors.\\n *\\n * @module\\n */\\n\\nvar _util = __webpack_require__(50);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _typesGlobalScope = __webpack_require__(65);\\n\\nvar _typesGlobalScope2 = _interopRequireDefault(_typesGlobalScope);\\n\\nvar _typesCollection = __webpack_require__(64);\\n\\nvar _typesCollection2 = _interopRequireDefault(_typesCollection);\\n\\nvar _typesDimensions = __webpack_require__(36);\\n\\nvar _typesQueue = __webpack_require__(72);\\n\\nvar _typesQueue2 = _interopRequireDefault(_typesQueue);\\n\\nfunction invokeResponsibilities(_scope, _event) {\\n\\tif (_scope && _scope.responsibilities && _scope.isMemberSafe('responsibilities')) {\\n\\t\\t_scope.responsibilities.forEach(function (_record) {\\n\\t\\t\\tif (_record.name === _event.name) {\\n\\n\\t\\t\\t\\t// console.log(_scope.id(), 'respond', _record.name, 'from', _event.targetScope.id());\\n\\t\\t\\t\\t_record.ability.call(_scope, _event);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n}\\n\\n/**\\n * <span class=\\\"note important\\\">NOTE: This is NOT a constructor. Use `Entity.create()` to get a new instance.</span>\\n * @classdesc Base class for a scope acting as an \\\"entity\\\" with \\\"states\\\", \\\"behaviors\\\" and the ability to respond (responsibilities) to behaviors. For more information on these terms read [this]{@link module:types/Entity}.\\n * <style>\\n * .tag {\\n *   padding: 1px 4px;\\n *   border-radius: 4px;\\n *\\n *   color: #fff;\\n *   background-color: #aaa;\\n * }\\n *\\n * .tag.behavior {\\n *\\t background-color: #0ba;\\n * }\\n *\\n * .tag.state {\\n *\\t background-color: #ba0;\\n * }\\n *\\n * .note {\\n *   border: solid 1px;\\n *   border-radius: 4px;\\n *   padding: 1px 4px;\\n *   color: #aaa;\\n *   background-color: #eee;\\n * }\\n * \\n * .note.important {\\n *   color: #b55;\\n *   background-color: #fee;\\n * }\\n * </style>\\n *\\n * @class\\n * @prop {module:types/Collection~Collection} responsibilities - A collection of ResponsibilityRecords for the scope.\\n * @prop {boolean} isComplete - Marks a scope as \\\"complete\\\" via the [`complete()`]{@link module:types/Entity~Entity#complete} behavior.\\n * @extends GlobalScope\\n */\\nvar Entity = _typesGlobalScope2['default'].extend(function () {\\n\\n\\tfunction resolveTarget(_target) {\\n\\n\\t\\tswitch (typeof _target) {\\n\\t\\t\\tcase 'string':\\n\\t\\t\\t\\treturn this.findOwn(_target);\\n\\t\\t\\tcase 'object':\\n\\t\\t\\t\\tif (_target.jquery) return _target;\\n\\t\\t\\t\\tif (Entity.isPrototypeOf(_target)) return _target;\\n\\t\\t\\t\\tif (_target.nodeType === document.ELEMENT_NODE) return $(_target);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\tfunction ResponsibilityRecord(_name, _ability) {\\n\\t\\tthis.name = _name;\\n\\t\\tthis.ability = _ability;\\n\\t}\\n\\n\\tfunction dragGreeter(_event) {\\n\\t\\tswitch (_event.type) {\\n\\t\\t\\tcase 'drag-start':\\n\\t\\t\\t\\tthis.grab(_event.state);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'drag-move':\\n\\t\\t\\t\\tthis.dragging(_event.state);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'drag-end':\\n\\t\\t\\t\\tthis.release(_event.state);\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction attachDragEvents() {\\n\\t\\tif (this.draggables && this.isMemberSafe('draggables') && this.draggables.length) {\\n\\t\\t\\tthis.on('drag-start drag-move drag-end', dragGreeter);\\n\\t\\t}\\n\\t}\\n\\n\\tthis.baseType = 'TYPE_ENTITY';\\n\\tthis.STATE = {\\n\\t\\tPLAYING: 'PLAYING',\\n\\t\\tBACKGROUND: 'BACKGROUND',\\n\\t\\tVOICE_OVER: 'VOICE-OVER',\\n\\t\\tSFX: 'SFX'\\n\\t};\\n\\n\\tthis.timeoutID = null;\\n\\tthis.intervalID = null;\\n\\tthis.responsibilities = null;\\n\\tthis.isComplete = false;\\n\\tthis.shouldInheritAbilities = true;\\n\\tthis.frameHandlers = null;\\n\\tthis.frameRate = 60; // 60fps\\n\\tthis.draggables = null;\\n\\tthis.requiredQueue = null;\\n\\tthis.bgImageCollection = null;\\n\\n\\tthis.handleProperty({\\n\\t\\tsize: function size(_node, _name, _value) {\\n\\t\\t\\tvar size;\\n\\n\\t\\t\\tif (this.is(_node)) {\\n\\t\\t\\t\\tsize = _value.split(/\\\\s*[x,]\\\\s*/);\\n\\t\\t\\t\\tthis.css({\\n\\t\\t\\t\\t\\twidth: size[0],\\n\\t\\t\\t\\t\\theight: size[1] || size[0]\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\tposition: function position(_node, _name, _value) {\\n\\t\\t\\tvar size;\\n\\n\\t\\t\\tif (this.is(_node)) {\\n\\t\\t\\t\\tsize = _value.split(/\\\\s*[x,]\\\\s*/);\\n\\t\\t\\t\\tthis.css({\\n\\t\\t\\t\\t\\ttop: size[1] || size[0],\\n\\t\\t\\t\\t\\tleft: size[0]\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\tdraggable: function draggable(_node, _name, _value) {\\n\\t\\t\\tif (!this.hasOwnProperty('draggables')) {\\n\\t\\t\\t\\tthis.draggables = $();\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.draggables.push(_node);\\n\\t\\t},\\n\\n\\t\\tbg: function bg(_node, _name, _value) {\\n\\t\\t\\tvar img = new Image();\\n\\n\\t\\t\\tif (!this.hasOwnProperty('bgImageCollection')) this.bgImageCollection = [];\\n\\n\\t\\t\\tif (this.isMemberSafe('bgImageCollection')) {\\n\\t\\t\\t\\timg.src = _value;\\n\\t\\t\\t\\tthis.bgImageCollection.push(img);\\n\\t\\t\\t\\t$(_node).css('background-image', 'url(' + _value + ')');\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\n\\tthis.__init = function (_event) {\\n\\t\\tif (this.bgImageCollection && this.isMemberSafe('bgImageCollection')) {\\n\\t\\t\\tthis.watchAssets(this.bgImageCollection);\\n\\t\\t}\\n\\t\\tattachDragEvents.call(this);\\n\\n\\t\\treturn this.proto();\\n\\t};\\n\\n\\tthis.size = function () {\\n\\t\\tvar size;\\n\\n\\t\\tif (arguments.length) {\\n\\t\\t\\tsize = _typesDimensions.Size.create(arguments);\\n\\t\\t\\tthis.css(size);\\n\\t\\t\\treturn size;\\n\\t\\t}\\n\\n\\t\\treturn _typesDimensions.Size.create().set(this.width(), this.height());\\n\\t};\\n\\n\\tthis.propagateBehavior = function (_event) {\\n\\t\\tvar ids;\\n\\n\\t\\tids = [];\\n\\n\\t\\tthis.findOwn('.pl-scope').each(function (_index, _node) {\\n\\t\\t\\tvar $node = $(_node);\\n\\t\\t\\tids.push($node.id() || $node.address());\\n\\t\\t});\\n\\n\\t\\tif (this.hasOwnProperty('entities') && this.entities.length) {\\n\\t\\t\\t// console.log(this.id(), 'propagate', _event.name, 'to', this.entities.length, 'nodes', ids);\\n\\n\\t\\t\\tthis.entities.forEach(function (_scope) {\\n\\t\\t\\t\\tinvokeResponsibilities(_scope, _event);\\n\\t\\t\\t\\t_scope.propagateBehavior(_event);\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.require = function (_entity) {\\n\\t\\tif (!this.hasOwnProperty('requiredQueue')) {\\n\\t\\t\\tthis.requiredQueue = _typesQueue2['default'].create();\\n\\t\\t\\tthis.requiredQueue.on('complete', this.bind(function () {\\n\\t\\t\\t\\tthis.log('entity complete');\\n\\t\\t\\t\\tthis.complete();\\n\\t\\t\\t}));\\n\\n\\t\\t\\tthis.respond('complete', function (_event) {\\n\\t\\t\\t\\tif (!this.has(_event.target)) return;\\n\\t\\t\\t\\tif (_event.targetScope === this) return;\\n\\n\\t\\t\\t\\tthis.requiredQueue.ready(_event.behaviorTarget);\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tthis.requiredQueue.add(_entity);\\n\\t\\tthis.gate();\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.behavior = function (_name, _behavior) {\\n\\t\\t_behavior.method = this[_name] = function () {\\n\\t\\t\\tvar behaviorEvent, result;\\n\\n\\t\\t\\tbehaviorEvent = {\\n\\t\\t\\t\\tname: _name,\\n\\t\\t\\t\\tmessage: '',\\n\\t\\t\\t\\ttargetScope: this,\\n\\t\\t\\t\\tbehaviorTarget: this\\n\\t\\t\\t};\\n\\n\\t\\t\\tresult = _behavior.apply(this, arguments);\\n\\n\\t\\t\\tif (typeof result === 'object') {\\n\\t\\t\\t\\tbehaviorEvent = _util2['default'].mixin(behaviorEvent, result);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (result !== false) {\\n\\t\\t\\t\\tthis.trigger($.Event('behavior', behaviorEvent));\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this;\\n\\t\\t};\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.respond = function () {\\n\\t\\tvar name, ability, parentScope, abilities, protoAbilities;\\n\\n\\t\\tif (!this.hasOwnProperty('responsibilities')) {\\n\\t\\t\\tabilities = _typesCollection2['default'].create();\\n\\t\\t\\tprotoAbilities = this.provideAblilityPototype();\\n\\n\\t\\t\\tif (this.shouldInheritAbilities && protoAbilities && protoAbilities.responsibilities) {\\n\\t\\t\\t\\tabilities.push.apply(abilities, protoAbilities.responsibilities);\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.responsibilities = abilities;\\n\\t\\t}\\n\\n\\t\\tif (arguments.length === 1) {\\n\\t\\t\\tswitch (typeof arguments[0]) {\\n\\t\\t\\t\\tcase 'string':\\n\\t\\t\\t\\t\\tname = arguments[0];break;\\n\\n\\t\\t\\t\\tcase 'function':\\n\\t\\t\\t\\tcase 'object':\\n\\t\\t\\t\\t\\tability = arguments[0];break;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tname = arguments[0];\\n\\t\\t\\tability = arguments[1];\\n\\t\\t}\\n\\n\\t\\tswitch (typeof ability) {\\n\\t\\t\\tcase 'object':\\n\\t\\t\\t\\tfor (name in ability) {\\n\\t\\t\\t\\t\\tif (!ability.hasOwnProperty(name)) continue;\\n\\n\\t\\t\\t\\t\\tthis.respond(name, ability[name]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'function':\\n\\t\\t\\t\\tthis.responsibilities.add(new ResponsibilityRecord(name, ability));\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.delay = function (_time, _cb) {\\n\\t\\tvar screen, time;\\n\\n\\t\\tscreen = this;\\n\\t\\ttime = _util2['default'].toMillisec(_time);\\n\\n\\t\\t_util2['default'].assignRef(this, 'timeoutID', setTimeout(_cb.bind(screen), time));\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.repeat = function (_time, _cb) {\\n\\t\\tvar screen, time;\\n\\n\\t\\tscreen = this;\\n\\t\\ttime = _util2['default'].toMillisec(_time);\\n\\n\\t\\t_util2['default'].assignRef(this, 'intervalID', setInterval(_cb.bind(screen), time));\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.kill = function (_timer) {\\n\\t\\tvar id;\\n\\n\\t\\tid = _timer === 'repeat' ? this.intervalID : this.timeoutID;\\n\\n\\t\\tif (typeof id === 'number') {\\n\\t\\t\\t(_timer === 'repeat' ? clearInterval : clearTimeout)(id);\\n\\t\\t\\tthis[_timer === 'repeat' ? 'intervalID' : 'timeoutID'] = null;\\n\\t\\t} else if (id) {\\n\\t\\t\\tid.forEach((function (_id) {\\n\\t\\t\\t\\tthis.kill(_id);\\n\\t\\t\\t}).bind(this));\\n\\n\\t\\t\\t_timer === 'repeat' ? this.intervalID = null : this.timeoutID = null;\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.eachFrame = function (_handler, _on) {\\n\\t\\tvar binder, frame, lastTime, rate, frames;\\n\\n\\t\\trate = this.frameRate || 1000;\\n\\t\\tframes = 0;\\n\\t\\tlastTime = 0;\\n\\n\\t\\tif (!this.hasOwnProperty('frameHandlers')) {\\n\\t\\t\\tframe = function (_time) {\\n\\t\\t\\t\\tvar i, handler;\\n\\n\\t\\t\\t\\tif (rate) {\\n\\t\\t\\t\\t\\tif (_time - lastTime >= 1000 / rate) {\\n\\t\\t\\t\\t\\t\\tfor (i = 0; handler = this.frameHandlers[i]; i += 1) {\\n\\t\\t\\t\\t\\t\\t\\thandler.call(this, _time, Math.round(1000 / (_time - lastTime)), rate);\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tif (frames === rate) frames = 0;\\n\\n\\t\\t\\t\\t\\t\\tframes += 1;\\n\\t\\t\\t\\t\\t\\tlastTime = _time;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (this.frameHandlers.length) {\\n\\t\\t\\t\\t\\twindow.requestAnimationFrame(binder);\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\n\\t\\t\\tbinder = this.bind(frame);\\n\\n\\t\\t\\t// allows methods passed as _handler's to\\n\\t\\t\\t// be able to trace back for proto() callbacks.\\n\\t\\t\\tframe.method = this.eachFrame;\\n\\n\\t\\t\\tthis.frameHandlers = _typesCollection2['default'].create();\\n\\t\\t\\twindow.requestAnimationFrame(binder);\\n\\t\\t}\\n\\n\\t\\tif (_on !== false) {\\n\\t\\t\\tthis.frameHandlers.add(_handler);\\n\\t\\t} else {\\n\\t\\t\\tthis.frameHandlers.remove(_handler);\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.state = function (_flag, _definition, _imp) {\\n\\t\\tvar flag, tester, setter, getter, STATE, def, opperations, names;\\n\\n\\t\\tif (!_definition) {\\n\\t\\t\\treturn this.proto(_flag);\\n\\t\\t}\\n\\n\\t\\tdef = _definition.split(/\\\\s+/);\\n\\t\\tnames = _flag.split(/\\\\s+/);\\n\\t\\topperations = [];\\n\\n\\t\\tdef.forEach(this.bind(function (_opp) {\\n\\t\\t\\tvar method, flag;\\n\\n\\t\\t\\tmethod = _opp.slice(0, 1) === '+' ? 'addClass' : 'removeClass';\\n\\n\\t\\t\\topperations.push({\\n\\t\\t\\t\\tmethod: method,\\n\\t\\t\\t\\tflag: _opp.slice(1)\\n\\t\\t\\t});\\n\\n\\t\\t\\tif (method === 'addClass') {\\n\\t\\t\\t\\tflag = _opp.slice(1);\\n\\t\\t\\t\\tSTATE = _util2['default'].transformId(flag);\\n\\t\\t\\t\\tthis.STATE[STATE] = flag;\\n\\t\\t\\t}\\n\\t\\t}));\\n\\n\\t\\tsetter = names[0];\\n\\t\\ttester = names[1];\\n\\n\\t\\tthis[setter] = function (_target) {\\n\\t\\t\\tvar target, uiStateEvent, oppsPerformed;\\n\\n\\t\\t\\ttarget = resolveTarget.call(this, _target);\\n\\t\\t\\tuiStateEvent = $.Event('ui-' + setter, {\\n\\t\\t\\t\\ttarget: target.jquery ? target[0] : target,\\n\\t\\t\\t\\ttargetScope: this\\n\\t\\t\\t});\\n\\t\\t\\toppsPerformed = 0;\\n\\n\\t\\t\\tif (_imp && _imp.shouldSet && _imp.shouldSet.apply(this, arguments) === false) {\\n\\t\\t\\t\\treturn !!(_imp && _imp.notSet) && _imp.notSet.apply(this, arguments);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (_imp && _imp.willSet) _imp.willSet.apply(this, arguments);\\n\\n\\t\\t\\topperations.forEach(function (_record) {\\n\\t\\t\\t\\t// If we are adding or removing a class, test if the target already has/removed it.\\n\\t\\t\\t\\t// If so, then bump \\\"oppsPerformed\\\".\\n\\t\\t\\t\\toppsPerformed += Number(target.hasClass(_record.flag) === ! ~_record.method.indexOf('add'));\\n\\t\\t\\t\\ttarget[_record.method](_record.flag);\\n\\t\\t\\t});\\n\\n\\t\\t\\tif (_imp && _imp.didSet) _imp.didSet.apply(this, arguments);\\n\\n\\t\\t\\tif (oppsPerformed) {\\n\\t\\t\\t\\tthis.trigger(uiStateEvent);\\n\\t\\t\\t\\treturn target;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn false;\\n\\t\\t};\\n\\n\\t\\tif (tester) {\\n\\t\\t\\tgetter = 'get' + tester.slice(0, 1).toUpperCase() + tester.slice(1);\\n\\n\\t\\t\\tthis[tester] = function (_target) {\\n\\t\\t\\t\\tvar target;\\n\\n\\t\\t\\t\\ttarget = resolveTarget.call(this, _target);\\n\\n\\t\\t\\t\\treturn target.hasClass(this.STATE[STATE]);\\n\\t\\t\\t};\\n\\n\\t\\t\\tthis[getter] = function () {\\n\\t\\t\\t\\treturn this.findOwn('.' + this.STATE[STATE]);\\n\\t\\t\\t};\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.provideBehaviorEventScope = function () {\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.provideAblilityPototype = function () {\\n\\t\\tvar owner;\\n\\n\\t\\towner = _util2['default'].getOwner(this, this.baseType);\\n\\n\\t\\treturn !!owner && owner.object;\\n\\t};\\n\\n\\tthis.completed = function () {\\n\\t\\treturn this.game.demoMode || this.hasOwnProperty('isComplete') && this.isComplete || !this.requiredQueue || this.hasOwnProperty('requiredQueue') && this.requiredQueue.length === 0;\\n\\t};\\n\\n\\t/**\\n  * <span class=\\\"tag behavior\\\">Behavior</span>\\n  * Marks a scope \\\"complete\\\" by seting `isComplete` to `true` and add the `COMPLETE` state flag.\\n  * @function module:types/Entity~Entity#complete\\n  * @returns {object} A messages object with `behaviorTarget` set to the scope performing the behavior.\\n  */\\n\\tthis.behavior('complete', function () {\\n\\t\\tif (this.hasOwnProperty('isComplete') && this.isComplete) return false;\\n\\n\\t\\tthis.isComplete = true;\\n\\t\\tthis.addClass('COMPLETE');\\n\\n\\t\\treturn {\\n\\t\\t\\tbehaviorTarget: this\\n\\t\\t};\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag behavior\\\">Behavior</span>\\n  * Reports a drggable has been grabbed for dragging.\\n  * @function module:types/Entity~Entity#grab\\n  * @arg {object} _state - An object containing the state of a draggable.\\n  * @returns {object} A messages object with `behaviorTarget` set to the scope performing the behavior.\\n  *\\n  * @see module:play~pl.game.manager.draggable for more info on draggable state.\\n  */\\n\\tthis.behavior('grab', function (_state) {\\n\\t\\treturn {\\n\\t\\t\\tstate: _state,\\n\\t\\t\\tbehaviorTarget: _state.$draggable\\n\\t\\t};\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag behavior\\\">Behavior</span>\\n  * Reports a draggable as being dragged.\\n  * @function module:types/Entity~Entity#dragging\\n  * @arg {object} _state - An object containing the state of a draggable.\\n  * @returns {object} A messages object with `behaviorTarget` set to the scope performing the behavior.\\n  *\\n  * @see module:play~pl.game.manager.draggable for more info on draggable state.\\n  */\\n\\tthis.behavior('dragging', function (_state) {\\n\\t\\treturn {\\n\\t\\t\\tstate: _state,\\n\\t\\t\\tbehaviorTarget: _state.$draggable\\n\\t\\t};\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag behavior\\\">Behavior</span>\\n  * Reports a drggable as released or droped.\\n  * @function module:types/Entity~Entity#release\\n  * @arg {object} _state - An object containing the state of a draggable.\\n  * @returns {object} A messages object with `behaviorTarget` set to the scope performing the behavior.\\n  *\\n  * @see module:play~pl.game.manager.draggable for more info on draggable state.\\n  */\\n\\tthis.behavior('release', function (_state) {\\n\\t\\treturn {\\n\\t\\t\\tstate: _state,\\n\\t\\t\\tbehaviorTarget: _state.$draggable\\n\\t\\t};\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds `OPEN` and removes the `LEAVE` CSS class names from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#open\\n  * @fires Entity#ui-open\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `OPEN` class name.\\n  * @function module:types/Entity~Entity#opened\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Open'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `OPEN` class name.\\n  * @function module:types/Entity~Entity#getOpened\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('open opened', '+OPEN -LEAVE');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Removes the `OPEN` CSS class name from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#close\\n  * @fires Entity#ui-close\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\tthis.state('close', '-OPEN');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds the `LEAVE` CSS class name to the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#leave\\n  * @fires Entity#ui-leave\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `LEAVE` class name.\\n  * @function module:types/Entity~Entity#left\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Leave'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `LEAVE` class name.\\n  * @function module:types/Entity~Entity#getLeft\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('leave left', '+LEAVE', {\\n\\t\\twillSet: function willSet(_target) {\\n\\t\\t\\tthis.close(_target);\\n\\t\\t}\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds `ENABLED` and removes the `DISABLED` CSS class names from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#enable\\n  * @fires Entity#ui-enable\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `ENABLED` class name.\\n  * @function module:types/Entity~Entity#enabled\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Enabled'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `ENABLED` class name.\\n  * @function module:types/Entity~Entity#getEnabled\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('enable enabled', '+ENABLED -DISABLED');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds `DISABLED` and removes the `ENABLED` CSS class names from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#disable\\n  * @fires Entity#ui-disable\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `DISABLED` class name.\\n  * @function module:types/Entity~Entity#disabled\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Disabled'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `DISABLED` class name.\\n  * @function module:types/Entity~Entity#getDisabled\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('disable disabled', '+DISABLED -ENABLED');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds the `SELECTED` CSS class name to the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#select\\n  * @fires Entity#ui-select\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `SELECTED` class name.\\n  * @function module:types/Entity~Entity#selected\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Selected'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `SELECTED` class name.\\n  * @function module:types/Entity~Entity#getDisabled\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('select selected', '+SELECTED', {\\n\\t\\twillSet: function willSet(_target) {\\n\\t\\t\\tvar target, $parent;\\n\\n\\t\\t\\ttarget = resolveTarget.call(this, _target);\\n\\t\\t\\t$parent = target.parent();\\n\\n\\t\\t\\t$parent.find('> .SELECTED').each(this.bind(function (_index, _node) {\\n\\t\\t\\t\\tthis.deselect(_node);\\n\\t\\t\\t}));\\n\\t\\t\\t$parent.find('> .HIGHLIGHTED').each(this.bind(function (_index, _node) {\\n\\t\\t\\t\\tthis.unhighlight(_node);\\n\\t\\t\\t}));\\n\\t\\t}\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Removes the `SELECTED` CSS class name from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#deselect\\n  * @fires Entity#ui-deselect\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\tthis.state('deselect', '-SELECTED');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds the `HIGHLIGHTED` CSS class name to the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#highlight\\n  * @fires Entity#ui-highlight\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `HIGHLIGHTED` class name.\\n  * @function module:types/Entity~Entity#highlighted\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Highlighted'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `HIGHLIGHTED` class name.\\n  * @function module:types/Entity~Entity#getHighlighted\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('highlight highlighted', '+HIGHLIGHTED');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Removes the `HIGHLIGHTED` CSS class name from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#unhighlight\\n  * @fires Entity#ui-unhighlight\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\tthis.state('unhighlight', '-HIGHLIGHTED');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds the `DRAGGABLE` CSS class name to the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#draggable\\n  * @fires Entity#ui-draggable\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `DRAGGABLE` class name.\\n  * @function module:types/Entity~Entity#dragEnabled\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Draggable'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `DRAGGABLE` class name.\\n  * @function module:types/Entity~Entity#getDragEnabled\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('draggable dragEnabled', '+DRAGGABLE', {\\n\\t\\tdidSet: function didSet(_target) {\\n\\t\\t\\tthis.translate(resolveTarget.call(this, _target));\\n\\t\\t}\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Removes the `DRAGGABLE` CSS class name from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#undraggable\\n  * @fires Entity#ui-undraggable\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\tthis.state('undraggable', '-DRAGGABLE');\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds the `TRANSLATED` CSS class name to the scope or the given `_target`. The target also gets a 2d transform at the given `_point`.\\n  * @function module:types/Entity~Entity#translate\\n  * @fires Entity#ui-translate\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @arg {module:types/Dimensions~Point} _point - Point object with coordinates {x,y}.\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Adds the `TRANSLATED` CSS class name to the scope. The scope also gets a 2d transform at the given `_point`.\\n  * @function module:types/Entity~Entity#translate\\n  * @fires Entity#ui-translate\\n  * @arg {module:types/Dimensions~Point} _point - Point object with coordinates {x,y}.\\n  * @returns `this`\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Tests if the scope or given `_target` has the `TRANSLATED` class name.\\n  * @function module:types/Entity~Entity#translated\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns {Boolean} Translate'ness.\\n  */\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Provides the elements with the `TRANSLATED` class name.\\n  * @function module:types/Entity~Entity#getTranslated\\n  * @returns {jQuery} jQuery collection of matched nodes.\\n  * @todo Return scope if available.\\n  */\\n\\tthis.state('translate translated', '+TRANSLATED', {\\n\\t\\twillSet: function willSet(_target_point, _point) {\\n\\t\\t\\tvar point, target;\\n\\n\\t\\t\\ttarget = resolveTarget.call(this, _target_point);\\n\\t\\t\\tpoint = ! ~[_target_point.x, _target_point.y].indexOf(undefined) ? _target_point : _point;\\n\\n\\t\\t\\tif (point) {\\n\\t\\t\\t\\ttarget.css('transform', 'translateX(' + point.x + 'px) translateY(' + point.y + 'px)');\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\n\\t/**\\n  * <span class=\\\"tag state\\\">State</span>\\n  * Removes the `TRANSLATED` CSS class name and CSS transform from the scope or the given `_target`.\\n  * @function module:types/Entity~Entity#untranslate\\n  * @fires Entity#ui-untranslate\\n  * @arg {string|Scope|jQuery|HTMLElement} _target - A CSS selector, DOM node reference or context object (i.e. Scope/jQuery).\\n  * @returns `this`\\n  */\\n\\tthis.state('untranslate', '-TRANSLATED', {\\n\\t\\twillSet: function willSet() {\\n\\t\\t\\tthis.css('transform', 'none');\\n\\t\\t}\\n\\t});\\n\\n\\tthis.state('gate gated', '+GATED');\\n});\\n\\nexports['default'] = { Entity: Entity, invokeResponsibilities: invokeResponsibilities };\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 113 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"exports.__esModule = true;\\n/**\\n*  Screen\\n*  @desc Contains...\\n*  @proto Entity\\n*/\\n\\nvar _typesEntity = __webpack_require__(112);\\n\\nvar Screen = _typesEntity.Entity.extend(function () {\\n\\n\\tfunction attachBehaviorEvent() {\\n\\t\\tthis.on('behavior', function (_event) {\\n\\t\\t\\t// console.log('SCREEN GOT', _event.targetScope.id(), _event.name);\\n\\n\\t\\t\\tif (this !== _event.targetScope) {\\n\\t\\t\\t\\t_typesEntity.invokeResponsibilities(this, _event);\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.propagateBehavior(_event);\\n\\t\\t});\\n\\t}\\n\\n\\tthis.baseType = 'TYPE_SCREEN';\\n\\tthis.game = null;\\n\\tthis.screen = null;\\n\\n\\tthis.__init = function () {\\n\\t\\tthis.proto();\\n\\n\\t\\tif (this.is(pl.game.config('screenSelector'))) {\\n\\t\\t\\tattachBehaviorEvent.call(this);\\n\\t\\t}\\n\\t};\\n\\n\\tthis.start = function () {\\n\\t\\tthis.startAudio();\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.stop = function () {\\n\\t\\tthis.stopAudio();\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.startAudio = function () {\\n\\t\\tif (!this.audio) return;\\n\\t\\tthis.audio.background.play();\\n\\t\\tthis.audio.voiceOver.play();\\n\\t};\\n\\n\\tthis.stopAudio = function () {\\n\\t\\tif (!this.audio) return;\\n\\t\\tthis.audio.voiceOver.stop('@ALL');\\n\\t};\\n\\n\\tthis.index = function () {\\n\\t\\tif (this === this.screen) return this.game.screens.indexOf(this);\\n\\t\\treturn this.$els.index();\\n\\t};\\n\\n\\tthis.next = function () {\\n\\t\\tif (!this.completed()) return false;\\n\\t\\treturn this.game.screens[this.screen.index() + 1];\\n\\t};\\n\\n\\tthis.prev = function () {\\n\\t\\treturn this.game.screens[this.screen.index() - 1];\\n\\t};\\n\\n\\tthis.quit = function () {\\n\\t\\tthis.game.quit.open();\\n\\t};\\n\\n\\tthis.nextSib = function () {\\n\\t\\treturn $.fn.next.apply(this.$els, arguments);\\n\\t};\\n\\n\\tthis.prevSib = function () {\\n\\t\\treturn $.fn.prev.apply(this.$els, arguments);\\n\\t};\\n\\n\\tthis.isLast = function () {\\n\\t\\treturn this.game.screens.indexOf(this.screen) === this.game.screens.length - 1;\\n\\t};\\n});\\n\\nexports['default'] = Screen;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdHlwZXMvU2NyZWVuLmpzP2U0MTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozt1Q0FNK0MsR0FBYzs7QUFFN0QsSUFBSSxNQUFNLEdBQUcsb0JBQU8sTUFBTSxDQUFDLFlBQVk7O0FBRXRDLFVBQVMsbUJBQW1CLEdBQUk7QUFDL0IsTUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsVUFBVSxNQUFNLEVBQUU7OztBQUdyQyxPQUFJLElBQUksS0FBSyxNQUFNLENBQUMsV0FBVyxFQUFFO0FBQ2hDLHdDQUF1QixJQUFJLEVBQUcsTUFBTSxDQUFDLENBQUM7SUFDdEM7O0FBRUQsT0FBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0dBQy9CLENBQUMsQ0FBQztFQUNIOztBQUVELEtBQUksQ0FBQyxRQUFRLEdBQUcsYUFBYSxDQUFDO0FBQzlCLEtBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLEtBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDOztBQUVuQixLQUFJLENBQUMsTUFBTSxHQUFHLFlBQVk7QUFDekIsTUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDOztBQUViLE1BQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUU7QUFDOUMsc0JBQW1CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQy9CO0VBQ0QsQ0FBQzs7QUFFRixLQUFJLENBQUMsS0FBSyxHQUFHLFlBQVk7QUFDeEIsTUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQ2xCLFNBQU8sSUFBSSxDQUFDO0VBQ1osQ0FBQzs7QUFFRixLQUFJLENBQUMsSUFBSSxHQUFHLFlBQVk7QUFDdkIsTUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQ2pCLFNBQU8sSUFBSSxDQUFDO0VBQ1osQ0FBQzs7QUFFRixLQUFJLENBQUMsVUFBVSxHQUFHLFlBQVk7QUFDN0IsTUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsT0FBTztBQUN4QixNQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUM3QixNQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztFQUM1QixDQUFDOztBQUVGLEtBQUksQ0FBQyxTQUFTLEdBQUcsWUFBWTtBQUM1QixNQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxPQUFPO0FBQ3hCLE1BQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztFQUNsQyxDQUFDOztBQUVGLEtBQUksQ0FBQyxLQUFLLEdBQUcsWUFBWTtBQUN4QixNQUFJLElBQUksS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pFLFNBQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztFQUN6QixDQUFDOztBQUVGLEtBQUksQ0FBQyxJQUFJLEdBQUcsWUFBWTtBQUN2QixNQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFLE9BQU8sS0FBSyxDQUFDO0FBQ3BDLFNBQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQztFQUNoRCxDQUFDOztBQUVGLEtBQUksQ0FBQyxJQUFJLEdBQUcsWUFBWTtBQUN2QixTQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUM7RUFDaEQsQ0FBQzs7QUFFRixLQUFJLENBQUMsSUFBSSxHQUFHLFlBQVk7QUFDdkIsTUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7RUFDdEIsQ0FBQzs7QUFFRixLQUFJLENBQUMsT0FBTyxHQUFHLFlBQVk7QUFDMUIsU0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztFQUM3QyxDQUFDOztBQUVGLEtBQUksQ0FBQyxPQUFPLEdBQUcsWUFBWTtBQUMxQixTQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0VBQzdDLENBQUM7O0FBRUYsS0FBSSxDQUFDLE1BQU0sR0FBRyxZQUFZO0FBQ3pCLFNBQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDO0VBQzdFLENBQUM7Q0FFRixDQUFDLENBQUM7O3FCQUVZLE1BQU0iLCJmaWxlIjoiMTEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4qICBTY3JlZW5cbiogIEBkZXNjIENvbnRhaW5zLi4uXG4qICBAcHJvdG8gRW50aXR5XG4qL1xuXG5pbXBvcnQgeyBFbnRpdHksIGludm9rZVJlc3BvbnNpYmlsaXRpZXMgfSBmcm9tICd0eXBlcy9FbnRpdHknO1xuXG52YXIgU2NyZWVuID0gRW50aXR5LmV4dGVuZChmdW5jdGlvbiAoKSB7XG5cblx0ZnVuY3Rpb24gYXR0YWNoQmVoYXZpb3JFdmVudCAoKSB7XG5cdFx0dGhpcy5vbignYmVoYXZpb3InLCBmdW5jdGlvbiAoX2V2ZW50KSB7XG5cdFx0XHQvLyBjb25zb2xlLmxvZygnU0NSRUVOIEdPVCcsIF9ldmVudC50YXJnZXRTY29wZS5pZCgpLCBfZXZlbnQubmFtZSk7XG5cblx0XHRcdGlmICh0aGlzICE9PSBfZXZlbnQudGFyZ2V0U2NvcGUpIHtcblx0XHRcdFx0aW52b2tlUmVzcG9uc2liaWxpdGllcyh0aGlzLCAgX2V2ZW50KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5wcm9wYWdhdGVCZWhhdmlvcihfZXZlbnQpO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHR0aGlzLmJhc2VUeXBlID0gJ1RZUEVfU0NSRUVOJztcblx0dGhpcy5nYW1lID0gbnVsbDtcblx0dGhpcy5zY3JlZW4gPSBudWxsO1xuXG5cdHRoaXMuX19pbml0ID0gZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMucHJvdG8oKTtcblxuXHRcdGlmICh0aGlzLmlzKHBsLmdhbWUuY29uZmlnKCdzY3JlZW5TZWxlY3RvcicpKSkge1xuXHRcdFx0YXR0YWNoQmVoYXZpb3JFdmVudC5jYWxsKHRoaXMpO1xuXHRcdH1cblx0fTtcblxuXHR0aGlzLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMuc3RhcnRBdWRpbygpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdHRoaXMuc3RvcCA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLnN0b3BBdWRpbygpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdHRoaXMuc3RhcnRBdWRpbyA9IGZ1bmN0aW9uICgpIHtcblx0XHRpZiAoIXRoaXMuYXVkaW8pIHJldHVybjtcblx0XHR0aGlzLmF1ZGlvLmJhY2tncm91bmQucGxheSgpO1xuXHRcdHRoaXMuYXVkaW8udm9pY2VPdmVyLnBsYXkoKTtcblx0fTtcblxuXHR0aGlzLnN0b3BBdWRpbyA9IGZ1bmN0aW9uICgpIHtcblx0XHRpZiAoIXRoaXMuYXVkaW8pIHJldHVybjtcblx0XHR0aGlzLmF1ZGlvLnZvaWNlT3Zlci5zdG9wKCdAQUxMJyk7XG5cdH07XG5cblx0dGhpcy5pbmRleCA9IGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodGhpcyA9PT0gdGhpcy5zY3JlZW4pIHJldHVybiB0aGlzLmdhbWUuc2NyZWVucy5pbmRleE9mKHRoaXMpO1xuXHRcdHJldHVybiB0aGlzLiRlbHMuaW5kZXgoKTtcblx0fTtcblxuXHR0aGlzLm5leHQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKCF0aGlzLmNvbXBsZXRlZCgpKSByZXR1cm4gZmFsc2U7XG5cdFx0cmV0dXJuIHRoaXMuZ2FtZS5zY3JlZW5zW3RoaXMuc2NyZWVuLmluZGV4KCkrMV07XG5cdH07XG5cblx0dGhpcy5wcmV2ID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLmdhbWUuc2NyZWVuc1t0aGlzLnNjcmVlbi5pbmRleCgpLTFdO1xuXHR9O1xuXG5cdHRoaXMucXVpdCA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLmdhbWUucXVpdC5vcGVuKCk7XG5cdH07XG5cblx0dGhpcy5uZXh0U2liID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiAkLmZuLm5leHQuYXBwbHkodGhpcy4kZWxzLCBhcmd1bWVudHMpO1xuXHR9O1xuXG5cdHRoaXMucHJldlNpYiA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gJC5mbi5wcmV2LmFwcGx5KHRoaXMuJGVscywgYXJndW1lbnRzKTtcblx0fTtcblxuXHR0aGlzLmlzTGFzdCA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5nYW1lLnNjcmVlbnMuaW5kZXhPZih0aGlzLnNjcmVlbikgPT09IHRoaXMuZ2FtZS5zY3JlZW5zLmxlbmd0aC0xO1xuXHR9O1xuXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgU2NyZWVuO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zb3VyY2UvdHlwZXMvU2NyZWVuLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 114 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _Object$defineProperties = __webpack_require__(37)['default'];\\n\\nvar _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * Node scope for the top level game node.\\n */\\n\\nvar _util = __webpack_require__(50);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar _playGame = __webpack_require__(59);\\n\\nvar _playGame2 = _interopRequireDefault(_playGame);\\n\\nvar _typesGlobalScope = __webpack_require__(65);\\n\\nvar _typesGlobalScope2 = _interopRequireDefault(_typesGlobalScope);\\n\\nvar _typesScreen = __webpack_require__(113);\\n\\nvar _typesScreen2 = _interopRequireDefault(_typesScreen);\\n\\nvar _typesCollection = __webpack_require__(64);\\n\\nvar _typesCollection2 = _interopRequireDefault(_typesCollection);\\n\\nvar _typesScope = __webpack_require__(66);\\n\\nvar _typesDimensions = __webpack_require__(36);\\n\\nvar _typesAudioManager = __webpack_require__(74);\\n\\nvar Game = _typesGlobalScope2['default'].extend(function () {\\n\\n\\tvar Viewport, screenPrototype, platformEventHandler;\\n\\n\\t/**\\n  * Scales the game view to fill the browser window.\\n  */\\n\\tfunction scaleGame() {\\n\\t\\tvar vpSize, gameDimensions, width, height, zoom;\\n\\n\\t\\tvpSize = this.viewport.size();\\n\\t\\tgameDimensions = _playGame2['default'].config('dimensions');\\n\\t\\twidth = gameDimensions.width || this.width();\\n\\t\\theight = Math.round(gameDimensions.width / gameDimensions.ratio);\\n\\t\\tzoom = this.viewport.width / width;\\n\\n\\t\\tif (Math.round(height * zoom) > this.viewport.height) {\\n\\t\\t\\tzoom = (this.viewport.height / height).toPrecision(4);\\n\\t\\t}\\n\\n\\t\\t_util2['default'].mixin(this.node().style, {\\n\\t\\t\\twidth: width + 'px',\\n\\t\\t\\tzoom: zoom\\n\\t\\t});\\n\\n\\t\\tif (!this.css('zoom')) {\\n\\t\\t\\tthis.css({\\n\\t\\t\\t\\ttransform: 'scale(' + zoom + ')',\\n\\t\\t\\t\\ttransformOrigin: (zoom < 1 ? '0px' : '50%') + ' 0px 0px',\\n\\t\\t\\t\\theight: this.viewport.height / zoom\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tthis.zoom = zoom;\\n\\t}\\n\\n\\tfunction demoMode(_set) {\\n\\t\\tthis.demoMode = _set != null ? _set : !this.demoMode;\\n\\t\\tthis[this.demoMode ? 'addClass' : 'removeClass']('DEMO');\\n\\n\\t\\tconsole.info(this.id(), 'is now ' + (this.demoMode ? 'in' : 'out of') + ' Demo Mode.');\\n\\t}\\n\\n\\tfunction collectVideos() {\\n\\t\\tthis.find('video').each((function (_index, _node) {\\n\\t\\t\\tthis.media.video.add(_node);\\n\\n\\t\\t\\t_node.onplay = (function () {\\n\\t\\t\\t\\tvar playing = this.media.playing('.background, .voiceOver');\\n\\t\\t\\t\\tif (playing) playing.stop('@ALL');\\n\\t\\t\\t\\tthis.log('video play', playing);\\n\\t\\t\\t}).bind(this);\\n\\t\\t}).bind(this));\\n\\t}\\n\\n\\tscreenPrototype = _typesScreen2['default'];\\n\\tplatformEventHandler = new function () {\\n\\n\\t\\tthis.invoke = function (_event, _ctx) {\\n\\t\\t\\tif (typeof this[_event.name] === 'function') {\\n\\t\\t\\t\\tthis[_event.name].call(_ctx, _event);\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\tthis['toggle-demo-mode'] = function (_set) {\\n\\t\\t\\tdemoMode.call(this);\\n\\t\\t};\\n\\t}();\\n\\n\\tthis.baseType = 'TYPE_GAME';\\n\\tthis.screens = null;\\n\\tthis.zoom = 1;\\n\\tthis.keyCommands = null;\\n\\tthis.demoMode = false;\\n\\tthis.media = null;\\n\\tthis.viewport = new function () {\\n\\t\\tvar vp, $html, RESIZE_HANDLERS;\\n\\n\\t\\tvp = this;\\n\\t\\t$html = $('html');\\n\\t\\tRESIZE_HANDLERS = [];\\n\\n\\t\\t$(window).on('resize', function (_event) {\\n\\t\\t\\tif (!$html.hasClass(vp.orientation)) {\\n\\t\\t\\t\\t$html.removeClass('squareish landscape protrait').addClass(vp.orientation);\\n\\t\\t\\t}\\n\\n\\t\\t\\tRESIZE_HANDLERS.forEach(function (_handler) {\\n\\t\\t\\t\\t_handler(_event);\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\tthis.LANDSCAPE = 'landscape';\\n\\t\\tthis.PROTRAIT = 'protrait';\\n\\t\\tthis.SQUAREISH = 'squareish';\\n\\n\\t\\tthis.size = function () {\\n\\t\\t\\treturn _typesDimensions.Size.create().set(window.innerWidth, window.innerHeight);\\n\\t\\t};\\n\\n\\t\\t_Object$defineProperties(this, {\\n\\t\\t\\twidth: {\\n\\t\\t\\t\\tget: function get() {\\n\\t\\t\\t\\t\\treturn window.innerWidth;\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\tconfigurable: false\\n\\t\\t\\t},\\n\\n\\t\\t\\theight: {\\n\\t\\t\\t\\tget: function get() {\\n\\t\\t\\t\\t\\treturn window.innerHeight;\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\tconfigurable: false\\n\\t\\t\\t},\\n\\n\\t\\t\\torientation: {\\n\\t\\t\\t\\tget: function get() {\\n\\t\\t\\t\\t\\tvar ratio = this.size().ratio();\\n\\n\\t\\t\\t\\t\\tswitch (true) {\\n\\t\\t\\t\\t\\t\\tcase ratio > 0.9 && ratio < 1.1:\\n\\t\\t\\t\\t\\t\\t\\treturn 'squareish';\\n\\t\\t\\t\\t\\t\\tcase ratio > 1.1:\\n\\t\\t\\t\\t\\t\\t\\treturn 'landscape';\\n\\t\\t\\t\\t\\t\\tcase ratio < 0.9:\\n\\t\\t\\t\\t\\t\\t\\treturn 'protrait';\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tthis.onResize = function (_handler) {\\n\\t\\t\\tRESIZE_HANDLERS.push(_handler);\\n\\t\\t};\\n\\n\\t\\tthis.offResize = function (_handler) {\\n\\t\\t\\tvar index = RESIZE_HANDLERS.indexOf(_handler);\\n\\n\\t\\t\\tif (~index) RESIZE_HANDLERS.splice(index, 1);\\n\\t\\t};\\n\\n\\t\\t$html.addClass(this.orientation);\\n\\t}();;\\n\\n\\tthis.willInit = function () {\\n\\t\\tthis.addClass('pl-game');\\n\\n\\t\\tscaleGame.call(this);\\n\\t\\tthis.watchAudio();\\n\\t\\tthis.captureScreens();\\n\\n\\t\\tthis.viewport.onResize(this.bind(scaleGame));\\n\\n\\t\\tpl.game.on('platform-event', this.bind(function (_event) {\\n\\t\\t\\tplatformEventHandler.invoke(_event, this);\\n\\t\\t}));\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t/**\\n  * Watch for specific keys or combination of keys. NOTE: meta key commands DO NOT support chords (i.e. meta+K,B).\\n  * ### Key Names\\n  * - *meta*: Command (aka Apple ⌘ or win)\\n  * - *alt*: Alt (aka Option ⌥)\\n  * - *shift*: Shift ⇪\\n  * - *ctrl*: Control ^\\n  * - *enter*: Enter or Return\\n  * - *esc*: Escape\\n  * - *left*: Left arrow\\n  * - *up*: Up arrow\\n  * - *right*: Right arrow\\n  * - *down*: Down arrow\\n  *\\n  * ### Example\\n  * ```javascript\\n  * // Overriding print.\\n  * this.game.onKeys('cmd+P', printHandler);\\n  *\\n  * // Holding Control and pressing \\\"K\\\" then \\\"B\\\"\\n  * this.game.onKeys('ctrl+K,B', handler);\\n  * ```\\n  * @arg {string} _commands - The key or sequence of keys.\\n  * @arg {function} _handler - Your event handler for when you key pattern is matched.\\n  * @returns `this`\\n  */\\n\\tthis.onKeys = function (_commands, _handler) {\\n\\t\\tvar sequence, chords, modifiers, map;\\n\\n\\t\\tif (!this.keyCommands) {\\n\\t\\t\\tthis.keyCommands = {};\\n\\n\\t\\t\\tmap = {\\n\\t\\t\\t\\t13: 'enter',\\n\\t\\t\\t\\t16: 'shift',\\n\\t\\t\\t\\t17: 'ctrl',\\n\\t\\t\\t\\t18: 'alt',\\n\\t\\t\\t\\t27: 'esc',\\n\\t\\t\\t\\t37: 'left',\\n\\t\\t\\t\\t38: 'up',\\n\\t\\t\\t\\t39: 'right',\\n\\t\\t\\t\\t40: 'down',\\n\\t\\t\\t\\t91: 'meta',\\n\\t\\t\\t\\tenter: 13,\\n\\t\\t\\t\\tshift: 16,\\n\\t\\t\\t\\tctrl: 17,\\n\\t\\t\\t\\talt: 18,\\n\\t\\t\\t\\tesc: 27,\\n\\t\\t\\t\\tleft: 37,\\n\\t\\t\\t\\tup: 38,\\n\\t\\t\\t\\tright: 39,\\n\\t\\t\\t\\tdown: 40,\\n\\t\\t\\t\\tmeta: 91\\n\\t\\t\\t};\\n\\n\\t\\t\\tmodifiers = [16, 17, 18, 91];\\n\\t\\t\\tsequence = [];\\n\\t\\t\\tchords = [];\\n\\n\\t\\t\\tthis.on('keydown', function (_event) {\\n\\t\\t\\t\\tvar modifier, key, eventMods, currentMods, command, handler;\\n\\n\\t\\t\\t\\tmodifier = !! ~modifiers.indexOf(_event.keyCode) && map[_event.keyCode];\\n\\t\\t\\t\\tkey = modifier ? modifier : map[_event.keyCode] || String.fromCharCode(_event.keyCode);\\n\\t\\t\\t\\teventMods = [_event.shiftKey, _event.ctrlKey, _event.altKey, _event.metaKey];\\n\\t\\t\\t\\tcurrentMods = [];\\n\\n\\t\\t\\t\\t// Collect the modifiers the event says are still down.\\n\\t\\t\\t\\teventMods.forEach(function (_modifierDown, _index) {\\n\\t\\t\\t\\t\\t// use the modifier name\\n\\t\\t\\t\\t\\tif (_modifierDown) currentMods.push(map[modifiers[_index]]);\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\t// Don't add keys we already have during rapid-fire events\\n\\t\\t\\t\\tif (~chords.indexOf(key) || ~sequence.indexOf(key)) return;\\n\\n\\t\\t\\t\\t// Construct the command\\n\\t\\t\\t\\tcommand = chords.length ? (chords.push(key), chords.join(',')) : (sequence.push(key), sequence.join('+'));\\n\\n\\t\\t\\t\\thandler = this.keyCommands[command];\\n\\n\\t\\t\\t\\tif (handler) {\\n\\t\\t\\t\\t\\thandler.call(this, _event, command);\\n\\t\\t\\t\\t\\t// Keep current modifiers.\\n\\t\\t\\t\\t\\tsequence = currentMods.map(function (_key, _index) {\\n\\t\\t\\t\\t\\t\\tvar key = sequence[_index];\\n\\t\\t\\t\\t\\t\\treturn currentMods[currentMods.indexOf(key)];\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\tchords = [];\\n\\n\\t\\t\\t\\t\\t// Override original key command (i.e. meta+Q).\\n\\t\\t\\t\\t\\t_event.preventDefault();\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\n\\t\\t\\tthis.on('keyup', function (_event) {\\n\\t\\t\\t\\tvar key, index, modifier, eventMods, currentMods;\\n\\n\\t\\t\\t\\tkey = modifier ? modifier : map[_event.keyCode] || String.fromCharCode(_event.keyCode);\\n\\t\\t\\t\\tindex = sequence.indexOf(key);\\n\\t\\t\\t\\tmodifier = !! ~modifiers.indexOf(_event.keyCode) && map[_event.keyCode];\\n\\t\\t\\t\\t// Follows the same index order as \\\"modifiers\\\" [16, 17, 18, 91]\\n\\t\\t\\t\\teventMods = [_event.shiftKey, _event.ctrlKey, _event.altKey, _event.metaKey];\\n\\t\\t\\t\\tcurrentMods = [];\\n\\n\\t\\t\\t\\t// Collect the modifiers the event says are still down.\\n\\t\\t\\t\\teventMods.forEach(function (_modifierDown, _index) {\\n\\t\\t\\t\\t\\t// use the modifier name\\n\\t\\t\\t\\t\\tif (_modifierDown) currentMods.push(map[modifiers[_index]]);\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\t// If the key released is a modifier...\\n\\t\\t\\t\\tif (key === modifier) {\\n\\t\\t\\t\\t\\t// ...keep current modifiers...\\n\\t\\t\\t\\t\\tsequence = currentMods.map(function (_key, _index) {\\n\\t\\t\\t\\t\\t\\tvar key = sequence[_index];\\n\\t\\t\\t\\t\\t\\treturn currentMods[currentMods.indexOf(key)];\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t// ...clear registered chords.\\n\\t\\t\\t\\t\\tchords = [];\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// If we had pressed more than one key...\\n\\t\\t\\t\\t\\tif (sequence.length > 1) {\\n\\t\\t\\t\\t\\t\\t// Check if the first is a modifier then switch to chord capturing\\n\\t\\t\\t\\t\\t\\tif (~modifiers.indexOf(map[sequence[0]])) {\\n\\t\\t\\t\\t\\t\\t\\tchords.push(sequence.join('+'));\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tif (~index) sequence.splice(index, 1);\\n\\t\\t\\t\\t\\tif (!sequence.length) chords = [];\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tthis.keyCommands[_commands] = _handler;\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.screen = function (_id, _implementation) {\\n\\t\\tvar prototype, selector, screenSelector, instance;\\n\\n\\t\\tif (arguments.length === 1 && typeof _id === 'function') {\\n\\t\\t\\tscreenPrototype = _typesScreen2['default'].extend(_id);\\n\\t\\t\\treturn this;\\n\\t\\t}\\n\\n\\t\\tif (!this.hasOwnProperty('screens')) this.screens = _typesCollection2['default'].create();\\n\\n\\t\\tif (this.hasOwnProperty('$els')) {\\n\\t\\t\\tdebugger;\\n\\t\\t\\tscreenSelector = pl.game.config('screenSelector');\\n\\t\\t\\tprototype = screenPrototype.isPrototypeOf(this) ? this : screenPrototype;\\n\\t\\t\\tselector = typeof _id === 'number' ? screenSelector + ':nth-child(' + (_id + 1) + ')' : '#' + _id;\\n\\t\\t\\tinstance = prototype.extend(_implementation).initialize(this.find(selector));\\n\\n\\t\\t\\tinstance.screen = instance;\\n\\t\\t\\tif (!instance.game) {\\n\\t\\t\\t\\tinstance.game = instance.closest('.pl-game').scope();\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tthis.screens.push({\\n\\t\\t\\t\\tindex: typeof _id === 'number' ? _id : null,\\n\\t\\t\\t\\tname: typeof _id === 'string' ? _id : null,\\n\\t\\t\\t\\timplementation: _implementation\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.captureScreens = function () {\\n\\t\\tvar screenSelector, prototype, collection;\\n\\n\\t\\tscreenSelector = pl.game.config('screenSelector');\\n\\t\\tprototype = screenPrototype.isPrototypeOf(this) ? this : screenPrototype;\\n\\t\\tcollection = [];\\n\\n\\t\\tthis.findOwn(screenSelector).each(this.bind(function (_index, _node) {\\n\\t\\t\\tvar $node, screen, record, key, id, index, component;\\n\\n\\t\\t\\t$node = $(_node);\\n\\t\\t\\tid = $node.id();\\n\\t\\t\\tkey = id ? 'name' : (id = _index, 'index');\\n\\t\\t\\trecord = this.screens && this.screens.get(id, key);\\n\\t\\t\\tcomponent = $node.attr('pl-component');\\n\\t\\t\\tscreen = _typesScope.createEntity.call(prototype, $node, record && record.implementation);\\n\\t\\t\\tscreen.screen = screen;\\n\\t\\t\\tscreen.game = this;\\n\\n\\t\\t\\tif ($node.attr('pl-skip') == null) collection.push(screen);\\n\\n\\t\\t\\tif (key === 'name' || component) {\\n\\t\\t\\t\\t_util2['default'].assignRef(this, _util2['default'].transformId(key === 'name' && id || component, true), screen);\\n\\t\\t\\t}\\n\\t\\t}));\\n\\n\\t\\tif (collection.length) this.screens = collection;\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tthis.watchAudio = function () {\\n\\t\\tthis.media = _typesAudioManager.MediaManager.create(this.id());\\n\\n\\t\\t/**\\n   * Prevent duplicate playback of voiceOvers and backgrounds.\\n   */\\n\\t\\tthis.media.rule('.background, .voiceOver', 'shouldPlay', function (_event) {\\n\\t\\t\\tvar playing = this.playing() || [];\\n\\t\\t\\t// shouldPlay = false if _event.target is already playing.\\n\\t\\t\\t_event.response(!playing || !playing.length || ! ~playing.indexOf(_event.target) && !playing.has(_event.target.fileName));\\n\\t\\t});\\n\\n\\t\\t/**\\n   * \\n   */\\n\\t\\tthis.media.rule('.voiceOver', function (_event) {\\n\\t\\t\\tvar audio, playing;\\n\\n\\t\\t\\taudio = _event.target;\\n\\t\\t\\tplaying = audio && this.playing('.audio:not(#' + audio.id() + ')');\\n\\n\\t\\t\\tswitch (_event.type) {\\n\\t\\t\\t\\tcase 'play':\\n\\t\\t\\t\\t\\tif (playing) {\\n\\t\\t\\t\\t\\t\\tplaying.filter('.voiceOver').stop('@ALL');\\n\\t\\t\\t\\t\\t\\tplaying.filter('.background').volume(_playGame2['default'].config('bgVolume.drop') || 0.2);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tcase 'pause':\\n\\t\\t\\t\\tcase 'stopped':\\n\\t\\t\\t\\tcase 'ended':\\n\\t\\t\\t\\t\\tif (playing) playing.filter('.background').volume(_playGame2['default'].config('bgVolume.max') || 1);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tthis.media.rule('.background', 'play', function (_event) {\\n\\t\\t\\tvar playing = this.playing('.background:not(#' + _event.target.id() + ')');\\n\\t\\t\\tif (playing) playing.stop('@ALL');\\n\\t\\t});\\n\\n\\t\\tif (~pl.EVENT.ACTION.indexOf('touch')) {\\n\\t\\t\\tthis.on(pl.EVENT.ACTION, function beginAudio(_event) {\\n\\t\\t\\t\\tvar ctx, screen;\\n\\n\\t\\t\\t\\tctx = _playGame2['default'].getAudioContext();\\n\\t\\t\\t\\tscreen = this.currentScreen();\\n\\n\\t\\t\\t\\tif (screen && ctx && ctx.state === 'suspended') {\\n\\t\\t\\t\\t\\t_playGame2['default'].enableAudioContext();\\n\\t\\t\\t\\t\\tthis.log('awesome!');\\n\\t\\t\\t\\t\\tscreen.startAudio();\\n\\t\\t\\t\\t\\tthis.off(pl.EVENT.ACTION, beginAudio);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tcollectVideos.call(this);\\n\\t};\\n\\n\\tthis.progress = function () {\\n\\t\\treturn {\\n\\t\\t\\tcurrentScreen: this.currentScreen().index()\\n\\t\\t};\\n\\t};\\n\\n\\tthis.currentScreen = function () {\\n\\t\\treturn this.findOwn(pl.game.config('screenSelector') + '.OPEN').not('#quit').scope();\\n\\t};\\n\\n\\tthis.flip = function () {\\n\\t\\tconsole.log('THATS A FLIP!');\\n\\t\\t_playGame2['default'].report.flip(this);\\n\\t};\\n\\n\\tthis.exit = function () {\\n\\t\\tconsole.log('GOODBYE!');\\n\\t\\t_playGame2['default'].report.exit(this);\\n\\t};\\n\\n\\t/**\\n  * Demo mode key command\\n  */\\n\\tthis.onKeys('ctrl+D,M', function () {\\n\\t\\tdemoMode.call(this);\\n\\t});\\n\\n\\t/**\\n  * Keyboard screen navigation\\n  */\\n\\tthis.onKeys('left', function () {\\n\\t\\tvar current;\\n\\n\\t\\tcurrent = this.currentScreen();\\n\\n\\t\\tif (current) current.prev();\\n\\t});\\n\\n\\tthis.onKeys('right', function () {\\n\\t\\tvar current;\\n\\n\\t\\tcurrent = this.currentScreen();\\n\\n\\t\\tif (current) current.next();\\n\\t});\\n});\\n\\nexports['default'] = Game;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,\");\n\n/***/ },\n/* 115 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"var _interopRequireDefault = __webpack_require__(2)['default'];\\n\\nexports.__esModule = true;\\n/**\\n * API for communicaion between a game and the platform.\\n *\\n * @module\\n */\\n\\nvar _util = __webpack_require__(50);\\n\\nvar _util2 = _interopRequireDefault(_util);\\n\\nvar platform = new function () {\\n\\n\\tfunction createEvent(_name, _props) {\\n\\t\\tvar eventObject;\\n\\n\\t\\teventObject = _util2['default'].mixin(new Event('game-event', { bubbles: true, cancelable: false }), {\\n\\t\\t\\tname: _name,\\n\\t\\t\\trespond: function respond(_data) {\\n\\t\\t\\t\\tvar platformEvent;\\n\\n\\t\\t\\t\\tplatformEvent = $.Event('platform-event', {\\n\\t\\t\\t\\t\\tname: _name,\\n\\t\\t\\t\\t\\tgameData: _data\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\tpl.game.trigger(platformEvent);\\n\\t\\t\\t}\\n\\t\\t}, _props);\\n\\n\\t\\treturn eventObject;\\n\\t}\\n\\n\\tthis.EVENT_INIT = 'init';\\n\\tthis.EVENT_SAVE = 'save';\\n\\tthis.EVENT_EXIT = 'exit';\\n\\tthis.EVENT_FLIPPED = 'flipped';\\n\\n\\tthis.emit = function (_name) {\\n\\t\\tif (window.frameElement) window.frameElement.dispatchEvent(createEvent(_name));\\n\\t};\\n\\n\\tthis.saveGameState = function (_data) {\\n\\t\\tif (window.frameElement) window.frameElement.dispatchEvent(createEvent(this.EVENT_SAVE, { gameData: _data }));\\n\\t};\\n\\n\\twindow.addEventListener('platform-event', function (_event) {\\n\\t\\tvar platformEvent;\\n\\n\\t\\tplatformEvent = $.Event('platform-event', {\\n\\t\\t\\tname: _event.name\\n\\t\\t});\\n\\n\\t\\tpl.game.trigger(platformEvent);\\n\\t});\\n}();\\n\\nexports['default'] = platform;\\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvcGxhdGZvcm0uanM/NWQxOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Z0NBS2lCLEVBQU07Ozs7QUFFdkIsSUFBSSxRQUFRLEdBQUcsSUFBSyxZQUFZOztBQUUvQixVQUFTLFdBQVcsQ0FBRSxLQUFLLEVBQUUsTUFBTSxFQUFFO0FBQ3BDLE1BQUksV0FBVyxDQUFDOztBQUVoQixhQUFXLEdBQUcsa0JBQUssS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLFlBQVksRUFBRSxFQUFDLE9BQU8sRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUU7QUFDbkYsT0FBSSxFQUFFLEtBQUs7QUFDWCxVQUFPLEVBQUUsaUJBQVUsS0FBSyxFQUFFO0FBQ3pCLFFBQUksYUFBYSxDQUFDOztBQUVsQixpQkFBYSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUU7QUFDekMsU0FBSSxFQUFFLEtBQUs7QUFDWCxhQUFRLEVBQUUsS0FBSztLQUNmLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMvQjtHQUNELEVBQUUsTUFBTSxDQUFDLENBQUM7O0FBRVgsU0FBTyxXQUFXLENBQUM7RUFDbkI7O0FBRUQsS0FBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7QUFDekIsS0FBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7QUFDekIsS0FBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7QUFDekIsS0FBSSxDQUFDLGFBQWEsR0FBRyxTQUFTLENBQUM7O0FBRS9CLEtBQUksQ0FBQyxJQUFJLEdBQUcsVUFBVSxLQUFLLEVBQUU7QUFDNUIsTUFBSSxNQUFNLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQy9FLENBQUM7O0FBRUYsS0FBSSxDQUFDLGFBQWEsR0FBRyxVQUFVLEtBQUssRUFBRTtBQUNyQyxNQUFJLE1BQU0sQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQzlHLENBQUM7O0FBRUYsT0FBTSxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixFQUFFLFVBQVUsTUFBTSxFQUFFO0FBQzNELE1BQUksYUFBYSxDQUFDOztBQUVsQixlQUFhLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRTtBQUN6QyxPQUFJLEVBQUUsTUFBTSxDQUFDLElBQUk7R0FDakIsQ0FBQyxDQUFDOztBQUVILElBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0VBQy9CLENBQUMsQ0FBQztDQUVILEVBQUMsQ0FBQzs7cUJBRVksUUFBUSIsImZpbGUiOiIxMTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFQSSBmb3IgY29tbXVuaWNhaW9uIGJldHdlZW4gYSBnYW1lIGFuZCB0aGUgcGxhdGZvcm0uXG4gKlxuICogQG1vZHVsZVxuICovXG5pbXBvcnQgdXRpbCBmcm9tICd1dGlsJztcblxudmFyIHBsYXRmb3JtID0gbmV3IChmdW5jdGlvbiAoKSB7XG5cblx0ZnVuY3Rpb24gY3JlYXRlRXZlbnQgKF9uYW1lLCBfcHJvcHMpIHtcblx0XHR2YXIgZXZlbnRPYmplY3Q7XG5cblx0XHRldmVudE9iamVjdCA9IHV0aWwubWl4aW4obmV3IEV2ZW50KCdnYW1lLWV2ZW50Jywge2J1YmJsZXM6dHJ1ZSwgY2FuY2VsYWJsZTpmYWxzZX0pLCB7XG5cdFx0XHRuYW1lOiBfbmFtZSxcblx0XHRcdHJlc3BvbmQ6IGZ1bmN0aW9uIChfZGF0YSkge1xuXHRcdFx0XHR2YXIgcGxhdGZvcm1FdmVudDtcblxuXHRcdFx0XHRwbGF0Zm9ybUV2ZW50ID0gJC5FdmVudCgncGxhdGZvcm0tZXZlbnQnLCB7XG5cdFx0XHRcdFx0bmFtZTogX25hbWUsXG5cdFx0XHRcdFx0Z2FtZURhdGE6IF9kYXRhXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRcblx0XHRcdFx0cGwuZ2FtZS50cmlnZ2VyKHBsYXRmb3JtRXZlbnQpO1xuXHRcdFx0fVxuXHRcdH0sIF9wcm9wcyk7XG5cblx0XHRyZXR1cm4gZXZlbnRPYmplY3Q7XG5cdH1cblxuXHR0aGlzLkVWRU5UX0lOSVQgPSAnaW5pdCc7XG5cdHRoaXMuRVZFTlRfU0FWRSA9ICdzYXZlJztcblx0dGhpcy5FVkVOVF9FWElUID0gJ2V4aXQnO1xuXHR0aGlzLkVWRU5UX0ZMSVBQRUQgPSAnZmxpcHBlZCc7XG5cblx0dGhpcy5lbWl0ID0gZnVuY3Rpb24gKF9uYW1lKSB7XG5cdFx0aWYgKHdpbmRvdy5mcmFtZUVsZW1lbnQpIHdpbmRvdy5mcmFtZUVsZW1lbnQuZGlzcGF0Y2hFdmVudChjcmVhdGVFdmVudChfbmFtZSkpO1xuXHR9O1xuXG5cdHRoaXMuc2F2ZUdhbWVTdGF0ZSA9IGZ1bmN0aW9uIChfZGF0YSkge1xuXHRcdGlmICh3aW5kb3cuZnJhbWVFbGVtZW50KSB3aW5kb3cuZnJhbWVFbGVtZW50LmRpc3BhdGNoRXZlbnQoY3JlYXRlRXZlbnQodGhpcy5FVkVOVF9TQVZFLCB7IGdhbWVEYXRhOiBfZGF0YSB9KSk7XG5cdH07XG5cblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXRmb3JtLWV2ZW50JywgZnVuY3Rpb24gKF9ldmVudCkge1xuXHRcdHZhciBwbGF0Zm9ybUV2ZW50O1xuXG5cdFx0cGxhdGZvcm1FdmVudCA9ICQuRXZlbnQoJ3BsYXRmb3JtLWV2ZW50Jywge1xuXHRcdFx0bmFtZTogX2V2ZW50Lm5hbWVcblx0XHR9KTtcblx0XHRcblx0XHRwbC5nYW1lLnRyaWdnZXIocGxhdGZvcm1FdmVudCk7XG5cdH0pO1xuXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcGxhdGZvcm07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NvdXJjZS9wbGF0Zm9ybS5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ }\n/******/ ]);//@ sourceMappingURL=data:application/json;base64,");

/***/ },
/* 3 */
/***/ function(module, exports) {

	eval("if (window.parent === window) {\n\twindow.location.href = 'https://www.changemyworldnow.com/';\n} else {\n\tdocument.domain = 'changemyworldnow.com';\n}//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90d2lybC1uLXN3aXJsL3NvdXJjZS9qcy90ZXN0UGxhdGZvcm1JbnRlZ3JhdGlvbi5qcz8zYjI4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxNQUFNLEVBQUU7QUFDN0IsT0FBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsbUNBQW1DLENBQUM7Q0FDM0QsTUFBTTtBQUNOLFNBQVEsQ0FBQyxNQUFNLEdBQUcsc0JBQXNCLENBQUMiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImlmICh3aW5kb3cucGFyZW50ID09PSB3aW5kb3cpIHtcblx0d2luZG93LmxvY2F0aW9uLmhyZWYgPSAnaHR0cHM6Ly93d3cuY2hhbmdlbXl3b3JsZG5vdy5jb20vJztcbn0gZWxzZSB7XG5cdGRvY3VtZW50LmRvbWFpbiA9ICdjaGFuZ2VteXdvcmxkbm93LmNvbSc7XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3R3aXJsLW4tc3dpcmwvc291cmNlL2pzL3Rlc3RQbGF0Zm9ybUludGVncmF0aW9uLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 4 */
/***/ function(module, exports) {

	eval("pl.game.config({\n\tscreenSelector: 'section',\n\tcomponentDirectory: 'components/',\n\n\tdimensions: {\n\t\twidth: 960,\n\t\tratio: 16 / 9\n\t},\n\n\tbgVolume: {\n\t\tdrop: 0.2,\n\t\tmax: 1\n\t},\n\n\tshouldLoadComponentStyles: false\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90d2lybC1uLXN3aXJsL3NvdXJjZS9qcy9jb25maWcuZ2FtZS5qcz82NTU1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ2QsZUFBYyxFQUFFLFNBQVM7QUFDekIsbUJBQWtCLEVBQUUsYUFBYTs7QUFFakMsV0FBVSxFQUFFO0FBQ1gsT0FBSyxFQUFFLEdBQUc7QUFDVixPQUFLLEVBQUUsRUFBRSxHQUFDLENBQUM7RUFDWDs7QUFFRCxTQUFRLEVBQUU7QUFDVCxNQUFJLEVBQUUsR0FBRztBQUNULEtBQUcsRUFBRSxDQUFDO0VBQ047O0FBRUQsMEJBQXlCLEVBQUUsS0FBSztDQUNoQyxDQUFDIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJwbC5nYW1lLmNvbmZpZyh7XG5cdHNjcmVlblNlbGVjdG9yOiAnc2VjdGlvbicsXG5cdGNvbXBvbmVudERpcmVjdG9yeTogJ2NvbXBvbmVudHMvJyxcblx0XG5cdGRpbWVuc2lvbnM6IHtcblx0XHR3aWR0aDogOTYwLFxuXHRcdHJhdGlvOiAxNi85XG5cdH0sXG5cdFxuXHRiZ1ZvbHVtZToge1xuXHRcdGRyb3A6IDAuMixcblx0XHRtYXg6IDFcblx0fSxcblxuXHRzaG91bGRMb2FkQ29tcG9uZW50U3R5bGVzOiBmYWxzZVxufSk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3R3aXJsLW4tc3dpcmwvc291cmNlL2pzL2NvbmZpZy5nYW1lLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 5 */
/***/ function(module, exports) {

	eval("Object.defineProperty(exports, '__esModule', {\n\tvalue: true\n});\nexports['default'] = infoQuestion;\n\nfunction infoQuestion() {\n\t/**\n  * Plays the flush sound with a delay.\n  * I may want move this to the screen component.\n  * @todo Create a mechanism to attach sounds to actions.\n  */\n\tthis.next = function () {\n\t\tvar nextScreen, so;\n\n\t\tif (!this.completed()) return;\n\n\t\tnextScreen = this.sup();\n\t\tso = pl.util.resolvePath(this, 'game.audio.sfx.flush');\n\n\t\tif (so) so.play();\n\n\t\tthis.delay('2s', function () {\n\t\t\tthis.leave();\n\t\t\tnextScreen.open();\n\t\t});\n\n\t\treturn nextScreen;\n\t};\n}\n\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90d2lybC1uLXN3aXJsL3NvdXJjZS9qcy9zY3JlZW5zL2luZm8tcXVlc3Rpb24uanM/ODJjZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7cUJBQXdCLFlBQVk7O0FBQXJCLFNBQVMsWUFBWSxHQUFJOzs7Ozs7QUFNdkMsS0FBSSxDQUFDLElBQUksR0FBRyxZQUFZO0FBQ3ZCLE1BQUksVUFBVSxFQUFFLEVBQUUsQ0FBQzs7QUFFbkIsTUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRSxPQUFPOztBQUU5QixZQUFVLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ3hCLElBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsc0JBQXNCLENBQUMsQ0FBQzs7QUFFdkQsTUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDOztBQUVsQixNQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxZQUFZO0FBQzVCLE9BQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNiLGFBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztHQUNsQixDQUFDLENBQUM7O0FBRUgsU0FBTyxVQUFVLENBQUM7RUFDbEIsQ0FBQztDQUVGIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbmZvUXVlc3Rpb24gKCkge1xuXHQvKipcblx0ICogUGxheXMgdGhlIGZsdXNoIHNvdW5kIHdpdGggYSBkZWxheS5cblx0ICogSSBtYXkgd2FudCBtb3ZlIHRoaXMgdG8gdGhlIHNjcmVlbiBjb21wb25lbnQuXG5cdCAqIEB0b2RvIENyZWF0ZSBhIG1lY2hhbmlzbSB0byBhdHRhY2ggc291bmRzIHRvIGFjdGlvbnMuXG5cdCAqL1xuXHR0aGlzLm5leHQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIG5leHRTY3JlZW4sIHNvO1xuXG5cdFx0aWYgKCF0aGlzLmNvbXBsZXRlZCgpKSByZXR1cm47XG5cblx0XHRuZXh0U2NyZWVuID0gdGhpcy5zdXAoKTtcblx0XHRzbyA9IHBsLnV0aWwucmVzb2x2ZVBhdGgodGhpcywgJ2dhbWUuYXVkaW8uc2Z4LmZsdXNoJyk7XG5cblx0XHRpZiAoc28pIHNvLnBsYXkoKTtcblxuXHRcdHRoaXMuZGVsYXkoJzJzJywgZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhpcy5sZWF2ZSgpO1xuXHRcdFx0bmV4dFNjcmVlbi5vcGVuKCk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gbmV4dFNjcmVlbjtcblx0fTtcblxufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi90d2lybC1uLXN3aXJsL3NvdXJjZS9qcy9zY3JlZW5zL2luZm8tcXVlc3Rpb24uanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 6 */
/***/ function(module, exports) {

	eval("Object.defineProperty(exports, '__esModule', {\n\tvalue: true\n});\nexports['default'] = flushIt;\n/**\n * Twirl n Swirl - Toilet Flush Game\n */\n\nfunction flushIt() {\n\t/**\n  * Adds behavior to the bins with draggable items.\n  * We add a native event listener so we can handle\n  * events on the capture phase and prevent the DnD\n  * behavior never fires.\n  */\n\tthis.entity('.draggables', function () {\n\t\tthis.listen('mousedown', true, function (_event) {\n\t\t\tvar $target = $(_event.target);\n\n\t\t\tif (this.state(this.STATE.DISABLED) || $target.is('[pl-draggable]') && $target.state(this.STATE.DISABLED)) {\n\t\t\t\t_event.stopPropagation();\n\t\t\t}\n\t\t});\n\t});\n\n\t/**\n  * Adds behavior to the reveal modal.\n  * @todo Create a modal component which handles its layering.\n  */\n\tthis.entity('modal-reveal', function () {\n\t\t/**\n   * Expose reveal component method\n   */\n\t\tthis.item = function (_id) {\n\t\t\tthis.removeClass('LAYER').open();\n\t\t\tthis.reveal.item(_id);\n\t\t};\n\t\t/**\n   * Close the modal and play the standard button sound.\n   * @override\n   */\n\t\tthis.close = function () {\n\t\t\tvar so = pl.util.resolvePath(this, 'game.audio.sfx.button');\n\n\t\t\tif (this.screen.state(this.STATE.VOICE_OVER) && !this.screen.completed()) return;\n\t\t\tif (so) so.play();\n\n\t\t\tthis.screen.enable('.draggables');\n\n\t\t\treturn this.sup();\n\t\t};\n\t\t/**\n   * Watches for completion of state change tranisions and puts the view in a LAYER state.\n   * We want to re-layer the view after it finishes transitioning out.\n   * @see ~/source/css/flush-it.scss:134\n   */\n\t\tthis.on('transitionend', function (_event) {\n\t\t\tif (!this.is(_event.target)) return;\n\t\t\tif (!this.state(this.STATE.OPEN)) {\n\t\t\t\tthis.addClass('LAYER').removeClass('PROGRESS');\n\t\t\t} else {\n\t\t\t\tthis.addClass('PROGRESS');\n\t\t\t}\n\t\t});\n\t});\n\t/**\n  * Adds an ability for the screen to respond to items droped in the\n  * toilet bowl. Its responsibility is to show the reveal via the\n  * dropped item's ID and disable draggable bins.\n  */\n\tthis.respond('drop', function (_event) {\n\t\tvar id = _event.behaviorTarget.id();\n\n\t\tthis.toilet.reveal.item(id);\n\t\tthis.disable('.draggables');\n\t});\n\t/**\n  * Show the instructional modal when the screen starts.\n  */\n\tthis.start = function () {\n\t\tthis.modalReveal.item(0);\n\t};\n\t/**\n  * The flush button action.\n  * Here we animate the dropped item flushing and display the modal\n  * by the item's ID.\n  */\n\tthis.flush = function () {\n\t\tvar current = this.reveal.currentItem();\n\n\t\tthis.game.audio.sfx.flush.play();\n\n\t\tif (!current) return;\n\n\t\tcurrent.addClass('FLUSH');\n\t\tthis.disable($('.draggables [pl-id=' + current.id() + ']'));\n\n\t\tthis.delay('2s', function () {\n\t\t\tthis.modalReveal.item(current.id());\n\t\t});\n\t};\n}\n\nmodule.exports = exports['default'];//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90d2lybC1uLXN3aXJsL3NvdXJjZS9qcy9zY3JlZW5zL2ZsdXNoLWl0LmpzPzJjYzciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O3FCQUd3QixPQUFPOzs7OztBQUFoQixTQUFTLE9BQU8sR0FBSTs7Ozs7OztBQU9sQyxLQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxZQUFZO0FBQ3RDLE1BQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLElBQUksRUFBRSxVQUFVLE1BQU0sRUFBRTtBQUNoRCxPQUFJLE9BQU8sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQUUvQixPQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxPQUFPLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFO0FBQzFHLFVBQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QjtHQUNELENBQUMsQ0FBQztFQUNILENBQUMsQ0FBQzs7Ozs7O0FBTUgsS0FBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsWUFBWTs7OztBQUl2QyxNQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsR0FBRyxFQUFFO0FBQzFCLE9BQUksQ0FDRixXQUFXLENBQUMsT0FBTyxDQUFDLENBQ3BCLElBQUksRUFBRSxDQUFDO0FBQ1QsT0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDdEIsQ0FBQzs7Ozs7QUFLRixNQUFJLENBQUMsS0FBSyxHQUFHLFlBQVk7QUFDeEIsT0FBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLHVCQUF1QixDQUFDLENBQUM7O0FBRTVELE9BQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUUsT0FBTztBQUNqRixPQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7O0FBRWxCLE9BQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDOztBQUVsQyxVQUFPLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztHQUNsQixDQUFDOzs7Ozs7QUFNRixNQUFJLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxVQUFVLE1BQU0sRUFBRTtBQUMxQyxPQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsT0FBTztBQUNwQyxPQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQ2pDLFFBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQy9DLE1BQU07QUFDTixRQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzFCO0dBQ0QsQ0FBQyxDQUFDO0VBRUgsQ0FBQyxDQUFDOzs7Ozs7QUFNSCxLQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxVQUFVLE1BQU0sRUFBRTtBQUN0QyxNQUFJLEVBQUUsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxDQUFDOztBQUVwQyxNQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDNUIsTUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztFQUM1QixDQUFDLENBQUM7Ozs7QUFJSCxLQUFJLENBQUMsS0FBSyxHQUFHLFlBQVk7QUFDeEIsTUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDekIsQ0FBQzs7Ozs7O0FBTUYsS0FBSSxDQUFDLEtBQUssR0FBRyxZQUFZO0FBQ3hCLE1BQUksT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7O0FBRXhDLE1BQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7O0FBRWpDLE1BQUksQ0FBQyxPQUFPLEVBQUUsT0FBTzs7QUFFckIsU0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMxQixNQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsR0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLEdBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzs7QUFFeEQsTUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsWUFBWTtBQUM1QixPQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztHQUNwQyxDQUFDLENBQUM7RUFDSCxDQUFDO0NBRUYiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVHdpcmwgbiBTd2lybCAtIFRvaWxldCBGbHVzaCBHYW1lXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZsdXNoSXQgKCkge1xuXHQvKipcblx0ICogQWRkcyBiZWhhdmlvciB0byB0aGUgYmlucyB3aXRoIGRyYWdnYWJsZSBpdGVtcy5cblx0ICogV2UgYWRkIGEgbmF0aXZlIGV2ZW50IGxpc3RlbmVyIHNvIHdlIGNhbiBoYW5kbGVcblx0ICogZXZlbnRzIG9uIHRoZSBjYXB0dXJlIHBoYXNlIGFuZCBwcmV2ZW50IHRoZSBEbkRcblx0ICogYmVoYXZpb3IgbmV2ZXIgZmlyZXMuXG5cdCAqL1xuXHR0aGlzLmVudGl0eSgnLmRyYWdnYWJsZXMnLCBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5saXN0ZW4oJ21vdXNlZG93bicsIHRydWUsIGZ1bmN0aW9uIChfZXZlbnQpIHtcblx0XHRcdHZhciAkdGFyZ2V0ID0gJChfZXZlbnQudGFyZ2V0KTtcblxuXHRcdFx0aWYgKHRoaXMuc3RhdGUodGhpcy5TVEFURS5ESVNBQkxFRCkgfHwgJHRhcmdldC5pcygnW3BsLWRyYWdnYWJsZV0nKSAmJiAkdGFyZ2V0LnN0YXRlKHRoaXMuU1RBVEUuRElTQUJMRUQpKSB7XG5cdFx0XHRcdF9ldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG5cblx0LyoqXG5cdCAqIEFkZHMgYmVoYXZpb3IgdG8gdGhlIHJldmVhbCBtb2RhbC5cblx0ICogQHRvZG8gQ3JlYXRlIGEgbW9kYWwgY29tcG9uZW50IHdoaWNoIGhhbmRsZXMgaXRzIGxheWVyaW5nLlxuXHQgKi9cblx0dGhpcy5lbnRpdHkoJ21vZGFsLXJldmVhbCcsIGZ1bmN0aW9uICgpIHtcblx0XHQvKipcblx0XHQgKiBFeHBvc2UgcmV2ZWFsIGNvbXBvbmVudCBtZXRob2Rcblx0XHQgKi9cblx0XHR0aGlzLml0ZW0gPSBmdW5jdGlvbiAoX2lkKSB7XG5cdFx0XHR0aGlzXG5cdFx0XHRcdC5yZW1vdmVDbGFzcygnTEFZRVInKVxuXHRcdFx0XHQub3BlbigpO1xuXHRcdFx0dGhpcy5yZXZlYWwuaXRlbShfaWQpO1xuXHRcdH07XG5cdFx0LyoqXG5cdFx0ICogQ2xvc2UgdGhlIG1vZGFsIGFuZCBwbGF5IHRoZSBzdGFuZGFyZCBidXR0b24gc291bmQuXG5cdFx0ICogQG92ZXJyaWRlXG5cdFx0ICovXG5cdFx0dGhpcy5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHZhciBzbyA9IHBsLnV0aWwucmVzb2x2ZVBhdGgodGhpcywgJ2dhbWUuYXVkaW8uc2Z4LmJ1dHRvbicpO1xuXG5cdFx0XHRpZiAodGhpcy5zY3JlZW4uc3RhdGUodGhpcy5TVEFURS5WT0lDRV9PVkVSKSAmJiAhdGhpcy5zY3JlZW4uY29tcGxldGVkKCkpIHJldHVybjtcblx0XHRcdGlmIChzbykgc28ucGxheSgpO1xuXG5cdFx0XHR0aGlzLnNjcmVlbi5lbmFibGUoJy5kcmFnZ2FibGVzJyk7XG5cdFx0XHRcblx0XHRcdHJldHVybiB0aGlzLnN1cCgpO1xuXHRcdH07XG5cdFx0LyoqXG5cdFx0ICogV2F0Y2hlcyBmb3IgY29tcGxldGlvbiBvZiBzdGF0ZSBjaGFuZ2UgdHJhbmlzaW9ucyBhbmQgcHV0cyB0aGUgdmlldyBpbiBhIExBWUVSIHN0YXRlLlxuXHRcdCAqIFdlIHdhbnQgdG8gcmUtbGF5ZXIgdGhlIHZpZXcgYWZ0ZXIgaXQgZmluaXNoZXMgdHJhbnNpdGlvbmluZyBvdXQuXG5cdFx0ICogQHNlZSB+L3NvdXJjZS9jc3MvZmx1c2gtaXQuc2NzczoxMzRcblx0XHQgKi9cblx0XHR0aGlzLm9uKCd0cmFuc2l0aW9uZW5kJywgZnVuY3Rpb24gKF9ldmVudCkge1xuXHRcdFx0aWYgKCF0aGlzLmlzKF9ldmVudC50YXJnZXQpKSByZXR1cm47XG5cdFx0XHRpZiAoIXRoaXMuc3RhdGUodGhpcy5TVEFURS5PUEVOKSkge1xuXHRcdFx0XHR0aGlzLmFkZENsYXNzKCdMQVlFUicpLnJlbW92ZUNsYXNzKCdQUk9HUkVTUycpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5hZGRDbGFzcygnUFJPR1JFU1MnKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHR9KTtcblx0LyoqXG5cdCAqIEFkZHMgYW4gYWJpbGl0eSBmb3IgdGhlIHNjcmVlbiB0byByZXNwb25kIHRvIGl0ZW1zIGRyb3BlZCBpbiB0aGVcblx0ICogdG9pbGV0IGJvd2wuIEl0cyByZXNwb25zaWJpbGl0eSBpcyB0byBzaG93IHRoZSByZXZlYWwgdmlhIHRoZVxuXHQgKiBkcm9wcGVkIGl0ZW0ncyBJRCBhbmQgZGlzYWJsZSBkcmFnZ2FibGUgYmlucy5cblx0ICovXG5cdHRoaXMucmVzcG9uZCgnZHJvcCcsIGZ1bmN0aW9uIChfZXZlbnQpIHtcblx0XHR2YXIgaWQgPSBfZXZlbnQuYmVoYXZpb3JUYXJnZXQuaWQoKTtcblxuXHRcdHRoaXMudG9pbGV0LnJldmVhbC5pdGVtKGlkKTtcblx0XHR0aGlzLmRpc2FibGUoJy5kcmFnZ2FibGVzJyk7XG5cdH0pO1xuXHQvKipcblx0ICogU2hvdyB0aGUgaW5zdHJ1Y3Rpb25hbCBtb2RhbCB3aGVuIHRoZSBzY3JlZW4gc3RhcnRzLlxuXHQgKi9cblx0dGhpcy5zdGFydCA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLm1vZGFsUmV2ZWFsLml0ZW0oMCk7XG5cdH07XG5cdC8qKlxuXHQgKiBUaGUgZmx1c2ggYnV0dG9uIGFjdGlvbi5cblx0ICogSGVyZSB3ZSBhbmltYXRlIHRoZSBkcm9wcGVkIGl0ZW0gZmx1c2hpbmcgYW5kIGRpc3BsYXkgdGhlIG1vZGFsXG5cdCAqIGJ5IHRoZSBpdGVtJ3MgSUQuXG5cdCAqL1xuXHR0aGlzLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuXHRcdHZhciBjdXJyZW50ID0gdGhpcy5yZXZlYWwuY3VycmVudEl0ZW0oKTtcblxuXHRcdHRoaXMuZ2FtZS5hdWRpby5zZnguZmx1c2gucGxheSgpO1xuXHRcdFxuXHRcdGlmICghY3VycmVudCkgcmV0dXJuO1xuXG5cdFx0Y3VycmVudC5hZGRDbGFzcygnRkxVU0gnKTtcblx0XHR0aGlzLmRpc2FibGUoJCgnLmRyYWdnYWJsZXMgW3BsLWlkPScrY3VycmVudC5pZCgpKyddJykpO1xuXG5cdFx0dGhpcy5kZWxheSgnMnMnLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aGlzLm1vZGFsUmV2ZWFsLml0ZW0oY3VycmVudC5pZCgpKTtcblx0XHR9KTtcblx0fTtcblxufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi90d2lybC1uLXN3aXJsL3NvdXJjZS9qcy9zY3JlZW5zL2ZsdXNoLWl0LmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 7 */
/***/ function(module, exports) {

	eval("pl.game.component('screen-basic', function () {\n\n\tfunction playButtonSFX(_direction) {\n\t\tvar so = _direction === \"next\" ? this.audio.sfx.nextScreen : this.game.audio.sfx.button;\n\t\tif (so) so.play();\n\t}\n\n\tthis.playSound = function (_sound) {\n\t\tvar delay, $sound;\n\n\t\t$sound = $(_sound);\n\t\tdelay = $sound.attr('pl-delay');\n\t\tif ($sound.hasClass('voice-over')) {\n\t\t\tthis.currentVO = _sound;\n\t\t}\n\n\t\tif (delay) {\n\t\t\treturn this.delay(delay, _sound.play.bind(_sound));\n\t\t} else {\n\t\t\treturn _sound.play();\n\t\t}\n\t};\n\n\tthis.on('ui-open', function (_event) {\n\t\tif (this.is(_event.target) && this.isReady) {\n\t\t\tthis.game.setWallpaper(this.properties.wallpaper);\n\t\t\tthis.start();\n\t\t\tif (this.completed() && !this.isComplete && !this.game.demoMode) this.complete();\n\t\t}\n\t});\n\n\tthis.on('ui-leave', function (_event) {\n\t\tif (this.is(_event.target)) this.stop();\n\t});\n\n\tthis.on('ui-close', function (_event) {\n\t\tif (this.is(_event.target)) this.stop();\n\t});\n\n\tthis.next = function () {\n\t\tvar nextScreen, isLastScreen;\n\n\t\tnextScreen = this.proto();\n\t\tisLastScreen = this.game.screens.length - 1 === this.index();\n\n\t\tif (nextScreen) {\n\t\t\tthis.screen.leave();\n\t\t\tnextScreen.open();\n\t\t\tplayButtonSFX.call(this, 'next');\n\t\t} else if (isLastScreen && this.completed()) {\n\t\t\tthis.game.quit.okay();\n\t\t}\n\n\t\treturn nextScreen;\n\t};\n\n\tthis.prev = function () {\n\t\tvar prevScreen;\n\n\t\tprevScreen = this.proto();\n\n\t\tif (prevScreen) {\n\t\t\tthis.screen.close();\n\t\t\tprevScreen.open();\n\t\t\tplayButtonSFX.call(this, 'prev');\n\t\t}\n\n\t\treturn prevScreen;\n\t};\n\n\tthis.start = function () {\n\t\tthis.proto();\n\n\t\t// Start all screen entities\n\t\tif (this.hasOwnProperty('entities')) this.entities.forEach(function (_entity) {\n\t\t\tif (typeof _entity.start === 'function' && _entity.hasOwnProperty('start')) _entity.start();\n\t\t});\n\n\t\treturn this;\n\t};\n\n\tthis.stop = function () {\n\t\tif (this.currentVO) {\n\t\t\tthis.currentVO.pause();\n\t\t\tthis.currentVO.currentTime = 0;\n\t\t}\n\n\t\treturn this;\n\t};\n\n\tthis.complete = function () {\n\t\tthis.game.audio.sfx.screenComplete.play();\n\t\treturn this.proto();\n\t};\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90d2lybC1uLXN3aXJsL3NvdXJjZS9qcy9jb21wb25lbnRzL3NjcmVlbi1iYXNpYy9iZWhhdmlvci5qcz83ZTM5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxZQUFZOztBQUU3QyxVQUFTLGFBQWEsQ0FBRSxVQUFVLEVBQUU7QUFDbkMsTUFBSSxFQUFFLEdBQUksVUFBVSxLQUFLLE1BQU0sR0FBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztBQUMxRixNQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7RUFDbEI7O0FBRUQsS0FBSSxDQUFDLFNBQVMsR0FBRyxVQUFTLE1BQU0sRUFBRTtBQUNqQyxNQUFJLEtBQUssRUFBRSxNQUFNLENBQUM7O0FBRWxCLFFBQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbkIsT0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDaEMsTUFBRyxNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFO0FBQ2pDLE9BQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDO0dBQ3hCOztBQUVELE1BQUksS0FBSyxFQUFFO0FBQ1YsVUFBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0dBQ25ELE1BQU07QUFDTixVQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztHQUNyQjtFQUNELENBQUM7O0FBRUYsS0FBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsVUFBVSxNQUFNLEVBQUU7QUFDcEMsTUFBSSxJQUFJLENBQUMsRUFBRSxDQUFD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L0I7O0FBRUQsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDOztBQUVGLEtBQUksQ0FBQyxRQUFRLEdBQUcsWUFBWTtBQUMzQixNQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzFDLFNBQU8sSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0VBQ3BCLENBQUM7Q0FFRixDQUFDIiwiZmlsZSI6IjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJwbC5nYW1lLmNvbXBvbmVudCgnc2NyZWVuLWJhc2ljJywgZnVuY3Rpb24gKCkge1xuXG5cdGZ1bmN0aW9uIHBsYXlCdXR0b25TRlggKF9kaXJlY3Rpb24pIHtcblx0XHR2YXIgc28gPSAoX2RpcmVjdGlvbiA9PT0gXCJuZXh0XCIpID8gdGhpcy5hdWRpby5zZngubmV4dFNjcmVlbiA6IHRoaXMuZ2FtZS5hdWRpby5zZnguYnV0dG9uO1xuXHRcdGlmIChzbykgc28ucGxheSgpO1xuXHR9XG5cblx0dGhpcy5wbGF5U291bmQgPSBmdW5jdGlvbihfc291bmQpIHtcblx0XHR2YXIgZGVsYXksICRzb3VuZDtcblxuXHRcdCRzb3VuZCA9ICQoX3NvdW5kKTtcblx0XHRkZWxheSA9ICRzb3VuZC5hdHRyKCdwbC1kZWxheScpO1xuXHRcdGlmKCRzb3VuZC5oYXNDbGFzcygndm9pY2Utb3ZlcicpKSB7XG5cdFx0XHR0aGlzLmN1cnJlbnRWTyA9IF9zb3VuZDtcblx0XHR9XG5cblx0XHRpZiAoZGVsYXkpIHtcblx0XHRcdHJldHVybiB0aGlzLmRlbGF5KGRlbGF5LCBfc291bmQucGxheS5iaW5kKF9zb3VuZCkpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gX3NvdW5kLnBsYXkoKTtcblx0XHR9XG5cdH07XG5cblx0dGhpcy5vbigndWktb3BlbicsIGZ1bmN0aW9uIChfZXZlbnQpIHtcblx0XHRpZiAodGhpcy5pcyhfZXZlbnQudGFyZ2V0KSAmJiB0aGlzLmlzUmVhZHkpIHtcblx0XHRcdHRoaXMuZ2FtZS5zZXRXYWxscGFwZXIodGhpcy5wcm9wZXJ0aWVzLndhbGxwYXBlcik7XG5cdFx0XHR0aGlzLnN0YXJ0KCk7XG5cdFx0XHRpZiAodGhpcy5jb21wbGV0ZWQoKSAmJiAhdGhpcy5pc0NvbXBsZXRlICYmICF0aGlzLmdhbWUuZGVtb01vZGUpIHRoaXMuY29tcGxldGUoKTtcblx0XHR9XG5cdH0pO1xuXG5cdHRoaXMub24oJ3VpLWxlYXZlJywgZnVuY3Rpb24gKF9ldmVudCkge1xuXHRcdGlmICh0aGlzLmlzKF9ldmVudC50YXJnZXQpKSB0aGlzLnN0b3AoKTtcblx0fSk7XG5cblx0dGhpcy5vbigndWktY2xvc2UnLCBmdW5jdGlvbiAoX2V2ZW50KSB7XG5cdFx0aWYgKHRoaXMuaXMoX2V2ZW50LnRhcmdldCkpIHRoaXMuc3RvcCgpO1xuXHR9KTtcblxuXHR0aGlzLm5leHQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIG5leHRTY3JlZW4sIGlzTGFzdFNjcmVlbjtcblxuXHRcdG5leHRTY3JlZW4gPSB0aGlzLnByb3RvKCk7XG5cdFx0aXNMYXN0U2NyZWVuID0gdGhpcy5nYW1lLnNjcmVlbnMubGVuZ3RoIC0gMSA9PT0gdGhpcy5pbmRleCgpO1xuXG5cdFx0aWYgKG5leHRTY3JlZW4pIHtcblx0XHRcdHRoaXMuc2NyZWVuLmxlYXZlKCk7XG5cdFx0XHRuZXh0U2NyZWVuLm9wZW4oKTtcblx0XHRcdHBsYXlCdXR0b25TRlguY2FsbCh0aGlzLCAnbmV4dCcpO1xuXHRcdH0gZWxzZSBpZiAoaXNMYXN0U2NyZWVuICYmIHRoaXMuY29tcGxldGVkKCkpIHtcblx0XHRcdHRoaXMuZ2FtZS5xdWl0Lm9rYXkoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbmV4dFNjcmVlbjtcblx0fTtcblxuXHR0aGlzLnByZXYgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHByZXZTY3JlZW47XG5cblx0XHRwcmV2U2NyZWVuID0gdGhpcy5wcm90bygpO1xuXG5cdFx0aWYgKHByZXZTY3JlZW4pIHtcblx0XHRcdHRoaXMuc2NyZWVuLmNsb3NlKCk7XG5cdFx0XHRwcmV2U2NyZWVuLm9wZW4oKTtcblx0XHRcdHBsYXlCdXR0b25TRlguY2FsbCh0aGlzLCAncHJldicpO1xuXHRcdH1cblxuXHRcdHJldHVybiBwcmV2U2NyZWVuO1xuXHR9O1xuXG5cdHRoaXMuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5wcm90bygpO1xuXG5cdFx0Ly8gU3RhcnQgYWxsIHNjcmVlbiBlbnRpdGllc1xuXHRcdGlmICh0aGlzLmhhc093blByb3BlcnR5KCdlbnRpdGllcycpKSB0aGlzLmVudGl0aWVzLmZvckVhY2goZnVuY3Rpb24gKF9lbnRpdHkpIHtcblx0XHRcdGlmICh0eXBlb2YgX2VudGl0eS5zdGFydCA9PT0gJ2Z1bmN0aW9uJyAmJiBfZW50aXR5Lmhhc093blByb3BlcnR5KCdzdGFydCcpKSBfZW50aXR5LnN0YXJ0KCk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHR0aGlzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRpZih0aGlzLmN1cnJlbnRWTykge1xuXHRcdFx0dGhpcy5jdXJyZW50Vk8ucGF1c2UoKTtcblx0XHRcdHRoaXMuY3VycmVudFZPLmN1cnJlbnRUaW1lID0gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblx0XG5cdHRoaXMuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5nYW1lLmF1ZGlvLnNmeC5zY3JlZW5Db21wbGV0ZS5wbGF5KCk7XG5cdFx0cmV0dXJuIHRoaXMucHJvdG8oKTtcblx0fTtcblxufSk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3R3aXJsLW4tc3dpcmwvc291cmNlL2pzL2NvbXBvbmVudHMvc2NyZWVuLWJhc2ljL2JlaGF2aW9yLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 8 */
/***/ function(module, exports) {

	eval("pl.game.component('screen-title', function () {\n\n\tthis.on('ready', function () {\n\t\tthis.delay(0, this.open);\n\t\tthis.close(this.game.loader);\n\t});\n\n\t/**\n  * Start the title screen logo animation when the screen opens.\n  */\n\tthis.on('ui-open', function () {\n\t\tvar delay = this.properties.delay;\n\n\t\tif (delay) {\n\t\t\tthis.delay(this.properties.delay, this.animateSplashImage);\n\t\t} else {\n\t\t\tthis.animateSplashImage();\n\t\t}\n\n\t\tthis.start();\n\t\tthis.game.setWallpaper(this.properties.wallpaper);\n\n\t\treturn this;\n\t});\n\n\tthis.on('ui-close', function (_event) {\n\t\tif (!this.is(_event.target)) return;\n\t\tthis.on('transitionend', function (_event) {\n\t\t\tif (!this.is(_event.target)) return;\n\t\t\tthis.logo.removeClass(this.properties.animOut).off('animationend');\n\t\t\tthis.off('transitionend');\n\t\t});\n\t});\n\n\tthis.next = function () {\n\t\tvar nextScreen, so, animate;\n\n\t\tfunction leave() {\n\t\t\tthis.screen.leave();\n\t\t\tnextScreen.open();\n\t\t}\n\n\t\tnextScreen = this.proto();\n\t\tso = pl.util.resolvePath(this, 'audio.sfx.nextScreen');\n\t\tanimate = this.properties.animOut || '';\n\n\t\tif (!so) {\n\t\t\tso = pl.util.resolvePath(this, 'game.audio.sfx.button');\n\t\t}\n\n\t\tif (nextScreen) {\n\t\t\tif (animate) {\n\t\t\t\tthis.logo.on('animationend', leave.bind(this)).addClass(animate);\n\t\t\t} else {\n\t\t\t\tleave.call(this);\n\t\t\t}\n\n\t\t\tif (so) so.play();\n\t\t}\n\n\t\treturn nextScreen;\n\t};\n\n\tthis.animateSplashImage = function () {\n\t\tthis.logo.addClass('animated ' + (this.properties.anim || ''));\n\t\tthis.complete();\n\t\treturn this;\n\t};\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90d2lybC1uLXN3aXJsL3NvdXJjZS9qcy9jb21wb25lbnRzL3NjcmVlbi10aXRsZS9iZWhhdmlvci5qcz9lMmU1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxZQUFZOztBQUU3QyxLQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxZQUFZO0FBQzVCLE1BQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6QixNQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7RUFDN0IsQ0FBQyxDQUFDOzs7OztBQUtILEtBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLFlBQVk7QUFDOUIsTUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7O0FBRWxDLE1BQUksS0FBSyxFQUFFO0FBQ1YsT0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztHQUMzRCxNQUFNO0FBQ04sT0FBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7R0FDMUI7O0FBRUQsTUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2IsTUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQzs7QUFFbEQsU0FBTyxJQUFJLENBQUM7RUFDWixDQUFDLENBQUM7O0FBRUgsS0FBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDcEMsTUFBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLE9BQU87QUFDbkMsTUFBSSxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDekMsT0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLE9BQU87QUFDbkMsT0FBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FDNUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3RCLE9BQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7R0FDMUIsQ0FBQyxDQUFDO0VBQ0gsQ0FBQyxDQUFDOztBQUVILEtBQUksQ0FBQyxJQUFJLEdBQUcsWUFBWTtBQUN2QixNQUFJLFVBQVUsRUFBRSxFQUFFLEVBQUUsT0FBTyxDQUFDOztBQUU1QixXQUFTLEtBQUssR0FBSTtBQUNqQixPQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ3BCLGFBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztHQUNsQjs7QUFFRCxZQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQzFCLElBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztBQUN2RCxTQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDOztBQUV4QyxNQUFJLENBQUMsRUFBRSxFQUFFO0FBQ1IsS0FBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO0dBQ3hEOztBQUVELE1BQUksVUFBVSxFQUFFO0FBQ2YsT0FBSSxPQUFPLEVBQUU7QUFDWixRQUFJLENBQUMsSUFBSSxDQUNQLEVBQUUsQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUNwQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDcEIsTUFBTTtBQUNOLFNBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakI7O0FBRUQsT0FBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0dBQ2xCOztBQUVELFNBQU8sVUFBVSxDQUFDO0VBQ2xCLENBQUM7O0FBRUYsS0FBSSxDQUFDLGtCQUFrQixHQUFHLFlBQVk7QUFDckMsTUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDL0QsTUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ2hCLFNBQU8sSUFBSSxDQUFDO0VBQ1osQ0FBQztDQUVGLENBQUMiLCJmaWxlIjoiOC5qcyIsInNvdXJjZXNDb250ZW50IjpbInBsLmdhbWUuY29tcG9uZW50KCdzY3JlZW4tdGl0bGUnLCBmdW5jdGlvbiAoKSB7XG5cblx0dGhpcy5vbigncmVhZHknLCBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5kZWxheSgwLCB0aGlzLm9wZW4pO1xuXHRcdHRoaXMuY2xvc2UodGhpcy5nYW1lLmxvYWRlcik7XG5cdH0pO1xuXG5cdC8qKlxuXHQgKiBTdGFydCB0aGUgdGl0bGUgc2NyZWVuIGxvZ28gYW5pbWF0aW9uIHdoZW4gdGhlIHNjcmVlbiBvcGVucy5cblx0ICovXG5cdHRoaXMub24oJ3VpLW9wZW4nLCBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIGRlbGF5ID0gdGhpcy5wcm9wZXJ0aWVzLmRlbGF5O1xuXG5cdFx0aWYgKGRlbGF5KSB7XG5cdFx0XHR0aGlzLmRlbGF5KHRoaXMucHJvcGVydGllcy5kZWxheSwgdGhpcy5hbmltYXRlU3BsYXNoSW1hZ2UpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmFuaW1hdGVTcGxhc2hJbWFnZSgpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RhcnQoKTtcblx0XHR0aGlzLmdhbWUuc2V0V2FsbHBhcGVyKHRoaXMucHJvcGVydGllcy53YWxscGFwZXIpO1xuXHRcdFxuXHRcdHJldHVybiB0aGlzO1xuXHR9KTtcblxuXHR0aGlzLm9uKCd1aS1jbG9zZScsIGZ1bmN0aW9uKF9ldmVudCkge1xuXHRcdGlmKCF0aGlzLmlzKF9ldmVudC50YXJnZXQpKSByZXR1cm47XG5cdFx0dGhpcy5vbigndHJhbnNpdGlvbmVuZCcsIGZ1bmN0aW9uKF9ldmVudCkge1xuXHRcdFx0aWYoIXRoaXMuaXMoX2V2ZW50LnRhcmdldCkpIHJldHVybjtcblx0XHRcdHRoaXMubG9nby5yZW1vdmVDbGFzcyh0aGlzLnByb3BlcnRpZXMuYW5pbU91dClcblx0XHRcdFx0Lm9mZignYW5pbWF0aW9uZW5kJyk7XG5cdFx0XHR0aGlzLm9mZigndHJhbnNpdGlvbmVuZCcpO1xuXHRcdH0pO1xuXHR9KTtcblxuXHR0aGlzLm5leHQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIG5leHRTY3JlZW4sIHNvLCBhbmltYXRlO1xuXHRcdFxuXHRcdGZ1bmN0aW9uIGxlYXZlICgpIHtcblx0XHRcdHRoaXMuc2NyZWVuLmxlYXZlKCk7XG5cdFx0XHRuZXh0U2NyZWVuLm9wZW4oKTtcblx0XHR9XG5cblx0XHRuZXh0U2NyZWVuID0gdGhpcy5wcm90bygpO1xuXHRcdHNvID0gcGwudXRpbC5yZXNvbHZlUGF0aCh0aGlzLCAnYXVkaW8uc2Z4Lm5leHRTY3JlZW4nKTtcblx0XHRhbmltYXRlID0gdGhpcy5wcm9wZXJ0aWVzLmFuaW1PdXQgfHwgJyc7XG5cblx0XHRpZiAoIXNvKSB7XG5cdFx0XHRzbyA9IHBsLnV0aWwucmVzb2x2ZVBhdGgodGhpcywgJ2dhbWUuYXVkaW8uc2Z4LmJ1dHRvbicpO1xuXHRcdH1cblxuXHRcdGlmIChuZXh0U2NyZWVuKSB7XG5cdFx0XHRpZiAoYW5pbWF0ZSkge1xuXHRcdFx0XHR0aGlzLmxvZ29cblx0XHRcdFx0XHQub24oJ2FuaW1hdGlvbmVuZCcsIGxlYXZlLmJpbmQodGhpcykpXG5cdFx0XHRcdFx0LmFkZENsYXNzKGFuaW1hdGUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bGVhdmUuY2FsbCh0aGlzKTtcblx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRpZiAoc28pIHNvLnBsYXkoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbmV4dFNjcmVlbjtcblx0fTtcblxuXHR0aGlzLmFuaW1hdGVTcGxhc2hJbWFnZSA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLmxvZ28uYWRkQ2xhc3MoJ2FuaW1hdGVkICcgKyAodGhpcy5wcm9wZXJ0aWVzLmFuaW0gfHwgJycpKTtcblx0XHR0aGlzLmNvbXBsZXRlKCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cbn0pO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi90d2lybC1uLXN3aXJsL3NvdXJjZS9qcy9jb21wb25lbnRzL3NjcmVlbi10aXRsZS9iZWhhdmlvci5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 9 */
/***/ function(module, exports) {

	eval("pl.game.component('screen-quit', function () {\n\n\tfunction playButtonSFX(_direction) {\n\t\tvar so;\n\n\t\tif (_direction === \"next\") {\n\t\t\tso = pl.util.resolvePath(this, 'audio.sfx.nextScreen');\n\t\t}\n\n\t\tif (!so) {\n\t\t\tso = pl.util.resolvePath(this, 'game.audio.sfx.button');\n\t\t}\n\t\tif (so) so.play();\n\t}\n\n\t// TODO: Make an automated way to handle this\n\tthis.on('transitionend', function (_event) {\n\t\tif (this.state(this.STATE.LEAVE)) {\n\t\t\tthis.addClass('LEAVE-END');\n\t\t}\n\t});\n\n\tthis.on('ui-open', function (_event) {\n\t\tthis.game.addClass('QUIT-SCREEN');\n\t\tthis.removeClass('LEAVE-END');\n\t});\n\n\tthis.on('ui-leave', function () {\n\t\tthis.game.removeClass('QUIT-SCREEN');\n\t});\n\n\tthis.okay = function () {\n\t\tplayButtonSFX.call(this);\n\t\tthis.game.exit();\n\t};\n\n\tthis.cancel = function () {\n\t\tplayButtonSFX.call(this);\n\t\tthis.leave();\n\t};\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90d2lybC1uLXN3aXJsL3NvdXJjZS9qcy9jb21wb25lbnRzL3NjcmVlbi1xdWl0L2JlaGF2aW9yLmpzP2FmYWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLFlBQVk7O0FBRTVDLFVBQVMsYUFBYSxDQUFFLFVBQVUsRUFBRTtBQUNuQyxNQUFJLEVBQUUsQ0FBQzs7QUFFUCxNQUFJLFVBQVUsS0FBSyxNQUFNLEVBQUU7QUFDMUIsS0FBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO0dBQ3ZEOztBQUVELE1BQUksQ0FBQyxFQUFFLEVBQUU7QUFDUixLQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLHVCQUF1QixDQUFDLENBQUM7R0FDeEQ7QUFDRCxNQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7RUFDbEI7OztBQUdELEtBQUksQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLFVBQVUsTUFBTSxFQUFFO0FBQzFDLE1BQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ2pDLE9BQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7R0FDM0I7RUFDRCxDQUFDLENBQUM7O0FBRUgsS0FBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsVUFBVSxNQUFNLEVBQUU7QUFDcEMsTUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDbEMsTUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztFQUM5QixDQUFDLENBQUM7O0FBRUgsS0FBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsWUFBWTtBQUMvQixNQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQztFQUNyQyxDQUFDLENBQUM7O0FBRUgsS0FBSSxDQUFDLElBQUksR0FBRyxZQUFZO0FBQ3ZCLGVBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekIsTUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztFQUNqQixDQUFDOztBQUVGLEtBQUksQ0FBQyxNQUFNLEdBQUcsWUFBWTtBQUN6QixlQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pCLE1BQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztFQUNiLENBQUM7Q0FFRixDQUFDIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJwbC5nYW1lLmNvbXBvbmVudCgnc2NyZWVuLXF1aXQnLCBmdW5jdGlvbiAoKSB7XG5cblx0ZnVuY3Rpb24gcGxheUJ1dHRvblNGWCAoX2RpcmVjdGlvbikge1xuXHRcdHZhciBzbztcblxuXHRcdGlmIChfZGlyZWN0aW9uID09PSBcIm5leHRcIikge1xuXHRcdFx0c28gPSBwbC51dGlsLnJlc29sdmVQYXRoKHRoaXMsICdhdWRpby5zZngubmV4dFNjcmVlbicpO1xuXHRcdH1cblxuXHRcdGlmICghc28pIHtcblx0XHRcdHNvID0gcGwudXRpbC5yZXNvbHZlUGF0aCh0aGlzLCAnZ2FtZS5hdWRpby5zZnguYnV0dG9uJyk7XG5cdFx0fVxuXHRcdGlmIChzbykgc28ucGxheSgpO1xuXHR9XG5cblx0Ly8gVE9ETzogTWFrZSBhbiBhdXRvbWF0ZWQgd2F5IHRvIGhhbmRsZSB0aGlzXG5cdHRoaXMub24oJ3RyYW5zaXRpb25lbmQnLCBmdW5jdGlvbiAoX2V2ZW50KSB7XG5cdFx0aWYgKHRoaXMuc3RhdGUodGhpcy5TVEFURS5MRUFWRSkpIHtcblx0XHRcdHRoaXMuYWRkQ2xhc3MoJ0xFQVZFLUVORCcpO1x0XG5cdFx0fVxuXHR9KTtcblx0XG5cdHRoaXMub24oJ3VpLW9wZW4nLCBmdW5jdGlvbiAoX2V2ZW50KSB7XG5cdFx0dGhpcy5nYW1lLmFkZENsYXNzKCdRVUlULVNDUkVFTicpO1xuXHRcdHRoaXMucmVtb3ZlQ2xhc3MoJ0xFQVZFLUVORCcpO1xuXHR9KTtcblxuXHR0aGlzLm9uKCd1aS1sZWF2ZScsIGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLmdhbWUucmVtb3ZlQ2xhc3MoJ1FVSVQtU0NSRUVOJyk7XG5cdH0pO1xuXHRcblx0dGhpcy5va2F5ID0gZnVuY3Rpb24gKCkge1xuXHRcdHBsYXlCdXR0b25TRlguY2FsbCh0aGlzKTtcblx0XHR0aGlzLmdhbWUuZXhpdCgpO1xuXHR9O1xuXG5cdHRoaXMuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuXHRcdHBsYXlCdXR0b25TRlguY2FsbCh0aGlzKTtcblx0XHR0aGlzLmxlYXZlKCk7XG5cdH07XG5cbn0pO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi90d2lybC1uLXN3aXJsL3NvdXJjZS9qcy9jb21wb25lbnRzL3NjcmVlbi1xdWl0L2JlaGF2aW9yLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 10 */
/***/ function(module, exports) {

	eval("pl.game.component('dropzone', function () {\n\n\tfunction deQ(_id) {\n\t\tif (this.requiredQueue && this.isMemberSafe('requiredQueue') && this.requiredQueue.has(_id)) {\n\t\t\treturn this.requiredQueue.ready(_id);\n\t\t}\n\t}\n\n\tthis.entity('.area', function () {\n\n\t\tthis.cache = null;\n\n\t\tthis.respond('grab', function () {\n\t\t\tvar sfx = this.audio.sfx.drag;\n\n\t\t\tif (sfx) sfx.play();\n\n\t\t\tthis.cache = {\n\t\t\t\tposition: this.absolutePosition().dec(this.game.absolutePosition()),\n\t\t\t\tsize: this.size()\n\t\t\t};\n\t\t});\n\n\t\tthis.respond('release', function (_event) {\n\t\t\tvar point, scale, sfx;\n\n\t\t\tsfx = {\n\t\t\t\tcorrect: this.audio.sfx.correct,\n\t\t\t\tincorrect: this.audio.sfx.incorrect,\n\t\t\t\tdrop: this.audio.sfx.drop\n\t\t\t};\n\n\t\t\tif ((scale = this.game.transformScale().x) !== 1) {\n\t\t\t\tpoint = [_event.state.start.point[0] + scale * _event.state.progress.distance[0], _event.state.start.point[1] + scale * _event.state.progress.distance[1]];\n\t\t\t} else {\n\t\t\t\tpoint = _event.state.progress.point;\n\t\t\t}\n\n\t\t\tif (point && this.isPointInBounds(point)) {\n\t\t\t\tif (this.takes(_event.state.$draggable.id())) {\n\t\t\t\t\t_event.state.$draggable.removeClass('PLUCKED');\n\t\t\t\t\t_event.state.$helper.addClass('DROPED');\n\n\t\t\t\t\tthis.drop(_event.state.$draggable);\n\n\t\t\t\t\tif (sfx.correct) sfx.correct.play();\n\n\t\t\t\t\treturn;\n\t\t\t\t} else if (sfx.incorrect) {\n\t\t\t\t\tsfx.incorrect.play();\n\t\t\t\t}\n\n\t\t\t\tif (sfx.drop) sfx.drop.play();\n\t\t\t}\n\n\t\t\t_event.state.$helper.addClass('RETURN');\n\t\t});\n\t});\n\n\tthis.on('initialize', function () {\n\t\tthis.takes().forEach(this.bind(function (_id) {\n\t\t\tthis.require(_id);\n\t\t}));\n\t});\n\n\tthis.takes = function (_id) {\n\t\tvar takes = this.properties.take;\n\t\t// if no pl-take attribute is defined then\n\t\t// the dropzone will take any draggable.\n\t\tif (!takes) return _id != null ? true : [];\n\n\t\treturn arguments.length ? !! ~takes.indexOf(_id) : takes;\n\t};\n\n\tthis.isPointInBounds = function (_point, _y) {\n\t\tvar point, scale;\n\n\t\tpoint = pl.Point.create(arguments);\n\n\t\tif (point.x >= this.cache.position.x && point.x <= this.cache.position.x + this.cache.size.width) {\n\t\t\tif (point.y >= this.cache.position.y && point.y <= this.cache.position.y + this.cache.size.height) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t};\n\n\tthis.isBoxInBounds = function (_point, _size) {\n\t\t// comming soon!\n\t};\n\n\tthis.behavior('drop', function (_$thing) {\n\t\tvar sfx = pl.util.resolvePath(this, 'audio.sfx.drop');\n\n\t\tif (sfx) sfx.play();\n\n\t\tdeQ.call(this, _$thing.id());\n\n\t\treturn {\n\t\t\tbehaviorTarget: _$thing\n\t\t};\n\t});\n});//@ sourceMappingURL=data:application/json;base64,");

/***/ },
/* 11 */
/***/ function(module, exports) {

	eval("pl.game.component('reveal', function () {\n\n\tthis.items = null;\n\tthis.currentAudio = null;\n\n\tthis.on('ready', function () {\n\t\tthis.items = this.findOwn('li');\n\t});\n\n\tthis.item = function (_id) {\n\t\tvar vo, index;\n\n\t\tif (this.shouldRevealItem(_id) === false) return false;\n\n\t\tif (typeof _id === 'number') {\n\t\t\tthis.select(this.items[_id]);\n\t\t\tthis.audio.voiceOver[_id].play();\n\t\t\tthis.currentAudio = this.audio.voiceOver[_id];\n\t\t} else if (typeof _id === 'string') {\n\t\t\tif (this[_id]) {\n\t\t\t\tthis.select(this[_id]);\n\n\t\t\t\tif (this.audio && this.audio.voiceOver) {\n\t\t\t\t\tindex = this[_id].index();\n\t\t\t\t\tvo = this.audio.voiceOver[_id] || this.audio.voiceOver[index];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.select(_id);\n\n\t\t\t\tindex = this.findOwn(_id).index();\n\t\t\t\tvo = pl.util.resolvePath(this, 'audio.voiceOver[' + index + ']');\n\t\t\t}\n\n\t\t\tif (vo) (this.currentAudio = vo).play();\n\t\t}\n\n\t\treturn this;\n\t};\n\n\tthis.shouldRevealItem = function () {\n\t\treturn true;\n\t};\n\n\tthis.currentItem = function () {\n\t\treturn this.findOwn('li.SELECTED');\n\t};\n});//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90d2lybC1uLXN3aXJsL3NvdXJjZS9qcy9jb21wb25lbnRzL3JldmVhbC9iZWhhdmlvci5qcz80NGQ1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxZQUFZOztBQUV2QyxLQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztBQUNsQixLQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQzs7QUFFekIsS0FBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsWUFBWTtBQUM1QixNQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO0VBQy9CLENBQUMsQ0FBQzs7QUFFSCxLQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsR0FBRyxFQUFFO0FBQzFCLE1BQUksRUFBRSxFQUFFLEtBQUssQ0FBQzs7QUFFZCxNQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxLQUFLLEVBQUUsT0FBTyxLQUFLLENBQUM7O0FBRXZELE1BQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO0FBQzVCLE9BQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzdCLE9BQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2pDLE9BQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDOUMsTUFFSSxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsRUFBRTtBQUNqQyxPQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUNkLFFBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7O0FBRXZCLFFBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRTtBQUN2QyxVQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQzFCLE9BQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUM5RDtJQUNELE1BQU07QUFDTixRQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDOztBQUVqQixTQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNsQyxNQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLGtCQUFrQixHQUFDLEtBQUssR0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3RDs7QUFFRCxPQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDO0dBQ3hDOztBQUVELFNBQU8sSUFBSSxDQUFDO0VBQ1osQ0FBQzs7QUFFRixLQUFJLENBQUMsZ0JBQWdCLEdBQUcsWUFBWTtBQUNuQyxTQUFPLElBQUksQ0FBQztFQUNaLENBQUM7O0FBRUYsS0FBSSxDQUFDLFdBQVcsR0FBRyxZQUFZO0FBQzlCLFNBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztFQUNuQyxDQUFDO0NBRUYsQ0FBQyIsImZpbGUiOiIxMS5qcyIsInNvdXJjZXNDb250ZW50IjpbInBsLmdhbWUuY29tcG9uZW50KCdyZXZlYWwnLCBmdW5jdGlvbiAoKSB7XG5cdFxuXHR0aGlzLml0ZW1zID0gbnVsbDtcblx0dGhpcy5jdXJyZW50QXVkaW8gPSBudWxsO1xuXG5cdHRoaXMub24oJ3JlYWR5JywgZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMuaXRlbXMgPSB0aGlzLmZpbmRPd24oJ2xpJylcblx0fSk7XG5cblx0dGhpcy5pdGVtID0gZnVuY3Rpb24gKF9pZCkge1xuXHRcdHZhciB2bywgaW5kZXg7XG5cblx0XHRpZiAodGhpcy5zaG91bGRSZXZlYWxJdGVtKF9pZCkgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG5cblx0XHRpZiAodHlwZW9mIF9pZCA9PT0gJ251bWJlcicpIHtcblx0XHRcdHRoaXMuc2VsZWN0KHRoaXMuaXRlbXNbX2lkXSk7XG5cdFx0XHR0aGlzLmF1ZGlvLnZvaWNlT3ZlcltfaWRdLnBsYXkoKTtcblx0XHRcdHRoaXMuY3VycmVudEF1ZGlvID0gdGhpcy5hdWRpby52b2ljZU92ZXJbX2lkXTtcblx0XHR9XG5cdFx0XHRcblx0XHRlbHNlIGlmICh0eXBlb2YgX2lkID09PSAnc3RyaW5nJykge1xuXHRcdFx0aWYgKHRoaXNbX2lkXSkge1xuXHRcdFx0XHR0aGlzLnNlbGVjdCh0aGlzW19pZF0pO1xuXG5cdFx0XHRcdGlmICh0aGlzLmF1ZGlvICYmIHRoaXMuYXVkaW8udm9pY2VPdmVyKSB7XG5cdFx0XHRcdFx0aW5kZXggPSB0aGlzW19pZF0uaW5kZXgoKTtcblx0XHRcdFx0XHR2byA9IHRoaXMuYXVkaW8udm9pY2VPdmVyW19pZF0gfHwgdGhpcy5hdWRpby52b2ljZU92ZXJbaW5kZXhdO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLnNlbGVjdChfaWQpO1xuXG5cdFx0XHRcdGluZGV4ID0gdGhpcy5maW5kT3duKF9pZCkuaW5kZXgoKTtcblx0XHRcdFx0dm8gPSBwbC51dGlsLnJlc29sdmVQYXRoKHRoaXMsICdhdWRpby52b2ljZU92ZXJbJytpbmRleCsnXScpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodm8pICh0aGlzLmN1cnJlbnRBdWRpbyA9IHZvKS5wbGF5KCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0dGhpcy5zaG91bGRSZXZlYWxJdGVtID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9O1xuXG5cdHRoaXMuY3VycmVudEl0ZW0gPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZmluZE93bignbGkuU0VMRUNURUQnKTtcblx0fTtcblxufSk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3R3aXJsLW4tc3dpcmwvc291cmNlL2pzL2NvbXBvbmVudHMvcmV2ZWFsL2JlaGF2aW9yLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }
/******/ ]);